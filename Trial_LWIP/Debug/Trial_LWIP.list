
Trial_LWIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a9ac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000039f0  0801abac  0801abac  0002abac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e59c  0801e59c  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801e59c  0801e59c  0002e59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e5a4  0801e5a4  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e5a4  0801e5a4  0002e5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e5a8  0801e5a8  0002e5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0801e5ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000098  0801e644  00030098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000138  0801e6e4  00030138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00011240  200001d8  0801e784  000301d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20011418  0801e784  00031418  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003e28c  00000000  00000000  00030206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000096b4  00000000  00000000  0006e492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002d48  00000000  00000000  00077b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002b98  00000000  00000000  0007a890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ce16  00000000  00000000  0007d428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00044a79  00000000  00000000  000ba23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00126c9f  00000000  00000000  000fecb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00225956  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c4f0  00000000  00000000  002259a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	0801ab94 	.word	0x0801ab94

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	0801ab94 	.word	0x0801ab94

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4a07      	ldr	r2, [pc, #28]	; (8000640 <vApplicationGetIdleTaskMemory+0x2c>)
 8000624:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <vApplicationGetIdleTaskMemory+0x30>)
 800062a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000632:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	20000e7c 	.word	0x20000e7c
 8000644:	20000ed0 	.word	0x20000ed0

08000648 <MqttClientSubTask>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void MqttClientSubTask(void const *argument)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//waiting for valid ip address
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <MqttClientSubTask+0x60>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d007      	beq.n	8000668 <MqttClientSubTask+0x20>
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MqttClientSubTask+0x60>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d003      	beq.n	8000668 <MqttClientSubTask+0x20>
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MqttClientSubTask+0x60>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d104      	bne.n	8000672 <MqttClientSubTask+0x2a>
		{
			osDelay(1000);
 8000668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066c:	f006 ffb0 	bl	80075d0 <osDelay>
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 8000670:	e7ee      	b.n	8000650 <MqttClientSubTask+0x8>
			continue;
		}
		else
		{
			printf("DHCP/Static IP O.K.\n");
 8000672:	480e      	ldr	r0, [pc, #56]	; (80006ac <MqttClientSubTask+0x64>)
 8000674:	f019 fa3a 	bl	8019aec <puts>
			break;
 8000678:	bf00      	nop
//	MqttConnectBroker();
//				osDelay(1000);

	while(1)
	{
		if(!mqttClient.isconnected)
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MqttClientSubTask+0x68>)
 800067c:	6a1b      	ldr	r3, [r3, #32]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d109      	bne.n	8000696 <MqttClientSubTask+0x4e>
		{
			//try to connect to the broker
			MQTTDisconnect(&mqttClient);
 8000682:	480b      	ldr	r0, [pc, #44]	; (80006b0 <MqttClientSubTask+0x68>)
 8000684:	f018 f914 	bl	80188b0 <MQTTDisconnect>
			MqttConnectBroker();
 8000688:	f000 f838 	bl	80006fc <MqttConnectBroker>
			osDelay(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000690:	f006 ff9e 	bl	80075d0 <osDelay>
 8000694:	e7f1      	b.n	800067a <MqttClientSubTask+0x32>
		}
		else
		{
//			EngagePin1();
			MQTTYield(&mqttClient, 1000); //handle timer
 8000696:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MqttClientSubTask+0x68>)
 800069c:	f017 fe42 	bl	8018324 <MQTTYield>
			osDelay(100);
 80006a0:	2064      	movs	r0, #100	; 0x64
 80006a2:	f006 ff95 	bl	80075d0 <osDelay>
		if(!mqttClient.isconnected)
 80006a6:	e7e8      	b.n	800067a <MqttClientSubTask+0x32>
 80006a8:	20001920 	.word	0x20001920
 80006ac:	0801abac 	.word	0x0801abac
 80006b0:	20000214 	.word	0x20000214

080006b4 <MqttClientPubTask>:
		}
	}
}

void MqttClientPubTask(void const *argument)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	const char* str = "MQTT message from STM32";
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MqttClientPubTask+0x3c>)
 80006be:	61fb      	str	r3, [r7, #28]
	MQTTMessage message;

	while(1)
	{
		if(mqttClient.isconnected)
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MqttClientPubTask+0x40>)
 80006c2:	6a1b      	ldr	r3, [r3, #32]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d00d      	beq.n	80006e4 <MqttClientPubTask+0x30>
		{
			message.payload = (void*)str;
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	617b      	str	r3, [r7, #20]
			message.payloadlen = strlen(str);
 80006cc:	69f8      	ldr	r0, [r7, #28]
 80006ce:	f7ff fdc1 	bl	8000254 <strlen>
 80006d2:	4603      	mov	r3, r0
 80006d4:	61bb      	str	r3, [r7, #24]

			MQTTPublish(&mqttClient, "test", &message); //publish a message
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	461a      	mov	r2, r3
 80006dc:	4906      	ldr	r1, [pc, #24]	; (80006f8 <MqttClientPubTask+0x44>)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MqttClientPubTask+0x40>)
 80006e0:	f018 f820 	bl	8018724 <MQTTPublish>
		}

		osDelay(5000);
 80006e4:	f241 3088 	movw	r0, #5000	; 0x1388
 80006e8:	f006 ff72 	bl	80075d0 <osDelay>
		if(mqttClient.isconnected)
 80006ec:	e7e8      	b.n	80006c0 <MqttClientPubTask+0xc>
 80006ee:	bf00      	nop
 80006f0:	0801abc0 	.word	0x0801abc0
 80006f4:	20000214 	.word	0x20000214
 80006f8:	0801abd8 	.word	0x0801abd8

080006fc <MqttConnectBroker>:
	}
}

int MqttConnectBroker()
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b09c      	sub	sp, #112	; 0x70
 8000700:	af04      	add	r7, sp, #16
	int ret;

	NewNetwork(&net);
 8000702:	4832      	ldr	r0, [pc, #200]	; (80007cc <MqttConnectBroker+0xd0>)
 8000704:	f018 f96c 	bl	80189e0 <NewNetwork>
	ret = ConnectNetwork(&net, BROKER_IP, MQTT_PORT);
 8000708:	f240 725b 	movw	r2, #1883	; 0x75b
 800070c:	4930      	ldr	r1, [pc, #192]	; (80007d0 <MqttConnectBroker+0xd4>)
 800070e:	482f      	ldr	r0, [pc, #188]	; (80007cc <MqttConnectBroker+0xd0>)
 8000710:	f018 f988 	bl	8018a24 <ConnectNetwork>
 8000714:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 8000716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000718:	2b00      	cmp	r3, #0
 800071a:	d005      	beq.n	8000728 <MqttConnectBroker+0x2c>
	{
		printf("ConnectNetwork failed.\n");
 800071c:	482d      	ldr	r0, [pc, #180]	; (80007d4 <MqttConnectBroker+0xd8>)
 800071e:	f019 f9e5 	bl	8019aec <puts>
		return -1;
 8000722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000726:	e04c      	b.n	80007c2 <MqttConnectBroker+0xc6>
	}

	MQTTClientInit(&mqttClient, &net, 1000, sndBuffer, sizeof(sndBuffer), rcvBuffer, sizeof(rcvBuffer));
 8000728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <MqttConnectBroker+0xdc>)
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <MqttConnectBroker+0xe0>)
 800073a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800073e:	4923      	ldr	r1, [pc, #140]	; (80007cc <MqttConnectBroker+0xd0>)
 8000740:	4827      	ldr	r0, [pc, #156]	; (80007e0 <MqttConnectBroker+0xe4>)
 8000742:	f017 fa8f 	bl	8017c64 <MQTTClientInit>

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 8000746:	4a27      	ldr	r2, [pc, #156]	; (80007e4 <MqttConnectBroker+0xe8>)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4611      	mov	r1, r2
 800074c:	2258      	movs	r2, #88	; 0x58
 800074e:	4618      	mov	r0, r3
 8000750:	f019 f930 	bl	80199b4 <memcpy>
	data.willFlag = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	77fb      	strb	r3, [r7, #31]
	data.MQTTVersion = 3;
 8000758:	2303      	movs	r3, #3
 800075a:	733b      	strb	r3, [r7, #12]
	data.clientID.cstring = "STM32F4";
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <MqttConnectBroker+0xec>)
 800075e:	613b      	str	r3, [r7, #16]
	data.username.cstring = "STM32F4";
 8000760:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MqttConnectBroker+0xec>)
 8000762:	647b      	str	r3, [r7, #68]	; 0x44
	data.password.cstring = "";
 8000764:	4b21      	ldr	r3, [pc, #132]	; (80007ec <MqttConnectBroker+0xf0>)
 8000766:	653b      	str	r3, [r7, #80]	; 0x50
	data.keepAliveInterval = 60;
 8000768:	233c      	movs	r3, #60	; 0x3c
 800076a:	83bb      	strh	r3, [r7, #28]
	data.cleansession = 1;
 800076c:	2301      	movs	r3, #1
 800076e:	77bb      	strb	r3, [r7, #30]

	ret = MQTTConnect(&mqttClient, &data);
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	4619      	mov	r1, r3
 8000774:	481a      	ldr	r0, [pc, #104]	; (80007e0 <MqttConnectBroker+0xe4>)
 8000776:	f017 feb7 	bl	80184e8 <MQTTConnect>
 800077a:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 800077c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800077e:	2b00      	cmp	r3, #0
 8000780:	d004      	beq.n	800078c <MqttConnectBroker+0x90>
	{
		printf("MQTTConnect failed.\n");
 8000782:	481b      	ldr	r0, [pc, #108]	; (80007f0 <MqttConnectBroker+0xf4>)
 8000784:	f019 f9b2 	bl	8019aec <puts>
		return ret;
 8000788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800078a:	e01a      	b.n	80007c2 <MqttConnectBroker+0xc6>
	}
	osDelay(500);
 800078c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000790:	f006 ff1e 	bl	80075d0 <osDelay>

	ret = MQTTSubscribe(&mqttClient, "test", QOS0, MqttMessageArrived);
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MqttConnectBroker+0xf8>)
 8000796:	2200      	movs	r2, #0
 8000798:	4917      	ldr	r1, [pc, #92]	; (80007f8 <MqttConnectBroker+0xfc>)
 800079a:	4811      	ldr	r0, [pc, #68]	; (80007e0 <MqttConnectBroker+0xe4>)
 800079c:	f017 ffac 	bl	80186f8 <MQTTSubscribe>
 80007a0:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 80007a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d004      	beq.n	80007b2 <MqttConnectBroker+0xb6>
	{
		printf("MQTTSubscribe failed.\n");
 80007a8:	4814      	ldr	r0, [pc, #80]	; (80007fc <MqttConnectBroker+0x100>)
 80007aa:	f019 f99f 	bl	8019aec <puts>
		return ret;
 80007ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007b0:	e007      	b.n	80007c2 <MqttConnectBroker+0xc6>
	}
	osDelay(500);
 80007b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007b6:	f006 ff0b 	bl	80075d0 <osDelay>

	printf("MQTT_ConnectBroker O.K.\n");
 80007ba:	4811      	ldr	r0, [pc, #68]	; (8000800 <MqttConnectBroker+0x104>)
 80007bc:	f019 f996 	bl	8019aec <puts>
	return MQTT_SUCCESS;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3760      	adds	r7, #96	; 0x60
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200001fc 	.word	0x200001fc
 80007d0:	0801abe0 	.word	0x0801abe0
 80007d4:	0801abec 	.word	0x0801abec
 80007d8:	2000067c 	.word	0x2000067c
 80007dc:	2000027c 	.word	0x2000027c
 80007e0:	20000214 	.word	0x20000214
 80007e4:	0801ac54 	.word	0x0801ac54
 80007e8:	0801ac04 	.word	0x0801ac04
 80007ec:	0801ac0c 	.word	0x0801ac0c
 80007f0:	0801ac10 	.word	0x0801ac10
 80007f4:	08000805 	.word	0x08000805
 80007f8:	0801abd8 	.word	0x0801abd8
 80007fc:	0801ac24 	.word	0x0801ac24
 8000800:	0801ac3c 	.word	0x0801ac3c

08000804 <MqttMessageArrived>:

void MqttMessageArrived(MessageData* msg)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin); //toggle pin when new message arrived
 800080c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000810:	480f      	ldr	r0, [pc, #60]	; (8000850 <MqttMessageArrived+0x4c>)
 8000812:	f002 fd98 	bl	8003346 <HAL_GPIO_TogglePin>

	MQTTMessage* message = msg->message;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	60fb      	str	r3, [r7, #12]
	memset(msgBuffer, 0, sizeof(msgBuffer));
 800081c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000820:	2100      	movs	r1, #0
 8000822:	480c      	ldr	r0, [pc, #48]	; (8000854 <MqttMessageArrived+0x50>)
 8000824:	f019 f8d4 	bl	80199d0 <memset>
	memcpy(msgBuffer, message->payload,message->payloadlen);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	6899      	ldr	r1, [r3, #8]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	461a      	mov	r2, r3
 8000832:	4808      	ldr	r0, [pc, #32]	; (8000854 <MqttMessageArrived+0x50>)
 8000834:	f019 f8be 	bl	80199b4 <memcpy>

	printf("MQTT MSG[%d]:%s\n", (int)message->payloadlen, msgBuffer);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	4a05      	ldr	r2, [pc, #20]	; (8000854 <MqttMessageArrived+0x50>)
 800083e:	4619      	mov	r1, r3
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <MqttMessageArrived+0x54>)
 8000842:	f019 f8cd 	bl	80199e0 <iprintf>
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40020400 	.word	0x40020400
 8000854:	20000a7c 	.word	0x20000a7c
 8000858:	0801acac 	.word	0x0801acac

0800085c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000860:	f3bf 8f4f 	dsb	sy
}
 8000864:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000866:	f3bf 8f6f 	isb	sy
}
 800086a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <SCB_EnableICache+0x48>)
 800086e:	2200      	movs	r2, #0
 8000870:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000874:	f3bf 8f4f 	dsb	sy
}
 8000878:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800087a:	f3bf 8f6f 	isb	sy
}
 800087e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <SCB_EnableICache+0x48>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <SCB_EnableICache+0x48>)
 8000886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800088c:	f3bf 8f4f 	dsb	sy
}
 8000890:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000892:	f3bf 8f6f 	isb	sy
}
 8000896:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80008ae:	4b1f      	ldr	r3, [pc, #124]	; (800092c <SCB_EnableDCache+0x84>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008b6:	f3bf 8f4f 	dsb	sy
}
 80008ba:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <SCB_EnableDCache+0x84>)
 80008be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008c2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	0b5b      	lsrs	r3, r3, #13
 80008c8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008cc:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	08db      	lsrs	r3, r3, #3
 80008d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008d6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	015a      	lsls	r2, r3, #5
 80008dc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008e0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008e6:	4911      	ldr	r1, [pc, #68]	; (800092c <SCB_EnableDCache+0x84>)
 80008e8:	4313      	orrs	r3, r2
 80008ea:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	1e5a      	subs	r2, r3, #1
 80008f2:	60ba      	str	r2, [r7, #8]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1ef      	bne.n	80008d8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	1e5a      	subs	r2, r3, #1
 80008fc:	60fa      	str	r2, [r7, #12]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d1e5      	bne.n	80008ce <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000902:	f3bf 8f4f 	dsb	sy
}
 8000906:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <SCB_EnableDCache+0x84>)
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	4a07      	ldr	r2, [pc, #28]	; (800092c <SCB_EnableDCache+0x84>)
 800090e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000912:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000914:	f3bf 8f4f 	dsb	sy
}
 8000918:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800091a:	f3bf 8f6f 	isb	sy
}
 800091e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <HAL_SPI_TxRxCpltCallback>:
extern void MqttClientPubTask(void const *argument); //mqtt client publish task function
extern void EngagePin(void);
extern void EngagePin1(void);
extern void DisEngagePin1(void);

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	if (buffer_rx[0]==1) {
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_SPI_TxRxCpltCallback+0x30>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d105      	bne.n	800094c <HAL_SPI_TxRxCpltCallback+0x1c>
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2101      	movs	r1, #1
 8000944:	4807      	ldr	r0, [pc, #28]	; (8000964 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000946:	f002 fce5 	bl	8003314 <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	}

}
 800094a:	e004      	b.n	8000956 <HAL_SPI_TxRxCpltCallback+0x26>
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2101      	movs	r1, #1
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000952:	f002 fcdf 	bl	8003314 <HAL_GPIO_WritePin>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200018c8 	.word	0x200018c8
 8000964:	40020400 	.word	0x40020400

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b5b0      	push	{r4, r5, r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800096e:	f000 fa1b 	bl	8000da8 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000972:	f7ff ff73 	bl	800085c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000976:	f7ff ff97 	bl	80008a8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097a:	f000 feff 	bl	800177c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097e:	f000 f821 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000982:	f000 f92b 	bl	8000bdc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000986:	f000 f8cb 	bl	8000b20 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800098a:	f000 f8f9 	bl	8000b80 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 800098e:	f000 f889 	bl	8000aa4 <MX_SPI1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <main+0x54>)
 8000994:	1d3c      	adds	r4, r7, #4
 8000996:	461d      	mov	r5, r3
 8000998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800099c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f006 fdc5 	bl	8007538 <osThreadCreate>
 80009ae:	4603      	mov	r3, r0
 80009b0:	4a03      	ldr	r2, [pc, #12]	; (80009c0 <main+0x58>)
 80009b2:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009b4:	f006 fda9 	bl	800750a <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <main+0x50>
 80009ba:	bf00      	nop
 80009bc:	0801acf4 	.word	0x0801acf4
 80009c0:	200018c4 	.word	0x200018c4

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b094      	sub	sp, #80	; 0x50
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	2234      	movs	r2, #52	; 0x34
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f018 fffc 	bl	80199d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009e8:	f002 fe10 	bl	800360c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ec:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <SystemClock_Config+0xd8>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	4a2a      	ldr	r2, [pc, #168]	; (8000a9c <SystemClock_Config+0xd8>)
 80009f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f6:	6413      	str	r3, [r2, #64]	; 0x40
 80009f8:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <SystemClock_Config+0xd8>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a04:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <SystemClock_Config+0xdc>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a25      	ldr	r2, [pc, #148]	; (8000aa0 <SystemClock_Config+0xdc>)
 8000a0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <SystemClock_Config+0xdc>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a20:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a26:	2302      	movs	r3, #2
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a30:	2304      	movs	r3, #4
 8000a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a34:	23d8      	movs	r3, #216	; 0xd8
 8000a36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a3c:	2309      	movs	r3, #9
 8000a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f002 fe3f 	bl	80036cc <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a54:	f000 fa0c 	bl	8000e70 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a58:	f002 fde8 	bl	800362c <HAL_PWREx_EnableOverDrive>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a62:	f000 fa05 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a66:	230f      	movs	r3, #15
 8000a68:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	2107      	movs	r1, #7
 8000a84:	4618      	mov	r0, r3
 8000a86:	f003 f8cf 	bl	8003c28 <HAL_RCC_ClockConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a90:	f000 f9ee 	bl	8000e70 <Error_Handler>
  }
}
 8000a94:	bf00      	nop
 8000a96:	3750      	adds	r7, #80	; 0x50
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40007000 	.word	0x40007000

08000aa4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000aaa:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <MX_SPI1_Init+0x78>)
 8000aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000abe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ac2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000ada:	2238      	movs	r2, #56	; 0x38
 8000adc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000af2:	2207      	movs	r2, #7
 8000af4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000afe:	2208      	movs	r2, #8
 8000b00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_SPI1_Init+0x74>)
 8000b04:	f003 ff10 	bl	8004928 <HAL_SPI_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b0e:	f000 f9af 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200012d0 	.word	0x200012d0
 8000b1c:	40013000 	.word	0x40013000

08000b20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <MX_USART3_UART_Init+0x5c>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b64:	f004 ff1a 	bl	800599c <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b6e:	f000 f97f 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20001334 	.word	0x20001334
 8000b7c:	40004800 	.word	0x40004800

08000b80 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8e:	2206      	movs	r2, #6
 8000b90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b94:	2202      	movs	r2, #2
 8000b96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc4:	f002 fbd9 	bl	800337a <HAL_PCD_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bce:	f000 f94f 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200013bc 	.word	0x200013bc

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	; 0x30
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	4b47      	ldr	r3, [pc, #284]	; (8000d10 <MX_GPIO_Init+0x134>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a46      	ldr	r2, [pc, #280]	; (8000d10 <MX_GPIO_Init+0x134>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b44      	ldr	r3, [pc, #272]	; (8000d10 <MX_GPIO_Init+0x134>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	61bb      	str	r3, [r7, #24]
 8000c08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0a:	4b41      	ldr	r3, [pc, #260]	; (8000d10 <MX_GPIO_Init+0x134>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a40      	ldr	r2, [pc, #256]	; (8000d10 <MX_GPIO_Init+0x134>)
 8000c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b3e      	ldr	r3, [pc, #248]	; (8000d10 <MX_GPIO_Init+0x134>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b3b      	ldr	r3, [pc, #236]	; (8000d10 <MX_GPIO_Init+0x134>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a3a      	ldr	r2, [pc, #232]	; (8000d10 <MX_GPIO_Init+0x134>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b38      	ldr	r3, [pc, #224]	; (8000d10 <MX_GPIO_Init+0x134>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <MX_GPIO_Init+0x134>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a34      	ldr	r2, [pc, #208]	; (8000d10 <MX_GPIO_Init+0x134>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b32      	ldr	r3, [pc, #200]	; (8000d10 <MX_GPIO_Init+0x134>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c52:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <MX_GPIO_Init+0x134>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a2e      	ldr	r2, [pc, #184]	; (8000d10 <MX_GPIO_Init+0x134>)
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <MX_GPIO_Init+0x134>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0308 	and.w	r3, r3, #8
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c6a:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <MX_GPIO_Init+0x134>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a28      	ldr	r2, [pc, #160]	; (8000d10 <MX_GPIO_Init+0x134>)
 8000c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <MX_GPIO_Init+0x134>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c88:	4822      	ldr	r0, [pc, #136]	; (8000d14 <MX_GPIO_Init+0x138>)
 8000c8a:	f002 fb43 	bl	8003314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2140      	movs	r1, #64	; 0x40
 8000c92:	4821      	ldr	r0, [pc, #132]	; (8000d18 <MX_GPIO_Init+0x13c>)
 8000c94:	f002 fb3e 	bl	8003314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	481b      	ldr	r0, [pc, #108]	; (8000d1c <MX_GPIO_Init+0x140>)
 8000cb0:	f002 f984 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000cb4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4811      	ldr	r0, [pc, #68]	; (8000d14 <MX_GPIO_Init+0x138>)
 8000cce:	f002 f975 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cd2:	2340      	movs	r3, #64	; 0x40
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480b      	ldr	r0, [pc, #44]	; (8000d18 <MX_GPIO_Init+0x13c>)
 8000cea:	f002 f967 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_GPIO_Init+0x13c>)
 8000d02:	f002 f95b 	bl	8002fbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d06:	bf00      	nop
 8000d08:	3730      	adds	r7, #48	; 0x30
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020400 	.word	0x40020400
 8000d18:	40021800 	.word	0x40021800
 8000d1c:	40020800 	.word	0x40020800

08000d20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d20:	b5b0      	push	{r4, r5, r7, lr}
 8000d22:	b090      	sub	sp, #64	; 0x40
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000d28:	f005 fd94 	bl	8006854 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  osThreadDef(mqttClientSubTask, MqttClientSubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2); //subscribe task
 8000d2c:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <StartDefaultTask+0x6c>)
 8000d2e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000d32:	461d      	mov	r5, r3
 8000d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	osThreadDef(mqttClientPubTask, MqttClientPubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2); //publish task
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <StartDefaultTask+0x70>)
 8000d42:	f107 0408 	add.w	r4, r7, #8
 8000d46:	461d      	mov	r5, r3
 8000d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	mqttClientSubTaskHandle = osThreadCreate(osThread(mqttClientSubTask), NULL);
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f006 fbec 	bl	8007538 <osThreadCreate>
 8000d60:	4603      	mov	r3, r0
 8000d62:	4a0c      	ldr	r2, [pc, #48]	; (8000d94 <StartDefaultTask+0x74>)
 8000d64:	6013      	str	r3, [r2, #0]
  	mqttClientPubTaskHandle = osThreadCreate(osThread(mqttClientPubTask), NULL);
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f006 fbe3 	bl	8007538 <osThreadCreate>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <StartDefaultTask+0x78>)
 8000d76:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
	  HAL_SPI_TransmitReceive_IT(&hspi1, buffer_tx, buffer_rx, 1);
 8000d78:	2301      	movs	r3, #1
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <StartDefaultTask+0x7c>)
 8000d7c:	4908      	ldr	r1, [pc, #32]	; (8000da0 <StartDefaultTask+0x80>)
 8000d7e:	4809      	ldr	r0, [pc, #36]	; (8000da4 <StartDefaultTask+0x84>)
 8000d80:	f003 fe7e 	bl	8004a80 <HAL_SPI_TransmitReceive_IT>

    osDelay(20);
 8000d84:	2014      	movs	r0, #20
 8000d86:	f006 fc23 	bl	80075d0 <osDelay>
	  HAL_SPI_TransmitReceive_IT(&hspi1, buffer_tx, buffer_rx, 1);
 8000d8a:	e7f5      	b.n	8000d78 <StartDefaultTask+0x58>
 8000d8c:	0801ad10 	.word	0x0801ad10
 8000d90:	0801ad2c 	.word	0x0801ad2c
 8000d94:	200001f4 	.word	0x200001f4
 8000d98:	200001f8 	.word	0x200001f8
 8000d9c:	200018c8 	.word	0x200018c8
 8000da0:	20000000 	.word	0x20000000
 8000da4:	200012d0 	.word	0x200012d0

08000da8 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000dae:	463b      	mov	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000dba:	f000 fe13 	bl	80019e4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000dca:	231f      	movs	r3, #31
 8000dcc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000dce:	2387      	movs	r3, #135	; 0x87
 8000dd0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000dde:	2301      	movs	r3, #1
 8000de0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000dea:	463b      	mov	r3, r7
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 fe31 	bl	8001a54 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000df2:	2301      	movs	r3, #1
 8000df4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000df6:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000dfa:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e10:	463b      	mov	r3, r7
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fe1e 	bl	8001a54 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24020000;
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <MPU_Config+0xa0>)
 8000e1e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000e20:	2308      	movs	r3, #8
 8000e22:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e30:	463b      	mov	r3, r7
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 fe0e 	bl	8001a54 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e38:	2004      	movs	r0, #4
 8000e3a:	f000 fdeb 	bl	8001a14 <HAL_MPU_Enable>

}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	24020000 	.word	0x24020000

08000e4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d101      	bne.n	8000e62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e5e:	f000 fc9b 	bl	8001798 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40001000 	.word	0x40001000

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <Error_Handler+0x8>
	...

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a10      	ldr	r2, [pc, #64]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	210f      	movs	r1, #15
 8000eb6:	f06f 0001 	mvn.w	r0, #1
 8000eba:	f000 fd69 	bl	8001990 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a29      	ldr	r2, [pc, #164]	; (8000f90 <HAL_SPI_MspInit+0xc4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d14b      	bne.n	8000f86 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eee:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <HAL_SPI_MspInit+0xc8>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	4a28      	ldr	r2, [pc, #160]	; (8000f94 <HAL_SPI_MspInit+0xc8>)
 8000ef4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8000efa:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <HAL_SPI_MspInit+0xc8>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <HAL_SPI_MspInit+0xc8>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <HAL_SPI_MspInit+0xc8>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <HAL_SPI_MspInit+0xc8>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <HAL_SPI_MspInit+0xc8>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a1c      	ldr	r2, [pc, #112]	; (8000f94 <HAL_SPI_MspInit+0xc8>)
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <HAL_SPI_MspInit+0xc8>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f36:	2360      	movs	r3, #96	; 0x60
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f46:	2305      	movs	r3, #5
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4811      	ldr	r0, [pc, #68]	; (8000f98 <HAL_SPI_MspInit+0xcc>)
 8000f52:	f002 f833 	bl	8002fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f66:	2305      	movs	r3, #5
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480a      	ldr	r0, [pc, #40]	; (8000f9c <HAL_SPI_MspInit+0xd0>)
 8000f72:	f002 f823 	bl	8002fbc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2105      	movs	r1, #5
 8000f7a:	2023      	movs	r0, #35	; 0x23
 8000f7c:	f000 fd08 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f80:	2023      	movs	r0, #35	; 0x23
 8000f82:	f000 fd21 	bl	80019c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40013000 	.word	0x40013000
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	40020c00 	.word	0x40020c00

08000fa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b0ae      	sub	sp, #184	; 0xb8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2290      	movs	r2, #144	; 0x90
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f018 fd05 	bl	80199d0 <memset>
  if(huart->Instance==USART3)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a22      	ldr	r2, [pc, #136]	; (8001054 <HAL_UART_MspInit+0xb4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d13c      	bne.n	800104a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f003 f87a 	bl	80040d8 <HAL_RCCEx_PeriphCLKConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fea:	f7ff ff41 	bl	8000e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <HAL_UART_MspInit+0xb8>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a19      	ldr	r2, [pc, #100]	; (8001058 <HAL_UART_MspInit+0xb8>)
 8000ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_UART_MspInit+0xb8>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_UART_MspInit+0xb8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a13      	ldr	r2, [pc, #76]	; (8001058 <HAL_UART_MspInit+0xb8>)
 800100c:	f043 0308 	orr.w	r3, r3, #8
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_UART_MspInit+0xb8>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800101e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001022:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001038:	2307      	movs	r3, #7
 800103a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	; (800105c <HAL_UART_MspInit+0xbc>)
 8001046:	f001 ffb9 	bl	8002fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	37b8      	adds	r7, #184	; 0xb8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40004800 	.word	0x40004800
 8001058:	40023800 	.word	0x40023800
 800105c:	40020c00 	.word	0x40020c00

08001060 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b0ae      	sub	sp, #184	; 0xb8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2290      	movs	r2, #144	; 0x90
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f018 fca5 	bl	80199d0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800108e:	d159      	bne.n	8001144 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001090:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001094:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001096:	2300      	movs	r3, #0
 8001098:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 f819 	bl	80040d8 <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80010ac:	f7ff fee0 	bl	8000e70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	4b26      	ldr	r3, [pc, #152]	; (800114c <HAL_PCD_MspInit+0xec>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	4a25      	ldr	r2, [pc, #148]	; (800114c <HAL_PCD_MspInit+0xec>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6313      	str	r3, [r2, #48]	; 0x30
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <HAL_PCD_MspInit+0xec>)
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010c8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010e2:	230a      	movs	r3, #10
 80010e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010ec:	4619      	mov	r1, r3
 80010ee:	4818      	ldr	r0, [pc, #96]	; (8001150 <HAL_PCD_MspInit+0xf0>)
 80010f0:	f001 ff64 	bl	8002fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800110c:	4619      	mov	r1, r3
 800110e:	4810      	ldr	r0, [pc, #64]	; (8001150 <HAL_PCD_MspInit+0xf0>)
 8001110:	f001 ff54 	bl	8002fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <HAL_PCD_MspInit+0xec>)
 8001116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001118:	4a0c      	ldr	r2, [pc, #48]	; (800114c <HAL_PCD_MspInit+0xec>)
 800111a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800111e:	6353      	str	r3, [r2, #52]	; 0x34
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_PCD_MspInit+0xec>)
 8001122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <HAL_PCD_MspInit+0xec>)
 800112e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_PCD_MspInit+0xec>)
 8001132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001136:	6453      	str	r3, [r2, #68]	; 0x44
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <HAL_PCD_MspInit+0xec>)
 800113a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001144:	bf00      	nop
 8001146:	37b8      	adds	r7, #184	; 0xb8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40020000 	.word	0x40020000

08001154 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08e      	sub	sp, #56	; 0x38
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001164:	4b33      	ldr	r3, [pc, #204]	; (8001234 <HAL_InitTick+0xe0>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	4a32      	ldr	r2, [pc, #200]	; (8001234 <HAL_InitTick+0xe0>)
 800116a:	f043 0310 	orr.w	r3, r3, #16
 800116e:	6413      	str	r3, [r2, #64]	; 0x40
 8001170:	4b30      	ldr	r3, [pc, #192]	; (8001234 <HAL_InitTick+0xe0>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800117c:	f107 0210 	add.w	r2, r7, #16
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4611      	mov	r1, r2
 8001186:	4618      	mov	r0, r3
 8001188:	f002 ff74 	bl	8004074 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001192:	2b00      	cmp	r3, #0
 8001194:	d103      	bne.n	800119e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001196:	f002 ff45 	bl	8004024 <HAL_RCC_GetPCLK1Freq>
 800119a:	6378      	str	r0, [r7, #52]	; 0x34
 800119c:	e004      	b.n	80011a8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800119e:	f002 ff41 	bl	8004024 <HAL_RCC_GetPCLK1Freq>
 80011a2:	4603      	mov	r3, r0
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011aa:	4a23      	ldr	r2, [pc, #140]	; (8001238 <HAL_InitTick+0xe4>)
 80011ac:	fba2 2303 	umull	r2, r3, r2, r3
 80011b0:	0c9b      	lsrs	r3, r3, #18
 80011b2:	3b01      	subs	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <HAL_InitTick+0xe8>)
 80011b8:	4a21      	ldr	r2, [pc, #132]	; (8001240 <HAL_InitTick+0xec>)
 80011ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <HAL_InitTick+0xe8>)
 80011be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011c4:	4a1d      	ldr	r2, [pc, #116]	; (800123c <HAL_InitTick+0xe8>)
 80011c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_InitTick+0xe8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <HAL_InitTick+0xe8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_InitTick+0xe8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80011dc:	4817      	ldr	r0, [pc, #92]	; (800123c <HAL_InitTick+0xe8>)
 80011de:	f004 f8fd 	bl	80053dc <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80011e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d11b      	bne.n	8001228 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011f0:	4812      	ldr	r0, [pc, #72]	; (800123c <HAL_InitTick+0xe8>)
 80011f2:	f004 f955 	bl	80054a0 <HAL_TIM_Base_Start_IT>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80011fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001200:	2b00      	cmp	r3, #0
 8001202:	d111      	bne.n	8001228 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001204:	2036      	movs	r0, #54	; 0x36
 8001206:	f000 fbdf 	bl	80019c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d808      	bhi.n	8001222 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001210:	2200      	movs	r2, #0
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	2036      	movs	r0, #54	; 0x36
 8001216:	f000 fbbb 	bl	8001990 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <HAL_InitTick+0xf0>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	e002      	b.n	8001228 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001228:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800122c:	4618      	mov	r0, r3
 800122e:	3738      	adds	r7, #56	; 0x38
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40023800 	.word	0x40023800
 8001238:	431bde83 	.word	0x431bde83
 800123c:	200018cc 	.word	0x200018cc
 8001240:	40001000 	.word	0x40001000
 8001244:	20000008 	.word	0x20000008

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <SPI1_IRQHandler+0x10>)
 800127a:	f003 fcb1 	bl	8004be0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200012d0 	.word	0x200012d0

08001288 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <TIM6_DAC_IRQHandler+0x10>)
 800128e:	f004 f97f 	bl	8005590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200018cc 	.word	0x200018cc

0800129c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <ETH_IRQHandler+0x10>)
 80012a2:	f000 ffb7 	bl	8002214 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20006300 	.word	0x20006300

080012b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return 1;
 80012b4:	2301      	movs	r3, #1
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <_kill>:

int _kill(int pid, int sig)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <_kill+0x20>)
 80012cc:	2216      	movs	r2, #22
 80012ce:	601a      	str	r2, [r3, #0]
  return -1;
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	20011408 	.word	0x20011408

080012e4 <_exit>:

void _exit (int status)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ffe5 	bl	80012c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012f6:	e7fe      	b.n	80012f6 <_exit+0x12>

080012f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	e00a      	b.n	8001320 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800130a:	f3af 8000 	nop.w
 800130e:	4601      	mov	r1, r0
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	60ba      	str	r2, [r7, #8]
 8001316:	b2ca      	uxtb	r2, r1
 8001318:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	dbf0      	blt.n	800130a <_read+0x12>
  }

  return len;
 8001328:	687b      	ldr	r3, [r7, #4]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	e009      	b.n	8001358 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	60ba      	str	r2, [r7, #8]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3301      	adds	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	429a      	cmp	r2, r3
 800135e:	dbf1      	blt.n	8001344 <_write+0x12>
  }
  return len;
 8001360:	687b      	ldr	r3, [r7, #4]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <_close>:

int _close(int file)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001392:	605a      	str	r2, [r3, #4]
  return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <_isatty>:

int _isatty(int file)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013aa:	2301      	movs	r3, #1
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013dc:	4a14      	ldr	r2, [pc, #80]	; (8001430 <_sbrk+0x5c>)
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <_sbrk+0x60>)
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <_sbrk+0x64>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	; (800143c <_sbrk+0x68>)
 80013f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <_sbrk+0x64>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	429a      	cmp	r2, r3
 8001402:	d205      	bcs.n	8001410 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <_sbrk+0x6c>)
 8001406:	220c      	movs	r2, #12
 8001408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800140e:	e009      	b.n	8001424 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	4a06      	ldr	r2, [pc, #24]	; (8001438 <_sbrk+0x64>)
 8001420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	4618      	mov	r0, r3
 8001426:	371c      	adds	r7, #28
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	20080000 	.word	0x20080000
 8001434:	00000400 	.word	0x00000400
 8001438:	20001918 	.word	0x20001918
 800143c:	20011418 	.word	0x20011418
 8001440:	20011408 	.word	0x20011408

08001444 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800146c:	480d      	ldr	r0, [pc, #52]	; (80014a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800146e:	490e      	ldr	r1, [pc, #56]	; (80014a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001470:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001484:	4c0b      	ldr	r4, [pc, #44]	; (80014b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001492:	f7ff ffd7 	bl	8001444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001496:	f018 fa59 	bl	801994c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800149a:	f7ff fa65 	bl	8000968 <main>
  bx  lr    
 800149e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014a0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80014ac:	0801e5ac 	.word	0x0801e5ac
  ldr r2, =_sbss
 80014b0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80014b4:	20011418 	.word	0x20011418

080014b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC_IRQHandler>

080014ba <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00b      	beq.n	80014e2 <LAN8742_RegisterBusIO+0x28>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d007      	beq.n	80014e2 <LAN8742_RegisterBusIO+0x28>
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <LAN8742_RegisterBusIO+0x28>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d102      	bne.n	80014e8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014e6:	e014      	b.n	8001512 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d17c      	bne.n	8001638 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d002      	beq.n	800154c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2220      	movs	r2, #32
 8001550:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	e01c      	b.n	8001592 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	f107 0208 	add.w	r2, r7, #8
 8001560:	2112      	movs	r1, #18
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	4798      	blx	r3
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	da03      	bge.n	8001574 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800156c:	f06f 0304 	mvn.w	r3, #4
 8001570:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001572:	e00b      	b.n	800158c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	f003 031f 	and.w	r3, r3, #31
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	429a      	cmp	r2, r3
 800157e:	d105      	bne.n	800158c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
         break;
 800158a:	e005      	b.n	8001598 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3301      	adds	r3, #1
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	2b1f      	cmp	r3, #31
 8001596:	d9df      	bls.n	8001558 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b1f      	cmp	r3, #31
 800159e:	d902      	bls.n	80015a6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80015a0:	f06f 0302 	mvn.w	r3, #2
 80015a4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d145      	bne.n	8001638 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6810      	ldr	r0, [r2, #0]
 80015b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015b8:	2100      	movs	r1, #0
 80015ba:	4798      	blx	r3
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db37      	blt.n	8001632 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6810      	ldr	r0, [r2, #0]
 80015ca:	f107 0208 	add.w	r2, r7, #8
 80015ce:	2100      	movs	r1, #0
 80015d0:	4798      	blx	r3
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db28      	blt.n	800162a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4798      	blx	r3
 80015de:	4603      	mov	r3, r0
 80015e0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80015e2:	e01c      	b.n	800161e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4798      	blx	r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015f6:	d80e      	bhi.n	8001616 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6810      	ldr	r0, [r2, #0]
 8001600:	f107 0208 	add.w	r2, r7, #8
 8001604:	2100      	movs	r1, #0
 8001606:	4798      	blx	r3
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	da07      	bge.n	800161e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800160e:	f06f 0304 	mvn.w	r3, #4
 8001612:	613b      	str	r3, [r7, #16]
                 break;
 8001614:	e010      	b.n	8001638 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001616:	f06f 0301 	mvn.w	r3, #1
 800161a:	613b      	str	r3, [r7, #16]
               break;
 800161c:	e00c      	b.n	8001638 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1dd      	bne.n	80015e4 <LAN8742_Init+0xc6>
 8001628:	e006      	b.n	8001638 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800162a:	f06f 0304 	mvn.w	r3, #4
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	e002      	b.n	8001638 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001632:	f06f 0303 	mvn.w	r3, #3
 8001636:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d112      	bne.n	8001664 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	4798      	blx	r3
 8001644:	4603      	mov	r3, r0
 8001646:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001648:	bf00      	nop
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	4798      	blx	r3
 8001650:	4603      	mov	r3, r0
 8001652:	461a      	mov	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800165c:	d9f5      	bls.n	800164a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001664:	693b      	ldr	r3, [r7, #16]
 }
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b084      	sub	sp, #16
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6810      	ldr	r0, [r2, #0]
 8001682:	f107 020c 	add.w	r2, r7, #12
 8001686:	2101      	movs	r1, #1
 8001688:	4798      	blx	r3
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	da02      	bge.n	8001696 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001690:	f06f 0304 	mvn.w	r3, #4
 8001694:	e06e      	b.n	8001774 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6810      	ldr	r0, [r2, #0]
 800169e:	f107 020c 	add.w	r2, r7, #12
 80016a2:	2101      	movs	r1, #1
 80016a4:	4798      	blx	r3
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	da02      	bge.n	80016b2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016ac:	f06f 0304 	mvn.w	r3, #4
 80016b0:	e060      	b.n	8001774 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80016bc:	2301      	movs	r3, #1
 80016be:	e059      	b.n	8001774 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6810      	ldr	r0, [r2, #0]
 80016c8:	f107 020c 	add.w	r2, r7, #12
 80016cc:	2100      	movs	r1, #0
 80016ce:	4798      	blx	r3
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	da02      	bge.n	80016dc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016d6:	f06f 0304 	mvn.w	r3, #4
 80016da:	e04b      	b.n	8001774 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d11b      	bne.n	800171e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <LAN8742_GetLinkState+0x90>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80016fa:	2302      	movs	r3, #2
 80016fc:	e03a      	b.n	8001774 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001708:	2303      	movs	r3, #3
 800170a:	e033      	b.n	8001774 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001716:	2304      	movs	r3, #4
 8001718:	e02c      	b.n	8001774 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800171a:	2305      	movs	r3, #5
 800171c:	e02a      	b.n	8001774 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6810      	ldr	r0, [r2, #0]
 8001726:	f107 020c 	add.w	r2, r7, #12
 800172a:	211f      	movs	r1, #31
 800172c:	4798      	blx	r3
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	da02      	bge.n	800173a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001734:	f06f 0304 	mvn.w	r3, #4
 8001738:	e01c      	b.n	8001774 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001744:	2306      	movs	r3, #6
 8001746:	e015      	b.n	8001774 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 031c 	and.w	r3, r3, #28
 800174e:	2b18      	cmp	r3, #24
 8001750:	d101      	bne.n	8001756 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001752:	2302      	movs	r3, #2
 8001754:	e00e      	b.n	8001774 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f003 031c 	and.w	r3, r3, #28
 800175c:	2b08      	cmp	r3, #8
 800175e:	d101      	bne.n	8001764 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001760:	2303      	movs	r3, #3
 8001762:	e007      	b.n	8001774 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 031c 	and.w	r3, r3, #28
 800176a:	2b14      	cmp	r3, #20
 800176c:	d101      	bne.n	8001772 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800176e:	2304      	movs	r3, #4
 8001770:	e000      	b.n	8001774 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001772:	2305      	movs	r3, #5
    }				
  }
}
 8001774:	4618      	mov	r0, r3
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001780:	2003      	movs	r0, #3
 8001782:	f000 f8fa 	bl	800197a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001786:	200f      	movs	r0, #15
 8001788:	f7ff fce4 	bl	8001154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800178c:	f7ff fb76 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x20>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_IncTick+0x24>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_IncTick+0x24>)
 80017aa:	6013      	str	r3, [r2, #0]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	2000000c 	.word	0x2000000c
 80017bc:	2000191c 	.word	0x2000191c

080017c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return uwTick;
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <HAL_GetTick+0x14>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	2000191c 	.word	0x2000191c

080017d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e0:	f7ff ffee 	bl	80017c0 <HAL_GetTick>
 80017e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017f0:	d005      	beq.n	80017fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_Delay+0x44>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017fe:	bf00      	nop
 8001800:	f7ff ffde 	bl	80017c0 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	429a      	cmp	r2, r3
 800180e:	d8f7      	bhi.n	8001800 <HAL_Delay+0x28>
  {
  }
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000000c 	.word	0x2000000c

08001820 <__NVIC_SetPriorityGrouping>:
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <__NVIC_SetPriorityGrouping+0x40>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 800184a:	4313      	orrs	r3, r2
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <__NVIC_SetPriorityGrouping+0x40>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00
 8001864:	05fa0000 	.word	0x05fa0000

08001868 <__NVIC_GetPriorityGrouping>:
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_EnableIRQ>:
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	2b00      	cmp	r3, #0
 8001894:	db0b      	blt.n	80018ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	f003 021f 	and.w	r2, r3, #31
 800189c:	4907      	ldr	r1, [pc, #28]	; (80018bc <__NVIC_EnableIRQ+0x38>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	2001      	movs	r0, #1
 80018a6:	fa00 f202 	lsl.w	r2, r0, r2
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e100 	.word	0xe000e100

080018c0 <__NVIC_SetPriority>:
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db0a      	blt.n	80018ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	490c      	ldr	r1, [pc, #48]	; (800190c <__NVIC_SetPriority+0x4c>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	440b      	add	r3, r1
 80018e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018e8:	e00a      	b.n	8001900 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4908      	ldr	r1, [pc, #32]	; (8001910 <__NVIC_SetPriority+0x50>)
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3b04      	subs	r3, #4
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	440b      	add	r3, r1
 80018fe:	761a      	strb	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000e100 	.word	0xe000e100
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <NVIC_EncodePriority>:
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f1c3 0307 	rsb	r3, r3, #7
 800192e:	2b04      	cmp	r3, #4
 8001930:	bf28      	it	cs
 8001932:	2304      	movcs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3304      	adds	r3, #4
 800193a:	2b06      	cmp	r3, #6
 800193c:	d902      	bls.n	8001944 <NVIC_EncodePriority+0x30>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b03      	subs	r3, #3
 8001942:	e000      	b.n	8001946 <NVIC_EncodePriority+0x32>
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800195c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43d9      	mvns	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	4313      	orrs	r3, r2
}
 800196e:	4618      	mov	r0, r3
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ff4c 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a2:	f7ff ff61 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	68b9      	ldr	r1, [r7, #8]
 80019ac:	6978      	ldr	r0, [r7, #20]
 80019ae:	f7ff ffb1 	bl	8001914 <NVIC_EncodePriority>
 80019b2:	4602      	mov	r2, r0
 80019b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ff80 	bl	80018c0 <__NVIC_SetPriority>
}
 80019c0:	bf00      	nop
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ff54 	bl	8001884 <__NVIC_EnableIRQ>
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019e8:	f3bf 8f5f 	dmb	sy
}
 80019ec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <HAL_MPU_Disable+0x28>)
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <HAL_MPU_Disable+0x28>)
 80019f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f8:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_MPU_Disable+0x2c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	605a      	str	r2, [r3, #4]
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00
 8001a10:	e000ed90 	.word	0xe000ed90

08001a14 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <HAL_MPU_Enable+0x38>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_MPU_Enable+0x3c>)
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <HAL_MPU_Enable+0x3c>)
 8001a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a30:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a32:	f3bf 8f4f 	dsb	sy
}
 8001a36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a38:	f3bf 8f6f 	isb	sy
}
 8001a3c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000ed90 	.word	0xe000ed90
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	785a      	ldrb	r2, [r3, #1]
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <HAL_MPU_ConfigRegion+0x84>)
 8001a62:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d029      	beq.n	8001ac0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001a6c:	4a1a      	ldr	r2, [pc, #104]	; (8001ad8 <HAL_MPU_ConfigRegion+0x84>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7b1b      	ldrb	r3, [r3, #12]
 8001a78:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7adb      	ldrb	r3, [r3, #11]
 8001a7e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7a9b      	ldrb	r3, [r3, #10]
 8001a86:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7b5b      	ldrb	r3, [r3, #13]
 8001a8e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7b9b      	ldrb	r3, [r3, #14]
 8001a96:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	7bdb      	ldrb	r3, [r3, #15]
 8001a9e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001aa0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7a5b      	ldrb	r3, [r3, #9]
 8001aa6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001aa8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7a1b      	ldrb	r3, [r3, #8]
 8001aae:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ab0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	7812      	ldrb	r2, [r2, #0]
 8001ab6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ab8:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001aba:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001abc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001abe:	e005      	b.n	8001acc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_MPU_ConfigRegion+0x84>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <HAL_MPU_ConfigRegion+0x84>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed90 	.word	0xe000ed90

08001adc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d004      	beq.n	8001afa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2280      	movs	r2, #128	; 0x80
 8001af4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00c      	b.n	8001b14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2205      	movs	r2, #5
 8001afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0201 	bic.w	r2, r2, #1
 8001b10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e06a      	b.n	8001c08 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d106      	bne.n	8001b4a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2223      	movs	r2, #35	; 0x23
 8001b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f005 fa9d 	bl	8007084 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <HAL_ETH_Init+0xf0>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a30      	ldr	r2, [pc, #192]	; (8001c10 <HAL_ETH_Init+0xf0>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <HAL_ETH_Init+0xf0>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b62:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <HAL_ETH_Init+0xf4>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4a2b      	ldr	r2, [pc, #172]	; (8001c14 <HAL_ETH_Init+0xf4>)
 8001b68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b6c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b6e:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <HAL_ETH_Init+0xf4>)
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	4927      	ldr	r1, [pc, #156]	; (8001c14 <HAL_ETH_Init+0xf4>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001b7c:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <HAL_ETH_Init+0xf4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b98:	f7ff fe12 	bl	80017c0 <HAL_GetTick>
 8001b9c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b9e:	e011      	b.n	8001bc4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001ba0:	f7ff fe0e 	bl	80017c0 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bae:	d909      	bls.n	8001bc4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	22e0      	movs	r2, #224	; 0xe0
 8001bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e021      	b.n	8001c08 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1e4      	bne.n	8001ba0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 ff4c 	bl	8002a74 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 fff3 	bl	8002bc8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f001 f849 	bl	8002c7a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	461a      	mov	r2, r3
 8001bee:	2100      	movs	r1, #0
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 ffb1 	bl	8002b58 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2210      	movs	r2, #16
 8001c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40013800 	.word	0x40013800

08001c18 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c26:	2b10      	cmp	r3, #16
 8001c28:	d17b      	bne.n	8001d22 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2223      	movs	r2, #35	; 0x23
 8001c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001c46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b35      	ldr	r3, [pc, #212]	; (8001d2c <HAL_ETH_Start_IT+0x114>)
 8001c56:	430b      	orrs	r3, r1
 8001c58:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001c6c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2204      	movs	r2, #4
 8001c74:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f9fc 	bl	8002074 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0208 	orr.w	r2, r2, #8
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f7ff fd9f 	bl	80017d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0204 	orr.w	r2, r2, #4
 8001cb0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f7ff fd8c 	bl	80017d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 fd74 	bl	80027b6 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ce0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ce4:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cfc:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d06:	69d9      	ldr	r1, [r3, #28]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_ETH_Start_IT+0x118>)
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d14:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2223      	movs	r2, #35	; 0x23
 8001d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e000      	b.n	8001d24 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
  }
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	00020060 	.word	0x00020060
 8001d30:	0001a0c1 	.word	0x0001a0c1

08001d34 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d42:	2b23      	cmp	r3, #35	; 0x23
 8001d44:	d16e      	bne.n	8001e24 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2223      	movs	r2, #35	; 0x23
 8001d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d56:	69d9      	ldr	r1, [r3, #28]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <HAL_ETH_Stop_IT+0xfc>)
 8001d5e:	400b      	ands	r3, r1
 8001d60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d64:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d7c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	f023 0302 	bic.w	r3, r3, #2
 8001d90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d94:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0204 	bic.w	r2, r2, #4
 8001da4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dae:	2001      	movs	r0, #1
 8001db0:	f7ff fd12 	bl	80017d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 fcfa 	bl	80027b6 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0208 	bic.w	r2, r2, #8
 8001dd0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff fcfc 	bl	80017d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	e00e      	b.n	8001e0c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	3212      	adds	r2, #18
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d9ed      	bls.n	8001dee <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2210      	movs	r2, #16
 8001e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e000      	b.n	8001e26 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
  }
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	fffe5f3e 	.word	0xfffe5f3e

08001e34 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d109      	bne.n	8001e58 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e045      	b.n	8001ee4 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e5e:	2b23      	cmp	r3, #35	; 0x23
 8001e60:	d13f      	bne.n	8001ee2 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	6839      	ldr	r1, [r7, #0]
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 ff70 	bl	8002d54 <ETH_Prepare_Tx_Descriptors>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e80:	f043 0202 	orr.w	r2, r3, #2
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e02a      	b.n	8001ee4 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e8e:	f3bf 8f4f 	dsb	sy
}
 8001e92:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	629a      	str	r2, [r3, #40]	; 0x28
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d904      	bls.n	8001eb0 <HAL_ETH_Transmit_IT+0x7c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	1f1a      	subs	r2, r3, #4
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00d      	beq.n	8001ede <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eca:	461a      	mov	r2, r3
 8001ecc:	2304      	movs	r3, #4
 8001ece:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2300      	movs	r3, #0
 8001edc:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e000      	b.n	8001ee4 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
  }
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d109      	bne.n	8001f18 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0a:	f043 0201 	orr.w	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0a8      	b.n	800206a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f1e:	2b23      	cmp	r3, #35	; 0x23
 8001f20:	d001      	beq.n	8001f26 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e0a1      	b.n	800206a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	3212      	adds	r2, #18
 8001f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f36:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f3c:	f1c3 0304 	rsb	r3, r3, #4
 8001f40:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f42:	e06a      	b.n	800201a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	699a      	ldr	r2, [r3, #24]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	69da      	ldr	r2, [r3, #28]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d103      	bne.n	8001f74 <HAL_ETH_ReadData+0x88>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d040      	beq.n	8001ff6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00c      	beq.n	8001fb8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	0c1b      	lsrs	r3, r3, #16
 8001fa4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001fa8:	3b04      	subs	r3, #4
 8001faa:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	f005 fa21 	bl	800741c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	441a      	add	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d902      	bls.n	8002008 <HAL_ETH_ReadData+0x11c>
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3b04      	subs	r3, #4
 8002006:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	3212      	adds	r2, #18
 800200e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002012:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	3301      	adds	r3, #1
 8002018:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	db06      	blt.n	8002030 <HAL_ETH_ReadData+0x144>
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	429a      	cmp	r2, r3
 8002028:	d202      	bcs.n	8002030 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d089      	beq.n	8001f44 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	441a      	add	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f815 	bl	8002074 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69fa      	ldr	r2, [r7, #28]
 800204e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d108      	bne.n	8002068 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	e000      	b.n	800206a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
}
 800206a:	4618      	mov	r0, r3
 800206c:	3720      	adds	r7, #32
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002080:	2301      	movs	r3, #1
 8002082:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002088:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69fa      	ldr	r2, [r7, #28]
 800208e:	3212      	adds	r2, #18
 8002090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002094:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800209a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800209c:	e040      	b.n	8002120 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d112      	bne.n	80020cc <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	4618      	mov	r0, r3
 80020ac:	f005 f986 	bl	80073bc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d102      	bne.n	80020bc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	74fb      	strb	r3, [r7, #19]
 80020ba:	e007      	b.n	80020cc <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	461a      	mov	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	461a      	mov	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80020cc:	7cfb      	ldrb	r3, [r7, #19]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d026      	beq.n	8002120 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d103      	bne.n	80020e2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <ETH_UpdateDescriptor+0xe4>)
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	e003      	b.n	80020ea <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80020e8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 80020ea:	f3bf 8f5f 	dmb	sy
}
 80020ee:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	3301      	adds	r3, #1
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d902      	bls.n	800210e <ETH_UpdateDescriptor+0x9a>
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	3b04      	subs	r3, #4
 800210c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	3212      	adds	r2, #18
 8002114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002118:	617b      	str	r3, [r7, #20]
      desccount--;
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	3b01      	subs	r3, #1
 800211e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <ETH_UpdateDescriptor+0xb8>
 8002126:	7cfb      	ldrb	r3, [r7, #19]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1b8      	bne.n	800209e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	429a      	cmp	r2, r3
 8002134:	d00c      	beq.n	8002150 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800213e:	461a      	mov	r2, r3
 8002140:	2300      	movs	r3, #0
 8002142:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002150:	bf00      	nop
 8002152:	3720      	adds	r7, #32
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	80004600 	.word	0x80004600

0800215c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3318      	adds	r3, #24
 8002168:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002176:	2301      	movs	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800217a:	e03f      	b.n	80021fc <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 800217c:	2301      	movs	r3, #1
 800217e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	3b01      	subs	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	3304      	adds	r3, #4
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	3301      	adds	r3, #1
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80021a4:	7bbb      	ldrb	r3, [r7, #14]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d028      	beq.n	80021fc <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68d9      	ldr	r1, [r3, #12]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	440b      	add	r3, r1
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	db1b      	blt.n	80021f8 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	3304      	adds	r3, #4
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f005 f967 	bl	80074a0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	3304      	adds	r3, #4
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	2200      	movs	r2, #0
 80021de:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	3301      	adds	r3, #1
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80021f6:	e001      	b.n	80021fc <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <HAL_ETH_ReleaseTxPacket+0xac>
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1b9      	bne.n	800217c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222a:	2b40      	cmp	r3, #64	; 0x40
 800222c:	d112      	bne.n	8002254 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223c:	2b40      	cmp	r3, #64	; 0x40
 800223e:	d109      	bne.n	8002254 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002248:	461a      	mov	r2, r3
 800224a:	4b50      	ldr	r3, [pc, #320]	; (800238c <HAL_ETH_IRQHandler+0x178>)
 800224c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f004 fc7c 	bl	8006b4c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d113      	bne.n	800228e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d10a      	bne.n	800228e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002280:	461a      	mov	r2, r3
 8002282:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002286:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f004 fc6f 	bl	8006b6c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800229c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022a0:	d14c      	bne.n	800233c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022b4:	d142      	bne.n	800233c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022bc:	f043 0208 	orr.w	r2, r3, #8
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022d8:	d11a      	bne.n	8002310 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	4b2a      	ldr	r3, [pc, #168]	; (8002390 <HAL_ETH_IRQHandler+0x17c>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002300:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002304:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	22e0      	movs	r2, #224	; 0xe0
 800230a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800230e:	e012      	b.n	8002336 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	f248 6380 	movw	r3, #34432	; 0x8680
 800231e:	4013      	ands	r3, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232e:	461a      	mov	r2, r3
 8002330:	f248 6380 	movw	r3, #34432	; 0x8680
 8002334:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f004 fc28 	bl	8006b8c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b08      	cmp	r3, #8
 8002348:	d10e      	bne.n	8002368 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f81c 	bl	8002398 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_ETH_IRQHandler+0x180>)
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d006      	beq.n	8002382 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <HAL_ETH_IRQHandler+0x180>)
 8002376:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800237a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f815 	bl	80023ac <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	00010040 	.word	0x00010040
 8002390:	007e2000 	.word	0x007e2000
 8002394:	40013c00 	.word	0x40013c00

08002398 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 031c 	and.w	r3, r3, #28
 80023dc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	02db      	lsls	r3, r3, #11
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	019b      	lsls	r3, r3, #6
 80023ee:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f023 0302 	bic.w	r3, r3, #2
 80023fe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002410:	f7ff f9d6 	bl	80017c0 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002416:	e00d      	b.n	8002434 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002418:	f7ff f9d2 	bl	80017c0 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002426:	d301      	bcc.n	800242c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e010      	b.n	800244e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1ec      	bne.n	8002418 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	b29b      	uxth	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b086      	sub	sp, #24
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f003 031c 	and.w	r3, r3, #28
 8002472:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	02db      	lsls	r3, r3, #11
 8002478:	b29b      	uxth	r3, r3
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	019b      	lsls	r3, r3, #6
 8002484:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	4313      	orrs	r3, r2
 800248c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024b0:	f7ff f986 	bl	80017c0 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80024b6:	e00d      	b.n	80024d4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80024b8:	f7ff f982 	bl	80017c0 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c6:	d301      	bcc.n	80024cc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e009      	b.n	80024e0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1ec      	bne.n	80024b8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0d9      	b.n	80026b0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b00      	cmp	r3, #0
 8002508:	bf14      	ite	ne
 800250a:	2301      	movne	r3, #1
 800250c:	2300      	moveq	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf14      	ite	ne
 8002550:	2301      	movne	r3, #1
 8002552:	2300      	moveq	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002566:	2b00      	cmp	r3, #0
 8002568:	bf0c      	ite	eq
 800256a:	2301      	moveq	r3, #1
 800256c:	2300      	movne	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf14      	ite	ne
 8002584:	2301      	movne	r3, #1
 8002586:	2300      	moveq	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bf0c      	ite	eq
 80025ba:	2301      	moveq	r3, #1
 80025bc:	2300      	movne	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	bf14      	ite	ne
 80025ee:	2301      	movne	r3, #1
 80025f0:	2300      	moveq	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002612:	2b00      	cmp	r3, #0
 8002614:	bf14      	ite	ne
 8002616:	2301      	movne	r3, #1
 8002618:	2300      	moveq	r3, #0
 800261a:	b2db      	uxtb	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf14      	ite	ne
 8002630:	2301      	movne	r3, #1
 8002632:	2300      	moveq	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf0c      	ite	eq
 800264c:	2301      	moveq	r3, #1
 800264e:	2300      	movne	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	0c1b      	lsrs	r3, r3, #16
 8002670:	b29a      	uxth	r2, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf14      	ite	ne
 8002684:	2301      	movne	r3, #1
 8002686:	2300      	moveq	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf14      	ite	ne
 80026a0:	2301      	movne	r3, #1
 80026a2:	2300      	moveq	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e00b      	b.n	80026e8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d105      	bne.n	80026e6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80026da:	6839      	ldr	r1, [r7, #0]
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f88f 	bl	8002800 <ETH_SetMACConfig>

    return HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
  }
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 031c 	bic.w	r3, r3, #28
 8002706:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002708:	f001 fc80 	bl	800400c <HAL_RCC_GetHCLKFreq>
 800270c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	4a1d      	ldr	r2, [pc, #116]	; (8002788 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d908      	bls.n	8002728 <HAL_ETH_SetMDIOClockRange+0x38>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4a1c      	ldr	r2, [pc, #112]	; (800278c <HAL_ETH_SetMDIOClockRange+0x9c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d804      	bhi.n	8002728 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f043 0308 	orr.w	r3, r3, #8
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	e027      	b.n	8002778 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4a18      	ldr	r2, [pc, #96]	; (800278c <HAL_ETH_SetMDIOClockRange+0x9c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d908      	bls.n	8002742 <HAL_ETH_SetMDIOClockRange+0x52>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4a17      	ldr	r2, [pc, #92]	; (8002790 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d204      	bcs.n	8002742 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f043 030c 	orr.w	r3, r3, #12
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e01a      	b.n	8002778 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	4a12      	ldr	r2, [pc, #72]	; (8002790 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d303      	bcc.n	8002752 <HAL_ETH_SetMDIOClockRange+0x62>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	4a11      	ldr	r2, [pc, #68]	; (8002794 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d911      	bls.n	8002776 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	4a0f      	ldr	r2, [pc, #60]	; (8002794 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d908      	bls.n	800276c <HAL_ETH_SetMDIOClockRange+0x7c>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d804      	bhi.n	800276c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f043 0304 	orr.w	r3, r3, #4
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	e005      	b.n	8002778 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f043 0310 	orr.w	r3, r3, #16
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	e000      	b.n	8002778 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002776:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	611a      	str	r2, [r3, #16]
}
 8002780:	bf00      	nop
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	01312cff 	.word	0x01312cff
 800278c:	02160ebf 	.word	0x02160ebf
 8002790:	03938700 	.word	0x03938700
 8002794:	05f5e0ff 	.word	0x05f5e0ff
 8002798:	08f0d17f 	.word	0x08f0d17f

0800279c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027d8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027e6:	2001      	movs	r0, #1
 80027e8:	f7fe fff6 	bl	80017d8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027f6:	6193      	str	r3, [r2, #24]
}
 80027f8:	bf00      	nop
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4b51      	ldr	r3, [pc, #324]	; (800295c <ETH_SetMACConfig+0x15c>)
 8002816:	4013      	ands	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	7c1b      	ldrb	r3, [r3, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d102      	bne.n	8002828 <ETH_SetMACConfig+0x28>
 8002822:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002826:	e000      	b.n	800282a <ETH_SetMACConfig+0x2a>
 8002828:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	7c5b      	ldrb	r3, [r3, #17]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <ETH_SetMACConfig+0x38>
 8002832:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002836:	e000      	b.n	800283a <ETH_SetMACConfig+0x3a>
 8002838:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800283a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002840:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	7fdb      	ldrb	r3, [r3, #31]
 8002846:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002848:	431a      	orrs	r2, r3
                        macconf->Speed |
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800284e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	7f92      	ldrb	r2, [r2, #30]
 8002854:	2a00      	cmp	r2, #0
 8002856:	d102      	bne.n	800285e <ETH_SetMACConfig+0x5e>
 8002858:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800285c:	e000      	b.n	8002860 <ETH_SetMACConfig+0x60>
 800285e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002860:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	7f1b      	ldrb	r3, [r3, #28]
 8002866:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002868:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800286e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	791b      	ldrb	r3, [r3, #4]
 8002874:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002876:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800287e:	2a00      	cmp	r2, #0
 8002880:	d102      	bne.n	8002888 <ETH_SetMACConfig+0x88>
 8002882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002886:	e000      	b.n	800288a <ETH_SetMACConfig+0x8a>
 8002888:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800288a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	7bdb      	ldrb	r3, [r3, #15]
 8002890:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002892:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002898:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028a0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80028a2:	4313      	orrs	r3, r2
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028ba:	2001      	movs	r0, #1
 80028bc:	f7fe ff8c 	bl	80017d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80028d6:	4013      	ands	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028de:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80028e6:	2a00      	cmp	r2, #0
 80028e8:	d101      	bne.n	80028ee <ETH_SetMACConfig+0xee>
 80028ea:	2280      	movs	r2, #128	; 0x80
 80028ec:	e000      	b.n	80028f0 <ETH_SetMACConfig+0xf0>
 80028ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028f0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80028fe:	2a01      	cmp	r2, #1
 8002900:	d101      	bne.n	8002906 <ETH_SetMACConfig+0x106>
 8002902:	2208      	movs	r2, #8
 8002904:	e000      	b.n	8002908 <ETH_SetMACConfig+0x108>
 8002906:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002908:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002910:	2a01      	cmp	r2, #1
 8002912:	d101      	bne.n	8002918 <ETH_SetMACConfig+0x118>
 8002914:	2204      	movs	r2, #4
 8002916:	e000      	b.n	800291a <ETH_SetMACConfig+0x11a>
 8002918:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800291a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002922:	2a01      	cmp	r2, #1
 8002924:	d101      	bne.n	800292a <ETH_SetMACConfig+0x12a>
 8002926:	2202      	movs	r2, #2
 8002928:	e000      	b.n	800292c <ETH_SetMACConfig+0x12c>
 800292a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800292c:	4313      	orrs	r3, r2
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002944:	2001      	movs	r0, #1
 8002946:	f7fe ff47 	bl	80017d8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	619a      	str	r2, [r3, #24]
}
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	ff20810f 	.word	0xff20810f

08002960 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4b3d      	ldr	r3, [pc, #244]	; (8002a70 <ETH_SetDMAConfig+0x110>)
 800297a:	4013      	ands	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	7b1b      	ldrb	r3, [r3, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d102      	bne.n	800298c <ETH_SetDMAConfig+0x2c>
 8002986:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800298a:	e000      	b.n	800298e <ETH_SetDMAConfig+0x2e>
 800298c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	7b5b      	ldrb	r3, [r3, #13]
 8002992:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002994:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	7f52      	ldrb	r2, [r2, #29]
 800299a:	2a00      	cmp	r2, #0
 800299c:	d102      	bne.n	80029a4 <ETH_SetDMAConfig+0x44>
 800299e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029a2:	e000      	b.n	80029a6 <ETH_SetDMAConfig+0x46>
 80029a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80029a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	7b9b      	ldrb	r3, [r3, #14]
 80029ac:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80029ae:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80029b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	7f1b      	ldrb	r3, [r3, #28]
 80029ba:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80029bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	7f9b      	ldrb	r3, [r3, #30]
 80029c2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80029c4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029d2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029d4:	4313      	orrs	r3, r2
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e4:	461a      	mov	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029f6:	2001      	movs	r0, #1
 80029f8:	f7fe feee 	bl	80017d8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a04:	461a      	mov	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	791b      	ldrb	r3, [r3, #4]
 8002a0e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a14:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002a1a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a20:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a28:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002a2a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a32:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a38:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a46:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a54:	2001      	movs	r0, #1
 8002a56:	f7fe febf 	bl	80017d8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a62:	461a      	mov	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6013      	str	r3, [r2, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	f8de3f23 	.word	0xf8de3f23

08002a74 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b0a6      	sub	sp, #152	; 0x98
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a92:	2301      	movs	r3, #1
 8002a94:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002ad6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ada:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002adc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ae8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002aec:	4619      	mov	r1, r3
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff fe86 	bl	8002800 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002af4:	2301      	movs	r3, #1
 8002af6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002af8:	2301      	movs	r3, #1
 8002afa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002b02:	2301      	movs	r3, #1
 8002b04:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002b16:	2300      	movs	r3, #0
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b20:	2301      	movs	r3, #1
 8002b22:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b28:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b2e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b34:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002b36:	2301      	movs	r3, #1
 8002b38:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b44:	f107 0308 	add.w	r3, r7, #8
 8002b48:	4619      	mov	r1, r3
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ff08 	bl	8002960 <ETH_SetDMAConfig>
}
 8002b50:	bf00      	nop
 8002b52:	3798      	adds	r7, #152	; 0x98
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3305      	adds	r3, #5
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	3204      	adds	r2, #4
 8002b70:	7812      	ldrb	r2, [r2, #0]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <ETH_MACAddressConfig+0x68>)
 8002b7a:	4413      	add	r3, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3303      	adds	r3, #3
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	061a      	lsls	r2, r3, #24
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	041b      	lsls	r3, r3, #16
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3301      	adds	r3, #1
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	7812      	ldrb	r2, [r2, #0]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <ETH_MACAddressConfig+0x6c>)
 8002baa:	4413      	add	r3, r2
 8002bac:	461a      	mov	r2, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	6013      	str	r3, [r2, #0]
}
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40028040 	.word	0x40028040
 8002bc4:	40028044 	.word	0x40028044

08002bc8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	e03e      	b.n	8002c54 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68d9      	ldr	r1, [r3, #12]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	440b      	add	r3, r1
 8002be6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	3206      	adds	r2, #6
 8002c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d80c      	bhi.n	8002c38 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68d9      	ldr	r1, [r3, #12]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	440b      	add	r3, r1
 8002c30:	461a      	mov	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	e004      	b.n	8002c42 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3301      	adds	r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d9bd      	bls.n	8002bd6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c6c:	611a      	str	r2, [r3, #16]
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	e046      	b.n	8002d16 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6919      	ldr	r1, [r3, #16]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	440b      	add	r3, r1
 8002c98:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002cc4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002ccc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	3212      	adds	r2, #18
 8002ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d80c      	bhi.n	8002d06 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6919      	ldr	r1, [r3, #16]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	440b      	add	r3, r1
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	e004      	b.n	8002d10 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	3301      	adds	r3, #1
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d9b5      	bls.n	8002c88 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d46:	60da      	str	r2, [r3, #12]
}
 8002d48:	bf00      	nop
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b08d      	sub	sp, #52	; 0x34
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3318      	adds	r3, #24
 8002d64:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d7e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d96:	d007      	beq.n	8002da8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002da8:	2302      	movs	r3, #2
 8002daa:	e0ff      	b.n	8002fac <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	3301      	adds	r3, #1
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	4b7d      	ldr	r3, [pc, #500]	; (8002fb8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	6852      	ldr	r2, [r2, #4]
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0320 	and.w	r3, r3, #32
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	431a      	orrs	r2, r3
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e2e:	f3bf 8f5f 	dmb	sy
}
 8002e32:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002e40:	e082      	b.n	8002f48 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d006      	beq.n	8002e62 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e005      	b.n	8002e6e <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e70:	3301      	adds	r3, #1
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d902      	bls.n	8002e80 <ETH_Prepare_Tx_Descriptors+0x12c>
 8002e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7c:	3b04      	subs	r3, #4
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e88:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ea2:	d007      	beq.n	8002eb4 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d029      	beq.n	8002f08 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ec6:	e019      	b.n	8002efc <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002ec8:	f3bf 8f5f 	dmb	sy
}
 8002ecc:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002edc:	3301      	adds	r3, #1
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d902      	bls.n	8002eec <ETH_Prepare_Tx_Descriptors+0x198>
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee8:	3b04      	subs	r3, #4
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ef4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	3301      	adds	r3, #1
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002efc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d3e1      	bcc.n	8002ec8 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002f04:	2302      	movs	r3, #2
 8002f06:	e051      	b.n	8002fac <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	6852      	ldr	r2, [r2, #4]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	3301      	adds	r3, #1
 8002f34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002f36:	f3bf 8f5f 	dmb	sy
}
 8002f3a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f47f af78 	bne.w	8002e42 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d006      	beq.n	8002f66 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	e005      	b.n	8002f72 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f82:	6979      	ldr	r1, [r7, #20]
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	3304      	adds	r3, #4
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f92:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f94:	b672      	cpsid	i
}
 8002f96:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002fa6:	b662      	cpsie	i
}
 8002fa8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3734      	adds	r7, #52	; 0x34
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	ffffe000 	.word	0xffffe000

08002fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	e175      	b.n	80032c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fdc:	2201      	movs	r2, #1
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4013      	ands	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	f040 8164 	bne.w	80032c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	2b01      	cmp	r3, #1
 8003004:	d005      	beq.n	8003012 <HAL_GPIO_Init+0x56>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d130      	bne.n	8003074 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	2203      	movs	r2, #3
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003048:	2201      	movs	r2, #1
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f003 0201 	and.w	r2, r3, #1
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	2b03      	cmp	r3, #3
 800307e:	d017      	beq.n	80030b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	2203      	movs	r2, #3
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d123      	bne.n	8003104 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	08da      	lsrs	r2, r3, #3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3208      	adds	r2, #8
 80030c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	220f      	movs	r2, #15
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	08da      	lsrs	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3208      	adds	r2, #8
 80030fe:	69b9      	ldr	r1, [r7, #24]
 8003100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	2203      	movs	r2, #3
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0203 	and.w	r2, r3, #3
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80be 	beq.w	80032c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003146:	4b66      	ldr	r3, [pc, #408]	; (80032e0 <HAL_GPIO_Init+0x324>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	4a65      	ldr	r2, [pc, #404]	; (80032e0 <HAL_GPIO_Init+0x324>)
 800314c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003150:	6453      	str	r3, [r2, #68]	; 0x44
 8003152:	4b63      	ldr	r3, [pc, #396]	; (80032e0 <HAL_GPIO_Init+0x324>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800315e:	4a61      	ldr	r2, [pc, #388]	; (80032e4 <HAL_GPIO_Init+0x328>)
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	089b      	lsrs	r3, r3, #2
 8003164:	3302      	adds	r3, #2
 8003166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	220f      	movs	r2, #15
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a58      	ldr	r2, [pc, #352]	; (80032e8 <HAL_GPIO_Init+0x32c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d037      	beq.n	80031fa <HAL_GPIO_Init+0x23e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a57      	ldr	r2, [pc, #348]	; (80032ec <HAL_GPIO_Init+0x330>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d031      	beq.n	80031f6 <HAL_GPIO_Init+0x23a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a56      	ldr	r2, [pc, #344]	; (80032f0 <HAL_GPIO_Init+0x334>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d02b      	beq.n	80031f2 <HAL_GPIO_Init+0x236>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a55      	ldr	r2, [pc, #340]	; (80032f4 <HAL_GPIO_Init+0x338>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d025      	beq.n	80031ee <HAL_GPIO_Init+0x232>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a54      	ldr	r2, [pc, #336]	; (80032f8 <HAL_GPIO_Init+0x33c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d01f      	beq.n	80031ea <HAL_GPIO_Init+0x22e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a53      	ldr	r2, [pc, #332]	; (80032fc <HAL_GPIO_Init+0x340>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d019      	beq.n	80031e6 <HAL_GPIO_Init+0x22a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a52      	ldr	r2, [pc, #328]	; (8003300 <HAL_GPIO_Init+0x344>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <HAL_GPIO_Init+0x226>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a51      	ldr	r2, [pc, #324]	; (8003304 <HAL_GPIO_Init+0x348>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00d      	beq.n	80031de <HAL_GPIO_Init+0x222>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a50      	ldr	r2, [pc, #320]	; (8003308 <HAL_GPIO_Init+0x34c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d007      	beq.n	80031da <HAL_GPIO_Init+0x21e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a4f      	ldr	r2, [pc, #316]	; (800330c <HAL_GPIO_Init+0x350>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d101      	bne.n	80031d6 <HAL_GPIO_Init+0x21a>
 80031d2:	2309      	movs	r3, #9
 80031d4:	e012      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031d6:	230a      	movs	r3, #10
 80031d8:	e010      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031da:	2308      	movs	r3, #8
 80031dc:	e00e      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031de:	2307      	movs	r3, #7
 80031e0:	e00c      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031e2:	2306      	movs	r3, #6
 80031e4:	e00a      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031e6:	2305      	movs	r3, #5
 80031e8:	e008      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031ea:	2304      	movs	r3, #4
 80031ec:	e006      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031ee:	2303      	movs	r3, #3
 80031f0:	e004      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e002      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031fa:	2300      	movs	r3, #0
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	f002 0203 	and.w	r2, r2, #3
 8003202:	0092      	lsls	r2, r2, #2
 8003204:	4093      	lsls	r3, r2
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800320c:	4935      	ldr	r1, [pc, #212]	; (80032e4 <HAL_GPIO_Init+0x328>)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	089b      	lsrs	r3, r3, #2
 8003212:	3302      	adds	r3, #2
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800321a:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <HAL_GPIO_Init+0x354>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800323e:	4a34      	ldr	r2, [pc, #208]	; (8003310 <HAL_GPIO_Init+0x354>)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003244:	4b32      	ldr	r3, [pc, #200]	; (8003310 <HAL_GPIO_Init+0x354>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003268:	4a29      	ldr	r2, [pc, #164]	; (8003310 <HAL_GPIO_Init+0x354>)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800326e:	4b28      	ldr	r3, [pc, #160]	; (8003310 <HAL_GPIO_Init+0x354>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003292:	4a1f      	ldr	r2, [pc, #124]	; (8003310 <HAL_GPIO_Init+0x354>)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003298:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_GPIO_Init+0x354>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032bc:	4a14      	ldr	r2, [pc, #80]	; (8003310 <HAL_GPIO_Init+0x354>)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3301      	adds	r3, #1
 80032c6:	61fb      	str	r3, [r7, #28]
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	2b0f      	cmp	r3, #15
 80032cc:	f67f ae86 	bls.w	8002fdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	3724      	adds	r7, #36	; 0x24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40013800 	.word	0x40013800
 80032e8:	40020000 	.word	0x40020000
 80032ec:	40020400 	.word	0x40020400
 80032f0:	40020800 	.word	0x40020800
 80032f4:	40020c00 	.word	0x40020c00
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40021400 	.word	0x40021400
 8003300:	40021800 	.word	0x40021800
 8003304:	40021c00 	.word	0x40021c00
 8003308:	40022000 	.word	0x40022000
 800330c:	40022400 	.word	0x40022400
 8003310:	40013c00 	.word	0x40013c00

08003314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	807b      	strh	r3, [r7, #2]
 8003320:	4613      	mov	r3, r2
 8003322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003324:	787b      	ldrb	r3, [r7, #1]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003330:	e003      	b.n	800333a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003332:	887b      	ldrh	r3, [r7, #2]
 8003334:	041a      	lsls	r2, r3, #16
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	619a      	str	r2, [r3, #24]
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	460b      	mov	r3, r1
 8003350:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003358:	887a      	ldrh	r2, [r7, #2]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4013      	ands	r3, r2
 800335e:	041a      	lsls	r2, r3, #16
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	43d9      	mvns	r1, r3
 8003364:	887b      	ldrh	r3, [r7, #2]
 8003366:	400b      	ands	r3, r1
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	619a      	str	r2, [r3, #24]
}
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800337a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800337c:	b08f      	sub	sp, #60	; 0x3c
 800337e:	af0a      	add	r7, sp, #40	; 0x28
 8003380:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e116      	b.n	80035ba <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fd fe5a 	bl	8001060 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2203      	movs	r2, #3
 80033b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d102      	bne.n	80033c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f002 ffa6 	bl	800631c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	603b      	str	r3, [r7, #0]
 80033d6:	687e      	ldr	r6, [r7, #4]
 80033d8:	466d      	mov	r5, sp
 80033da:	f106 0410 	add.w	r4, r6, #16
 80033de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80033ee:	1d33      	adds	r3, r6, #4
 80033f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033f2:	6838      	ldr	r0, [r7, #0]
 80033f4:	f002 ff3a 	bl	800626c <USB_CoreInit>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2202      	movs	r2, #2
 8003402:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e0d7      	b.n	80035ba <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2100      	movs	r1, #0
 8003410:	4618      	mov	r0, r3
 8003412:	f002 ff94 	bl	800633e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003416:	2300      	movs	r3, #0
 8003418:	73fb      	strb	r3, [r7, #15]
 800341a:	e04a      	b.n	80034b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800341c:	7bfa      	ldrb	r2, [r7, #15]
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	333d      	adds	r3, #61	; 0x3d
 800342c:	2201      	movs	r2, #1
 800342e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003430:	7bfa      	ldrb	r2, [r7, #15]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	333c      	adds	r3, #60	; 0x3c
 8003440:	7bfa      	ldrb	r2, [r7, #15]
 8003442:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	b298      	uxth	r0, r3
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	3344      	adds	r3, #68	; 0x44
 8003458:	4602      	mov	r2, r0
 800345a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800345c:	7bfa      	ldrb	r2, [r7, #15]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	3340      	adds	r3, #64	; 0x40
 800346c:	2200      	movs	r2, #0
 800346e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003470:	7bfa      	ldrb	r2, [r7, #15]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	3348      	adds	r3, #72	; 0x48
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003484:	7bfa      	ldrb	r2, [r7, #15]
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	334c      	adds	r3, #76	; 0x4c
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003498:	7bfa      	ldrb	r2, [r7, #15]
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	3354      	adds	r3, #84	; 0x54
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	3301      	adds	r3, #1
 80034b0:	73fb      	strb	r3, [r7, #15]
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d3af      	bcc.n	800341c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034bc:	2300      	movs	r3, #0
 80034be:	73fb      	strb	r3, [r7, #15]
 80034c0:	e044      	b.n	800354c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034c2:	7bfa      	ldrb	r2, [r7, #15]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80034d4:	2200      	movs	r2, #0
 80034d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034d8:	7bfa      	ldrb	r2, [r7, #15]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034ee:	7bfa      	ldrb	r2, [r7, #15]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003500:	2200      	movs	r2, #0
 8003502:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800351a:	7bfa      	ldrb	r2, [r7, #15]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	3301      	adds	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
 800354c:	7bfa      	ldrb	r2, [r7, #15]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	429a      	cmp	r2, r3
 8003554:	d3b5      	bcc.n	80034c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	687e      	ldr	r6, [r7, #4]
 800355e:	466d      	mov	r5, sp
 8003560:	f106 0410 	add.w	r4, r6, #16
 8003564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800356a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800356c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003570:	e885 0003 	stmia.w	r5, {r0, r1}
 8003574:	1d33      	adds	r3, r6, #4
 8003576:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003578:	6838      	ldr	r0, [r7, #0]
 800357a:	f002 ff2d 	bl	80063d8 <USB_DevInit>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e014      	b.n	80035ba <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d102      	bne.n	80035ae <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f80b 	bl	80035c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f003 f8eb 	bl	800678e <USB_DevDisconnect>

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080035c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_PCDEx_ActivateLPM+0x44>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	10000003 	.word	0x10000003

0800360c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a04      	ldr	r2, [pc, #16]	; (8003628 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361a:	6013      	str	r3, [r2, #0]
}
 800361c:	bf00      	nop
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40007000 	.word	0x40007000

0800362c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003636:	4b23      	ldr	r3, [pc, #140]	; (80036c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	4a22      	ldr	r2, [pc, #136]	; (80036c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800363c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800364e:	4b1e      	ldr	r3, [pc, #120]	; (80036c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003658:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800365a:	f7fe f8b1 	bl	80017c0 <HAL_GetTick>
 800365e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003660:	e009      	b.n	8003676 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003662:	f7fe f8ad 	bl	80017c0 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003670:	d901      	bls.n	8003676 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e022      	b.n	80036bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003676:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003682:	d1ee      	bne.n	8003662 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003684:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a0f      	ldr	r2, [pc, #60]	; (80036c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800368a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800368e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003690:	f7fe f896 	bl	80017c0 <HAL_GetTick>
 8003694:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003696:	e009      	b.n	80036ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003698:	f7fe f892 	bl	80017c0 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036a6:	d901      	bls.n	80036ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e007      	b.n	80036bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036ac:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036b8:	d1ee      	bne.n	8003698 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40007000 	.word	0x40007000

080036cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80036d4:	2300      	movs	r3, #0
 80036d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e29b      	b.n	8003c1a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8087 	beq.w	80037fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036f0:	4b96      	ldr	r3, [pc, #600]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 030c 	and.w	r3, r3, #12
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d00c      	beq.n	8003716 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fc:	4b93      	ldr	r3, [pc, #588]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 030c 	and.w	r3, r3, #12
 8003704:	2b08      	cmp	r3, #8
 8003706:	d112      	bne.n	800372e <HAL_RCC_OscConfig+0x62>
 8003708:	4b90      	ldr	r3, [pc, #576]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003714:	d10b      	bne.n	800372e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003716:	4b8d      	ldr	r3, [pc, #564]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d06c      	beq.n	80037fc <HAL_RCC_OscConfig+0x130>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d168      	bne.n	80037fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e275      	b.n	8003c1a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003736:	d106      	bne.n	8003746 <HAL_RCC_OscConfig+0x7a>
 8003738:	4b84      	ldr	r3, [pc, #528]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a83      	ldr	r2, [pc, #524]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800373e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	e02e      	b.n	80037a4 <HAL_RCC_OscConfig+0xd8>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10c      	bne.n	8003768 <HAL_RCC_OscConfig+0x9c>
 800374e:	4b7f      	ldr	r3, [pc, #508]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a7e      	ldr	r2, [pc, #504]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	4b7c      	ldr	r3, [pc, #496]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a7b      	ldr	r2, [pc, #492]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	e01d      	b.n	80037a4 <HAL_RCC_OscConfig+0xd8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0xc0>
 8003772:	4b76      	ldr	r3, [pc, #472]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a75      	ldr	r2, [pc, #468]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	4b73      	ldr	r3, [pc, #460]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a72      	ldr	r2, [pc, #456]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e00b      	b.n	80037a4 <HAL_RCC_OscConfig+0xd8>
 800378c:	4b6f      	ldr	r3, [pc, #444]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a6e      	ldr	r2, [pc, #440]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4b6c      	ldr	r3, [pc, #432]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a6b      	ldr	r2, [pc, #428]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800379e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d013      	beq.n	80037d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fe f808 	bl	80017c0 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b4:	f7fe f804 	bl	80017c0 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	; 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e229      	b.n	8003c1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c6:	4b61      	ldr	r3, [pc, #388]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0xe8>
 80037d2:	e014      	b.n	80037fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fd fff4 	bl	80017c0 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037dc:	f7fd fff0 	bl	80017c0 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	; 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e215      	b.n	8003c1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ee:	4b57      	ldr	r3, [pc, #348]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x110>
 80037fa:	e000      	b.n	80037fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d069      	beq.n	80038de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800380a:	4b50      	ldr	r3, [pc, #320]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00b      	beq.n	800382e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003816:	4b4d      	ldr	r3, [pc, #308]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b08      	cmp	r3, #8
 8003820:	d11c      	bne.n	800385c <HAL_RCC_OscConfig+0x190>
 8003822:	4b4a      	ldr	r3, [pc, #296]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d116      	bne.n	800385c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382e:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_RCC_OscConfig+0x17a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d001      	beq.n	8003846 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e1e9      	b.n	8003c1a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003846:	4b41      	ldr	r3, [pc, #260]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	493d      	ldr	r1, [pc, #244]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003856:	4313      	orrs	r3, r2
 8003858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385a:	e040      	b.n	80038de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d023      	beq.n	80038ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003864:	4b39      	ldr	r3, [pc, #228]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a38      	ldr	r2, [pc, #224]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fd ffa6 	bl	80017c0 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003878:	f7fd ffa2 	bl	80017c0 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e1c7      	b.n	8003c1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388a:	4b30      	ldr	r3, [pc, #192]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003896:	4b2d      	ldr	r3, [pc, #180]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4929      	ldr	r1, [pc, #164]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]
 80038aa:	e018      	b.n	80038de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ac:	4b27      	ldr	r3, [pc, #156]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a26      	ldr	r2, [pc, #152]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fd ff82 	bl	80017c0 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c0:	f7fd ff7e 	bl	80017c0 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e1a3      	b.n	8003c1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d2:	4b1e      	ldr	r3, [pc, #120]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d038      	beq.n	800395c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d019      	beq.n	8003926 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f2:	4b16      	ldr	r3, [pc, #88]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80038f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f6:	4a15      	ldr	r2, [pc, #84]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fe:	f7fd ff5f 	bl	80017c0 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003906:	f7fd ff5b 	bl	80017c0 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e180      	b.n	8003c1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800391a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x23a>
 8003924:	e01a      	b.n	800395c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392a:	4a08      	ldr	r2, [pc, #32]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003932:	f7fd ff45 	bl	80017c0 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003938:	e00a      	b.n	8003950 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800393a:	f7fd ff41 	bl	80017c0 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d903      	bls.n	8003950 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e166      	b.n	8003c1a <HAL_RCC_OscConfig+0x54e>
 800394c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003950:	4b92      	ldr	r3, [pc, #584]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ee      	bne.n	800393a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80a4 	beq.w	8003ab2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396a:	4b8c      	ldr	r3, [pc, #560]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10d      	bne.n	8003992 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003976:	4b89      	ldr	r3, [pc, #548]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	4a88      	ldr	r2, [pc, #544]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 800397c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003980:	6413      	str	r3, [r2, #64]	; 0x40
 8003982:	4b86      	ldr	r3, [pc, #536]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800398e:	2301      	movs	r3, #1
 8003990:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003992:	4b83      	ldr	r3, [pc, #524]	; (8003ba0 <HAL_RCC_OscConfig+0x4d4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d118      	bne.n	80039d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800399e:	4b80      	ldr	r3, [pc, #512]	; (8003ba0 <HAL_RCC_OscConfig+0x4d4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a7f      	ldr	r2, [pc, #508]	; (8003ba0 <HAL_RCC_OscConfig+0x4d4>)
 80039a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039aa:	f7fd ff09 	bl	80017c0 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b2:	f7fd ff05 	bl	80017c0 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b64      	cmp	r3, #100	; 0x64
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e12a      	b.n	8003c1a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c4:	4b76      	ldr	r3, [pc, #472]	; (8003ba0 <HAL_RCC_OscConfig+0x4d4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d106      	bne.n	80039e6 <HAL_RCC_OscConfig+0x31a>
 80039d8:	4b70      	ldr	r3, [pc, #448]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	4a6f      	ldr	r2, [pc, #444]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6713      	str	r3, [r2, #112]	; 0x70
 80039e4:	e02d      	b.n	8003a42 <HAL_RCC_OscConfig+0x376>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x33c>
 80039ee:	4b6b      	ldr	r3, [pc, #428]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f2:	4a6a      	ldr	r2, [pc, #424]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 80039f4:	f023 0301 	bic.w	r3, r3, #1
 80039f8:	6713      	str	r3, [r2, #112]	; 0x70
 80039fa:	4b68      	ldr	r3, [pc, #416]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	4a67      	ldr	r2, [pc, #412]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003a00:	f023 0304 	bic.w	r3, r3, #4
 8003a04:	6713      	str	r3, [r2, #112]	; 0x70
 8003a06:	e01c      	b.n	8003a42 <HAL_RCC_OscConfig+0x376>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b05      	cmp	r3, #5
 8003a0e:	d10c      	bne.n	8003a2a <HAL_RCC_OscConfig+0x35e>
 8003a10:	4b62      	ldr	r3, [pc, #392]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	4a61      	ldr	r2, [pc, #388]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003a16:	f043 0304 	orr.w	r3, r3, #4
 8003a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1c:	4b5f      	ldr	r3, [pc, #380]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a20:	4a5e      	ldr	r2, [pc, #376]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	6713      	str	r3, [r2, #112]	; 0x70
 8003a28:	e00b      	b.n	8003a42 <HAL_RCC_OscConfig+0x376>
 8003a2a:	4b5c      	ldr	r3, [pc, #368]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	4a5b      	ldr	r2, [pc, #364]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	6713      	str	r3, [r2, #112]	; 0x70
 8003a36:	4b59      	ldr	r3, [pc, #356]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	4a58      	ldr	r2, [pc, #352]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003a3c:	f023 0304 	bic.w	r3, r3, #4
 8003a40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d015      	beq.n	8003a76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4a:	f7fd feb9 	bl	80017c0 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a50:	e00a      	b.n	8003a68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fd feb5 	bl	80017c0 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e0d8      	b.n	8003c1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a68:	4b4c      	ldr	r3, [pc, #304]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0ee      	beq.n	8003a52 <HAL_RCC_OscConfig+0x386>
 8003a74:	e014      	b.n	8003aa0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a76:	f7fd fea3 	bl	80017c0 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fd fe9f 	bl	80017c0 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e0c2      	b.n	8003c1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a94:	4b41      	ldr	r3, [pc, #260]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1ee      	bne.n	8003a7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003aa0:	7dfb      	ldrb	r3, [r7, #23]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d105      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa6:	4b3d      	ldr	r3, [pc, #244]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	4a3c      	ldr	r2, [pc, #240]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 80ae 	beq.w	8003c18 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003abc:	4b37      	ldr	r3, [pc, #220]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d06d      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d14b      	bne.n	8003b68 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad0:	4b32      	ldr	r3, [pc, #200]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a31      	ldr	r2, [pc, #196]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fd fe70 	bl	80017c0 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae4:	f7fd fe6c 	bl	80017c0 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e091      	b.n	8003c1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af6:	4b29      	ldr	r3, [pc, #164]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69da      	ldr	r2, [r3, #28]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	019b      	lsls	r3, r3, #6
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	085b      	lsrs	r3, r3, #1
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	041b      	lsls	r3, r3, #16
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	061b      	lsls	r3, r3, #24
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	071b      	lsls	r3, r3, #28
 8003b2e:	491b      	ldr	r1, [pc, #108]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b34:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a18      	ldr	r2, [pc, #96]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7fd fe3e 	bl	80017c0 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fd fe3a 	bl	80017c0 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e05f      	b.n	8003c1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5a:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x47c>
 8003b66:	e057      	b.n	8003c18 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a0b      	ldr	r2, [pc, #44]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fd fe24 	bl	80017c0 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7c:	f7fd fe20 	bl	80017c0 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e045      	b.n	8003c1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8e:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x4b0>
 8003b9a:	e03d      	b.n	8003c18 <HAL_RCC_OscConfig+0x54c>
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ba4:	4b1f      	ldr	r3, [pc, #124]	; (8003c24 <HAL_RCC_OscConfig+0x558>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d030      	beq.n	8003c14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d129      	bne.n	8003c14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d122      	bne.n	8003c14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bda:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d119      	bne.n	8003c14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	3b01      	subs	r3, #1
 8003bee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d10f      	bne.n	8003c14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d107      	bne.n	8003c14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e000      	b.n	8003c1a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800

08003c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0d0      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c40:	4b6a      	ldr	r3, [pc, #424]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d910      	bls.n	8003c70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	4b67      	ldr	r3, [pc, #412]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 020f 	bic.w	r2, r3, #15
 8003c56:	4965      	ldr	r1, [pc, #404]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5e:	4b63      	ldr	r3, [pc, #396]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e0b8      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d020      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c88:	4b59      	ldr	r3, [pc, #356]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4a58      	ldr	r2, [pc, #352]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ca0:	4b53      	ldr	r3, [pc, #332]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	4a52      	ldr	r2, [pc, #328]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003caa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cac:	4b50      	ldr	r3, [pc, #320]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	494d      	ldr	r1, [pc, #308]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d040      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d107      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd2:	4b47      	ldr	r3, [pc, #284]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d115      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e07f      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d107      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cea:	4b41      	ldr	r3, [pc, #260]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e073      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfa:	4b3d      	ldr	r3, [pc, #244]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e06b      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d0a:	4b39      	ldr	r3, [pc, #228]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f023 0203 	bic.w	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4936      	ldr	r1, [pc, #216]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d1c:	f7fd fd50 	bl	80017c0 <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d22:	e00a      	b.n	8003d3a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d24:	f7fd fd4c 	bl	80017c0 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e053      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3a:	4b2d      	ldr	r3, [pc, #180]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 020c 	and.w	r2, r3, #12
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d1eb      	bne.n	8003d24 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b27      	ldr	r3, [pc, #156]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d210      	bcs.n	8003d7c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b24      	ldr	r3, [pc, #144]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f023 020f 	bic.w	r2, r3, #15
 8003d62:	4922      	ldr	r1, [pc, #136]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6a:	4b20      	ldr	r3, [pc, #128]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d001      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e032      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d88:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4916      	ldr	r1, [pc, #88]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003da6:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	490e      	ldr	r1, [pc, #56]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dba:	f000 f821 	bl	8003e00 <HAL_RCC_GetSysClockFreq>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	091b      	lsrs	r3, r3, #4
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	490a      	ldr	r1, [pc, #40]	; (8003df4 <HAL_RCC_ClockConfig+0x1cc>)
 8003dcc:	5ccb      	ldrb	r3, [r1, r3]
 8003dce:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd2:	4a09      	ldr	r2, [pc, #36]	; (8003df8 <HAL_RCC_ClockConfig+0x1d0>)
 8003dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <HAL_RCC_ClockConfig+0x1d4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fd f9ba 	bl	8001154 <HAL_InitTick>

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40023c00 	.word	0x40023c00
 8003df0:	40023800 	.word	0x40023800
 8003df4:	0801e1fc 	.word	0x0801e1fc
 8003df8:	20000004 	.word	0x20000004
 8003dfc:	20000008 	.word	0x20000008

08003e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e04:	b094      	sub	sp, #80	; 0x50
 8003e06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e10:	2300      	movs	r3, #0
 8003e12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e18:	4b79      	ldr	r3, [pc, #484]	; (8004000 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 030c 	and.w	r3, r3, #12
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d00d      	beq.n	8003e40 <HAL_RCC_GetSysClockFreq+0x40>
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	f200 80e1 	bhi.w	8003fec <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_RCC_GetSysClockFreq+0x34>
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d003      	beq.n	8003e3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e32:	e0db      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e34:	4b73      	ldr	r3, [pc, #460]	; (8004004 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e38:	e0db      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e3a:	4b73      	ldr	r3, [pc, #460]	; (8004008 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e3e:	e0d8      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e40:	4b6f      	ldr	r3, [pc, #444]	; (8004000 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e48:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e4a:	4b6d      	ldr	r3, [pc, #436]	; (8004000 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d063      	beq.n	8003f1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e56:	4b6a      	ldr	r3, [pc, #424]	; (8004000 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	099b      	lsrs	r3, r3, #6
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e68:	633b      	str	r3, [r7, #48]	; 0x30
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e72:	4622      	mov	r2, r4
 8003e74:	462b      	mov	r3, r5
 8003e76:	f04f 0000 	mov.w	r0, #0
 8003e7a:	f04f 0100 	mov.w	r1, #0
 8003e7e:	0159      	lsls	r1, r3, #5
 8003e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e84:	0150      	lsls	r0, r2, #5
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	1a51      	subs	r1, r2, r1
 8003e8e:	6139      	str	r1, [r7, #16]
 8003e90:	4629      	mov	r1, r5
 8003e92:	eb63 0301 	sbc.w	r3, r3, r1
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ea4:	4659      	mov	r1, fp
 8003ea6:	018b      	lsls	r3, r1, #6
 8003ea8:	4651      	mov	r1, sl
 8003eaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eae:	4651      	mov	r1, sl
 8003eb0:	018a      	lsls	r2, r1, #6
 8003eb2:	4651      	mov	r1, sl
 8003eb4:	ebb2 0801 	subs.w	r8, r2, r1
 8003eb8:	4659      	mov	r1, fp
 8003eba:	eb63 0901 	sbc.w	r9, r3, r1
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ed2:	4690      	mov	r8, r2
 8003ed4:	4699      	mov	r9, r3
 8003ed6:	4623      	mov	r3, r4
 8003ed8:	eb18 0303 	adds.w	r3, r8, r3
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	462b      	mov	r3, r5
 8003ee0:	eb49 0303 	adc.w	r3, r9, r3
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	024b      	lsls	r3, r1, #9
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003efc:	4621      	mov	r1, r4
 8003efe:	024a      	lsls	r2, r1, #9
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f06:	2200      	movs	r2, #0
 8003f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f10:	f7fc f9fe 	bl	8000310 <__aeabi_uldivmod>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4613      	mov	r3, r2
 8003f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f1c:	e058      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f1e:	4b38      	ldr	r3, [pc, #224]	; (8004000 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	099b      	lsrs	r3, r3, #6
 8003f24:	2200      	movs	r2, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	4611      	mov	r1, r2
 8003f2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f2e:	623b      	str	r3, [r7, #32]
 8003f30:	2300      	movs	r3, #0
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
 8003f34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f38:	4642      	mov	r2, r8
 8003f3a:	464b      	mov	r3, r9
 8003f3c:	f04f 0000 	mov.w	r0, #0
 8003f40:	f04f 0100 	mov.w	r1, #0
 8003f44:	0159      	lsls	r1, r3, #5
 8003f46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f4a:	0150      	lsls	r0, r2, #5
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4641      	mov	r1, r8
 8003f52:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f56:	4649      	mov	r1, r9
 8003f58:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f70:	ebb2 040a 	subs.w	r4, r2, sl
 8003f74:	eb63 050b 	sbc.w	r5, r3, fp
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	00eb      	lsls	r3, r5, #3
 8003f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f86:	00e2      	lsls	r2, r4, #3
 8003f88:	4614      	mov	r4, r2
 8003f8a:	461d      	mov	r5, r3
 8003f8c:	4643      	mov	r3, r8
 8003f8e:	18e3      	adds	r3, r4, r3
 8003f90:	603b      	str	r3, [r7, #0]
 8003f92:	464b      	mov	r3, r9
 8003f94:	eb45 0303 	adc.w	r3, r5, r3
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fa6:	4629      	mov	r1, r5
 8003fa8:	028b      	lsls	r3, r1, #10
 8003faa:	4621      	mov	r1, r4
 8003fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	028a      	lsls	r2, r1, #10
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fba:	2200      	movs	r2, #0
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	61fa      	str	r2, [r7, #28]
 8003fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fc4:	f7fc f9a4 	bl	8000310 <__aeabi_uldivmod>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4613      	mov	r3, r2
 8003fce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	0c1b      	lsrs	r3, r3, #16
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	3301      	adds	r3, #1
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003fe0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fea:	e002      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fec:	4b05      	ldr	r3, [pc, #20]	; (8004004 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3750      	adds	r7, #80	; 0x50
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ffe:	bf00      	nop
 8004000:	40023800 	.word	0x40023800
 8004004:	00f42400 	.word	0x00f42400
 8004008:	007a1200 	.word	0x007a1200

0800400c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004010:	4b03      	ldr	r3, [pc, #12]	; (8004020 <HAL_RCC_GetHCLKFreq+0x14>)
 8004012:	681b      	ldr	r3, [r3, #0]
}
 8004014:	4618      	mov	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20000004 	.word	0x20000004

08004024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004028:	f7ff fff0 	bl	800400c <HAL_RCC_GetHCLKFreq>
 800402c:	4602      	mov	r2, r0
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	0a9b      	lsrs	r3, r3, #10
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	4903      	ldr	r1, [pc, #12]	; (8004048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800403a:	5ccb      	ldrb	r3, [r1, r3]
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004040:	4618      	mov	r0, r3
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40023800 	.word	0x40023800
 8004048:	0801e20c 	.word	0x0801e20c

0800404c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004050:	f7ff ffdc 	bl	800400c <HAL_RCC_GetHCLKFreq>
 8004054:	4602      	mov	r2, r0
 8004056:	4b05      	ldr	r3, [pc, #20]	; (800406c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	0b5b      	lsrs	r3, r3, #13
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	4903      	ldr	r1, [pc, #12]	; (8004070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004062:	5ccb      	ldrb	r3, [r1, r3]
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004068:	4618      	mov	r0, r3
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40023800 	.word	0x40023800
 8004070:	0801e20c 	.word	0x0801e20c

08004074 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	220f      	movs	r2, #15
 8004082:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004084:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 0203 	and.w	r2, r3, #3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004090:	4b0f      	ldr	r3, [pc, #60]	; (80040d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800409c:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <HAL_RCC_GetClockConfig+0x5c>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80040a8:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <HAL_RCC_GetClockConfig+0x5c>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	08db      	lsrs	r3, r3, #3
 80040ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040b6:	4b07      	ldr	r3, [pc, #28]	; (80040d4 <HAL_RCC_GetClockConfig+0x60>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 020f 	and.w	r2, r3, #15
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	601a      	str	r2, [r3, #0]
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40023800 	.word	0x40023800
 80040d4:	40023c00 	.word	0x40023c00

080040d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d012      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004100:	4b69      	ldr	r3, [pc, #420]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	4a68      	ldr	r2, [pc, #416]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004106:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800410a:	6093      	str	r3, [r2, #8]
 800410c:	4b66      	ldr	r3, [pc, #408]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004114:	4964      	ldr	r1, [pc, #400]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004122:	2301      	movs	r3, #1
 8004124:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d017      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004132:	4b5d      	ldr	r3, [pc, #372]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004138:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004140:	4959      	ldr	r1, [pc, #356]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004150:	d101      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004152:	2301      	movs	r3, #1
 8004154:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800415e:	2301      	movs	r3, #1
 8004160:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d017      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800416e:	4b4e      	ldr	r3, [pc, #312]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004174:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	494a      	ldr	r1, [pc, #296]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800418c:	d101      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800418e:	2301      	movs	r3, #1
 8004190:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800419a:	2301      	movs	r3, #1
 800419c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80041aa:	2301      	movs	r3, #1
 80041ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 808b 	beq.w	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041bc:	4b3a      	ldr	r3, [pc, #232]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	4a39      	ldr	r2, [pc, #228]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c6:	6413      	str	r3, [r2, #64]	; 0x40
 80041c8:	4b37      	ldr	r3, [pc, #220]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041d4:	4b35      	ldr	r3, [pc, #212]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a34      	ldr	r2, [pc, #208]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e0:	f7fd faee 	bl	80017c0 <HAL_GetTick>
 80041e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e8:	f7fd faea 	bl	80017c0 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b64      	cmp	r3, #100	; 0x64
 80041f4:	d901      	bls.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e38f      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041fa:	4b2c      	ldr	r3, [pc, #176]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004206:	4b28      	ldr	r3, [pc, #160]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d035      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	429a      	cmp	r2, r3
 8004222:	d02e      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004224:	4b20      	ldr	r3, [pc, #128]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800422e:	4b1e      	ldr	r3, [pc, #120]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	4a1d      	ldr	r2, [pc, #116]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004238:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800423a:	4b1b      	ldr	r3, [pc, #108]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	4a1a      	ldr	r2, [pc, #104]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004244:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004246:	4a18      	ldr	r2, [pc, #96]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800424c:	4b16      	ldr	r3, [pc, #88]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800424e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b01      	cmp	r3, #1
 8004256:	d114      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fd fab2 	bl	80017c0 <HAL_GetTick>
 800425c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425e:	e00a      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004260:	f7fd faae 	bl	80017c0 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	f241 3288 	movw	r2, #5000	; 0x1388
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e351      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004276:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0ee      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800428e:	d111      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800429c:	4b04      	ldr	r3, [pc, #16]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800429e:	400b      	ands	r3, r1
 80042a0:	4901      	ldr	r1, [pc, #4]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
 80042a6:	e00b      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80042a8:	40023800 	.word	0x40023800
 80042ac:	40007000 	.word	0x40007000
 80042b0:	0ffffcff 	.word	0x0ffffcff
 80042b4:	4bac      	ldr	r3, [pc, #688]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	4aab      	ldr	r2, [pc, #684]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042be:	6093      	str	r3, [r2, #8]
 80042c0:	4ba9      	ldr	r3, [pc, #676]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042cc:	49a6      	ldr	r1, [pc, #664]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0310 	and.w	r3, r3, #16
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d010      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042de:	4ba2      	ldr	r3, [pc, #648]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e4:	4aa0      	ldr	r2, [pc, #640]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042ee:	4b9e      	ldr	r3, [pc, #632]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	499b      	ldr	r1, [pc, #620]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800430c:	4b96      	ldr	r3, [pc, #600]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004312:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800431a:	4993      	ldr	r1, [pc, #588]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800432e:	4b8e      	ldr	r3, [pc, #568]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004334:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800433c:	498a      	ldr	r1, [pc, #552]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004350:	4b85      	ldr	r3, [pc, #532]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004356:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800435e:	4982      	ldr	r1, [pc, #520]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004372:	4b7d      	ldr	r3, [pc, #500]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004378:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	4979      	ldr	r1, [pc, #484]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004394:	4b74      	ldr	r3, [pc, #464]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439a:	f023 0203 	bic.w	r2, r3, #3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	4971      	ldr	r1, [pc, #452]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043b6:	4b6c      	ldr	r3, [pc, #432]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043bc:	f023 020c 	bic.w	r2, r3, #12
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c4:	4968      	ldr	r1, [pc, #416]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043d8:	4b63      	ldr	r3, [pc, #396]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e6:	4960      	ldr	r1, [pc, #384]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043fa:	4b5b      	ldr	r3, [pc, #364]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004400:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004408:	4957      	ldr	r1, [pc, #348]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00a      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800441c:	4b52      	ldr	r3, [pc, #328]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004422:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442a:	494f      	ldr	r1, [pc, #316]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800443e:	4b4a      	ldr	r3, [pc, #296]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004444:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	4946      	ldr	r1, [pc, #280]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00a      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004460:	4b41      	ldr	r3, [pc, #260]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004466:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446e:	493e      	ldr	r1, [pc, #248]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004482:	4b39      	ldr	r3, [pc, #228]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004488:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004490:	4935      	ldr	r1, [pc, #212]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00a      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044a4:	4b30      	ldr	r3, [pc, #192]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044b2:	492d      	ldr	r1, [pc, #180]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d011      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044c6:	4b28      	ldr	r3, [pc, #160]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044d4:	4924      	ldr	r1, [pc, #144]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044e4:	d101      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044e6:	2301      	movs	r3, #1
 80044e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80044f6:	2301      	movs	r3, #1
 80044f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004506:	4b18      	ldr	r3, [pc, #96]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004514:	4914      	ldr	r1, [pc, #80]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00b      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004528:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004538:	490b      	ldr	r1, [pc, #44]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00f      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800454e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004552:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455c:	4902      	ldr	r1, [pc, #8]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004564:	e002      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004566:	bf00      	nop
 8004568:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00b      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004578:	4b8a      	ldr	r3, [pc, #552]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800457a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800457e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004588:	4986      	ldr	r1, [pc, #536]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00b      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800459c:	4b81      	ldr	r3, [pc, #516]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800459e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ac:	497d      	ldr	r1, [pc, #500]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d006      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 80d6 	beq.w	8004774 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045c8:	4b76      	ldr	r3, [pc, #472]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a75      	ldr	r2, [pc, #468]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d4:	f7fd f8f4 	bl	80017c0 <HAL_GetTick>
 80045d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045dc:	f7fd f8f0 	bl	80017c0 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b64      	cmp	r3, #100	; 0x64
 80045e8:	d901      	bls.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e195      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045ee:	4b6d      	ldr	r3, [pc, #436]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d021      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	2b00      	cmp	r3, #0
 800460c:	d11d      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800460e:	4b65      	ldr	r3, [pc, #404]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004614:	0c1b      	lsrs	r3, r3, #16
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800461c:	4b61      	ldr	r3, [pc, #388]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800461e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004622:	0e1b      	lsrs	r3, r3, #24
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	019a      	lsls	r2, r3, #6
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	041b      	lsls	r3, r3, #16
 8004634:	431a      	orrs	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	061b      	lsls	r3, r3, #24
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	071b      	lsls	r3, r3, #28
 8004642:	4958      	ldr	r1, [pc, #352]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d004      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004668:	2b00      	cmp	r3, #0
 800466a:	d02e      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004674:	d129      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004676:	4b4b      	ldr	r3, [pc, #300]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004684:	4b47      	ldr	r3, [pc, #284]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468a:	0f1b      	lsrs	r3, r3, #28
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	019a      	lsls	r2, r3, #6
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	041b      	lsls	r3, r3, #16
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	061b      	lsls	r3, r3, #24
 80046a4:	431a      	orrs	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	071b      	lsls	r3, r3, #28
 80046aa:	493e      	ldr	r1, [pc, #248]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80046b2:	4b3c      	ldr	r3, [pc, #240]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046b8:	f023 021f 	bic.w	r2, r3, #31
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	3b01      	subs	r3, #1
 80046c2:	4938      	ldr	r1, [pc, #224]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d01d      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046d6:	4b33      	ldr	r3, [pc, #204]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046dc:	0e1b      	lsrs	r3, r3, #24
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046e4:	4b2f      	ldr	r3, [pc, #188]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ea:	0f1b      	lsrs	r3, r3, #28
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	019a      	lsls	r2, r3, #6
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	041b      	lsls	r3, r3, #16
 80046fe:	431a      	orrs	r2, r3
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	061b      	lsls	r3, r3, #24
 8004704:	431a      	orrs	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	071b      	lsls	r3, r3, #28
 800470a:	4926      	ldr	r1, [pc, #152]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d011      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	019a      	lsls	r2, r3, #6
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	041b      	lsls	r3, r3, #16
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	061b      	lsls	r3, r3, #24
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	071b      	lsls	r3, r3, #28
 800473a:	491a      	ldr	r1, [pc, #104]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004742:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a17      	ldr	r2, [pc, #92]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004748:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800474c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800474e:	f7fd f837 	bl	80017c0 <HAL_GetTick>
 8004752:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004754:	e008      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004756:	f7fd f833 	bl	80017c0 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b64      	cmp	r3, #100	; 0x64
 8004762:	d901      	bls.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e0d8      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004768:	4b0e      	ldr	r3, [pc, #56]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0f0      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b01      	cmp	r3, #1
 8004778:	f040 80ce 	bne.w	8004918 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800477c:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a08      	ldr	r2, [pc, #32]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004788:	f7fd f81a 	bl	80017c0 <HAL_GetTick>
 800478c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800478e:	e00b      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004790:	f7fd f816 	bl	80017c0 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	; 0x64
 800479c:	d904      	bls.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e0bb      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047a8:	4b5e      	ldr	r3, [pc, #376]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047b4:	d0ec      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d009      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d02e      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d12a      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047de:	4b51      	ldr	r3, [pc, #324]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e4:	0c1b      	lsrs	r3, r3, #16
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047ec:	4b4d      	ldr	r3, [pc, #308]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f2:	0f1b      	lsrs	r3, r3, #28
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	019a      	lsls	r2, r3, #6
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	041b      	lsls	r3, r3, #16
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	061b      	lsls	r3, r3, #24
 800480c:	431a      	orrs	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	071b      	lsls	r3, r3, #28
 8004812:	4944      	ldr	r1, [pc, #272]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800481a:	4b42      	ldr	r3, [pc, #264]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800481c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004820:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	3b01      	subs	r3, #1
 800482a:	021b      	lsls	r3, r3, #8
 800482c:	493d      	ldr	r1, [pc, #244]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d022      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004848:	d11d      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800484a:	4b36      	ldr	r3, [pc, #216]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004850:	0e1b      	lsrs	r3, r3, #24
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004858:	4b32      	ldr	r3, [pc, #200]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	0f1b      	lsrs	r3, r3, #28
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	019a      	lsls	r2, r3, #6
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	041b      	lsls	r3, r3, #16
 8004872:	431a      	orrs	r2, r3
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	061b      	lsls	r3, r3, #24
 8004878:	431a      	orrs	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	071b      	lsls	r3, r3, #28
 800487e:	4929      	ldr	r1, [pc, #164]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004880:	4313      	orrs	r3, r2
 8004882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d028      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004892:	4b24      	ldr	r3, [pc, #144]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004898:	0e1b      	lsrs	r3, r3, #24
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048a0:	4b20      	ldr	r3, [pc, #128]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a6:	0c1b      	lsrs	r3, r3, #16
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	019a      	lsls	r2, r3, #6
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	041b      	lsls	r3, r3, #16
 80048b8:	431a      	orrs	r2, r3
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	061b      	lsls	r3, r3, #24
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	071b      	lsls	r3, r3, #28
 80048c6:	4917      	ldr	r1, [pc, #92]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80048ce:	4b15      	ldr	r3, [pc, #84]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	4911      	ldr	r1, [pc, #68]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048e4:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a0e      	ldr	r2, [pc, #56]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f0:	f7fc ff66 	bl	80017c0 <HAL_GetTick>
 80048f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048f8:	f7fc ff62 	bl	80017c0 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b64      	cmp	r3, #100	; 0x64
 8004904:	d901      	bls.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e007      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800490a:	4b06      	ldr	r3, [pc, #24]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004916:	d1ef      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40023800 	.word	0x40023800

08004928 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e09d      	b.n	8004a76 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	2b00      	cmp	r3, #0
 8004940:	d108      	bne.n	8004954 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800494a:	d009      	beq.n	8004960 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	61da      	str	r2, [r3, #28]
 8004952:	e005      	b.n	8004960 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fc faa6 	bl	8000ecc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004996:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049a0:	d902      	bls.n	80049a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	e002      	b.n	80049ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80049b6:	d007      	beq.n	80049c8 <HAL_SPI_Init+0xa0>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049c0:	d002      	beq.n	80049c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0a:	ea42 0103 	orr.w	r1, r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	0c1b      	lsrs	r3, r3, #16
 8004a24:	f003 0204 	and.w	r2, r3, #4
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a44:	ea42 0103 	orr.w	r1, r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69da      	ldr	r2, [r3, #28]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_SPI_TransmitReceive_IT+0x20>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e091      	b.n	8004bc4 <HAL_SPI_TransmitReceive_IT+0x144>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004aae:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ab6:	7dbb      	ldrb	r3, [r7, #22]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d00d      	beq.n	8004ad8 <HAL_SPI_TransmitReceive_IT+0x58>
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ac2:	d106      	bne.n	8004ad2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d102      	bne.n	8004ad2 <HAL_SPI_TransmitReceive_IT+0x52>
 8004acc:	7dbb      	ldrb	r3, [r7, #22]
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d002      	beq.n	8004ad8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ad6:	e070      	b.n	8004bba <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d005      	beq.n	8004aea <HAL_SPI_TransmitReceive_IT+0x6a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <HAL_SPI_TransmitReceive_IT+0x6a>
 8004ae4:	887b      	ldrh	r3, [r7, #2]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d102      	bne.n	8004af0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004aee:	e064      	b.n	8004bba <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d003      	beq.n	8004b04 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2205      	movs	r2, #5
 8004b00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	887a      	ldrh	r2, [r7, #2]
 8004b14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	887a      	ldrh	r2, [r7, #2]
 8004b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	887a      	ldrh	r2, [r7, #2]
 8004b26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	887a      	ldrh	r2, [r7, #2]
 8004b2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b3a:	d906      	bls.n	8004b4a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a24      	ldr	r2, [pc, #144]	; (8004bd0 <HAL_SPI_TransmitReceive_IT+0x150>)
 8004b40:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4a23      	ldr	r2, [pc, #140]	; (8004bd4 <HAL_SPI_TransmitReceive_IT+0x154>)
 8004b46:	651a      	str	r2, [r3, #80]	; 0x50
 8004b48:	e005      	b.n	8004b56 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4a22      	ldr	r2, [pc, #136]	; (8004bd8 <HAL_SPI_TransmitReceive_IT+0x158>)
 8004b4e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4a22      	ldr	r2, [pc, #136]	; (8004bdc <HAL_SPI_TransmitReceive_IT+0x15c>)
 8004b54:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b5e:	d802      	bhi.n	8004b66 <HAL_SPI_TransmitReceive_IT+0xe6>
 8004b60:	887b      	ldrh	r3, [r7, #2]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d908      	bls.n	8004b78 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b74:	605a      	str	r2, [r3, #4]
 8004b76:	e007      	b.n	8004b88 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b86:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004b96:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba2:	2b40      	cmp	r3, #64	; 0x40
 8004ba4:	d008      	beq.n	8004bb8 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	e000      	b.n	8004bba <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8004bb8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	08004f83 	.word	0x08004f83
 8004bd4:	08004fe9 	.word	0x08004fe9
 8004bd8:	08004e33 	.word	0x08004e33
 8004bdc:	08004ef1 	.word	0x08004ef1

08004be0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	099b      	lsrs	r3, r3, #6
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10f      	bne.n	8004c24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	099b      	lsrs	r3, r3, #6
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d004      	beq.n	8004c24 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	4798      	blx	r3
    return;
 8004c22:	e0d7      	b.n	8004dd4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	085b      	lsrs	r3, r3, #1
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <HAL_SPI_IRQHandler+0x66>
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	09db      	lsrs	r3, r3, #7
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d004      	beq.n	8004c46 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	4798      	blx	r3
    return;
 8004c44:	e0c6      	b.n	8004dd4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	095b      	lsrs	r3, r3, #5
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10c      	bne.n	8004c6c <HAL_SPI_IRQHandler+0x8c>
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	099b      	lsrs	r3, r3, #6
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	0a1b      	lsrs	r3, r3, #8
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 80b4 	beq.w	8004dd4 <HAL_SPI_IRQHandler+0x1f4>
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 80ad 	beq.w	8004dd4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	099b      	lsrs	r3, r3, #6
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d023      	beq.n	8004cce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	d011      	beq.n	8004cb6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c96:	f043 0204 	orr.w	r2, r3, #4
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	617b      	str	r3, [r7, #20]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	e00b      	b.n	8004cce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	693b      	ldr	r3, [r7, #16]
        return;
 8004ccc:	e082      	b.n	8004dd4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d014      	beq.n	8004d04 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cde:	f043 0201 	orr.w	r2, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	0a1b      	lsrs	r3, r3, #8
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00c      	beq.n	8004d2a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d14:	f043 0208 	orr.w	r2, r3, #8
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60bb      	str	r3, [r7, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	60bb      	str	r3, [r7, #8]
 8004d28:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d04f      	beq.n	8004dd2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d40:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d104      	bne.n	8004d5e <HAL_SPI_IRQHandler+0x17e>
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d034      	beq.n	8004dc8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0203 	bic.w	r2, r2, #3
 8004d6c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d011      	beq.n	8004d9a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7a:	4a18      	ldr	r2, [pc, #96]	; (8004ddc <HAL_SPI_IRQHandler+0x1fc>)
 8004d7c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fc feaa 	bl	8001adc <HAL_DMA_Abort_IT>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d016      	beq.n	8004dd0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da6:	4a0d      	ldr	r2, [pc, #52]	; (8004ddc <HAL_SPI_IRQHandler+0x1fc>)
 8004da8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fc fe94 	bl	8001adc <HAL_DMA_Abort_IT>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004dc6:	e003      	b.n	8004dd0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f813 	bl	8004df4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004dce:	e000      	b.n	8004dd2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004dd0:	bf00      	nop
    return;
 8004dd2:	bf00      	nop
  }
}
 8004dd4:	3720      	adds	r7, #32
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	08004e09 	.word	0x08004e09

08004de0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f7ff ffe5 	bl	8004df4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e2a:	bf00      	nop
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b082      	sub	sp, #8
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d923      	bls.n	8004e8e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	b292      	uxth	r2, r2
 8004e52:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e58:	1c9a      	adds	r2, r3, #2
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	3b02      	subs	r3, #2
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d11f      	bne.n	8004ebc <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e8a:	605a      	str	r2, [r3, #4]
 8004e8c:	e016      	b.n	8004ebc <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f103 020c 	add.w	r2, r3, #12
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	7812      	ldrb	r2, [r2, #0]
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10f      	bne.n	8004ee8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ed6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d102      	bne.n	8004ee8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fa38 	bl	8005358 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d912      	bls.n	8004f28 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	881a      	ldrh	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	1c9a      	adds	r2, r3, #2
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b02      	subs	r3, #2
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f26:	e012      	b.n	8004f4e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	330c      	adds	r3, #12
 8004f32:	7812      	ldrb	r2, [r2, #0]
 8004f34:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d110      	bne.n	8004f7a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f66:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f9ef 	bl	8005358 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004f7a:	bf00      	nop
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b082      	sub	sp, #8
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	b292      	uxth	r2, r2
 8004f96:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	1c9a      	adds	r2, r3, #2
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10f      	bne.n	8004fe0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fce:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d102      	bne.n	8004fe0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f9bc 	bl	8005358 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	881a      	ldrh	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	1c9a      	adds	r2, r3, #2
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d110      	bne.n	8005040 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800502c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d102      	bne.n	8005040 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f98c 	bl	8005358 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005040:	bf00      	nop
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	4613      	mov	r3, r2
 8005056:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005058:	f7fc fbb2 	bl	80017c0 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	4413      	add	r3, r2
 8005066:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005068:	f7fc fbaa 	bl	80017c0 <HAL_GetTick>
 800506c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800506e:	4b39      	ldr	r3, [pc, #228]	; (8005154 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	015b      	lsls	r3, r3, #5
 8005074:	0d1b      	lsrs	r3, r3, #20
 8005076:	69fa      	ldr	r2, [r7, #28]
 8005078:	fb02 f303 	mul.w	r3, r2, r3
 800507c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800507e:	e054      	b.n	800512a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005086:	d050      	beq.n	800512a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005088:	f7fc fb9a 	bl	80017c0 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	429a      	cmp	r2, r3
 8005096:	d902      	bls.n	800509e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d13d      	bne.n	800511a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050b6:	d111      	bne.n	80050dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c0:	d004      	beq.n	80050cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ca:	d107      	bne.n	80050dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050e4:	d10f      	bne.n	8005106 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005104:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e017      	b.n	800514a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	3b01      	subs	r3, #1
 8005128:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4013      	ands	r3, r2
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	429a      	cmp	r2, r3
 8005138:	bf0c      	ite	eq
 800513a:	2301      	moveq	r3, #1
 800513c:	2300      	movne	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	429a      	cmp	r2, r3
 8005146:	d19b      	bne.n	8005080 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3720      	adds	r7, #32
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000004 	.word	0x20000004

08005158 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08a      	sub	sp, #40	; 0x28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800516a:	f7fc fb29 	bl	80017c0 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	4413      	add	r3, r2
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800517a:	f7fc fb21 	bl	80017c0 <HAL_GetTick>
 800517e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005188:	4b3d      	ldr	r3, [pc, #244]	; (8005280 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	00da      	lsls	r2, r3, #3
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	0d1b      	lsrs	r3, r3, #20
 8005198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519a:	fb02 f303 	mul.w	r3, r2, r3
 800519e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80051a0:	e060      	b.n	8005264 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80051a8:	d107      	bne.n	80051ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d104      	bne.n	80051ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051c0:	d050      	beq.n	8005264 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051c2:	f7fc fafd 	bl	80017c0 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d902      	bls.n	80051d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d13d      	bne.n	8005254 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051f0:	d111      	bne.n	8005216 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051fa:	d004      	beq.n	8005206 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005204:	d107      	bne.n	8005216 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005214:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800521e:	d10f      	bne.n	8005240 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800523e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e010      	b.n	8005276 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	3b01      	subs	r3, #1
 8005262:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	4013      	ands	r3, r2
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	429a      	cmp	r2, r3
 8005272:	d196      	bne.n	80051a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3728      	adds	r7, #40	; 0x28
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	20000004 	.word	0x20000004

08005284 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af02      	add	r7, sp, #8
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2200      	movs	r2, #0
 8005298:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f7ff ff5b 	bl	8005158 <SPI_WaitFifoStateUntilTimeout>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d007      	beq.n	80052b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ac:	f043 0220 	orr.w	r2, r3, #32
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e046      	b.n	8005346 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052b8:	4b25      	ldr	r3, [pc, #148]	; (8005350 <SPI_EndRxTxTransaction+0xcc>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a25      	ldr	r2, [pc, #148]	; (8005354 <SPI_EndRxTxTransaction+0xd0>)
 80052be:	fba2 2303 	umull	r2, r3, r2, r3
 80052c2:	0d5b      	lsrs	r3, r3, #21
 80052c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052c8:	fb02 f303 	mul.w	r3, r2, r3
 80052cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052d6:	d112      	bne.n	80052fe <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2200      	movs	r2, #0
 80052e0:	2180      	movs	r1, #128	; 0x80
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f7ff feb0 	bl	8005048 <SPI_WaitFlagStateUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d016      	beq.n	800531c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f2:	f043 0220 	orr.w	r2, r3, #32
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e023      	b.n	8005346 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	3b01      	subs	r3, #1
 8005308:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005314:	2b80      	cmp	r3, #128	; 0x80
 8005316:	d0f2      	beq.n	80052fe <SPI_EndRxTxTransaction+0x7a>
 8005318:	e000      	b.n	800531c <SPI_EndRxTxTransaction+0x98>
        break;
 800531a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2200      	movs	r2, #0
 8005324:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f7ff ff15 	bl	8005158 <SPI_WaitFifoStateUntilTimeout>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d007      	beq.n	8005344 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005338:	f043 0220 	orr.w	r2, r3, #32
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e000      	b.n	8005346 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20000004 	.word	0x20000004
 8005354:	165e9f81 	.word	0x165e9f81

08005358 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005360:	f7fc fa2e 	bl	80017c0 <HAL_GetTick>
 8005364:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 0220 	bic.w	r2, r2, #32
 8005374:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	2164      	movs	r1, #100	; 0x64
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7ff ff82 	bl	8005284 <SPI_EndRxTxTransaction>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d005      	beq.n	8005392 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800538a:	f043 0220 	orr.w	r2, r3, #32
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005396:	2b00      	cmp	r3, #0
 8005398:	d115      	bne.n	80053c6 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d107      	bne.n	80053b6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff fd16 	bl	8004de0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80053b4:	e00e      	b.n	80053d4 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7fb fab6 	bl	8000930 <HAL_SPI_TxRxCpltCallback>
}
 80053c4:	e006      	b.n	80053d4 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff fd10 	bl	8004df4 <HAL_SPI_ErrorCallback>
}
 80053d4:	bf00      	nop
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e049      	b.n	8005482 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f841 	bl	800548a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3304      	adds	r3, #4
 8005418:	4619      	mov	r1, r3
 800541a:	4610      	mov	r0, r2
 800541c:	f000 fa00 	bl	8005820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
	...

080054a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d001      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e054      	b.n	8005562 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0201 	orr.w	r2, r2, #1
 80054ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a26      	ldr	r2, [pc, #152]	; (8005570 <HAL_TIM_Base_Start_IT+0xd0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d022      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x80>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e2:	d01d      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x80>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a22      	ldr	r2, [pc, #136]	; (8005574 <HAL_TIM_Base_Start_IT+0xd4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d018      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x80>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a21      	ldr	r2, [pc, #132]	; (8005578 <HAL_TIM_Base_Start_IT+0xd8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d013      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x80>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a1f      	ldr	r2, [pc, #124]	; (800557c <HAL_TIM_Base_Start_IT+0xdc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00e      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x80>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a1e      	ldr	r2, [pc, #120]	; (8005580 <HAL_TIM_Base_Start_IT+0xe0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d009      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x80>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a1c      	ldr	r2, [pc, #112]	; (8005584 <HAL_TIM_Base_Start_IT+0xe4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d004      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x80>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a1b      	ldr	r2, [pc, #108]	; (8005588 <HAL_TIM_Base_Start_IT+0xe8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d115      	bne.n	800554c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	4b19      	ldr	r3, [pc, #100]	; (800558c <HAL_TIM_Base_Start_IT+0xec>)
 8005528:	4013      	ands	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b06      	cmp	r3, #6
 8005530:	d015      	beq.n	800555e <HAL_TIM_Base_Start_IT+0xbe>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005538:	d011      	beq.n	800555e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0201 	orr.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554a:	e008      	b.n	800555e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0201 	orr.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	e000      	b.n	8005560 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40010000 	.word	0x40010000
 8005574:	40000400 	.word	0x40000400
 8005578:	40000800 	.word	0x40000800
 800557c:	40000c00 	.word	0x40000c00
 8005580:	40010400 	.word	0x40010400
 8005584:	40014000 	.word	0x40014000
 8005588:	40001800 	.word	0x40001800
 800558c:	00010007 	.word	0x00010007

08005590 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d122      	bne.n	80055ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d11b      	bne.n	80055ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0202 	mvn.w	r2, #2
 80055bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f905 	bl	80057e2 <HAL_TIM_IC_CaptureCallback>
 80055d8:	e005      	b.n	80055e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f8f7 	bl	80057ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f908 	bl	80057f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d122      	bne.n	8005640 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b04      	cmp	r3, #4
 8005606:	d11b      	bne.n	8005640 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0204 	mvn.w	r2, #4
 8005610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2202      	movs	r2, #2
 8005616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f8db 	bl	80057e2 <HAL_TIM_IC_CaptureCallback>
 800562c:	e005      	b.n	800563a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f8cd 	bl	80057ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f8de 	bl	80057f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b08      	cmp	r3, #8
 800564c:	d122      	bne.n	8005694 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b08      	cmp	r3, #8
 800565a:	d11b      	bne.n	8005694 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f06f 0208 	mvn.w	r2, #8
 8005664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2204      	movs	r2, #4
 800566a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f8b1 	bl	80057e2 <HAL_TIM_IC_CaptureCallback>
 8005680:	e005      	b.n	800568e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f8a3 	bl	80057ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f8b4 	bl	80057f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0310 	and.w	r3, r3, #16
 800569e:	2b10      	cmp	r3, #16
 80056a0:	d122      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	2b10      	cmp	r3, #16
 80056ae:	d11b      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0210 	mvn.w	r2, #16
 80056b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2208      	movs	r2, #8
 80056be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f887 	bl	80057e2 <HAL_TIM_IC_CaptureCallback>
 80056d4:	e005      	b.n	80056e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f879 	bl	80057ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f88a 	bl	80057f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d10e      	bne.n	8005714 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b01      	cmp	r3, #1
 8005702:	d107      	bne.n	8005714 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f06f 0201 	mvn.w	r2, #1
 800570c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7fb fb9c 	bl	8000e4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571e:	2b80      	cmp	r3, #128	; 0x80
 8005720:	d10e      	bne.n	8005740 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572c:	2b80      	cmp	r3, #128	; 0x80
 800572e:	d107      	bne.n	8005740 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f91a 	bl	8005974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800574e:	d10e      	bne.n	800576e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575a:	2b80      	cmp	r3, #128	; 0x80
 800575c:	d107      	bne.n	800576e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f90d 	bl	8005988 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005778:	2b40      	cmp	r3, #64	; 0x40
 800577a:	d10e      	bne.n	800579a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b40      	cmp	r3, #64	; 0x40
 8005788:	d107      	bne.n	800579a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f838 	bl	800580a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d10e      	bne.n	80057c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	d107      	bne.n	80057c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f06f 0220 	mvn.w	r2, #32
 80057be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f8cd 	bl	8005960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057c6:	bf00      	nop
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a40      	ldr	r2, [pc, #256]	; (8005934 <TIM_Base_SetConfig+0x114>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d013      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800583e:	d00f      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a3d      	ldr	r2, [pc, #244]	; (8005938 <TIM_Base_SetConfig+0x118>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00b      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a3c      	ldr	r2, [pc, #240]	; (800593c <TIM_Base_SetConfig+0x11c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d007      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a3b      	ldr	r2, [pc, #236]	; (8005940 <TIM_Base_SetConfig+0x120>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a3a      	ldr	r2, [pc, #232]	; (8005944 <TIM_Base_SetConfig+0x124>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d108      	bne.n	8005872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2f      	ldr	r2, [pc, #188]	; (8005934 <TIM_Base_SetConfig+0x114>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d02b      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005880:	d027      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2c      	ldr	r2, [pc, #176]	; (8005938 <TIM_Base_SetConfig+0x118>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d023      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2b      	ldr	r2, [pc, #172]	; (800593c <TIM_Base_SetConfig+0x11c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d01f      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2a      	ldr	r2, [pc, #168]	; (8005940 <TIM_Base_SetConfig+0x120>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d01b      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a29      	ldr	r2, [pc, #164]	; (8005944 <TIM_Base_SetConfig+0x124>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d017      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a28      	ldr	r2, [pc, #160]	; (8005948 <TIM_Base_SetConfig+0x128>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d013      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a27      	ldr	r2, [pc, #156]	; (800594c <TIM_Base_SetConfig+0x12c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00f      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a26      	ldr	r2, [pc, #152]	; (8005950 <TIM_Base_SetConfig+0x130>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00b      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a25      	ldr	r2, [pc, #148]	; (8005954 <TIM_Base_SetConfig+0x134>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d007      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a24      	ldr	r2, [pc, #144]	; (8005958 <TIM_Base_SetConfig+0x138>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d003      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a23      	ldr	r2, [pc, #140]	; (800595c <TIM_Base_SetConfig+0x13c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d108      	bne.n	80058e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a0a      	ldr	r2, [pc, #40]	; (8005934 <TIM_Base_SetConfig+0x114>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d003      	beq.n	8005918 <TIM_Base_SetConfig+0xf8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a0c      	ldr	r2, [pc, #48]	; (8005944 <TIM_Base_SetConfig+0x124>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d103      	bne.n	8005920 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	615a      	str	r2, [r3, #20]
}
 8005926:	bf00      	nop
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40010000 	.word	0x40010000
 8005938:	40000400 	.word	0x40000400
 800593c:	40000800 	.word	0x40000800
 8005940:	40000c00 	.word	0x40000c00
 8005944:	40010400 	.word	0x40010400
 8005948:	40014000 	.word	0x40014000
 800594c:	40014400 	.word	0x40014400
 8005950:	40014800 	.word	0x40014800
 8005954:	40001800 	.word	0x40001800
 8005958:	40001c00 	.word	0x40001c00
 800595c:	40002000 	.word	0x40002000

08005960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e040      	b.n	8005a30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fb faee 	bl	8000fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2224      	movs	r2, #36	; 0x24
 80059c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0201 	bic.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f82c 	bl	8005a38 <UART_SetConfig>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d101      	bne.n	80059ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e022      	b.n	8005a30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fa84 	bl	8005f00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0201 	orr.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fb0b 	bl	8006044 <UART_CheckIdleState>
 8005a2e:	4603      	mov	r3, r0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	4ba6      	ldr	r3, [pc, #664]	; (8005cfc <UART_SetConfig+0x2c4>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	6812      	ldr	r2, [r2, #0]
 8005a6a:	6979      	ldr	r1, [r7, #20]
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a94      	ldr	r2, [pc, #592]	; (8005d00 <UART_SetConfig+0x2c8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d120      	bne.n	8005af6 <UART_SetConfig+0xbe>
 8005ab4:	4b93      	ldr	r3, [pc, #588]	; (8005d04 <UART_SetConfig+0x2cc>)
 8005ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d816      	bhi.n	8005af0 <UART_SetConfig+0xb8>
 8005ac2:	a201      	add	r2, pc, #4	; (adr r2, 8005ac8 <UART_SetConfig+0x90>)
 8005ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac8:	08005ad9 	.word	0x08005ad9
 8005acc:	08005ae5 	.word	0x08005ae5
 8005ad0:	08005adf 	.word	0x08005adf
 8005ad4:	08005aeb 	.word	0x08005aeb
 8005ad8:	2301      	movs	r3, #1
 8005ada:	77fb      	strb	r3, [r7, #31]
 8005adc:	e150      	b.n	8005d80 <UART_SetConfig+0x348>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	77fb      	strb	r3, [r7, #31]
 8005ae2:	e14d      	b.n	8005d80 <UART_SetConfig+0x348>
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	77fb      	strb	r3, [r7, #31]
 8005ae8:	e14a      	b.n	8005d80 <UART_SetConfig+0x348>
 8005aea:	2308      	movs	r3, #8
 8005aec:	77fb      	strb	r3, [r7, #31]
 8005aee:	e147      	b.n	8005d80 <UART_SetConfig+0x348>
 8005af0:	2310      	movs	r3, #16
 8005af2:	77fb      	strb	r3, [r7, #31]
 8005af4:	e144      	b.n	8005d80 <UART_SetConfig+0x348>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a83      	ldr	r2, [pc, #524]	; (8005d08 <UART_SetConfig+0x2d0>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d132      	bne.n	8005b66 <UART_SetConfig+0x12e>
 8005b00:	4b80      	ldr	r3, [pc, #512]	; (8005d04 <UART_SetConfig+0x2cc>)
 8005b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b06:	f003 030c 	and.w	r3, r3, #12
 8005b0a:	2b0c      	cmp	r3, #12
 8005b0c:	d828      	bhi.n	8005b60 <UART_SetConfig+0x128>
 8005b0e:	a201      	add	r2, pc, #4	; (adr r2, 8005b14 <UART_SetConfig+0xdc>)
 8005b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b14:	08005b49 	.word	0x08005b49
 8005b18:	08005b61 	.word	0x08005b61
 8005b1c:	08005b61 	.word	0x08005b61
 8005b20:	08005b61 	.word	0x08005b61
 8005b24:	08005b55 	.word	0x08005b55
 8005b28:	08005b61 	.word	0x08005b61
 8005b2c:	08005b61 	.word	0x08005b61
 8005b30:	08005b61 	.word	0x08005b61
 8005b34:	08005b4f 	.word	0x08005b4f
 8005b38:	08005b61 	.word	0x08005b61
 8005b3c:	08005b61 	.word	0x08005b61
 8005b40:	08005b61 	.word	0x08005b61
 8005b44:	08005b5b 	.word	0x08005b5b
 8005b48:	2300      	movs	r3, #0
 8005b4a:	77fb      	strb	r3, [r7, #31]
 8005b4c:	e118      	b.n	8005d80 <UART_SetConfig+0x348>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	77fb      	strb	r3, [r7, #31]
 8005b52:	e115      	b.n	8005d80 <UART_SetConfig+0x348>
 8005b54:	2304      	movs	r3, #4
 8005b56:	77fb      	strb	r3, [r7, #31]
 8005b58:	e112      	b.n	8005d80 <UART_SetConfig+0x348>
 8005b5a:	2308      	movs	r3, #8
 8005b5c:	77fb      	strb	r3, [r7, #31]
 8005b5e:	e10f      	b.n	8005d80 <UART_SetConfig+0x348>
 8005b60:	2310      	movs	r3, #16
 8005b62:	77fb      	strb	r3, [r7, #31]
 8005b64:	e10c      	b.n	8005d80 <UART_SetConfig+0x348>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a68      	ldr	r2, [pc, #416]	; (8005d0c <UART_SetConfig+0x2d4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d120      	bne.n	8005bb2 <UART_SetConfig+0x17a>
 8005b70:	4b64      	ldr	r3, [pc, #400]	; (8005d04 <UART_SetConfig+0x2cc>)
 8005b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b76:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b7a:	2b30      	cmp	r3, #48	; 0x30
 8005b7c:	d013      	beq.n	8005ba6 <UART_SetConfig+0x16e>
 8005b7e:	2b30      	cmp	r3, #48	; 0x30
 8005b80:	d814      	bhi.n	8005bac <UART_SetConfig+0x174>
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	d009      	beq.n	8005b9a <UART_SetConfig+0x162>
 8005b86:	2b20      	cmp	r3, #32
 8005b88:	d810      	bhi.n	8005bac <UART_SetConfig+0x174>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <UART_SetConfig+0x15c>
 8005b8e:	2b10      	cmp	r3, #16
 8005b90:	d006      	beq.n	8005ba0 <UART_SetConfig+0x168>
 8005b92:	e00b      	b.n	8005bac <UART_SetConfig+0x174>
 8005b94:	2300      	movs	r3, #0
 8005b96:	77fb      	strb	r3, [r7, #31]
 8005b98:	e0f2      	b.n	8005d80 <UART_SetConfig+0x348>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	77fb      	strb	r3, [r7, #31]
 8005b9e:	e0ef      	b.n	8005d80 <UART_SetConfig+0x348>
 8005ba0:	2304      	movs	r3, #4
 8005ba2:	77fb      	strb	r3, [r7, #31]
 8005ba4:	e0ec      	b.n	8005d80 <UART_SetConfig+0x348>
 8005ba6:	2308      	movs	r3, #8
 8005ba8:	77fb      	strb	r3, [r7, #31]
 8005baa:	e0e9      	b.n	8005d80 <UART_SetConfig+0x348>
 8005bac:	2310      	movs	r3, #16
 8005bae:	77fb      	strb	r3, [r7, #31]
 8005bb0:	e0e6      	b.n	8005d80 <UART_SetConfig+0x348>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a56      	ldr	r2, [pc, #344]	; (8005d10 <UART_SetConfig+0x2d8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d120      	bne.n	8005bfe <UART_SetConfig+0x1c6>
 8005bbc:	4b51      	ldr	r3, [pc, #324]	; (8005d04 <UART_SetConfig+0x2cc>)
 8005bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005bc6:	2bc0      	cmp	r3, #192	; 0xc0
 8005bc8:	d013      	beq.n	8005bf2 <UART_SetConfig+0x1ba>
 8005bca:	2bc0      	cmp	r3, #192	; 0xc0
 8005bcc:	d814      	bhi.n	8005bf8 <UART_SetConfig+0x1c0>
 8005bce:	2b80      	cmp	r3, #128	; 0x80
 8005bd0:	d009      	beq.n	8005be6 <UART_SetConfig+0x1ae>
 8005bd2:	2b80      	cmp	r3, #128	; 0x80
 8005bd4:	d810      	bhi.n	8005bf8 <UART_SetConfig+0x1c0>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <UART_SetConfig+0x1a8>
 8005bda:	2b40      	cmp	r3, #64	; 0x40
 8005bdc:	d006      	beq.n	8005bec <UART_SetConfig+0x1b4>
 8005bde:	e00b      	b.n	8005bf8 <UART_SetConfig+0x1c0>
 8005be0:	2300      	movs	r3, #0
 8005be2:	77fb      	strb	r3, [r7, #31]
 8005be4:	e0cc      	b.n	8005d80 <UART_SetConfig+0x348>
 8005be6:	2302      	movs	r3, #2
 8005be8:	77fb      	strb	r3, [r7, #31]
 8005bea:	e0c9      	b.n	8005d80 <UART_SetConfig+0x348>
 8005bec:	2304      	movs	r3, #4
 8005bee:	77fb      	strb	r3, [r7, #31]
 8005bf0:	e0c6      	b.n	8005d80 <UART_SetConfig+0x348>
 8005bf2:	2308      	movs	r3, #8
 8005bf4:	77fb      	strb	r3, [r7, #31]
 8005bf6:	e0c3      	b.n	8005d80 <UART_SetConfig+0x348>
 8005bf8:	2310      	movs	r3, #16
 8005bfa:	77fb      	strb	r3, [r7, #31]
 8005bfc:	e0c0      	b.n	8005d80 <UART_SetConfig+0x348>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a44      	ldr	r2, [pc, #272]	; (8005d14 <UART_SetConfig+0x2dc>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d125      	bne.n	8005c54 <UART_SetConfig+0x21c>
 8005c08:	4b3e      	ldr	r3, [pc, #248]	; (8005d04 <UART_SetConfig+0x2cc>)
 8005c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c16:	d017      	beq.n	8005c48 <UART_SetConfig+0x210>
 8005c18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c1c:	d817      	bhi.n	8005c4e <UART_SetConfig+0x216>
 8005c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c22:	d00b      	beq.n	8005c3c <UART_SetConfig+0x204>
 8005c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c28:	d811      	bhi.n	8005c4e <UART_SetConfig+0x216>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <UART_SetConfig+0x1fe>
 8005c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c32:	d006      	beq.n	8005c42 <UART_SetConfig+0x20a>
 8005c34:	e00b      	b.n	8005c4e <UART_SetConfig+0x216>
 8005c36:	2300      	movs	r3, #0
 8005c38:	77fb      	strb	r3, [r7, #31]
 8005c3a:	e0a1      	b.n	8005d80 <UART_SetConfig+0x348>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	77fb      	strb	r3, [r7, #31]
 8005c40:	e09e      	b.n	8005d80 <UART_SetConfig+0x348>
 8005c42:	2304      	movs	r3, #4
 8005c44:	77fb      	strb	r3, [r7, #31]
 8005c46:	e09b      	b.n	8005d80 <UART_SetConfig+0x348>
 8005c48:	2308      	movs	r3, #8
 8005c4a:	77fb      	strb	r3, [r7, #31]
 8005c4c:	e098      	b.n	8005d80 <UART_SetConfig+0x348>
 8005c4e:	2310      	movs	r3, #16
 8005c50:	77fb      	strb	r3, [r7, #31]
 8005c52:	e095      	b.n	8005d80 <UART_SetConfig+0x348>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a2f      	ldr	r2, [pc, #188]	; (8005d18 <UART_SetConfig+0x2e0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d125      	bne.n	8005caa <UART_SetConfig+0x272>
 8005c5e:	4b29      	ldr	r3, [pc, #164]	; (8005d04 <UART_SetConfig+0x2cc>)
 8005c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c6c:	d017      	beq.n	8005c9e <UART_SetConfig+0x266>
 8005c6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c72:	d817      	bhi.n	8005ca4 <UART_SetConfig+0x26c>
 8005c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c78:	d00b      	beq.n	8005c92 <UART_SetConfig+0x25a>
 8005c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c7e:	d811      	bhi.n	8005ca4 <UART_SetConfig+0x26c>
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <UART_SetConfig+0x254>
 8005c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c88:	d006      	beq.n	8005c98 <UART_SetConfig+0x260>
 8005c8a:	e00b      	b.n	8005ca4 <UART_SetConfig+0x26c>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	77fb      	strb	r3, [r7, #31]
 8005c90:	e076      	b.n	8005d80 <UART_SetConfig+0x348>
 8005c92:	2302      	movs	r3, #2
 8005c94:	77fb      	strb	r3, [r7, #31]
 8005c96:	e073      	b.n	8005d80 <UART_SetConfig+0x348>
 8005c98:	2304      	movs	r3, #4
 8005c9a:	77fb      	strb	r3, [r7, #31]
 8005c9c:	e070      	b.n	8005d80 <UART_SetConfig+0x348>
 8005c9e:	2308      	movs	r3, #8
 8005ca0:	77fb      	strb	r3, [r7, #31]
 8005ca2:	e06d      	b.n	8005d80 <UART_SetConfig+0x348>
 8005ca4:	2310      	movs	r3, #16
 8005ca6:	77fb      	strb	r3, [r7, #31]
 8005ca8:	e06a      	b.n	8005d80 <UART_SetConfig+0x348>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a1b      	ldr	r2, [pc, #108]	; (8005d1c <UART_SetConfig+0x2e4>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d138      	bne.n	8005d26 <UART_SetConfig+0x2ee>
 8005cb4:	4b13      	ldr	r3, [pc, #76]	; (8005d04 <UART_SetConfig+0x2cc>)
 8005cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005cbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cc2:	d017      	beq.n	8005cf4 <UART_SetConfig+0x2bc>
 8005cc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cc8:	d82a      	bhi.n	8005d20 <UART_SetConfig+0x2e8>
 8005cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cce:	d00b      	beq.n	8005ce8 <UART_SetConfig+0x2b0>
 8005cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd4:	d824      	bhi.n	8005d20 <UART_SetConfig+0x2e8>
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <UART_SetConfig+0x2aa>
 8005cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cde:	d006      	beq.n	8005cee <UART_SetConfig+0x2b6>
 8005ce0:	e01e      	b.n	8005d20 <UART_SetConfig+0x2e8>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	77fb      	strb	r3, [r7, #31]
 8005ce6:	e04b      	b.n	8005d80 <UART_SetConfig+0x348>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	77fb      	strb	r3, [r7, #31]
 8005cec:	e048      	b.n	8005d80 <UART_SetConfig+0x348>
 8005cee:	2304      	movs	r3, #4
 8005cf0:	77fb      	strb	r3, [r7, #31]
 8005cf2:	e045      	b.n	8005d80 <UART_SetConfig+0x348>
 8005cf4:	2308      	movs	r3, #8
 8005cf6:	77fb      	strb	r3, [r7, #31]
 8005cf8:	e042      	b.n	8005d80 <UART_SetConfig+0x348>
 8005cfa:	bf00      	nop
 8005cfc:	efff69f3 	.word	0xefff69f3
 8005d00:	40011000 	.word	0x40011000
 8005d04:	40023800 	.word	0x40023800
 8005d08:	40004400 	.word	0x40004400
 8005d0c:	40004800 	.word	0x40004800
 8005d10:	40004c00 	.word	0x40004c00
 8005d14:	40005000 	.word	0x40005000
 8005d18:	40011400 	.word	0x40011400
 8005d1c:	40007800 	.word	0x40007800
 8005d20:	2310      	movs	r3, #16
 8005d22:	77fb      	strb	r3, [r7, #31]
 8005d24:	e02c      	b.n	8005d80 <UART_SetConfig+0x348>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a72      	ldr	r2, [pc, #456]	; (8005ef4 <UART_SetConfig+0x4bc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d125      	bne.n	8005d7c <UART_SetConfig+0x344>
 8005d30:	4b71      	ldr	r3, [pc, #452]	; (8005ef8 <UART_SetConfig+0x4c0>)
 8005d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d3e:	d017      	beq.n	8005d70 <UART_SetConfig+0x338>
 8005d40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d44:	d817      	bhi.n	8005d76 <UART_SetConfig+0x33e>
 8005d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d4a:	d00b      	beq.n	8005d64 <UART_SetConfig+0x32c>
 8005d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d50:	d811      	bhi.n	8005d76 <UART_SetConfig+0x33e>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <UART_SetConfig+0x326>
 8005d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d5a:	d006      	beq.n	8005d6a <UART_SetConfig+0x332>
 8005d5c:	e00b      	b.n	8005d76 <UART_SetConfig+0x33e>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	77fb      	strb	r3, [r7, #31]
 8005d62:	e00d      	b.n	8005d80 <UART_SetConfig+0x348>
 8005d64:	2302      	movs	r3, #2
 8005d66:	77fb      	strb	r3, [r7, #31]
 8005d68:	e00a      	b.n	8005d80 <UART_SetConfig+0x348>
 8005d6a:	2304      	movs	r3, #4
 8005d6c:	77fb      	strb	r3, [r7, #31]
 8005d6e:	e007      	b.n	8005d80 <UART_SetConfig+0x348>
 8005d70:	2308      	movs	r3, #8
 8005d72:	77fb      	strb	r3, [r7, #31]
 8005d74:	e004      	b.n	8005d80 <UART_SetConfig+0x348>
 8005d76:	2310      	movs	r3, #16
 8005d78:	77fb      	strb	r3, [r7, #31]
 8005d7a:	e001      	b.n	8005d80 <UART_SetConfig+0x348>
 8005d7c:	2310      	movs	r3, #16
 8005d7e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d88:	d15b      	bne.n	8005e42 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005d8a:	7ffb      	ldrb	r3, [r7, #31]
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d828      	bhi.n	8005de2 <UART_SetConfig+0x3aa>
 8005d90:	a201      	add	r2, pc, #4	; (adr r2, 8005d98 <UART_SetConfig+0x360>)
 8005d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d96:	bf00      	nop
 8005d98:	08005dbd 	.word	0x08005dbd
 8005d9c:	08005dc5 	.word	0x08005dc5
 8005da0:	08005dcd 	.word	0x08005dcd
 8005da4:	08005de3 	.word	0x08005de3
 8005da8:	08005dd3 	.word	0x08005dd3
 8005dac:	08005de3 	.word	0x08005de3
 8005db0:	08005de3 	.word	0x08005de3
 8005db4:	08005de3 	.word	0x08005de3
 8005db8:	08005ddb 	.word	0x08005ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dbc:	f7fe f932 	bl	8004024 <HAL_RCC_GetPCLK1Freq>
 8005dc0:	61b8      	str	r0, [r7, #24]
        break;
 8005dc2:	e013      	b.n	8005dec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dc4:	f7fe f942 	bl	800404c <HAL_RCC_GetPCLK2Freq>
 8005dc8:	61b8      	str	r0, [r7, #24]
        break;
 8005dca:	e00f      	b.n	8005dec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dcc:	4b4b      	ldr	r3, [pc, #300]	; (8005efc <UART_SetConfig+0x4c4>)
 8005dce:	61bb      	str	r3, [r7, #24]
        break;
 8005dd0:	e00c      	b.n	8005dec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dd2:	f7fe f815 	bl	8003e00 <HAL_RCC_GetSysClockFreq>
 8005dd6:	61b8      	str	r0, [r7, #24]
        break;
 8005dd8:	e008      	b.n	8005dec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dde:	61bb      	str	r3, [r7, #24]
        break;
 8005de0:	e004      	b.n	8005dec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	77bb      	strb	r3, [r7, #30]
        break;
 8005dea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d074      	beq.n	8005edc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	005a      	lsls	r2, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	085b      	lsrs	r3, r3, #1
 8005dfc:	441a      	add	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2b0f      	cmp	r3, #15
 8005e0c:	d916      	bls.n	8005e3c <UART_SetConfig+0x404>
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e14:	d212      	bcs.n	8005e3c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	f023 030f 	bic.w	r3, r3, #15
 8005e1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	085b      	lsrs	r3, r3, #1
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	89fb      	ldrh	r3, [r7, #14]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	89fa      	ldrh	r2, [r7, #14]
 8005e38:	60da      	str	r2, [r3, #12]
 8005e3a:	e04f      	b.n	8005edc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	77bb      	strb	r3, [r7, #30]
 8005e40:	e04c      	b.n	8005edc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e42:	7ffb      	ldrb	r3, [r7, #31]
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d828      	bhi.n	8005e9a <UART_SetConfig+0x462>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <UART_SetConfig+0x418>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005e75 	.word	0x08005e75
 8005e54:	08005e7d 	.word	0x08005e7d
 8005e58:	08005e85 	.word	0x08005e85
 8005e5c:	08005e9b 	.word	0x08005e9b
 8005e60:	08005e8b 	.word	0x08005e8b
 8005e64:	08005e9b 	.word	0x08005e9b
 8005e68:	08005e9b 	.word	0x08005e9b
 8005e6c:	08005e9b 	.word	0x08005e9b
 8005e70:	08005e93 	.word	0x08005e93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e74:	f7fe f8d6 	bl	8004024 <HAL_RCC_GetPCLK1Freq>
 8005e78:	61b8      	str	r0, [r7, #24]
        break;
 8005e7a:	e013      	b.n	8005ea4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e7c:	f7fe f8e6 	bl	800404c <HAL_RCC_GetPCLK2Freq>
 8005e80:	61b8      	str	r0, [r7, #24]
        break;
 8005e82:	e00f      	b.n	8005ea4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e84:	4b1d      	ldr	r3, [pc, #116]	; (8005efc <UART_SetConfig+0x4c4>)
 8005e86:	61bb      	str	r3, [r7, #24]
        break;
 8005e88:	e00c      	b.n	8005ea4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e8a:	f7fd ffb9 	bl	8003e00 <HAL_RCC_GetSysClockFreq>
 8005e8e:	61b8      	str	r0, [r7, #24]
        break;
 8005e90:	e008      	b.n	8005ea4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e96:	61bb      	str	r3, [r7, #24]
        break;
 8005e98:	e004      	b.n	8005ea4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	77bb      	strb	r3, [r7, #30]
        break;
 8005ea2:	bf00      	nop
    }

    if (pclk != 0U)
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d018      	beq.n	8005edc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	085a      	lsrs	r2, r3, #1
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	441a      	add	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b0f      	cmp	r3, #15
 8005ec2:	d909      	bls.n	8005ed8 <UART_SetConfig+0x4a0>
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eca:	d205      	bcs.n	8005ed8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60da      	str	r2, [r3, #12]
 8005ed6:	e001      	b.n	8005edc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005ee8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3720      	adds	r7, #32
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	40007c00 	.word	0x40007c00
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	00f42400 	.word	0x00f42400

08005f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00a      	beq.n	8005f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00a      	beq.n	8005f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	f003 0310 	and.w	r3, r3, #16
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00a      	beq.n	8005fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d01a      	beq.n	8006016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ffe:	d10a      	bne.n	8006016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00a      	beq.n	8006038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	605a      	str	r2, [r3, #4]
  }
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af02      	add	r7, sp, #8
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006054:	f7fb fbb4 	bl	80017c0 <HAL_GetTick>
 8006058:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b08      	cmp	r3, #8
 8006066:	d10e      	bne.n	8006086 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006068:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f831 	bl	80060de <UART_WaitOnFlagUntilTimeout>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e027      	b.n	80060d6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b04      	cmp	r3, #4
 8006092:	d10e      	bne.n	80060b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006094:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f81b 	bl	80060de <UART_WaitOnFlagUntilTimeout>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e011      	b.n	80060d6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2220      	movs	r2, #32
 80060bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b09c      	sub	sp, #112	; 0x70
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	60f8      	str	r0, [r7, #12]
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	603b      	str	r3, [r7, #0]
 80060ea:	4613      	mov	r3, r2
 80060ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ee:	e0a7      	b.n	8006240 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060f6:	f000 80a3 	beq.w	8006240 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060fa:	f7fb fb61 	bl	80017c0 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006106:	429a      	cmp	r2, r3
 8006108:	d302      	bcc.n	8006110 <UART_WaitOnFlagUntilTimeout+0x32>
 800610a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800610c:	2b00      	cmp	r3, #0
 800610e:	d13f      	bne.n	8006190 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800611e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006120:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006124:	667b      	str	r3, [r7, #100]	; 0x64
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	461a      	mov	r2, r3
 800612c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800612e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006130:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006132:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006134:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006136:	e841 2300 	strex	r3, r2, [r1]
 800613a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800613c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1e6      	bne.n	8006110 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3308      	adds	r3, #8
 8006148:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006154:	f023 0301 	bic.w	r3, r3, #1
 8006158:	663b      	str	r3, [r7, #96]	; 0x60
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3308      	adds	r3, #8
 8006160:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006162:	64ba      	str	r2, [r7, #72]	; 0x48
 8006164:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006166:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800616a:	e841 2300 	strex	r3, r2, [r1]
 800616e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1e5      	bne.n	8006142 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2220      	movs	r2, #32
 800617a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2220      	movs	r2, #32
 8006180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e068      	b.n	8006262 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0304 	and.w	r3, r3, #4
 800619a:	2b00      	cmp	r3, #0
 800619c:	d050      	beq.n	8006240 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ac:	d148      	bne.n	8006240 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061b6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d6:	637b      	str	r3, [r7, #52]	; 0x34
 80061d8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e6      	bne.n	80061b8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3308      	adds	r3, #8
 80061f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	613b      	str	r3, [r7, #16]
   return(result);
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f023 0301 	bic.w	r3, r3, #1
 8006200:	66bb      	str	r3, [r7, #104]	; 0x68
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3308      	adds	r3, #8
 8006208:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800620a:	623a      	str	r2, [r7, #32]
 800620c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620e:	69f9      	ldr	r1, [r7, #28]
 8006210:	6a3a      	ldr	r2, [r7, #32]
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	61bb      	str	r3, [r7, #24]
   return(result);
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e5      	bne.n	80061ea <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2220      	movs	r2, #32
 8006222:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2220      	movs	r2, #32
 8006228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2220      	movs	r2, #32
 8006230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e010      	b.n	8006262 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	69da      	ldr	r2, [r3, #28]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	4013      	ands	r3, r2
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	429a      	cmp	r2, r3
 800624e:	bf0c      	ite	eq
 8006250:	2301      	moveq	r3, #1
 8006252:	2300      	movne	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	461a      	mov	r2, r3
 8006258:	79fb      	ldrb	r3, [r7, #7]
 800625a:	429a      	cmp	r2, r3
 800625c:	f43f af48 	beq.w	80060f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3770      	adds	r7, #112	; 0x70
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800626c:	b084      	sub	sp, #16
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	f107 001c 	add.w	r0, r7, #28
 800627a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	2b01      	cmp	r3, #1
 8006282:	d120      	bne.n	80062c6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	4b20      	ldr	r3, [pc, #128]	; (8006318 <USB_CoreInit+0xac>)
 8006296:	4013      	ands	r3, r2
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80062a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d105      	bne.n	80062ba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fa96 	bl	80067ec <USB_CoreReset>
 80062c0:	4603      	mov	r3, r0
 80062c2:	73fb      	strb	r3, [r7, #15]
 80062c4:	e010      	b.n	80062e8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fa8a 	bl	80067ec <USB_CoreReset>
 80062d8:	4603      	mov	r3, r0
 80062da:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d10b      	bne.n	8006306 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f043 0206 	orr.w	r2, r3, #6
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f043 0220 	orr.w	r2, r3, #32
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006306:	7bfb      	ldrb	r3, [r7, #15]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006312:	b004      	add	sp, #16
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	ffbdffbf 	.word	0xffbdffbf

0800631c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f023 0201 	bic.w	r2, r3, #1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	460b      	mov	r3, r1
 8006348:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800635a:	78fb      	ldrb	r3, [r7, #3]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d115      	bne.n	800638c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800636c:	2001      	movs	r0, #1
 800636e:	f7fb fa33 	bl	80017d8 <HAL_Delay>
      ms++;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3301      	adds	r3, #1
 8006376:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fa29 	bl	80067d0 <USB_GetMode>
 800637e:	4603      	mov	r3, r0
 8006380:	2b01      	cmp	r3, #1
 8006382:	d01e      	beq.n	80063c2 <USB_SetCurrentMode+0x84>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b31      	cmp	r3, #49	; 0x31
 8006388:	d9f0      	bls.n	800636c <USB_SetCurrentMode+0x2e>
 800638a:	e01a      	b.n	80063c2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800638c:	78fb      	ldrb	r3, [r7, #3]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d115      	bne.n	80063be <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800639e:	2001      	movs	r0, #1
 80063a0:	f7fb fa1a 	bl	80017d8 <HAL_Delay>
      ms++;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3301      	adds	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fa10 	bl	80067d0 <USB_GetMode>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d005      	beq.n	80063c2 <USB_SetCurrentMode+0x84>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b31      	cmp	r3, #49	; 0x31
 80063ba:	d9f0      	bls.n	800639e <USB_SetCurrentMode+0x60>
 80063bc:	e001      	b.n	80063c2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e005      	b.n	80063ce <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2b32      	cmp	r3, #50	; 0x32
 80063c6:	d101      	bne.n	80063cc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e000      	b.n	80063ce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063d8:	b084      	sub	sp, #16
 80063da:	b580      	push	{r7, lr}
 80063dc:	b086      	sub	sp, #24
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80063e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063f2:	2300      	movs	r3, #0
 80063f4:	613b      	str	r3, [r7, #16]
 80063f6:	e009      	b.n	800640c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	3340      	adds	r3, #64	; 0x40
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	2200      	movs	r2, #0
 8006404:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	3301      	adds	r3, #1
 800640a:	613b      	str	r3, [r7, #16]
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	2b0e      	cmp	r3, #14
 8006410:	d9f2      	bls.n	80063f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d11c      	bne.n	8006452 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006426:	f043 0302 	orr.w	r3, r3, #2
 800642a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006430:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	e005      	b.n	800645e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006456:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006464:	461a      	mov	r2, r3
 8006466:	2300      	movs	r3, #0
 8006468:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006470:	4619      	mov	r1, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006478:	461a      	mov	r2, r3
 800647a:	680b      	ldr	r3, [r1, #0]
 800647c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800647e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006480:	2b01      	cmp	r3, #1
 8006482:	d10c      	bne.n	800649e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d104      	bne.n	8006494 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800648a:	2100      	movs	r1, #0
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f965 	bl	800675c <USB_SetDevSpeed>
 8006492:	e008      	b.n	80064a6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006494:	2101      	movs	r1, #1
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f960 	bl	800675c <USB_SetDevSpeed>
 800649c:	e003      	b.n	80064a6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800649e:	2103      	movs	r1, #3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f95b 	bl	800675c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064a6:	2110      	movs	r1, #16
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f8f3 	bl	8006694 <USB_FlushTxFifo>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f91f 	bl	80066fc <USB_FlushRxFifo>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ce:	461a      	mov	r2, r3
 80064d0:	2300      	movs	r3, #0
 80064d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064da:	461a      	mov	r2, r3
 80064dc:	2300      	movs	r3, #0
 80064de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e6:	461a      	mov	r2, r3
 80064e8:	2300      	movs	r3, #0
 80064ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064ec:	2300      	movs	r3, #0
 80064ee:	613b      	str	r3, [r7, #16]
 80064f0:	e043      	b.n	800657a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006508:	d118      	bne.n	800653c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10a      	bne.n	8006526 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651c:	461a      	mov	r2, r3
 800651e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	e013      	b.n	800654e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006532:	461a      	mov	r2, r3
 8006534:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	e008      	b.n	800654e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006548:	461a      	mov	r2, r3
 800654a:	2300      	movs	r3, #0
 800654c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655a:	461a      	mov	r2, r3
 800655c:	2300      	movs	r3, #0
 800655e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656c:	461a      	mov	r2, r3
 800656e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006572:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	3301      	adds	r3, #1
 8006578:	613b      	str	r3, [r7, #16]
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	429a      	cmp	r2, r3
 8006580:	d3b7      	bcc.n	80064f2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006582:	2300      	movs	r3, #0
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	e043      	b.n	8006610 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800659a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800659e:	d118      	bne.n	80065d2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10a      	bne.n	80065bc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b2:	461a      	mov	r2, r3
 80065b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065b8:	6013      	str	r3, [r2, #0]
 80065ba:	e013      	b.n	80065e4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c8:	461a      	mov	r2, r3
 80065ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065ce:	6013      	str	r3, [r2, #0]
 80065d0:	e008      	b.n	80065e4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065de:	461a      	mov	r2, r3
 80065e0:	2300      	movs	r3, #0
 80065e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f0:	461a      	mov	r2, r3
 80065f2:	2300      	movs	r3, #0
 80065f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006602:	461a      	mov	r2, r3
 8006604:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006608:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	3301      	adds	r3, #1
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	429a      	cmp	r2, r3
 8006616:	d3b7      	bcc.n	8006588 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006626:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800662a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006638:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	2b00      	cmp	r3, #0
 800663e:	d105      	bne.n	800664c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	f043 0210 	orr.w	r2, r3, #16
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	699a      	ldr	r2, [r3, #24]
 8006650:	4b0e      	ldr	r3, [pc, #56]	; (800668c <USB_DevInit+0x2b4>)
 8006652:	4313      	orrs	r3, r2
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800665a:	2b00      	cmp	r3, #0
 800665c:	d005      	beq.n	800666a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	f043 0208 	orr.w	r2, r3, #8
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800666a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800666c:	2b01      	cmp	r3, #1
 800666e:	d105      	bne.n	800667c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	699a      	ldr	r2, [r3, #24]
 8006674:	4b06      	ldr	r3, [pc, #24]	; (8006690 <USB_DevInit+0x2b8>)
 8006676:	4313      	orrs	r3, r2
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800667c:	7dfb      	ldrb	r3, [r7, #23]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006688:	b004      	add	sp, #16
 800668a:	4770      	bx	lr
 800668c:	803c3800 	.word	0x803c3800
 8006690:	40000004 	.word	0x40000004

08006694 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3301      	adds	r3, #1
 80066a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4a13      	ldr	r2, [pc, #76]	; (80066f8 <USB_FlushTxFifo+0x64>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d901      	bls.n	80066b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e01b      	b.n	80066ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	daf2      	bge.n	80066a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	019b      	lsls	r3, r3, #6
 80066c4:	f043 0220 	orr.w	r2, r3, #32
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3301      	adds	r3, #1
 80066d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4a08      	ldr	r2, [pc, #32]	; (80066f8 <USB_FlushTxFifo+0x64>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d901      	bls.n	80066de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e006      	b.n	80066ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b20      	cmp	r3, #32
 80066e8:	d0f0      	beq.n	80066cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	00030d40 	.word	0x00030d40

080066fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	3301      	adds	r3, #1
 800670c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4a11      	ldr	r2, [pc, #68]	; (8006758 <USB_FlushRxFifo+0x5c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d901      	bls.n	800671a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e018      	b.n	800674c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	daf2      	bge.n	8006708 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2210      	movs	r2, #16
 800672a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3301      	adds	r3, #1
 8006730:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4a08      	ldr	r2, [pc, #32]	; (8006758 <USB_FlushRxFifo+0x5c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d901      	bls.n	800673e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e006      	b.n	800674c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f003 0310 	and.w	r3, r3, #16
 8006746:	2b10      	cmp	r3, #16
 8006748:	d0f0      	beq.n	800672c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	00030d40 	.word	0x00030d40

0800675c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	78fb      	ldrb	r3, [r7, #3]
 8006776:	68f9      	ldr	r1, [r7, #12]
 8006778:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800677c:	4313      	orrs	r3, r2
 800677e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800678e:	b480      	push	{r7}
 8006790:	b085      	sub	sp, #20
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067a8:	f023 0303 	bic.w	r3, r3, #3
 80067ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067bc:	f043 0302 	orr.w	r3, r3, #2
 80067c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	f003 0301 	and.w	r3, r3, #1
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	4a13      	ldr	r2, [pc, #76]	; (8006850 <USB_CoreReset+0x64>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d901      	bls.n	800680a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e01b      	b.n	8006842 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	daf2      	bge.n	80067f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	f043 0201 	orr.w	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	3301      	adds	r3, #1
 8006826:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4a09      	ldr	r2, [pc, #36]	; (8006850 <USB_CoreReset+0x64>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d901      	bls.n	8006834 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e006      	b.n	8006842 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b01      	cmp	r3, #1
 800683e:	d0f0      	beq.n	8006822 <USB_CoreReset+0x36>

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	00030d40 	.word	0x00030d40

08006854 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006854:	b5b0      	push	{r4, r5, r7, lr}
 8006856:	b08c      	sub	sp, #48	; 0x30
 8006858:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800685a:	4b96      	ldr	r3, [pc, #600]	; (8006ab4 <MX_LWIP_Init+0x260>)
 800685c:	220a      	movs	r2, #10
 800685e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 42;
 8006860:	4b94      	ldr	r3, [pc, #592]	; (8006ab4 <MX_LWIP_Init+0x260>)
 8006862:	222a      	movs	r2, #42	; 0x2a
 8006864:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8006866:	4b93      	ldr	r3, [pc, #588]	; (8006ab4 <MX_LWIP_Init+0x260>)
 8006868:	2200      	movs	r2, #0
 800686a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 15;
 800686c:	4b91      	ldr	r3, [pc, #580]	; (8006ab4 <MX_LWIP_Init+0x260>)
 800686e:	220f      	movs	r2, #15
 8006870:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006872:	4b91      	ldr	r3, [pc, #580]	; (8006ab8 <MX_LWIP_Init+0x264>)
 8006874:	22ff      	movs	r2, #255	; 0xff
 8006876:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006878:	4b8f      	ldr	r3, [pc, #572]	; (8006ab8 <MX_LWIP_Init+0x264>)
 800687a:	22ff      	movs	r2, #255	; 0xff
 800687c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800687e:	4b8e      	ldr	r3, [pc, #568]	; (8006ab8 <MX_LWIP_Init+0x264>)
 8006880:	22ff      	movs	r2, #255	; 0xff
 8006882:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006884:	4b8c      	ldr	r3, [pc, #560]	; (8006ab8 <MX_LWIP_Init+0x264>)
 8006886:	2200      	movs	r2, #0
 8006888:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800688a:	4b8c      	ldr	r3, [pc, #560]	; (8006abc <MX_LWIP_Init+0x268>)
 800688c:	220a      	movs	r2, #10
 800688e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 42;
 8006890:	4b8a      	ldr	r3, [pc, #552]	; (8006abc <MX_LWIP_Init+0x268>)
 8006892:	222a      	movs	r2, #42	; 0x2a
 8006894:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8006896:	4b89      	ldr	r3, [pc, #548]	; (8006abc <MX_LWIP_Init+0x268>)
 8006898:	2200      	movs	r2, #0
 800689a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800689c:	4b87      	ldr	r3, [pc, #540]	; (8006abc <MX_LWIP_Init+0x268>)
 800689e:	2201      	movs	r2, #1
 80068a0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80068a2:	2100      	movs	r1, #0
 80068a4:	2000      	movs	r0, #0
 80068a6:	f005 ff8d 	bl	800c7c4 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80068aa:	4b82      	ldr	r3, [pc, #520]	; (8006ab4 <MX_LWIP_Init+0x260>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	061a      	lsls	r2, r3, #24
 80068b0:	4b80      	ldr	r3, [pc, #512]	; (8006ab4 <MX_LWIP_Init+0x260>)
 80068b2:	785b      	ldrb	r3, [r3, #1]
 80068b4:	041b      	lsls	r3, r3, #16
 80068b6:	431a      	orrs	r2, r3
 80068b8:	4b7e      	ldr	r3, [pc, #504]	; (8006ab4 <MX_LWIP_Init+0x260>)
 80068ba:	789b      	ldrb	r3, [r3, #2]
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	4313      	orrs	r3, r2
 80068c0:	4a7c      	ldr	r2, [pc, #496]	; (8006ab4 <MX_LWIP_Init+0x260>)
 80068c2:	78d2      	ldrb	r2, [r2, #3]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	061a      	lsls	r2, r3, #24
 80068c8:	4b7a      	ldr	r3, [pc, #488]	; (8006ab4 <MX_LWIP_Init+0x260>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	0619      	lsls	r1, r3, #24
 80068ce:	4b79      	ldr	r3, [pc, #484]	; (8006ab4 <MX_LWIP_Init+0x260>)
 80068d0:	785b      	ldrb	r3, [r3, #1]
 80068d2:	041b      	lsls	r3, r3, #16
 80068d4:	4319      	orrs	r1, r3
 80068d6:	4b77      	ldr	r3, [pc, #476]	; (8006ab4 <MX_LWIP_Init+0x260>)
 80068d8:	789b      	ldrb	r3, [r3, #2]
 80068da:	021b      	lsls	r3, r3, #8
 80068dc:	430b      	orrs	r3, r1
 80068de:	4975      	ldr	r1, [pc, #468]	; (8006ab4 <MX_LWIP_Init+0x260>)
 80068e0:	78c9      	ldrb	r1, [r1, #3]
 80068e2:	430b      	orrs	r3, r1
 80068e4:	021b      	lsls	r3, r3, #8
 80068e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068ea:	431a      	orrs	r2, r3
 80068ec:	4b71      	ldr	r3, [pc, #452]	; (8006ab4 <MX_LWIP_Init+0x260>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	0619      	lsls	r1, r3, #24
 80068f2:	4b70      	ldr	r3, [pc, #448]	; (8006ab4 <MX_LWIP_Init+0x260>)
 80068f4:	785b      	ldrb	r3, [r3, #1]
 80068f6:	041b      	lsls	r3, r3, #16
 80068f8:	4319      	orrs	r1, r3
 80068fa:	4b6e      	ldr	r3, [pc, #440]	; (8006ab4 <MX_LWIP_Init+0x260>)
 80068fc:	789b      	ldrb	r3, [r3, #2]
 80068fe:	021b      	lsls	r3, r3, #8
 8006900:	430b      	orrs	r3, r1
 8006902:	496c      	ldr	r1, [pc, #432]	; (8006ab4 <MX_LWIP_Init+0x260>)
 8006904:	78c9      	ldrb	r1, [r1, #3]
 8006906:	430b      	orrs	r3, r1
 8006908:	0a1b      	lsrs	r3, r3, #8
 800690a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800690e:	431a      	orrs	r2, r3
 8006910:	4b68      	ldr	r3, [pc, #416]	; (8006ab4 <MX_LWIP_Init+0x260>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	0619      	lsls	r1, r3, #24
 8006916:	4b67      	ldr	r3, [pc, #412]	; (8006ab4 <MX_LWIP_Init+0x260>)
 8006918:	785b      	ldrb	r3, [r3, #1]
 800691a:	041b      	lsls	r3, r3, #16
 800691c:	4319      	orrs	r1, r3
 800691e:	4b65      	ldr	r3, [pc, #404]	; (8006ab4 <MX_LWIP_Init+0x260>)
 8006920:	789b      	ldrb	r3, [r3, #2]
 8006922:	021b      	lsls	r3, r3, #8
 8006924:	430b      	orrs	r3, r1
 8006926:	4963      	ldr	r1, [pc, #396]	; (8006ab4 <MX_LWIP_Init+0x260>)
 8006928:	78c9      	ldrb	r1, [r1, #3]
 800692a:	430b      	orrs	r3, r1
 800692c:	0e1b      	lsrs	r3, r3, #24
 800692e:	4313      	orrs	r3, r2
 8006930:	4a63      	ldr	r2, [pc, #396]	; (8006ac0 <MX_LWIP_Init+0x26c>)
 8006932:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006934:	4b60      	ldr	r3, [pc, #384]	; (8006ab8 <MX_LWIP_Init+0x264>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	061a      	lsls	r2, r3, #24
 800693a:	4b5f      	ldr	r3, [pc, #380]	; (8006ab8 <MX_LWIP_Init+0x264>)
 800693c:	785b      	ldrb	r3, [r3, #1]
 800693e:	041b      	lsls	r3, r3, #16
 8006940:	431a      	orrs	r2, r3
 8006942:	4b5d      	ldr	r3, [pc, #372]	; (8006ab8 <MX_LWIP_Init+0x264>)
 8006944:	789b      	ldrb	r3, [r3, #2]
 8006946:	021b      	lsls	r3, r3, #8
 8006948:	4313      	orrs	r3, r2
 800694a:	4a5b      	ldr	r2, [pc, #364]	; (8006ab8 <MX_LWIP_Init+0x264>)
 800694c:	78d2      	ldrb	r2, [r2, #3]
 800694e:	4313      	orrs	r3, r2
 8006950:	061a      	lsls	r2, r3, #24
 8006952:	4b59      	ldr	r3, [pc, #356]	; (8006ab8 <MX_LWIP_Init+0x264>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	0619      	lsls	r1, r3, #24
 8006958:	4b57      	ldr	r3, [pc, #348]	; (8006ab8 <MX_LWIP_Init+0x264>)
 800695a:	785b      	ldrb	r3, [r3, #1]
 800695c:	041b      	lsls	r3, r3, #16
 800695e:	4319      	orrs	r1, r3
 8006960:	4b55      	ldr	r3, [pc, #340]	; (8006ab8 <MX_LWIP_Init+0x264>)
 8006962:	789b      	ldrb	r3, [r3, #2]
 8006964:	021b      	lsls	r3, r3, #8
 8006966:	430b      	orrs	r3, r1
 8006968:	4953      	ldr	r1, [pc, #332]	; (8006ab8 <MX_LWIP_Init+0x264>)
 800696a:	78c9      	ldrb	r1, [r1, #3]
 800696c:	430b      	orrs	r3, r1
 800696e:	021b      	lsls	r3, r3, #8
 8006970:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006974:	431a      	orrs	r2, r3
 8006976:	4b50      	ldr	r3, [pc, #320]	; (8006ab8 <MX_LWIP_Init+0x264>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	0619      	lsls	r1, r3, #24
 800697c:	4b4e      	ldr	r3, [pc, #312]	; (8006ab8 <MX_LWIP_Init+0x264>)
 800697e:	785b      	ldrb	r3, [r3, #1]
 8006980:	041b      	lsls	r3, r3, #16
 8006982:	4319      	orrs	r1, r3
 8006984:	4b4c      	ldr	r3, [pc, #304]	; (8006ab8 <MX_LWIP_Init+0x264>)
 8006986:	789b      	ldrb	r3, [r3, #2]
 8006988:	021b      	lsls	r3, r3, #8
 800698a:	430b      	orrs	r3, r1
 800698c:	494a      	ldr	r1, [pc, #296]	; (8006ab8 <MX_LWIP_Init+0x264>)
 800698e:	78c9      	ldrb	r1, [r1, #3]
 8006990:	430b      	orrs	r3, r1
 8006992:	0a1b      	lsrs	r3, r3, #8
 8006994:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006998:	431a      	orrs	r2, r3
 800699a:	4b47      	ldr	r3, [pc, #284]	; (8006ab8 <MX_LWIP_Init+0x264>)
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	0619      	lsls	r1, r3, #24
 80069a0:	4b45      	ldr	r3, [pc, #276]	; (8006ab8 <MX_LWIP_Init+0x264>)
 80069a2:	785b      	ldrb	r3, [r3, #1]
 80069a4:	041b      	lsls	r3, r3, #16
 80069a6:	4319      	orrs	r1, r3
 80069a8:	4b43      	ldr	r3, [pc, #268]	; (8006ab8 <MX_LWIP_Init+0x264>)
 80069aa:	789b      	ldrb	r3, [r3, #2]
 80069ac:	021b      	lsls	r3, r3, #8
 80069ae:	430b      	orrs	r3, r1
 80069b0:	4941      	ldr	r1, [pc, #260]	; (8006ab8 <MX_LWIP_Init+0x264>)
 80069b2:	78c9      	ldrb	r1, [r1, #3]
 80069b4:	430b      	orrs	r3, r1
 80069b6:	0e1b      	lsrs	r3, r3, #24
 80069b8:	4313      	orrs	r3, r2
 80069ba:	4a42      	ldr	r2, [pc, #264]	; (8006ac4 <MX_LWIP_Init+0x270>)
 80069bc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80069be:	4b3f      	ldr	r3, [pc, #252]	; (8006abc <MX_LWIP_Init+0x268>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	061a      	lsls	r2, r3, #24
 80069c4:	4b3d      	ldr	r3, [pc, #244]	; (8006abc <MX_LWIP_Init+0x268>)
 80069c6:	785b      	ldrb	r3, [r3, #1]
 80069c8:	041b      	lsls	r3, r3, #16
 80069ca:	431a      	orrs	r2, r3
 80069cc:	4b3b      	ldr	r3, [pc, #236]	; (8006abc <MX_LWIP_Init+0x268>)
 80069ce:	789b      	ldrb	r3, [r3, #2]
 80069d0:	021b      	lsls	r3, r3, #8
 80069d2:	4313      	orrs	r3, r2
 80069d4:	4a39      	ldr	r2, [pc, #228]	; (8006abc <MX_LWIP_Init+0x268>)
 80069d6:	78d2      	ldrb	r2, [r2, #3]
 80069d8:	4313      	orrs	r3, r2
 80069da:	061a      	lsls	r2, r3, #24
 80069dc:	4b37      	ldr	r3, [pc, #220]	; (8006abc <MX_LWIP_Init+0x268>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	0619      	lsls	r1, r3, #24
 80069e2:	4b36      	ldr	r3, [pc, #216]	; (8006abc <MX_LWIP_Init+0x268>)
 80069e4:	785b      	ldrb	r3, [r3, #1]
 80069e6:	041b      	lsls	r3, r3, #16
 80069e8:	4319      	orrs	r1, r3
 80069ea:	4b34      	ldr	r3, [pc, #208]	; (8006abc <MX_LWIP_Init+0x268>)
 80069ec:	789b      	ldrb	r3, [r3, #2]
 80069ee:	021b      	lsls	r3, r3, #8
 80069f0:	430b      	orrs	r3, r1
 80069f2:	4932      	ldr	r1, [pc, #200]	; (8006abc <MX_LWIP_Init+0x268>)
 80069f4:	78c9      	ldrb	r1, [r1, #3]
 80069f6:	430b      	orrs	r3, r1
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069fe:	431a      	orrs	r2, r3
 8006a00:	4b2e      	ldr	r3, [pc, #184]	; (8006abc <MX_LWIP_Init+0x268>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	0619      	lsls	r1, r3, #24
 8006a06:	4b2d      	ldr	r3, [pc, #180]	; (8006abc <MX_LWIP_Init+0x268>)
 8006a08:	785b      	ldrb	r3, [r3, #1]
 8006a0a:	041b      	lsls	r3, r3, #16
 8006a0c:	4319      	orrs	r1, r3
 8006a0e:	4b2b      	ldr	r3, [pc, #172]	; (8006abc <MX_LWIP_Init+0x268>)
 8006a10:	789b      	ldrb	r3, [r3, #2]
 8006a12:	021b      	lsls	r3, r3, #8
 8006a14:	430b      	orrs	r3, r1
 8006a16:	4929      	ldr	r1, [pc, #164]	; (8006abc <MX_LWIP_Init+0x268>)
 8006a18:	78c9      	ldrb	r1, [r1, #3]
 8006a1a:	430b      	orrs	r3, r1
 8006a1c:	0a1b      	lsrs	r3, r3, #8
 8006a1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006a22:	431a      	orrs	r2, r3
 8006a24:	4b25      	ldr	r3, [pc, #148]	; (8006abc <MX_LWIP_Init+0x268>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	0619      	lsls	r1, r3, #24
 8006a2a:	4b24      	ldr	r3, [pc, #144]	; (8006abc <MX_LWIP_Init+0x268>)
 8006a2c:	785b      	ldrb	r3, [r3, #1]
 8006a2e:	041b      	lsls	r3, r3, #16
 8006a30:	4319      	orrs	r1, r3
 8006a32:	4b22      	ldr	r3, [pc, #136]	; (8006abc <MX_LWIP_Init+0x268>)
 8006a34:	789b      	ldrb	r3, [r3, #2]
 8006a36:	021b      	lsls	r3, r3, #8
 8006a38:	430b      	orrs	r3, r1
 8006a3a:	4920      	ldr	r1, [pc, #128]	; (8006abc <MX_LWIP_Init+0x268>)
 8006a3c:	78c9      	ldrb	r1, [r1, #3]
 8006a3e:	430b      	orrs	r3, r1
 8006a40:	0e1b      	lsrs	r3, r3, #24
 8006a42:	4313      	orrs	r3, r2
 8006a44:	4a20      	ldr	r2, [pc, #128]	; (8006ac8 <MX_LWIP_Init+0x274>)
 8006a46:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006a48:	4b20      	ldr	r3, [pc, #128]	; (8006acc <MX_LWIP_Init+0x278>)
 8006a4a:	9302      	str	r3, [sp, #8]
 8006a4c:	4b20      	ldr	r3, [pc, #128]	; (8006ad0 <MX_LWIP_Init+0x27c>)
 8006a4e:	9301      	str	r3, [sp, #4]
 8006a50:	2300      	movs	r3, #0
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	4b1c      	ldr	r3, [pc, #112]	; (8006ac8 <MX_LWIP_Init+0x274>)
 8006a56:	4a1b      	ldr	r2, [pc, #108]	; (8006ac4 <MX_LWIP_Init+0x270>)
 8006a58:	4919      	ldr	r1, [pc, #100]	; (8006ac0 <MX_LWIP_Init+0x26c>)
 8006a5a:	481e      	ldr	r0, [pc, #120]	; (8006ad4 <MX_LWIP_Init+0x280>)
 8006a5c:	f006 fc8c 	bl	800d378 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006a60:	481c      	ldr	r0, [pc, #112]	; (8006ad4 <MX_LWIP_Init+0x280>)
 8006a62:	f006 fe3b 	bl	800d6dc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006a66:	4b1b      	ldr	r3, [pc, #108]	; (8006ad4 <MX_LWIP_Init+0x280>)
 8006a68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006a6c:	089b      	lsrs	r3, r3, #2
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006a78:	4816      	ldr	r0, [pc, #88]	; (8006ad4 <MX_LWIP_Init+0x280>)
 8006a7a:	f006 fe3f 	bl	800d6fc <netif_set_up>
 8006a7e:	e002      	b.n	8006a86 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006a80:	4814      	ldr	r0, [pc, #80]	; (8006ad4 <MX_LWIP_Init+0x280>)
 8006a82:	f006 fea7 	bl	800d7d4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006a86:	4914      	ldr	r1, [pc, #80]	; (8006ad8 <MX_LWIP_Init+0x284>)
 8006a88:	4812      	ldr	r0, [pc, #72]	; (8006ad4 <MX_LWIP_Init+0x280>)
 8006a8a:	f006 ff39 	bl	800d900 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8006a8e:	4b13      	ldr	r3, [pc, #76]	; (8006adc <MX_LWIP_Init+0x288>)
 8006a90:	1d3c      	adds	r4, r7, #4
 8006a92:	461d      	mov	r5, r3
 8006a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006a9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8006aa0:	1d3b      	adds	r3, r7, #4
 8006aa2:	490c      	ldr	r1, [pc, #48]	; (8006ad4 <MX_LWIP_Init+0x280>)
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fd47 	bl	8007538 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006aaa:	bf00      	nop
 8006aac:	3720      	adds	r7, #32
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20001960 	.word	0x20001960
 8006ab8:	20001964 	.word	0x20001964
 8006abc:	20001968 	.word	0x20001968
 8006ac0:	20001954 	.word	0x20001954
 8006ac4:	20001958 	.word	0x20001958
 8006ac8:	2000195c 	.word	0x2000195c
 8006acc:	0800c6d5 	.word	0x0800c6d5
 8006ad0:	08006fd9 	.word	0x08006fd9
 8006ad4:	20001920 	.word	0x20001920
 8006ad8:	08006ae1 	.word	0x08006ae1
 8006adc:	0801ad50 	.word	0x0801ad50

08006ae0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8006b06:	2320      	movs	r3, #32
 8006b08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006b0a:	f3bf 8f4f 	dsb	sy
}
 8006b0e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8006b10:	e00b      	b.n	8006b2a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8006b12:	4a0d      	ldr	r2, [pc, #52]	; (8006b48 <SCB_InvalidateDCache_by_Addr+0x54>)
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	4413      	add	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dcf0      	bgt.n	8006b12 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8006b30:	f3bf 8f4f 	dsb	sy
}
 8006b34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006b36:	f3bf 8f6f 	isb	sy
}
 8006b3a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8006b3c:	bf00      	nop
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	e000ed00 	.word	0xe000ed00

08006b4c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8006b54:	4b04      	ldr	r3, [pc, #16]	; (8006b68 <HAL_ETH_RxCpltCallback+0x1c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 fe69 	bl	8007830 <osSemaphoreRelease>
}
 8006b5e:	bf00      	nop
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	200062f8 	.word	0x200062f8

08006b6c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8006b74:	4b04      	ldr	r3, [pc, #16]	; (8006b88 <HAL_ETH_TxCpltCallback+0x1c>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 fe59 	bl	8007830 <osSemaphoreRelease>
}
 8006b7e:	bf00      	nop
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	200062fc 	.word	0x200062fc

08006b8c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7fb fe01 	bl	800279c <HAL_ETH_GetDMAError>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba0:	2b80      	cmp	r3, #128	; 0x80
 8006ba2:	d104      	bne.n	8006bae <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8006ba4:	4b04      	ldr	r3, [pc, #16]	; (8006bb8 <HAL_ETH_ErrorCallback+0x2c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 fe41 	bl	8007830 <osSemaphoreRelease>
  }
}
 8006bae:	bf00      	nop
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	200062f8 	.word	0x200062f8

08006bbc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006bbc:	b5b0      	push	{r4, r5, r7, lr}
 8006bbe:	b0a8      	sub	sp, #160	; 0xa0
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8006bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bda:	2264      	movs	r2, #100	; 0x64
 8006bdc:	2100      	movs	r1, #0
 8006bde:	4618      	mov	r0, r3
 8006be0:	f012 fef6 	bl	80199d0 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006be4:	4b85      	ldr	r3, [pc, #532]	; (8006dfc <low_level_init+0x240>)
 8006be6:	4a86      	ldr	r2, [pc, #536]	; (8006e00 <low_level_init+0x244>)
 8006be8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006bea:	2300      	movs	r3, #0
 8006bec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8006bf0:	2380      	movs	r3, #128	; 0x80
 8006bf2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8006bf6:	23e1      	movs	r3, #225	; 0xe1
 8006bf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8006c02:	2300      	movs	r3, #0
 8006c04:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8006c0e:	4a7b      	ldr	r2, [pc, #492]	; (8006dfc <low_level_init+0x240>)
 8006c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c14:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006c16:	4b79      	ldr	r3, [pc, #484]	; (8006dfc <low_level_init+0x240>)
 8006c18:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006c1c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006c1e:	4b77      	ldr	r3, [pc, #476]	; (8006dfc <low_level_init+0x240>)
 8006c20:	4a78      	ldr	r2, [pc, #480]	; (8006e04 <low_level_init+0x248>)
 8006c22:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006c24:	4b75      	ldr	r3, [pc, #468]	; (8006dfc <low_level_init+0x240>)
 8006c26:	4a78      	ldr	r2, [pc, #480]	; (8006e08 <low_level_init+0x24c>)
 8006c28:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006c2a:	4b74      	ldr	r3, [pc, #464]	; (8006dfc <low_level_init+0x240>)
 8006c2c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006c30:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006c32:	4872      	ldr	r0, [pc, #456]	; (8006dfc <low_level_init+0x240>)
 8006c34:	f7fa ff74 	bl	8001b20 <HAL_ETH_Init>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006c3e:	2238      	movs	r2, #56	; 0x38
 8006c40:	2100      	movs	r1, #0
 8006c42:	4872      	ldr	r0, [pc, #456]	; (8006e0c <low_level_init+0x250>)
 8006c44:	f012 fec4 	bl	80199d0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006c48:	4b70      	ldr	r3, [pc, #448]	; (8006e0c <low_level_init+0x250>)
 8006c4a:	2221      	movs	r2, #33	; 0x21
 8006c4c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006c4e:	4b6f      	ldr	r3, [pc, #444]	; (8006e0c <low_level_init+0x250>)
 8006c50:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006c54:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006c56:	4b6d      	ldr	r3, [pc, #436]	; (8006e0c <low_level_init+0x250>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006c5c:	486c      	ldr	r0, [pc, #432]	; (8006e10 <low_level_init+0x254>)
 8006c5e:	f006 fa45 	bl	800d0ec <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2206      	movs	r2, #6
 8006c66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006c6a:	4b64      	ldr	r3, [pc, #400]	; (8006dfc <low_level_init+0x240>)
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	781a      	ldrb	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006c76:	4b61      	ldr	r3, [pc, #388]	; (8006dfc <low_level_init+0x240>)
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	785a      	ldrb	r2, [r3, #1]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006c82:	4b5e      	ldr	r3, [pc, #376]	; (8006dfc <low_level_init+0x240>)
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	789a      	ldrb	r2, [r3, #2]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006c8e:	4b5b      	ldr	r3, [pc, #364]	; (8006dfc <low_level_init+0x240>)
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	78da      	ldrb	r2, [r3, #3]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006c9a:	4b58      	ldr	r3, [pc, #352]	; (8006dfc <low_level_init+0x240>)
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	791a      	ldrb	r2, [r3, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006ca6:	4b55      	ldr	r3, [pc, #340]	; (8006dfc <low_level_init+0x240>)
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	795a      	ldrb	r2, [r3, #5]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006cb8:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006cc0:	f043 030a 	orr.w	r3, r3, #10
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8006ccc:	2203      	movs	r2, #3
 8006cce:	2100      	movs	r1, #0
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	f001 f89d 	bl	8007e10 <xQueueGenericCreate>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	4a4e      	ldr	r2, [pc, #312]	; (8006e14 <low_level_init+0x258>)
 8006cda:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8006cdc:	2203      	movs	r2, #3
 8006cde:	2100      	movs	r1, #0
 8006ce0:	2001      	movs	r0, #1
 8006ce2:	f001 f895 	bl	8007e10 <xQueueGenericCreate>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	4a4b      	ldr	r2, [pc, #300]	; (8006e18 <low_level_init+0x25c>)
 8006cea:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006cec:	4b4b      	ldr	r3, [pc, #300]	; (8006e1c <low_level_init+0x260>)
 8006cee:	f107 0408 	add.w	r4, r7, #8
 8006cf2:	461d      	mov	r5, r3
 8006cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cf8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006cfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006d00:	f107 0308 	add.w	r3, r7, #8
 8006d04:	6879      	ldr	r1, [r7, #4]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 fc16 	bl	8007538 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006d0c:	4944      	ldr	r1, [pc, #272]	; (8006e20 <low_level_init+0x264>)
 8006d0e:	4845      	ldr	r0, [pc, #276]	; (8006e24 <low_level_init+0x268>)
 8006d10:	f7fa fbd3 	bl	80014ba <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8006d14:	4843      	ldr	r0, [pc, #268]	; (8006e24 <low_level_init+0x268>)
 8006d16:	f7fa fc02 	bl	800151e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8006d1a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d165      	bne.n	8006dee <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006d22:	4840      	ldr	r0, [pc, #256]	; (8006e24 <low_level_init+0x268>)
 8006d24:	f7fa fca3 	bl	800166e <LAN8742_GetLinkState>
 8006d28:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8006d2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	dc06      	bgt.n	8006d42 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f006 fdb3 	bl	800d8a0 <netif_set_link_down>
      netif_set_down(netif);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f006 fd4a 	bl	800d7d4 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006d40:	e057      	b.n	8006df2 <low_level_init+0x236>
      switch (PHYLinkState)
 8006d42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d46:	3b02      	subs	r3, #2
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	d82b      	bhi.n	8006da4 <low_level_init+0x1e8>
 8006d4c:	a201      	add	r2, pc, #4	; (adr r2, 8006d54 <low_level_init+0x198>)
 8006d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d52:	bf00      	nop
 8006d54:	08006d65 	.word	0x08006d65
 8006d58:	08006d77 	.word	0x08006d77
 8006d5c:	08006d87 	.word	0x08006d87
 8006d60:	08006d97 	.word	0x08006d97
        duplex = ETH_FULLDUPLEX_MODE;
 8006d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8006d6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006d74:	e01f      	b.n	8006db6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8006d76:	2300      	movs	r3, #0
 8006d78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8006d7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006d84:	e017      	b.n	8006db6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8006d86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006d94:	e00f      	b.n	8006db6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8006d96:	2300      	movs	r3, #0
 8006d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006da2:	e008      	b.n	8006db6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8006da4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006da8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8006dac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006db0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006db4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006dba:	4619      	mov	r1, r3
 8006dbc:	480f      	ldr	r0, [pc, #60]	; (8006dfc <low_level_init+0x240>)
 8006dbe:	f7fb fb93 	bl	80024e8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8006dc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006dc6:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8006dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dcc:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006dce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	4809      	ldr	r0, [pc, #36]	; (8006dfc <low_level_init+0x240>)
 8006dd6:	f7fb fc71 	bl	80026bc <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8006dda:	4808      	ldr	r0, [pc, #32]	; (8006dfc <low_level_init+0x240>)
 8006ddc:	f7fa ff1c 	bl	8001c18 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f006 fc8b 	bl	800d6fc <netif_set_up>
    netif_set_link_up(netif);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f006 fd26 	bl	800d838 <netif_set_link_up>
}
 8006dec:	e001      	b.n	8006df2 <low_level_init+0x236>
    Error_Handler();
 8006dee:	f7fa f83f 	bl	8000e70 <Error_Handler>
}
 8006df2:	bf00      	nop
 8006df4:	37a0      	adds	r7, #160	; 0xa0
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bdb0      	pop	{r4, r5, r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20006300 	.word	0x20006300
 8006e00:	40028000 	.word	0x40028000
 8006e04:	20000138 	.word	0x20000138
 8006e08:	20000098 	.word	0x20000098
 8006e0c:	200063b0 	.word	0x200063b0
 8006e10:	0801e214 	.word	0x0801e214
 8006e14:	200062f8 	.word	0x200062f8
 8006e18:	200062fc 	.word	0x200062fc
 8006e1c:	0801ad74 	.word	0x0801ad74
 8006e20:	20000010 	.word	0x20000010
 8006e24:	200063e8 	.word	0x200063e8

08006e28 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b092      	sub	sp, #72	; 0x48
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8006e36:	2300      	movs	r3, #0
 8006e38:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006e40:	f107 030c 	add.w	r3, r7, #12
 8006e44:	2230      	movs	r2, #48	; 0x30
 8006e46:	2100      	movs	r1, #0
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f012 fdc1 	bl	80199d0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006e4e:	f107 030c 	add.w	r3, r7, #12
 8006e52:	2230      	movs	r2, #48	; 0x30
 8006e54:	2100      	movs	r1, #0
 8006e56:	4618      	mov	r0, r3
 8006e58:	f012 fdba 	bl	80199d0 <memset>

  for(q = p; q != NULL; q = q->next)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	643b      	str	r3, [r7, #64]	; 0x40
 8006e60:	e045      	b.n	8006eee <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e64:	2b03      	cmp	r3, #3
 8006e66:	d902      	bls.n	8006e6e <low_level_output+0x46>
      return ERR_IF;
 8006e68:	f06f 030b 	mvn.w	r3, #11
 8006e6c:	e065      	b.n	8006f3a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8006e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e70:	6859      	ldr	r1, [r3, #4]
 8006e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e74:	4613      	mov	r3, r2
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	4413      	add	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	3348      	adds	r3, #72	; 0x48
 8006e7e:	443b      	add	r3, r7
 8006e80:	3b3c      	subs	r3, #60	; 0x3c
 8006e82:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e86:	895b      	ldrh	r3, [r3, #10]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	4413      	add	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	3348      	adds	r3, #72	; 0x48
 8006e96:	443b      	add	r3, r7
 8006e98:	3b38      	subs	r3, #56	; 0x38
 8006e9a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d011      	beq.n	8006ec6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ea4:	1e5a      	subs	r2, r3, #1
 8006ea6:	f107 000c 	add.w	r0, r7, #12
 8006eaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006eac:	460b      	mov	r3, r1
 8006eae:	005b      	lsls	r3, r3, #1
 8006eb0:	440b      	add	r3, r1
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	18c1      	adds	r1, r0, r3
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	3348      	adds	r3, #72	; 0x48
 8006ec0:	443b      	add	r3, r7
 8006ec2:	3b34      	subs	r3, #52	; 0x34
 8006ec4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d109      	bne.n	8006ee2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006ece:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	4413      	add	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	3348      	adds	r3, #72	; 0x48
 8006eda:	443b      	add	r3, r7
 8006edc:	3b34      	subs	r3, #52	; 0x34
 8006ede:	2200      	movs	r2, #0
 8006ee0:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	643b      	str	r3, [r7, #64]	; 0x40
 8006eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1b6      	bne.n	8006e62 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	891b      	ldrh	r3, [r3, #8]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	4b12      	ldr	r3, [pc, #72]	; (8006f44 <low_level_output+0x11c>)
 8006efc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006efe:	4a11      	ldr	r2, [pc, #68]	; (8006f44 <low_level_output+0x11c>)
 8006f00:	f107 030c 	add.w	r3, r7, #12
 8006f04:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006f06:	4a0f      	ldr	r2, [pc, #60]	; (8006f44 <low_level_output+0x11c>)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8006f0c:	6838      	ldr	r0, [r7, #0]
 8006f0e:	f007 f94b 	bl	800e1a8 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8006f12:	490c      	ldr	r1, [pc, #48]	; (8006f44 <low_level_output+0x11c>)
 8006f14:	480c      	ldr	r0, [pc, #48]	; (8006f48 <low_level_output+0x120>)
 8006f16:	f7fa ff8d 	bl	8001e34 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8006f1a:	bf00      	nop
 8006f1c:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <low_level_output+0x124>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 fc35 	bl	8007794 <osSemaphoreWait>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1f5      	bne.n	8006f1c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8006f30:	4805      	ldr	r0, [pc, #20]	; (8006f48 <low_level_output+0x120>)
 8006f32:	f7fb f913 	bl	800215c <HAL_ETH_ReleaseTxPacket>

  return errval;
 8006f36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3748      	adds	r7, #72	; 0x48
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	200063b0 	.word	0x200063b0
 8006f48:	20006300 	.word	0x20006300
 8006f4c:	200062fc 	.word	0x200062fc

08006f50 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006f5c:	4b07      	ldr	r3, [pc, #28]	; (8006f7c <low_level_input+0x2c>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d105      	bne.n	8006f70 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006f64:	f107 030c 	add.w	r3, r7, #12
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4805      	ldr	r0, [pc, #20]	; (8006f80 <low_level_input+0x30>)
 8006f6c:	f7fa ffbe 	bl	8001eec <HAL_ETH_ReadData>
  }

  return p;
 8006f70:	68fb      	ldr	r3, [r7, #12]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	200062f4 	.word	0x200062f4
 8006f80:	20006300 	.word	0x20006300

08006f84 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006f94:	4b0f      	ldr	r3, [pc, #60]	; (8006fd4 <ethernetif_input+0x50>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 fbf9 	bl	8007794 <osSemaphoreWait>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1f5      	bne.n	8006f94 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8006fa8:	68b8      	ldr	r0, [r7, #8]
 8006faa:	f7ff ffd1 	bl	8006f50 <low_level_input>
 8006fae:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00a      	beq.n	8006fcc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	68b9      	ldr	r1, [r7, #8]
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	4798      	blx	r3
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d002      	beq.n	8006fcc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f007 f848 	bl	800e05c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1ea      	bne.n	8006fa8 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006fd2:	e7df      	b.n	8006f94 <ethernetif_input+0x10>
 8006fd4:	200062f8 	.word	0x200062f8

08006fd8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d106      	bne.n	8006ff4 <ethernetif_init+0x1c>
 8006fe6:	4b0e      	ldr	r3, [pc, #56]	; (8007020 <ethernetif_init+0x48>)
 8006fe8:	f240 12ef 	movw	r2, #495	; 0x1ef
 8006fec:	490d      	ldr	r1, [pc, #52]	; (8007024 <ethernetif_init+0x4c>)
 8006fee:	480e      	ldr	r0, [pc, #56]	; (8007028 <ethernetif_init+0x50>)
 8006ff0:	f012 fcf6 	bl	80199e0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2273      	movs	r2, #115	; 0x73
 8006ff8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2274      	movs	r2, #116	; 0x74
 8007000:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a09      	ldr	r2, [pc, #36]	; (800702c <ethernetif_init+0x54>)
 8007008:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a08      	ldr	r2, [pc, #32]	; (8007030 <ethernetif_init+0x58>)
 800700e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff fdd3 	bl	8006bbc <low_level_init>

  return ERR_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	0801ad90 	.word	0x0801ad90
 8007024:	0801adac 	.word	0x0801adac
 8007028:	0801adbc 	.word	0x0801adbc
 800702c:	08015871 	.word	0x08015871
 8007030:	08006e29 	.word	0x08006e29

08007034 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007040:	68f9      	ldr	r1, [r7, #12]
 8007042:	4809      	ldr	r0, [pc, #36]	; (8007068 <pbuf_free_custom+0x34>)
 8007044:	f006 f942 	bl	800d2cc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007048:	4b08      	ldr	r3, [pc, #32]	; (800706c <pbuf_free_custom+0x38>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d107      	bne.n	8007060 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007050:	4b06      	ldr	r3, [pc, #24]	; (800706c <pbuf_free_custom+0x38>)
 8007052:	2200      	movs	r2, #0
 8007054:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8007056:	4b06      	ldr	r3, [pc, #24]	; (8007070 <pbuf_free_custom+0x3c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4618      	mov	r0, r3
 800705c:	f000 fbe8 	bl	8007830 <osSemaphoreRelease>
  }
}
 8007060:	bf00      	nop
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	0801e214 	.word	0x0801e214
 800706c:	200062f4 	.word	0x200062f4
 8007070:	200062f8 	.word	0x200062f8

08007074 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007078:	f7fa fba2 	bl	80017c0 <HAL_GetTick>
 800707c:	4603      	mov	r3, r0
}
 800707e:	4618      	mov	r0, r3
 8007080:	bd80      	pop	{r7, pc}
	...

08007084 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08e      	sub	sp, #56	; 0x38
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800708c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007090:	2200      	movs	r2, #0
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	605a      	str	r2, [r3, #4]
 8007096:	609a      	str	r2, [r3, #8]
 8007098:	60da      	str	r2, [r3, #12]
 800709a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a52      	ldr	r2, [pc, #328]	; (80071ec <HAL_ETH_MspInit+0x168>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	f040 809e 	bne.w	80071e4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80070a8:	4b51      	ldr	r3, [pc, #324]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	4a50      	ldr	r2, [pc, #320]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 80070ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80070b2:	6313      	str	r3, [r2, #48]	; 0x30
 80070b4:	4b4e      	ldr	r3, [pc, #312]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 80070b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070bc:	623b      	str	r3, [r7, #32]
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	4b4b      	ldr	r3, [pc, #300]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 80070c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c4:	4a4a      	ldr	r2, [pc, #296]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 80070c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070ca:	6313      	str	r3, [r2, #48]	; 0x30
 80070cc:	4b48      	ldr	r3, [pc, #288]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 80070ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070d4:	61fb      	str	r3, [r7, #28]
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	4b45      	ldr	r3, [pc, #276]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 80070da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070dc:	4a44      	ldr	r2, [pc, #272]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 80070de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070e2:	6313      	str	r3, [r2, #48]	; 0x30
 80070e4:	4b42      	ldr	r3, [pc, #264]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 80070e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070ec:	61bb      	str	r3, [r7, #24]
 80070ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070f0:	4b3f      	ldr	r3, [pc, #252]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 80070f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f4:	4a3e      	ldr	r2, [pc, #248]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 80070f6:	f043 0304 	orr.w	r3, r3, #4
 80070fa:	6313      	str	r3, [r2, #48]	; 0x30
 80070fc:	4b3c      	ldr	r3, [pc, #240]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 80070fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007100:	f003 0304 	and.w	r3, r3, #4
 8007104:	617b      	str	r3, [r7, #20]
 8007106:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007108:	4b39      	ldr	r3, [pc, #228]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 800710a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710c:	4a38      	ldr	r2, [pc, #224]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 800710e:	f043 0301 	orr.w	r3, r3, #1
 8007112:	6313      	str	r3, [r2, #48]	; 0x30
 8007114:	4b36      	ldr	r3, [pc, #216]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	613b      	str	r3, [r7, #16]
 800711e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007120:	4b33      	ldr	r3, [pc, #204]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 8007122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007124:	4a32      	ldr	r2, [pc, #200]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 8007126:	f043 0302 	orr.w	r3, r3, #2
 800712a:	6313      	str	r3, [r2, #48]	; 0x30
 800712c:	4b30      	ldr	r3, [pc, #192]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 800712e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007130:	f003 0302 	and.w	r3, r3, #2
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007138:	4b2d      	ldr	r3, [pc, #180]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 800713a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713c:	4a2c      	ldr	r2, [pc, #176]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 800713e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007142:	6313      	str	r3, [r2, #48]	; 0x30
 8007144:	4b2a      	ldr	r3, [pc, #168]	; (80071f0 <HAL_ETH_MspInit+0x16c>)
 8007146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800714c:	60bb      	str	r3, [r7, #8]
 800714e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007150:	2332      	movs	r3, #50	; 0x32
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007154:	2302      	movs	r3, #2
 8007156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007158:	2300      	movs	r3, #0
 800715a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800715c:	2303      	movs	r3, #3
 800715e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007160:	230b      	movs	r3, #11
 8007162:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007168:	4619      	mov	r1, r3
 800716a:	4822      	ldr	r0, [pc, #136]	; (80071f4 <HAL_ETH_MspInit+0x170>)
 800716c:	f7fb ff26 	bl	8002fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007170:	2386      	movs	r3, #134	; 0x86
 8007172:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007174:	2302      	movs	r3, #2
 8007176:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007178:	2300      	movs	r3, #0
 800717a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800717c:	2303      	movs	r3, #3
 800717e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007180:	230b      	movs	r3, #11
 8007182:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007188:	4619      	mov	r1, r3
 800718a:	481b      	ldr	r0, [pc, #108]	; (80071f8 <HAL_ETH_MspInit+0x174>)
 800718c:	f7fb ff16 	bl	8002fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007194:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007196:	2302      	movs	r3, #2
 8007198:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800719a:	2300      	movs	r3, #0
 800719c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800719e:	2303      	movs	r3, #3
 80071a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80071a2:	230b      	movs	r3, #11
 80071a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80071a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071aa:	4619      	mov	r1, r3
 80071ac:	4813      	ldr	r0, [pc, #76]	; (80071fc <HAL_ETH_MspInit+0x178>)
 80071ae:	f7fb ff05 	bl	8002fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80071b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80071b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071b8:	2302      	movs	r3, #2
 80071ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071bc:	2300      	movs	r3, #0
 80071be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071c0:	2303      	movs	r3, #3
 80071c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80071c4:	230b      	movs	r3, #11
 80071c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80071c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071cc:	4619      	mov	r1, r3
 80071ce:	480c      	ldr	r0, [pc, #48]	; (8007200 <HAL_ETH_MspInit+0x17c>)
 80071d0:	f7fb fef4 	bl	8002fbc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80071d4:	2200      	movs	r2, #0
 80071d6:	2105      	movs	r1, #5
 80071d8:	203d      	movs	r0, #61	; 0x3d
 80071da:	f7fa fbd9 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80071de:	203d      	movs	r0, #61	; 0x3d
 80071e0:	f7fa fbf2 	bl	80019c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80071e4:	bf00      	nop
 80071e6:	3738      	adds	r7, #56	; 0x38
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	40028000 	.word	0x40028000
 80071f0:	40023800 	.word	0x40023800
 80071f4:	40020800 	.word	0x40020800
 80071f8:	40020000 	.word	0x40020000
 80071fc:	40020400 	.word	0x40020400
 8007200:	40021800 	.word	0x40021800

08007204 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007208:	4802      	ldr	r0, [pc, #8]	; (8007214 <ETH_PHY_IO_Init+0x10>)
 800720a:	f7fb fa71 	bl	80026f0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	bd80      	pop	{r7, pc}
 8007214:	20006300 	.word	0x20006300

08007218 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0
  return 0;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	68f9      	ldr	r1, [r7, #12]
 800723a:	4807      	ldr	r0, [pc, #28]	; (8007258 <ETH_PHY_IO_ReadReg+0x30>)
 800723c:	f7fb f8c0 	bl	80023c0 <HAL_ETH_ReadPHYRegister>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d002      	beq.n	800724c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8007246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800724a:	e000      	b.n	800724e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20006300 	.word	0x20006300

0800725c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	68f9      	ldr	r1, [r7, #12]
 800726e:	4807      	ldr	r0, [pc, #28]	; (800728c <ETH_PHY_IO_WriteReg+0x30>)
 8007270:	f7fb f8f1 	bl	8002456 <HAL_ETH_WritePHYRegister>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800727a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800727e:	e000      	b.n	8007282 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20006300 	.word	0x20006300

08007290 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007294:	f7fa fa94 	bl	80017c0 <HAL_GetTick>
 8007298:	4603      	mov	r3, r0
}
 800729a:	4618      	mov	r0, r3
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b0a0      	sub	sp, #128	; 0x80
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80072a8:	f107 0308 	add.w	r3, r7, #8
 80072ac:	2264      	movs	r2, #100	; 0x64
 80072ae:	2100      	movs	r1, #0
 80072b0:	4618      	mov	r0, r3
 80072b2:	f012 fb8d 	bl	80199d0 <memset>
  int32_t PHYLinkState = 0;
 80072b6:	2300      	movs	r3, #0
 80072b8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80072be:	2300      	movs	r3, #0
 80072c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80072c2:	2300      	movs	r3, #0
 80072c4:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80072ca:	483a      	ldr	r0, [pc, #232]	; (80073b4 <ethernet_link_thread+0x114>)
 80072cc:	f7fa f9cf 	bl	800166e <LAN8742_GetLinkState>
 80072d0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80072d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072d8:	089b      	lsrs	r3, r3, #2
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00c      	beq.n	80072fe <ethernet_link_thread+0x5e>
 80072e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	dc09      	bgt.n	80072fe <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80072ea:	4833      	ldr	r0, [pc, #204]	; (80073b8 <ethernet_link_thread+0x118>)
 80072ec:	f7fa fd22 	bl	8001d34 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80072f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80072f2:	f006 fa6f 	bl	800d7d4 <netif_set_down>
    netif_set_link_down(netif);
 80072f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80072f8:	f006 fad2 	bl	800d8a0 <netif_set_link_down>
 80072fc:	e055      	b.n	80073aa <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80072fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007300:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b00      	cmp	r3, #0
 800730a:	d14e      	bne.n	80073aa <ethernet_link_thread+0x10a>
 800730c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800730e:	2b01      	cmp	r3, #1
 8007310:	dd4b      	ble.n	80073aa <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8007312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007314:	3b02      	subs	r3, #2
 8007316:	2b03      	cmp	r3, #3
 8007318:	d82a      	bhi.n	8007370 <ethernet_link_thread+0xd0>
 800731a:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <ethernet_link_thread+0x80>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	08007331 	.word	0x08007331
 8007324:	08007343 	.word	0x08007343
 8007328:	08007353 	.word	0x08007353
 800732c:	08007363 	.word	0x08007363
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007330:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007334:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007336:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800733a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800733c:	2301      	movs	r3, #1
 800733e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007340:	e017      	b.n	8007372 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007342:	2300      	movs	r3, #0
 8007344:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007346:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800734a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800734c:	2301      	movs	r3, #1
 800734e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007350:	e00f      	b.n	8007372 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007352:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007356:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007358:	2300      	movs	r3, #0
 800735a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800735c:	2301      	movs	r3, #1
 800735e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007360:	e007      	b.n	8007372 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007362:	2300      	movs	r3, #0
 8007364:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007366:	2300      	movs	r3, #0
 8007368:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800736a:	2301      	movs	r3, #1
 800736c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800736e:	e000      	b.n	8007372 <ethernet_link_thread+0xd2>
    default:
      break;
 8007370:	bf00      	nop
    }

    if(linkchanged)
 8007372:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007374:	2b00      	cmp	r3, #0
 8007376:	d018      	beq.n	80073aa <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007378:	f107 0308 	add.w	r3, r7, #8
 800737c:	4619      	mov	r1, r3
 800737e:	480e      	ldr	r0, [pc, #56]	; (80073b8 <ethernet_link_thread+0x118>)
 8007380:	f7fb f8b2 	bl	80024e8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007386:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8007388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800738a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800738c:	f107 0308 	add.w	r3, r7, #8
 8007390:	4619      	mov	r1, r3
 8007392:	4809      	ldr	r0, [pc, #36]	; (80073b8 <ethernet_link_thread+0x118>)
 8007394:	f7fb f992 	bl	80026bc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8007398:	4807      	ldr	r0, [pc, #28]	; (80073b8 <ethernet_link_thread+0x118>)
 800739a:	f7fa fc3d 	bl	8001c18 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800739e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80073a0:	f006 f9ac 	bl	800d6fc <netif_set_up>
      netif_set_link_up(netif);
 80073a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80073a6:	f006 fa47 	bl	800d838 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80073aa:	2064      	movs	r0, #100	; 0x64
 80073ac:	f000 f910 	bl	80075d0 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80073b0:	e78b      	b.n	80072ca <ethernet_link_thread+0x2a>
 80073b2:	bf00      	nop
 80073b4:	200063e8 	.word	0x200063e8
 80073b8:	20006300 	.word	0x20006300

080073bc <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af02      	add	r7, sp, #8
 80073c2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80073c4:	4812      	ldr	r0, [pc, #72]	; (8007410 <HAL_ETH_RxAllocateCallback+0x54>)
 80073c6:	f005 ff0d 	bl	800d1e4 <memp_malloc_pool>
 80073ca:	60f8      	str	r0, [r7, #12]
  if (p)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d014      	beq.n	80073fc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f103 0220 	add.w	r2, r3, #32
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4a0d      	ldr	r2, [pc, #52]	; (8007414 <HAL_ETH_RxAllocateCallback+0x58>)
 80073e0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80073ea:	9201      	str	r2, [sp, #4]
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2241      	movs	r2, #65	; 0x41
 80073f2:	2100      	movs	r1, #0
 80073f4:	2000      	movs	r0, #0
 80073f6:	f006 fc77 	bl	800dce8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80073fa:	e005      	b.n	8007408 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80073fc:	4b06      	ldr	r3, [pc, #24]	; (8007418 <HAL_ETH_RxAllocateCallback+0x5c>)
 80073fe:	2201      	movs	r2, #1
 8007400:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]
}
 8007408:	bf00      	nop
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	0801e214 	.word	0x0801e214
 8007414:	08007035 	.word	0x08007035
 8007418:	200062f4 	.word	0x200062f4

0800741c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b088      	sub	sp, #32
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8007432:	2300      	movs	r3, #0
 8007434:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	3b20      	subs	r3, #32
 800743a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	2200      	movs	r2, #0
 8007446:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	887a      	ldrh	r2, [r7, #2]
 800744c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d103      	bne.n	800745e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	69fa      	ldr	r2, [r7, #28]
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	e003      	b.n	8007466 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	69fa      	ldr	r2, [r7, #28]
 8007464:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	69fa      	ldr	r2, [r7, #28]
 800746a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	61fb      	str	r3, [r7, #28]
 8007472:	e009      	b.n	8007488 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	891a      	ldrh	r2, [r3, #8]
 8007478:	887b      	ldrh	r3, [r7, #2]
 800747a:	4413      	add	r3, r2
 800747c:	b29a      	uxth	r2, r3
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	61fb      	str	r3, [r7, #28]
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1f2      	bne.n	8007474 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800748e:	887b      	ldrh	r3, [r7, #2]
 8007490:	4619      	mov	r1, r3
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7ff fb2e 	bl	8006af4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007498:	bf00      	nop
 800749a:	3720      	adds	r7, #32
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f006 fdd7 	bl	800e05c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80074ae:	bf00      	nop
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b085      	sub	sp, #20
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	4603      	mov	r3, r0
 80074be:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80074c0:	2300      	movs	r3, #0
 80074c2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80074c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074c8:	2b84      	cmp	r3, #132	; 0x84
 80074ca:	d005      	beq.n	80074d8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80074cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	3303      	adds	r3, #3
 80074d6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80074d8:	68fb      	ldr	r3, [r7, #12]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074ec:	f3ef 8305 	mrs	r3, IPSR
 80074f0:	607b      	str	r3, [r7, #4]
  return(result);
 80074f2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	bf14      	ite	ne
 80074f8:	2301      	movne	r3, #1
 80074fa:	2300      	moveq	r3, #0
 80074fc:	b2db      	uxtb	r3, r3
}
 80074fe:	4618      	mov	r0, r3
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800750e:	f001 fd73 	bl	8008ff8 <vTaskStartScheduler>
  
  return osOK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	bd80      	pop	{r7, pc}

08007518 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800751c:	f7ff ffe3 	bl	80074e6 <inHandlerMode>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007526:	f001 fe87 	bl	8009238 <xTaskGetTickCountFromISR>
 800752a:	4603      	mov	r3, r0
 800752c:	e002      	b.n	8007534 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800752e:	f001 fe73 	bl	8009218 <xTaskGetTickCount>
 8007532:	4603      	mov	r3, r0
  }
}
 8007534:	4618      	mov	r0, r3
 8007536:	bd80      	pop	{r7, pc}

08007538 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800753a:	b089      	sub	sp, #36	; 0x24
 800753c:	af04      	add	r7, sp, #16
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d020      	beq.n	800758c <osThreadCreate+0x54>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d01c      	beq.n	800758c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685c      	ldr	r4, [r3, #4]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681d      	ldr	r5, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691e      	ldr	r6, [r3, #16]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007564:	4618      	mov	r0, r3
 8007566:	f7ff ffa6 	bl	80074b6 <makeFreeRtosPriority>
 800756a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007574:	9202      	str	r2, [sp, #8]
 8007576:	9301      	str	r3, [sp, #4]
 8007578:	9100      	str	r1, [sp, #0]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	4632      	mov	r2, r6
 800757e:	4629      	mov	r1, r5
 8007580:	4620      	mov	r0, r4
 8007582:	f001 fb67 	bl	8008c54 <xTaskCreateStatic>
 8007586:	4603      	mov	r3, r0
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	e01c      	b.n	80075c6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685c      	ldr	r4, [r3, #4]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007598:	b29e      	uxth	r6, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7ff ff88 	bl	80074b6 <makeFreeRtosPriority>
 80075a6:	4602      	mov	r2, r0
 80075a8:	f107 030c 	add.w	r3, r7, #12
 80075ac:	9301      	str	r3, [sp, #4]
 80075ae:	9200      	str	r2, [sp, #0]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	4632      	mov	r2, r6
 80075b4:	4629      	mov	r1, r5
 80075b6:	4620      	mov	r0, r4
 80075b8:	f001 fbaf 	bl	8008d1a <xTaskCreate>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d001      	beq.n	80075c6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	e000      	b.n	80075c8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80075c6:	68fb      	ldr	r3, [r7, #12]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075d0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <osDelay+0x16>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	e000      	b.n	80075e8 <osDelay+0x18>
 80075e6:	2301      	movs	r3, #1
 80075e8:	4618      	mov	r0, r3
 80075ea:	f001 fccf 	bl	8008f8c <vTaskDelay>
  
  return osOK;
 80075ee:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d007      	beq.n	8007618 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	4619      	mov	r1, r3
 800760e:	2001      	movs	r0, #1
 8007610:	f000 fc91 	bl	8007f36 <xQueueCreateMutexStatic>
 8007614:	4603      	mov	r3, r0
 8007616:	e003      	b.n	8007620 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007618:	2001      	movs	r0, #1
 800761a:	f000 fc74 	bl	8007f06 <xQueueCreateMutex>
 800761e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007620:	4618      	mov	r0, r3
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007632:	2300      	movs	r3, #0
 8007634:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <osMutexWait+0x18>
    return osErrorParameter;
 800763c:	2380      	movs	r3, #128	; 0x80
 800763e:	e03a      	b.n	80076b6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007640:	2300      	movs	r3, #0
 8007642:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800764a:	d103      	bne.n	8007654 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800764c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007650:	60fb      	str	r3, [r7, #12]
 8007652:	e009      	b.n	8007668 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d006      	beq.n	8007668 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <osMutexWait+0x40>
      ticks = 1;
 8007664:	2301      	movs	r3, #1
 8007666:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007668:	f7ff ff3d 	bl	80074e6 <inHandlerMode>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d017      	beq.n	80076a2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007672:	f107 0308 	add.w	r3, r7, #8
 8007676:	461a      	mov	r2, r3
 8007678:	2100      	movs	r1, #0
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f001 f8ac 	bl	80087d8 <xQueueReceiveFromISR>
 8007680:	4603      	mov	r3, r0
 8007682:	2b01      	cmp	r3, #1
 8007684:	d001      	beq.n	800768a <osMutexWait+0x62>
      return osErrorOS;
 8007686:	23ff      	movs	r3, #255	; 0xff
 8007688:	e015      	b.n	80076b6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d011      	beq.n	80076b4 <osMutexWait+0x8c>
 8007690:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <osMutexWait+0x98>)
 8007692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	e008      	b.n	80076b4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80076a2:	68f9      	ldr	r1, [r7, #12]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 ff83 	bl	80085b0 <xQueueSemaphoreTake>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d001      	beq.n	80076b4 <osMutexWait+0x8c>
    return osErrorOS;
 80076b0:	23ff      	movs	r3, #255	; 0xff
 80076b2:	e000      	b.n	80076b6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	e000ed04 	.word	0xe000ed04

080076c4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80076d0:	2300      	movs	r3, #0
 80076d2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80076d4:	f7ff ff07 	bl	80074e6 <inHandlerMode>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d016      	beq.n	800770c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80076de:	f107 0308 	add.w	r3, r7, #8
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fde7 	bl	80082b8 <xQueueGiveFromISR>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d001      	beq.n	80076f4 <osMutexRelease+0x30>
      return osErrorOS;
 80076f0:	23ff      	movs	r3, #255	; 0xff
 80076f2:	e017      	b.n	8007724 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d013      	beq.n	8007722 <osMutexRelease+0x5e>
 80076fa:	4b0c      	ldr	r3, [pc, #48]	; (800772c <osMutexRelease+0x68>)
 80076fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	e00a      	b.n	8007722 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800770c:	2300      	movs	r3, #0
 800770e:	2200      	movs	r2, #0
 8007710:	2100      	movs	r1, #0
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fc2a 	bl	8007f6c <xQueueGenericSend>
 8007718:	4603      	mov	r3, r0
 800771a:	2b01      	cmp	r3, #1
 800771c:	d001      	beq.n	8007722 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800771e:	23ff      	movs	r3, #255	; 0xff
 8007720:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007722:	68fb      	ldr	r3, [r7, #12]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	e000ed04 	.word	0xe000ed04

08007730 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af02      	add	r7, sp, #8
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00f      	beq.n	8007762 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d10a      	bne.n	800775e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	2203      	movs	r2, #3
 800774e:	9200      	str	r2, [sp, #0]
 8007750:	2200      	movs	r2, #0
 8007752:	2100      	movs	r1, #0
 8007754:	2001      	movs	r0, #1
 8007756:	f000 fad9 	bl	8007d0c <xQueueGenericCreateStatic>
 800775a:	4603      	mov	r3, r0
 800775c:	e016      	b.n	800778c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800775e:	2300      	movs	r3, #0
 8007760:	e014      	b.n	800778c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d110      	bne.n	800778a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007768:	2203      	movs	r2, #3
 800776a:	2100      	movs	r1, #0
 800776c:	2001      	movs	r0, #1
 800776e:	f000 fb4f 	bl	8007e10 <xQueueGenericCreate>
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d005      	beq.n	8007786 <osSemaphoreCreate+0x56>
 800777a:	2300      	movs	r3, #0
 800777c:	2200      	movs	r2, #0
 800777e:	2100      	movs	r1, #0
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f000 fbf3 	bl	8007f6c <xQueueGenericSend>
      return sema;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	e000      	b.n	800778c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800778a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800779e:	2300      	movs	r3, #0
 80077a0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <osSemaphoreWait+0x18>
    return osErrorParameter;
 80077a8:	2380      	movs	r3, #128	; 0x80
 80077aa:	e03a      	b.n	8007822 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80077ac:	2300      	movs	r3, #0
 80077ae:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077b6:	d103      	bne.n	80077c0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80077b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077bc:	60fb      	str	r3, [r7, #12]
 80077be:	e009      	b.n	80077d4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d006      	beq.n	80077d4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <osSemaphoreWait+0x40>
      ticks = 1;
 80077d0:	2301      	movs	r3, #1
 80077d2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80077d4:	f7ff fe87 	bl	80074e6 <inHandlerMode>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d017      	beq.n	800780e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80077de:	f107 0308 	add.w	r3, r7, #8
 80077e2:	461a      	mov	r2, r3
 80077e4:	2100      	movs	r1, #0
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fff6 	bl	80087d8 <xQueueReceiveFromISR>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d001      	beq.n	80077f6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80077f2:	23ff      	movs	r3, #255	; 0xff
 80077f4:	e015      	b.n	8007822 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d011      	beq.n	8007820 <osSemaphoreWait+0x8c>
 80077fc:	4b0b      	ldr	r3, [pc, #44]	; (800782c <osSemaphoreWait+0x98>)
 80077fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007802:	601a      	str	r2, [r3, #0]
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	e008      	b.n	8007820 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800780e:	68f9      	ldr	r1, [r7, #12]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fecd 	bl	80085b0 <xQueueSemaphoreTake>
 8007816:	4603      	mov	r3, r0
 8007818:	2b01      	cmp	r3, #1
 800781a:	d001      	beq.n	8007820 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800781c:	23ff      	movs	r3, #255	; 0xff
 800781e:	e000      	b.n	8007822 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	e000ed04 	.word	0xe000ed04

08007830 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007838:	2300      	movs	r3, #0
 800783a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800783c:	2300      	movs	r3, #0
 800783e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007840:	f7ff fe51 	bl	80074e6 <inHandlerMode>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d016      	beq.n	8007878 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800784a:	f107 0308 	add.w	r3, r7, #8
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fd31 	bl	80082b8 <xQueueGiveFromISR>
 8007856:	4603      	mov	r3, r0
 8007858:	2b01      	cmp	r3, #1
 800785a:	d001      	beq.n	8007860 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800785c:	23ff      	movs	r3, #255	; 0xff
 800785e:	e017      	b.n	8007890 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d013      	beq.n	800788e <osSemaphoreRelease+0x5e>
 8007866:	4b0c      	ldr	r3, [pc, #48]	; (8007898 <osSemaphoreRelease+0x68>)
 8007868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	e00a      	b.n	800788e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007878:	2300      	movs	r3, #0
 800787a:	2200      	movs	r2, #0
 800787c:	2100      	movs	r1, #0
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fb74 	bl	8007f6c <xQueueGenericSend>
 8007884:	4603      	mov	r3, r0
 8007886:	2b01      	cmp	r3, #1
 8007888:	d001      	beq.n	800788e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800788a:	23ff      	movs	r3, #255	; 0xff
 800788c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800788e:	68fb      	ldr	r3, [r7, #12]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	e000ed04 	.word	0xe000ed04

0800789c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80078a4:	f7ff fe1f 	bl	80074e6 <inHandlerMode>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80078ae:	2382      	movs	r3, #130	; 0x82
 80078b0:	e003      	b.n	80078ba <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f001 f856 	bl	8008964 <vQueueDelete>

  return osOK; 
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80078c2:	b590      	push	{r4, r7, lr}
 80078c4:	b085      	sub	sp, #20
 80078c6:	af02      	add	r7, sp, #8
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d011      	beq.n	80078f8 <osMessageCreate+0x36>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00d      	beq.n	80078f8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6818      	ldr	r0, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6859      	ldr	r1, [r3, #4]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	689a      	ldr	r2, [r3, #8]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	2400      	movs	r4, #0
 80078ee:	9400      	str	r4, [sp, #0]
 80078f0:	f000 fa0c 	bl	8007d0c <xQueueGenericCreateStatic>
 80078f4:	4603      	mov	r3, r0
 80078f6:	e008      	b.n	800790a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6818      	ldr	r0, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	4619      	mov	r1, r3
 8007904:	f000 fa84 	bl	8007e10 <xQueueGenericCreate>
 8007908:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800790a:	4618      	mov	r0, r3
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	bd90      	pop	{r4, r7, pc}
	...

08007914 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007920:	2300      	movs	r3, #0
 8007922:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d101      	bne.n	8007932 <osMessagePut+0x1e>
    ticks = 1;
 800792e:	2301      	movs	r3, #1
 8007930:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007932:	f7ff fdd8 	bl	80074e6 <inHandlerMode>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d018      	beq.n	800796e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800793c:	f107 0210 	add.w	r2, r7, #16
 8007940:	f107 0108 	add.w	r1, r7, #8
 8007944:	2300      	movs	r3, #0
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 fc16 	bl	8008178 <xQueueGenericSendFromISR>
 800794c:	4603      	mov	r3, r0
 800794e:	2b01      	cmp	r3, #1
 8007950:	d001      	beq.n	8007956 <osMessagePut+0x42>
      return osErrorOS;
 8007952:	23ff      	movs	r3, #255	; 0xff
 8007954:	e018      	b.n	8007988 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d014      	beq.n	8007986 <osMessagePut+0x72>
 800795c:	4b0c      	ldr	r3, [pc, #48]	; (8007990 <osMessagePut+0x7c>)
 800795e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	e00b      	b.n	8007986 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800796e:	f107 0108 	add.w	r1, r7, #8
 8007972:	2300      	movs	r3, #0
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 faf8 	bl	8007f6c <xQueueGenericSend>
 800797c:	4603      	mov	r3, r0
 800797e:	2b01      	cmp	r3, #1
 8007980:	d001      	beq.n	8007986 <osMessagePut+0x72>
      return osErrorOS;
 8007982:	23ff      	movs	r3, #255	; 0xff
 8007984:	e000      	b.n	8007988 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	e000ed04 	.word	0xe000ed04

08007994 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007994:	b590      	push	{r4, r7, lr}
 8007996:	b08b      	sub	sp, #44	; 0x2c
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10a      	bne.n	80079c4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80079ae:	2380      	movs	r3, #128	; 0x80
 80079b0:	617b      	str	r3, [r7, #20]
    return event;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	461c      	mov	r4, r3
 80079b6:	f107 0314 	add.w	r3, r7, #20
 80079ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80079c2:	e054      	b.n	8007a6e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80079c4:	2300      	movs	r3, #0
 80079c6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079d2:	d103      	bne.n	80079dc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80079d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079d8:	627b      	str	r3, [r7, #36]	; 0x24
 80079da:	e009      	b.n	80079f0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d006      	beq.n	80079f0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80079e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <osMessageGet+0x5c>
      ticks = 1;
 80079ec:	2301      	movs	r3, #1
 80079ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80079f0:	f7ff fd79 	bl	80074e6 <inHandlerMode>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d01c      	beq.n	8007a34 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80079fa:	f107 0220 	add.w	r2, r7, #32
 80079fe:	f107 0314 	add.w	r3, r7, #20
 8007a02:	3304      	adds	r3, #4
 8007a04:	4619      	mov	r1, r3
 8007a06:	68b8      	ldr	r0, [r7, #8]
 8007a08:	f000 fee6 	bl	80087d8 <xQueueReceiveFromISR>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d102      	bne.n	8007a18 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007a12:	2310      	movs	r3, #16
 8007a14:	617b      	str	r3, [r7, #20]
 8007a16:	e001      	b.n	8007a1c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d01d      	beq.n	8007a5e <osMessageGet+0xca>
 8007a22:	4b15      	ldr	r3, [pc, #84]	; (8007a78 <osMessageGet+0xe4>)
 8007a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a28:	601a      	str	r2, [r3, #0]
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	e014      	b.n	8007a5e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007a34:	f107 0314 	add.w	r3, r7, #20
 8007a38:	3304      	adds	r3, #4
 8007a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	68b8      	ldr	r0, [r7, #8]
 8007a40:	f000 fcd0 	bl	80083e4 <xQueueReceive>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d102      	bne.n	8007a50 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007a4a:	2310      	movs	r3, #16
 8007a4c:	617b      	str	r3, [r7, #20]
 8007a4e:	e006      	b.n	8007a5e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <osMessageGet+0xc6>
 8007a56:	2300      	movs	r3, #0
 8007a58:	e000      	b.n	8007a5c <osMessageGet+0xc8>
 8007a5a:	2340      	movs	r3, #64	; 0x40
 8007a5c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	461c      	mov	r4, r3
 8007a62:	f107 0314 	add.w	r3, r7, #20
 8007a66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	372c      	adds	r7, #44	; 0x2c
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd90      	pop	{r4, r7, pc}
 8007a76:	bf00      	nop
 8007a78:	e000ed04 	.word	0xe000ed04

08007a7c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007a84:	f7ff fd2f 	bl	80074e6 <inHandlerMode>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d004      	beq.n	8007a98 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 ff48 	bl	8008924 <uxQueueMessagesWaitingFromISR>
 8007a94:	4603      	mov	r3, r0
 8007a96:	e003      	b.n	8007aa0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 ff23 	bl	80088e4 <uxQueueMessagesWaiting>
 8007a9e:	4603      	mov	r3, r0
  }
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007ab0:	f7ff fd19 	bl	80074e6 <inHandlerMode>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <osMessageDelete+0x16>
    return osErrorISR;
 8007aba:	2382      	movs	r3, #130	; 0x82
 8007abc:	e003      	b.n	8007ac6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 ff50 	bl	8008964 <vQueueDelete>

  return osOK; 
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b083      	sub	sp, #12
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f103 0208 	add.w	r2, r3, #8
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ae6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f103 0208 	add.w	r2, r3, #8
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f103 0208 	add.w	r2, r3, #8
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b02:	bf00      	nop
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	689a      	ldr	r2, [r3, #8]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	1c5a      	adds	r2, r3, #1
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
}
 8007b64:	bf00      	nop
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b86:	d103      	bne.n	8007b90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	60fb      	str	r3, [r7, #12]
 8007b8e:	e00c      	b.n	8007baa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	3308      	adds	r3, #8
 8007b94:	60fb      	str	r3, [r7, #12]
 8007b96:	e002      	b.n	8007b9e <vListInsert+0x2e>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	60fb      	str	r3, [r7, #12]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d2f6      	bcs.n	8007b98 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	1c5a      	adds	r2, r3, #1
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	601a      	str	r2, [r3, #0]
}
 8007bd6:	bf00      	nop
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	6892      	ldr	r2, [r2, #8]
 8007bf8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	6852      	ldr	r2, [r2, #4]
 8007c02:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d103      	bne.n	8007c16 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689a      	ldr	r2, [r3, #8]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	1e5a      	subs	r2, r3, #1
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
	...

08007c38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10c      	bne.n	8007c66 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c50:	b672      	cpsid	i
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	b662      	cpsie	i
 8007c60:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007c62:	bf00      	nop
 8007c64:	e7fe      	b.n	8007c64 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007c66:	f002 f949 	bl	8009efc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c72:	68f9      	ldr	r1, [r7, #12]
 8007c74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c76:	fb01 f303 	mul.w	r3, r1, r3
 8007c7a:	441a      	add	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c96:	3b01      	subs	r3, #1
 8007c98:	68f9      	ldr	r1, [r7, #12]
 8007c9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ca0:	441a      	add	r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	22ff      	movs	r2, #255	; 0xff
 8007caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	22ff      	movs	r2, #255	; 0xff
 8007cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d114      	bne.n	8007ce6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d01a      	beq.n	8007cfa <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	3310      	adds	r3, #16
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f001 fc05 	bl	80094d8 <xTaskRemoveFromEventList>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d012      	beq.n	8007cfa <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007cd4:	4b0c      	ldr	r3, [pc, #48]	; (8007d08 <xQueueGenericReset+0xd0>)
 8007cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	e009      	b.n	8007cfa <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	3310      	adds	r3, #16
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7ff feef 	bl	8007ace <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3324      	adds	r3, #36	; 0x24
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7ff feea 	bl	8007ace <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007cfa:	f002 f933 	bl	8009f64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007cfe:	2301      	movs	r3, #1
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08e      	sub	sp, #56	; 0x38
 8007d10:	af02      	add	r7, sp, #8
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10c      	bne.n	8007d3a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d24:	b672      	cpsid	i
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	b662      	cpsie	i
 8007d34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d36:	bf00      	nop
 8007d38:	e7fe      	b.n	8007d38 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10c      	bne.n	8007d5a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	b672      	cpsid	i
 8007d46:	f383 8811 	msr	BASEPRI, r3
 8007d4a:	f3bf 8f6f 	isb	sy
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	b662      	cpsie	i
 8007d54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d56:	bf00      	nop
 8007d58:	e7fe      	b.n	8007d58 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d002      	beq.n	8007d66 <xQueueGenericCreateStatic+0x5a>
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <xQueueGenericCreateStatic+0x5e>
 8007d66:	2301      	movs	r3, #1
 8007d68:	e000      	b.n	8007d6c <xQueueGenericCreateStatic+0x60>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10c      	bne.n	8007d8a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d74:	b672      	cpsid	i
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	b662      	cpsie	i
 8007d84:	623b      	str	r3, [r7, #32]
}
 8007d86:	bf00      	nop
 8007d88:	e7fe      	b.n	8007d88 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d102      	bne.n	8007d96 <xQueueGenericCreateStatic+0x8a>
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <xQueueGenericCreateStatic+0x8e>
 8007d96:	2301      	movs	r3, #1
 8007d98:	e000      	b.n	8007d9c <xQueueGenericCreateStatic+0x90>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10c      	bne.n	8007dba <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	b672      	cpsid	i
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	b662      	cpsie	i
 8007db4:	61fb      	str	r3, [r7, #28]
}
 8007db6:	bf00      	nop
 8007db8:	e7fe      	b.n	8007db8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007dba:	2348      	movs	r3, #72	; 0x48
 8007dbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	2b48      	cmp	r3, #72	; 0x48
 8007dc2:	d00c      	beq.n	8007dde <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	b672      	cpsid	i
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	b662      	cpsie	i
 8007dd8:	61bb      	str	r3, [r7, #24]
}
 8007dda:	bf00      	nop
 8007ddc:	e7fe      	b.n	8007ddc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007dde:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00d      	beq.n	8007e06 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007df2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	68b9      	ldr	r1, [r7, #8]
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 f847 	bl	8007e94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3730      	adds	r7, #48	; 0x30
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b08a      	sub	sp, #40	; 0x28
 8007e14:	af02      	add	r7, sp, #8
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10c      	bne.n	8007e3e <xQueueGenericCreate+0x2e>
	__asm volatile
 8007e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e28:	b672      	cpsid	i
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	b662      	cpsie	i
 8007e38:	613b      	str	r3, [r7, #16]
}
 8007e3a:	bf00      	nop
 8007e3c:	e7fe      	b.n	8007e3c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d102      	bne.n	8007e4a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007e44:	2300      	movs	r3, #0
 8007e46:	61fb      	str	r3, [r7, #28]
 8007e48:	e004      	b.n	8007e54 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	fb02 f303 	mul.w	r3, r2, r3
 8007e52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	3348      	adds	r3, #72	; 0x48
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f002 f97b 	bl	800a154 <pvPortMalloc>
 8007e5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d011      	beq.n	8007e8a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	3348      	adds	r3, #72	; 0x48
 8007e6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e78:	79fa      	ldrb	r2, [r7, #7]
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	68b9      	ldr	r1, [r7, #8]
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 f805 	bl	8007e94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
	}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3720      	adds	r7, #32
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d103      	bne.n	8007eb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	e002      	b.n	8007eb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	69b8      	ldr	r0, [r7, #24]
 8007ec6:	f7ff feb7 	bl	8007c38 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007eca:	bf00      	nop
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b082      	sub	sp, #8
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00e      	beq.n	8007efe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f837 	bl	8007f6c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007efe:	bf00      	nop
 8007f00:	3708      	adds	r7, #8
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b086      	sub	sp, #24
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007f10:	2301      	movs	r3, #1
 8007f12:	617b      	str	r3, [r7, #20]
 8007f14:	2300      	movs	r3, #0
 8007f16:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007f18:	79fb      	ldrb	r3, [r7, #7]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	6939      	ldr	r1, [r7, #16]
 8007f1e:	6978      	ldr	r0, [r7, #20]
 8007f20:	f7ff ff76 	bl	8007e10 <xQueueGenericCreate>
 8007f24:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f7ff ffd3 	bl	8007ed2 <prvInitialiseMutex>

		return xNewQueue;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
	}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3718      	adds	r7, #24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b088      	sub	sp, #32
 8007f3a:	af02      	add	r7, sp, #8
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	6039      	str	r1, [r7, #0]
 8007f40:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007f42:	2301      	movs	r3, #1
 8007f44:	617b      	str	r3, [r7, #20]
 8007f46:	2300      	movs	r3, #0
 8007f48:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007f4a:	79fb      	ldrb	r3, [r7, #7]
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2200      	movs	r2, #0
 8007f52:	6939      	ldr	r1, [r7, #16]
 8007f54:	6978      	ldr	r0, [r7, #20]
 8007f56:	f7ff fed9 	bl	8007d0c <xQueueGenericCreateStatic>
 8007f5a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f7ff ffb8 	bl	8007ed2 <prvInitialiseMutex>

		return xNewQueue;
 8007f62:	68fb      	ldr	r3, [r7, #12]
	}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3718      	adds	r7, #24
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b08e      	sub	sp, #56	; 0x38
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10c      	bne.n	8007fa2 <xQueueGenericSend+0x36>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8c:	b672      	cpsid	i
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	b662      	cpsie	i
 8007f9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f9e:	bf00      	nop
 8007fa0:	e7fe      	b.n	8007fa0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d103      	bne.n	8007fb0 <xQueueGenericSend+0x44>
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <xQueueGenericSend+0x48>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e000      	b.n	8007fb6 <xQueueGenericSend+0x4a>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10c      	bne.n	8007fd4 <xQueueGenericSend+0x68>
	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	b672      	cpsid	i
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	b662      	cpsie	i
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fd0:	bf00      	nop
 8007fd2:	e7fe      	b.n	8007fd2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d103      	bne.n	8007fe2 <xQueueGenericSend+0x76>
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d101      	bne.n	8007fe6 <xQueueGenericSend+0x7a>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e000      	b.n	8007fe8 <xQueueGenericSend+0x7c>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10c      	bne.n	8008006 <xQueueGenericSend+0x9a>
	__asm volatile
 8007fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff0:	b672      	cpsid	i
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	b662      	cpsie	i
 8008000:	623b      	str	r3, [r7, #32]
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008006:	f001 fc2b 	bl	8009860 <xTaskGetSchedulerState>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d102      	bne.n	8008016 <xQueueGenericSend+0xaa>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <xQueueGenericSend+0xae>
 8008016:	2301      	movs	r3, #1
 8008018:	e000      	b.n	800801c <xQueueGenericSend+0xb0>
 800801a:	2300      	movs	r3, #0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10c      	bne.n	800803a <xQueueGenericSend+0xce>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	b672      	cpsid	i
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	b662      	cpsie	i
 8008034:	61fb      	str	r3, [r7, #28]
}
 8008036:	bf00      	nop
 8008038:	e7fe      	b.n	8008038 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800803a:	f001 ff5f 	bl	8009efc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008046:	429a      	cmp	r2, r3
 8008048:	d302      	bcc.n	8008050 <xQueueGenericSend+0xe4>
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2b02      	cmp	r3, #2
 800804e:	d129      	bne.n	80080a4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008050:	683a      	ldr	r2, [r7, #0]
 8008052:	68b9      	ldr	r1, [r7, #8]
 8008054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008056:	f000 fcc2 	bl	80089de <prvCopyDataToQueue>
 800805a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800805c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008060:	2b00      	cmp	r3, #0
 8008062:	d010      	beq.n	8008086 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008066:	3324      	adds	r3, #36	; 0x24
 8008068:	4618      	mov	r0, r3
 800806a:	f001 fa35 	bl	80094d8 <xTaskRemoveFromEventList>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d013      	beq.n	800809c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008074:	4b3f      	ldr	r3, [pc, #252]	; (8008174 <xQueueGenericSend+0x208>)
 8008076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800807a:	601a      	str	r2, [r3, #0]
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	e00a      	b.n	800809c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008088:	2b00      	cmp	r3, #0
 800808a:	d007      	beq.n	800809c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800808c:	4b39      	ldr	r3, [pc, #228]	; (8008174 <xQueueGenericSend+0x208>)
 800808e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800809c:	f001 ff62 	bl	8009f64 <vPortExitCritical>
				return pdPASS;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e063      	b.n	800816c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d103      	bne.n	80080b2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080aa:	f001 ff5b 	bl	8009f64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80080ae:	2300      	movs	r3, #0
 80080b0:	e05c      	b.n	800816c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d106      	bne.n	80080c6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080b8:	f107 0314 	add.w	r3, r7, #20
 80080bc:	4618      	mov	r0, r3
 80080be:	f001 fa6f 	bl	80095a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080c2:	2301      	movs	r3, #1
 80080c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080c6:	f001 ff4d 	bl	8009f64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080ca:	f000 fff9 	bl	80090c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080ce:	f001 ff15 	bl	8009efc <vPortEnterCritical>
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080d8:	b25b      	sxtb	r3, r3
 80080da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080de:	d103      	bne.n	80080e8 <xQueueGenericSend+0x17c>
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080ee:	b25b      	sxtb	r3, r3
 80080f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080f4:	d103      	bne.n	80080fe <xQueueGenericSend+0x192>
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080fe:	f001 ff31 	bl	8009f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008102:	1d3a      	adds	r2, r7, #4
 8008104:	f107 0314 	add.w	r3, r7, #20
 8008108:	4611      	mov	r1, r2
 800810a:	4618      	mov	r0, r3
 800810c:	f001 fa5e 	bl	80095cc <xTaskCheckForTimeOut>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d124      	bne.n	8008160 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008116:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008118:	f000 fd59 	bl	8008bce <prvIsQueueFull>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d018      	beq.n	8008154 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008124:	3310      	adds	r3, #16
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	4611      	mov	r1, r2
 800812a:	4618      	mov	r0, r3
 800812c:	f001 f9ae 	bl	800948c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008132:	f000 fce4 	bl	8008afe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008136:	f000 ffd1 	bl	80090dc <xTaskResumeAll>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	f47f af7c 	bne.w	800803a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008142:	4b0c      	ldr	r3, [pc, #48]	; (8008174 <xQueueGenericSend+0x208>)
 8008144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	e772      	b.n	800803a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008156:	f000 fcd2 	bl	8008afe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800815a:	f000 ffbf 	bl	80090dc <xTaskResumeAll>
 800815e:	e76c      	b.n	800803a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008162:	f000 fccc 	bl	8008afe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008166:	f000 ffb9 	bl	80090dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800816a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800816c:	4618      	mov	r0, r3
 800816e:	3738      	adds	r7, #56	; 0x38
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	e000ed04 	.word	0xe000ed04

08008178 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b08e      	sub	sp, #56	; 0x38
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800818a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10c      	bne.n	80081aa <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008194:	b672      	cpsid	i
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	b662      	cpsie	i
 80081a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081a6:	bf00      	nop
 80081a8:	e7fe      	b.n	80081a8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d103      	bne.n	80081b8 <xQueueGenericSendFromISR+0x40>
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <xQueueGenericSendFromISR+0x44>
 80081b8:	2301      	movs	r3, #1
 80081ba:	e000      	b.n	80081be <xQueueGenericSendFromISR+0x46>
 80081bc:	2300      	movs	r3, #0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10c      	bne.n	80081dc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	b672      	cpsid	i
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	b662      	cpsie	i
 80081d6:	623b      	str	r3, [r7, #32]
}
 80081d8:	bf00      	nop
 80081da:	e7fe      	b.n	80081da <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d103      	bne.n	80081ea <xQueueGenericSendFromISR+0x72>
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d101      	bne.n	80081ee <xQueueGenericSendFromISR+0x76>
 80081ea:	2301      	movs	r3, #1
 80081ec:	e000      	b.n	80081f0 <xQueueGenericSendFromISR+0x78>
 80081ee:	2300      	movs	r3, #0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10c      	bne.n	800820e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	b672      	cpsid	i
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	b662      	cpsie	i
 8008208:	61fb      	str	r3, [r7, #28]
}
 800820a:	bf00      	nop
 800820c:	e7fe      	b.n	800820c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800820e:	f001 ff5d 	bl	800a0cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008212:	f3ef 8211 	mrs	r2, BASEPRI
 8008216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821a:	b672      	cpsid	i
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	b662      	cpsie	i
 800822a:	61ba      	str	r2, [r7, #24]
 800822c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800822e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008230:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800823a:	429a      	cmp	r2, r3
 800823c:	d302      	bcc.n	8008244 <xQueueGenericSendFromISR+0xcc>
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b02      	cmp	r3, #2
 8008242:	d12c      	bne.n	800829e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008246:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800824a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	68b9      	ldr	r1, [r7, #8]
 8008252:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008254:	f000 fbc3 	bl	80089de <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008258:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800825c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008260:	d112      	bne.n	8008288 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008266:	2b00      	cmp	r3, #0
 8008268:	d016      	beq.n	8008298 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	3324      	adds	r3, #36	; 0x24
 800826e:	4618      	mov	r0, r3
 8008270:	f001 f932 	bl	80094d8 <xTaskRemoveFromEventList>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00e      	beq.n	8008298 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00b      	beq.n	8008298 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	e007      	b.n	8008298 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008288:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800828c:	3301      	adds	r3, #1
 800828e:	b2db      	uxtb	r3, r3
 8008290:	b25a      	sxtb	r2, r3
 8008292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008298:	2301      	movs	r3, #1
 800829a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800829c:	e001      	b.n	80082a2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800829e:	2300      	movs	r3, #0
 80082a0:	637b      	str	r3, [r7, #52]	; 0x34
 80082a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3738      	adds	r7, #56	; 0x38
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b08e      	sub	sp, #56	; 0x38
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80082c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10c      	bne.n	80082e6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80082cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d0:	b672      	cpsid	i
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	b662      	cpsie	i
 80082e0:	623b      	str	r3, [r7, #32]
}
 80082e2:	bf00      	nop
 80082e4:	e7fe      	b.n	80082e4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80082e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00c      	beq.n	8008308 <xQueueGiveFromISR+0x50>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	b672      	cpsid	i
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	b662      	cpsie	i
 8008302:	61fb      	str	r3, [r7, #28]
}
 8008304:	bf00      	nop
 8008306:	e7fe      	b.n	8008306 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d103      	bne.n	8008318 <xQueueGiveFromISR+0x60>
 8008310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d101      	bne.n	800831c <xQueueGiveFromISR+0x64>
 8008318:	2301      	movs	r3, #1
 800831a:	e000      	b.n	800831e <xQueueGiveFromISR+0x66>
 800831c:	2300      	movs	r3, #0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10c      	bne.n	800833c <xQueueGiveFromISR+0x84>
	__asm volatile
 8008322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008326:	b672      	cpsid	i
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	b662      	cpsie	i
 8008336:	61bb      	str	r3, [r7, #24]
}
 8008338:	bf00      	nop
 800833a:	e7fe      	b.n	800833a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800833c:	f001 fec6 	bl	800a0cc <vPortValidateInterruptPriority>
	__asm volatile
 8008340:	f3ef 8211 	mrs	r2, BASEPRI
 8008344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008348:	b672      	cpsid	i
 800834a:	f383 8811 	msr	BASEPRI, r3
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	b662      	cpsie	i
 8008358:	617a      	str	r2, [r7, #20]
 800835a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800835c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800835e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008364:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800836a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800836c:	429a      	cmp	r2, r3
 800836e:	d22b      	bcs.n	80083c8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008372:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008380:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008382:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800838a:	d112      	bne.n	80083b2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800838c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008390:	2b00      	cmp	r3, #0
 8008392:	d016      	beq.n	80083c2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008396:	3324      	adds	r3, #36	; 0x24
 8008398:	4618      	mov	r0, r3
 800839a:	f001 f89d 	bl	80094d8 <xTaskRemoveFromEventList>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00e      	beq.n	80083c2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00b      	beq.n	80083c2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2201      	movs	r2, #1
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	e007      	b.n	80083c2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80083b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083b6:	3301      	adds	r3, #1
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	b25a      	sxtb	r2, r3
 80083bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80083c2:	2301      	movs	r3, #1
 80083c4:	637b      	str	r3, [r7, #52]	; 0x34
 80083c6:	e001      	b.n	80083cc <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80083c8:	2300      	movs	r3, #0
 80083ca:	637b      	str	r3, [r7, #52]	; 0x34
 80083cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ce:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f383 8811 	msr	BASEPRI, r3
}
 80083d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3738      	adds	r7, #56	; 0x38
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
	...

080083e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b08c      	sub	sp, #48	; 0x30
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80083f0:	2300      	movs	r3, #0
 80083f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10c      	bne.n	8008418 <xQueueReceive+0x34>
	__asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	b672      	cpsid	i
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	b662      	cpsie	i
 8008412:	623b      	str	r3, [r7, #32]
}
 8008414:	bf00      	nop
 8008416:	e7fe      	b.n	8008416 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d103      	bne.n	8008426 <xQueueReceive+0x42>
 800841e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <xQueueReceive+0x46>
 8008426:	2301      	movs	r3, #1
 8008428:	e000      	b.n	800842c <xQueueReceive+0x48>
 800842a:	2300      	movs	r3, #0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10c      	bne.n	800844a <xQueueReceive+0x66>
	__asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008434:	b672      	cpsid	i
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	b662      	cpsie	i
 8008444:	61fb      	str	r3, [r7, #28]
}
 8008446:	bf00      	nop
 8008448:	e7fe      	b.n	8008448 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800844a:	f001 fa09 	bl	8009860 <xTaskGetSchedulerState>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d102      	bne.n	800845a <xQueueReceive+0x76>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <xQueueReceive+0x7a>
 800845a:	2301      	movs	r3, #1
 800845c:	e000      	b.n	8008460 <xQueueReceive+0x7c>
 800845e:	2300      	movs	r3, #0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10c      	bne.n	800847e <xQueueReceive+0x9a>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008468:	b672      	cpsid	i
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	b662      	cpsie	i
 8008478:	61bb      	str	r3, [r7, #24]
}
 800847a:	bf00      	nop
 800847c:	e7fe      	b.n	800847c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800847e:	f001 fd3d 	bl	8009efc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008486:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	2b00      	cmp	r3, #0
 800848c:	d01f      	beq.n	80084ce <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800848e:	68b9      	ldr	r1, [r7, #8]
 8008490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008492:	f000 fb0e 	bl	8008ab2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	1e5a      	subs	r2, r3, #1
 800849a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00f      	beq.n	80084c6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a8:	3310      	adds	r3, #16
 80084aa:	4618      	mov	r0, r3
 80084ac:	f001 f814 	bl	80094d8 <xTaskRemoveFromEventList>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d007      	beq.n	80084c6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084b6:	4b3d      	ldr	r3, [pc, #244]	; (80085ac <xQueueReceive+0x1c8>)
 80084b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80084c6:	f001 fd4d 	bl	8009f64 <vPortExitCritical>
				return pdPASS;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e069      	b.n	80085a2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d103      	bne.n	80084dc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084d4:	f001 fd46 	bl	8009f64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084d8:	2300      	movs	r3, #0
 80084da:	e062      	b.n	80085a2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d106      	bne.n	80084f0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084e2:	f107 0310 	add.w	r3, r7, #16
 80084e6:	4618      	mov	r0, r3
 80084e8:	f001 f85a 	bl	80095a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084ec:	2301      	movs	r3, #1
 80084ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084f0:	f001 fd38 	bl	8009f64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084f4:	f000 fde4 	bl	80090c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084f8:	f001 fd00 	bl	8009efc <vPortEnterCritical>
 80084fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008502:	b25b      	sxtb	r3, r3
 8008504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008508:	d103      	bne.n	8008512 <xQueueReceive+0x12e>
 800850a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008514:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008518:	b25b      	sxtb	r3, r3
 800851a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800851e:	d103      	bne.n	8008528 <xQueueReceive+0x144>
 8008520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008522:	2200      	movs	r2, #0
 8008524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008528:	f001 fd1c 	bl	8009f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800852c:	1d3a      	adds	r2, r7, #4
 800852e:	f107 0310 	add.w	r3, r7, #16
 8008532:	4611      	mov	r1, r2
 8008534:	4618      	mov	r0, r3
 8008536:	f001 f849 	bl	80095cc <xTaskCheckForTimeOut>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d123      	bne.n	8008588 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008542:	f000 fb2e 	bl	8008ba2 <prvIsQueueEmpty>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d017      	beq.n	800857c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800854c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854e:	3324      	adds	r3, #36	; 0x24
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	4611      	mov	r1, r2
 8008554:	4618      	mov	r0, r3
 8008556:	f000 ff99 	bl	800948c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800855a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800855c:	f000 facf 	bl	8008afe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008560:	f000 fdbc 	bl	80090dc <xTaskResumeAll>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d189      	bne.n	800847e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800856a:	4b10      	ldr	r3, [pc, #64]	; (80085ac <xQueueReceive+0x1c8>)
 800856c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008570:	601a      	str	r2, [r3, #0]
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	e780      	b.n	800847e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800857c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800857e:	f000 fabe 	bl	8008afe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008582:	f000 fdab 	bl	80090dc <xTaskResumeAll>
 8008586:	e77a      	b.n	800847e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800858a:	f000 fab8 	bl	8008afe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800858e:	f000 fda5 	bl	80090dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008594:	f000 fb05 	bl	8008ba2 <prvIsQueueEmpty>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	f43f af6f 	beq.w	800847e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3730      	adds	r7, #48	; 0x30
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	e000ed04 	.word	0xe000ed04

080085b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b08e      	sub	sp, #56	; 0x38
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80085ba:	2300      	movs	r3, #0
 80085bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80085c2:	2300      	movs	r3, #0
 80085c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10c      	bne.n	80085e6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	b672      	cpsid	i
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	b662      	cpsie	i
 80085e0:	623b      	str	r3, [r7, #32]
}
 80085e2:	bf00      	nop
 80085e4:	e7fe      	b.n	80085e4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80085e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00c      	beq.n	8008608 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	b672      	cpsid	i
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	b662      	cpsie	i
 8008602:	61fb      	str	r3, [r7, #28]
}
 8008604:	bf00      	nop
 8008606:	e7fe      	b.n	8008606 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008608:	f001 f92a 	bl	8009860 <xTaskGetSchedulerState>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d102      	bne.n	8008618 <xQueueSemaphoreTake+0x68>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d101      	bne.n	800861c <xQueueSemaphoreTake+0x6c>
 8008618:	2301      	movs	r3, #1
 800861a:	e000      	b.n	800861e <xQueueSemaphoreTake+0x6e>
 800861c:	2300      	movs	r3, #0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10c      	bne.n	800863c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8008622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008626:	b672      	cpsid	i
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	b662      	cpsie	i
 8008636:	61bb      	str	r3, [r7, #24]
}
 8008638:	bf00      	nop
 800863a:	e7fe      	b.n	800863a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800863c:	f001 fc5e 	bl	8009efc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008644:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008648:	2b00      	cmp	r3, #0
 800864a:	d024      	beq.n	8008696 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800864c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864e:	1e5a      	subs	r2, r3, #1
 8008650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008652:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d104      	bne.n	8008666 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800865c:	f001 fac6 	bl	8009bec <pvTaskIncrementMutexHeldCount>
 8008660:	4602      	mov	r2, r0
 8008662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008664:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00f      	beq.n	800868e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800866e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008670:	3310      	adds	r3, #16
 8008672:	4618      	mov	r0, r3
 8008674:	f000 ff30 	bl	80094d8 <xTaskRemoveFromEventList>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d007      	beq.n	800868e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800867e:	4b55      	ldr	r3, [pc, #340]	; (80087d4 <xQueueSemaphoreTake+0x224>)
 8008680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800868e:	f001 fc69 	bl	8009f64 <vPortExitCritical>
				return pdPASS;
 8008692:	2301      	movs	r3, #1
 8008694:	e099      	b.n	80087ca <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d113      	bne.n	80086c4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00c      	beq.n	80086bc <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a6:	b672      	cpsid	i
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	b662      	cpsie	i
 80086b6:	617b      	str	r3, [r7, #20]
}
 80086b8:	bf00      	nop
 80086ba:	e7fe      	b.n	80086ba <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80086bc:	f001 fc52 	bl	8009f64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80086c0:	2300      	movs	r3, #0
 80086c2:	e082      	b.n	80087ca <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d106      	bne.n	80086d8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086ca:	f107 030c 	add.w	r3, r7, #12
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 ff66 	bl	80095a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086d4:	2301      	movs	r3, #1
 80086d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086d8:	f001 fc44 	bl	8009f64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086dc:	f000 fcf0 	bl	80090c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086e0:	f001 fc0c 	bl	8009efc <vPortEnterCritical>
 80086e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086ea:	b25b      	sxtb	r3, r3
 80086ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086f0:	d103      	bne.n	80086fa <xQueueSemaphoreTake+0x14a>
 80086f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008700:	b25b      	sxtb	r3, r3
 8008702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008706:	d103      	bne.n	8008710 <xQueueSemaphoreTake+0x160>
 8008708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008710:	f001 fc28 	bl	8009f64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008714:	463a      	mov	r2, r7
 8008716:	f107 030c 	add.w	r3, r7, #12
 800871a:	4611      	mov	r1, r2
 800871c:	4618      	mov	r0, r3
 800871e:	f000 ff55 	bl	80095cc <xTaskCheckForTimeOut>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d132      	bne.n	800878e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008728:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800872a:	f000 fa3a 	bl	8008ba2 <prvIsQueueEmpty>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d026      	beq.n	8008782 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d109      	bne.n	8008750 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800873c:	f001 fbde 	bl	8009efc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	4618      	mov	r0, r3
 8008746:	f001 f8a9 	bl	800989c <xTaskPriorityInherit>
 800874a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800874c:	f001 fc0a 	bl	8009f64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008752:	3324      	adds	r3, #36	; 0x24
 8008754:	683a      	ldr	r2, [r7, #0]
 8008756:	4611      	mov	r1, r2
 8008758:	4618      	mov	r0, r3
 800875a:	f000 fe97 	bl	800948c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800875e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008760:	f000 f9cd 	bl	8008afe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008764:	f000 fcba 	bl	80090dc <xTaskResumeAll>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	f47f af66 	bne.w	800863c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8008770:	4b18      	ldr	r3, [pc, #96]	; (80087d4 <xQueueSemaphoreTake+0x224>)
 8008772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	e75c      	b.n	800863c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008782:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008784:	f000 f9bb 	bl	8008afe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008788:	f000 fca8 	bl	80090dc <xTaskResumeAll>
 800878c:	e756      	b.n	800863c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800878e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008790:	f000 f9b5 	bl	8008afe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008794:	f000 fca2 	bl	80090dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008798:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800879a:	f000 fa02 	bl	8008ba2 <prvIsQueueEmpty>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f43f af4b 	beq.w	800863c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00d      	beq.n	80087c8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80087ac:	f001 fba6 	bl	8009efc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80087b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087b2:	f000 f8fc 	bl	80089ae <prvGetDisinheritPriorityAfterTimeout>
 80087b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80087b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087be:	4618      	mov	r0, r3
 80087c0:	f001 f976 	bl	8009ab0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80087c4:	f001 fbce 	bl	8009f64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80087c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3738      	adds	r7, #56	; 0x38
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	e000ed04 	.word	0xe000ed04

080087d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b08e      	sub	sp, #56	; 0x38
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80087e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10c      	bne.n	8008808 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	b672      	cpsid	i
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	b662      	cpsie	i
 8008802:	623b      	str	r3, [r7, #32]
}
 8008804:	bf00      	nop
 8008806:	e7fe      	b.n	8008806 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d103      	bne.n	8008816 <xQueueReceiveFromISR+0x3e>
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	2b00      	cmp	r3, #0
 8008814:	d101      	bne.n	800881a <xQueueReceiveFromISR+0x42>
 8008816:	2301      	movs	r3, #1
 8008818:	e000      	b.n	800881c <xQueueReceiveFromISR+0x44>
 800881a:	2300      	movs	r3, #0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10c      	bne.n	800883a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008824:	b672      	cpsid	i
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	b662      	cpsie	i
 8008834:	61fb      	str	r3, [r7, #28]
}
 8008836:	bf00      	nop
 8008838:	e7fe      	b.n	8008838 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800883a:	f001 fc47 	bl	800a0cc <vPortValidateInterruptPriority>
	__asm volatile
 800883e:	f3ef 8211 	mrs	r2, BASEPRI
 8008842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008846:	b672      	cpsid	i
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	b662      	cpsie	i
 8008856:	61ba      	str	r2, [r7, #24]
 8008858:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800885a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800885c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800885e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008862:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008866:	2b00      	cmp	r3, #0
 8008868:	d02f      	beq.n	80088ca <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008874:	68b9      	ldr	r1, [r7, #8]
 8008876:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008878:	f000 f91b 	bl	8008ab2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800887c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887e:	1e5a      	subs	r2, r3, #1
 8008880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008882:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008884:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800888c:	d112      	bne.n	80088b4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d016      	beq.n	80088c4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	3310      	adds	r3, #16
 800889a:	4618      	mov	r0, r3
 800889c:	f000 fe1c 	bl	80094d8 <xTaskRemoveFromEventList>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00e      	beq.n	80088c4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00b      	beq.n	80088c4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	601a      	str	r2, [r3, #0]
 80088b2:	e007      	b.n	80088c4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80088b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088b8:	3301      	adds	r3, #1
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	b25a      	sxtb	r2, r3
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80088c4:	2301      	movs	r3, #1
 80088c6:	637b      	str	r3, [r7, #52]	; 0x34
 80088c8:	e001      	b.n	80088ce <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80088ca:	2300      	movs	r3, #0
 80088cc:	637b      	str	r3, [r7, #52]	; 0x34
 80088ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	f383 8811 	msr	BASEPRI, r3
}
 80088d8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3738      	adds	r7, #56	; 0x38
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10c      	bne.n	800890c <uxQueueMessagesWaiting+0x28>
	__asm volatile
 80088f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f6:	b672      	cpsid	i
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	b662      	cpsie	i
 8008906:	60bb      	str	r3, [r7, #8]
}
 8008908:	bf00      	nop
 800890a:	e7fe      	b.n	800890a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800890c:	f001 faf6 	bl	8009efc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008914:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008916:	f001 fb25 	bl	8009f64 <vPortExitCritical>

	return uxReturn;
 800891a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008924:	b480      	push	{r7}
 8008926:	b087      	sub	sp, #28
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10c      	bne.n	8008950 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8008936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893a:	b672      	cpsid	i
 800893c:	f383 8811 	msr	BASEPRI, r3
 8008940:	f3bf 8f6f 	isb	sy
 8008944:	f3bf 8f4f 	dsb	sy
 8008948:	b662      	cpsie	i
 800894a:	60fb      	str	r3, [r7, #12]
}
 800894c:	bf00      	nop
 800894e:	e7fe      	b.n	800894e <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008954:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8008956:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008958:	4618      	mov	r0, r3
 800895a:	371c      	adds	r7, #28
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10c      	bne.n	8008990 <vQueueDelete+0x2c>
	__asm volatile
 8008976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897a:	b672      	cpsid	i
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	b662      	cpsie	i
 800898a:	60bb      	str	r3, [r7, #8]
}
 800898c:	bf00      	nop
 800898e:	e7fe      	b.n	800898e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f000 f935 	bl	8008c00 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800899c:	2b00      	cmp	r3, #0
 800899e:	d102      	bne.n	80089a6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f001 fca1 	bl	800a2e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80089a6:	bf00      	nop
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80089ae:	b480      	push	{r7}
 80089b0:	b085      	sub	sp, #20
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d006      	beq.n	80089cc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f1c3 0307 	rsb	r3, r3, #7
 80089c8:	60fb      	str	r3, [r7, #12]
 80089ca:	e001      	b.n	80089d0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80089cc:	2300      	movs	r3, #0
 80089ce:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80089d0:	68fb      	ldr	r3, [r7, #12]
	}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b086      	sub	sp, #24
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089ea:	2300      	movs	r3, #0
 80089ec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10d      	bne.n	8008a18 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d14d      	bne.n	8008aa0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 ffc7 	bl	800999c <xTaskPriorityDisinherit>
 8008a0e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	609a      	str	r2, [r3, #8]
 8008a16:	e043      	b.n	8008aa0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d119      	bne.n	8008a52 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6858      	ldr	r0, [r3, #4]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a26:	461a      	mov	r2, r3
 8008a28:	68b9      	ldr	r1, [r7, #8]
 8008a2a:	f010 ffc3 	bl	80199b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	685a      	ldr	r2, [r3, #4]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a36:	441a      	add	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d32b      	bcc.n	8008aa0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	605a      	str	r2, [r3, #4]
 8008a50:	e026      	b.n	8008aa0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	68d8      	ldr	r0, [r3, #12]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	68b9      	ldr	r1, [r7, #8]
 8008a5e:	f010 ffa9 	bl	80199b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	68da      	ldr	r2, [r3, #12]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6a:	425b      	negs	r3, r3
 8008a6c:	441a      	add	r2, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	68da      	ldr	r2, [r3, #12]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d207      	bcs.n	8008a8e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	689a      	ldr	r2, [r3, #8]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a86:	425b      	negs	r3, r3
 8008a88:	441a      	add	r2, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d105      	bne.n	8008aa0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	1c5a      	adds	r2, r3, #1
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008aa8:	697b      	ldr	r3, [r7, #20]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3718      	adds	r7, #24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b082      	sub	sp, #8
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d018      	beq.n	8008af6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68da      	ldr	r2, [r3, #12]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008acc:	441a      	add	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68da      	ldr	r2, [r3, #12]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d303      	bcc.n	8008ae6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68d9      	ldr	r1, [r3, #12]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aee:	461a      	mov	r2, r3
 8008af0:	6838      	ldr	r0, [r7, #0]
 8008af2:	f010 ff5f 	bl	80199b4 <memcpy>
	}
}
 8008af6:	bf00      	nop
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b084      	sub	sp, #16
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b06:	f001 f9f9 	bl	8009efc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b10:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b12:	e011      	b.n	8008b38 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d012      	beq.n	8008b42 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	3324      	adds	r3, #36	; 0x24
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 fcd9 	bl	80094d8 <xTaskRemoveFromEventList>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b2c:	f000 fdb4 	bl	8009698 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	3b01      	subs	r3, #1
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	dce9      	bgt.n	8008b14 <prvUnlockQueue+0x16>
 8008b40:	e000      	b.n	8008b44 <prvUnlockQueue+0x46>
					break;
 8008b42:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	22ff      	movs	r2, #255	; 0xff
 8008b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b4c:	f001 fa0a 	bl	8009f64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b50:	f001 f9d4 	bl	8009efc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b5a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b5c:	e011      	b.n	8008b82 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d012      	beq.n	8008b8c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	3310      	adds	r3, #16
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 fcb4 	bl	80094d8 <xTaskRemoveFromEventList>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d001      	beq.n	8008b7a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b76:	f000 fd8f 	bl	8009698 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	dce9      	bgt.n	8008b5e <prvUnlockQueue+0x60>
 8008b8a:	e000      	b.n	8008b8e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b8c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	22ff      	movs	r2, #255	; 0xff
 8008b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b96:	f001 f9e5 	bl	8009f64 <vPortExitCritical>
}
 8008b9a:	bf00      	nop
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008baa:	f001 f9a7 	bl	8009efc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d102      	bne.n	8008bbc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	60fb      	str	r3, [r7, #12]
 8008bba:	e001      	b.n	8008bc0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bc0:	f001 f9d0 	bl	8009f64 <vPortExitCritical>

	return xReturn;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bd6:	f001 f991 	bl	8009efc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d102      	bne.n	8008bec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008be6:	2301      	movs	r3, #1
 8008be8:	60fb      	str	r3, [r7, #12]
 8008bea:	e001      	b.n	8008bf0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008bec:	2300      	movs	r3, #0
 8008bee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bf0:	f001 f9b8 	bl	8009f64 <vPortExitCritical>

	return xReturn;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
	...

08008c00 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c08:	2300      	movs	r3, #0
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	e016      	b.n	8008c3c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008c0e:	4a10      	ldr	r2, [pc, #64]	; (8008c50 <vQueueUnregisterQueue+0x50>)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	00db      	lsls	r3, r3, #3
 8008c14:	4413      	add	r3, r2
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d10b      	bne.n	8008c36 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008c1e:	4a0c      	ldr	r2, [pc, #48]	; (8008c50 <vQueueUnregisterQueue+0x50>)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2100      	movs	r1, #0
 8008c24:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008c28:	4a09      	ldr	r2, [pc, #36]	; (8008c50 <vQueueUnregisterQueue+0x50>)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	00db      	lsls	r3, r3, #3
 8008c2e:	4413      	add	r3, r2
 8008c30:	2200      	movs	r2, #0
 8008c32:	605a      	str	r2, [r3, #4]
				break;
 8008c34:	e006      	b.n	8008c44 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2b07      	cmp	r3, #7
 8008c40:	d9e5      	bls.n	8008c0e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008c42:	bf00      	nop
 8008c44:	bf00      	nop
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	20006408 	.word	0x20006408

08008c54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b08e      	sub	sp, #56	; 0x38
 8008c58:	af04      	add	r7, sp, #16
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
 8008c60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10c      	bne.n	8008c82 <xTaskCreateStatic+0x2e>
	__asm volatile
 8008c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6c:	b672      	cpsid	i
 8008c6e:	f383 8811 	msr	BASEPRI, r3
 8008c72:	f3bf 8f6f 	isb	sy
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	b662      	cpsie	i
 8008c7c:	623b      	str	r3, [r7, #32]
}
 8008c7e:	bf00      	nop
 8008c80:	e7fe      	b.n	8008c80 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10c      	bne.n	8008ca2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8008c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8c:	b672      	cpsid	i
 8008c8e:	f383 8811 	msr	BASEPRI, r3
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	b662      	cpsie	i
 8008c9c:	61fb      	str	r3, [r7, #28]
}
 8008c9e:	bf00      	nop
 8008ca0:	e7fe      	b.n	8008ca0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ca2:	2354      	movs	r3, #84	; 0x54
 8008ca4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	2b54      	cmp	r3, #84	; 0x54
 8008caa:	d00c      	beq.n	8008cc6 <xTaskCreateStatic+0x72>
	__asm volatile
 8008cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb0:	b672      	cpsid	i
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	b662      	cpsie	i
 8008cc0:	61bb      	str	r3, [r7, #24]
}
 8008cc2:	bf00      	nop
 8008cc4:	e7fe      	b.n	8008cc4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008cc6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d01e      	beq.n	8008d0c <xTaskCreateStatic+0xb8>
 8008cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d01b      	beq.n	8008d0c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cdc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	9303      	str	r3, [sp, #12]
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	9302      	str	r3, [sp, #8]
 8008cee:	f107 0314 	add.w	r3, r7, #20
 8008cf2:	9301      	str	r3, [sp, #4]
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	68b9      	ldr	r1, [r7, #8]
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f000 f850 	bl	8008da4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d06:	f000 f8d7 	bl	8008eb8 <prvAddNewTaskToReadyList>
 8008d0a:	e001      	b.n	8008d10 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d10:	697b      	ldr	r3, [r7, #20]
	}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3728      	adds	r7, #40	; 0x28
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b08c      	sub	sp, #48	; 0x30
 8008d1e:	af04      	add	r7, sp, #16
 8008d20:	60f8      	str	r0, [r7, #12]
 8008d22:	60b9      	str	r1, [r7, #8]
 8008d24:	603b      	str	r3, [r7, #0]
 8008d26:	4613      	mov	r3, r2
 8008d28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d2a:	88fb      	ldrh	r3, [r7, #6]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f001 fa10 	bl	800a154 <pvPortMalloc>
 8008d34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00e      	beq.n	8008d5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d3c:	2054      	movs	r0, #84	; 0x54
 8008d3e:	f001 fa09 	bl	800a154 <pvPortMalloc>
 8008d42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	631a      	str	r2, [r3, #48]	; 0x30
 8008d50:	e005      	b.n	8008d5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d52:	6978      	ldr	r0, [r7, #20]
 8008d54:	f001 fac8 	bl	800a2e8 <vPortFree>
 8008d58:	e001      	b.n	8008d5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d017      	beq.n	8008d94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d6c:	88fa      	ldrh	r2, [r7, #6]
 8008d6e:	2300      	movs	r3, #0
 8008d70:	9303      	str	r3, [sp, #12]
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	9302      	str	r3, [sp, #8]
 8008d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d78:	9301      	str	r3, [sp, #4]
 8008d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	68b9      	ldr	r1, [r7, #8]
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 f80e 	bl	8008da4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d88:	69f8      	ldr	r0, [r7, #28]
 8008d8a:	f000 f895 	bl	8008eb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	61bb      	str	r3, [r7, #24]
 8008d92:	e002      	b.n	8008d9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d9a:	69bb      	ldr	r3, [r7, #24]
	}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3720      	adds	r7, #32
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b088      	sub	sp, #32
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
 8008db0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008db6:	6879      	ldr	r1, [r7, #4]
 8008db8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008dbc:	440b      	add	r3, r1
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	f023 0307 	bic.w	r3, r3, #7
 8008dca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	f003 0307 	and.w	r3, r3, #7
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00c      	beq.n	8008df0 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8008dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dda:	b672      	cpsid	i
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	b662      	cpsie	i
 8008dea:	617b      	str	r3, [r7, #20]
}
 8008dec:	bf00      	nop
 8008dee:	e7fe      	b.n	8008dee <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d01f      	beq.n	8008e36 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008df6:	2300      	movs	r3, #0
 8008df8:	61fb      	str	r3, [r7, #28]
 8008dfa:	e012      	b.n	8008e22 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	4413      	add	r3, r2
 8008e02:	7819      	ldrb	r1, [r3, #0]
 8008e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	4413      	add	r3, r2
 8008e0a:	3334      	adds	r3, #52	; 0x34
 8008e0c:	460a      	mov	r2, r1
 8008e0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e10:	68ba      	ldr	r2, [r7, #8]
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	4413      	add	r3, r2
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d006      	beq.n	8008e2a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	61fb      	str	r3, [r7, #28]
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	2b0f      	cmp	r3, #15
 8008e26:	d9e9      	bls.n	8008dfc <prvInitialiseNewTask+0x58>
 8008e28:	e000      	b.n	8008e2c <prvInitialiseNewTask+0x88>
			{
				break;
 8008e2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e34:	e003      	b.n	8008e3e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e40:	2b06      	cmp	r3, #6
 8008e42:	d901      	bls.n	8008e48 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e44:	2306      	movs	r3, #6
 8008e46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e52:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e56:	2200      	movs	r2, #0
 8008e58:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fe fe55 	bl	8007b0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e66:	3318      	adds	r3, #24
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fe fe50 	bl	8007b0e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e76:	f1c3 0207 	rsb	r2, r3, #7
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e86:	2200      	movs	r2, #0
 8008e88:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	68f9      	ldr	r1, [r7, #12]
 8008e96:	69b8      	ldr	r0, [r7, #24]
 8008e98:	f000 ff22 	bl	8009ce0 <pxPortInitialiseStack>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eae:	bf00      	nop
 8008eb0:	3720      	adds	r7, #32
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
	...

08008eb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ec0:	f001 f81c 	bl	8009efc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ec4:	4b2a      	ldr	r3, [pc, #168]	; (8008f70 <prvAddNewTaskToReadyList+0xb8>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	4a29      	ldr	r2, [pc, #164]	; (8008f70 <prvAddNewTaskToReadyList+0xb8>)
 8008ecc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ece:	4b29      	ldr	r3, [pc, #164]	; (8008f74 <prvAddNewTaskToReadyList+0xbc>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d109      	bne.n	8008eea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ed6:	4a27      	ldr	r2, [pc, #156]	; (8008f74 <prvAddNewTaskToReadyList+0xbc>)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008edc:	4b24      	ldr	r3, [pc, #144]	; (8008f70 <prvAddNewTaskToReadyList+0xb8>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d110      	bne.n	8008f06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ee4:	f000 fbfc 	bl	80096e0 <prvInitialiseTaskLists>
 8008ee8:	e00d      	b.n	8008f06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008eea:	4b23      	ldr	r3, [pc, #140]	; (8008f78 <prvAddNewTaskToReadyList+0xc0>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d109      	bne.n	8008f06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ef2:	4b20      	ldr	r3, [pc, #128]	; (8008f74 <prvAddNewTaskToReadyList+0xbc>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d802      	bhi.n	8008f06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f00:	4a1c      	ldr	r2, [pc, #112]	; (8008f74 <prvAddNewTaskToReadyList+0xbc>)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f06:	4b1d      	ldr	r3, [pc, #116]	; (8008f7c <prvAddNewTaskToReadyList+0xc4>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	4a1b      	ldr	r2, [pc, #108]	; (8008f7c <prvAddNewTaskToReadyList+0xc4>)
 8008f0e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f14:	2201      	movs	r2, #1
 8008f16:	409a      	lsls	r2, r3
 8008f18:	4b19      	ldr	r3, [pc, #100]	; (8008f80 <prvAddNewTaskToReadyList+0xc8>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	4a18      	ldr	r2, [pc, #96]	; (8008f80 <prvAddNewTaskToReadyList+0xc8>)
 8008f20:	6013      	str	r3, [r2, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4a15      	ldr	r2, [pc, #84]	; (8008f84 <prvAddNewTaskToReadyList+0xcc>)
 8008f30:	441a      	add	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	3304      	adds	r3, #4
 8008f36:	4619      	mov	r1, r3
 8008f38:	4610      	mov	r0, r2
 8008f3a:	f7fe fdf5 	bl	8007b28 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f3e:	f001 f811 	bl	8009f64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f42:	4b0d      	ldr	r3, [pc, #52]	; (8008f78 <prvAddNewTaskToReadyList+0xc0>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00e      	beq.n	8008f68 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f4a:	4b0a      	ldr	r3, [pc, #40]	; (8008f74 <prvAddNewTaskToReadyList+0xbc>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d207      	bcs.n	8008f68 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f58:	4b0b      	ldr	r3, [pc, #44]	; (8008f88 <prvAddNewTaskToReadyList+0xd0>)
 8008f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	20006548 	.word	0x20006548
 8008f74:	20006448 	.word	0x20006448
 8008f78:	20006554 	.word	0x20006554
 8008f7c:	20006564 	.word	0x20006564
 8008f80:	20006550 	.word	0x20006550
 8008f84:	2000644c 	.word	0x2000644c
 8008f88:	e000ed04 	.word	0xe000ed04

08008f8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f94:	2300      	movs	r3, #0
 8008f96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d019      	beq.n	8008fd2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f9e:	4b14      	ldr	r3, [pc, #80]	; (8008ff0 <vTaskDelay+0x64>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00c      	beq.n	8008fc0 <vTaskDelay+0x34>
	__asm volatile
 8008fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008faa:	b672      	cpsid	i
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	b662      	cpsie	i
 8008fba:	60bb      	str	r3, [r7, #8]
}
 8008fbc:	bf00      	nop
 8008fbe:	e7fe      	b.n	8008fbe <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008fc0:	f000 f87e 	bl	80090c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fe24 	bl	8009c14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008fcc:	f000 f886 	bl	80090dc <xTaskResumeAll>
 8008fd0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d107      	bne.n	8008fe8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008fd8:	4b06      	ldr	r3, [pc, #24]	; (8008ff4 <vTaskDelay+0x68>)
 8008fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fde:	601a      	str	r2, [r3, #0]
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008fe8:	bf00      	nop
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	20006570 	.word	0x20006570
 8008ff4:	e000ed04 	.word	0xe000ed04

08008ff8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b08a      	sub	sp, #40	; 0x28
 8008ffc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ffe:	2300      	movs	r3, #0
 8009000:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009002:	2300      	movs	r3, #0
 8009004:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009006:	463a      	mov	r2, r7
 8009008:	1d39      	adds	r1, r7, #4
 800900a:	f107 0308 	add.w	r3, r7, #8
 800900e:	4618      	mov	r0, r3
 8009010:	f7f7 fb00 	bl	8000614 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009014:	6839      	ldr	r1, [r7, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	9202      	str	r2, [sp, #8]
 800901c:	9301      	str	r3, [sp, #4]
 800901e:	2300      	movs	r3, #0
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	2300      	movs	r3, #0
 8009024:	460a      	mov	r2, r1
 8009026:	4920      	ldr	r1, [pc, #128]	; (80090a8 <vTaskStartScheduler+0xb0>)
 8009028:	4820      	ldr	r0, [pc, #128]	; (80090ac <vTaskStartScheduler+0xb4>)
 800902a:	f7ff fe13 	bl	8008c54 <xTaskCreateStatic>
 800902e:	4603      	mov	r3, r0
 8009030:	4a1f      	ldr	r2, [pc, #124]	; (80090b0 <vTaskStartScheduler+0xb8>)
 8009032:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009034:	4b1e      	ldr	r3, [pc, #120]	; (80090b0 <vTaskStartScheduler+0xb8>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d002      	beq.n	8009042 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800903c:	2301      	movs	r3, #1
 800903e:	617b      	str	r3, [r7, #20]
 8009040:	e001      	b.n	8009046 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009042:	2300      	movs	r3, #0
 8009044:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d118      	bne.n	800907e <vTaskStartScheduler+0x86>
	__asm volatile
 800904c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009050:	b672      	cpsid	i
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	b662      	cpsie	i
 8009060:	613b      	str	r3, [r7, #16]
}
 8009062:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009064:	4b13      	ldr	r3, [pc, #76]	; (80090b4 <vTaskStartScheduler+0xbc>)
 8009066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800906a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800906c:	4b12      	ldr	r3, [pc, #72]	; (80090b8 <vTaskStartScheduler+0xc0>)
 800906e:	2201      	movs	r2, #1
 8009070:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009072:	4b12      	ldr	r3, [pc, #72]	; (80090bc <vTaskStartScheduler+0xc4>)
 8009074:	2200      	movs	r2, #0
 8009076:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009078:	f000 fec2 	bl	8009e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800907c:	e010      	b.n	80090a0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009084:	d10c      	bne.n	80090a0 <vTaskStartScheduler+0xa8>
	__asm volatile
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	b672      	cpsid	i
 800908c:	f383 8811 	msr	BASEPRI, r3
 8009090:	f3bf 8f6f 	isb	sy
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	b662      	cpsie	i
 800909a:	60fb      	str	r3, [r7, #12]
}
 800909c:	bf00      	nop
 800909e:	e7fe      	b.n	800909e <vTaskStartScheduler+0xa6>
}
 80090a0:	bf00      	nop
 80090a2:	3718      	adds	r7, #24
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	0801ade4 	.word	0x0801ade4
 80090ac:	080096b1 	.word	0x080096b1
 80090b0:	2000656c 	.word	0x2000656c
 80090b4:	20006568 	.word	0x20006568
 80090b8:	20006554 	.word	0x20006554
 80090bc:	2000654c 	.word	0x2000654c

080090c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090c0:	b480      	push	{r7}
 80090c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80090c4:	4b04      	ldr	r3, [pc, #16]	; (80090d8 <vTaskSuspendAll+0x18>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3301      	adds	r3, #1
 80090ca:	4a03      	ldr	r2, [pc, #12]	; (80090d8 <vTaskSuspendAll+0x18>)
 80090cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80090ce:	bf00      	nop
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	20006570 	.word	0x20006570

080090dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80090e2:	2300      	movs	r3, #0
 80090e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80090e6:	2300      	movs	r3, #0
 80090e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80090ea:	4b42      	ldr	r3, [pc, #264]	; (80091f4 <xTaskResumeAll+0x118>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10c      	bne.n	800910c <xTaskResumeAll+0x30>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	b672      	cpsid	i
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	b662      	cpsie	i
 8009106:	603b      	str	r3, [r7, #0]
}
 8009108:	bf00      	nop
 800910a:	e7fe      	b.n	800910a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800910c:	f000 fef6 	bl	8009efc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009110:	4b38      	ldr	r3, [pc, #224]	; (80091f4 <xTaskResumeAll+0x118>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	3b01      	subs	r3, #1
 8009116:	4a37      	ldr	r2, [pc, #220]	; (80091f4 <xTaskResumeAll+0x118>)
 8009118:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800911a:	4b36      	ldr	r3, [pc, #216]	; (80091f4 <xTaskResumeAll+0x118>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d161      	bne.n	80091e6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009122:	4b35      	ldr	r3, [pc, #212]	; (80091f8 <xTaskResumeAll+0x11c>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d05d      	beq.n	80091e6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800912a:	e02e      	b.n	800918a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800912c:	4b33      	ldr	r3, [pc, #204]	; (80091fc <xTaskResumeAll+0x120>)
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	3318      	adds	r3, #24
 8009138:	4618      	mov	r0, r3
 800913a:	f7fe fd52 	bl	8007be2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	3304      	adds	r3, #4
 8009142:	4618      	mov	r0, r3
 8009144:	f7fe fd4d 	bl	8007be2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914c:	2201      	movs	r2, #1
 800914e:	409a      	lsls	r2, r3
 8009150:	4b2b      	ldr	r3, [pc, #172]	; (8009200 <xTaskResumeAll+0x124>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4313      	orrs	r3, r2
 8009156:	4a2a      	ldr	r2, [pc, #168]	; (8009200 <xTaskResumeAll+0x124>)
 8009158:	6013      	str	r3, [r2, #0]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800915e:	4613      	mov	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4413      	add	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4a27      	ldr	r2, [pc, #156]	; (8009204 <xTaskResumeAll+0x128>)
 8009168:	441a      	add	r2, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	3304      	adds	r3, #4
 800916e:	4619      	mov	r1, r3
 8009170:	4610      	mov	r0, r2
 8009172:	f7fe fcd9 	bl	8007b28 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800917a:	4b23      	ldr	r3, [pc, #140]	; (8009208 <xTaskResumeAll+0x12c>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009180:	429a      	cmp	r2, r3
 8009182:	d302      	bcc.n	800918a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009184:	4b21      	ldr	r3, [pc, #132]	; (800920c <xTaskResumeAll+0x130>)
 8009186:	2201      	movs	r2, #1
 8009188:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800918a:	4b1c      	ldr	r3, [pc, #112]	; (80091fc <xTaskResumeAll+0x120>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1cc      	bne.n	800912c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009198:	f000 fb42 	bl	8009820 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800919c:	4b1c      	ldr	r3, [pc, #112]	; (8009210 <xTaskResumeAll+0x134>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d010      	beq.n	80091ca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80091a8:	f000 f858 	bl	800925c <xTaskIncrementTick>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d002      	beq.n	80091b8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80091b2:	4b16      	ldr	r3, [pc, #88]	; (800920c <xTaskResumeAll+0x130>)
 80091b4:	2201      	movs	r2, #1
 80091b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	3b01      	subs	r3, #1
 80091bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1f1      	bne.n	80091a8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80091c4:	4b12      	ldr	r3, [pc, #72]	; (8009210 <xTaskResumeAll+0x134>)
 80091c6:	2200      	movs	r2, #0
 80091c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091ca:	4b10      	ldr	r3, [pc, #64]	; (800920c <xTaskResumeAll+0x130>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d009      	beq.n	80091e6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80091d2:	2301      	movs	r3, #1
 80091d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80091d6:	4b0f      	ldr	r3, [pc, #60]	; (8009214 <xTaskResumeAll+0x138>)
 80091d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091dc:	601a      	str	r2, [r3, #0]
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091e6:	f000 febd 	bl	8009f64 <vPortExitCritical>

	return xAlreadyYielded;
 80091ea:	68bb      	ldr	r3, [r7, #8]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	20006570 	.word	0x20006570
 80091f8:	20006548 	.word	0x20006548
 80091fc:	20006508 	.word	0x20006508
 8009200:	20006550 	.word	0x20006550
 8009204:	2000644c 	.word	0x2000644c
 8009208:	20006448 	.word	0x20006448
 800920c:	2000655c 	.word	0x2000655c
 8009210:	20006558 	.word	0x20006558
 8009214:	e000ed04 	.word	0xe000ed04

08009218 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800921e:	4b05      	ldr	r3, [pc, #20]	; (8009234 <xTaskGetTickCount+0x1c>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009224:	687b      	ldr	r3, [r7, #4]
}
 8009226:	4618      	mov	r0, r3
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	2000654c 	.word	0x2000654c

08009238 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800923e:	f000 ff45 	bl	800a0cc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009242:	2300      	movs	r3, #0
 8009244:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009246:	4b04      	ldr	r3, [pc, #16]	; (8009258 <xTaskGetTickCountFromISR+0x20>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800924c:	683b      	ldr	r3, [r7, #0]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	2000654c 	.word	0x2000654c

0800925c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009262:	2300      	movs	r3, #0
 8009264:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009266:	4b4f      	ldr	r3, [pc, #316]	; (80093a4 <xTaskIncrementTick+0x148>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	f040 808a 	bne.w	8009384 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009270:	4b4d      	ldr	r3, [pc, #308]	; (80093a8 <xTaskIncrementTick+0x14c>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	3301      	adds	r3, #1
 8009276:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009278:	4a4b      	ldr	r2, [pc, #300]	; (80093a8 <xTaskIncrementTick+0x14c>)
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d122      	bne.n	80092ca <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009284:	4b49      	ldr	r3, [pc, #292]	; (80093ac <xTaskIncrementTick+0x150>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00c      	beq.n	80092a8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800928e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009292:	b672      	cpsid	i
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	b662      	cpsie	i
 80092a2:	603b      	str	r3, [r7, #0]
}
 80092a4:	bf00      	nop
 80092a6:	e7fe      	b.n	80092a6 <xTaskIncrementTick+0x4a>
 80092a8:	4b40      	ldr	r3, [pc, #256]	; (80093ac <xTaskIncrementTick+0x150>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	60fb      	str	r3, [r7, #12]
 80092ae:	4b40      	ldr	r3, [pc, #256]	; (80093b0 <xTaskIncrementTick+0x154>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a3e      	ldr	r2, [pc, #248]	; (80093ac <xTaskIncrementTick+0x150>)
 80092b4:	6013      	str	r3, [r2, #0]
 80092b6:	4a3e      	ldr	r2, [pc, #248]	; (80093b0 <xTaskIncrementTick+0x154>)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6013      	str	r3, [r2, #0]
 80092bc:	4b3d      	ldr	r3, [pc, #244]	; (80093b4 <xTaskIncrementTick+0x158>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3301      	adds	r3, #1
 80092c2:	4a3c      	ldr	r2, [pc, #240]	; (80093b4 <xTaskIncrementTick+0x158>)
 80092c4:	6013      	str	r3, [r2, #0]
 80092c6:	f000 faab 	bl	8009820 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092ca:	4b3b      	ldr	r3, [pc, #236]	; (80093b8 <xTaskIncrementTick+0x15c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d348      	bcc.n	8009366 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092d4:	4b35      	ldr	r3, [pc, #212]	; (80093ac <xTaskIncrementTick+0x150>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d104      	bne.n	80092e8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092de:	4b36      	ldr	r3, [pc, #216]	; (80093b8 <xTaskIncrementTick+0x15c>)
 80092e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092e4:	601a      	str	r2, [r3, #0]
					break;
 80092e6:	e03e      	b.n	8009366 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092e8:	4b30      	ldr	r3, [pc, #192]	; (80093ac <xTaskIncrementTick+0x150>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80092f8:	693a      	ldr	r2, [r7, #16]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d203      	bcs.n	8009308 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009300:	4a2d      	ldr	r2, [pc, #180]	; (80093b8 <xTaskIncrementTick+0x15c>)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009306:	e02e      	b.n	8009366 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	3304      	adds	r3, #4
 800930c:	4618      	mov	r0, r3
 800930e:	f7fe fc68 	bl	8007be2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009316:	2b00      	cmp	r3, #0
 8009318:	d004      	beq.n	8009324 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	3318      	adds	r3, #24
 800931e:	4618      	mov	r0, r3
 8009320:	f7fe fc5f 	bl	8007be2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009328:	2201      	movs	r2, #1
 800932a:	409a      	lsls	r2, r3
 800932c:	4b23      	ldr	r3, [pc, #140]	; (80093bc <xTaskIncrementTick+0x160>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4313      	orrs	r3, r2
 8009332:	4a22      	ldr	r2, [pc, #136]	; (80093bc <xTaskIncrementTick+0x160>)
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933a:	4613      	mov	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4413      	add	r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	4a1f      	ldr	r2, [pc, #124]	; (80093c0 <xTaskIncrementTick+0x164>)
 8009344:	441a      	add	r2, r3
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	3304      	adds	r3, #4
 800934a:	4619      	mov	r1, r3
 800934c:	4610      	mov	r0, r2
 800934e:	f7fe fbeb 	bl	8007b28 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009356:	4b1b      	ldr	r3, [pc, #108]	; (80093c4 <xTaskIncrementTick+0x168>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935c:	429a      	cmp	r2, r3
 800935e:	d3b9      	bcc.n	80092d4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009360:	2301      	movs	r3, #1
 8009362:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009364:	e7b6      	b.n	80092d4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009366:	4b17      	ldr	r3, [pc, #92]	; (80093c4 <xTaskIncrementTick+0x168>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800936c:	4914      	ldr	r1, [pc, #80]	; (80093c0 <xTaskIncrementTick+0x164>)
 800936e:	4613      	mov	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	440b      	add	r3, r1
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b01      	cmp	r3, #1
 800937c:	d907      	bls.n	800938e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800937e:	2301      	movs	r3, #1
 8009380:	617b      	str	r3, [r7, #20]
 8009382:	e004      	b.n	800938e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009384:	4b10      	ldr	r3, [pc, #64]	; (80093c8 <xTaskIncrementTick+0x16c>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3301      	adds	r3, #1
 800938a:	4a0f      	ldr	r2, [pc, #60]	; (80093c8 <xTaskIncrementTick+0x16c>)
 800938c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800938e:	4b0f      	ldr	r3, [pc, #60]	; (80093cc <xTaskIncrementTick+0x170>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8009396:	2301      	movs	r3, #1
 8009398:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800939a:	697b      	ldr	r3, [r7, #20]
}
 800939c:	4618      	mov	r0, r3
 800939e:	3718      	adds	r7, #24
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	20006570 	.word	0x20006570
 80093a8:	2000654c 	.word	0x2000654c
 80093ac:	20006500 	.word	0x20006500
 80093b0:	20006504 	.word	0x20006504
 80093b4:	20006560 	.word	0x20006560
 80093b8:	20006568 	.word	0x20006568
 80093bc:	20006550 	.word	0x20006550
 80093c0:	2000644c 	.word	0x2000644c
 80093c4:	20006448 	.word	0x20006448
 80093c8:	20006558 	.word	0x20006558
 80093cc:	2000655c 	.word	0x2000655c

080093d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80093d0:	b480      	push	{r7}
 80093d2:	b087      	sub	sp, #28
 80093d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093d6:	4b28      	ldr	r3, [pc, #160]	; (8009478 <vTaskSwitchContext+0xa8>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d003      	beq.n	80093e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80093de:	4b27      	ldr	r3, [pc, #156]	; (800947c <vTaskSwitchContext+0xac>)
 80093e0:	2201      	movs	r2, #1
 80093e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80093e4:	e041      	b.n	800946a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80093e6:	4b25      	ldr	r3, [pc, #148]	; (800947c <vTaskSwitchContext+0xac>)
 80093e8:	2200      	movs	r2, #0
 80093ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ec:	4b24      	ldr	r3, [pc, #144]	; (8009480 <vTaskSwitchContext+0xb0>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	fab3 f383 	clz	r3, r3
 80093f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80093fa:	7afb      	ldrb	r3, [r7, #11]
 80093fc:	f1c3 031f 	rsb	r3, r3, #31
 8009400:	617b      	str	r3, [r7, #20]
 8009402:	4920      	ldr	r1, [pc, #128]	; (8009484 <vTaskSwitchContext+0xb4>)
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	4613      	mov	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4413      	add	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	440b      	add	r3, r1
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10c      	bne.n	8009430 <vTaskSwitchContext+0x60>
	__asm volatile
 8009416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941a:	b672      	cpsid	i
 800941c:	f383 8811 	msr	BASEPRI, r3
 8009420:	f3bf 8f6f 	isb	sy
 8009424:	f3bf 8f4f 	dsb	sy
 8009428:	b662      	cpsie	i
 800942a:	607b      	str	r3, [r7, #4]
}
 800942c:	bf00      	nop
 800942e:	e7fe      	b.n	800942e <vTaskSwitchContext+0x5e>
 8009430:	697a      	ldr	r2, [r7, #20]
 8009432:	4613      	mov	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4a12      	ldr	r2, [pc, #72]	; (8009484 <vTaskSwitchContext+0xb4>)
 800943c:	4413      	add	r3, r2
 800943e:	613b      	str	r3, [r7, #16]
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	685a      	ldr	r2, [r3, #4]
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	605a      	str	r2, [r3, #4]
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	685a      	ldr	r2, [r3, #4]
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	3308      	adds	r3, #8
 8009452:	429a      	cmp	r2, r3
 8009454:	d104      	bne.n	8009460 <vTaskSwitchContext+0x90>
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	605a      	str	r2, [r3, #4]
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	4a08      	ldr	r2, [pc, #32]	; (8009488 <vTaskSwitchContext+0xb8>)
 8009468:	6013      	str	r3, [r2, #0]
}
 800946a:	bf00      	nop
 800946c:	371c      	adds	r7, #28
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	20006570 	.word	0x20006570
 800947c:	2000655c 	.word	0x2000655c
 8009480:	20006550 	.word	0x20006550
 8009484:	2000644c 	.word	0x2000644c
 8009488:	20006448 	.word	0x20006448

0800948c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10c      	bne.n	80094b6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800949c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a0:	b672      	cpsid	i
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	b662      	cpsie	i
 80094b0:	60fb      	str	r3, [r7, #12]
}
 80094b2:	bf00      	nop
 80094b4:	e7fe      	b.n	80094b4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094b6:	4b07      	ldr	r3, [pc, #28]	; (80094d4 <vTaskPlaceOnEventList+0x48>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3318      	adds	r3, #24
 80094bc:	4619      	mov	r1, r3
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7fe fb56 	bl	8007b70 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094c4:	2101      	movs	r1, #1
 80094c6:	6838      	ldr	r0, [r7, #0]
 80094c8:	f000 fba4 	bl	8009c14 <prvAddCurrentTaskToDelayedList>
}
 80094cc:	bf00      	nop
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	20006448 	.word	0x20006448

080094d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10c      	bne.n	8009508 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	b672      	cpsid	i
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	b662      	cpsie	i
 8009502:	60fb      	str	r3, [r7, #12]
}
 8009504:	bf00      	nop
 8009506:	e7fe      	b.n	8009506 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	3318      	adds	r3, #24
 800950c:	4618      	mov	r0, r3
 800950e:	f7fe fb68 	bl	8007be2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009512:	4b1d      	ldr	r3, [pc, #116]	; (8009588 <xTaskRemoveFromEventList+0xb0>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d11c      	bne.n	8009554 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	3304      	adds	r3, #4
 800951e:	4618      	mov	r0, r3
 8009520:	f7fe fb5f 	bl	8007be2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009528:	2201      	movs	r2, #1
 800952a:	409a      	lsls	r2, r3
 800952c:	4b17      	ldr	r3, [pc, #92]	; (800958c <xTaskRemoveFromEventList+0xb4>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4313      	orrs	r3, r2
 8009532:	4a16      	ldr	r2, [pc, #88]	; (800958c <xTaskRemoveFromEventList+0xb4>)
 8009534:	6013      	str	r3, [r2, #0]
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800953a:	4613      	mov	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4a13      	ldr	r2, [pc, #76]	; (8009590 <xTaskRemoveFromEventList+0xb8>)
 8009544:	441a      	add	r2, r3
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	3304      	adds	r3, #4
 800954a:	4619      	mov	r1, r3
 800954c:	4610      	mov	r0, r2
 800954e:	f7fe faeb 	bl	8007b28 <vListInsertEnd>
 8009552:	e005      	b.n	8009560 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	3318      	adds	r3, #24
 8009558:	4619      	mov	r1, r3
 800955a:	480e      	ldr	r0, [pc, #56]	; (8009594 <xTaskRemoveFromEventList+0xbc>)
 800955c:	f7fe fae4 	bl	8007b28 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009564:	4b0c      	ldr	r3, [pc, #48]	; (8009598 <xTaskRemoveFromEventList+0xc0>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956a:	429a      	cmp	r2, r3
 800956c:	d905      	bls.n	800957a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800956e:	2301      	movs	r3, #1
 8009570:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009572:	4b0a      	ldr	r3, [pc, #40]	; (800959c <xTaskRemoveFromEventList+0xc4>)
 8009574:	2201      	movs	r2, #1
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	e001      	b.n	800957e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800957a:	2300      	movs	r3, #0
 800957c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800957e:	697b      	ldr	r3, [r7, #20]
}
 8009580:	4618      	mov	r0, r3
 8009582:	3718      	adds	r7, #24
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	20006570 	.word	0x20006570
 800958c:	20006550 	.word	0x20006550
 8009590:	2000644c 	.word	0x2000644c
 8009594:	20006508 	.word	0x20006508
 8009598:	20006448 	.word	0x20006448
 800959c:	2000655c 	.word	0x2000655c

080095a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80095a8:	4b06      	ldr	r3, [pc, #24]	; (80095c4 <vTaskInternalSetTimeOutState+0x24>)
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80095b0:	4b05      	ldr	r3, [pc, #20]	; (80095c8 <vTaskInternalSetTimeOutState+0x28>)
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	605a      	str	r2, [r3, #4]
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	20006560 	.word	0x20006560
 80095c8:	2000654c 	.word	0x2000654c

080095cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b088      	sub	sp, #32
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10c      	bne.n	80095f6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	b672      	cpsid	i
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	b662      	cpsie	i
 80095f0:	613b      	str	r3, [r7, #16]
}
 80095f2:	bf00      	nop
 80095f4:	e7fe      	b.n	80095f4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10c      	bne.n	8009616 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009600:	b672      	cpsid	i
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	b662      	cpsie	i
 8009610:	60fb      	str	r3, [r7, #12]
}
 8009612:	bf00      	nop
 8009614:	e7fe      	b.n	8009614 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009616:	f000 fc71 	bl	8009efc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800961a:	4b1d      	ldr	r3, [pc, #116]	; (8009690 <xTaskCheckForTimeOut+0xc4>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	69ba      	ldr	r2, [r7, #24]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009632:	d102      	bne.n	800963a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009634:	2300      	movs	r3, #0
 8009636:	61fb      	str	r3, [r7, #28]
 8009638:	e023      	b.n	8009682 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	4b15      	ldr	r3, [pc, #84]	; (8009694 <xTaskCheckForTimeOut+0xc8>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	429a      	cmp	r2, r3
 8009644:	d007      	beq.n	8009656 <xTaskCheckForTimeOut+0x8a>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	69ba      	ldr	r2, [r7, #24]
 800964c:	429a      	cmp	r2, r3
 800964e:	d302      	bcc.n	8009656 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009650:	2301      	movs	r3, #1
 8009652:	61fb      	str	r3, [r7, #28]
 8009654:	e015      	b.n	8009682 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	429a      	cmp	r2, r3
 800965e:	d20b      	bcs.n	8009678 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	1ad2      	subs	r2, r2, r3
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff ff97 	bl	80095a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009672:	2300      	movs	r3, #0
 8009674:	61fb      	str	r3, [r7, #28]
 8009676:	e004      	b.n	8009682 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	2200      	movs	r2, #0
 800967c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800967e:	2301      	movs	r3, #1
 8009680:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009682:	f000 fc6f 	bl	8009f64 <vPortExitCritical>

	return xReturn;
 8009686:	69fb      	ldr	r3, [r7, #28]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3720      	adds	r7, #32
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	2000654c 	.word	0x2000654c
 8009694:	20006560 	.word	0x20006560

08009698 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009698:	b480      	push	{r7}
 800969a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800969c:	4b03      	ldr	r3, [pc, #12]	; (80096ac <vTaskMissedYield+0x14>)
 800969e:	2201      	movs	r2, #1
 80096a0:	601a      	str	r2, [r3, #0]
}
 80096a2:	bf00      	nop
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr
 80096ac:	2000655c 	.word	0x2000655c

080096b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80096b8:	f000 f852 	bl	8009760 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80096bc:	4b06      	ldr	r3, [pc, #24]	; (80096d8 <prvIdleTask+0x28>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d9f9      	bls.n	80096b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80096c4:	4b05      	ldr	r3, [pc, #20]	; (80096dc <prvIdleTask+0x2c>)
 80096c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ca:	601a      	str	r2, [r3, #0]
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80096d4:	e7f0      	b.n	80096b8 <prvIdleTask+0x8>
 80096d6:	bf00      	nop
 80096d8:	2000644c 	.word	0x2000644c
 80096dc:	e000ed04 	.word	0xe000ed04

080096e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096e6:	2300      	movs	r3, #0
 80096e8:	607b      	str	r3, [r7, #4]
 80096ea:	e00c      	b.n	8009706 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	4613      	mov	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4a12      	ldr	r2, [pc, #72]	; (8009740 <prvInitialiseTaskLists+0x60>)
 80096f8:	4413      	add	r3, r2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fe f9e7 	bl	8007ace <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	3301      	adds	r3, #1
 8009704:	607b      	str	r3, [r7, #4]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2b06      	cmp	r3, #6
 800970a:	d9ef      	bls.n	80096ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800970c:	480d      	ldr	r0, [pc, #52]	; (8009744 <prvInitialiseTaskLists+0x64>)
 800970e:	f7fe f9de 	bl	8007ace <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009712:	480d      	ldr	r0, [pc, #52]	; (8009748 <prvInitialiseTaskLists+0x68>)
 8009714:	f7fe f9db 	bl	8007ace <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009718:	480c      	ldr	r0, [pc, #48]	; (800974c <prvInitialiseTaskLists+0x6c>)
 800971a:	f7fe f9d8 	bl	8007ace <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800971e:	480c      	ldr	r0, [pc, #48]	; (8009750 <prvInitialiseTaskLists+0x70>)
 8009720:	f7fe f9d5 	bl	8007ace <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009724:	480b      	ldr	r0, [pc, #44]	; (8009754 <prvInitialiseTaskLists+0x74>)
 8009726:	f7fe f9d2 	bl	8007ace <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800972a:	4b0b      	ldr	r3, [pc, #44]	; (8009758 <prvInitialiseTaskLists+0x78>)
 800972c:	4a05      	ldr	r2, [pc, #20]	; (8009744 <prvInitialiseTaskLists+0x64>)
 800972e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009730:	4b0a      	ldr	r3, [pc, #40]	; (800975c <prvInitialiseTaskLists+0x7c>)
 8009732:	4a05      	ldr	r2, [pc, #20]	; (8009748 <prvInitialiseTaskLists+0x68>)
 8009734:	601a      	str	r2, [r3, #0]
}
 8009736:	bf00      	nop
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	2000644c 	.word	0x2000644c
 8009744:	200064d8 	.word	0x200064d8
 8009748:	200064ec 	.word	0x200064ec
 800974c:	20006508 	.word	0x20006508
 8009750:	2000651c 	.word	0x2000651c
 8009754:	20006534 	.word	0x20006534
 8009758:	20006500 	.word	0x20006500
 800975c:	20006504 	.word	0x20006504

08009760 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009766:	e019      	b.n	800979c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009768:	f000 fbc8 	bl	8009efc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800976c:	4b10      	ldr	r3, [pc, #64]	; (80097b0 <prvCheckTasksWaitingTermination+0x50>)
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	3304      	adds	r3, #4
 8009778:	4618      	mov	r0, r3
 800977a:	f7fe fa32 	bl	8007be2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800977e:	4b0d      	ldr	r3, [pc, #52]	; (80097b4 <prvCheckTasksWaitingTermination+0x54>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	3b01      	subs	r3, #1
 8009784:	4a0b      	ldr	r2, [pc, #44]	; (80097b4 <prvCheckTasksWaitingTermination+0x54>)
 8009786:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009788:	4b0b      	ldr	r3, [pc, #44]	; (80097b8 <prvCheckTasksWaitingTermination+0x58>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3b01      	subs	r3, #1
 800978e:	4a0a      	ldr	r2, [pc, #40]	; (80097b8 <prvCheckTasksWaitingTermination+0x58>)
 8009790:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009792:	f000 fbe7 	bl	8009f64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f810 	bl	80097bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800979c:	4b06      	ldr	r3, [pc, #24]	; (80097b8 <prvCheckTasksWaitingTermination+0x58>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e1      	bne.n	8009768 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	2000651c 	.word	0x2000651c
 80097b4:	20006548 	.word	0x20006548
 80097b8:	20006530 	.word	0x20006530

080097bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d108      	bne.n	80097e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 fd88 	bl	800a2e8 <vPortFree>
				vPortFree( pxTCB );
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fd85 	bl	800a2e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80097de:	e01a      	b.n	8009816 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d103      	bne.n	80097f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fd7c 	bl	800a2e8 <vPortFree>
	}
 80097f0:	e011      	b.n	8009816 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d00c      	beq.n	8009816 <prvDeleteTCB+0x5a>
	__asm volatile
 80097fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009800:	b672      	cpsid	i
 8009802:	f383 8811 	msr	BASEPRI, r3
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	b662      	cpsie	i
 8009810:	60fb      	str	r3, [r7, #12]
}
 8009812:	bf00      	nop
 8009814:	e7fe      	b.n	8009814 <prvDeleteTCB+0x58>
	}
 8009816:	bf00      	nop
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
	...

08009820 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009826:	4b0c      	ldr	r3, [pc, #48]	; (8009858 <prvResetNextTaskUnblockTime+0x38>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d104      	bne.n	800983a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009830:	4b0a      	ldr	r3, [pc, #40]	; (800985c <prvResetNextTaskUnblockTime+0x3c>)
 8009832:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009836:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009838:	e008      	b.n	800984c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800983a:	4b07      	ldr	r3, [pc, #28]	; (8009858 <prvResetNextTaskUnblockTime+0x38>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	4a04      	ldr	r2, [pc, #16]	; (800985c <prvResetNextTaskUnblockTime+0x3c>)
 800984a:	6013      	str	r3, [r2, #0]
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr
 8009858:	20006500 	.word	0x20006500
 800985c:	20006568 	.word	0x20006568

08009860 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009866:	4b0b      	ldr	r3, [pc, #44]	; (8009894 <xTaskGetSchedulerState+0x34>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d102      	bne.n	8009874 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800986e:	2301      	movs	r3, #1
 8009870:	607b      	str	r3, [r7, #4]
 8009872:	e008      	b.n	8009886 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009874:	4b08      	ldr	r3, [pc, #32]	; (8009898 <xTaskGetSchedulerState+0x38>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d102      	bne.n	8009882 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800987c:	2302      	movs	r3, #2
 800987e:	607b      	str	r3, [r7, #4]
 8009880:	e001      	b.n	8009886 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009882:	2300      	movs	r3, #0
 8009884:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009886:	687b      	ldr	r3, [r7, #4]
	}
 8009888:	4618      	mov	r0, r3
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr
 8009894:	20006554 	.word	0x20006554
 8009898:	20006570 	.word	0x20006570

0800989c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80098a8:	2300      	movs	r3, #0
 80098aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d069      	beq.n	8009986 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b6:	4b36      	ldr	r3, [pc, #216]	; (8009990 <xTaskPriorityInherit+0xf4>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098bc:	429a      	cmp	r2, r3
 80098be:	d259      	bcs.n	8009974 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	db06      	blt.n	80098d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098c8:	4b31      	ldr	r3, [pc, #196]	; (8009990 <xTaskPriorityInherit+0xf4>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ce:	f1c3 0207 	rsb	r2, r3, #7
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	6959      	ldr	r1, [r3, #20]
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098de:	4613      	mov	r3, r2
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	4413      	add	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4a2b      	ldr	r2, [pc, #172]	; (8009994 <xTaskPriorityInherit+0xf8>)
 80098e8:	4413      	add	r3, r2
 80098ea:	4299      	cmp	r1, r3
 80098ec:	d13a      	bne.n	8009964 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	3304      	adds	r3, #4
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fe f975 	bl	8007be2 <uxListRemove>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d115      	bne.n	800992a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009902:	4924      	ldr	r1, [pc, #144]	; (8009994 <xTaskPriorityInherit+0xf8>)
 8009904:	4613      	mov	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	440b      	add	r3, r1
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10a      	bne.n	800992a <xTaskPriorityInherit+0x8e>
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009918:	2201      	movs	r2, #1
 800991a:	fa02 f303 	lsl.w	r3, r2, r3
 800991e:	43da      	mvns	r2, r3
 8009920:	4b1d      	ldr	r3, [pc, #116]	; (8009998 <xTaskPriorityInherit+0xfc>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4013      	ands	r3, r2
 8009926:	4a1c      	ldr	r2, [pc, #112]	; (8009998 <xTaskPriorityInherit+0xfc>)
 8009928:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800992a:	4b19      	ldr	r3, [pc, #100]	; (8009990 <xTaskPriorityInherit+0xf4>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009938:	2201      	movs	r2, #1
 800993a:	409a      	lsls	r2, r3
 800993c:	4b16      	ldr	r3, [pc, #88]	; (8009998 <xTaskPriorityInherit+0xfc>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4313      	orrs	r3, r2
 8009942:	4a15      	ldr	r2, [pc, #84]	; (8009998 <xTaskPriorityInherit+0xfc>)
 8009944:	6013      	str	r3, [r2, #0]
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800994a:	4613      	mov	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4a10      	ldr	r2, [pc, #64]	; (8009994 <xTaskPriorityInherit+0xf8>)
 8009954:	441a      	add	r2, r3
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	3304      	adds	r3, #4
 800995a:	4619      	mov	r1, r3
 800995c:	4610      	mov	r0, r2
 800995e:	f7fe f8e3 	bl	8007b28 <vListInsertEnd>
 8009962:	e004      	b.n	800996e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009964:	4b0a      	ldr	r3, [pc, #40]	; (8009990 <xTaskPriorityInherit+0xf4>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800996e:	2301      	movs	r3, #1
 8009970:	60fb      	str	r3, [r7, #12]
 8009972:	e008      	b.n	8009986 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009978:	4b05      	ldr	r3, [pc, #20]	; (8009990 <xTaskPriorityInherit+0xf4>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997e:	429a      	cmp	r2, r3
 8009980:	d201      	bcs.n	8009986 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009982:	2301      	movs	r3, #1
 8009984:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009986:	68fb      	ldr	r3, [r7, #12]
	}
 8009988:	4618      	mov	r0, r3
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	20006448 	.word	0x20006448
 8009994:	2000644c 	.word	0x2000644c
 8009998:	20006550 	.word	0x20006550

0800999c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800999c:	b580      	push	{r7, lr}
 800999e:	b086      	sub	sp, #24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80099a8:	2300      	movs	r3, #0
 80099aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d072      	beq.n	8009a98 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099b2:	4b3c      	ldr	r3, [pc, #240]	; (8009aa4 <xTaskPriorityDisinherit+0x108>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d00c      	beq.n	80099d6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80099bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c0:	b672      	cpsid	i
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	b662      	cpsie	i
 80099d0:	60fb      	str	r3, [r7, #12]
}
 80099d2:	bf00      	nop
 80099d4:	e7fe      	b.n	80099d4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10c      	bne.n	80099f8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e2:	b672      	cpsid	i
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	b662      	cpsie	i
 80099f2:	60bb      	str	r3, [r7, #8]
}
 80099f4:	bf00      	nop
 80099f6:	e7fe      	b.n	80099f6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099fc:	1e5a      	subs	r2, r3, #1
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d044      	beq.n	8009a98 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d140      	bne.n	8009a98 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	3304      	adds	r3, #4
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fe f8e1 	bl	8007be2 <uxListRemove>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d115      	bne.n	8009a52 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2a:	491f      	ldr	r1, [pc, #124]	; (8009aa8 <xTaskPriorityDisinherit+0x10c>)
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	4413      	add	r3, r2
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	440b      	add	r3, r1
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10a      	bne.n	8009a52 <xTaskPriorityDisinherit+0xb6>
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a40:	2201      	movs	r2, #1
 8009a42:	fa02 f303 	lsl.w	r3, r2, r3
 8009a46:	43da      	mvns	r2, r3
 8009a48:	4b18      	ldr	r3, [pc, #96]	; (8009aac <xTaskPriorityDisinherit+0x110>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	4a17      	ldr	r2, [pc, #92]	; (8009aac <xTaskPriorityDisinherit+0x110>)
 8009a50:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5e:	f1c3 0207 	rsb	r2, r3, #7
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	409a      	lsls	r2, r3
 8009a6e:	4b0f      	ldr	r3, [pc, #60]	; (8009aac <xTaskPriorityDisinherit+0x110>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	4a0d      	ldr	r2, [pc, #52]	; (8009aac <xTaskPriorityDisinherit+0x110>)
 8009a76:	6013      	str	r3, [r2, #0]
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4413      	add	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4a08      	ldr	r2, [pc, #32]	; (8009aa8 <xTaskPriorityDisinherit+0x10c>)
 8009a86:	441a      	add	r2, r3
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	3304      	adds	r3, #4
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	4610      	mov	r0, r2
 8009a90:	f7fe f84a 	bl	8007b28 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a94:	2301      	movs	r3, #1
 8009a96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a98:	697b      	ldr	r3, [r7, #20]
	}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3718      	adds	r7, #24
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20006448 	.word	0x20006448
 8009aa8:	2000644c 	.word	0x2000644c
 8009aac:	20006550 	.word	0x20006550

08009ab0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b088      	sub	sp, #32
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 8087 	beq.w	8009bd8 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d10c      	bne.n	8009aec <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8009ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad6:	b672      	cpsid	i
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	b662      	cpsie	i
 8009ae6:	60fb      	str	r3, [r7, #12]
}
 8009ae8:	bf00      	nop
 8009aea:	e7fe      	b.n	8009aea <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d902      	bls.n	8009afc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	61fb      	str	r3, [r7, #28]
 8009afa:	e002      	b.n	8009b02 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b00:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b06:	69fa      	ldr	r2, [r7, #28]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d065      	beq.n	8009bd8 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b10:	697a      	ldr	r2, [r7, #20]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d160      	bne.n	8009bd8 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009b16:	4b32      	ldr	r3, [pc, #200]	; (8009be0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	69ba      	ldr	r2, [r7, #24]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d10c      	bne.n	8009b3a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8009b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b24:	b672      	cpsid	i
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	b662      	cpsie	i
 8009b34:	60bb      	str	r3, [r7, #8]
}
 8009b36:	bf00      	nop
 8009b38:	e7fe      	b.n	8009b38 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	69fa      	ldr	r2, [r7, #28]
 8009b44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	699b      	ldr	r3, [r3, #24]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	db04      	blt.n	8009b58 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	f1c3 0207 	rsb	r2, r3, #7
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	6959      	ldr	r1, [r3, #20]
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4413      	add	r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4a1f      	ldr	r2, [pc, #124]	; (8009be4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009b68:	4413      	add	r3, r2
 8009b6a:	4299      	cmp	r1, r3
 8009b6c:	d134      	bne.n	8009bd8 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	3304      	adds	r3, #4
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fe f835 	bl	8007be2 <uxListRemove>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d115      	bne.n	8009baa <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b82:	4918      	ldr	r1, [pc, #96]	; (8009be4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009b84:	4613      	mov	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	440b      	add	r3, r1
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d10a      	bne.n	8009baa <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b98:	2201      	movs	r2, #1
 8009b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b9e:	43da      	mvns	r2, r3
 8009ba0:	4b11      	ldr	r3, [pc, #68]	; (8009be8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	4a10      	ldr	r2, [pc, #64]	; (8009be8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009ba8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bae:	2201      	movs	r2, #1
 8009bb0:	409a      	lsls	r2, r3
 8009bb2:	4b0d      	ldr	r3, [pc, #52]	; (8009be8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	4a0b      	ldr	r2, [pc, #44]	; (8009be8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009bba:	6013      	str	r3, [r2, #0]
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4a06      	ldr	r2, [pc, #24]	; (8009be4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009bca:	441a      	add	r2, r3
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	3304      	adds	r3, #4
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	4610      	mov	r0, r2
 8009bd4:	f7fd ffa8 	bl	8007b28 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009bd8:	bf00      	nop
 8009bda:	3720      	adds	r7, #32
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	20006448 	.word	0x20006448
 8009be4:	2000644c 	.word	0x2000644c
 8009be8:	20006550 	.word	0x20006550

08009bec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009bec:	b480      	push	{r7}
 8009bee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009bf0:	4b07      	ldr	r3, [pc, #28]	; (8009c10 <pvTaskIncrementMutexHeldCount+0x24>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d004      	beq.n	8009c02 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009bf8:	4b05      	ldr	r3, [pc, #20]	; (8009c10 <pvTaskIncrementMutexHeldCount+0x24>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009bfe:	3201      	adds	r2, #1
 8009c00:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009c02:	4b03      	ldr	r3, [pc, #12]	; (8009c10 <pvTaskIncrementMutexHeldCount+0x24>)
 8009c04:	681b      	ldr	r3, [r3, #0]
	}
 8009c06:	4618      	mov	r0, r3
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	20006448 	.word	0x20006448

08009c14 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c1e:	4b29      	ldr	r3, [pc, #164]	; (8009cc4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c24:	4b28      	ldr	r3, [pc, #160]	; (8009cc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3304      	adds	r3, #4
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7fd ffd9 	bl	8007be2 <uxListRemove>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10b      	bne.n	8009c4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009c36:	4b24      	ldr	r3, [pc, #144]	; (8009cc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c42:	43da      	mvns	r2, r3
 8009c44:	4b21      	ldr	r3, [pc, #132]	; (8009ccc <prvAddCurrentTaskToDelayedList+0xb8>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4013      	ands	r3, r2
 8009c4a:	4a20      	ldr	r2, [pc, #128]	; (8009ccc <prvAddCurrentTaskToDelayedList+0xb8>)
 8009c4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c54:	d10a      	bne.n	8009c6c <prvAddCurrentTaskToDelayedList+0x58>
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d007      	beq.n	8009c6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c5c:	4b1a      	ldr	r3, [pc, #104]	; (8009cc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	3304      	adds	r3, #4
 8009c62:	4619      	mov	r1, r3
 8009c64:	481a      	ldr	r0, [pc, #104]	; (8009cd0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009c66:	f7fd ff5f 	bl	8007b28 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c6a:	e026      	b.n	8009cba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4413      	add	r3, r2
 8009c72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c74:	4b14      	ldr	r3, [pc, #80]	; (8009cc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d209      	bcs.n	8009c98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c84:	4b13      	ldr	r3, [pc, #76]	; (8009cd4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	4b0f      	ldr	r3, [pc, #60]	; (8009cc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	3304      	adds	r3, #4
 8009c8e:	4619      	mov	r1, r3
 8009c90:	4610      	mov	r0, r2
 8009c92:	f7fd ff6d 	bl	8007b70 <vListInsert>
}
 8009c96:	e010      	b.n	8009cba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c98:	4b0f      	ldr	r3, [pc, #60]	; (8009cd8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	4b0a      	ldr	r3, [pc, #40]	; (8009cc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	f7fd ff63 	bl	8007b70 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009caa:	4b0c      	ldr	r3, [pc, #48]	; (8009cdc <prvAddCurrentTaskToDelayedList+0xc8>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d202      	bcs.n	8009cba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009cb4:	4a09      	ldr	r2, [pc, #36]	; (8009cdc <prvAddCurrentTaskToDelayedList+0xc8>)
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	6013      	str	r3, [r2, #0]
}
 8009cba:	bf00      	nop
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	2000654c 	.word	0x2000654c
 8009cc8:	20006448 	.word	0x20006448
 8009ccc:	20006550 	.word	0x20006550
 8009cd0:	20006534 	.word	0x20006534
 8009cd4:	20006504 	.word	0x20006504
 8009cd8:	20006500 	.word	0x20006500
 8009cdc:	20006568 	.word	0x20006568

08009ce0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	3b04      	subs	r3, #4
 8009cf0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009cf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	3b04      	subs	r3, #4
 8009cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	f023 0201 	bic.w	r2, r3, #1
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	3b04      	subs	r3, #4
 8009d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d10:	4a0c      	ldr	r2, [pc, #48]	; (8009d44 <pxPortInitialiseStack+0x64>)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	3b14      	subs	r3, #20
 8009d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	3b04      	subs	r3, #4
 8009d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f06f 0202 	mvn.w	r2, #2
 8009d2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	3b20      	subs	r3, #32
 8009d34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d36:	68fb      	ldr	r3, [r7, #12]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	08009d49 	.word	0x08009d49

08009d48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d52:	4b14      	ldr	r3, [pc, #80]	; (8009da4 <prvTaskExitError+0x5c>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d5a:	d00c      	beq.n	8009d76 <prvTaskExitError+0x2e>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	b672      	cpsid	i
 8009d62:	f383 8811 	msr	BASEPRI, r3
 8009d66:	f3bf 8f6f 	isb	sy
 8009d6a:	f3bf 8f4f 	dsb	sy
 8009d6e:	b662      	cpsie	i
 8009d70:	60fb      	str	r3, [r7, #12]
}
 8009d72:	bf00      	nop
 8009d74:	e7fe      	b.n	8009d74 <prvTaskExitError+0x2c>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7a:	b672      	cpsid	i
 8009d7c:	f383 8811 	msr	BASEPRI, r3
 8009d80:	f3bf 8f6f 	isb	sy
 8009d84:	f3bf 8f4f 	dsb	sy
 8009d88:	b662      	cpsie	i
 8009d8a:	60bb      	str	r3, [r7, #8]
}
 8009d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d8e:	bf00      	nop
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0fc      	beq.n	8009d90 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d96:	bf00      	nop
 8009d98:	bf00      	nop
 8009d9a:	3714      	adds	r7, #20
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr
 8009da4:	20000024 	.word	0x20000024
	...

08009db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009db0:	4b07      	ldr	r3, [pc, #28]	; (8009dd0 <pxCurrentTCBConst2>)
 8009db2:	6819      	ldr	r1, [r3, #0]
 8009db4:	6808      	ldr	r0, [r1, #0]
 8009db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dba:	f380 8809 	msr	PSP, r0
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	f04f 0000 	mov.w	r0, #0
 8009dc6:	f380 8811 	msr	BASEPRI, r0
 8009dca:	4770      	bx	lr
 8009dcc:	f3af 8000 	nop.w

08009dd0 <pxCurrentTCBConst2>:
 8009dd0:	20006448 	.word	0x20006448
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop

08009dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009dd8:	4808      	ldr	r0, [pc, #32]	; (8009dfc <prvPortStartFirstTask+0x24>)
 8009dda:	6800      	ldr	r0, [r0, #0]
 8009ddc:	6800      	ldr	r0, [r0, #0]
 8009dde:	f380 8808 	msr	MSP, r0
 8009de2:	f04f 0000 	mov.w	r0, #0
 8009de6:	f380 8814 	msr	CONTROL, r0
 8009dea:	b662      	cpsie	i
 8009dec:	b661      	cpsie	f
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	df00      	svc	0
 8009df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009dfa:	bf00      	nop
 8009dfc:	e000ed08 	.word	0xe000ed08

08009e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e06:	4b37      	ldr	r3, [pc, #220]	; (8009ee4 <xPortStartScheduler+0xe4>)
 8009e08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	22ff      	movs	r2, #255	; 0xff
 8009e16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e20:	78fb      	ldrb	r3, [r7, #3]
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	4b2f      	ldr	r3, [pc, #188]	; (8009ee8 <xPortStartScheduler+0xe8>)
 8009e2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e2e:	4b2f      	ldr	r3, [pc, #188]	; (8009eec <xPortStartScheduler+0xec>)
 8009e30:	2207      	movs	r2, #7
 8009e32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e34:	e009      	b.n	8009e4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009e36:	4b2d      	ldr	r3, [pc, #180]	; (8009eec <xPortStartScheduler+0xec>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	4a2b      	ldr	r2, [pc, #172]	; (8009eec <xPortStartScheduler+0xec>)
 8009e3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e40:	78fb      	ldrb	r3, [r7, #3]
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	005b      	lsls	r3, r3, #1
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e4a:	78fb      	ldrb	r3, [r7, #3]
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e52:	2b80      	cmp	r3, #128	; 0x80
 8009e54:	d0ef      	beq.n	8009e36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e56:	4b25      	ldr	r3, [pc, #148]	; (8009eec <xPortStartScheduler+0xec>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f1c3 0307 	rsb	r3, r3, #7
 8009e5e:	2b04      	cmp	r3, #4
 8009e60:	d00c      	beq.n	8009e7c <xPortStartScheduler+0x7c>
	__asm volatile
 8009e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e66:	b672      	cpsid	i
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	b662      	cpsie	i
 8009e76:	60bb      	str	r3, [r7, #8]
}
 8009e78:	bf00      	nop
 8009e7a:	e7fe      	b.n	8009e7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e7c:	4b1b      	ldr	r3, [pc, #108]	; (8009eec <xPortStartScheduler+0xec>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	021b      	lsls	r3, r3, #8
 8009e82:	4a1a      	ldr	r2, [pc, #104]	; (8009eec <xPortStartScheduler+0xec>)
 8009e84:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e86:	4b19      	ldr	r3, [pc, #100]	; (8009eec <xPortStartScheduler+0xec>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e8e:	4a17      	ldr	r2, [pc, #92]	; (8009eec <xPortStartScheduler+0xec>)
 8009e90:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e9a:	4b15      	ldr	r3, [pc, #84]	; (8009ef0 <xPortStartScheduler+0xf0>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a14      	ldr	r2, [pc, #80]	; (8009ef0 <xPortStartScheduler+0xf0>)
 8009ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ea4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ea6:	4b12      	ldr	r3, [pc, #72]	; (8009ef0 <xPortStartScheduler+0xf0>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a11      	ldr	r2, [pc, #68]	; (8009ef0 <xPortStartScheduler+0xf0>)
 8009eac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009eb0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009eb2:	f000 f8dd 	bl	800a070 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009eb6:	4b0f      	ldr	r3, [pc, #60]	; (8009ef4 <xPortStartScheduler+0xf4>)
 8009eb8:	2200      	movs	r2, #0
 8009eba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ebc:	f000 f8fc 	bl	800a0b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ec0:	4b0d      	ldr	r3, [pc, #52]	; (8009ef8 <xPortStartScheduler+0xf8>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a0c      	ldr	r2, [pc, #48]	; (8009ef8 <xPortStartScheduler+0xf8>)
 8009ec6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009eca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ecc:	f7ff ff84 	bl	8009dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ed0:	f7ff fa7e 	bl	80093d0 <vTaskSwitchContext>
	prvTaskExitError();
 8009ed4:	f7ff ff38 	bl	8009d48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	e000e400 	.word	0xe000e400
 8009ee8:	20006574 	.word	0x20006574
 8009eec:	20006578 	.word	0x20006578
 8009ef0:	e000ed20 	.word	0xe000ed20
 8009ef4:	20000024 	.word	0x20000024
 8009ef8:	e000ef34 	.word	0xe000ef34

08009efc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
	__asm volatile
 8009f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f06:	b672      	cpsid	i
 8009f08:	f383 8811 	msr	BASEPRI, r3
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	b662      	cpsie	i
 8009f16:	607b      	str	r3, [r7, #4]
}
 8009f18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f1a:	4b10      	ldr	r3, [pc, #64]	; (8009f5c <vPortEnterCritical+0x60>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	4a0e      	ldr	r2, [pc, #56]	; (8009f5c <vPortEnterCritical+0x60>)
 8009f22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f24:	4b0d      	ldr	r3, [pc, #52]	; (8009f5c <vPortEnterCritical+0x60>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d111      	bne.n	8009f50 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f2c:	4b0c      	ldr	r3, [pc, #48]	; (8009f60 <vPortEnterCritical+0x64>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00c      	beq.n	8009f50 <vPortEnterCritical+0x54>
	__asm volatile
 8009f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3a:	b672      	cpsid	i
 8009f3c:	f383 8811 	msr	BASEPRI, r3
 8009f40:	f3bf 8f6f 	isb	sy
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	b662      	cpsie	i
 8009f4a:	603b      	str	r3, [r7, #0]
}
 8009f4c:	bf00      	nop
 8009f4e:	e7fe      	b.n	8009f4e <vPortEnterCritical+0x52>
	}
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr
 8009f5c:	20000024 	.word	0x20000024
 8009f60:	e000ed04 	.word	0xe000ed04

08009f64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f6a:	4b13      	ldr	r3, [pc, #76]	; (8009fb8 <vPortExitCritical+0x54>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10c      	bne.n	8009f8c <vPortExitCritical+0x28>
	__asm volatile
 8009f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f76:	b672      	cpsid	i
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	b662      	cpsie	i
 8009f86:	607b      	str	r3, [r7, #4]
}
 8009f88:	bf00      	nop
 8009f8a:	e7fe      	b.n	8009f8a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009f8c:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <vPortExitCritical+0x54>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	3b01      	subs	r3, #1
 8009f92:	4a09      	ldr	r2, [pc, #36]	; (8009fb8 <vPortExitCritical+0x54>)
 8009f94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f96:	4b08      	ldr	r3, [pc, #32]	; (8009fb8 <vPortExitCritical+0x54>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d105      	bne.n	8009faa <vPortExitCritical+0x46>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	f383 8811 	msr	BASEPRI, r3
}
 8009fa8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009faa:	bf00      	nop
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	20000024 	.word	0x20000024
 8009fbc:	00000000 	.word	0x00000000

08009fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009fc0:	f3ef 8009 	mrs	r0, PSP
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	4b15      	ldr	r3, [pc, #84]	; (800a020 <pxCurrentTCBConst>)
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	f01e 0f10 	tst.w	lr, #16
 8009fd0:	bf08      	it	eq
 8009fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fda:	6010      	str	r0, [r2, #0]
 8009fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009fe4:	b672      	cpsid	i
 8009fe6:	f380 8811 	msr	BASEPRI, r0
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	f3bf 8f6f 	isb	sy
 8009ff2:	b662      	cpsie	i
 8009ff4:	f7ff f9ec 	bl	80093d0 <vTaskSwitchContext>
 8009ff8:	f04f 0000 	mov.w	r0, #0
 8009ffc:	f380 8811 	msr	BASEPRI, r0
 800a000:	bc09      	pop	{r0, r3}
 800a002:	6819      	ldr	r1, [r3, #0]
 800a004:	6808      	ldr	r0, [r1, #0]
 800a006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a00a:	f01e 0f10 	tst.w	lr, #16
 800a00e:	bf08      	it	eq
 800a010:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a014:	f380 8809 	msr	PSP, r0
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	4770      	bx	lr
 800a01e:	bf00      	nop

0800a020 <pxCurrentTCBConst>:
 800a020:	20006448 	.word	0x20006448
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a024:	bf00      	nop
 800a026:	bf00      	nop

0800a028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	b672      	cpsid	i
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	b662      	cpsie	i
 800a042:	607b      	str	r3, [r7, #4]
}
 800a044:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a046:	f7ff f909 	bl	800925c <xTaskIncrementTick>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d003      	beq.n	800a058 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a050:	4b06      	ldr	r3, [pc, #24]	; (800a06c <SysTick_Handler+0x44>)
 800a052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a056:	601a      	str	r2, [r3, #0]
 800a058:	2300      	movs	r3, #0
 800a05a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	f383 8811 	msr	BASEPRI, r3
}
 800a062:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a064:	bf00      	nop
 800a066:	3708      	adds	r7, #8
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	e000ed04 	.word	0xe000ed04

0800a070 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a070:	b480      	push	{r7}
 800a072:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a074:	4b0b      	ldr	r3, [pc, #44]	; (800a0a4 <vPortSetupTimerInterrupt+0x34>)
 800a076:	2200      	movs	r2, #0
 800a078:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a07a:	4b0b      	ldr	r3, [pc, #44]	; (800a0a8 <vPortSetupTimerInterrupt+0x38>)
 800a07c:	2200      	movs	r2, #0
 800a07e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a080:	4b0a      	ldr	r3, [pc, #40]	; (800a0ac <vPortSetupTimerInterrupt+0x3c>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a0a      	ldr	r2, [pc, #40]	; (800a0b0 <vPortSetupTimerInterrupt+0x40>)
 800a086:	fba2 2303 	umull	r2, r3, r2, r3
 800a08a:	099b      	lsrs	r3, r3, #6
 800a08c:	4a09      	ldr	r2, [pc, #36]	; (800a0b4 <vPortSetupTimerInterrupt+0x44>)
 800a08e:	3b01      	subs	r3, #1
 800a090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a092:	4b04      	ldr	r3, [pc, #16]	; (800a0a4 <vPortSetupTimerInterrupt+0x34>)
 800a094:	2207      	movs	r2, #7
 800a096:	601a      	str	r2, [r3, #0]
}
 800a098:	bf00      	nop
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	e000e010 	.word	0xe000e010
 800a0a8:	e000e018 	.word	0xe000e018
 800a0ac:	20000004 	.word	0x20000004
 800a0b0:	10624dd3 	.word	0x10624dd3
 800a0b4:	e000e014 	.word	0xe000e014

0800a0b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a0b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a0c8 <vPortEnableVFP+0x10>
 800a0bc:	6801      	ldr	r1, [r0, #0]
 800a0be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a0c2:	6001      	str	r1, [r0, #0]
 800a0c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a0c6:	bf00      	nop
 800a0c8:	e000ed88 	.word	0xe000ed88

0800a0cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0d2:	f3ef 8305 	mrs	r3, IPSR
 800a0d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b0f      	cmp	r3, #15
 800a0dc:	d916      	bls.n	800a10c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0de:	4a19      	ldr	r2, [pc, #100]	; (800a144 <vPortValidateInterruptPriority+0x78>)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0e8:	4b17      	ldr	r3, [pc, #92]	; (800a148 <vPortValidateInterruptPriority+0x7c>)
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	7afa      	ldrb	r2, [r7, #11]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d20c      	bcs.n	800a10c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f6:	b672      	cpsid	i
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	b662      	cpsie	i
 800a106:	607b      	str	r3, [r7, #4]
}
 800a108:	bf00      	nop
 800a10a:	e7fe      	b.n	800a10a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a10c:	4b0f      	ldr	r3, [pc, #60]	; (800a14c <vPortValidateInterruptPriority+0x80>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a114:	4b0e      	ldr	r3, [pc, #56]	; (800a150 <vPortValidateInterruptPriority+0x84>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d90c      	bls.n	800a136 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a120:	b672      	cpsid	i
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	b662      	cpsie	i
 800a130:	603b      	str	r3, [r7, #0]
}
 800a132:	bf00      	nop
 800a134:	e7fe      	b.n	800a134 <vPortValidateInterruptPriority+0x68>
	}
 800a136:	bf00      	nop
 800a138:	3714      	adds	r7, #20
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	e000e3f0 	.word	0xe000e3f0
 800a148:	20006574 	.word	0x20006574
 800a14c:	e000ed0c 	.word	0xe000ed0c
 800a150:	20006578 	.word	0x20006578

0800a154 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b08a      	sub	sp, #40	; 0x28
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a15c:	2300      	movs	r3, #0
 800a15e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a160:	f7fe ffae 	bl	80090c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a164:	4b5b      	ldr	r3, [pc, #364]	; (800a2d4 <pvPortMalloc+0x180>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d101      	bne.n	800a170 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a16c:	f000 f91a 	bl	800a3a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a170:	4b59      	ldr	r3, [pc, #356]	; (800a2d8 <pvPortMalloc+0x184>)
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4013      	ands	r3, r2
 800a178:	2b00      	cmp	r3, #0
 800a17a:	f040 8092 	bne.w	800a2a2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d01f      	beq.n	800a1c4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a184:	2208      	movs	r2, #8
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4413      	add	r3, r2
 800a18a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f003 0307 	and.w	r3, r3, #7
 800a192:	2b00      	cmp	r3, #0
 800a194:	d016      	beq.n	800a1c4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f023 0307 	bic.w	r3, r3, #7
 800a19c:	3308      	adds	r3, #8
 800a19e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f003 0307 	and.w	r3, r3, #7
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00c      	beq.n	800a1c4 <pvPortMalloc+0x70>
	__asm volatile
 800a1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ae:	b672      	cpsid	i
 800a1b0:	f383 8811 	msr	BASEPRI, r3
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	b662      	cpsie	i
 800a1be:	617b      	str	r3, [r7, #20]
}
 800a1c0:	bf00      	nop
 800a1c2:	e7fe      	b.n	800a1c2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d06b      	beq.n	800a2a2 <pvPortMalloc+0x14e>
 800a1ca:	4b44      	ldr	r3, [pc, #272]	; (800a2dc <pvPortMalloc+0x188>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d866      	bhi.n	800a2a2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a1d4:	4b42      	ldr	r3, [pc, #264]	; (800a2e0 <pvPortMalloc+0x18c>)
 800a1d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1d8:	4b41      	ldr	r3, [pc, #260]	; (800a2e0 <pvPortMalloc+0x18c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1de:	e004      	b.n	800a1ea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d903      	bls.n	800a1fc <pvPortMalloc+0xa8>
 800a1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1f1      	bne.n	800a1e0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1fc:	4b35      	ldr	r3, [pc, #212]	; (800a2d4 <pvPortMalloc+0x180>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a202:	429a      	cmp	r2, r3
 800a204:	d04d      	beq.n	800a2a2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a206:	6a3b      	ldr	r3, [r7, #32]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2208      	movs	r2, #8
 800a20c:	4413      	add	r3, r2
 800a20e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	6a3b      	ldr	r3, [r7, #32]
 800a216:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	1ad2      	subs	r2, r2, r3
 800a220:	2308      	movs	r3, #8
 800a222:	005b      	lsls	r3, r3, #1
 800a224:	429a      	cmp	r2, r3
 800a226:	d921      	bls.n	800a26c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4413      	add	r3, r2
 800a22e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	f003 0307 	and.w	r3, r3, #7
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00c      	beq.n	800a254 <pvPortMalloc+0x100>
	__asm volatile
 800a23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23e:	b672      	cpsid	i
 800a240:	f383 8811 	msr	BASEPRI, r3
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	b662      	cpsie	i
 800a24e:	613b      	str	r3, [r7, #16]
}
 800a250:	bf00      	nop
 800a252:	e7fe      	b.n	800a252 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	685a      	ldr	r2, [r3, #4]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	1ad2      	subs	r2, r2, r3
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a266:	69b8      	ldr	r0, [r7, #24]
 800a268:	f000 f8fe 	bl	800a468 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a26c:	4b1b      	ldr	r3, [pc, #108]	; (800a2dc <pvPortMalloc+0x188>)
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	4a19      	ldr	r2, [pc, #100]	; (800a2dc <pvPortMalloc+0x188>)
 800a278:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a27a:	4b18      	ldr	r3, [pc, #96]	; (800a2dc <pvPortMalloc+0x188>)
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	4b19      	ldr	r3, [pc, #100]	; (800a2e4 <pvPortMalloc+0x190>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	429a      	cmp	r2, r3
 800a284:	d203      	bcs.n	800a28e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a286:	4b15      	ldr	r3, [pc, #84]	; (800a2dc <pvPortMalloc+0x188>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a16      	ldr	r2, [pc, #88]	; (800a2e4 <pvPortMalloc+0x190>)
 800a28c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a290:	685a      	ldr	r2, [r3, #4]
 800a292:	4b11      	ldr	r3, [pc, #68]	; (800a2d8 <pvPortMalloc+0x184>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	431a      	orrs	r2, r3
 800a298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29e:	2200      	movs	r2, #0
 800a2a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a2a2:	f7fe ff1b 	bl	80090dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	f003 0307 	and.w	r3, r3, #7
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00c      	beq.n	800a2ca <pvPortMalloc+0x176>
	__asm volatile
 800a2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b4:	b672      	cpsid	i
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	b662      	cpsie	i
 800a2c4:	60fb      	str	r3, [r7, #12]
}
 800a2c6:	bf00      	nop
 800a2c8:	e7fe      	b.n	800a2c8 <pvPortMalloc+0x174>
	return pvReturn;
 800a2ca:	69fb      	ldr	r3, [r7, #28]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3728      	adds	r7, #40	; 0x28
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	2000a184 	.word	0x2000a184
 800a2d8:	2000a190 	.word	0x2000a190
 800a2dc:	2000a188 	.word	0x2000a188
 800a2e0:	2000a17c 	.word	0x2000a17c
 800a2e4:	2000a18c 	.word	0x2000a18c

0800a2e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b086      	sub	sp, #24
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d04c      	beq.n	800a394 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2fa:	2308      	movs	r3, #8
 800a2fc:	425b      	negs	r3, r3
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	4413      	add	r3, r2
 800a302:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	4b23      	ldr	r3, [pc, #140]	; (800a39c <vPortFree+0xb4>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4013      	ands	r3, r2
 800a312:	2b00      	cmp	r3, #0
 800a314:	d10c      	bne.n	800a330 <vPortFree+0x48>
	__asm volatile
 800a316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31a:	b672      	cpsid	i
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	b662      	cpsie	i
 800a32a:	60fb      	str	r3, [r7, #12]
}
 800a32c:	bf00      	nop
 800a32e:	e7fe      	b.n	800a32e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00c      	beq.n	800a352 <vPortFree+0x6a>
	__asm volatile
 800a338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33c:	b672      	cpsid	i
 800a33e:	f383 8811 	msr	BASEPRI, r3
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	f3bf 8f4f 	dsb	sy
 800a34a:	b662      	cpsie	i
 800a34c:	60bb      	str	r3, [r7, #8]
}
 800a34e:	bf00      	nop
 800a350:	e7fe      	b.n	800a350 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	685a      	ldr	r2, [r3, #4]
 800a356:	4b11      	ldr	r3, [pc, #68]	; (800a39c <vPortFree+0xb4>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4013      	ands	r3, r2
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d019      	beq.n	800a394 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d115      	bne.n	800a394 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	685a      	ldr	r2, [r3, #4]
 800a36c:	4b0b      	ldr	r3, [pc, #44]	; (800a39c <vPortFree+0xb4>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	43db      	mvns	r3, r3
 800a372:	401a      	ands	r2, r3
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a378:	f7fe fea2 	bl	80090c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	685a      	ldr	r2, [r3, #4]
 800a380:	4b07      	ldr	r3, [pc, #28]	; (800a3a0 <vPortFree+0xb8>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4413      	add	r3, r2
 800a386:	4a06      	ldr	r2, [pc, #24]	; (800a3a0 <vPortFree+0xb8>)
 800a388:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a38a:	6938      	ldr	r0, [r7, #16]
 800a38c:	f000 f86c 	bl	800a468 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a390:	f7fe fea4 	bl	80090dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a394:	bf00      	nop
 800a396:	3718      	adds	r7, #24
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	2000a190 	.word	0x2000a190
 800a3a0:	2000a188 	.word	0x2000a188

0800a3a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a3aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a3ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a3b0:	4b27      	ldr	r3, [pc, #156]	; (800a450 <prvHeapInit+0xac>)
 800a3b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f003 0307 	and.w	r3, r3, #7
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00c      	beq.n	800a3d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	3307      	adds	r3, #7
 800a3c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f023 0307 	bic.w	r3, r3, #7
 800a3ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3cc:	68ba      	ldr	r2, [r7, #8]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	1ad3      	subs	r3, r2, r3
 800a3d2:	4a1f      	ldr	r2, [pc, #124]	; (800a450 <prvHeapInit+0xac>)
 800a3d4:	4413      	add	r3, r2
 800a3d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3dc:	4a1d      	ldr	r2, [pc, #116]	; (800a454 <prvHeapInit+0xb0>)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3e2:	4b1c      	ldr	r3, [pc, #112]	; (800a454 <prvHeapInit+0xb0>)
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	68ba      	ldr	r2, [r7, #8]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3f0:	2208      	movs	r2, #8
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	1a9b      	subs	r3, r3, r2
 800a3f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f023 0307 	bic.w	r3, r3, #7
 800a3fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	4a15      	ldr	r2, [pc, #84]	; (800a458 <prvHeapInit+0xb4>)
 800a404:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a406:	4b14      	ldr	r3, [pc, #80]	; (800a458 <prvHeapInit+0xb4>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2200      	movs	r2, #0
 800a40c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a40e:	4b12      	ldr	r3, [pc, #72]	; (800a458 <prvHeapInit+0xb4>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2200      	movs	r2, #0
 800a414:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	1ad2      	subs	r2, r2, r3
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a424:	4b0c      	ldr	r3, [pc, #48]	; (800a458 <prvHeapInit+0xb4>)
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	4a0a      	ldr	r2, [pc, #40]	; (800a45c <prvHeapInit+0xb8>)
 800a432:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	4a09      	ldr	r2, [pc, #36]	; (800a460 <prvHeapInit+0xbc>)
 800a43a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a43c:	4b09      	ldr	r3, [pc, #36]	; (800a464 <prvHeapInit+0xc0>)
 800a43e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a442:	601a      	str	r2, [r3, #0]
}
 800a444:	bf00      	nop
 800a446:	3714      	adds	r7, #20
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr
 800a450:	2000657c 	.word	0x2000657c
 800a454:	2000a17c 	.word	0x2000a17c
 800a458:	2000a184 	.word	0x2000a184
 800a45c:	2000a18c 	.word	0x2000a18c
 800a460:	2000a188 	.word	0x2000a188
 800a464:	2000a190 	.word	0x2000a190

0800a468 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a470:	4b28      	ldr	r3, [pc, #160]	; (800a514 <prvInsertBlockIntoFreeList+0xac>)
 800a472:	60fb      	str	r3, [r7, #12]
 800a474:	e002      	b.n	800a47c <prvInsertBlockIntoFreeList+0x14>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	60fb      	str	r3, [r7, #12]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	429a      	cmp	r2, r3
 800a484:	d8f7      	bhi.n	800a476 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	4413      	add	r3, r2
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	429a      	cmp	r2, r3
 800a496:	d108      	bne.n	800a4aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	441a      	add	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	441a      	add	r2, r3
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d118      	bne.n	800a4f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	4b15      	ldr	r3, [pc, #84]	; (800a518 <prvInsertBlockIntoFreeList+0xb0>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d00d      	beq.n	800a4e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	441a      	add	r2, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	601a      	str	r2, [r3, #0]
 800a4e4:	e008      	b.n	800a4f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4e6:	4b0c      	ldr	r3, [pc, #48]	; (800a518 <prvInsertBlockIntoFreeList+0xb0>)
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	601a      	str	r2, [r3, #0]
 800a4ee:	e003      	b.n	800a4f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d002      	beq.n	800a506 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a506:	bf00      	nop
 800a508:	3714      	adds	r7, #20
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	2000a17c 	.word	0x2000a17c
 800a518:	2000a184 	.word	0x2000a184

0800a51c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	330c      	adds	r3, #12
 800a52c:	461a      	mov	r2, r3
 800a52e:	6839      	ldr	r1, [r7, #0]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f002 f931 	bl	800c798 <tcpip_send_msg_wait_sem>
 800a536:	4603      	mov	r3, r0
 800a538:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a53a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d103      	bne.n	800a54a <netconn_apimsg+0x2e>
    return apimsg->err;
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a548:	e001      	b.n	800a54e <netconn_apimsg+0x32>
  }
  return err;
 800a54a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
	...

0800a558 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b08c      	sub	sp, #48	; 0x30
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	4603      	mov	r3, r0
 800a560:	603a      	str	r2, [r7, #0]
 800a562:	71fb      	strb	r3, [r7, #7]
 800a564:	460b      	mov	r3, r1
 800a566:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800a568:	79fb      	ldrb	r3, [r7, #7]
 800a56a:	6839      	ldr	r1, [r7, #0]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 ffaf 	bl	800b4d0 <netconn_alloc>
 800a572:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800a574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a576:	2b00      	cmp	r3, #0
 800a578:	d054      	beq.n	800a624 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800a57a:	79bb      	ldrb	r3, [r7, #6]
 800a57c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800a57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a580:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800a582:	f107 0308 	add.w	r3, r7, #8
 800a586:	4619      	mov	r1, r3
 800a588:	4829      	ldr	r0, [pc, #164]	; (800a630 <netconn_new_with_proto_and_callback+0xd8>)
 800a58a:	f7ff ffc7 	bl	800a51c <netconn_apimsg>
 800a58e:	4603      	mov	r3, r0
 800a590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800a594:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d043      	beq.n	800a624 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800a59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d005      	beq.n	800a5b0 <netconn_new_with_proto_and_callback+0x58>
 800a5a4:	4b23      	ldr	r3, [pc, #140]	; (800a634 <netconn_new_with_proto_and_callback+0xdc>)
 800a5a6:	22a3      	movs	r2, #163	; 0xa3
 800a5a8:	4923      	ldr	r1, [pc, #140]	; (800a638 <netconn_new_with_proto_and_callback+0xe0>)
 800a5aa:	4824      	ldr	r0, [pc, #144]	; (800a63c <netconn_new_with_proto_and_callback+0xe4>)
 800a5ac:	f00f fa18 	bl	80199e0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800a5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b2:	3310      	adds	r3, #16
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f00d f9a8 	bl	801790a <sys_mbox_valid>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d105      	bne.n	800a5cc <netconn_new_with_proto_and_callback+0x74>
 800a5c0:	4b1c      	ldr	r3, [pc, #112]	; (800a634 <netconn_new_with_proto_and_callback+0xdc>)
 800a5c2:	22a4      	movs	r2, #164	; 0xa4
 800a5c4:	491e      	ldr	r1, [pc, #120]	; (800a640 <netconn_new_with_proto_and_callback+0xe8>)
 800a5c6:	481d      	ldr	r0, [pc, #116]	; (800a63c <netconn_new_with_proto_and_callback+0xe4>)
 800a5c8:	f00f fa0a 	bl	80199e0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800a5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ce:	3314      	adds	r3, #20
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f00d f99a 	bl	801790a <sys_mbox_valid>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d005      	beq.n	800a5e8 <netconn_new_with_proto_and_callback+0x90>
 800a5dc:	4b15      	ldr	r3, [pc, #84]	; (800a634 <netconn_new_with_proto_and_callback+0xdc>)
 800a5de:	22a6      	movs	r2, #166	; 0xa6
 800a5e0:	4918      	ldr	r1, [pc, #96]	; (800a644 <netconn_new_with_proto_and_callback+0xec>)
 800a5e2:	4816      	ldr	r0, [pc, #88]	; (800a63c <netconn_new_with_proto_and_callback+0xe4>)
 800a5e4:	f00f f9fc 	bl	80199e0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800a5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ea:	330c      	adds	r3, #12
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f00d fa1d 	bl	8017a2c <sys_sem_valid>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d105      	bne.n	800a604 <netconn_new_with_proto_and_callback+0xac>
 800a5f8:	4b0e      	ldr	r3, [pc, #56]	; (800a634 <netconn_new_with_proto_and_callback+0xdc>)
 800a5fa:	22a9      	movs	r2, #169	; 0xa9
 800a5fc:	4912      	ldr	r1, [pc, #72]	; (800a648 <netconn_new_with_proto_and_callback+0xf0>)
 800a5fe:	480f      	ldr	r0, [pc, #60]	; (800a63c <netconn_new_with_proto_and_callback+0xe4>)
 800a600:	f00f f9ee 	bl	80199e0 <iprintf>
      sys_sem_free(&conn->op_completed);
 800a604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a606:	330c      	adds	r3, #12
 800a608:	4618      	mov	r0, r3
 800a60a:	f00d fa02 	bl	8017a12 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800a60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a610:	3310      	adds	r3, #16
 800a612:	4618      	mov	r0, r3
 800a614:	f00d f8f2 	bl	80177fc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800a618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a61a:	2007      	movs	r0, #7
 800a61c:	f002 fe7a 	bl	800d314 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800a620:	2300      	movs	r3, #0
 800a622:	e000      	b.n	800a626 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800a624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a626:	4618      	mov	r0, r3
 800a628:	3730      	adds	r7, #48	; 0x30
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	0800b4a5 	.word	0x0800b4a5
 800a634:	0801adec 	.word	0x0801adec
 800a638:	0801ae20 	.word	0x0801ae20
 800a63c:	0801ae44 	.word	0x0801ae44
 800a640:	0801ae6c 	.word	0x0801ae6c
 800a644:	0801ae84 	.word	0x0801ae84
 800a648:	0801aea8 	.word	0x0801aea8

0800a64c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b08c      	sub	sp, #48	; 0x30
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d101      	bne.n	800a65e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800a65a:	2300      	movs	r3, #0
 800a65c:	e014      	b.n	800a688 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a662:	2329      	movs	r3, #41	; 0x29
 800a664:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800a666:	f107 030c 	add.w	r3, r7, #12
 800a66a:	4619      	mov	r1, r3
 800a66c:	4808      	ldr	r0, [pc, #32]	; (800a690 <netconn_prepare_delete+0x44>)
 800a66e:	f7ff ff55 	bl	800a51c <netconn_apimsg>
 800a672:	4603      	mov	r3, r0
 800a674:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800a678:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d002      	beq.n	800a686 <netconn_prepare_delete+0x3a>
    return err;
 800a680:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a684:	e000      	b.n	800a688 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800a686:	2300      	movs	r3, #0
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3730      	adds	r7, #48	; 0x30
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	0800ba11 	.word	0x0800ba11

0800a694 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d101      	bne.n	800a6a6 <netconn_delete+0x12>
    return ERR_OK;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	e00d      	b.n	800a6c2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f7ff ffd0 	bl	800a64c <netconn_prepare_delete>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800a6b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d102      	bne.n	800a6be <netconn_delete+0x2a>
    netconn_free(conn);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 ff77 	bl	800b5ac <netconn_free>
  }
  return err;
 800a6be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
	...

0800a6cc <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08e      	sub	sp, #56	; 0x38
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d109      	bne.n	800a6f4 <netconn_connect+0x28>
 800a6e0:	4b11      	ldr	r3, [pc, #68]	; (800a728 <netconn_connect+0x5c>)
 800a6e2:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800a6e6:	4911      	ldr	r1, [pc, #68]	; (800a72c <netconn_connect+0x60>)
 800a6e8:	4811      	ldr	r0, [pc, #68]	; (800a730 <netconn_connect+0x64>)
 800a6ea:	f00f f979 	bl	80199e0 <iprintf>
 800a6ee:	f06f 030f 	mvn.w	r3, #15
 800a6f2:	e015      	b.n	800a720 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d101      	bne.n	800a6fe <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800a6fa:	4b0e      	ldr	r3, [pc, #56]	; (800a734 <netconn_connect+0x68>)
 800a6fc:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800a706:	88fb      	ldrh	r3, [r7, #6]
 800a708:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800a70a:	f107 0314 	add.w	r3, r7, #20
 800a70e:	4619      	mov	r1, r3
 800a710:	4809      	ldr	r0, [pc, #36]	; (800a738 <netconn_connect+0x6c>)
 800a712:	f7ff ff03 	bl	800a51c <netconn_apimsg>
 800a716:	4603      	mov	r3, r0
 800a718:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a71c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a720:	4618      	mov	r0, r3
 800a722:	3738      	adds	r7, #56	; 0x38
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	0801adec 	.word	0x0801adec
 800a72c:	0801af60 	.word	0x0801af60
 800a730:	0801ae44 	.word	0x0801ae44
 800a734:	0801e334 	.word	0x0801e334
 800a738:	0800bcf9 	.word	0x0800bcf9

0800a73c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b088      	sub	sp, #32
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	4613      	mov	r3, r2
 800a748:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800a74a:	2300      	movs	r3, #0
 800a74c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d109      	bne.n	800a768 <netconn_recv_data+0x2c>
 800a754:	4b58      	ldr	r3, [pc, #352]	; (800a8b8 <netconn_recv_data+0x17c>)
 800a756:	f44f 7212 	mov.w	r2, #584	; 0x248
 800a75a:	4958      	ldr	r1, [pc, #352]	; (800a8bc <netconn_recv_data+0x180>)
 800a75c:	4858      	ldr	r0, [pc, #352]	; (800a8c0 <netconn_recv_data+0x184>)
 800a75e:	f00f f93f 	bl	80199e0 <iprintf>
 800a762:	f06f 030f 	mvn.w	r3, #15
 800a766:	e0a2      	b.n	800a8ae <netconn_recv_data+0x172>
  *new_buf = NULL;
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	2200      	movs	r2, #0
 800a76c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d109      	bne.n	800a788 <netconn_recv_data+0x4c>
 800a774:	4b50      	ldr	r3, [pc, #320]	; (800a8b8 <netconn_recv_data+0x17c>)
 800a776:	f240 224a 	movw	r2, #586	; 0x24a
 800a77a:	4952      	ldr	r1, [pc, #328]	; (800a8c4 <netconn_recv_data+0x188>)
 800a77c:	4850      	ldr	r0, [pc, #320]	; (800a8c0 <netconn_recv_data+0x184>)
 800a77e:	f00f f92f 	bl	80199e0 <iprintf>
 800a782:	f06f 030f 	mvn.w	r3, #15
 800a786:	e092      	b.n	800a8ae <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	3310      	adds	r3, #16
 800a78c:	4618      	mov	r0, r3
 800a78e:	f00d f8bc 	bl	801790a <sys_mbox_valid>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d10e      	bne.n	800a7b6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f000 fad4 	bl	800ad46 <netconn_err>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800a7a2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d002      	beq.n	800a7b0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800a7aa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a7ae:	e07e      	b.n	800a8ae <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800a7b0:	f06f 030a 	mvn.w	r3, #10
 800a7b4:	e07b      	b.n	800a8ae <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	7f1b      	ldrb	r3, [r3, #28]
 800a7ba:	f003 0302 	and.w	r3, r3, #2
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d10f      	bne.n	800a7e2 <netconn_recv_data+0xa6>
 800a7c2:	79fb      	ldrb	r3, [r7, #7]
 800a7c4:	f003 0304 	and.w	r3, r3, #4
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10a      	bne.n	800a7e2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	7f1b      	ldrb	r3, [r3, #28]
 800a7d0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d104      	bne.n	800a7e2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d023      	beq.n	800a82a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	3310      	adds	r3, #16
 800a7e6:	f107 0218 	add.w	r2, r7, #24
 800a7ea:	4611      	mov	r1, r2
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f00d f870 	bl	80178d2 <sys_arch_mbox_tryfetch>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7f8:	d11f      	bne.n	800a83a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f000 faa3 	bl	800ad46 <netconn_err>
 800a800:	4603      	mov	r3, r0
 800a802:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800a804:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d002      	beq.n	800a812 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800a80c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a810:	e04d      	b.n	800a8ae <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	7f1b      	ldrb	r3, [r3, #28]
 800a816:	f003 0301 	and.w	r3, r3, #1
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d002      	beq.n	800a824 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800a81e:	f06f 030a 	mvn.w	r3, #10
 800a822:	e044      	b.n	800a8ae <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800a824:	f06f 0306 	mvn.w	r3, #6
 800a828:	e041      	b.n	800a8ae <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	3310      	adds	r3, #16
 800a82e:	f107 0118 	add.w	r1, r7, #24
 800a832:	2200      	movs	r2, #0
 800a834:	4618      	mov	r0, r3
 800a836:	f00d f80d 	bl	8017854 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a842:	2b10      	cmp	r3, #16
 800a844:	d117      	bne.n	800a876 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	f107 0217 	add.w	r2, r7, #23
 800a84c:	4611      	mov	r1, r2
 800a84e:	4618      	mov	r0, r3
 800a850:	f000 faca 	bl	800ade8 <lwip_netconn_is_err_msg>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d009      	beq.n	800a86e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800a85a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a85e:	f113 0f0f 	cmn.w	r3, #15
 800a862:	d101      	bne.n	800a868 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	e022      	b.n	800a8ae <netconn_recv_data+0x172>
      }
      return err;
 800a868:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a86c:	e01f      	b.n	800a8ae <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	891b      	ldrh	r3, [r3, #8]
 800a872:	83fb      	strh	r3, [r7, #30]
 800a874:	e00d      	b.n	800a892 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d106      	bne.n	800a88a <netconn_recv_data+0x14e>
 800a87c:	4b0e      	ldr	r3, [pc, #56]	; (800a8b8 <netconn_recv_data+0x17c>)
 800a87e:	f240 2291 	movw	r2, #657	; 0x291
 800a882:	4911      	ldr	r1, [pc, #68]	; (800a8c8 <netconn_recv_data+0x18c>)
 800a884:	480e      	ldr	r0, [pc, #56]	; (800a8c0 <netconn_recv_data+0x184>)
 800a886:	f00f f8ab 	bl	80199e0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	891b      	ldrh	r3, [r3, #8]
 800a890:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	2b00      	cmp	r3, #0
 800a898:	d005      	beq.n	800a8a6 <netconn_recv_data+0x16a>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89e:	8bfa      	ldrh	r2, [r7, #30]
 800a8a0:	2101      	movs	r1, #1
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800a8a6:	69ba      	ldr	r2, [r7, #24]
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3720      	adds	r7, #32
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	0801adec 	.word	0x0801adec
 800a8bc:	0801b004 	.word	0x0801b004
 800a8c0:	0801ae44 	.word	0x0801ae44
 800a8c4:	0801b024 	.word	0x0801b024
 800a8c8:	0801b040 	.word	0x0801b040

0800a8cc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d005      	beq.n	800a8ea <netconn_tcp_recvd_msg+0x1e>
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8e6:	2b10      	cmp	r3, #16
 800a8e8:	d009      	beq.n	800a8fe <netconn_tcp_recvd_msg+0x32>
 800a8ea:	4b0c      	ldr	r3, [pc, #48]	; (800a91c <netconn_tcp_recvd_msg+0x50>)
 800a8ec:	f240 22a7 	movw	r2, #679	; 0x2a7
 800a8f0:	490b      	ldr	r1, [pc, #44]	; (800a920 <netconn_tcp_recvd_msg+0x54>)
 800a8f2:	480c      	ldr	r0, [pc, #48]	; (800a924 <netconn_tcp_recvd_msg+0x58>)
 800a8f4:	f00f f874 	bl	80199e0 <iprintf>
 800a8f8:	f06f 030f 	mvn.w	r3, #15
 800a8fc:	e00a      	b.n	800a914 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	68ba      	ldr	r2, [r7, #8]
 800a908:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a90a:	6879      	ldr	r1, [r7, #4]
 800a90c:	4806      	ldr	r0, [pc, #24]	; (800a928 <netconn_tcp_recvd_msg+0x5c>)
 800a90e:	f7ff fe05 	bl	800a51c <netconn_apimsg>
 800a912:	4603      	mov	r3, r0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	0801adec 	.word	0x0801adec
 800a920:	0801b04c 	.word	0x0801b04c
 800a924:	0801ae44 	.word	0x0801ae44
 800a928:	0800be75 	.word	0x0800be75

0800a92c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b090      	sub	sp, #64	; 0x40
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	4613      	mov	r3, r2
 800a938:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	3310      	adds	r3, #16
 800a93e:	4618      	mov	r0, r3
 800a940:	f00c ffe3 	bl	801790a <sys_mbox_valid>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d102      	bne.n	800a950 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800a94a:	f06f 030a 	mvn.w	r3, #10
 800a94e:	e06d      	b.n	800aa2c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	7f1b      	ldrb	r3, [r3, #28]
 800a954:	b25b      	sxtb	r3, r3
 800a956:	2b00      	cmp	r3, #0
 800a958:	da07      	bge.n	800a96a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	7f1b      	ldrb	r3, [r3, #28]
 800a95e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a962:	b2da      	uxtb	r2, r3
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800a968:	e039      	b.n	800a9de <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a96a:	79fb      	ldrb	r3, [r7, #7]
 800a96c:	461a      	mov	r2, r3
 800a96e:	68b9      	ldr	r1, [r7, #8]
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f7ff fee3 	bl	800a73c <netconn_recv_data>
 800a976:	4603      	mov	r3, r0
 800a978:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800a97c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a980:	2b00      	cmp	r3, #0
 800a982:	d002      	beq.n	800a98a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800a984:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a988:	e050      	b.n	800aa2c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a990:	79fb      	ldrb	r3, [r7, #7]
 800a992:	f003 0308 	and.w	r3, r3, #8
 800a996:	2b00      	cmp	r3, #0
 800a998:	d10e      	bne.n	800a9b8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800a99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d002      	beq.n	800a9a6 <netconn_recv_data_tcp+0x7a>
 800a9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a2:	891b      	ldrh	r3, [r3, #8]
 800a9a4:	e000      	b.n	800a9a8 <netconn_recv_data_tcp+0x7c>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a9aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a9ac:	f107 0214 	add.w	r2, r7, #20
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f7ff ff8a 	bl	800a8cc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d134      	bne.n	800aa28 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800a9be:	79fb      	ldrb	r3, [r7, #7]
 800a9c0:	f003 0310 	and.w	r3, r3, #16
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d009      	beq.n	800a9dc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	7f1b      	ldrb	r3, [r3, #28]
 800a9cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800a9d6:	f06f 0306 	mvn.w	r3, #6
 800a9da:	e027      	b.n	800aa2c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800a9dc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d005      	beq.n	800a9f2 <netconn_recv_data_tcp+0xc6>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	2101      	movs	r1, #1
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10f      	bne.n	800aa1a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f000 f9a3 	bl	800ad46 <netconn_err>
 800aa00:	4603      	mov	r3, r0
 800aa02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800aa06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d002      	beq.n	800aa14 <netconn_recv_data_tcp+0xe8>
          return err;
 800aa0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa12:	e00b      	b.n	800aa2c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800aa14:	f06f 030d 	mvn.w	r3, #13
 800aa18:	e008      	b.n	800aa2c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f000 f955 	bl	800accc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800aa22:	f06f 030e 	mvn.w	r3, #14
 800aa26:	e001      	b.n	800aa2c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800aa28:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3740      	adds	r7, #64	; 0x40
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b086      	sub	sp, #24
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d109      	bne.n	800aa5c <netconn_recv+0x28>
 800aa48:	4b32      	ldr	r3, [pc, #200]	; (800ab14 <netconn_recv+0xe0>)
 800aa4a:	f240 3263 	movw	r2, #867	; 0x363
 800aa4e:	4932      	ldr	r1, [pc, #200]	; (800ab18 <netconn_recv+0xe4>)
 800aa50:	4832      	ldr	r0, [pc, #200]	; (800ab1c <netconn_recv+0xe8>)
 800aa52:	f00e ffc5 	bl	80199e0 <iprintf>
 800aa56:	f06f 030f 	mvn.w	r3, #15
 800aa5a:	e056      	b.n	800ab0a <netconn_recv+0xd6>
  *new_buf = NULL;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d109      	bne.n	800aa7c <netconn_recv+0x48>
 800aa68:	4b2a      	ldr	r3, [pc, #168]	; (800ab14 <netconn_recv+0xe0>)
 800aa6a:	f240 3265 	movw	r2, #869	; 0x365
 800aa6e:	492c      	ldr	r1, [pc, #176]	; (800ab20 <netconn_recv+0xec>)
 800aa70:	482a      	ldr	r0, [pc, #168]	; (800ab1c <netconn_recv+0xe8>)
 800aa72:	f00e ffb5 	bl	80199e0 <iprintf>
 800aa76:	f06f 030f 	mvn.w	r3, #15
 800aa7a:	e046      	b.n	800ab0a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa84:	2b10      	cmp	r3, #16
 800aa86:	d13a      	bne.n	800aafe <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800aa8c:	2006      	movs	r0, #6
 800aa8e:	f002 fbcb 	bl	800d228 <memp_malloc>
 800aa92:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d102      	bne.n	800aaa0 <netconn_recv+0x6c>
      return ERR_MEM;
 800aa9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa9e:	e034      	b.n	800ab0a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800aaa0:	f107 030c 	add.w	r3, r7, #12
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f7ff ff3f 	bl	800a92c <netconn_recv_data_tcp>
 800aaae:	4603      	mov	r3, r0
 800aab0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800aab2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d006      	beq.n	800aac8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800aaba:	6979      	ldr	r1, [r7, #20]
 800aabc:	2006      	movs	r0, #6
 800aabe:	f002 fc29 	bl	800d314 <memp_free>
      return err;
 800aac2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aac6:	e020      	b.n	800ab0a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d106      	bne.n	800aadc <netconn_recv+0xa8>
 800aace:	4b11      	ldr	r3, [pc, #68]	; (800ab14 <netconn_recv+0xe0>)
 800aad0:	f240 3279 	movw	r2, #889	; 0x379
 800aad4:	4913      	ldr	r1, [pc, #76]	; (800ab24 <netconn_recv+0xf0>)
 800aad6:	4811      	ldr	r0, [pc, #68]	; (800ab1c <netconn_recv+0xe8>)
 800aad8:	f00e ff82 	bl	80199e0 <iprintf>

    buf->p = p;
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	2200      	movs	r2, #0
 800aaec:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	697a      	ldr	r2, [r7, #20]
 800aaf8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	e005      	b.n	800ab0a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800aafe:	2200      	movs	r2, #0
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7ff fe1a 	bl	800a73c <netconn_recv_data>
 800ab08:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3718      	adds	r7, #24
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	0801adec 	.word	0x0801adec
 800ab18:	0801b004 	.word	0x0801b004
 800ab1c:	0801ae44 	.word	0x0801ae44
 800ab20:	0801b024 	.word	0x0801b024
 800ab24:	0801b09c 	.word	0x0801b09c

0800ab28 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b088      	sub	sp, #32
 800ab2c:	af02      	add	r7, sp, #8
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	607a      	str	r2, [r7, #4]
 800ab34:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800ab3e:	78fa      	ldrb	r2, [r7, #3]
 800ab40:	f107 0110 	add.w	r1, r7, #16
 800ab44:	6a3b      	ldr	r3, [r7, #32]
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f000 f805 	bl	800ab5c <netconn_write_vectors_partly>
 800ab52:	4603      	mov	r3, r0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3718      	adds	r7, #24
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b092      	sub	sp, #72	; 0x48
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	60b9      	str	r1, [r7, #8]
 800ab66:	4611      	mov	r1, r2
 800ab68:	461a      	mov	r2, r3
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	80fb      	strh	r3, [r7, #6]
 800ab6e:	4613      	mov	r3, r2
 800ab70:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d109      	bne.n	800ab8c <netconn_write_vectors_partly+0x30>
 800ab78:	4b4e      	ldr	r3, [pc, #312]	; (800acb4 <netconn_write_vectors_partly+0x158>)
 800ab7a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ab7e:	494e      	ldr	r1, [pc, #312]	; (800acb8 <netconn_write_vectors_partly+0x15c>)
 800ab80:	484e      	ldr	r0, [pc, #312]	; (800acbc <netconn_write_vectors_partly+0x160>)
 800ab82:	f00e ff2d 	bl	80199e0 <iprintf>
 800ab86:	f06f 030f 	mvn.w	r3, #15
 800ab8a:	e08e      	b.n	800acaa <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab94:	2b10      	cmp	r3, #16
 800ab96:	d009      	beq.n	800abac <netconn_write_vectors_partly+0x50>
 800ab98:	4b46      	ldr	r3, [pc, #280]	; (800acb4 <netconn_write_vectors_partly+0x158>)
 800ab9a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800ab9e:	4948      	ldr	r1, [pc, #288]	; (800acc0 <netconn_write_vectors_partly+0x164>)
 800aba0:	4846      	ldr	r0, [pc, #280]	; (800acbc <netconn_write_vectors_partly+0x160>)
 800aba2:	f00e ff1d 	bl	80199e0 <iprintf>
 800aba6:	f06f 0305 	mvn.w	r3, #5
 800abaa:	e07e      	b.n	800acaa <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	7f1b      	ldrb	r3, [r3, #28]
 800abb0:	f003 0302 	and.w	r3, r3, #2
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d104      	bne.n	800abc2 <netconn_write_vectors_partly+0x66>
 800abb8:	797b      	ldrb	r3, [r7, #5]
 800abba:	f003 0304 	and.w	r3, r3, #4
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d001      	beq.n	800abc6 <netconn_write_vectors_partly+0x6a>
 800abc2:	2301      	movs	r3, #1
 800abc4:	e000      	b.n	800abc8 <netconn_write_vectors_partly+0x6c>
 800abc6:	2300      	movs	r3, #0
 800abc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800abcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d005      	beq.n	800abe0 <netconn_write_vectors_partly+0x84>
 800abd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d102      	bne.n	800abe0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800abda:	f06f 0305 	mvn.w	r3, #5
 800abde:	e064      	b.n	800acaa <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800abe0:	2300      	movs	r3, #0
 800abe2:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800abe4:	2300      	movs	r3, #0
 800abe6:	643b      	str	r3, [r7, #64]	; 0x40
 800abe8:	e015      	b.n	800ac16 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800abea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abec:	00db      	lsls	r3, r3, #3
 800abee:	68ba      	ldr	r2, [r7, #8]
 800abf0:	4413      	add	r3, r2
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abf6:	4413      	add	r3, r2
 800abf8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800abfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abfc:	00db      	lsls	r3, r3, #3
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	4413      	add	r3, r2
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d202      	bcs.n	800ac10 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800ac0a:	f06f 0305 	mvn.w	r3, #5
 800ac0e:	e04c      	b.n	800acaa <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800ac10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac12:	3301      	adds	r3, #1
 800ac14:	643b      	str	r3, [r7, #64]	; 0x40
 800ac16:	88fb      	ldrh	r3, [r7, #6]
 800ac18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	dbe5      	blt.n	800abea <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800ac1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d101      	bne.n	800ac28 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800ac24:	2300      	movs	r3, #0
 800ac26:	e040      	b.n	800acaa <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800ac28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	da0a      	bge.n	800ac44 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800ac2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d102      	bne.n	800ac3a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800ac34:	f06f 0305 	mvn.w	r3, #5
 800ac38:	e037      	b.n	800acaa <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800ac3a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ac3e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800ac40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac42:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800ac4c:	88fb      	ldrh	r3, [r7, #6]
 800ac4e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800ac50:	2300      	movs	r3, #0
 800ac52:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800ac54:	797b      	ldrb	r3, [r7, #5]
 800ac56:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800ac5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac5c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800ac62:	f107 0314 	add.w	r3, r7, #20
 800ac66:	4619      	mov	r1, r3
 800ac68:	4816      	ldr	r0, [pc, #88]	; (800acc4 <netconn_write_vectors_partly+0x168>)
 800ac6a:	f7ff fc57 	bl	800a51c <netconn_apimsg>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800ac74:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d114      	bne.n	800aca6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800ac7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d002      	beq.n	800ac88 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800ac82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac86:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800ac88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10a      	bne.n	800aca6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800ac90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d006      	beq.n	800aca6 <netconn_write_vectors_partly+0x14a>
 800ac98:	4b06      	ldr	r3, [pc, #24]	; (800acb4 <netconn_write_vectors_partly+0x158>)
 800ac9a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ac9e:	490a      	ldr	r1, [pc, #40]	; (800acc8 <netconn_write_vectors_partly+0x16c>)
 800aca0:	4806      	ldr	r0, [pc, #24]	; (800acbc <netconn_write_vectors_partly+0x160>)
 800aca2:	f00e fe9d 	bl	80199e0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800aca6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3748      	adds	r7, #72	; 0x48
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	0801adec 	.word	0x0801adec
 800acb8:	0801b0c4 	.word	0x0801b0c4
 800acbc:	0801ae44 	.word	0x0801ae44
 800acc0:	0801b0e0 	.word	0x0801b0e0
 800acc4:	0800c279 	.word	0x0800c279
 800acc8:	0801b104 	.word	0x0801b104

0800accc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b08c      	sub	sp, #48	; 0x30
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	460b      	mov	r3, r1
 800acd6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d109      	bne.n	800acf2 <netconn_close_shutdown+0x26>
 800acde:	4b0f      	ldr	r3, [pc, #60]	; (800ad1c <netconn_close_shutdown+0x50>)
 800ace0:	f240 4247 	movw	r2, #1095	; 0x447
 800ace4:	490e      	ldr	r1, [pc, #56]	; (800ad20 <netconn_close_shutdown+0x54>)
 800ace6:	480f      	ldr	r0, [pc, #60]	; (800ad24 <netconn_close_shutdown+0x58>)
 800ace8:	f00e fe7a 	bl	80199e0 <iprintf>
 800acec:	f06f 030f 	mvn.w	r3, #15
 800acf0:	e010      	b.n	800ad14 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800acf6:	78fb      	ldrb	r3, [r7, #3]
 800acf8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800acfa:	2329      	movs	r3, #41	; 0x29
 800acfc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800acfe:	f107 030c 	add.w	r3, r7, #12
 800ad02:	4619      	mov	r1, r3
 800ad04:	4808      	ldr	r0, [pc, #32]	; (800ad28 <netconn_close_shutdown+0x5c>)
 800ad06:	f7ff fc09 	bl	800a51c <netconn_apimsg>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ad10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3730      	adds	r7, #48	; 0x30
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	0801adec 	.word	0x0801adec
 800ad20:	0801b128 	.word	0x0801b128
 800ad24:	0801ae44 	.word	0x0801ae44
 800ad28:	0800c391 	.word	0x0800c391

0800ad2c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800ad34:	2103      	movs	r1, #3
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7ff ffc8 	bl	800accc <netconn_close_shutdown>
 800ad3c:	4603      	mov	r3, r0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b084      	sub	sp, #16
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d101      	bne.n	800ad58 <netconn_err+0x12>
    return ERR_OK;
 800ad54:	2300      	movs	r3, #0
 800ad56:	e00d      	b.n	800ad74 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800ad58:	f00c fef2 	bl	8017b40 <sys_arch_protect>
 800ad5c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	7a1b      	ldrb	r3, [r3, #8]
 800ad62:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f00c fef6 	bl	8017b5c <sys_arch_unprotect>
  return err;
 800ad70:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	4603      	mov	r3, r0
 800ad84:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800ad86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad8a:	f113 0f0d 	cmn.w	r3, #13
 800ad8e:	d009      	beq.n	800ada4 <lwip_netconn_err_to_msg+0x28>
 800ad90:	f113 0f0d 	cmn.w	r3, #13
 800ad94:	dc0c      	bgt.n	800adb0 <lwip_netconn_err_to_msg+0x34>
 800ad96:	f113 0f0f 	cmn.w	r3, #15
 800ad9a:	d007      	beq.n	800adac <lwip_netconn_err_to_msg+0x30>
 800ad9c:	f113 0f0e 	cmn.w	r3, #14
 800ada0:	d002      	beq.n	800ada8 <lwip_netconn_err_to_msg+0x2c>
 800ada2:	e005      	b.n	800adb0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800ada4:	4b0a      	ldr	r3, [pc, #40]	; (800add0 <lwip_netconn_err_to_msg+0x54>)
 800ada6:	e00e      	b.n	800adc6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800ada8:	4b0a      	ldr	r3, [pc, #40]	; (800add4 <lwip_netconn_err_to_msg+0x58>)
 800adaa:	e00c      	b.n	800adc6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800adac:	4b0a      	ldr	r3, [pc, #40]	; (800add8 <lwip_netconn_err_to_msg+0x5c>)
 800adae:	e00a      	b.n	800adc6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800adb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d005      	beq.n	800adc4 <lwip_netconn_err_to_msg+0x48>
 800adb8:	4b08      	ldr	r3, [pc, #32]	; (800addc <lwip_netconn_err_to_msg+0x60>)
 800adba:	227d      	movs	r2, #125	; 0x7d
 800adbc:	4908      	ldr	r1, [pc, #32]	; (800ade0 <lwip_netconn_err_to_msg+0x64>)
 800adbe:	4809      	ldr	r0, [pc, #36]	; (800ade4 <lwip_netconn_err_to_msg+0x68>)
 800adc0:	f00e fe0e 	bl	80199e0 <iprintf>
      return NULL;
 800adc4:	2300      	movs	r3, #0
  }
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	0801e220 	.word	0x0801e220
 800add4:	0801e221 	.word	0x0801e221
 800add8:	0801e222 	.word	0x0801e222
 800addc:	0801b144 	.word	0x0801b144
 800ade0:	0801b178 	.word	0x0801b178
 800ade4:	0801b188 	.word	0x0801b188

0800ade8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d105      	bne.n	800ae04 <lwip_netconn_is_err_msg+0x1c>
 800adf8:	4b12      	ldr	r3, [pc, #72]	; (800ae44 <lwip_netconn_is_err_msg+0x5c>)
 800adfa:	2285      	movs	r2, #133	; 0x85
 800adfc:	4912      	ldr	r1, [pc, #72]	; (800ae48 <lwip_netconn_is_err_msg+0x60>)
 800adfe:	4813      	ldr	r0, [pc, #76]	; (800ae4c <lwip_netconn_is_err_msg+0x64>)
 800ae00:	f00e fdee 	bl	80199e0 <iprintf>

  if (msg == &netconn_aborted) {
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a12      	ldr	r2, [pc, #72]	; (800ae50 <lwip_netconn_is_err_msg+0x68>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d104      	bne.n	800ae16 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	22f3      	movs	r2, #243	; 0xf3
 800ae10:	701a      	strb	r2, [r3, #0]
    return 1;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e012      	b.n	800ae3c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4a0e      	ldr	r2, [pc, #56]	; (800ae54 <lwip_netconn_is_err_msg+0x6c>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d104      	bne.n	800ae28 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	22f2      	movs	r2, #242	; 0xf2
 800ae22:	701a      	strb	r2, [r3, #0]
    return 1;
 800ae24:	2301      	movs	r3, #1
 800ae26:	e009      	b.n	800ae3c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a0b      	ldr	r2, [pc, #44]	; (800ae58 <lwip_netconn_is_err_msg+0x70>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d104      	bne.n	800ae3a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	22f1      	movs	r2, #241	; 0xf1
 800ae34:	701a      	strb	r2, [r3, #0]
    return 1;
 800ae36:	2301      	movs	r3, #1
 800ae38:	e000      	b.n	800ae3c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	0801b144 	.word	0x0801b144
 800ae48:	0801b1b0 	.word	0x0801b1b0
 800ae4c:	0801b188 	.word	0x0801b188
 800ae50:	0801e220 	.word	0x0801e220
 800ae54:	0801e221 	.word	0x0801e221
 800ae58:	0801e222 	.word	0x0801e222

0800ae5c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b088      	sub	sp, #32
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
 800ae68:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d105      	bne.n	800ae7c <recv_udp+0x20>
 800ae70:	4b34      	ldr	r3, [pc, #208]	; (800af44 <recv_udp+0xe8>)
 800ae72:	22e5      	movs	r2, #229	; 0xe5
 800ae74:	4934      	ldr	r1, [pc, #208]	; (800af48 <recv_udp+0xec>)
 800ae76:	4835      	ldr	r0, [pc, #212]	; (800af4c <recv_udp+0xf0>)
 800ae78:	f00e fdb2 	bl	80199e0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d105      	bne.n	800ae8e <recv_udp+0x32>
 800ae82:	4b30      	ldr	r3, [pc, #192]	; (800af44 <recv_udp+0xe8>)
 800ae84:	22e6      	movs	r2, #230	; 0xe6
 800ae86:	4932      	ldr	r1, [pc, #200]	; (800af50 <recv_udp+0xf4>)
 800ae88:	4830      	ldr	r0, [pc, #192]	; (800af4c <recv_udp+0xf0>)
 800ae8a:	f00e fda9 	bl	80199e0 <iprintf>
  conn = (struct netconn *)arg;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d103      	bne.n	800aea0 <recv_udp+0x44>
    pbuf_free(p);
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f003 f8df 	bl	800e05c <pbuf_free>
    return;
 800ae9e:	e04d      	b.n	800af3c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d005      	beq.n	800aeb6 <recv_udp+0x5a>
 800aeaa:	4b26      	ldr	r3, [pc, #152]	; (800af44 <recv_udp+0xe8>)
 800aeac:	22ee      	movs	r2, #238	; 0xee
 800aeae:	4929      	ldr	r1, [pc, #164]	; (800af54 <recv_udp+0xf8>)
 800aeb0:	4826      	ldr	r0, [pc, #152]	; (800af4c <recv_udp+0xf0>)
 800aeb2:	f00e fd95 	bl	80199e0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	3310      	adds	r3, #16
 800aeba:	4618      	mov	r0, r3
 800aebc:	f00c fd25 	bl	801790a <sys_mbox_valid>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d103      	bne.n	800aece <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f003 f8c8 	bl	800e05c <pbuf_free>
    return;
 800aecc:	e036      	b.n	800af3c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800aece:	2006      	movs	r0, #6
 800aed0:	f002 f9aa 	bl	800d228 <memp_malloc>
 800aed4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d103      	bne.n	800aee4 <recv_udp+0x88>
    pbuf_free(p);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f003 f8bd 	bl	800e05c <pbuf_free>
    return;
 800aee2:	e02b      	b.n	800af3c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d002      	beq.n	800aefc <recv_udp+0xa0>
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	e000      	b.n	800aefe <recv_udp+0xa2>
 800aefc:	2300      	movs	r3, #0
 800aefe:	69ba      	ldr	r2, [r7, #24]
 800af00:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800af02:	69bb      	ldr	r3, [r7, #24]
 800af04:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800af06:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	891b      	ldrh	r3, [r3, #8]
 800af0c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	3310      	adds	r3, #16
 800af12:	69b9      	ldr	r1, [r7, #24]
 800af14:	4618      	mov	r0, r3
 800af16:	f00c fc83 	bl	8017820 <sys_mbox_trypost>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d003      	beq.n	800af28 <recv_udp+0xcc>
    netbuf_delete(buf);
 800af20:	69b8      	ldr	r0, [r7, #24]
 800af22:	f001 fac1 	bl	800c4a8 <netbuf_delete>
    return;
 800af26:	e009      	b.n	800af3c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d005      	beq.n	800af3c <recv_udp+0xe0>
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af34:	8afa      	ldrh	r2, [r7, #22]
 800af36:	2100      	movs	r1, #0
 800af38:	69f8      	ldr	r0, [r7, #28]
 800af3a:	4798      	blx	r3
  }
}
 800af3c:	3720      	adds	r7, #32
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	0801b144 	.word	0x0801b144
 800af48:	0801b1bc 	.word	0x0801b1bc
 800af4c:	0801b188 	.word	0x0801b188
 800af50:	0801b1e0 	.word	0x0801b1e0
 800af54:	0801b200 	.word	0x0801b200

0800af58 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b088      	sub	sp, #32
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
 800af64:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d106      	bne.n	800af7a <recv_tcp+0x22>
 800af6c:	4b36      	ldr	r3, [pc, #216]	; (800b048 <recv_tcp+0xf0>)
 800af6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800af72:	4936      	ldr	r1, [pc, #216]	; (800b04c <recv_tcp+0xf4>)
 800af74:	4836      	ldr	r0, [pc, #216]	; (800b050 <recv_tcp+0xf8>)
 800af76:	f00e fd33 	bl	80199e0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d106      	bne.n	800af8e <recv_tcp+0x36>
 800af80:	4b31      	ldr	r3, [pc, #196]	; (800b048 <recv_tcp+0xf0>)
 800af82:	f240 122d 	movw	r2, #301	; 0x12d
 800af86:	4933      	ldr	r1, [pc, #204]	; (800b054 <recv_tcp+0xfc>)
 800af88:	4831      	ldr	r0, [pc, #196]	; (800b050 <recv_tcp+0xf8>)
 800af8a:	f00e fd29 	bl	80199e0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800af8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d006      	beq.n	800afa4 <recv_tcp+0x4c>
 800af96:	4b2c      	ldr	r3, [pc, #176]	; (800b048 <recv_tcp+0xf0>)
 800af98:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800af9c:	492e      	ldr	r1, [pc, #184]	; (800b058 <recv_tcp+0x100>)
 800af9e:	482c      	ldr	r0, [pc, #176]	; (800b050 <recv_tcp+0xf8>)
 800afa0:	f00e fd1e 	bl	80199e0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d102      	bne.n	800afb4 <recv_tcp+0x5c>
    return ERR_VAL;
 800afae:	f06f 0305 	mvn.w	r3, #5
 800afb2:	e045      	b.n	800b040 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	68ba      	ldr	r2, [r7, #8]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d006      	beq.n	800afcc <recv_tcp+0x74>
 800afbe:	4b22      	ldr	r3, [pc, #136]	; (800b048 <recv_tcp+0xf0>)
 800afc0:	f240 1235 	movw	r2, #309	; 0x135
 800afc4:	4925      	ldr	r1, [pc, #148]	; (800b05c <recv_tcp+0x104>)
 800afc6:	4822      	ldr	r0, [pc, #136]	; (800b050 <recv_tcp+0xf8>)
 800afc8:	f00e fd0a 	bl	80199e0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	3310      	adds	r3, #16
 800afd0:	4618      	mov	r0, r3
 800afd2:	f00c fc9a 	bl	801790a <sys_mbox_valid>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d10d      	bne.n	800aff8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d008      	beq.n	800aff4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	891b      	ldrh	r3, [r3, #8]
 800afe6:	4619      	mov	r1, r3
 800afe8:	68b8      	ldr	r0, [r7, #8]
 800afea:	f003 fe8d 	bl	800ed08 <tcp_recved>
      pbuf_free(p);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f003 f834 	bl	800e05c <pbuf_free>
    }
    return ERR_OK;
 800aff4:	2300      	movs	r3, #0
 800aff6:	e023      	b.n	800b040 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d005      	beq.n	800b00a <recv_tcp+0xb2>
    msg = p;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	891b      	ldrh	r3, [r3, #8]
 800b006:	83fb      	strh	r3, [r7, #30]
 800b008:	e003      	b.n	800b012 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800b00a:	4b15      	ldr	r3, [pc, #84]	; (800b060 <recv_tcp+0x108>)
 800b00c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800b00e:	2300      	movs	r3, #0
 800b010:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	3310      	adds	r3, #16
 800b016:	69b9      	ldr	r1, [r7, #24]
 800b018:	4618      	mov	r0, r3
 800b01a:	f00c fc01 	bl	8017820 <sys_mbox_trypost>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d002      	beq.n	800b02a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800b024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b028:	e00a      	b.n	800b040 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d005      	beq.n	800b03e <recv_tcp+0xe6>
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b036:	8bfa      	ldrh	r2, [r7, #30]
 800b038:	2100      	movs	r1, #0
 800b03a:	6978      	ldr	r0, [r7, #20]
 800b03c:	4798      	blx	r3
  }

  return ERR_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3720      	adds	r7, #32
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	0801b144 	.word	0x0801b144
 800b04c:	0801b220 	.word	0x0801b220
 800b050:	0801b188 	.word	0x0801b188
 800b054:	0801b244 	.word	0x0801b244
 800b058:	0801b264 	.word	0x0801b264
 800b05c:	0801b27c 	.word	0x0801b27c
 800b060:	0801e222 	.word	0x0801e222

0800b064 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d106      	bne.n	800b086 <poll_tcp+0x22>
 800b078:	4b29      	ldr	r3, [pc, #164]	; (800b120 <poll_tcp+0xbc>)
 800b07a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800b07e:	4929      	ldr	r1, [pc, #164]	; (800b124 <poll_tcp+0xc0>)
 800b080:	4829      	ldr	r0, [pc, #164]	; (800b128 <poll_tcp+0xc4>)
 800b082:	f00e fcad 	bl	80199e0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	785b      	ldrb	r3, [r3, #1]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d104      	bne.n	800b098 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b08e:	2101      	movs	r1, #1
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f000 ff25 	bl	800bee0 <lwip_netconn_do_writemore>
 800b096:	e016      	b.n	800b0c6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	785b      	ldrb	r3, [r3, #1]
 800b09c:	2b04      	cmp	r3, #4
 800b09e:	d112      	bne.n	800b0c6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	6a1b      	ldr	r3, [r3, #32]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00a      	beq.n	800b0be <poll_tcp+0x5a>
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6a1b      	ldr	r3, [r3, #32]
 800b0ac:	7a5b      	ldrb	r3, [r3, #9]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d005      	beq.n	800b0be <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6a1b      	ldr	r3, [r3, #32]
 800b0b6:	7a5a      	ldrb	r2, [r3, #9]
 800b0b8:	3a01      	subs	r2, #1
 800b0ba:	b2d2      	uxtb	r2, r2
 800b0bc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b0be:	2101      	movs	r1, #1
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f000 fb3b 	bl	800b73c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	7f1b      	ldrb	r3, [r3, #28]
 800b0ca:	f003 0310 	and.w	r3, r3, #16
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d021      	beq.n	800b116 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d01d      	beq.n	800b116 <poll_tcp+0xb2>
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b0e2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b0e6:	d316      	bcc.n	800b116 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b0f0:	2b04      	cmp	r3, #4
 800b0f2:	d810      	bhi.n	800b116 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	7f1b      	ldrb	r3, [r3, #28]
 800b0f8:	f023 0310 	bic.w	r3, r3, #16
 800b0fc:	b2da      	uxtb	r2, r3
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b106:	2b00      	cmp	r3, #0
 800b108:	d005      	beq.n	800b116 <poll_tcp+0xb2>
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10e:	2200      	movs	r2, #0
 800b110:	2102      	movs	r1, #2
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b116:	2300      	movs	r3, #0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	0801b144 	.word	0x0801b144
 800b124:	0801b29c 	.word	0x0801b29c
 800b128:	0801b188 	.word	0x0801b188

0800b12c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b086      	sub	sp, #24
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	4613      	mov	r3, r2
 800b138:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d106      	bne.n	800b152 <sent_tcp+0x26>
 800b144:	4b20      	ldr	r3, [pc, #128]	; (800b1c8 <sent_tcp+0x9c>)
 800b146:	f240 1293 	movw	r2, #403	; 0x193
 800b14a:	4920      	ldr	r1, [pc, #128]	; (800b1cc <sent_tcp+0xa0>)
 800b14c:	4820      	ldr	r0, [pc, #128]	; (800b1d0 <sent_tcp+0xa4>)
 800b14e:	f00e fc47 	bl	80199e0 <iprintf>

  if (conn) {
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d032      	beq.n	800b1be <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	785b      	ldrb	r3, [r3, #1]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d104      	bne.n	800b16a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b160:	2101      	movs	r1, #1
 800b162:	6978      	ldr	r0, [r7, #20]
 800b164:	f000 febc 	bl	800bee0 <lwip_netconn_do_writemore>
 800b168:	e007      	b.n	800b17a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	785b      	ldrb	r3, [r3, #1]
 800b16e:	2b04      	cmp	r3, #4
 800b170:	d103      	bne.n	800b17a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b172:	2101      	movs	r1, #1
 800b174:	6978      	ldr	r0, [r7, #20]
 800b176:	f000 fae1 	bl	800b73c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d01d      	beq.n	800b1be <sent_tcp+0x92>
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b18a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b18e:	d316      	bcc.n	800b1be <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b198:	2b04      	cmp	r3, #4
 800b19a:	d810      	bhi.n	800b1be <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	7f1b      	ldrb	r3, [r3, #28]
 800b1a0:	f023 0310 	bic.w	r3, r3, #16
 800b1a4:	b2da      	uxtb	r2, r3
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d005      	beq.n	800b1be <sent_tcp+0x92>
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b6:	88fa      	ldrh	r2, [r7, #6]
 800b1b8:	2102      	movs	r1, #2
 800b1ba:	6978      	ldr	r0, [r7, #20]
 800b1bc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3718      	adds	r7, #24
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	0801b144 	.word	0x0801b144
 800b1cc:	0801b29c 	.word	0x0801b29c
 800b1d0:	0801b188 	.word	0x0801b188

0800b1d4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b088      	sub	sp, #32
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	460b      	mov	r3, r1
 800b1de:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d106      	bne.n	800b1f8 <err_tcp+0x24>
 800b1ea:	4b5f      	ldr	r3, [pc, #380]	; (800b368 <err_tcp+0x194>)
 800b1ec:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800b1f0:	495e      	ldr	r1, [pc, #376]	; (800b36c <err_tcp+0x198>)
 800b1f2:	485f      	ldr	r0, [pc, #380]	; (800b370 <err_tcp+0x19c>)
 800b1f4:	f00e fbf4 	bl	80199e0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800b1f8:	f00c fca2 	bl	8017b40 <sys_arch_protect>
 800b1fc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	2200      	movs	r2, #0
 800b202:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	78fa      	ldrb	r2, [r7, #3]
 800b208:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	7f1b      	ldrb	r3, [r3, #28]
 800b20e:	f043 0301 	orr.w	r3, r3, #1
 800b212:	b2da      	uxtb	r2, r3
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	785b      	ldrb	r3, [r3, #1]
 800b21c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	2200      	movs	r2, #0
 800b222:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800b224:	69b8      	ldr	r0, [r7, #24]
 800b226:	f00c fc99 	bl	8017b5c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b22a:	69fb      	ldr	r3, [r7, #28]
 800b22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d005      	beq.n	800b23e <err_tcp+0x6a>
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b236:	2200      	movs	r2, #0
 800b238:	2104      	movs	r1, #4
 800b23a:	69f8      	ldr	r0, [r7, #28]
 800b23c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b242:	2b00      	cmp	r3, #0
 800b244:	d005      	beq.n	800b252 <err_tcp+0x7e>
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24a:	2200      	movs	r2, #0
 800b24c:	2100      	movs	r1, #0
 800b24e:	69f8      	ldr	r0, [r7, #28]
 800b250:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b252:	69fb      	ldr	r3, [r7, #28]
 800b254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b256:	2b00      	cmp	r3, #0
 800b258:	d005      	beq.n	800b266 <err_tcp+0x92>
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25e:	2200      	movs	r2, #0
 800b260:	2102      	movs	r1, #2
 800b262:	69f8      	ldr	r0, [r7, #28]
 800b264:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800b266:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7ff fd86 	bl	800ad7c <lwip_netconn_err_to_msg>
 800b270:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	3310      	adds	r3, #16
 800b276:	4618      	mov	r0, r3
 800b278:	f00c fb47 	bl	801790a <sys_mbox_valid>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d005      	beq.n	800b28e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	3310      	adds	r3, #16
 800b286:	6939      	ldr	r1, [r7, #16]
 800b288:	4618      	mov	r0, r3
 800b28a:	f00c fac9 	bl	8017820 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	3314      	adds	r3, #20
 800b292:	4618      	mov	r0, r3
 800b294:	f00c fb39 	bl	801790a <sys_mbox_valid>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d005      	beq.n	800b2aa <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800b29e:	69fb      	ldr	r3, [r7, #28]
 800b2a0:	3314      	adds	r3, #20
 800b2a2:	6939      	ldr	r1, [r7, #16]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f00c fabb 	bl	8017820 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800b2aa:	7dfb      	ldrb	r3, [r7, #23]
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d005      	beq.n	800b2bc <err_tcp+0xe8>
 800b2b0:	7dfb      	ldrb	r3, [r7, #23]
 800b2b2:	2b04      	cmp	r3, #4
 800b2b4:	d002      	beq.n	800b2bc <err_tcp+0xe8>
 800b2b6:	7dfb      	ldrb	r3, [r7, #23]
 800b2b8:	2b03      	cmp	r3, #3
 800b2ba:	d143      	bne.n	800b344 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800b2bc:	69fb      	ldr	r3, [r7, #28]
 800b2be:	7f1b      	ldrb	r3, [r3, #28]
 800b2c0:	f003 0304 	and.w	r3, r3, #4
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	bf14      	ite	ne
 800b2c8:	2301      	movne	r3, #1
 800b2ca:	2300      	moveq	r3, #0
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	7f1b      	ldrb	r3, [r3, #28]
 800b2d4:	f023 0304 	bic.w	r3, r3, #4
 800b2d8:	b2da      	uxtb	r2, r3
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d13b      	bne.n	800b35c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	6a1b      	ldr	r3, [r3, #32]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d106      	bne.n	800b2fa <err_tcp+0x126>
 800b2ec:	4b1e      	ldr	r3, [pc, #120]	; (800b368 <err_tcp+0x194>)
 800b2ee:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b2f2:	4920      	ldr	r1, [pc, #128]	; (800b374 <err_tcp+0x1a0>)
 800b2f4:	481e      	ldr	r0, [pc, #120]	; (800b370 <err_tcp+0x19c>)
 800b2f6:	f00e fb73 	bl	80199e0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800b2fa:	7dfb      	ldrb	r3, [r7, #23]
 800b2fc:	2b04      	cmp	r3, #4
 800b2fe:	d104      	bne.n	800b30a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	6a1b      	ldr	r3, [r3, #32]
 800b304:	2200      	movs	r2, #0
 800b306:	711a      	strb	r2, [r3, #4]
 800b308:	e003      	b.n	800b312 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800b30a:	69fb      	ldr	r3, [r7, #28]
 800b30c:	6a1b      	ldr	r3, [r3, #32]
 800b30e:	78fa      	ldrb	r2, [r7, #3]
 800b310:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	6a1b      	ldr	r3, [r3, #32]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	330c      	adds	r3, #12
 800b31a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800b31c:	68b8      	ldr	r0, [r7, #8]
 800b31e:	f00c fb85 	bl	8017a2c <sys_sem_valid>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d106      	bne.n	800b336 <err_tcp+0x162>
 800b328:	4b0f      	ldr	r3, [pc, #60]	; (800b368 <err_tcp+0x194>)
 800b32a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800b32e:	4912      	ldr	r1, [pc, #72]	; (800b378 <err_tcp+0x1a4>)
 800b330:	480f      	ldr	r0, [pc, #60]	; (800b370 <err_tcp+0x19c>)
 800b332:	f00e fb55 	bl	80199e0 <iprintf>
      conn->current_msg = NULL;
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	2200      	movs	r2, #0
 800b33a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800b33c:	68b8      	ldr	r0, [r7, #8]
 800b33e:	f00c fb5b 	bl	80179f8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800b342:	e00b      	b.n	800b35c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	6a1b      	ldr	r3, [r3, #32]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d008      	beq.n	800b35e <err_tcp+0x18a>
 800b34c:	4b06      	ldr	r3, [pc, #24]	; (800b368 <err_tcp+0x194>)
 800b34e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b352:	490a      	ldr	r1, [pc, #40]	; (800b37c <err_tcp+0x1a8>)
 800b354:	4806      	ldr	r0, [pc, #24]	; (800b370 <err_tcp+0x19c>)
 800b356:	f00e fb43 	bl	80199e0 <iprintf>
  }
}
 800b35a:	e000      	b.n	800b35e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800b35c:	bf00      	nop
}
 800b35e:	bf00      	nop
 800b360:	3720      	adds	r7, #32
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	0801b144 	.word	0x0801b144
 800b36c:	0801b29c 	.word	0x0801b29c
 800b370:	0801b188 	.word	0x0801b188
 800b374:	0801b2ac 	.word	0x0801b2ac
 800b378:	0801b2c8 	.word	0x0801b2c8
 800b37c:	0801b2e4 	.word	0x0801b2e4

0800b380 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800b38e:	6879      	ldr	r1, [r7, #4]
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	f004 fc97 	bl	800fcc4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800b396:	490a      	ldr	r1, [pc, #40]	; (800b3c0 <setup_tcp+0x40>)
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f004 fca5 	bl	800fce8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800b39e:	4909      	ldr	r1, [pc, #36]	; (800b3c4 <setup_tcp+0x44>)
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f004 fcc3 	bl	800fd2c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800b3a6:	2202      	movs	r2, #2
 800b3a8:	4907      	ldr	r1, [pc, #28]	; (800b3c8 <setup_tcp+0x48>)
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f004 fd1a 	bl	800fde4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800b3b0:	4906      	ldr	r1, [pc, #24]	; (800b3cc <setup_tcp+0x4c>)
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f004 fcdc 	bl	800fd70 <tcp_err>
}
 800b3b8:	bf00      	nop
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	0800af59 	.word	0x0800af59
 800b3c4:	0800b12d 	.word	0x0800b12d
 800b3c8:	0800b065 	.word	0x0800b065
 800b3cc:	0800b1d5 	.word	0x0800b1d5

0800b3d0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800b3d0:	b590      	push	{r4, r7, lr}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d006      	beq.n	800b3f4 <pcb_new+0x24>
 800b3e6:	4b2b      	ldr	r3, [pc, #172]	; (800b494 <pcb_new+0xc4>)
 800b3e8:	f240 2265 	movw	r2, #613	; 0x265
 800b3ec:	492a      	ldr	r1, [pc, #168]	; (800b498 <pcb_new+0xc8>)
 800b3ee:	482b      	ldr	r0, [pc, #172]	; (800b49c <pcb_new+0xcc>)
 800b3f0:	f00e faf6 	bl	80199e0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b3fe:	2b10      	cmp	r3, #16
 800b400:	d022      	beq.n	800b448 <pcb_new+0x78>
 800b402:	2b20      	cmp	r3, #32
 800b404:	d133      	bne.n	800b46e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681c      	ldr	r4, [r3, #0]
 800b40a:	7bfb      	ldrb	r3, [r7, #15]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f009 fda6 	bl	8014f5e <udp_new_ip_type>
 800b412:	4603      	mov	r3, r0
 800b414:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d02a      	beq.n	800b476 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	2b22      	cmp	r3, #34	; 0x22
 800b428:	d104      	bne.n	800b434 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	2201      	movs	r2, #1
 800b432:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	6858      	ldr	r0, [r3, #4]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	461a      	mov	r2, r3
 800b440:	4917      	ldr	r1, [pc, #92]	; (800b4a0 <pcb_new+0xd0>)
 800b442:	f009 fd13 	bl	8014e6c <udp_recv>
      }
      break;
 800b446:	e016      	b.n	800b476 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681c      	ldr	r4, [r3, #0]
 800b44c:	7bfb      	ldrb	r3, [r7, #15]
 800b44e:	4618      	mov	r0, r3
 800b450:	f004 fc2a 	bl	800fca8 <tcp_new_ip_type>
 800b454:	4603      	mov	r3, r0
 800b456:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00b      	beq.n	800b47a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4618      	mov	r0, r3
 800b468:	f7ff ff8a 	bl	800b380 <setup_tcp>
      }
      break;
 800b46c:	e005      	b.n	800b47a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	22fa      	movs	r2, #250	; 0xfa
 800b472:	711a      	strb	r2, [r3, #4]
      return;
 800b474:	e00a      	b.n	800b48c <pcb_new+0xbc>
      break;
 800b476:	bf00      	nop
 800b478:	e000      	b.n	800b47c <pcb_new+0xac>
      break;
 800b47a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d102      	bne.n	800b48c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	22ff      	movs	r2, #255	; 0xff
 800b48a:	711a      	strb	r2, [r3, #4]
  }
}
 800b48c:	3714      	adds	r7, #20
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd90      	pop	{r4, r7, pc}
 800b492:	bf00      	nop
 800b494:	0801b144 	.word	0x0801b144
 800b498:	0801b328 	.word	0x0801b328
 800b49c:	0801b188 	.word	0x0801b188
 800b4a0:	0800ae5d 	.word	0x0800ae5d

0800b4a4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d102      	bne.n	800b4c6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f7ff ff85 	bl	800b3d0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800b4c6:	bf00      	nop
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
	...

0800b4d0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	6039      	str	r1, [r7, #0]
 800b4da:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800b4e0:	2007      	movs	r0, #7
 800b4e2:	f001 fea1 	bl	800d228 <memp_malloc>
 800b4e6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d101      	bne.n	800b4f2 <netconn_alloc+0x22>
    return NULL;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	e052      	b.n	800b598 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	79fa      	ldrb	r2, [r7, #7]
 800b4fc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2200      	movs	r2, #0
 800b502:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800b504:	79fb      	ldrb	r3, [r7, #7]
 800b506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b50a:	2b10      	cmp	r3, #16
 800b50c:	d004      	beq.n	800b518 <netconn_alloc+0x48>
 800b50e:	2b20      	cmp	r3, #32
 800b510:	d105      	bne.n	800b51e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800b512:	2306      	movs	r3, #6
 800b514:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800b516:	e00a      	b.n	800b52e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800b518:	2306      	movs	r3, #6
 800b51a:	617b      	str	r3, [r7, #20]
      break;
 800b51c:	e007      	b.n	800b52e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800b51e:	4b20      	ldr	r3, [pc, #128]	; (800b5a0 <netconn_alloc+0xd0>)
 800b520:	f240 22e5 	movw	r2, #741	; 0x2e5
 800b524:	491f      	ldr	r1, [pc, #124]	; (800b5a4 <netconn_alloc+0xd4>)
 800b526:	4820      	ldr	r0, [pc, #128]	; (800b5a8 <netconn_alloc+0xd8>)
 800b528:	f00e fa5a 	bl	80199e0 <iprintf>
      goto free_and_return;
 800b52c:	e02f      	b.n	800b58e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	3310      	adds	r3, #16
 800b532:	6979      	ldr	r1, [r7, #20]
 800b534:	4618      	mov	r0, r3
 800b536:	f00c f93f 	bl	80177b8 <sys_mbox_new>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d125      	bne.n	800b58c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	330c      	adds	r3, #12
 800b544:	2100      	movs	r1, #0
 800b546:	4618      	mov	r0, r3
 800b548:	f00c f9fd 	bl	8017946 <sys_sem_new>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d005      	beq.n	800b55e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	3310      	adds	r3, #16
 800b556:	4618      	mov	r0, r3
 800b558:	f00c f950 	bl	80177fc <sys_mbox_free>
    goto free_and_return;
 800b55c:	e017      	b.n	800b58e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3314      	adds	r3, #20
 800b562:	4618      	mov	r0, r3
 800b564:	f00c f9e2 	bl	801792c <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b574:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	683a      	ldr	r2, [r7, #0]
 800b57a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2200      	movs	r2, #0
 800b580:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	7cfa      	ldrb	r2, [r7, #19]
 800b586:	771a      	strb	r2, [r3, #28]
  return conn;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	e005      	b.n	800b598 <netconn_alloc+0xc8>
    goto free_and_return;
 800b58c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800b58e:	68f9      	ldr	r1, [r7, #12]
 800b590:	2007      	movs	r0, #7
 800b592:	f001 febf 	bl	800d314 <memp_free>
  return NULL;
 800b596:	2300      	movs	r3, #0
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3718      	adds	r7, #24
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	0801b144 	.word	0x0801b144
 800b5a4:	0801b348 	.word	0x0801b348
 800b5a8:	0801b188 	.word	0x0801b188

0800b5ac <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d006      	beq.n	800b5ca <netconn_free+0x1e>
 800b5bc:	4b1b      	ldr	r3, [pc, #108]	; (800b62c <netconn_free+0x80>)
 800b5be:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b5c2:	491b      	ldr	r1, [pc, #108]	; (800b630 <netconn_free+0x84>)
 800b5c4:	481b      	ldr	r0, [pc, #108]	; (800b634 <netconn_free+0x88>)
 800b5c6:	f00e fa0b 	bl	80199e0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	3310      	adds	r3, #16
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f00c f99b 	bl	801790a <sys_mbox_valid>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d006      	beq.n	800b5e8 <netconn_free+0x3c>
 800b5da:	4b14      	ldr	r3, [pc, #80]	; (800b62c <netconn_free+0x80>)
 800b5dc:	f240 3223 	movw	r2, #803	; 0x323
 800b5e0:	4915      	ldr	r1, [pc, #84]	; (800b638 <netconn_free+0x8c>)
 800b5e2:	4814      	ldr	r0, [pc, #80]	; (800b634 <netconn_free+0x88>)
 800b5e4:	f00e f9fc 	bl	80199e0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	3314      	adds	r3, #20
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f00c f98c 	bl	801790a <sys_mbox_valid>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d006      	beq.n	800b606 <netconn_free+0x5a>
 800b5f8:	4b0c      	ldr	r3, [pc, #48]	; (800b62c <netconn_free+0x80>)
 800b5fa:	f240 3226 	movw	r2, #806	; 0x326
 800b5fe:	490f      	ldr	r1, [pc, #60]	; (800b63c <netconn_free+0x90>)
 800b600:	480c      	ldr	r0, [pc, #48]	; (800b634 <netconn_free+0x88>)
 800b602:	f00e f9ed 	bl	80199e0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	330c      	adds	r3, #12
 800b60a:	4618      	mov	r0, r3
 800b60c:	f00c fa01 	bl	8017a12 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	330c      	adds	r3, #12
 800b614:	4618      	mov	r0, r3
 800b616:	f00c fa1a 	bl	8017a4e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800b61a:	6879      	ldr	r1, [r7, #4]
 800b61c:	2007      	movs	r0, #7
 800b61e:	f001 fe79 	bl	800d314 <memp_free>
}
 800b622:	bf00      	nop
 800b624:	3708      	adds	r7, #8
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	0801b144 	.word	0x0801b144
 800b630:	0801b370 	.word	0x0801b370
 800b634:	0801b188 	.word	0x0801b188
 800b638:	0801b3a0 	.word	0x0801b3a0
 800b63c:	0801b3dc 	.word	0x0801b3dc

0800b640 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	3310      	adds	r3, #16
 800b64c:	4618      	mov	r0, r3
 800b64e:	f00c f95c 	bl	801790a <sys_mbox_valid>
 800b652:	4603      	mov	r3, r0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d02f      	beq.n	800b6b8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b658:	e018      	b.n	800b68c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b662:	2b10      	cmp	r3, #16
 800b664:	d10e      	bne.n	800b684 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	f107 020f 	add.w	r2, r7, #15
 800b66c:	4611      	mov	r1, r2
 800b66e:	4618      	mov	r0, r3
 800b670:	f7ff fbba 	bl	800ade8 <lwip_netconn_is_err_msg>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d108      	bne.n	800b68c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	4618      	mov	r0, r3
 800b67e:	f002 fced 	bl	800e05c <pbuf_free>
 800b682:	e003      	b.n	800b68c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	4618      	mov	r0, r3
 800b688:	f000 ff0e 	bl	800c4a8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	3310      	adds	r3, #16
 800b690:	f107 0210 	add.w	r2, r7, #16
 800b694:	4611      	mov	r1, r2
 800b696:	4618      	mov	r0, r3
 800b698:	f00c f91b 	bl	80178d2 <sys_arch_mbox_tryfetch>
 800b69c:	4603      	mov	r3, r0
 800b69e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6a2:	d1da      	bne.n	800b65a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	3310      	adds	r3, #16
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f00c f8a7 	bl	80177fc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	3310      	adds	r3, #16
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f00c f93a 	bl	801792c <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	3314      	adds	r3, #20
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f00c f924 	bl	801790a <sys_mbox_valid>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d034      	beq.n	800b732 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b6c8:	e01d      	b.n	800b706 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	f107 020e 	add.w	r2, r7, #14
 800b6d0:	4611      	mov	r1, r2
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7ff fb88 	bl	800ade8 <lwip_netconn_is_err_msg>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d113      	bne.n	800b706 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800b6e2:	6978      	ldr	r0, [r7, #20]
 800b6e4:	f7ff ffac 	bl	800b640 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d007      	beq.n	800b700 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f003 faa1 	bl	800ec3c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800b700:	6978      	ldr	r0, [r7, #20]
 800b702:	f7ff ff53 	bl	800b5ac <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	3314      	adds	r3, #20
 800b70a:	f107 0210 	add.w	r2, r7, #16
 800b70e:	4611      	mov	r1, r2
 800b710:	4618      	mov	r0, r3
 800b712:	f00c f8de 	bl	80178d2 <sys_arch_mbox_tryfetch>
 800b716:	4603      	mov	r3, r0
 800b718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b71c:	d1d5      	bne.n	800b6ca <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	3314      	adds	r3, #20
 800b722:	4618      	mov	r0, r3
 800b724:	f00c f86a 	bl	80177fc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	3314      	adds	r3, #20
 800b72c:	4618      	mov	r0, r3
 800b72e:	f00c f8fd 	bl	801792c <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800b732:	bf00      	nop
 800b734:	3718      	adds	r7, #24
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
	...

0800b73c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	460b      	mov	r3, r1
 800b746:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800b748:	2300      	movs	r3, #0
 800b74a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d106      	bne.n	800b760 <lwip_netconn_do_close_internal+0x24>
 800b752:	4b87      	ldr	r3, [pc, #540]	; (800b970 <lwip_netconn_do_close_internal+0x234>)
 800b754:	f240 32a2 	movw	r2, #930	; 0x3a2
 800b758:	4986      	ldr	r1, [pc, #536]	; (800b974 <lwip_netconn_do_close_internal+0x238>)
 800b75a:	4887      	ldr	r0, [pc, #540]	; (800b978 <lwip_netconn_do_close_internal+0x23c>)
 800b75c:	f00e f940 	bl	80199e0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b768:	2b10      	cmp	r3, #16
 800b76a:	d006      	beq.n	800b77a <lwip_netconn_do_close_internal+0x3e>
 800b76c:	4b80      	ldr	r3, [pc, #512]	; (800b970 <lwip_netconn_do_close_internal+0x234>)
 800b76e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800b772:	4982      	ldr	r1, [pc, #520]	; (800b97c <lwip_netconn_do_close_internal+0x240>)
 800b774:	4880      	ldr	r0, [pc, #512]	; (800b978 <lwip_netconn_do_close_internal+0x23c>)
 800b776:	f00e f933 	bl	80199e0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	785b      	ldrb	r3, [r3, #1]
 800b77e:	2b04      	cmp	r3, #4
 800b780:	d006      	beq.n	800b790 <lwip_netconn_do_close_internal+0x54>
 800b782:	4b7b      	ldr	r3, [pc, #492]	; (800b970 <lwip_netconn_do_close_internal+0x234>)
 800b784:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800b788:	497d      	ldr	r1, [pc, #500]	; (800b980 <lwip_netconn_do_close_internal+0x244>)
 800b78a:	487b      	ldr	r0, [pc, #492]	; (800b978 <lwip_netconn_do_close_internal+0x23c>)
 800b78c:	f00e f928 	bl	80199e0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d106      	bne.n	800b7a6 <lwip_netconn_do_close_internal+0x6a>
 800b798:	4b75      	ldr	r3, [pc, #468]	; (800b970 <lwip_netconn_do_close_internal+0x234>)
 800b79a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800b79e:	4979      	ldr	r1, [pc, #484]	; (800b984 <lwip_netconn_do_close_internal+0x248>)
 800b7a0:	4875      	ldr	r0, [pc, #468]	; (800b978 <lwip_netconn_do_close_internal+0x23c>)
 800b7a2:	f00e f91d 	bl	80199e0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6a1b      	ldr	r3, [r3, #32]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d106      	bne.n	800b7bc <lwip_netconn_do_close_internal+0x80>
 800b7ae:	4b70      	ldr	r3, [pc, #448]	; (800b970 <lwip_netconn_do_close_internal+0x234>)
 800b7b0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b7b4:	4974      	ldr	r1, [pc, #464]	; (800b988 <lwip_netconn_do_close_internal+0x24c>)
 800b7b6:	4870      	ldr	r0, [pc, #448]	; (800b978 <lwip_netconn_do_close_internal+0x23c>)
 800b7b8:	f00e f912 	bl	80199e0 <iprintf>

  tpcb = conn->pcb.tcp;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6a1b      	ldr	r3, [r3, #32]
 800b7c6:	7a1b      	ldrb	r3, [r3, #8]
 800b7c8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800b7ca:	7bfb      	ldrb	r3, [r7, #15]
 800b7cc:	f003 0301 	and.w	r3, r3, #1
 800b7d0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800b7d2:	7bfb      	ldrb	r3, [r7, #15]
 800b7d4:	f003 0302 	and.w	r3, r3, #2
 800b7d8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800b7da:	7bfb      	ldrb	r3, [r7, #15]
 800b7dc:	2b03      	cmp	r3, #3
 800b7de:	d102      	bne.n	800b7e6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	75bb      	strb	r3, [r7, #22]
 800b7e4:	e01f      	b.n	800b826 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800b7e6:	7bbb      	ldrb	r3, [r7, #14]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00e      	beq.n	800b80a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800b7f0:	2b05      	cmp	r3, #5
 800b7f2:	d007      	beq.n	800b804 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800b7f8:	2b06      	cmp	r3, #6
 800b7fa:	d003      	beq.n	800b804 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b800:	2b08      	cmp	r3, #8
 800b802:	d102      	bne.n	800b80a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b804:	2301      	movs	r3, #1
 800b806:	75bb      	strb	r3, [r7, #22]
 800b808:	e00d      	b.n	800b826 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b80a:	7b7b      	ldrb	r3, [r7, #13]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d008      	beq.n	800b822 <lwip_netconn_do_close_internal+0xe6>
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	8b5b      	ldrh	r3, [r3, #26]
 800b814:	f003 0310 	and.w	r3, r3, #16
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d002      	beq.n	800b822 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b81c:	2301      	movs	r3, #1
 800b81e:	75bb      	strb	r3, [r7, #22]
 800b820:	e001      	b.n	800b826 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b822:	2300      	movs	r3, #0
 800b824:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b826:	7dbb      	ldrb	r3, [r7, #22]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d003      	beq.n	800b834 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800b82c:	2100      	movs	r1, #0
 800b82e:	6938      	ldr	r0, [r7, #16]
 800b830:	f004 fa48 	bl	800fcc4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	7d1b      	ldrb	r3, [r3, #20]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d104      	bne.n	800b846 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800b83c:	2100      	movs	r1, #0
 800b83e:	6938      	ldr	r0, [r7, #16]
 800b840:	f004 fab8 	bl	800fdb4 <tcp_accept>
 800b844:	e01d      	b.n	800b882 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800b846:	7bbb      	ldrb	r3, [r7, #14]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d007      	beq.n	800b85c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800b84c:	2100      	movs	r1, #0
 800b84e:	6938      	ldr	r0, [r7, #16]
 800b850:	f004 fa4a 	bl	800fce8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b854:	2100      	movs	r1, #0
 800b856:	6938      	ldr	r0, [r7, #16]
 800b858:	f004 faac 	bl	800fdb4 <tcp_accept>
    }
    if (shut_tx) {
 800b85c:	7b7b      	ldrb	r3, [r7, #13]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d003      	beq.n	800b86a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800b862:	2100      	movs	r1, #0
 800b864:	6938      	ldr	r0, [r7, #16]
 800b866:	f004 fa61 	bl	800fd2c <tcp_sent>
    }
    if (shut_close) {
 800b86a:	7dbb      	ldrb	r3, [r7, #22]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d008      	beq.n	800b882 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800b870:	2200      	movs	r2, #0
 800b872:	2100      	movs	r1, #0
 800b874:	6938      	ldr	r0, [r7, #16]
 800b876:	f004 fab5 	bl	800fde4 <tcp_poll>
      tcp_err(tpcb, NULL);
 800b87a:	2100      	movs	r1, #0
 800b87c:	6938      	ldr	r0, [r7, #16]
 800b87e:	f004 fa77 	bl	800fd70 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800b882:	7dbb      	ldrb	r3, [r7, #22]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d005      	beq.n	800b894 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800b888:	6938      	ldr	r0, [r7, #16]
 800b88a:	f003 f891 	bl	800e9b0 <tcp_close>
 800b88e:	4603      	mov	r3, r0
 800b890:	75fb      	strb	r3, [r7, #23]
 800b892:	e007      	b.n	800b8a4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800b894:	7bbb      	ldrb	r3, [r7, #14]
 800b896:	7b7a      	ldrb	r2, [r7, #13]
 800b898:	4619      	mov	r1, r3
 800b89a:	6938      	ldr	r0, [r7, #16]
 800b89c:	f003 f8b4 	bl	800ea08 <tcp_shutdown>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800b8a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d102      	bne.n	800b8b2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	757b      	strb	r3, [r7, #21]
 800b8b0:	e016      	b.n	800b8e0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800b8b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8ba:	d10f      	bne.n	800b8dc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6a1b      	ldr	r3, [r3, #32]
 800b8c0:	7a5b      	ldrb	r3, [r3, #9]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d10c      	bne.n	800b8e0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800b8ca:	7dbb      	ldrb	r3, [r7, #22]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d007      	beq.n	800b8e0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800b8d0:	6938      	ldr	r0, [r7, #16]
 800b8d2:	f003 f9b3 	bl	800ec3c <tcp_abort>
          err = ERR_OK;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	75fb      	strb	r3, [r7, #23]
 800b8da:	e001      	b.n	800b8e0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800b8e0:	7d7b      	ldrb	r3, [r7, #21]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d052      	beq.n	800b98c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a1b      	ldr	r3, [r3, #32]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	330c      	adds	r3, #12
 800b8ee:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6a1b      	ldr	r3, [r3, #32]
 800b8f4:	7dfa      	ldrb	r2, [r7, #23]
 800b8f6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800b904:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d129      	bne.n	800b960 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800b90c:	7dbb      	ldrb	r3, [r7, #22]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00c      	beq.n	800b92c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d005      	beq.n	800b92c <lwip_netconn_do_close_internal+0x1f0>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b924:	2200      	movs	r2, #0
 800b926:	2104      	movs	r1, #4
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	4798      	blx	r3
      }
      if (shut_rx) {
 800b92c:	7bbb      	ldrb	r3, [r7, #14]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d009      	beq.n	800b946 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b936:	2b00      	cmp	r3, #0
 800b938:	d005      	beq.n	800b946 <lwip_netconn_do_close_internal+0x20a>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93e:	2200      	movs	r2, #0
 800b940:	2100      	movs	r1, #0
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	4798      	blx	r3
      }
      if (shut_tx) {
 800b946:	7b7b      	ldrb	r3, [r7, #13]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d009      	beq.n	800b960 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b950:	2b00      	cmp	r3, #0
 800b952:	d005      	beq.n	800b960 <lwip_netconn_do_close_internal+0x224>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b958:	2200      	movs	r2, #0
 800b95a:	2102      	movs	r1, #2
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b960:	78fb      	ldrb	r3, [r7, #3]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d002      	beq.n	800b96c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800b966:	68b8      	ldr	r0, [r7, #8]
 800b968:	f00c f846 	bl	80179f8 <sys_sem_signal>
    }
    return ERR_OK;
 800b96c:	2300      	movs	r3, #0
 800b96e:	e03c      	b.n	800b9ea <lwip_netconn_do_close_internal+0x2ae>
 800b970:	0801b144 	.word	0x0801b144
 800b974:	0801b418 	.word	0x0801b418
 800b978:	0801b188 	.word	0x0801b188
 800b97c:	0801b428 	.word	0x0801b428
 800b980:	0801b448 	.word	0x0801b448
 800b984:	0801b46c 	.word	0x0801b46c
 800b988:	0801b2ac 	.word	0x0801b2ac
  }
  if (!close_finished) {
 800b98c:	7d7b      	ldrb	r3, [r7, #21]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d11e      	bne.n	800b9d0 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	7d1b      	ldrb	r3, [r3, #20]
 800b996:	2b01      	cmp	r3, #1
 800b998:	d106      	bne.n	800b9a8 <lwip_netconn_do_close_internal+0x26c>
 800b99a:	4b16      	ldr	r3, [pc, #88]	; (800b9f4 <lwip_netconn_do_close_internal+0x2b8>)
 800b99c:	f240 4241 	movw	r2, #1089	; 0x441
 800b9a0:	4915      	ldr	r1, [pc, #84]	; (800b9f8 <lwip_netconn_do_close_internal+0x2bc>)
 800b9a2:	4816      	ldr	r0, [pc, #88]	; (800b9fc <lwip_netconn_do_close_internal+0x2c0>)
 800b9a4:	f00e f81c 	bl	80199e0 <iprintf>
    if (shut_tx) {
 800b9a8:	7b7b      	ldrb	r3, [r7, #13]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d003      	beq.n	800b9b6 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800b9ae:	4914      	ldr	r1, [pc, #80]	; (800ba00 <lwip_netconn_do_close_internal+0x2c4>)
 800b9b0:	6938      	ldr	r0, [r7, #16]
 800b9b2:	f004 f9bb 	bl	800fd2c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	4912      	ldr	r1, [pc, #72]	; (800ba04 <lwip_netconn_do_close_internal+0x2c8>)
 800b9ba:	6938      	ldr	r0, [r7, #16]
 800b9bc:	f004 fa12 	bl	800fde4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800b9c0:	4911      	ldr	r1, [pc, #68]	; (800ba08 <lwip_netconn_do_close_internal+0x2cc>)
 800b9c2:	6938      	ldr	r0, [r7, #16]
 800b9c4:	f004 f9d4 	bl	800fd70 <tcp_err>
    tcp_arg(tpcb, conn);
 800b9c8:	6879      	ldr	r1, [r7, #4]
 800b9ca:	6938      	ldr	r0, [r7, #16]
 800b9cc:	f004 f97a 	bl	800fcc4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800b9d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d106      	bne.n	800b9e6 <lwip_netconn_do_close_internal+0x2aa>
 800b9d8:	4b06      	ldr	r3, [pc, #24]	; (800b9f4 <lwip_netconn_do_close_internal+0x2b8>)
 800b9da:	f240 424d 	movw	r2, #1101	; 0x44d
 800b9de:	490b      	ldr	r1, [pc, #44]	; (800ba0c <lwip_netconn_do_close_internal+0x2d0>)
 800b9e0:	4806      	ldr	r0, [pc, #24]	; (800b9fc <lwip_netconn_do_close_internal+0x2c0>)
 800b9e2:	f00d fffd 	bl	80199e0 <iprintf>
  return err;
 800b9e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3718      	adds	r7, #24
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	0801b144 	.word	0x0801b144
 800b9f8:	0801b480 	.word	0x0801b480
 800b9fc:	0801b188 	.word	0x0801b188
 800ba00:	0800b12d 	.word	0x0800b12d
 800ba04:	0800b065 	.word	0x0800b065
 800ba08:	0800b1d5 	.word	0x0800b1d5
 800ba0c:	0801b4a4 	.word	0x0801b4a4

0800ba10 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	785b      	ldrb	r3, [r3, #1]
 800ba22:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800ba24:	7afb      	ldrb	r3, [r7, #11]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00d      	beq.n	800ba46 <lwip_netconn_do_delconn+0x36>
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba34:	2b10      	cmp	r3, #16
 800ba36:	d006      	beq.n	800ba46 <lwip_netconn_do_delconn+0x36>
 800ba38:	4b60      	ldr	r3, [pc, #384]	; (800bbbc <lwip_netconn_do_delconn+0x1ac>)
 800ba3a:	f240 425e 	movw	r2, #1118	; 0x45e
 800ba3e:	4960      	ldr	r1, [pc, #384]	; (800bbc0 <lwip_netconn_do_delconn+0x1b0>)
 800ba40:	4860      	ldr	r0, [pc, #384]	; (800bbc4 <lwip_netconn_do_delconn+0x1b4>)
 800ba42:	f00d ffcd 	bl	80199e0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800ba46:	7afb      	ldrb	r3, [r7, #11]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d005      	beq.n	800ba58 <lwip_netconn_do_delconn+0x48>
 800ba4c:	7afb      	ldrb	r3, [r7, #11]
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	d002      	beq.n	800ba58 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800ba52:	7afb      	ldrb	r3, [r7, #11]
 800ba54:	2b03      	cmp	r3, #3
 800ba56:	d109      	bne.n	800ba6c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800ba58:	7afb      	ldrb	r3, [r7, #11]
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d10a      	bne.n	800ba74 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	7f1b      	ldrb	r3, [r3, #28]
 800ba64:	f003 0304 	and.w	r3, r3, #4
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d103      	bne.n	800ba74 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	22fb      	movs	r2, #251	; 0xfb
 800ba70:	711a      	strb	r2, [r3, #4]
 800ba72:	e097      	b.n	800bba4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800ba74:	7afb      	ldrb	r3, [r7, #11]
 800ba76:	2b03      	cmp	r3, #3
 800ba78:	d10d      	bne.n	800ba96 <lwip_netconn_do_delconn+0x86>
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	7f1b      	ldrb	r3, [r3, #28]
 800ba80:	f003 0304 	and.w	r3, r3, #4
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d106      	bne.n	800ba96 <lwip_netconn_do_delconn+0x86>
 800ba88:	4b4c      	ldr	r3, [pc, #304]	; (800bbbc <lwip_netconn_do_delconn+0x1ac>)
 800ba8a:	f240 427a 	movw	r2, #1146	; 0x47a
 800ba8e:	494e      	ldr	r1, [pc, #312]	; (800bbc8 <lwip_netconn_do_delconn+0x1b8>)
 800ba90:	484c      	ldr	r0, [pc, #304]	; (800bbc4 <lwip_netconn_do_delconn+0x1b4>)
 800ba92:	f00d ffa5 	bl	80199e0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7ff fdcd 	bl	800b640 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d05f      	beq.n	800bb70 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800baba:	2b10      	cmp	r3, #16
 800babc:	d00d      	beq.n	800bada <lwip_netconn_do_delconn+0xca>
 800babe:	2b20      	cmp	r3, #32
 800bac0:	d151      	bne.n	800bb66 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	4618      	mov	r0, r3
 800bad4:	f009 f9ea 	bl	8014eac <udp_remove>
          break;
 800bad8:	e046      	b.n	800bb68 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	6a1b      	ldr	r3, [r3, #32]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d006      	beq.n	800baf2 <lwip_netconn_do_delconn+0xe2>
 800bae4:	4b35      	ldr	r3, [pc, #212]	; (800bbbc <lwip_netconn_do_delconn+0x1ac>)
 800bae6:	f240 4294 	movw	r2, #1172	; 0x494
 800baea:	4938      	ldr	r1, [pc, #224]	; (800bbcc <lwip_netconn_do_delconn+0x1bc>)
 800baec:	4835      	ldr	r0, [pc, #212]	; (800bbc4 <lwip_netconn_do_delconn+0x1b4>)
 800baee:	f00d ff77 	bl	80199e0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	2204      	movs	r2, #4
 800baf8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2203      	movs	r2, #3
 800bafe:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7ff fe14 	bl	800b73c <lwip_netconn_do_close_internal>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d04b      	beq.n	800bbb2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	785b      	ldrb	r3, [r3, #1]
 800bb20:	2b04      	cmp	r3, #4
 800bb22:	d006      	beq.n	800bb32 <lwip_netconn_do_delconn+0x122>
 800bb24:	4b25      	ldr	r3, [pc, #148]	; (800bbbc <lwip_netconn_do_delconn+0x1ac>)
 800bb26:	f240 429a 	movw	r2, #1178	; 0x49a
 800bb2a:	4929      	ldr	r1, [pc, #164]	; (800bbd0 <lwip_netconn_do_delconn+0x1c0>)
 800bb2c:	4825      	ldr	r0, [pc, #148]	; (800bbc4 <lwip_netconn_do_delconn+0x1b4>)
 800bb2e:	f00d ff57 	bl	80199e0 <iprintf>
            UNLOCK_TCPIP_CORE();
 800bb32:	4828      	ldr	r0, [pc, #160]	; (800bbd4 <lwip_netconn_do_delconn+0x1c4>)
 800bb34:	f00b ffd1 	bl	8017ada <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	330c      	adds	r3, #12
 800bb3e:	2100      	movs	r1, #0
 800bb40:	4618      	mov	r0, r3
 800bb42:	f00b ff28 	bl	8017996 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800bb46:	4823      	ldr	r0, [pc, #140]	; (800bbd4 <lwip_netconn_do_delconn+0x1c4>)
 800bb48:	f00b ffb8 	bl	8017abc <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	785b      	ldrb	r3, [r3, #1]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d02d      	beq.n	800bbb2 <lwip_netconn_do_delconn+0x1a2>
 800bb56:	4b19      	ldr	r3, [pc, #100]	; (800bbbc <lwip_netconn_do_delconn+0x1ac>)
 800bb58:	f240 429e 	movw	r2, #1182	; 0x49e
 800bb5c:	491c      	ldr	r1, [pc, #112]	; (800bbd0 <lwip_netconn_do_delconn+0x1c0>)
 800bb5e:	4819      	ldr	r0, [pc, #100]	; (800bbc4 <lwip_netconn_do_delconn+0x1b4>)
 800bb60:	f00d ff3e 	bl	80199e0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800bb64:	e025      	b.n	800bbb2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800bb66:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d007      	beq.n	800bb8a <lwip_netconn_do_delconn+0x17a>
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	6810      	ldr	r0, [r2, #0]
 800bb84:	2200      	movs	r2, #0
 800bb86:	2100      	movs	r1, #0
 800bb88:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d007      	beq.n	800bba4 <lwip_netconn_do_delconn+0x194>
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	6810      	ldr	r0, [r2, #0]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	2102      	movs	r1, #2
 800bba2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	330c      	adds	r3, #12
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f00b ff3e 	bl	8017a2c <sys_sem_valid>
 800bbb0:	e000      	b.n	800bbb4 <lwip_netconn_do_delconn+0x1a4>
          return;
 800bbb2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	0801b144 	.word	0x0801b144
 800bbc0:	0801b4b4 	.word	0x0801b4b4
 800bbc4:	0801b188 	.word	0x0801b188
 800bbc8:	0801b4c8 	.word	0x0801b4c8
 800bbcc:	0801b4e8 	.word	0x0801b4e8
 800bbd0:	0801b504 	.word	0x0801b504
 800bbd4:	2000a1a0 	.word	0x2000a1a0

0800bbd8 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b088      	sub	sp, #32
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800bbee:	69bb      	ldr	r3, [r7, #24]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d102      	bne.n	800bbfa <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800bbf4:	f06f 0305 	mvn.w	r3, #5
 800bbf8:	e070      	b.n	800bcdc <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	785b      	ldrb	r3, [r3, #1]
 800bbfe:	2b03      	cmp	r3, #3
 800bc00:	d006      	beq.n	800bc10 <lwip_netconn_do_connected+0x38>
 800bc02:	4b38      	ldr	r3, [pc, #224]	; (800bce4 <lwip_netconn_do_connected+0x10c>)
 800bc04:	f240 5223 	movw	r2, #1315	; 0x523
 800bc08:	4937      	ldr	r1, [pc, #220]	; (800bce8 <lwip_netconn_do_connected+0x110>)
 800bc0a:	4838      	ldr	r0, [pc, #224]	; (800bcec <lwip_netconn_do_connected+0x114>)
 800bc0c:	f00d fee8 	bl	80199e0 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800bc10:	69bb      	ldr	r3, [r7, #24]
 800bc12:	6a1b      	ldr	r3, [r3, #32]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10c      	bne.n	800bc32 <lwip_netconn_do_connected+0x5a>
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	7f1b      	ldrb	r3, [r3, #28]
 800bc1c:	f003 0304 	and.w	r3, r3, #4
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d106      	bne.n	800bc32 <lwip_netconn_do_connected+0x5a>
 800bc24:	4b2f      	ldr	r3, [pc, #188]	; (800bce4 <lwip_netconn_do_connected+0x10c>)
 800bc26:	f240 5224 	movw	r2, #1316	; 0x524
 800bc2a:	4931      	ldr	r1, [pc, #196]	; (800bcf0 <lwip_netconn_do_connected+0x118>)
 800bc2c:	482f      	ldr	r0, [pc, #188]	; (800bcec <lwip_netconn_do_connected+0x114>)
 800bc2e:	f00d fed7 	bl	80199e0 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800bc32:	69bb      	ldr	r3, [r7, #24]
 800bc34:	6a1b      	ldr	r3, [r3, #32]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d008      	beq.n	800bc4c <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	6a1b      	ldr	r3, [r3, #32]
 800bc3e:	79fa      	ldrb	r2, [r7, #7]
 800bc40:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bc42:	69bb      	ldr	r3, [r7, #24]
 800bc44:	6a1b      	ldr	r3, [r3, #32]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	330c      	adds	r3, #12
 800bc4a:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800bc4c:	69bb      	ldr	r3, [r7, #24]
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc54:	2b10      	cmp	r3, #16
 800bc56:	d106      	bne.n	800bc66 <lwip_netconn_do_connected+0x8e>
 800bc58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d102      	bne.n	800bc66 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800bc60:	69b8      	ldr	r0, [r7, #24]
 800bc62:	f7ff fb8d 	bl	800b380 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	7f1b      	ldrb	r3, [r3, #28]
 800bc6a:	f003 0304 	and.w	r3, r3, #4
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	bf0c      	ite	eq
 800bc72:	2301      	moveq	r3, #1
 800bc74:	2300      	movne	r3, #0
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	7f1b      	ldrb	r3, [r3, #28]
 800bc7e:	f023 0304 	bic.w	r3, r3, #4
 800bc82:	b2da      	uxtb	r2, r3
 800bc84:	69bb      	ldr	r3, [r7, #24]
 800bc86:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d002      	beq.n	800bc94 <lwip_netconn_do_connected+0xbc>
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10c      	bne.n	800bcae <lwip_netconn_do_connected+0xd6>
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d102      	bne.n	800bca0 <lwip_netconn_do_connected+0xc8>
 800bc9a:	69fb      	ldr	r3, [r7, #28]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d006      	beq.n	800bcae <lwip_netconn_do_connected+0xd6>
 800bca0:	4b10      	ldr	r3, [pc, #64]	; (800bce4 <lwip_netconn_do_connected+0x10c>)
 800bca2:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800bca6:	4913      	ldr	r1, [pc, #76]	; (800bcf4 <lwip_netconn_do_connected+0x11c>)
 800bca8:	4810      	ldr	r0, [pc, #64]	; (800bcec <lwip_netconn_do_connected+0x114>)
 800bcaa:	f00d fe99 	bl	80199e0 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bcba:	69bb      	ldr	r3, [r7, #24]
 800bcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d005      	beq.n	800bcce <lwip_netconn_do_connected+0xf6>
 800bcc2:	69bb      	ldr	r3, [r7, #24]
 800bcc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	2102      	movs	r1, #2
 800bcca:	69b8      	ldr	r0, [r7, #24]
 800bccc:	4798      	blx	r3

  if (was_blocking) {
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d002      	beq.n	800bcda <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800bcd4:	69f8      	ldr	r0, [r7, #28]
 800bcd6:	f00b fe8f 	bl	80179f8 <sys_sem_signal>
  }
  return ERR_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3720      	adds	r7, #32
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	0801b144 	.word	0x0801b144
 800bce8:	0801b50c 	.word	0x0801b50c
 800bcec:	0801b188 	.word	0x0801b188
 800bcf0:	0801b52c 	.word	0x0801b52c
 800bcf4:	0801b56c 	.word	0x0801b56c

0800bcf8 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d102      	bne.n	800bd14 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800bd0e:	23f1      	movs	r3, #241	; 0xf1
 800bd10:	75fb      	strb	r3, [r7, #23]
 800bd12:	e09b      	b.n	800be4c <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd1e:	2b10      	cmp	r3, #16
 800bd20:	d00f      	beq.n	800bd42 <lwip_netconn_do_connect+0x4a>
 800bd22:	2b20      	cmp	r3, #32
 800bd24:	f040 8087 	bne.w	800be36 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	6858      	ldr	r0, [r3, #4]
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	6899      	ldr	r1, [r3, #8]
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	899b      	ldrh	r3, [r3, #12]
 800bd36:	461a      	mov	r2, r3
 800bd38:	f009 f82a 	bl	8014d90 <udp_connect>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	75fb      	strb	r3, [r7, #23]
        break;
 800bd40:	e084      	b.n	800be4c <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	785b      	ldrb	r3, [r3, #1]
 800bd48:	2b03      	cmp	r3, #3
 800bd4a:	d102      	bne.n	800bd52 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800bd4c:	23f7      	movs	r3, #247	; 0xf7
 800bd4e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800bd50:	e07b      	b.n	800be4a <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	785b      	ldrb	r3, [r3, #1]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d002      	beq.n	800bd62 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800bd5c:	23f6      	movs	r3, #246	; 0xf6
 800bd5e:	75fb      	strb	r3, [r7, #23]
        break;
 800bd60:	e073      	b.n	800be4a <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7ff fb0a 	bl	800b380 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	6858      	ldr	r0, [r3, #4]
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	6899      	ldr	r1, [r3, #8]
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	899a      	ldrh	r2, [r3, #12]
 800bd7a:	4b38      	ldr	r3, [pc, #224]	; (800be5c <lwip_netconn_do_connect+0x164>)
 800bd7c:	f003 f85a 	bl	800ee34 <tcp_connect>
 800bd80:	4603      	mov	r3, r0
 800bd82:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800bd84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d15e      	bne.n	800be4a <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	7f1b      	ldrb	r3, [r3, #28]
 800bd92:	f003 0302 	and.w	r3, r3, #2
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	bf14      	ite	ne
 800bd9a:	2301      	movne	r3, #1
 800bd9c:	2300      	moveq	r3, #0
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2203      	movs	r2, #3
 800bda8:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800bdaa:	7bfb      	ldrb	r3, [r7, #15]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d009      	beq.n	800bdc4 <lwip_netconn_do_connect+0xcc>
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	7f1a      	ldrb	r2, [r3, #28]
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f042 0204 	orr.w	r2, r2, #4
 800bdbe:	b2d2      	uxtb	r2, r2
 800bdc0:	771a      	strb	r2, [r3, #28]
 800bdc2:	e008      	b.n	800bdd6 <lwip_netconn_do_connect+0xde>
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	7f1a      	ldrb	r2, [r3, #28]
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f022 0204 	bic.w	r2, r2, #4
 800bdd2:	b2d2      	uxtb	r2, r2
 800bdd4:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800bdd6:	7bfb      	ldrb	r3, [r7, #15]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d002      	beq.n	800bde2 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800bddc:	23fb      	movs	r3, #251	; 0xfb
 800bdde:	75fb      	strb	r3, [r7, #23]
        break;
 800bde0:	e033      	b.n	800be4a <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	693a      	ldr	r2, [r7, #16]
 800bde8:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	785b      	ldrb	r3, [r3, #1]
 800bdf0:	2b03      	cmp	r3, #3
 800bdf2:	d006      	beq.n	800be02 <lwip_netconn_do_connect+0x10a>
 800bdf4:	4b1a      	ldr	r3, [pc, #104]	; (800be60 <lwip_netconn_do_connect+0x168>)
 800bdf6:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800bdfa:	491a      	ldr	r1, [pc, #104]	; (800be64 <lwip_netconn_do_connect+0x16c>)
 800bdfc:	481a      	ldr	r0, [pc, #104]	; (800be68 <lwip_netconn_do_connect+0x170>)
 800bdfe:	f00d fdef 	bl	80199e0 <iprintf>
              UNLOCK_TCPIP_CORE();
 800be02:	481a      	ldr	r0, [pc, #104]	; (800be6c <lwip_netconn_do_connect+0x174>)
 800be04:	f00b fe69 	bl	8017ada <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	330c      	adds	r3, #12
 800be0e:	2100      	movs	r1, #0
 800be10:	4618      	mov	r0, r3
 800be12:	f00b fdc0 	bl	8017996 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800be16:	4815      	ldr	r0, [pc, #84]	; (800be6c <lwip_netconn_do_connect+0x174>)
 800be18:	f00b fe50 	bl	8017abc <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	785b      	ldrb	r3, [r3, #1]
 800be22:	2b03      	cmp	r3, #3
 800be24:	d116      	bne.n	800be54 <lwip_netconn_do_connect+0x15c>
 800be26:	4b0e      	ldr	r3, [pc, #56]	; (800be60 <lwip_netconn_do_connect+0x168>)
 800be28:	f240 5274 	movw	r2, #1396	; 0x574
 800be2c:	490d      	ldr	r1, [pc, #52]	; (800be64 <lwip_netconn_do_connect+0x16c>)
 800be2e:	480e      	ldr	r0, [pc, #56]	; (800be68 <lwip_netconn_do_connect+0x170>)
 800be30:	f00d fdd6 	bl	80199e0 <iprintf>
              return;
 800be34:	e00e      	b.n	800be54 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800be36:	4b0a      	ldr	r3, [pc, #40]	; (800be60 <lwip_netconn_do_connect+0x168>)
 800be38:	f240 527d 	movw	r2, #1405	; 0x57d
 800be3c:	490c      	ldr	r1, [pc, #48]	; (800be70 <lwip_netconn_do_connect+0x178>)
 800be3e:	480a      	ldr	r0, [pc, #40]	; (800be68 <lwip_netconn_do_connect+0x170>)
 800be40:	f00d fdce 	bl	80199e0 <iprintf>
 800be44:	23fa      	movs	r3, #250	; 0xfa
 800be46:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800be48:	e000      	b.n	800be4c <lwip_netconn_do_connect+0x154>
        break;
 800be4a:	bf00      	nop
    }
  }
  msg->err = err;
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	7dfa      	ldrb	r2, [r7, #23]
 800be50:	711a      	strb	r2, [r3, #4]
 800be52:	e000      	b.n	800be56 <lwip_netconn_do_connect+0x15e>
              return;
 800be54:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800be56:	3718      	adds	r7, #24
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	0800bbd9 	.word	0x0800bbd9
 800be60:	0801b144 	.word	0x0801b144
 800be64:	0801b504 	.word	0x0801b504
 800be68:	0801b188 	.word	0x0801b188
 800be6c:	2000a1a0 	.word	0x2000a1a0
 800be70:	0801b58c 	.word	0x0801b58c

0800be74 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	2200      	movs	r2, #0
 800be84:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d022      	beq.n	800bed6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be9a:	2b10      	cmp	r3, #16
 800be9c:	d11b      	bne.n	800bed6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	689b      	ldr	r3, [r3, #8]
 800bea2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800beaa:	d202      	bcs.n	800beb2 <lwip_netconn_do_recv+0x3e>
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	b29b      	uxth	r3, r3
 800beb0:	e001      	b.n	800beb6 <lwip_netconn_do_recv+0x42>
 800beb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800beb6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	89fa      	ldrh	r2, [r7, #14]
 800bec0:	4611      	mov	r1, r2
 800bec2:	4618      	mov	r0, r3
 800bec4:	f002 ff20 	bl	800ed08 <tcp_recved>
        remaining -= recved;
 800bec8:	89fb      	ldrh	r3, [r7, #14]
 800beca:	697a      	ldr	r2, [r7, #20]
 800becc:	1ad3      	subs	r3, r2, r3
 800bece:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1e6      	bne.n	800bea4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bed6:	bf00      	nop
 800bed8:	3718      	adds	r7, #24
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
	...

0800bee0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b088      	sub	sp, #32
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	460b      	mov	r3, r1
 800beea:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800beec:	2300      	movs	r3, #0
 800beee:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d106      	bne.n	800bf04 <lwip_netconn_do_writemore+0x24>
 800bef6:	4b96      	ldr	r3, [pc, #600]	; (800c150 <lwip_netconn_do_writemore+0x270>)
 800bef8:	f240 6273 	movw	r2, #1651	; 0x673
 800befc:	4995      	ldr	r1, [pc, #596]	; (800c154 <lwip_netconn_do_writemore+0x274>)
 800befe:	4896      	ldr	r0, [pc, #600]	; (800c158 <lwip_netconn_do_writemore+0x278>)
 800bf00:	f00d fd6e 	bl	80199e0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	785b      	ldrb	r3, [r3, #1]
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d006      	beq.n	800bf1a <lwip_netconn_do_writemore+0x3a>
 800bf0c:	4b90      	ldr	r3, [pc, #576]	; (800c150 <lwip_netconn_do_writemore+0x270>)
 800bf0e:	f240 6274 	movw	r2, #1652	; 0x674
 800bf12:	4992      	ldr	r1, [pc, #584]	; (800c15c <lwip_netconn_do_writemore+0x27c>)
 800bf14:	4890      	ldr	r0, [pc, #576]	; (800c158 <lwip_netconn_do_writemore+0x278>)
 800bf16:	f00d fd63 	bl	80199e0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a1b      	ldr	r3, [r3, #32]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d106      	bne.n	800bf30 <lwip_netconn_do_writemore+0x50>
 800bf22:	4b8b      	ldr	r3, [pc, #556]	; (800c150 <lwip_netconn_do_writemore+0x270>)
 800bf24:	f240 6275 	movw	r2, #1653	; 0x675
 800bf28:	498d      	ldr	r1, [pc, #564]	; (800c160 <lwip_netconn_do_writemore+0x280>)
 800bf2a:	488b      	ldr	r0, [pc, #556]	; (800c158 <lwip_netconn_do_writemore+0x278>)
 800bf2c:	f00d fd58 	bl	80199e0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d106      	bne.n	800bf46 <lwip_netconn_do_writemore+0x66>
 800bf38:	4b85      	ldr	r3, [pc, #532]	; (800c150 <lwip_netconn_do_writemore+0x270>)
 800bf3a:	f240 6276 	movw	r2, #1654	; 0x676
 800bf3e:	4989      	ldr	r1, [pc, #548]	; (800c164 <lwip_netconn_do_writemore+0x284>)
 800bf40:	4885      	ldr	r0, [pc, #532]	; (800c158 <lwip_netconn_do_writemore+0x278>)
 800bf42:	f00d fd4d 	bl	80199e0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6a1b      	ldr	r3, [r3, #32]
 800bf4a:	699a      	ldr	r2, [r3, #24]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6a1b      	ldr	r3, [r3, #32]
 800bf50:	695b      	ldr	r3, [r3, #20]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d306      	bcc.n	800bf64 <lwip_netconn_do_writemore+0x84>
 800bf56:	4b7e      	ldr	r3, [pc, #504]	; (800c150 <lwip_netconn_do_writemore+0x270>)
 800bf58:	f240 6277 	movw	r2, #1655	; 0x677
 800bf5c:	4982      	ldr	r1, [pc, #520]	; (800c168 <lwip_netconn_do_writemore+0x288>)
 800bf5e:	487e      	ldr	r0, [pc, #504]	; (800c158 <lwip_netconn_do_writemore+0x278>)
 800bf60:	f00d fd3e 	bl	80199e0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6a1b      	ldr	r3, [r3, #32]
 800bf68:	899b      	ldrh	r3, [r3, #12]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d106      	bne.n	800bf7c <lwip_netconn_do_writemore+0x9c>
 800bf6e:	4b78      	ldr	r3, [pc, #480]	; (800c150 <lwip_netconn_do_writemore+0x270>)
 800bf70:	f240 6279 	movw	r2, #1657	; 0x679
 800bf74:	497d      	ldr	r1, [pc, #500]	; (800c16c <lwip_netconn_do_writemore+0x28c>)
 800bf76:	4878      	ldr	r0, [pc, #480]	; (800c158 <lwip_netconn_do_writemore+0x278>)
 800bf78:	f00d fd32 	bl	80199e0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6a1b      	ldr	r3, [r3, #32]
 800bf80:	7f1b      	ldrb	r3, [r3, #28]
 800bf82:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	7f1b      	ldrb	r3, [r3, #28]
 800bf88:	f003 0302 	and.w	r3, r3, #2
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d104      	bne.n	800bf9a <lwip_netconn_do_writemore+0xba>
 800bf90:	7ebb      	ldrb	r3, [r7, #26]
 800bf92:	f003 0304 	and.w	r3, r3, #4
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d001      	beq.n	800bf9e <lwip_netconn_do_writemore+0xbe>
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	e000      	b.n	800bfa0 <lwip_netconn_do_writemore+0xc0>
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a1b      	ldr	r3, [r3, #32]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6a1b      	ldr	r3, [r3, #32]
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6a1b      	ldr	r3, [r3, #32]
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	685a      	ldr	r2, [r3, #4]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a1b      	ldr	r3, [r3, #32]
 800bfc0:	691b      	ldr	r3, [r3, #16]
 800bfc2:	1ad3      	subs	r3, r2, r3
 800bfc4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfcc:	d307      	bcc.n	800bfde <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800bfce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bfd2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800bfd4:	7ebb      	ldrb	r3, [r7, #26]
 800bfd6:	f043 0302 	orr.w	r3, r3, #2
 800bfda:	76bb      	strb	r3, [r7, #26]
 800bfdc:	e001      	b.n	800bfe2 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bfea:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800bfec:	89fa      	ldrh	r2, [r7, #14]
 800bfee:	8bbb      	ldrh	r3, [r7, #28]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d216      	bcs.n	800c022 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800bff4:	89fb      	ldrh	r3, [r7, #14]
 800bff6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800bff8:	7e3b      	ldrb	r3, [r7, #24]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00d      	beq.n	800c01a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800bffe:	8bbb      	ldrh	r3, [r7, #28]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10e      	bne.n	800c022 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6a1b      	ldr	r3, [r3, #32]
 800c008:	699b      	ldr	r3, [r3, #24]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d102      	bne.n	800c014 <lwip_netconn_do_writemore+0x134>
 800c00e:	f06f 0306 	mvn.w	r3, #6
 800c012:	e000      	b.n	800c016 <lwip_netconn_do_writemore+0x136>
 800c014:	2300      	movs	r3, #0
 800c016:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800c018:	e07d      	b.n	800c116 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800c01a:	7ebb      	ldrb	r3, [r7, #26]
 800c01c:	f043 0302 	orr.w	r3, r3, #2
 800c020:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a1b      	ldr	r3, [r3, #32]
 800c026:	691a      	ldr	r2, [r3, #16]
 800c028:	8bbb      	ldrh	r3, [r7, #28]
 800c02a:	441a      	add	r2, r3
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6a1b      	ldr	r3, [r3, #32]
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	429a      	cmp	r2, r3
 800c036:	d906      	bls.n	800c046 <lwip_netconn_do_writemore+0x166>
 800c038:	4b45      	ldr	r3, [pc, #276]	; (800c150 <lwip_netconn_do_writemore+0x270>)
 800c03a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800c03e:	494c      	ldr	r1, [pc, #304]	; (800c170 <lwip_netconn_do_writemore+0x290>)
 800c040:	4845      	ldr	r0, [pc, #276]	; (800c158 <lwip_netconn_do_writemore+0x278>)
 800c042:	f00d fccd 	bl	80199e0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c046:	8bbb      	ldrh	r3, [r7, #28]
 800c048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d103      	bne.n	800c058 <lwip_netconn_do_writemore+0x178>
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c056:	d209      	bcs.n	800c06c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c05c:	8bba      	ldrh	r2, [r7, #28]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d10b      	bne.n	800c07a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a1b      	ldr	r3, [r3, #32]
 800c066:	899b      	ldrh	r3, [r3, #12]
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d906      	bls.n	800c07a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800c06c:	2301      	movs	r3, #1
 800c06e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c070:	7ebb      	ldrb	r3, [r7, #26]
 800c072:	f043 0302 	orr.w	r3, r3, #2
 800c076:	76bb      	strb	r3, [r7, #26]
 800c078:	e001      	b.n	800c07e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800c07a:	2300      	movs	r3, #0
 800c07c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6858      	ldr	r0, [r3, #4]
 800c082:	7ebb      	ldrb	r3, [r7, #26]
 800c084:	8bba      	ldrh	r2, [r7, #28]
 800c086:	6979      	ldr	r1, [r7, #20]
 800c088:	f006 fd5e 	bl	8012b48 <tcp_write>
 800c08c:	4603      	mov	r3, r0
 800c08e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800c090:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d12c      	bne.n	800c0f2 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6a1b      	ldr	r3, [r3, #32]
 800c09c:	6999      	ldr	r1, [r3, #24]
 800c09e:	8bba      	ldrh	r2, [r7, #28]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6a1b      	ldr	r3, [r3, #32]
 800c0a4:	440a      	add	r2, r1
 800c0a6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6a1b      	ldr	r3, [r3, #32]
 800c0ac:	6919      	ldr	r1, [r3, #16]
 800c0ae:	8bba      	ldrh	r2, [r7, #28]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6a1b      	ldr	r3, [r3, #32]
 800c0b4:	440a      	add	r2, r1
 800c0b6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6a1b      	ldr	r3, [r3, #32]
 800c0bc:	691a      	ldr	r2, [r3, #16]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6a1b      	ldr	r3, [r3, #32]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d113      	bne.n	800c0f2 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6a1b      	ldr	r3, [r3, #32]
 800c0ce:	899a      	ldrh	r2, [r3, #12]
 800c0d0:	3a01      	subs	r2, #1
 800c0d2:	b292      	uxth	r2, r2
 800c0d4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6a1b      	ldr	r3, [r3, #32]
 800c0da:	899b      	ldrh	r3, [r3, #12]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d008      	beq.n	800c0f2 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6a1b      	ldr	r3, [r3, #32]
 800c0e4:	689a      	ldr	r2, [r3, #8]
 800c0e6:	3208      	adds	r2, #8
 800c0e8:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6a1b      	ldr	r3, [r3, #32]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800c0f2:	7e7b      	ldrb	r3, [r7, #25]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d004      	beq.n	800c102 <lwip_netconn_do_writemore+0x222>
 800c0f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	f43f af50 	beq.w	800bfa2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800c102:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d004      	beq.n	800c114 <lwip_netconn_do_writemore+0x234>
 800c10a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c10e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c112:	d146      	bne.n	800c1a2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800c114:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800c116:	7e3b      	ldrb	r3, [r7, #24]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d02b      	beq.n	800c174 <lwip_netconn_do_writemore+0x294>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6a1b      	ldr	r3, [r3, #32]
 800c120:	699a      	ldr	r2, [r3, #24]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6a1b      	ldr	r3, [r3, #32]
 800c126:	695b      	ldr	r3, [r3, #20]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d223      	bcs.n	800c174 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c130:	2b00      	cmp	r3, #0
 800c132:	d005      	beq.n	800c140 <lwip_netconn_do_writemore+0x260>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c138:	2200      	movs	r2, #0
 800c13a:	2103      	movs	r1, #3
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	7f1b      	ldrb	r3, [r3, #28]
 800c144:	f043 0310 	orr.w	r3, r3, #16
 800c148:	b2da      	uxtb	r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	771a      	strb	r2, [r3, #28]
 800c14e:	e028      	b.n	800c1a2 <lwip_netconn_do_writemore+0x2c2>
 800c150:	0801b144 	.word	0x0801b144
 800c154:	0801b29c 	.word	0x0801b29c
 800c158:	0801b188 	.word	0x0801b188
 800c15c:	0801b5a4 	.word	0x0801b5a4
 800c160:	0801b2ac 	.word	0x0801b2ac
 800c164:	0801b5c4 	.word	0x0801b5c4
 800c168:	0801b5dc 	.word	0x0801b5dc
 800c16c:	0801b61c 	.word	0x0801b61c
 800c170:	0801b644 	.word	0x0801b644
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c17c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800c180:	d305      	bcc.n	800c18e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c18a:	2b04      	cmp	r3, #4
 800c18c:	d909      	bls.n	800c1a2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c192:	2b00      	cmp	r3, #0
 800c194:	d005      	beq.n	800c1a2 <lwip_netconn_do_writemore+0x2c2>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c19a:	2200      	movs	r2, #0
 800c19c:	2103      	movs	r1, #3
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800c1a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d11d      	bne.n	800c1e6 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6a1b      	ldr	r3, [r3, #32]
 800c1ae:	699a      	ldr	r2, [r3, #24]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6a1b      	ldr	r3, [r3, #32]
 800c1b4:	695b      	ldr	r3, [r3, #20]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d002      	beq.n	800c1c0 <lwip_netconn_do_writemore+0x2e0>
 800c1ba:	7e3b      	ldrb	r3, [r7, #24]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d001      	beq.n	800c1c4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f007 faa7 	bl	801371c <tcp_output>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800c1d2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800c1d6:	f113 0f04 	cmn.w	r3, #4
 800c1da:	d12c      	bne.n	800c236 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c1dc:	7b3b      	ldrb	r3, [r7, #12]
 800c1de:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	76fb      	strb	r3, [r7, #27]
 800c1e4:	e027      	b.n	800c236 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800c1e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c1ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1ee:	d120      	bne.n	800c232 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f007 fa91 	bl	801371c <tcp_output>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800c1fe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c202:	f113 0f04 	cmn.w	r3, #4
 800c206:	d104      	bne.n	800c212 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c208:	7b7b      	ldrb	r3, [r7, #13]
 800c20a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c20c:	2301      	movs	r3, #1
 800c20e:	76fb      	strb	r3, [r7, #27]
 800c210:	e011      	b.n	800c236 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800c212:	7e3b      	ldrb	r3, [r7, #24]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d00e      	beq.n	800c236 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6a1b      	ldr	r3, [r3, #32]
 800c21c:	699b      	ldr	r3, [r3, #24]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d102      	bne.n	800c228 <lwip_netconn_do_writemore+0x348>
 800c222:	f06f 0306 	mvn.w	r3, #6
 800c226:	e000      	b.n	800c22a <lwip_netconn_do_writemore+0x34a>
 800c228:	2300      	movs	r3, #0
 800c22a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c22c:	2301      	movs	r3, #1
 800c22e:	76fb      	strb	r3, [r7, #27]
 800c230:	e001      	b.n	800c236 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800c232:	2301      	movs	r3, #1
 800c234:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800c236:	7efb      	ldrb	r3, [r7, #27]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d015      	beq.n	800c268 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6a1b      	ldr	r3, [r3, #32]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	330c      	adds	r3, #12
 800c244:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6a1b      	ldr	r3, [r3, #32]
 800c24a:	7ffa      	ldrb	r2, [r7, #31]
 800c24c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c25a:	78fb      	ldrb	r3, [r7, #3]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d006      	beq.n	800c26e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800c260:	68b8      	ldr	r0, [r7, #8]
 800c262:	f00b fbc9 	bl	80179f8 <sys_sem_signal>
 800c266:	e002      	b.n	800c26e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800c268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c26c:	e000      	b.n	800c270 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800c26e:	2300      	movs	r3, #0
}
 800c270:	4618      	mov	r0, r3
 800c272:	3720      	adds	r7, #32
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4618      	mov	r0, r3
 800c28a:	f7fe fd5c 	bl	800ad46 <netconn_err>
 800c28e:	4603      	mov	r3, r0
 800c290:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d166      	bne.n	800c368 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2a4:	2b10      	cmp	r3, #16
 800c2a6:	d15d      	bne.n	800c364 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	785b      	ldrb	r3, [r3, #1]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d002      	beq.n	800c2b8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800c2b2:	23fb      	movs	r3, #251	; 0xfb
 800c2b4:	73fb      	strb	r3, [r7, #15]
 800c2b6:	e057      	b.n	800c368 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d04d      	beq.n	800c35e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	6a1b      	ldr	r3, [r3, #32]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d006      	beq.n	800c2e2 <lwip_netconn_do_write+0x6a>
 800c2d4:	4b28      	ldr	r3, [pc, #160]	; (800c378 <lwip_netconn_do_write+0x100>)
 800c2d6:	f240 7223 	movw	r2, #1827	; 0x723
 800c2da:	4928      	ldr	r1, [pc, #160]	; (800c37c <lwip_netconn_do_write+0x104>)
 800c2dc:	4828      	ldr	r0, [pc, #160]	; (800c380 <lwip_netconn_do_write+0x108>)
 800c2de:	f00d fb7f 	bl	80199e0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	695b      	ldr	r3, [r3, #20]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d106      	bne.n	800c2f8 <lwip_netconn_do_write+0x80>
 800c2ea:	4b23      	ldr	r3, [pc, #140]	; (800c378 <lwip_netconn_do_write+0x100>)
 800c2ec:	f240 7224 	movw	r2, #1828	; 0x724
 800c2f0:	4924      	ldr	r1, [pc, #144]	; (800c384 <lwip_netconn_do_write+0x10c>)
 800c2f2:	4823      	ldr	r0, [pc, #140]	; (800c380 <lwip_netconn_do_write+0x108>)
 800c2f4:	f00d fb74 	bl	80199e0 <iprintf>
        msg->conn->current_msg = msg;
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	68ba      	ldr	r2, [r7, #8]
 800c2fe:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2100      	movs	r1, #0
 800c306:	4618      	mov	r0, r3
 800c308:	f7ff fdea 	bl	800bee0 <lwip_netconn_do_writemore>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d02e      	beq.n	800c370 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	785b      	ldrb	r3, [r3, #1]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d006      	beq.n	800c32a <lwip_netconn_do_write+0xb2>
 800c31c:	4b16      	ldr	r3, [pc, #88]	; (800c378 <lwip_netconn_do_write+0x100>)
 800c31e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800c322:	4919      	ldr	r1, [pc, #100]	; (800c388 <lwip_netconn_do_write+0x110>)
 800c324:	4816      	ldr	r0, [pc, #88]	; (800c380 <lwip_netconn_do_write+0x108>)
 800c326:	f00d fb5b 	bl	80199e0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800c32a:	4818      	ldr	r0, [pc, #96]	; (800c38c <lwip_netconn_do_write+0x114>)
 800c32c:	f00b fbd5 	bl	8017ada <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	330c      	adds	r3, #12
 800c336:	2100      	movs	r1, #0
 800c338:	4618      	mov	r0, r3
 800c33a:	f00b fb2c 	bl	8017996 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800c33e:	4813      	ldr	r0, [pc, #76]	; (800c38c <lwip_netconn_do_write+0x114>)
 800c340:	f00b fbbc 	bl	8017abc <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	785b      	ldrb	r3, [r3, #1]
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d110      	bne.n	800c370 <lwip_netconn_do_write+0xf8>
 800c34e:	4b0a      	ldr	r3, [pc, #40]	; (800c378 <lwip_netconn_do_write+0x100>)
 800c350:	f240 722c 	movw	r2, #1836	; 0x72c
 800c354:	490c      	ldr	r1, [pc, #48]	; (800c388 <lwip_netconn_do_write+0x110>)
 800c356:	480a      	ldr	r0, [pc, #40]	; (800c380 <lwip_netconn_do_write+0x108>)
 800c358:	f00d fb42 	bl	80199e0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800c35c:	e008      	b.n	800c370 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800c35e:	23f5      	movs	r3, #245	; 0xf5
 800c360:	73fb      	strb	r3, [r7, #15]
 800c362:	e001      	b.n	800c368 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800c364:	23fa      	movs	r3, #250	; 0xfa
 800c366:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	7bfa      	ldrb	r2, [r7, #15]
 800c36c:	711a      	strb	r2, [r3, #4]
 800c36e:	e000      	b.n	800c372 <lwip_netconn_do_write+0xfa>
        return;
 800c370:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	0801b144 	.word	0x0801b144
 800c37c:	0801b4e8 	.word	0x0801b4e8
 800c380:	0801b188 	.word	0x0801b188
 800c384:	0801b670 	.word	0x0801b670
 800c388:	0801b504 	.word	0x0801b504
 800c38c:	2000a1a0 	.word	0x2000a1a0

0800c390 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	785b      	ldrb	r3, [r3, #1]
 800c3a2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d069      	beq.n	800c482 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800c3b8:	2b10      	cmp	r3, #16
 800c3ba:	d162      	bne.n	800c482 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c3c0:	2b03      	cmp	r3, #3
 800c3c2:	d002      	beq.n	800c3ca <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c3c4:	7afb      	ldrb	r3, [r7, #11]
 800c3c6:	2b02      	cmp	r3, #2
 800c3c8:	d05b      	beq.n	800c482 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800c3ca:	7afb      	ldrb	r3, [r7, #11]
 800c3cc:	2b03      	cmp	r3, #3
 800c3ce:	d103      	bne.n	800c3d8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	22f5      	movs	r2, #245	; 0xf5
 800c3d4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c3d6:	e059      	b.n	800c48c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800c3d8:	7afb      	ldrb	r3, [r7, #11]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d103      	bne.n	800c3e6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	22fb      	movs	r2, #251	; 0xfb
 800c3e2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c3e4:	e052      	b.n	800c48c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	7a1b      	ldrb	r3, [r3, #8]
 800c3ea:	f003 0301 	and.w	r3, r3, #1
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d004      	beq.n	800c3fc <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7ff f922 	bl	800b640 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	6a1b      	ldr	r3, [r3, #32]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d006      	beq.n	800c414 <lwip_netconn_do_close+0x84>
 800c406:	4b23      	ldr	r3, [pc, #140]	; (800c494 <lwip_netconn_do_close+0x104>)
 800c408:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800c40c:	4922      	ldr	r1, [pc, #136]	; (800c498 <lwip_netconn_do_close+0x108>)
 800c40e:	4823      	ldr	r0, [pc, #140]	; (800c49c <lwip_netconn_do_close+0x10c>)
 800c410:	f00d fae6 	bl	80199e0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2204      	movs	r2, #4
 800c41a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2100      	movs	r1, #0
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7ff f986 	bl	800b73c <lwip_netconn_do_close_internal>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	d029      	beq.n	800c48a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	785b      	ldrb	r3, [r3, #1]
 800c43c:	2b04      	cmp	r3, #4
 800c43e:	d006      	beq.n	800c44e <lwip_netconn_do_close+0xbe>
 800c440:	4b14      	ldr	r3, [pc, #80]	; (800c494 <lwip_netconn_do_close+0x104>)
 800c442:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800c446:	4916      	ldr	r1, [pc, #88]	; (800c4a0 <lwip_netconn_do_close+0x110>)
 800c448:	4814      	ldr	r0, [pc, #80]	; (800c49c <lwip_netconn_do_close+0x10c>)
 800c44a:	f00d fac9 	bl	80199e0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800c44e:	4815      	ldr	r0, [pc, #84]	; (800c4a4 <lwip_netconn_do_close+0x114>)
 800c450:	f00b fb43 	bl	8017ada <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	330c      	adds	r3, #12
 800c45a:	2100      	movs	r1, #0
 800c45c:	4618      	mov	r0, r3
 800c45e:	f00b fa9a 	bl	8017996 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800c462:	4810      	ldr	r0, [pc, #64]	; (800c4a4 <lwip_netconn_do_close+0x114>)
 800c464:	f00b fb2a 	bl	8017abc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	785b      	ldrb	r3, [r3, #1]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00b      	beq.n	800c48a <lwip_netconn_do_close+0xfa>
 800c472:	4b08      	ldr	r3, [pc, #32]	; (800c494 <lwip_netconn_do_close+0x104>)
 800c474:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800c478:	4909      	ldr	r1, [pc, #36]	; (800c4a0 <lwip_netconn_do_close+0x110>)
 800c47a:	4808      	ldr	r0, [pc, #32]	; (800c49c <lwip_netconn_do_close+0x10c>)
 800c47c:	f00d fab0 	bl	80199e0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800c480:	e003      	b.n	800c48a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	22f5      	movs	r2, #245	; 0xf5
 800c486:	711a      	strb	r2, [r3, #4]
 800c488:	e000      	b.n	800c48c <lwip_netconn_do_close+0xfc>
      return;
 800c48a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	0801b144 	.word	0x0801b144
 800c498:	0801b4e8 	.word	0x0801b4e8
 800c49c:	0801b188 	.word	0x0801b188
 800c4a0:	0801b504 	.word	0x0801b504
 800c4a4:	2000a1a0 	.word	0x2000a1a0

0800c4a8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d013      	beq.n	800c4de <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d00b      	beq.n	800c4d6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f001 fdca 	bl	800e05c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	605a      	str	r2, [r3, #4]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	685a      	ldr	r2, [r3, #4]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800c4d6:	6879      	ldr	r1, [r7, #4]
 800c4d8:	2006      	movs	r0, #6
 800c4da:	f000 ff1b 	bl	800d314 <memp_free>
  }
}
 800c4de:	bf00      	nop
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
	...

0800c4e8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c4f2:	f008 f9cb 	bl	801488c <sys_timeouts_sleeptime>
 800c4f6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4fe:	d10b      	bne.n	800c518 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c500:	4813      	ldr	r0, [pc, #76]	; (800c550 <tcpip_timeouts_mbox_fetch+0x68>)
 800c502:	f00b faea 	bl	8017ada <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c506:	2200      	movs	r2, #0
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f00b f9a2 	bl	8017854 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c510:	480f      	ldr	r0, [pc, #60]	; (800c550 <tcpip_timeouts_mbox_fetch+0x68>)
 800c512:	f00b fad3 	bl	8017abc <sys_mutex_lock>
    return;
 800c516:	e018      	b.n	800c54a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d102      	bne.n	800c524 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c51e:	f008 f97b 	bl	8014818 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c522:	e7e6      	b.n	800c4f2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c524:	480a      	ldr	r0, [pc, #40]	; (800c550 <tcpip_timeouts_mbox_fetch+0x68>)
 800c526:	f00b fad8 	bl	8017ada <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	6839      	ldr	r1, [r7, #0]
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f00b f990 	bl	8017854 <sys_arch_mbox_fetch>
 800c534:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c536:	4806      	ldr	r0, [pc, #24]	; (800c550 <tcpip_timeouts_mbox_fetch+0x68>)
 800c538:	f00b fac0 	bl	8017abc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c542:	d102      	bne.n	800c54a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c544:	f008 f968 	bl	8014818 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c548:	e7d3      	b.n	800c4f2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c54a:	3710      	adds	r7, #16
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	2000a1a0 	.word	0x2000a1a0

0800c554 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c55c:	4810      	ldr	r0, [pc, #64]	; (800c5a0 <tcpip_thread+0x4c>)
 800c55e:	f00b faad 	bl	8017abc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c562:	4b10      	ldr	r3, [pc, #64]	; (800c5a4 <tcpip_thread+0x50>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d005      	beq.n	800c576 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c56a:	4b0e      	ldr	r3, [pc, #56]	; (800c5a4 <tcpip_thread+0x50>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a0e      	ldr	r2, [pc, #56]	; (800c5a8 <tcpip_thread+0x54>)
 800c570:	6812      	ldr	r2, [r2, #0]
 800c572:	4610      	mov	r0, r2
 800c574:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c576:	f107 030c 	add.w	r3, r7, #12
 800c57a:	4619      	mov	r1, r3
 800c57c:	480b      	ldr	r0, [pc, #44]	; (800c5ac <tcpip_thread+0x58>)
 800c57e:	f7ff ffb3 	bl	800c4e8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d106      	bne.n	800c596 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c588:	4b09      	ldr	r3, [pc, #36]	; (800c5b0 <tcpip_thread+0x5c>)
 800c58a:	2291      	movs	r2, #145	; 0x91
 800c58c:	4909      	ldr	r1, [pc, #36]	; (800c5b4 <tcpip_thread+0x60>)
 800c58e:	480a      	ldr	r0, [pc, #40]	; (800c5b8 <tcpip_thread+0x64>)
 800c590:	f00d fa26 	bl	80199e0 <iprintf>
      continue;
 800c594:	e003      	b.n	800c59e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	4618      	mov	r0, r3
 800c59a:	f000 f80f 	bl	800c5bc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c59e:	e7ea      	b.n	800c576 <tcpip_thread+0x22>
 800c5a0:	2000a1a0 	.word	0x2000a1a0
 800c5a4:	2000a194 	.word	0x2000a194
 800c5a8:	2000a198 	.word	0x2000a198
 800c5ac:	2000a19c 	.word	0x2000a19c
 800c5b0:	0801b69c 	.word	0x0801b69c
 800c5b4:	0801b6cc 	.word	0x0801b6cc
 800c5b8:	0801b6ec 	.word	0x0801b6ec

0800c5bc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	2b02      	cmp	r3, #2
 800c5ca:	d026      	beq.n	800c61a <tcpip_thread_handle_msg+0x5e>
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	dc2b      	bgt.n	800c628 <tcpip_thread_handle_msg+0x6c>
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d002      	beq.n	800c5da <tcpip_thread_handle_msg+0x1e>
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d015      	beq.n	800c604 <tcpip_thread_handle_msg+0x48>
 800c5d8:	e026      	b.n	800c628 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	68db      	ldr	r3, [r3, #12]
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	6850      	ldr	r0, [r2, #4]
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	6892      	ldr	r2, [r2, #8]
 800c5e6:	4611      	mov	r1, r2
 800c5e8:	4798      	blx	r3
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d004      	beq.n	800c5fa <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f001 fd31 	bl	800e05c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c5fa:	6879      	ldr	r1, [r7, #4]
 800c5fc:	2009      	movs	r0, #9
 800c5fe:	f000 fe89 	bl	800d314 <memp_free>
      break;
 800c602:	e018      	b.n	800c636 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	6892      	ldr	r2, [r2, #8]
 800c60c:	4610      	mov	r0, r2
 800c60e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c610:	6879      	ldr	r1, [r7, #4]
 800c612:	2008      	movs	r0, #8
 800c614:	f000 fe7e 	bl	800d314 <memp_free>
      break;
 800c618:	e00d      	b.n	800c636 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	6892      	ldr	r2, [r2, #8]
 800c622:	4610      	mov	r0, r2
 800c624:	4798      	blx	r3
      break;
 800c626:	e006      	b.n	800c636 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c628:	4b05      	ldr	r3, [pc, #20]	; (800c640 <tcpip_thread_handle_msg+0x84>)
 800c62a:	22cf      	movs	r2, #207	; 0xcf
 800c62c:	4905      	ldr	r1, [pc, #20]	; (800c644 <tcpip_thread_handle_msg+0x88>)
 800c62e:	4806      	ldr	r0, [pc, #24]	; (800c648 <tcpip_thread_handle_msg+0x8c>)
 800c630:	f00d f9d6 	bl	80199e0 <iprintf>
      break;
 800c634:	bf00      	nop
  }
}
 800c636:	bf00      	nop
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	0801b69c 	.word	0x0801b69c
 800c644:	0801b6cc 	.word	0x0801b6cc
 800c648:	0801b6ec 	.word	0x0801b6ec

0800c64c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b086      	sub	sp, #24
 800c650:	af00      	add	r7, sp, #0
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c658:	481a      	ldr	r0, [pc, #104]	; (800c6c4 <tcpip_inpkt+0x78>)
 800c65a:	f00b f956 	bl	801790a <sys_mbox_valid>
 800c65e:	4603      	mov	r3, r0
 800c660:	2b00      	cmp	r3, #0
 800c662:	d105      	bne.n	800c670 <tcpip_inpkt+0x24>
 800c664:	4b18      	ldr	r3, [pc, #96]	; (800c6c8 <tcpip_inpkt+0x7c>)
 800c666:	22fc      	movs	r2, #252	; 0xfc
 800c668:	4918      	ldr	r1, [pc, #96]	; (800c6cc <tcpip_inpkt+0x80>)
 800c66a:	4819      	ldr	r0, [pc, #100]	; (800c6d0 <tcpip_inpkt+0x84>)
 800c66c:	f00d f9b8 	bl	80199e0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c670:	2009      	movs	r0, #9
 800c672:	f000 fdd9 	bl	800d228 <memp_malloc>
 800c676:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d102      	bne.n	800c684 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c67e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c682:	e01a      	b.n	800c6ba <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	2200      	movs	r2, #0
 800c688:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	68fa      	ldr	r2, [r7, #12]
 800c68e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	68ba      	ldr	r2, [r7, #8]
 800c694:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c69c:	6979      	ldr	r1, [r7, #20]
 800c69e:	4809      	ldr	r0, [pc, #36]	; (800c6c4 <tcpip_inpkt+0x78>)
 800c6a0:	f00b f8be 	bl	8017820 <sys_mbox_trypost>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d006      	beq.n	800c6b8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c6aa:	6979      	ldr	r1, [r7, #20]
 800c6ac:	2009      	movs	r0, #9
 800c6ae:	f000 fe31 	bl	800d314 <memp_free>
    return ERR_MEM;
 800c6b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6b6:	e000      	b.n	800c6ba <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c6b8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3718      	adds	r7, #24
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	2000a19c 	.word	0x2000a19c
 800c6c8:	0801b69c 	.word	0x0801b69c
 800c6cc:	0801b714 	.word	0x0801b714
 800c6d0:	0801b6ec 	.word	0x0801b6ec

0800c6d4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c6e4:	f003 0318 	and.w	r3, r3, #24
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d006      	beq.n	800c6fa <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c6ec:	4a08      	ldr	r2, [pc, #32]	; (800c710 <tcpip_input+0x3c>)
 800c6ee:	6839      	ldr	r1, [r7, #0]
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7ff ffab 	bl	800c64c <tcpip_inpkt>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	e005      	b.n	800c706 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c6fa:	4a06      	ldr	r2, [pc, #24]	; (800c714 <tcpip_input+0x40>)
 800c6fc:	6839      	ldr	r1, [r7, #0]
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f7ff ffa4 	bl	800c64c <tcpip_inpkt>
 800c704:	4603      	mov	r3, r0
}
 800c706:	4618      	mov	r0, r3
 800c708:	3708      	adds	r7, #8
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	0801760d 	.word	0x0801760d
 800c714:	080162c1 	.word	0x080162c1

0800c718 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c722:	4819      	ldr	r0, [pc, #100]	; (800c788 <tcpip_try_callback+0x70>)
 800c724:	f00b f8f1 	bl	801790a <sys_mbox_valid>
 800c728:	4603      	mov	r3, r0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d106      	bne.n	800c73c <tcpip_try_callback+0x24>
 800c72e:	4b17      	ldr	r3, [pc, #92]	; (800c78c <tcpip_try_callback+0x74>)
 800c730:	f240 125d 	movw	r2, #349	; 0x15d
 800c734:	4916      	ldr	r1, [pc, #88]	; (800c790 <tcpip_try_callback+0x78>)
 800c736:	4817      	ldr	r0, [pc, #92]	; (800c794 <tcpip_try_callback+0x7c>)
 800c738:	f00d f952 	bl	80199e0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c73c:	2008      	movs	r0, #8
 800c73e:	f000 fd73 	bl	800d228 <memp_malloc>
 800c742:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d102      	bne.n	800c750 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c74a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c74e:	e017      	b.n	800c780 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2201      	movs	r2, #1
 800c754:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	683a      	ldr	r2, [r7, #0]
 800c760:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c762:	68f9      	ldr	r1, [r7, #12]
 800c764:	4808      	ldr	r0, [pc, #32]	; (800c788 <tcpip_try_callback+0x70>)
 800c766:	f00b f85b 	bl	8017820 <sys_mbox_trypost>
 800c76a:	4603      	mov	r3, r0
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d006      	beq.n	800c77e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c770:	68f9      	ldr	r1, [r7, #12]
 800c772:	2008      	movs	r0, #8
 800c774:	f000 fdce 	bl	800d314 <memp_free>
    return ERR_MEM;
 800c778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c77c:	e000      	b.n	800c780 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c77e:	2300      	movs	r3, #0
}
 800c780:	4618      	mov	r0, r3
 800c782:	3710      	adds	r7, #16
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	2000a19c 	.word	0x2000a19c
 800c78c:	0801b69c 	.word	0x0801b69c
 800c790:	0801b714 	.word	0x0801b714
 800c794:	0801b6ec 	.word	0x0801b6ec

0800c798 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c7a4:	4806      	ldr	r0, [pc, #24]	; (800c7c0 <tcpip_send_msg_wait_sem+0x28>)
 800c7a6:	f00b f989 	bl	8017abc <sys_mutex_lock>
  fn(apimsg);
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	68b8      	ldr	r0, [r7, #8]
 800c7ae:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c7b0:	4803      	ldr	r0, [pc, #12]	; (800c7c0 <tcpip_send_msg_wait_sem+0x28>)
 800c7b2:	f00b f992 	bl	8017ada <sys_mutex_unlock>
  return ERR_OK;
 800c7b6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3710      	adds	r7, #16
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	2000a1a0 	.word	0x2000a1a0

0800c7c4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af02      	add	r7, sp, #8
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c7ce:	f000 f871 	bl	800c8b4 <lwip_init>

  tcpip_init_done = initfunc;
 800c7d2:	4a17      	ldr	r2, [pc, #92]	; (800c830 <tcpip_init+0x6c>)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c7d8:	4a16      	ldr	r2, [pc, #88]	; (800c834 <tcpip_init+0x70>)
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c7de:	2106      	movs	r1, #6
 800c7e0:	4815      	ldr	r0, [pc, #84]	; (800c838 <tcpip_init+0x74>)
 800c7e2:	f00a ffe9 	bl	80177b8 <sys_mbox_new>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d006      	beq.n	800c7fa <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c7ec:	4b13      	ldr	r3, [pc, #76]	; (800c83c <tcpip_init+0x78>)
 800c7ee:	f240 2261 	movw	r2, #609	; 0x261
 800c7f2:	4913      	ldr	r1, [pc, #76]	; (800c840 <tcpip_init+0x7c>)
 800c7f4:	4813      	ldr	r0, [pc, #76]	; (800c844 <tcpip_init+0x80>)
 800c7f6:	f00d f8f3 	bl	80199e0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c7fa:	4813      	ldr	r0, [pc, #76]	; (800c848 <tcpip_init+0x84>)
 800c7fc:	f00b f942 	bl	8017a84 <sys_mutex_new>
 800c800:	4603      	mov	r3, r0
 800c802:	2b00      	cmp	r3, #0
 800c804:	d006      	beq.n	800c814 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c806:	4b0d      	ldr	r3, [pc, #52]	; (800c83c <tcpip_init+0x78>)
 800c808:	f240 2265 	movw	r2, #613	; 0x265
 800c80c:	490f      	ldr	r1, [pc, #60]	; (800c84c <tcpip_init+0x88>)
 800c80e:	480d      	ldr	r0, [pc, #52]	; (800c844 <tcpip_init+0x80>)
 800c810:	f00d f8e6 	bl	80199e0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c814:	2300      	movs	r3, #0
 800c816:	9300      	str	r3, [sp, #0]
 800c818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c81c:	2200      	movs	r2, #0
 800c81e:	490c      	ldr	r1, [pc, #48]	; (800c850 <tcpip_init+0x8c>)
 800c820:	480c      	ldr	r0, [pc, #48]	; (800c854 <tcpip_init+0x90>)
 800c822:	f00b f967 	bl	8017af4 <sys_thread_new>
}
 800c826:	bf00      	nop
 800c828:	3708      	adds	r7, #8
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	2000a194 	.word	0x2000a194
 800c834:	2000a198 	.word	0x2000a198
 800c838:	2000a19c 	.word	0x2000a19c
 800c83c:	0801b69c 	.word	0x0801b69c
 800c840:	0801b724 	.word	0x0801b724
 800c844:	0801b6ec 	.word	0x0801b6ec
 800c848:	2000a1a0 	.word	0x2000a1a0
 800c84c:	0801b748 	.word	0x0801b748
 800c850:	0800c555 	.word	0x0800c555
 800c854:	0801b76c 	.word	0x0801b76c

0800c858 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	4603      	mov	r3, r0
 800c860:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c862:	88fb      	ldrh	r3, [r7, #6]
 800c864:	021b      	lsls	r3, r3, #8
 800c866:	b21a      	sxth	r2, r3
 800c868:	88fb      	ldrh	r3, [r7, #6]
 800c86a:	0a1b      	lsrs	r3, r3, #8
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	b21b      	sxth	r3, r3
 800c870:	4313      	orrs	r3, r2
 800c872:	b21b      	sxth	r3, r3
 800c874:	b29b      	uxth	r3, r3
}
 800c876:	4618      	mov	r0, r3
 800c878:	370c      	adds	r7, #12
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr

0800c882 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c882:	b480      	push	{r7}
 800c884:	b083      	sub	sp, #12
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	061a      	lsls	r2, r3, #24
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	021b      	lsls	r3, r3, #8
 800c892:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c896:	431a      	orrs	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	0a1b      	lsrs	r3, r3, #8
 800c89c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c8a0:	431a      	orrs	r2, r3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	0e1b      	lsrs	r3, r3, #24
 800c8a6:	4313      	orrs	r3, r2
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	370c      	adds	r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c8be:	f00b f8d3 	bl	8017a68 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c8c2:	f000 f8d9 	bl	800ca78 <mem_init>
  memp_init();
 800c8c6:	f000 fc41 	bl	800d14c <memp_init>
  pbuf_init();
  netif_init();
 800c8ca:	f000 fd4d 	bl	800d368 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c8ce:	f008 f815 	bl	80148fc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c8d2:	f001 fe5d 	bl	800e590 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c8d6:	f007 ff57 	bl	8014788 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c8da:	bf00      	nop
 800c8dc:	3708      	adds	r7, #8
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
	...

0800c8e4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c8ee:	4b05      	ldr	r3, [pc, #20]	; (800c904 <ptr_to_mem+0x20>)
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	88fb      	ldrh	r3, [r7, #6]
 800c8f4:	4413      	add	r3, r2
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	370c      	adds	r7, #12
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	2000e1b8 	.word	0x2000e1b8

0800c908 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c908:	b480      	push	{r7}
 800c90a:	b083      	sub	sp, #12
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c910:	4b05      	ldr	r3, [pc, #20]	; (800c928 <mem_to_ptr+0x20>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	1ad3      	subs	r3, r2, r3
 800c918:	b29b      	uxth	r3, r3
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	370c      	adds	r7, #12
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	2000e1b8 	.word	0x2000e1b8

0800c92c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c92c:	b590      	push	{r4, r7, lr}
 800c92e:	b085      	sub	sp, #20
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c934:	4b47      	ldr	r3, [pc, #284]	; (800ca54 <plug_holes+0x128>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d206      	bcs.n	800c94c <plug_holes+0x20>
 800c93e:	4b46      	ldr	r3, [pc, #280]	; (800ca58 <plug_holes+0x12c>)
 800c940:	f240 12df 	movw	r2, #479	; 0x1df
 800c944:	4945      	ldr	r1, [pc, #276]	; (800ca5c <plug_holes+0x130>)
 800c946:	4846      	ldr	r0, [pc, #280]	; (800ca60 <plug_holes+0x134>)
 800c948:	f00d f84a 	bl	80199e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c94c:	4b45      	ldr	r3, [pc, #276]	; (800ca64 <plug_holes+0x138>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	429a      	cmp	r2, r3
 800c954:	d306      	bcc.n	800c964 <plug_holes+0x38>
 800c956:	4b40      	ldr	r3, [pc, #256]	; (800ca58 <plug_holes+0x12c>)
 800c958:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c95c:	4942      	ldr	r1, [pc, #264]	; (800ca68 <plug_holes+0x13c>)
 800c95e:	4840      	ldr	r0, [pc, #256]	; (800ca60 <plug_holes+0x134>)
 800c960:	f00d f83e 	bl	80199e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	791b      	ldrb	r3, [r3, #4]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d006      	beq.n	800c97a <plug_holes+0x4e>
 800c96c:	4b3a      	ldr	r3, [pc, #232]	; (800ca58 <plug_holes+0x12c>)
 800c96e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c972:	493e      	ldr	r1, [pc, #248]	; (800ca6c <plug_holes+0x140>)
 800c974:	483a      	ldr	r0, [pc, #232]	; (800ca60 <plug_holes+0x134>)
 800c976:	f00d f833 	bl	80199e0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	881b      	ldrh	r3, [r3, #0]
 800c97e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c982:	4293      	cmp	r3, r2
 800c984:	d906      	bls.n	800c994 <plug_holes+0x68>
 800c986:	4b34      	ldr	r3, [pc, #208]	; (800ca58 <plug_holes+0x12c>)
 800c988:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c98c:	4938      	ldr	r1, [pc, #224]	; (800ca70 <plug_holes+0x144>)
 800c98e:	4834      	ldr	r0, [pc, #208]	; (800ca60 <plug_holes+0x134>)
 800c990:	f00d f826 	bl	80199e0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	881b      	ldrh	r3, [r3, #0]
 800c998:	4618      	mov	r0, r3
 800c99a:	f7ff ffa3 	bl	800c8e4 <ptr_to_mem>
 800c99e:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d025      	beq.n	800c9f4 <plug_holes+0xc8>
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	791b      	ldrb	r3, [r3, #4]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d121      	bne.n	800c9f4 <plug_holes+0xc8>
 800c9b0:	4b2c      	ldr	r3, [pc, #176]	; (800ca64 <plug_holes+0x138>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d01c      	beq.n	800c9f4 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c9ba:	4b2e      	ldr	r3, [pc, #184]	; (800ca74 <plug_holes+0x148>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d102      	bne.n	800c9ca <plug_holes+0x9e>
      lfree = mem;
 800c9c4:	4a2b      	ldr	r2, [pc, #172]	; (800ca74 <plug_holes+0x148>)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	881a      	ldrh	r2, [r3, #0]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	881b      	ldrh	r3, [r3, #0]
 800c9d6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d00a      	beq.n	800c9f4 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	881b      	ldrh	r3, [r3, #0]
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7ff ff7e 	bl	800c8e4 <ptr_to_mem>
 800c9e8:	4604      	mov	r4, r0
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f7ff ff8c 	bl	800c908 <mem_to_ptr>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	885b      	ldrh	r3, [r3, #2]
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7ff ff73 	bl	800c8e4 <ptr_to_mem>
 800c9fe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ca00:	68ba      	ldr	r2, [r7, #8]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d020      	beq.n	800ca4a <plug_holes+0x11e>
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	791b      	ldrb	r3, [r3, #4]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d11c      	bne.n	800ca4a <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ca10:	4b18      	ldr	r3, [pc, #96]	; (800ca74 <plug_holes+0x148>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d102      	bne.n	800ca20 <plug_holes+0xf4>
      lfree = pmem;
 800ca1a:	4a16      	ldr	r2, [pc, #88]	; (800ca74 <plug_holes+0x148>)
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	881a      	ldrh	r2, [r3, #0]
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	881b      	ldrh	r3, [r3, #0]
 800ca2c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d00a      	beq.n	800ca4a <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	881b      	ldrh	r3, [r3, #0]
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7ff ff53 	bl	800c8e4 <ptr_to_mem>
 800ca3e:	4604      	mov	r4, r0
 800ca40:	68b8      	ldr	r0, [r7, #8]
 800ca42:	f7ff ff61 	bl	800c908 <mem_to_ptr>
 800ca46:	4603      	mov	r3, r0
 800ca48:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ca4a:	bf00      	nop
 800ca4c:	3714      	adds	r7, #20
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd90      	pop	{r4, r7, pc}
 800ca52:	bf00      	nop
 800ca54:	2000e1b8 	.word	0x2000e1b8
 800ca58:	0801b77c 	.word	0x0801b77c
 800ca5c:	0801b7ac 	.word	0x0801b7ac
 800ca60:	0801b7c4 	.word	0x0801b7c4
 800ca64:	2000e1bc 	.word	0x2000e1bc
 800ca68:	0801b7ec 	.word	0x0801b7ec
 800ca6c:	0801b808 	.word	0x0801b808
 800ca70:	0801b824 	.word	0x0801b824
 800ca74:	2000e1c4 	.word	0x2000e1c4

0800ca78 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ca7e:	4b1f      	ldr	r3, [pc, #124]	; (800cafc <mem_init+0x84>)
 800ca80:	3303      	adds	r3, #3
 800ca82:	f023 0303 	bic.w	r3, r3, #3
 800ca86:	461a      	mov	r2, r3
 800ca88:	4b1d      	ldr	r3, [pc, #116]	; (800cb00 <mem_init+0x88>)
 800ca8a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ca8c:	4b1c      	ldr	r3, [pc, #112]	; (800cb00 <mem_init+0x88>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ca98:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2200      	movs	r2, #0
 800caa4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800caa6:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 800caaa:	f7ff ff1b 	bl	800c8e4 <ptr_to_mem>
 800caae:	4603      	mov	r3, r0
 800cab0:	4a14      	ldr	r2, [pc, #80]	; (800cb04 <mem_init+0x8c>)
 800cab2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800cab4:	4b13      	ldr	r3, [pc, #76]	; (800cb04 <mem_init+0x8c>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2201      	movs	r2, #1
 800caba:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cabc:	4b11      	ldr	r3, [pc, #68]	; (800cb04 <mem_init+0x8c>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800cac4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cac6:	4b0f      	ldr	r3, [pc, #60]	; (800cb04 <mem_init+0x8c>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800cace:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cad0:	4b0b      	ldr	r3, [pc, #44]	; (800cb00 <mem_init+0x88>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a0c      	ldr	r2, [pc, #48]	; (800cb08 <mem_init+0x90>)
 800cad6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800cad8:	480c      	ldr	r0, [pc, #48]	; (800cb0c <mem_init+0x94>)
 800cada:	f00a ffd3 	bl	8017a84 <sys_mutex_new>
 800cade:	4603      	mov	r3, r0
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d006      	beq.n	800caf2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800cae4:	4b0a      	ldr	r3, [pc, #40]	; (800cb10 <mem_init+0x98>)
 800cae6:	f240 221f 	movw	r2, #543	; 0x21f
 800caea:	490a      	ldr	r1, [pc, #40]	; (800cb14 <mem_init+0x9c>)
 800caec:	480a      	ldr	r0, [pc, #40]	; (800cb18 <mem_init+0xa0>)
 800caee:	f00c ff77 	bl	80199e0 <iprintf>
  }
}
 800caf2:	bf00      	nop
 800caf4:	3708      	adds	r7, #8
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	2000a1bc 	.word	0x2000a1bc
 800cb00:	2000e1b8 	.word	0x2000e1b8
 800cb04:	2000e1bc 	.word	0x2000e1bc
 800cb08:	2000e1c4 	.word	0x2000e1c4
 800cb0c:	2000e1c0 	.word	0x2000e1c0
 800cb10:	0801b77c 	.word	0x0801b77c
 800cb14:	0801b850 	.word	0x0801b850
 800cb18:	0801b7c4 	.word	0x0801b7c4

0800cb1c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b086      	sub	sp, #24
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f7ff feef 	bl	800c908 <mem_to_ptr>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	881b      	ldrh	r3, [r3, #0]
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7ff fed6 	bl	800c8e4 <ptr_to_mem>
 800cb38:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	885b      	ldrh	r3, [r3, #2]
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7ff fed0 	bl	800c8e4 <ptr_to_mem>
 800cb44:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	881b      	ldrh	r3, [r3, #0]
 800cb4a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d819      	bhi.n	800cb86 <mem_link_valid+0x6a>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	885b      	ldrh	r3, [r3, #2]
 800cb56:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d813      	bhi.n	800cb86 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cb62:	8afa      	ldrh	r2, [r7, #22]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d004      	beq.n	800cb72 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	881b      	ldrh	r3, [r3, #0]
 800cb6c:	8afa      	ldrh	r2, [r7, #22]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d109      	bne.n	800cb86 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cb72:	4b08      	ldr	r3, [pc, #32]	; (800cb94 <mem_link_valid+0x78>)
 800cb74:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cb76:	693a      	ldr	r2, [r7, #16]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d006      	beq.n	800cb8a <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	885b      	ldrh	r3, [r3, #2]
 800cb80:	8afa      	ldrh	r2, [r7, #22]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d001      	beq.n	800cb8a <mem_link_valid+0x6e>
    return 0;
 800cb86:	2300      	movs	r3, #0
 800cb88:	e000      	b.n	800cb8c <mem_link_valid+0x70>
  }
  return 1;
 800cb8a:	2301      	movs	r3, #1
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3718      	adds	r7, #24
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	2000e1bc 	.word	0x2000e1bc

0800cb98 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b088      	sub	sp, #32
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d070      	beq.n	800cc88 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f003 0303 	and.w	r3, r3, #3
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d00d      	beq.n	800cbcc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800cbb0:	4b37      	ldr	r3, [pc, #220]	; (800cc90 <mem_free+0xf8>)
 800cbb2:	f240 2273 	movw	r2, #627	; 0x273
 800cbb6:	4937      	ldr	r1, [pc, #220]	; (800cc94 <mem_free+0xfc>)
 800cbb8:	4837      	ldr	r0, [pc, #220]	; (800cc98 <mem_free+0x100>)
 800cbba:	f00c ff11 	bl	80199e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cbbe:	f00a ffbf 	bl	8017b40 <sys_arch_protect>
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	68f8      	ldr	r0, [r7, #12]
 800cbc6:	f00a ffc9 	bl	8017b5c <sys_arch_unprotect>
    return;
 800cbca:	e05e      	b.n	800cc8a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	3b08      	subs	r3, #8
 800cbd0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800cbd2:	4b32      	ldr	r3, [pc, #200]	; (800cc9c <mem_free+0x104>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	69fa      	ldr	r2, [r7, #28]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d306      	bcc.n	800cbea <mem_free+0x52>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f103 020c 	add.w	r2, r3, #12
 800cbe2:	4b2f      	ldr	r3, [pc, #188]	; (800cca0 <mem_free+0x108>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d90d      	bls.n	800cc06 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cbea:	4b29      	ldr	r3, [pc, #164]	; (800cc90 <mem_free+0xf8>)
 800cbec:	f240 227f 	movw	r2, #639	; 0x27f
 800cbf0:	492c      	ldr	r1, [pc, #176]	; (800cca4 <mem_free+0x10c>)
 800cbf2:	4829      	ldr	r0, [pc, #164]	; (800cc98 <mem_free+0x100>)
 800cbf4:	f00c fef4 	bl	80199e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cbf8:	f00a ffa2 	bl	8017b40 <sys_arch_protect>
 800cbfc:	6138      	str	r0, [r7, #16]
 800cbfe:	6938      	ldr	r0, [r7, #16]
 800cc00:	f00a ffac 	bl	8017b5c <sys_arch_unprotect>
    return;
 800cc04:	e041      	b.n	800cc8a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cc06:	4828      	ldr	r0, [pc, #160]	; (800cca8 <mem_free+0x110>)
 800cc08:	f00a ff58 	bl	8017abc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	791b      	ldrb	r3, [r3, #4]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d110      	bne.n	800cc36 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cc14:	4b1e      	ldr	r3, [pc, #120]	; (800cc90 <mem_free+0xf8>)
 800cc16:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800cc1a:	4924      	ldr	r1, [pc, #144]	; (800ccac <mem_free+0x114>)
 800cc1c:	481e      	ldr	r0, [pc, #120]	; (800cc98 <mem_free+0x100>)
 800cc1e:	f00c fedf 	bl	80199e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cc22:	4821      	ldr	r0, [pc, #132]	; (800cca8 <mem_free+0x110>)
 800cc24:	f00a ff59 	bl	8017ada <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cc28:	f00a ff8a 	bl	8017b40 <sys_arch_protect>
 800cc2c:	6178      	str	r0, [r7, #20]
 800cc2e:	6978      	ldr	r0, [r7, #20]
 800cc30:	f00a ff94 	bl	8017b5c <sys_arch_unprotect>
    return;
 800cc34:	e029      	b.n	800cc8a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800cc36:	69f8      	ldr	r0, [r7, #28]
 800cc38:	f7ff ff70 	bl	800cb1c <mem_link_valid>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d110      	bne.n	800cc64 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cc42:	4b13      	ldr	r3, [pc, #76]	; (800cc90 <mem_free+0xf8>)
 800cc44:	f240 2295 	movw	r2, #661	; 0x295
 800cc48:	4919      	ldr	r1, [pc, #100]	; (800ccb0 <mem_free+0x118>)
 800cc4a:	4813      	ldr	r0, [pc, #76]	; (800cc98 <mem_free+0x100>)
 800cc4c:	f00c fec8 	bl	80199e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cc50:	4815      	ldr	r0, [pc, #84]	; (800cca8 <mem_free+0x110>)
 800cc52:	f00a ff42 	bl	8017ada <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cc56:	f00a ff73 	bl	8017b40 <sys_arch_protect>
 800cc5a:	61b8      	str	r0, [r7, #24]
 800cc5c:	69b8      	ldr	r0, [r7, #24]
 800cc5e:	f00a ff7d 	bl	8017b5c <sys_arch_unprotect>
    return;
 800cc62:	e012      	b.n	800cc8a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	2200      	movs	r2, #0
 800cc68:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cc6a:	4b12      	ldr	r3, [pc, #72]	; (800ccb4 <mem_free+0x11c>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	69fa      	ldr	r2, [r7, #28]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d202      	bcs.n	800cc7a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cc74:	4a0f      	ldr	r2, [pc, #60]	; (800ccb4 <mem_free+0x11c>)
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cc7a:	69f8      	ldr	r0, [r7, #28]
 800cc7c:	f7ff fe56 	bl	800c92c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cc80:	4809      	ldr	r0, [pc, #36]	; (800cca8 <mem_free+0x110>)
 800cc82:	f00a ff2a 	bl	8017ada <sys_mutex_unlock>
 800cc86:	e000      	b.n	800cc8a <mem_free+0xf2>
    return;
 800cc88:	bf00      	nop
}
 800cc8a:	3720      	adds	r7, #32
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}
 800cc90:	0801b77c 	.word	0x0801b77c
 800cc94:	0801b86c 	.word	0x0801b86c
 800cc98:	0801b7c4 	.word	0x0801b7c4
 800cc9c:	2000e1b8 	.word	0x2000e1b8
 800cca0:	2000e1bc 	.word	0x2000e1bc
 800cca4:	0801b890 	.word	0x0801b890
 800cca8:	2000e1c0 	.word	0x2000e1c0
 800ccac:	0801b8ac 	.word	0x0801b8ac
 800ccb0:	0801b8d4 	.word	0x0801b8d4
 800ccb4:	2000e1c4 	.word	0x2000e1c4

0800ccb8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b088      	sub	sp, #32
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ccc4:	887b      	ldrh	r3, [r7, #2]
 800ccc6:	3303      	adds	r3, #3
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	f023 0303 	bic.w	r3, r3, #3
 800ccce:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ccd0:	8bfb      	ldrh	r3, [r7, #30]
 800ccd2:	2b0b      	cmp	r3, #11
 800ccd4:	d801      	bhi.n	800ccda <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ccd6:	230c      	movs	r3, #12
 800ccd8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ccda:	8bfb      	ldrh	r3, [r7, #30]
 800ccdc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d803      	bhi.n	800ccec <mem_trim+0x34>
 800cce4:	8bfa      	ldrh	r2, [r7, #30]
 800cce6:	887b      	ldrh	r3, [r7, #2]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d201      	bcs.n	800ccf0 <mem_trim+0x38>
    return NULL;
 800ccec:	2300      	movs	r3, #0
 800ccee:	e0dc      	b.n	800ceaa <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ccf0:	4b70      	ldr	r3, [pc, #448]	; (800ceb4 <mem_trim+0x1fc>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d304      	bcc.n	800cd04 <mem_trim+0x4c>
 800ccfa:	4b6f      	ldr	r3, [pc, #444]	; (800ceb8 <mem_trim+0x200>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d306      	bcc.n	800cd12 <mem_trim+0x5a>
 800cd04:	4b6d      	ldr	r3, [pc, #436]	; (800cebc <mem_trim+0x204>)
 800cd06:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cd0a:	496d      	ldr	r1, [pc, #436]	; (800cec0 <mem_trim+0x208>)
 800cd0c:	486d      	ldr	r0, [pc, #436]	; (800cec4 <mem_trim+0x20c>)
 800cd0e:	f00c fe67 	bl	80199e0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cd12:	4b68      	ldr	r3, [pc, #416]	; (800ceb4 <mem_trim+0x1fc>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d304      	bcc.n	800cd26 <mem_trim+0x6e>
 800cd1c:	4b66      	ldr	r3, [pc, #408]	; (800ceb8 <mem_trim+0x200>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d307      	bcc.n	800cd36 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cd26:	f00a ff0b 	bl	8017b40 <sys_arch_protect>
 800cd2a:	60b8      	str	r0, [r7, #8]
 800cd2c:	68b8      	ldr	r0, [r7, #8]
 800cd2e:	f00a ff15 	bl	8017b5c <sys_arch_unprotect>
    return rmem;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	e0b9      	b.n	800ceaa <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	3b08      	subs	r3, #8
 800cd3a:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cd3c:	69b8      	ldr	r0, [r7, #24]
 800cd3e:	f7ff fde3 	bl	800c908 <mem_to_ptr>
 800cd42:	4603      	mov	r3, r0
 800cd44:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cd46:	69bb      	ldr	r3, [r7, #24]
 800cd48:	881a      	ldrh	r2, [r3, #0]
 800cd4a:	8afb      	ldrh	r3, [r7, #22]
 800cd4c:	1ad3      	subs	r3, r2, r3
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	3b08      	subs	r3, #8
 800cd52:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cd54:	8bfa      	ldrh	r2, [r7, #30]
 800cd56:	8abb      	ldrh	r3, [r7, #20]
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d906      	bls.n	800cd6a <mem_trim+0xb2>
 800cd5c:	4b57      	ldr	r3, [pc, #348]	; (800cebc <mem_trim+0x204>)
 800cd5e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cd62:	4959      	ldr	r1, [pc, #356]	; (800cec8 <mem_trim+0x210>)
 800cd64:	4857      	ldr	r0, [pc, #348]	; (800cec4 <mem_trim+0x20c>)
 800cd66:	f00c fe3b 	bl	80199e0 <iprintf>
  if (newsize > size) {
 800cd6a:	8bfa      	ldrh	r2, [r7, #30]
 800cd6c:	8abb      	ldrh	r3, [r7, #20]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d901      	bls.n	800cd76 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800cd72:	2300      	movs	r3, #0
 800cd74:	e099      	b.n	800ceaa <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800cd76:	8bfa      	ldrh	r2, [r7, #30]
 800cd78:	8abb      	ldrh	r3, [r7, #20]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d101      	bne.n	800cd82 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	e093      	b.n	800ceaa <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cd82:	4852      	ldr	r0, [pc, #328]	; (800cecc <mem_trim+0x214>)
 800cd84:	f00a fe9a 	bl	8017abc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800cd88:	69bb      	ldr	r3, [r7, #24]
 800cd8a:	881b      	ldrh	r3, [r3, #0]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7ff fda9 	bl	800c8e4 <ptr_to_mem>
 800cd92:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	791b      	ldrb	r3, [r3, #4]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d141      	bne.n	800ce20 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	881b      	ldrh	r3, [r3, #0]
 800cda0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d106      	bne.n	800cdb6 <mem_trim+0xfe>
 800cda8:	4b44      	ldr	r3, [pc, #272]	; (800cebc <mem_trim+0x204>)
 800cdaa:	f240 22f5 	movw	r2, #757	; 0x2f5
 800cdae:	4948      	ldr	r1, [pc, #288]	; (800ced0 <mem_trim+0x218>)
 800cdb0:	4844      	ldr	r0, [pc, #272]	; (800cec4 <mem_trim+0x20c>)
 800cdb2:	f00c fe15 	bl	80199e0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	881b      	ldrh	r3, [r3, #0]
 800cdba:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cdbc:	8afa      	ldrh	r2, [r7, #22]
 800cdbe:	8bfb      	ldrh	r3, [r7, #30]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	3308      	adds	r3, #8
 800cdc6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cdc8:	4b42      	ldr	r3, [pc, #264]	; (800ced4 <mem_trim+0x21c>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	693a      	ldr	r2, [r7, #16]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d106      	bne.n	800cde0 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800cdd2:	89fb      	ldrh	r3, [r7, #14]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7ff fd85 	bl	800c8e4 <ptr_to_mem>
 800cdda:	4603      	mov	r3, r0
 800cddc:	4a3d      	ldr	r2, [pc, #244]	; (800ced4 <mem_trim+0x21c>)
 800cdde:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cde0:	89fb      	ldrh	r3, [r7, #14]
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7ff fd7e 	bl	800c8e4 <ptr_to_mem>
 800cde8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	2200      	movs	r2, #0
 800cdee:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	89ba      	ldrh	r2, [r7, #12]
 800cdf4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	8afa      	ldrh	r2, [r7, #22]
 800cdfa:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	89fa      	ldrh	r2, [r7, #14]
 800ce00:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	881b      	ldrh	r3, [r3, #0]
 800ce06:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d049      	beq.n	800cea2 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	881b      	ldrh	r3, [r3, #0]
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7ff fd66 	bl	800c8e4 <ptr_to_mem>
 800ce18:	4602      	mov	r2, r0
 800ce1a:	89fb      	ldrh	r3, [r7, #14]
 800ce1c:	8053      	strh	r3, [r2, #2]
 800ce1e:	e040      	b.n	800cea2 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ce20:	8bfb      	ldrh	r3, [r7, #30]
 800ce22:	f103 0214 	add.w	r2, r3, #20
 800ce26:	8abb      	ldrh	r3, [r7, #20]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d83a      	bhi.n	800cea2 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ce2c:	8afa      	ldrh	r2, [r7, #22]
 800ce2e:	8bfb      	ldrh	r3, [r7, #30]
 800ce30:	4413      	add	r3, r2
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	3308      	adds	r3, #8
 800ce36:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ce38:	69bb      	ldr	r3, [r7, #24]
 800ce3a:	881b      	ldrh	r3, [r3, #0]
 800ce3c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d106      	bne.n	800ce52 <mem_trim+0x19a>
 800ce44:	4b1d      	ldr	r3, [pc, #116]	; (800cebc <mem_trim+0x204>)
 800ce46:	f240 3216 	movw	r2, #790	; 0x316
 800ce4a:	4921      	ldr	r1, [pc, #132]	; (800ced0 <mem_trim+0x218>)
 800ce4c:	481d      	ldr	r0, [pc, #116]	; (800cec4 <mem_trim+0x20c>)
 800ce4e:	f00c fdc7 	bl	80199e0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ce52:	89fb      	ldrh	r3, [r7, #14]
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7ff fd45 	bl	800c8e4 <ptr_to_mem>
 800ce5a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ce5c:	4b1d      	ldr	r3, [pc, #116]	; (800ced4 <mem_trim+0x21c>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	693a      	ldr	r2, [r7, #16]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d202      	bcs.n	800ce6c <mem_trim+0x1b4>
      lfree = mem2;
 800ce66:	4a1b      	ldr	r2, [pc, #108]	; (800ced4 <mem_trim+0x21c>)
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	881a      	ldrh	r2, [r3, #0]
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	8afa      	ldrh	r2, [r7, #22]
 800ce7e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	89fa      	ldrh	r2, [r7, #14]
 800ce84:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	881b      	ldrh	r3, [r3, #0]
 800ce8a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d007      	beq.n	800cea2 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	881b      	ldrh	r3, [r3, #0]
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7ff fd24 	bl	800c8e4 <ptr_to_mem>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	89fb      	ldrh	r3, [r7, #14]
 800cea0:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cea2:	480a      	ldr	r0, [pc, #40]	; (800cecc <mem_trim+0x214>)
 800cea4:	f00a fe19 	bl	8017ada <sys_mutex_unlock>
  return rmem;
 800cea8:	687b      	ldr	r3, [r7, #4]
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3720      	adds	r7, #32
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	2000e1b8 	.word	0x2000e1b8
 800ceb8:	2000e1bc 	.word	0x2000e1bc
 800cebc:	0801b77c 	.word	0x0801b77c
 800cec0:	0801b908 	.word	0x0801b908
 800cec4:	0801b7c4 	.word	0x0801b7c4
 800cec8:	0801b920 	.word	0x0801b920
 800cecc:	2000e1c0 	.word	0x2000e1c0
 800ced0:	0801b940 	.word	0x0801b940
 800ced4:	2000e1c4 	.word	0x2000e1c4

0800ced8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b088      	sub	sp, #32
 800cedc:	af00      	add	r7, sp, #0
 800cede:	4603      	mov	r3, r0
 800cee0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cee2:	88fb      	ldrh	r3, [r7, #6]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d101      	bne.n	800ceec <mem_malloc+0x14>
    return NULL;
 800cee8:	2300      	movs	r3, #0
 800ceea:	e0e6      	b.n	800d0ba <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ceec:	88fb      	ldrh	r3, [r7, #6]
 800ceee:	3303      	adds	r3, #3
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	f023 0303 	bic.w	r3, r3, #3
 800cef6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cef8:	8bbb      	ldrh	r3, [r7, #28]
 800cefa:	2b0b      	cmp	r3, #11
 800cefc:	d801      	bhi.n	800cf02 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cefe:	230c      	movs	r3, #12
 800cf00:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800cf02:	8bbb      	ldrh	r3, [r7, #28]
 800cf04:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d803      	bhi.n	800cf14 <mem_malloc+0x3c>
 800cf0c:	8bba      	ldrh	r2, [r7, #28]
 800cf0e:	88fb      	ldrh	r3, [r7, #6]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d201      	bcs.n	800cf18 <mem_malloc+0x40>
    return NULL;
 800cf14:	2300      	movs	r3, #0
 800cf16:	e0d0      	b.n	800d0ba <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800cf18:	486a      	ldr	r0, [pc, #424]	; (800d0c4 <mem_malloc+0x1ec>)
 800cf1a:	f00a fdcf 	bl	8017abc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cf1e:	4b6a      	ldr	r3, [pc, #424]	; (800d0c8 <mem_malloc+0x1f0>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7ff fcf0 	bl	800c908 <mem_to_ptr>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	83fb      	strh	r3, [r7, #30]
 800cf2c:	e0b9      	b.n	800d0a2 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cf2e:	8bfb      	ldrh	r3, [r7, #30]
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7ff fcd7 	bl	800c8e4 <ptr_to_mem>
 800cf36:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	791b      	ldrb	r3, [r3, #4]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	f040 80a9 	bne.w	800d094 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	881b      	ldrh	r3, [r3, #0]
 800cf46:	461a      	mov	r2, r3
 800cf48:	8bfb      	ldrh	r3, [r7, #30]
 800cf4a:	1ad3      	subs	r3, r2, r3
 800cf4c:	f1a3 0208 	sub.w	r2, r3, #8
 800cf50:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cf52:	429a      	cmp	r2, r3
 800cf54:	f0c0 809e 	bcc.w	800d094 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	881b      	ldrh	r3, [r3, #0]
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	8bfb      	ldrh	r3, [r7, #30]
 800cf60:	1ad3      	subs	r3, r2, r3
 800cf62:	f1a3 0208 	sub.w	r2, r3, #8
 800cf66:	8bbb      	ldrh	r3, [r7, #28]
 800cf68:	3314      	adds	r3, #20
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d335      	bcc.n	800cfda <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cf6e:	8bfa      	ldrh	r2, [r7, #30]
 800cf70:	8bbb      	ldrh	r3, [r7, #28]
 800cf72:	4413      	add	r3, r2
 800cf74:	b29b      	uxth	r3, r3
 800cf76:	3308      	adds	r3, #8
 800cf78:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cf7a:	8a7b      	ldrh	r3, [r7, #18]
 800cf7c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d106      	bne.n	800cf92 <mem_malloc+0xba>
 800cf84:	4b51      	ldr	r3, [pc, #324]	; (800d0cc <mem_malloc+0x1f4>)
 800cf86:	f240 3287 	movw	r2, #903	; 0x387
 800cf8a:	4951      	ldr	r1, [pc, #324]	; (800d0d0 <mem_malloc+0x1f8>)
 800cf8c:	4851      	ldr	r0, [pc, #324]	; (800d0d4 <mem_malloc+0x1fc>)
 800cf8e:	f00c fd27 	bl	80199e0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cf92:	8a7b      	ldrh	r3, [r7, #18]
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7ff fca5 	bl	800c8e4 <ptr_to_mem>
 800cf9a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	881a      	ldrh	r2, [r3, #0]
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	8bfa      	ldrh	r2, [r7, #30]
 800cfae:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	8a7a      	ldrh	r2, [r7, #18]
 800cfb4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	881b      	ldrh	r3, [r3, #0]
 800cfc0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d00b      	beq.n	800cfe0 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	881b      	ldrh	r3, [r3, #0]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7ff fc89 	bl	800c8e4 <ptr_to_mem>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	8a7b      	ldrh	r3, [r7, #18]
 800cfd6:	8053      	strh	r3, [r2, #2]
 800cfd8:	e002      	b.n	800cfe0 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cfe0:	4b39      	ldr	r3, [pc, #228]	; (800d0c8 <mem_malloc+0x1f0>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	697a      	ldr	r2, [r7, #20]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d127      	bne.n	800d03a <mem_malloc+0x162>
          struct mem *cur = lfree;
 800cfea:	4b37      	ldr	r3, [pc, #220]	; (800d0c8 <mem_malloc+0x1f0>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cff0:	e005      	b.n	800cffe <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	881b      	ldrh	r3, [r3, #0]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7ff fc74 	bl	800c8e4 <ptr_to_mem>
 800cffc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800cffe:	69bb      	ldr	r3, [r7, #24]
 800d000:	791b      	ldrb	r3, [r3, #4]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d004      	beq.n	800d010 <mem_malloc+0x138>
 800d006:	4b34      	ldr	r3, [pc, #208]	; (800d0d8 <mem_malloc+0x200>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	69ba      	ldr	r2, [r7, #24]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d1f0      	bne.n	800cff2 <mem_malloc+0x11a>
          }
          lfree = cur;
 800d010:	4a2d      	ldr	r2, [pc, #180]	; (800d0c8 <mem_malloc+0x1f0>)
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d016:	4b2c      	ldr	r3, [pc, #176]	; (800d0c8 <mem_malloc+0x1f0>)
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	4b2f      	ldr	r3, [pc, #188]	; (800d0d8 <mem_malloc+0x200>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d00b      	beq.n	800d03a <mem_malloc+0x162>
 800d022:	4b29      	ldr	r3, [pc, #164]	; (800d0c8 <mem_malloc+0x1f0>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	791b      	ldrb	r3, [r3, #4]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d006      	beq.n	800d03a <mem_malloc+0x162>
 800d02c:	4b27      	ldr	r3, [pc, #156]	; (800d0cc <mem_malloc+0x1f4>)
 800d02e:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d032:	492a      	ldr	r1, [pc, #168]	; (800d0dc <mem_malloc+0x204>)
 800d034:	4827      	ldr	r0, [pc, #156]	; (800d0d4 <mem_malloc+0x1fc>)
 800d036:	f00c fcd3 	bl	80199e0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d03a:	4822      	ldr	r0, [pc, #136]	; (800d0c4 <mem_malloc+0x1ec>)
 800d03c:	f00a fd4d 	bl	8017ada <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d040:	8bba      	ldrh	r2, [r7, #28]
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	4413      	add	r3, r2
 800d046:	3308      	adds	r3, #8
 800d048:	4a23      	ldr	r2, [pc, #140]	; (800d0d8 <mem_malloc+0x200>)
 800d04a:	6812      	ldr	r2, [r2, #0]
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d906      	bls.n	800d05e <mem_malloc+0x186>
 800d050:	4b1e      	ldr	r3, [pc, #120]	; (800d0cc <mem_malloc+0x1f4>)
 800d052:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d056:	4922      	ldr	r1, [pc, #136]	; (800d0e0 <mem_malloc+0x208>)
 800d058:	481e      	ldr	r0, [pc, #120]	; (800d0d4 <mem_malloc+0x1fc>)
 800d05a:	f00c fcc1 	bl	80199e0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	f003 0303 	and.w	r3, r3, #3
 800d064:	2b00      	cmp	r3, #0
 800d066:	d006      	beq.n	800d076 <mem_malloc+0x19e>
 800d068:	4b18      	ldr	r3, [pc, #96]	; (800d0cc <mem_malloc+0x1f4>)
 800d06a:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d06e:	491d      	ldr	r1, [pc, #116]	; (800d0e4 <mem_malloc+0x20c>)
 800d070:	4818      	ldr	r0, [pc, #96]	; (800d0d4 <mem_malloc+0x1fc>)
 800d072:	f00c fcb5 	bl	80199e0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	f003 0303 	and.w	r3, r3, #3
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d006      	beq.n	800d08e <mem_malloc+0x1b6>
 800d080:	4b12      	ldr	r3, [pc, #72]	; (800d0cc <mem_malloc+0x1f4>)
 800d082:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d086:	4918      	ldr	r1, [pc, #96]	; (800d0e8 <mem_malloc+0x210>)
 800d088:	4812      	ldr	r0, [pc, #72]	; (800d0d4 <mem_malloc+0x1fc>)
 800d08a:	f00c fca9 	bl	80199e0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	3308      	adds	r3, #8
 800d092:	e012      	b.n	800d0ba <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800d094:	8bfb      	ldrh	r3, [r7, #30]
 800d096:	4618      	mov	r0, r3
 800d098:	f7ff fc24 	bl	800c8e4 <ptr_to_mem>
 800d09c:	4603      	mov	r3, r0
 800d09e:	881b      	ldrh	r3, [r3, #0]
 800d0a0:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d0a2:	8bfa      	ldrh	r2, [r7, #30]
 800d0a4:	8bb9      	ldrh	r1, [r7, #28]
 800d0a6:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800d0aa:	1a5b      	subs	r3, r3, r1
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	f4ff af3e 	bcc.w	800cf2e <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d0b2:	4804      	ldr	r0, [pc, #16]	; (800d0c4 <mem_malloc+0x1ec>)
 800d0b4:	f00a fd11 	bl	8017ada <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d0b8:	2300      	movs	r3, #0
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3720      	adds	r7, #32
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	2000e1c0 	.word	0x2000e1c0
 800d0c8:	2000e1c4 	.word	0x2000e1c4
 800d0cc:	0801b77c 	.word	0x0801b77c
 800d0d0:	0801b940 	.word	0x0801b940
 800d0d4:	0801b7c4 	.word	0x0801b7c4
 800d0d8:	2000e1bc 	.word	0x2000e1bc
 800d0dc:	0801b954 	.word	0x0801b954
 800d0e0:	0801b970 	.word	0x0801b970
 800d0e4:	0801b9a0 	.word	0x0801b9a0
 800d0e8:	0801b9d0 	.word	0x0801b9d0

0800d0ec <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	689b      	ldr	r3, [r3, #8]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	3303      	adds	r3, #3
 800d102:	f023 0303 	bic.w	r3, r3, #3
 800d106:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d108:	2300      	movs	r3, #0
 800d10a:	60fb      	str	r3, [r7, #12]
 800d10c:	e011      	b.n	800d132 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	689b      	ldr	r3, [r3, #8]
 800d11c:	68ba      	ldr	r2, [r7, #8]
 800d11e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	881b      	ldrh	r3, [r3, #0]
 800d124:	461a      	mov	r2, r3
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	4413      	add	r3, r2
 800d12a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	3301      	adds	r3, #1
 800d130:	60fb      	str	r3, [r7, #12]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	885b      	ldrh	r3, [r3, #2]
 800d136:	461a      	mov	r2, r3
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	4293      	cmp	r3, r2
 800d13c:	dbe7      	blt.n	800d10e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d13e:	bf00      	nop
 800d140:	bf00      	nop
 800d142:	3714      	adds	r7, #20
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d152:	2300      	movs	r3, #0
 800d154:	80fb      	strh	r3, [r7, #6]
 800d156:	e009      	b.n	800d16c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d158:	88fb      	ldrh	r3, [r7, #6]
 800d15a:	4a08      	ldr	r2, [pc, #32]	; (800d17c <memp_init+0x30>)
 800d15c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d160:	4618      	mov	r0, r3
 800d162:	f7ff ffc3 	bl	800d0ec <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d166:	88fb      	ldrh	r3, [r7, #6]
 800d168:	3301      	adds	r3, #1
 800d16a:	80fb      	strh	r3, [r7, #6]
 800d16c:	88fb      	ldrh	r3, [r7, #6]
 800d16e:	2b0c      	cmp	r3, #12
 800d170:	d9f2      	bls.n	800d158 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d172:	bf00      	nop
 800d174:	bf00      	nop
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	0801e2c0 	.word	0x0801e2c0

0800d180 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d188:	f00a fcda 	bl	8017b40 <sys_arch_protect>
 800d18c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	689b      	ldr	r3, [r3, #8]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d015      	beq.n	800d1c8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	689b      	ldr	r3, [r3, #8]
 800d1a0:	68ba      	ldr	r2, [r7, #8]
 800d1a2:	6812      	ldr	r2, [r2, #0]
 800d1a4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	f003 0303 	and.w	r3, r3, #3
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d006      	beq.n	800d1be <do_memp_malloc_pool+0x3e>
 800d1b0:	4b09      	ldr	r3, [pc, #36]	; (800d1d8 <do_memp_malloc_pool+0x58>)
 800d1b2:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d1b6:	4909      	ldr	r1, [pc, #36]	; (800d1dc <do_memp_malloc_pool+0x5c>)
 800d1b8:	4809      	ldr	r0, [pc, #36]	; (800d1e0 <do_memp_malloc_pool+0x60>)
 800d1ba:	f00c fc11 	bl	80199e0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d1be:	68f8      	ldr	r0, [r7, #12]
 800d1c0:	f00a fccc 	bl	8017b5c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	e003      	b.n	800d1d0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d1c8:	68f8      	ldr	r0, [r7, #12]
 800d1ca:	f00a fcc7 	bl	8017b5c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d1ce:	2300      	movs	r3, #0
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3710      	adds	r7, #16
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	0801b9f4 	.word	0x0801b9f4
 800d1dc:	0801ba24 	.word	0x0801ba24
 800d1e0:	0801ba48 	.word	0x0801ba48

0800d1e4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d106      	bne.n	800d200 <memp_malloc_pool+0x1c>
 800d1f2:	4b0a      	ldr	r3, [pc, #40]	; (800d21c <memp_malloc_pool+0x38>)
 800d1f4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800d1f8:	4909      	ldr	r1, [pc, #36]	; (800d220 <memp_malloc_pool+0x3c>)
 800d1fa:	480a      	ldr	r0, [pc, #40]	; (800d224 <memp_malloc_pool+0x40>)
 800d1fc:	f00c fbf0 	bl	80199e0 <iprintf>
  if (desc == NULL) {
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d101      	bne.n	800d20a <memp_malloc_pool+0x26>
    return NULL;
 800d206:	2300      	movs	r3, #0
 800d208:	e003      	b.n	800d212 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f7ff ffb8 	bl	800d180 <do_memp_malloc_pool>
 800d210:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d212:	4618      	mov	r0, r3
 800d214:	3708      	adds	r7, #8
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	0801b9f4 	.word	0x0801b9f4
 800d220:	0801ba70 	.word	0x0801ba70
 800d224:	0801ba48 	.word	0x0801ba48

0800d228 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	4603      	mov	r3, r0
 800d230:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d232:	79fb      	ldrb	r3, [r7, #7]
 800d234:	2b0c      	cmp	r3, #12
 800d236:	d908      	bls.n	800d24a <memp_malloc+0x22>
 800d238:	4b0a      	ldr	r3, [pc, #40]	; (800d264 <memp_malloc+0x3c>)
 800d23a:	f240 1257 	movw	r2, #343	; 0x157
 800d23e:	490a      	ldr	r1, [pc, #40]	; (800d268 <memp_malloc+0x40>)
 800d240:	480a      	ldr	r0, [pc, #40]	; (800d26c <memp_malloc+0x44>)
 800d242:	f00c fbcd 	bl	80199e0 <iprintf>
 800d246:	2300      	movs	r3, #0
 800d248:	e008      	b.n	800d25c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d24a:	79fb      	ldrb	r3, [r7, #7]
 800d24c:	4a08      	ldr	r2, [pc, #32]	; (800d270 <memp_malloc+0x48>)
 800d24e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d252:	4618      	mov	r0, r3
 800d254:	f7ff ff94 	bl	800d180 <do_memp_malloc_pool>
 800d258:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d25a:	68fb      	ldr	r3, [r7, #12]
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3710      	adds	r7, #16
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}
 800d264:	0801b9f4 	.word	0x0801b9f4
 800d268:	0801ba84 	.word	0x0801ba84
 800d26c:	0801ba48 	.word	0x0801ba48
 800d270:	0801e2c0 	.word	0x0801e2c0

0800d274 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	f003 0303 	and.w	r3, r3, #3
 800d284:	2b00      	cmp	r3, #0
 800d286:	d006      	beq.n	800d296 <do_memp_free_pool+0x22>
 800d288:	4b0d      	ldr	r3, [pc, #52]	; (800d2c0 <do_memp_free_pool+0x4c>)
 800d28a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d28e:	490d      	ldr	r1, [pc, #52]	; (800d2c4 <do_memp_free_pool+0x50>)
 800d290:	480d      	ldr	r0, [pc, #52]	; (800d2c8 <do_memp_free_pool+0x54>)
 800d292:	f00c fba5 	bl	80199e0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d29a:	f00a fc51 	bl	8017b40 <sys_arch_protect>
 800d29e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	68fa      	ldr	r2, [r7, #12]
 800d2b0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d2b2:	68b8      	ldr	r0, [r7, #8]
 800d2b4:	f00a fc52 	bl	8017b5c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d2b8:	bf00      	nop
 800d2ba:	3710      	adds	r7, #16
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}
 800d2c0:	0801b9f4 	.word	0x0801b9f4
 800d2c4:	0801baa4 	.word	0x0801baa4
 800d2c8:	0801ba48 	.word	0x0801ba48

0800d2cc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d106      	bne.n	800d2ea <memp_free_pool+0x1e>
 800d2dc:	4b0a      	ldr	r3, [pc, #40]	; (800d308 <memp_free_pool+0x3c>)
 800d2de:	f240 1295 	movw	r2, #405	; 0x195
 800d2e2:	490a      	ldr	r1, [pc, #40]	; (800d30c <memp_free_pool+0x40>)
 800d2e4:	480a      	ldr	r0, [pc, #40]	; (800d310 <memp_free_pool+0x44>)
 800d2e6:	f00c fb7b 	bl	80199e0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d007      	beq.n	800d300 <memp_free_pool+0x34>
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d004      	beq.n	800d300 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d2f6:	6839      	ldr	r1, [r7, #0]
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f7ff ffbb 	bl	800d274 <do_memp_free_pool>
 800d2fe:	e000      	b.n	800d302 <memp_free_pool+0x36>
    return;
 800d300:	bf00      	nop
}
 800d302:	3708      	adds	r7, #8
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	0801b9f4 	.word	0x0801b9f4
 800d30c:	0801ba70 	.word	0x0801ba70
 800d310:	0801ba48 	.word	0x0801ba48

0800d314 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	4603      	mov	r3, r0
 800d31c:	6039      	str	r1, [r7, #0]
 800d31e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d320:	79fb      	ldrb	r3, [r7, #7]
 800d322:	2b0c      	cmp	r3, #12
 800d324:	d907      	bls.n	800d336 <memp_free+0x22>
 800d326:	4b0c      	ldr	r3, [pc, #48]	; (800d358 <memp_free+0x44>)
 800d328:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d32c:	490b      	ldr	r1, [pc, #44]	; (800d35c <memp_free+0x48>)
 800d32e:	480c      	ldr	r0, [pc, #48]	; (800d360 <memp_free+0x4c>)
 800d330:	f00c fb56 	bl	80199e0 <iprintf>
 800d334:	e00c      	b.n	800d350 <memp_free+0x3c>

  if (mem == NULL) {
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d008      	beq.n	800d34e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d33c:	79fb      	ldrb	r3, [r7, #7]
 800d33e:	4a09      	ldr	r2, [pc, #36]	; (800d364 <memp_free+0x50>)
 800d340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d344:	6839      	ldr	r1, [r7, #0]
 800d346:	4618      	mov	r0, r3
 800d348:	f7ff ff94 	bl	800d274 <do_memp_free_pool>
 800d34c:	e000      	b.n	800d350 <memp_free+0x3c>
    return;
 800d34e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	0801b9f4 	.word	0x0801b9f4
 800d35c:	0801bac4 	.word	0x0801bac4
 800d360:	0801ba48 	.word	0x0801ba48
 800d364:	0801e2c0 	.word	0x0801e2c0

0800d368 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d368:	b480      	push	{r7}
 800d36a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d36c:	bf00      	nop
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
	...

0800d378 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b086      	sub	sp, #24
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	607a      	str	r2, [r7, #4]
 800d384:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d108      	bne.n	800d39e <netif_add+0x26>
 800d38c:	4b57      	ldr	r3, [pc, #348]	; (800d4ec <netif_add+0x174>)
 800d38e:	f240 1227 	movw	r2, #295	; 0x127
 800d392:	4957      	ldr	r1, [pc, #348]	; (800d4f0 <netif_add+0x178>)
 800d394:	4857      	ldr	r0, [pc, #348]	; (800d4f4 <netif_add+0x17c>)
 800d396:	f00c fb23 	bl	80199e0 <iprintf>
 800d39a:	2300      	movs	r3, #0
 800d39c:	e0a2      	b.n	800d4e4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d108      	bne.n	800d3b6 <netif_add+0x3e>
 800d3a4:	4b51      	ldr	r3, [pc, #324]	; (800d4ec <netif_add+0x174>)
 800d3a6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d3aa:	4953      	ldr	r1, [pc, #332]	; (800d4f8 <netif_add+0x180>)
 800d3ac:	4851      	ldr	r0, [pc, #324]	; (800d4f4 <netif_add+0x17c>)
 800d3ae:	f00c fb17 	bl	80199e0 <iprintf>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	e096      	b.n	800d4e4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d101      	bne.n	800d3c0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d3bc:	4b4f      	ldr	r3, [pc, #316]	; (800d4fc <netif_add+0x184>)
 800d3be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d101      	bne.n	800d3ca <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d3c6:	4b4d      	ldr	r3, [pc, #308]	; (800d4fc <netif_add+0x184>)
 800d3c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d101      	bne.n	800d3d4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d3d0:	4b4a      	ldr	r3, [pc, #296]	; (800d4fc <netif_add+0x184>)
 800d3d2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	4a45      	ldr	r2, [pc, #276]	; (800d500 <netif_add+0x188>)
 800d3ea:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6a3a      	ldr	r2, [r7, #32]
 800d404:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d406:	4b3f      	ldr	r3, [pc, #252]	; (800d504 <netif_add+0x18c>)
 800d408:	781a      	ldrb	r2, [r3, #0]
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d414:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	687a      	ldr	r2, [r7, #4]
 800d41a:	68b9      	ldr	r1, [r7, #8]
 800d41c:	68f8      	ldr	r0, [r7, #12]
 800d41e:	f000 f913 	bl	800d648 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	4798      	blx	r3
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d001      	beq.n	800d432 <netif_add+0xba>
    return NULL;
 800d42e:	2300      	movs	r3, #0
 800d430:	e058      	b.n	800d4e4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d438:	2bff      	cmp	r3, #255	; 0xff
 800d43a:	d103      	bne.n	800d444 <netif_add+0xcc>
        netif->num = 0;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2200      	movs	r2, #0
 800d440:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d444:	2300      	movs	r3, #0
 800d446:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d448:	4b2f      	ldr	r3, [pc, #188]	; (800d508 <netif_add+0x190>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	617b      	str	r3, [r7, #20]
 800d44e:	e02b      	b.n	800d4a8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d450:	697a      	ldr	r2, [r7, #20]
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	429a      	cmp	r2, r3
 800d456:	d106      	bne.n	800d466 <netif_add+0xee>
 800d458:	4b24      	ldr	r3, [pc, #144]	; (800d4ec <netif_add+0x174>)
 800d45a:	f240 128b 	movw	r2, #395	; 0x18b
 800d45e:	492b      	ldr	r1, [pc, #172]	; (800d50c <netif_add+0x194>)
 800d460:	4824      	ldr	r0, [pc, #144]	; (800d4f4 <netif_add+0x17c>)
 800d462:	f00c fabd 	bl	80199e0 <iprintf>
        num_netifs++;
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	3301      	adds	r3, #1
 800d46a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	2bff      	cmp	r3, #255	; 0xff
 800d470:	dd06      	ble.n	800d480 <netif_add+0x108>
 800d472:	4b1e      	ldr	r3, [pc, #120]	; (800d4ec <netif_add+0x174>)
 800d474:	f240 128d 	movw	r2, #397	; 0x18d
 800d478:	4925      	ldr	r1, [pc, #148]	; (800d510 <netif_add+0x198>)
 800d47a:	481e      	ldr	r0, [pc, #120]	; (800d4f4 <netif_add+0x17c>)
 800d47c:	f00c fab0 	bl	80199e0 <iprintf>
        if (netif2->num == netif->num) {
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d108      	bne.n	800d4a2 <netif_add+0x12a>
          netif->num++;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d496:	3301      	adds	r3, #1
 800d498:	b2da      	uxtb	r2, r3
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d4a0:	e005      	b.n	800d4ae <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	617b      	str	r3, [r7, #20]
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d1d0      	bne.n	800d450 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d1be      	bne.n	800d432 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4ba:	2bfe      	cmp	r3, #254	; 0xfe
 800d4bc:	d103      	bne.n	800d4c6 <netif_add+0x14e>
    netif_num = 0;
 800d4be:	4b11      	ldr	r3, [pc, #68]	; (800d504 <netif_add+0x18c>)
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	701a      	strb	r2, [r3, #0]
 800d4c4:	e006      	b.n	800d4d4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	b2da      	uxtb	r2, r3
 800d4d0:	4b0c      	ldr	r3, [pc, #48]	; (800d504 <netif_add+0x18c>)
 800d4d2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d4d4:	4b0c      	ldr	r3, [pc, #48]	; (800d508 <netif_add+0x190>)
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d4dc:	4a0a      	ldr	r2, [pc, #40]	; (800d508 <netif_add+0x190>)
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3718      	adds	r7, #24
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	0801bae0 	.word	0x0801bae0
 800d4f0:	0801bb74 	.word	0x0801bb74
 800d4f4:	0801bb30 	.word	0x0801bb30
 800d4f8:	0801bb90 	.word	0x0801bb90
 800d4fc:	0801e334 	.word	0x0801e334
 800d500:	0800d923 	.word	0x0800d923
 800d504:	2001129c 	.word	0x2001129c
 800d508:	20011294 	.word	0x20011294
 800d50c:	0801bbb4 	.word	0x0801bbb4
 800d510:	0801bbc8 	.word	0x0801bbc8

0800d514 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b082      	sub	sp, #8
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d51e:	6839      	ldr	r1, [r7, #0]
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f002 fe05 	bl	8010130 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d526:	6839      	ldr	r1, [r7, #0]
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f007 fd25 	bl	8014f78 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d52e:	bf00      	nop
 800d530:	3708      	adds	r7, #8
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
	...

0800d538 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b086      	sub	sp, #24
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d106      	bne.n	800d558 <netif_do_set_ipaddr+0x20>
 800d54a:	4b1d      	ldr	r3, [pc, #116]	; (800d5c0 <netif_do_set_ipaddr+0x88>)
 800d54c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d550:	491c      	ldr	r1, [pc, #112]	; (800d5c4 <netif_do_set_ipaddr+0x8c>)
 800d552:	481d      	ldr	r0, [pc, #116]	; (800d5c8 <netif_do_set_ipaddr+0x90>)
 800d554:	f00c fa44 	bl	80199e0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d106      	bne.n	800d56c <netif_do_set_ipaddr+0x34>
 800d55e:	4b18      	ldr	r3, [pc, #96]	; (800d5c0 <netif_do_set_ipaddr+0x88>)
 800d560:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d564:	4917      	ldr	r1, [pc, #92]	; (800d5c4 <netif_do_set_ipaddr+0x8c>)
 800d566:	4818      	ldr	r0, [pc, #96]	; (800d5c8 <netif_do_set_ipaddr+0x90>)
 800d568:	f00c fa3a 	bl	80199e0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	3304      	adds	r3, #4
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	429a      	cmp	r2, r3
 800d578:	d01c      	beq.n	800d5b4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	3304      	adds	r3, #4
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d58a:	f107 0314 	add.w	r3, r7, #20
 800d58e:	4619      	mov	r1, r3
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f7ff ffbf 	bl	800d514 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d002      	beq.n	800d5a2 <netif_do_set_ipaddr+0x6a>
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	e000      	b.n	800d5a4 <netif_do_set_ipaddr+0x6c>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	68fa      	ldr	r2, [r7, #12]
 800d5a6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d5a8:	2101      	movs	r1, #1
 800d5aa:	68f8      	ldr	r0, [r7, #12]
 800d5ac:	f000 f8d2 	bl	800d754 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	e000      	b.n	800d5b6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d5b4:	2300      	movs	r3, #0
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3718      	adds	r7, #24
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	0801bae0 	.word	0x0801bae0
 800d5c4:	0801bbf8 	.word	0x0801bbf8
 800d5c8:	0801bb30 	.word	0x0801bb30

0800d5cc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b085      	sub	sp, #20
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	681a      	ldr	r2, [r3, #0]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	3308      	adds	r3, #8
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d00a      	beq.n	800d5fc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d002      	beq.n	800d5f2 <netif_do_set_netmask+0x26>
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	e000      	b.n	800d5f4 <netif_do_set_netmask+0x28>
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	68fa      	ldr	r2, [r7, #12]
 800d5f6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e000      	b.n	800d5fe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d5fc:	2300      	movs	r3, #0
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3714      	adds	r7, #20
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr

0800d60a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d60a:	b480      	push	{r7}
 800d60c:	b085      	sub	sp, #20
 800d60e:	af00      	add	r7, sp, #0
 800d610:	60f8      	str	r0, [r7, #12]
 800d612:	60b9      	str	r1, [r7, #8]
 800d614:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	330c      	adds	r3, #12
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	429a      	cmp	r2, r3
 800d622:	d00a      	beq.n	800d63a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d002      	beq.n	800d630 <netif_do_set_gw+0x26>
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	e000      	b.n	800d632 <netif_do_set_gw+0x28>
 800d630:	2300      	movs	r3, #0
 800d632:	68fa      	ldr	r2, [r7, #12]
 800d634:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d636:	2301      	movs	r3, #1
 800d638:	e000      	b.n	800d63c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d63a:	2300      	movs	r3, #0
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3714      	adds	r7, #20
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr

0800d648 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b088      	sub	sp, #32
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
 800d654:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d656:	2300      	movs	r3, #0
 800d658:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d65a:	2300      	movs	r3, #0
 800d65c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d101      	bne.n	800d668 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d664:	4b1c      	ldr	r3, [pc, #112]	; (800d6d8 <netif_set_addr+0x90>)
 800d666:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d101      	bne.n	800d672 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d66e:	4b1a      	ldr	r3, [pc, #104]	; (800d6d8 <netif_set_addr+0x90>)
 800d670:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d101      	bne.n	800d67c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d678:	4b17      	ldr	r3, [pc, #92]	; (800d6d8 <netif_set_addr+0x90>)
 800d67a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d003      	beq.n	800d68a <netif_set_addr+0x42>
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d101      	bne.n	800d68e <netif_set_addr+0x46>
 800d68a:	2301      	movs	r3, #1
 800d68c:	e000      	b.n	800d690 <netif_set_addr+0x48>
 800d68e:	2300      	movs	r3, #0
 800d690:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d006      	beq.n	800d6a6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d698:	f107 0310 	add.w	r3, r7, #16
 800d69c:	461a      	mov	r2, r3
 800d69e:	68b9      	ldr	r1, [r7, #8]
 800d6a0:	68f8      	ldr	r0, [r7, #12]
 800d6a2:	f7ff ff49 	bl	800d538 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d6a6:	69fa      	ldr	r2, [r7, #28]
 800d6a8:	6879      	ldr	r1, [r7, #4]
 800d6aa:	68f8      	ldr	r0, [r7, #12]
 800d6ac:	f7ff ff8e 	bl	800d5cc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d6b0:	69ba      	ldr	r2, [r7, #24]
 800d6b2:	6839      	ldr	r1, [r7, #0]
 800d6b4:	68f8      	ldr	r0, [r7, #12]
 800d6b6:	f7ff ffa8 	bl	800d60a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d106      	bne.n	800d6ce <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d6c0:	f107 0310 	add.w	r3, r7, #16
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	68b9      	ldr	r1, [r7, #8]
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f7ff ff35 	bl	800d538 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d6ce:	bf00      	nop
 800d6d0:	3720      	adds	r7, #32
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	0801e334 	.word	0x0801e334

0800d6dc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d6e4:	4a04      	ldr	r2, [pc, #16]	; (800d6f8 <netif_set_default+0x1c>)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d6ea:	bf00      	nop
 800d6ec:	370c      	adds	r7, #12
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop
 800d6f8:	20011298 	.word	0x20011298

0800d6fc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d107      	bne.n	800d71a <netif_set_up+0x1e>
 800d70a:	4b0f      	ldr	r3, [pc, #60]	; (800d748 <netif_set_up+0x4c>)
 800d70c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d710:	490e      	ldr	r1, [pc, #56]	; (800d74c <netif_set_up+0x50>)
 800d712:	480f      	ldr	r0, [pc, #60]	; (800d750 <netif_set_up+0x54>)
 800d714:	f00c f964 	bl	80199e0 <iprintf>
 800d718:	e013      	b.n	800d742 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d720:	f003 0301 	and.w	r3, r3, #1
 800d724:	2b00      	cmp	r3, #0
 800d726:	d10c      	bne.n	800d742 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d72e:	f043 0301 	orr.w	r3, r3, #1
 800d732:	b2da      	uxtb	r2, r3
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d73a:	2103      	movs	r1, #3
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 f809 	bl	800d754 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d742:	3708      	adds	r7, #8
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	0801bae0 	.word	0x0801bae0
 800d74c:	0801bc68 	.word	0x0801bc68
 800d750:	0801bb30 	.word	0x0801bb30

0800d754 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	460b      	mov	r3, r1
 800d75e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d106      	bne.n	800d774 <netif_issue_reports+0x20>
 800d766:	4b18      	ldr	r3, [pc, #96]	; (800d7c8 <netif_issue_reports+0x74>)
 800d768:	f240 326d 	movw	r2, #877	; 0x36d
 800d76c:	4917      	ldr	r1, [pc, #92]	; (800d7cc <netif_issue_reports+0x78>)
 800d76e:	4818      	ldr	r0, [pc, #96]	; (800d7d0 <netif_issue_reports+0x7c>)
 800d770:	f00c f936 	bl	80199e0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d77a:	f003 0304 	and.w	r3, r3, #4
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d01e      	beq.n	800d7c0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d788:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d017      	beq.n	800d7c0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d790:	78fb      	ldrb	r3, [r7, #3]
 800d792:	f003 0301 	and.w	r3, r3, #1
 800d796:	2b00      	cmp	r3, #0
 800d798:	d013      	beq.n	800d7c2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	3304      	adds	r3, #4
 800d79e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d00e      	beq.n	800d7c2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d7aa:	f003 0308 	and.w	r3, r3, #8
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d007      	beq.n	800d7c2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	3304      	adds	r3, #4
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f008 fb47 	bl	8015e4c <etharp_request>
 800d7be:	e000      	b.n	800d7c2 <netif_issue_reports+0x6e>
    return;
 800d7c0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d7c2:	3708      	adds	r7, #8
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	0801bae0 	.word	0x0801bae0
 800d7cc:	0801bc84 	.word	0x0801bc84
 800d7d0:	0801bb30 	.word	0x0801bb30

0800d7d4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d107      	bne.n	800d7f2 <netif_set_down+0x1e>
 800d7e2:	4b12      	ldr	r3, [pc, #72]	; (800d82c <netif_set_down+0x58>)
 800d7e4:	f240 329b 	movw	r2, #923	; 0x39b
 800d7e8:	4911      	ldr	r1, [pc, #68]	; (800d830 <netif_set_down+0x5c>)
 800d7ea:	4812      	ldr	r0, [pc, #72]	; (800d834 <netif_set_down+0x60>)
 800d7ec:	f00c f8f8 	bl	80199e0 <iprintf>
 800d7f0:	e019      	b.n	800d826 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d7f8:	f003 0301 	and.w	r3, r3, #1
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d012      	beq.n	800d826 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d806:	f023 0301 	bic.w	r3, r3, #1
 800d80a:	b2da      	uxtb	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d818:	f003 0308 	and.w	r3, r3, #8
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d002      	beq.n	800d826 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f007 fed1 	bl	80155c8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	0801bae0 	.word	0x0801bae0
 800d830:	0801bca8 	.word	0x0801bca8
 800d834:	0801bb30 	.word	0x0801bb30

0800d838 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d107      	bne.n	800d856 <netif_set_link_up+0x1e>
 800d846:	4b13      	ldr	r3, [pc, #76]	; (800d894 <netif_set_link_up+0x5c>)
 800d848:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d84c:	4912      	ldr	r1, [pc, #72]	; (800d898 <netif_set_link_up+0x60>)
 800d84e:	4813      	ldr	r0, [pc, #76]	; (800d89c <netif_set_link_up+0x64>)
 800d850:	f00c f8c6 	bl	80199e0 <iprintf>
 800d854:	e01b      	b.n	800d88e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d85c:	f003 0304 	and.w	r3, r3, #4
 800d860:	2b00      	cmp	r3, #0
 800d862:	d114      	bne.n	800d88e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d86a:	f043 0304 	orr.w	r3, r3, #4
 800d86e:	b2da      	uxtb	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d876:	2103      	movs	r1, #3
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f7ff ff6b 	bl	800d754 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	69db      	ldr	r3, [r3, #28]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d003      	beq.n	800d88e <netif_set_link_up+0x56>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	69db      	ldr	r3, [r3, #28]
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d88e:	3708      	adds	r7, #8
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}
 800d894:	0801bae0 	.word	0x0801bae0
 800d898:	0801bcc8 	.word	0x0801bcc8
 800d89c:	0801bb30 	.word	0x0801bb30

0800d8a0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d107      	bne.n	800d8be <netif_set_link_down+0x1e>
 800d8ae:	4b11      	ldr	r3, [pc, #68]	; (800d8f4 <netif_set_link_down+0x54>)
 800d8b0:	f240 4206 	movw	r2, #1030	; 0x406
 800d8b4:	4910      	ldr	r1, [pc, #64]	; (800d8f8 <netif_set_link_down+0x58>)
 800d8b6:	4811      	ldr	r0, [pc, #68]	; (800d8fc <netif_set_link_down+0x5c>)
 800d8b8:	f00c f892 	bl	80199e0 <iprintf>
 800d8bc:	e017      	b.n	800d8ee <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8c4:	f003 0304 	and.w	r3, r3, #4
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d010      	beq.n	800d8ee <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8d2:	f023 0304 	bic.w	r3, r3, #4
 800d8d6:	b2da      	uxtb	r2, r3
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	69db      	ldr	r3, [r3, #28]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d003      	beq.n	800d8ee <netif_set_link_down+0x4e>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	69db      	ldr	r3, [r3, #28]
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d8ee:	3708      	adds	r7, #8
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}
 800d8f4:	0801bae0 	.word	0x0801bae0
 800d8f8:	0801bcec 	.word	0x0801bcec
 800d8fc:	0801bb30 	.word	0x0801bb30

0800d900 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d900:	b480      	push	{r7}
 800d902:	b083      	sub	sp, #12
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d002      	beq.n	800d916 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	683a      	ldr	r2, [r7, #0]
 800d914:	61da      	str	r2, [r3, #28]
  }
}
 800d916:	bf00      	nop
 800d918:	370c      	adds	r7, #12
 800d91a:	46bd      	mov	sp, r7
 800d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d920:	4770      	bx	lr

0800d922 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d922:	b480      	push	{r7}
 800d924:	b085      	sub	sp, #20
 800d926:	af00      	add	r7, sp, #0
 800d928:	60f8      	str	r0, [r7, #12]
 800d92a:	60b9      	str	r1, [r7, #8]
 800d92c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d92e:	f06f 030b 	mvn.w	r3, #11
}
 800d932:	4618      	mov	r0, r3
 800d934:	3714      	adds	r7, #20
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr
	...

0800d940 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d940:	b480      	push	{r7}
 800d942:	b085      	sub	sp, #20
 800d944:	af00      	add	r7, sp, #0
 800d946:	4603      	mov	r3, r0
 800d948:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d94a:	79fb      	ldrb	r3, [r7, #7]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d013      	beq.n	800d978 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d950:	4b0d      	ldr	r3, [pc, #52]	; (800d988 <netif_get_by_index+0x48>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	60fb      	str	r3, [r7, #12]
 800d956:	e00c      	b.n	800d972 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d95e:	3301      	adds	r3, #1
 800d960:	b2db      	uxtb	r3, r3
 800d962:	79fa      	ldrb	r2, [r7, #7]
 800d964:	429a      	cmp	r2, r3
 800d966:	d101      	bne.n	800d96c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	e006      	b.n	800d97a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	60fb      	str	r3, [r7, #12]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d1ef      	bne.n	800d958 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d978:	2300      	movs	r3, #0
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3714      	adds	r7, #20
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr
 800d986:	bf00      	nop
 800d988:	20011294 	.word	0x20011294

0800d98c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d992:	f00a f8d5 	bl	8017b40 <sys_arch_protect>
 800d996:	6038      	str	r0, [r7, #0]
 800d998:	4b0d      	ldr	r3, [pc, #52]	; (800d9d0 <pbuf_free_ooseq+0x44>)
 800d99a:	2200      	movs	r2, #0
 800d99c:	701a      	strb	r2, [r3, #0]
 800d99e:	6838      	ldr	r0, [r7, #0]
 800d9a0:	f00a f8dc 	bl	8017b5c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d9a4:	4b0b      	ldr	r3, [pc, #44]	; (800d9d4 <pbuf_free_ooseq+0x48>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	607b      	str	r3, [r7, #4]
 800d9aa:	e00a      	b.n	800d9c2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d003      	beq.n	800d9bc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f002 fbf9 	bl	80101ac <tcp_free_ooseq>
      return;
 800d9ba:	e005      	b.n	800d9c8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	607b      	str	r3, [r7, #4]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d1f1      	bne.n	800d9ac <pbuf_free_ooseq+0x20>
    }
  }
}
 800d9c8:	3708      	adds	r7, #8
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	2001129d 	.word	0x2001129d
 800d9d4:	200112ac 	.word	0x200112ac

0800d9d8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d9e0:	f7ff ffd4 	bl	800d98c <pbuf_free_ooseq>
}
 800d9e4:	bf00      	nop
 800d9e6:	3708      	adds	r7, #8
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}

0800d9ec <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b082      	sub	sp, #8
 800d9f0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d9f2:	f00a f8a5 	bl	8017b40 <sys_arch_protect>
 800d9f6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d9f8:	4b0f      	ldr	r3, [pc, #60]	; (800da38 <pbuf_pool_is_empty+0x4c>)
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d9fe:	4b0e      	ldr	r3, [pc, #56]	; (800da38 <pbuf_pool_is_empty+0x4c>)
 800da00:	2201      	movs	r2, #1
 800da02:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f00a f8a9 	bl	8017b5c <sys_arch_unprotect>

  if (!queued) {
 800da0a:	78fb      	ldrb	r3, [r7, #3]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d10f      	bne.n	800da30 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800da10:	2100      	movs	r1, #0
 800da12:	480a      	ldr	r0, [pc, #40]	; (800da3c <pbuf_pool_is_empty+0x50>)
 800da14:	f7fe fe80 	bl	800c718 <tcpip_try_callback>
 800da18:	4603      	mov	r3, r0
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d008      	beq.n	800da30 <pbuf_pool_is_empty+0x44>
 800da1e:	f00a f88f 	bl	8017b40 <sys_arch_protect>
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	4b04      	ldr	r3, [pc, #16]	; (800da38 <pbuf_pool_is_empty+0x4c>)
 800da26:	2200      	movs	r2, #0
 800da28:	701a      	strb	r2, [r3, #0]
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f00a f896 	bl	8017b5c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800da30:	bf00      	nop
 800da32:	3708      	adds	r7, #8
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	2001129d 	.word	0x2001129d
 800da3c:	0800d9d9 	.word	0x0800d9d9

0800da40 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800da40:	b480      	push	{r7}
 800da42:	b085      	sub	sp, #20
 800da44:	af00      	add	r7, sp, #0
 800da46:	60f8      	str	r0, [r7, #12]
 800da48:	60b9      	str	r1, [r7, #8]
 800da4a:	4611      	mov	r1, r2
 800da4c:	461a      	mov	r2, r3
 800da4e:	460b      	mov	r3, r1
 800da50:	80fb      	strh	r3, [r7, #6]
 800da52:	4613      	mov	r3, r2
 800da54:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2200      	movs	r2, #0
 800da5a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	68ba      	ldr	r2, [r7, #8]
 800da60:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	88fa      	ldrh	r2, [r7, #6]
 800da66:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	88ba      	ldrh	r2, [r7, #4]
 800da6c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800da6e:	8b3b      	ldrh	r3, [r7, #24]
 800da70:	b2da      	uxtb	r2, r3
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	7f3a      	ldrb	r2, [r7, #28]
 800da7a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	2201      	movs	r2, #1
 800da80:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2200      	movs	r2, #0
 800da86:	73da      	strb	r2, [r3, #15]
}
 800da88:	bf00      	nop
 800da8a:	3714      	adds	r7, #20
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr

0800da94 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b08c      	sub	sp, #48	; 0x30
 800da98:	af02      	add	r7, sp, #8
 800da9a:	4603      	mov	r3, r0
 800da9c:	71fb      	strb	r3, [r7, #7]
 800da9e:	460b      	mov	r3, r1
 800daa0:	80bb      	strh	r3, [r7, #4]
 800daa2:	4613      	mov	r3, r2
 800daa4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800daa6:	79fb      	ldrb	r3, [r7, #7]
 800daa8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800daaa:	887b      	ldrh	r3, [r7, #2]
 800daac:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800dab0:	d07f      	beq.n	800dbb2 <pbuf_alloc+0x11e>
 800dab2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800dab6:	f300 80c8 	bgt.w	800dc4a <pbuf_alloc+0x1b6>
 800daba:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800dabe:	d010      	beq.n	800dae2 <pbuf_alloc+0x4e>
 800dac0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800dac4:	f300 80c1 	bgt.w	800dc4a <pbuf_alloc+0x1b6>
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d002      	beq.n	800dad2 <pbuf_alloc+0x3e>
 800dacc:	2b41      	cmp	r3, #65	; 0x41
 800dace:	f040 80bc 	bne.w	800dc4a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800dad2:	887a      	ldrh	r2, [r7, #2]
 800dad4:	88bb      	ldrh	r3, [r7, #4]
 800dad6:	4619      	mov	r1, r3
 800dad8:	2000      	movs	r0, #0
 800dada:	f000 f8d1 	bl	800dc80 <pbuf_alloc_reference>
 800dade:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800dae0:	e0bd      	b.n	800dc5e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800dae2:	2300      	movs	r3, #0
 800dae4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800dae6:	2300      	movs	r3, #0
 800dae8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800daea:	88bb      	ldrh	r3, [r7, #4]
 800daec:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800daee:	200c      	movs	r0, #12
 800daf0:	f7ff fb9a 	bl	800d228 <memp_malloc>
 800daf4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d109      	bne.n	800db10 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800dafc:	f7ff ff76 	bl	800d9ec <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800db00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db02:	2b00      	cmp	r3, #0
 800db04:	d002      	beq.n	800db0c <pbuf_alloc+0x78>
            pbuf_free(p);
 800db06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db08:	f000 faa8 	bl	800e05c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800db0c:	2300      	movs	r3, #0
 800db0e:	e0a7      	b.n	800dc60 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800db10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db12:	3303      	adds	r3, #3
 800db14:	b29b      	uxth	r3, r3
 800db16:	f023 0303 	bic.w	r3, r3, #3
 800db1a:	b29b      	uxth	r3, r3
 800db1c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800db20:	b29b      	uxth	r3, r3
 800db22:	8b7a      	ldrh	r2, [r7, #26]
 800db24:	4293      	cmp	r3, r2
 800db26:	bf28      	it	cs
 800db28:	4613      	movcs	r3, r2
 800db2a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800db2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db2e:	3310      	adds	r3, #16
 800db30:	693a      	ldr	r2, [r7, #16]
 800db32:	4413      	add	r3, r2
 800db34:	3303      	adds	r3, #3
 800db36:	f023 0303 	bic.w	r3, r3, #3
 800db3a:	4618      	mov	r0, r3
 800db3c:	89f9      	ldrh	r1, [r7, #14]
 800db3e:	8b7a      	ldrh	r2, [r7, #26]
 800db40:	2300      	movs	r3, #0
 800db42:	9301      	str	r3, [sp, #4]
 800db44:	887b      	ldrh	r3, [r7, #2]
 800db46:	9300      	str	r3, [sp, #0]
 800db48:	460b      	mov	r3, r1
 800db4a:	4601      	mov	r1, r0
 800db4c:	6938      	ldr	r0, [r7, #16]
 800db4e:	f7ff ff77 	bl	800da40 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	f003 0303 	and.w	r3, r3, #3
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d006      	beq.n	800db6c <pbuf_alloc+0xd8>
 800db5e:	4b42      	ldr	r3, [pc, #264]	; (800dc68 <pbuf_alloc+0x1d4>)
 800db60:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db64:	4941      	ldr	r1, [pc, #260]	; (800dc6c <pbuf_alloc+0x1d8>)
 800db66:	4842      	ldr	r0, [pc, #264]	; (800dc70 <pbuf_alloc+0x1dc>)
 800db68:	f00b ff3a 	bl	80199e0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800db6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db6e:	3303      	adds	r3, #3
 800db70:	f023 0303 	bic.w	r3, r3, #3
 800db74:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800db78:	d106      	bne.n	800db88 <pbuf_alloc+0xf4>
 800db7a:	4b3b      	ldr	r3, [pc, #236]	; (800dc68 <pbuf_alloc+0x1d4>)
 800db7c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800db80:	493c      	ldr	r1, [pc, #240]	; (800dc74 <pbuf_alloc+0x1e0>)
 800db82:	483b      	ldr	r0, [pc, #236]	; (800dc70 <pbuf_alloc+0x1dc>)
 800db84:	f00b ff2c 	bl	80199e0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800db88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d102      	bne.n	800db94 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	627b      	str	r3, [r7, #36]	; 0x24
 800db92:	e002      	b.n	800db9a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800db94:	69fb      	ldr	r3, [r7, #28]
 800db96:	693a      	ldr	r2, [r7, #16]
 800db98:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800db9e:	8b7a      	ldrh	r2, [r7, #26]
 800dba0:	89fb      	ldrh	r3, [r7, #14]
 800dba2:	1ad3      	subs	r3, r2, r3
 800dba4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800dba6:	2300      	movs	r3, #0
 800dba8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800dbaa:	8b7b      	ldrh	r3, [r7, #26]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d19e      	bne.n	800daee <pbuf_alloc+0x5a>
      break;
 800dbb0:	e055      	b.n	800dc5e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800dbb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbb4:	3303      	adds	r3, #3
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	f023 0303 	bic.w	r3, r3, #3
 800dbbc:	b29a      	uxth	r2, r3
 800dbbe:	88bb      	ldrh	r3, [r7, #4]
 800dbc0:	3303      	adds	r3, #3
 800dbc2:	b29b      	uxth	r3, r3
 800dbc4:	f023 0303 	bic.w	r3, r3, #3
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	4413      	add	r3, r2
 800dbcc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800dbce:	8b3b      	ldrh	r3, [r7, #24]
 800dbd0:	3310      	adds	r3, #16
 800dbd2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dbd4:	8b3a      	ldrh	r2, [r7, #24]
 800dbd6:	88bb      	ldrh	r3, [r7, #4]
 800dbd8:	3303      	adds	r3, #3
 800dbda:	f023 0303 	bic.w	r3, r3, #3
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d306      	bcc.n	800dbf0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800dbe2:	8afa      	ldrh	r2, [r7, #22]
 800dbe4:	88bb      	ldrh	r3, [r7, #4]
 800dbe6:	3303      	adds	r3, #3
 800dbe8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d201      	bcs.n	800dbf4 <pbuf_alloc+0x160>
        return NULL;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	e035      	b.n	800dc60 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800dbf4:	8afb      	ldrh	r3, [r7, #22]
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7ff f96e 	bl	800ced8 <mem_malloc>
 800dbfc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800dbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d101      	bne.n	800dc08 <pbuf_alloc+0x174>
        return NULL;
 800dc04:	2300      	movs	r3, #0
 800dc06:	e02b      	b.n	800dc60 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800dc08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc0a:	3310      	adds	r3, #16
 800dc0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc0e:	4413      	add	r3, r2
 800dc10:	3303      	adds	r3, #3
 800dc12:	f023 0303 	bic.w	r3, r3, #3
 800dc16:	4618      	mov	r0, r3
 800dc18:	88b9      	ldrh	r1, [r7, #4]
 800dc1a:	88ba      	ldrh	r2, [r7, #4]
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	9301      	str	r3, [sp, #4]
 800dc20:	887b      	ldrh	r3, [r7, #2]
 800dc22:	9300      	str	r3, [sp, #0]
 800dc24:	460b      	mov	r3, r1
 800dc26:	4601      	mov	r1, r0
 800dc28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc2a:	f7ff ff09 	bl	800da40 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800dc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	f003 0303 	and.w	r3, r3, #3
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d010      	beq.n	800dc5c <pbuf_alloc+0x1c8>
 800dc3a:	4b0b      	ldr	r3, [pc, #44]	; (800dc68 <pbuf_alloc+0x1d4>)
 800dc3c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800dc40:	490d      	ldr	r1, [pc, #52]	; (800dc78 <pbuf_alloc+0x1e4>)
 800dc42:	480b      	ldr	r0, [pc, #44]	; (800dc70 <pbuf_alloc+0x1dc>)
 800dc44:	f00b fecc 	bl	80199e0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800dc48:	e008      	b.n	800dc5c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800dc4a:	4b07      	ldr	r3, [pc, #28]	; (800dc68 <pbuf_alloc+0x1d4>)
 800dc4c:	f240 1227 	movw	r2, #295	; 0x127
 800dc50:	490a      	ldr	r1, [pc, #40]	; (800dc7c <pbuf_alloc+0x1e8>)
 800dc52:	4807      	ldr	r0, [pc, #28]	; (800dc70 <pbuf_alloc+0x1dc>)
 800dc54:	f00b fec4 	bl	80199e0 <iprintf>
      return NULL;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	e001      	b.n	800dc60 <pbuf_alloc+0x1cc>
      break;
 800dc5c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800dc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3728      	adds	r7, #40	; 0x28
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	0801bd10 	.word	0x0801bd10
 800dc6c:	0801bd40 	.word	0x0801bd40
 800dc70:	0801bd70 	.word	0x0801bd70
 800dc74:	0801bd98 	.word	0x0801bd98
 800dc78:	0801bdcc 	.word	0x0801bdcc
 800dc7c:	0801bdf8 	.word	0x0801bdf8

0800dc80 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b086      	sub	sp, #24
 800dc84:	af02      	add	r7, sp, #8
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	460b      	mov	r3, r1
 800dc8a:	807b      	strh	r3, [r7, #2]
 800dc8c:	4613      	mov	r3, r2
 800dc8e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800dc90:	883b      	ldrh	r3, [r7, #0]
 800dc92:	2b41      	cmp	r3, #65	; 0x41
 800dc94:	d009      	beq.n	800dcaa <pbuf_alloc_reference+0x2a>
 800dc96:	883b      	ldrh	r3, [r7, #0]
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d006      	beq.n	800dcaa <pbuf_alloc_reference+0x2a>
 800dc9c:	4b0f      	ldr	r3, [pc, #60]	; (800dcdc <pbuf_alloc_reference+0x5c>)
 800dc9e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800dca2:	490f      	ldr	r1, [pc, #60]	; (800dce0 <pbuf_alloc_reference+0x60>)
 800dca4:	480f      	ldr	r0, [pc, #60]	; (800dce4 <pbuf_alloc_reference+0x64>)
 800dca6:	f00b fe9b 	bl	80199e0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800dcaa:	200b      	movs	r0, #11
 800dcac:	f7ff fabc 	bl	800d228 <memp_malloc>
 800dcb0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d101      	bne.n	800dcbc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	e00b      	b.n	800dcd4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800dcbc:	8879      	ldrh	r1, [r7, #2]
 800dcbe:	887a      	ldrh	r2, [r7, #2]
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	9301      	str	r3, [sp, #4]
 800dcc4:	883b      	ldrh	r3, [r7, #0]
 800dcc6:	9300      	str	r3, [sp, #0]
 800dcc8:	460b      	mov	r3, r1
 800dcca:	6879      	ldr	r1, [r7, #4]
 800dccc:	68f8      	ldr	r0, [r7, #12]
 800dcce:	f7ff feb7 	bl	800da40 <pbuf_init_alloced_pbuf>
  return p;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3710      	adds	r7, #16
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	0801bd10 	.word	0x0801bd10
 800dce0:	0801be14 	.word	0x0801be14
 800dce4:	0801bd70 	.word	0x0801bd70

0800dce8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b088      	sub	sp, #32
 800dcec:	af02      	add	r7, sp, #8
 800dcee:	607b      	str	r3, [r7, #4]
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	73fb      	strb	r3, [r7, #15]
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	81bb      	strh	r3, [r7, #12]
 800dcf8:	4613      	mov	r3, r2
 800dcfa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800dcfc:	7bfb      	ldrb	r3, [r7, #15]
 800dcfe:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800dd00:	8a7b      	ldrh	r3, [r7, #18]
 800dd02:	3303      	adds	r3, #3
 800dd04:	f023 0203 	bic.w	r2, r3, #3
 800dd08:	89bb      	ldrh	r3, [r7, #12]
 800dd0a:	441a      	add	r2, r3
 800dd0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d901      	bls.n	800dd16 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800dd12:	2300      	movs	r3, #0
 800dd14:	e018      	b.n	800dd48 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800dd16:	6a3b      	ldr	r3, [r7, #32]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d007      	beq.n	800dd2c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800dd1c:	8a7b      	ldrh	r3, [r7, #18]
 800dd1e:	3303      	adds	r3, #3
 800dd20:	f023 0303 	bic.w	r3, r3, #3
 800dd24:	6a3a      	ldr	r2, [r7, #32]
 800dd26:	4413      	add	r3, r2
 800dd28:	617b      	str	r3, [r7, #20]
 800dd2a:	e001      	b.n	800dd30 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	89b9      	ldrh	r1, [r7, #12]
 800dd34:	89ba      	ldrh	r2, [r7, #12]
 800dd36:	2302      	movs	r3, #2
 800dd38:	9301      	str	r3, [sp, #4]
 800dd3a:	897b      	ldrh	r3, [r7, #10]
 800dd3c:	9300      	str	r3, [sp, #0]
 800dd3e:	460b      	mov	r3, r1
 800dd40:	6979      	ldr	r1, [r7, #20]
 800dd42:	f7ff fe7d 	bl	800da40 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800dd46:	687b      	ldr	r3, [r7, #4]
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3718      	adds	r7, #24
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	460b      	mov	r3, r1
 800dd5a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d106      	bne.n	800dd70 <pbuf_realloc+0x20>
 800dd62:	4b3a      	ldr	r3, [pc, #232]	; (800de4c <pbuf_realloc+0xfc>)
 800dd64:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800dd68:	4939      	ldr	r1, [pc, #228]	; (800de50 <pbuf_realloc+0x100>)
 800dd6a:	483a      	ldr	r0, [pc, #232]	; (800de54 <pbuf_realloc+0x104>)
 800dd6c:	f00b fe38 	bl	80199e0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	891b      	ldrh	r3, [r3, #8]
 800dd74:	887a      	ldrh	r2, [r7, #2]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d263      	bcs.n	800de42 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	891a      	ldrh	r2, [r3, #8]
 800dd7e:	887b      	ldrh	r3, [r7, #2]
 800dd80:	1ad3      	subs	r3, r2, r3
 800dd82:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800dd84:	887b      	ldrh	r3, [r7, #2]
 800dd86:	817b      	strh	r3, [r7, #10]
  q = p;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800dd8c:	e018      	b.n	800ddc0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	895b      	ldrh	r3, [r3, #10]
 800dd92:	897a      	ldrh	r2, [r7, #10]
 800dd94:	1ad3      	subs	r3, r2, r3
 800dd96:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	891a      	ldrh	r2, [r3, #8]
 800dd9c:	893b      	ldrh	r3, [r7, #8]
 800dd9e:	1ad3      	subs	r3, r2, r3
 800dda0:	b29a      	uxth	r2, r3
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d106      	bne.n	800ddc0 <pbuf_realloc+0x70>
 800ddb2:	4b26      	ldr	r3, [pc, #152]	; (800de4c <pbuf_realloc+0xfc>)
 800ddb4:	f240 12af 	movw	r2, #431	; 0x1af
 800ddb8:	4927      	ldr	r1, [pc, #156]	; (800de58 <pbuf_realloc+0x108>)
 800ddba:	4826      	ldr	r0, [pc, #152]	; (800de54 <pbuf_realloc+0x104>)
 800ddbc:	f00b fe10 	bl	80199e0 <iprintf>
  while (rem_len > q->len) {
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	895b      	ldrh	r3, [r3, #10]
 800ddc4:	897a      	ldrh	r2, [r7, #10]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d8e1      	bhi.n	800dd8e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	7b1b      	ldrb	r3, [r3, #12]
 800ddce:	f003 030f 	and.w	r3, r3, #15
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d121      	bne.n	800de1a <pbuf_realloc+0xca>
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	895b      	ldrh	r3, [r3, #10]
 800ddda:	897a      	ldrh	r2, [r7, #10]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d01c      	beq.n	800de1a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	7b5b      	ldrb	r3, [r3, #13]
 800dde4:	f003 0302 	and.w	r3, r3, #2
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d116      	bne.n	800de1a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	685a      	ldr	r2, [r3, #4]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	1ad3      	subs	r3, r2, r3
 800ddf4:	b29a      	uxth	r2, r3
 800ddf6:	897b      	ldrh	r3, [r7, #10]
 800ddf8:	4413      	add	r3, r2
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	68f8      	ldr	r0, [r7, #12]
 800de00:	f7fe ff5a 	bl	800ccb8 <mem_trim>
 800de04:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d106      	bne.n	800de1a <pbuf_realloc+0xca>
 800de0c:	4b0f      	ldr	r3, [pc, #60]	; (800de4c <pbuf_realloc+0xfc>)
 800de0e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800de12:	4912      	ldr	r1, [pc, #72]	; (800de5c <pbuf_realloc+0x10c>)
 800de14:	480f      	ldr	r0, [pc, #60]	; (800de54 <pbuf_realloc+0x104>)
 800de16:	f00b fde3 	bl	80199e0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	897a      	ldrh	r2, [r7, #10]
 800de1e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	895a      	ldrh	r2, [r3, #10]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d004      	beq.n	800de3a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4618      	mov	r0, r3
 800de36:	f000 f911 	bl	800e05c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2200      	movs	r2, #0
 800de3e:	601a      	str	r2, [r3, #0]
 800de40:	e000      	b.n	800de44 <pbuf_realloc+0xf4>
    return;
 800de42:	bf00      	nop

}
 800de44:	3710      	adds	r7, #16
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}
 800de4a:	bf00      	nop
 800de4c:	0801bd10 	.word	0x0801bd10
 800de50:	0801be28 	.word	0x0801be28
 800de54:	0801bd70 	.word	0x0801bd70
 800de58:	0801be40 	.word	0x0801be40
 800de5c:	0801be58 	.word	0x0801be58

0800de60 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b086      	sub	sp, #24
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	4613      	mov	r3, r2
 800de6c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d106      	bne.n	800de82 <pbuf_add_header_impl+0x22>
 800de74:	4b2b      	ldr	r3, [pc, #172]	; (800df24 <pbuf_add_header_impl+0xc4>)
 800de76:	f240 12df 	movw	r2, #479	; 0x1df
 800de7a:	492b      	ldr	r1, [pc, #172]	; (800df28 <pbuf_add_header_impl+0xc8>)
 800de7c:	482b      	ldr	r0, [pc, #172]	; (800df2c <pbuf_add_header_impl+0xcc>)
 800de7e:	f00b fdaf 	bl	80199e0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d003      	beq.n	800de90 <pbuf_add_header_impl+0x30>
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de8e:	d301      	bcc.n	800de94 <pbuf_add_header_impl+0x34>
    return 1;
 800de90:	2301      	movs	r3, #1
 800de92:	e043      	b.n	800df1c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d101      	bne.n	800de9e <pbuf_add_header_impl+0x3e>
    return 0;
 800de9a:	2300      	movs	r3, #0
 800de9c:	e03e      	b.n	800df1c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	891a      	ldrh	r2, [r3, #8]
 800dea6:	8a7b      	ldrh	r3, [r7, #18]
 800dea8:	4413      	add	r3, r2
 800deaa:	b29b      	uxth	r3, r3
 800deac:	8a7a      	ldrh	r2, [r7, #18]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d901      	bls.n	800deb6 <pbuf_add_header_impl+0x56>
    return 1;
 800deb2:	2301      	movs	r3, #1
 800deb4:	e032      	b.n	800df1c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	7b1b      	ldrb	r3, [r3, #12]
 800deba:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800debc:	8a3b      	ldrh	r3, [r7, #16]
 800debe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d00c      	beq.n	800dee0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	685a      	ldr	r2, [r3, #4]
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	425b      	negs	r3, r3
 800dece:	4413      	add	r3, r2
 800ded0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	3310      	adds	r3, #16
 800ded6:	697a      	ldr	r2, [r7, #20]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d20d      	bcs.n	800def8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dedc:	2301      	movs	r3, #1
 800dede:	e01d      	b.n	800df1c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dee0:	79fb      	ldrb	r3, [r7, #7]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d006      	beq.n	800def4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	685a      	ldr	r2, [r3, #4]
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	425b      	negs	r3, r3
 800deee:	4413      	add	r3, r2
 800def0:	617b      	str	r3, [r7, #20]
 800def2:	e001      	b.n	800def8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800def4:	2301      	movs	r3, #1
 800def6:	e011      	b.n	800df1c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	697a      	ldr	r2, [r7, #20]
 800defc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	895a      	ldrh	r2, [r3, #10]
 800df02:	8a7b      	ldrh	r3, [r7, #18]
 800df04:	4413      	add	r3, r2
 800df06:	b29a      	uxth	r2, r3
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	891a      	ldrh	r2, [r3, #8]
 800df10:	8a7b      	ldrh	r3, [r7, #18]
 800df12:	4413      	add	r3, r2
 800df14:	b29a      	uxth	r2, r3
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	811a      	strh	r2, [r3, #8]


  return 0;
 800df1a:	2300      	movs	r3, #0
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3718      	adds	r7, #24
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}
 800df24:	0801bd10 	.word	0x0801bd10
 800df28:	0801be74 	.word	0x0801be74
 800df2c:	0801bd70 	.word	0x0801bd70

0800df30 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b082      	sub	sp, #8
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800df3a:	2200      	movs	r2, #0
 800df3c:	6839      	ldr	r1, [r7, #0]
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f7ff ff8e 	bl	800de60 <pbuf_add_header_impl>
 800df44:	4603      	mov	r3, r0
}
 800df46:	4618      	mov	r0, r3
 800df48:	3708      	adds	r7, #8
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
	...

0800df50 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d106      	bne.n	800df6e <pbuf_remove_header+0x1e>
 800df60:	4b20      	ldr	r3, [pc, #128]	; (800dfe4 <pbuf_remove_header+0x94>)
 800df62:	f240 224b 	movw	r2, #587	; 0x24b
 800df66:	4920      	ldr	r1, [pc, #128]	; (800dfe8 <pbuf_remove_header+0x98>)
 800df68:	4820      	ldr	r0, [pc, #128]	; (800dfec <pbuf_remove_header+0x9c>)
 800df6a:	f00b fd39 	bl	80199e0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d003      	beq.n	800df7c <pbuf_remove_header+0x2c>
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df7a:	d301      	bcc.n	800df80 <pbuf_remove_header+0x30>
    return 1;
 800df7c:	2301      	movs	r3, #1
 800df7e:	e02c      	b.n	800dfda <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d101      	bne.n	800df8a <pbuf_remove_header+0x3a>
    return 0;
 800df86:	2300      	movs	r3, #0
 800df88:	e027      	b.n	800dfda <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	895b      	ldrh	r3, [r3, #10]
 800df92:	89fa      	ldrh	r2, [r7, #14]
 800df94:	429a      	cmp	r2, r3
 800df96:	d908      	bls.n	800dfaa <pbuf_remove_header+0x5a>
 800df98:	4b12      	ldr	r3, [pc, #72]	; (800dfe4 <pbuf_remove_header+0x94>)
 800df9a:	f240 2255 	movw	r2, #597	; 0x255
 800df9e:	4914      	ldr	r1, [pc, #80]	; (800dff0 <pbuf_remove_header+0xa0>)
 800dfa0:	4812      	ldr	r0, [pc, #72]	; (800dfec <pbuf_remove_header+0x9c>)
 800dfa2:	f00b fd1d 	bl	80199e0 <iprintf>
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	e017      	b.n	800dfda <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	685a      	ldr	r2, [r3, #4]
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	441a      	add	r2, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	895a      	ldrh	r2, [r3, #10]
 800dfc0:	89fb      	ldrh	r3, [r7, #14]
 800dfc2:	1ad3      	subs	r3, r2, r3
 800dfc4:	b29a      	uxth	r2, r3
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	891a      	ldrh	r2, [r3, #8]
 800dfce:	89fb      	ldrh	r3, [r7, #14]
 800dfd0:	1ad3      	subs	r3, r2, r3
 800dfd2:	b29a      	uxth	r2, r3
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3710      	adds	r7, #16
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	0801bd10 	.word	0x0801bd10
 800dfe8:	0801be74 	.word	0x0801be74
 800dfec:	0801bd70 	.word	0x0801bd70
 800dff0:	0801be80 	.word	0x0801be80

0800dff4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	460b      	mov	r3, r1
 800dffe:	807b      	strh	r3, [r7, #2]
 800e000:	4613      	mov	r3, r2
 800e002:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e004:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	da08      	bge.n	800e01e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e00c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e010:	425b      	negs	r3, r3
 800e012:	4619      	mov	r1, r3
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f7ff ff9b 	bl	800df50 <pbuf_remove_header>
 800e01a:	4603      	mov	r3, r0
 800e01c:	e007      	b.n	800e02e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e01e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e022:	787a      	ldrb	r2, [r7, #1]
 800e024:	4619      	mov	r1, r3
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f7ff ff1a 	bl	800de60 <pbuf_add_header_impl>
 800e02c:	4603      	mov	r3, r0
  }
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3708      	adds	r7, #8
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}

0800e036 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e036:	b580      	push	{r7, lr}
 800e038:	b082      	sub	sp, #8
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
 800e03e:	460b      	mov	r3, r1
 800e040:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e042:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e046:	2201      	movs	r2, #1
 800e048:	4619      	mov	r1, r3
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f7ff ffd2 	bl	800dff4 <pbuf_header_impl>
 800e050:	4603      	mov	r3, r0
}
 800e052:	4618      	mov	r0, r3
 800e054:	3708      	adds	r7, #8
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
	...

0800e05c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b088      	sub	sp, #32
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d10b      	bne.n	800e082 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d106      	bne.n	800e07e <pbuf_free+0x22>
 800e070:	4b3b      	ldr	r3, [pc, #236]	; (800e160 <pbuf_free+0x104>)
 800e072:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e076:	493b      	ldr	r1, [pc, #236]	; (800e164 <pbuf_free+0x108>)
 800e078:	483b      	ldr	r0, [pc, #236]	; (800e168 <pbuf_free+0x10c>)
 800e07a:	f00b fcb1 	bl	80199e0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e07e:	2300      	movs	r3, #0
 800e080:	e069      	b.n	800e156 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e082:	2300      	movs	r3, #0
 800e084:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e086:	e062      	b.n	800e14e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e088:	f009 fd5a 	bl	8017b40 <sys_arch_protect>
 800e08c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	7b9b      	ldrb	r3, [r3, #14]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d106      	bne.n	800e0a4 <pbuf_free+0x48>
 800e096:	4b32      	ldr	r3, [pc, #200]	; (800e160 <pbuf_free+0x104>)
 800e098:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e09c:	4933      	ldr	r1, [pc, #204]	; (800e16c <pbuf_free+0x110>)
 800e09e:	4832      	ldr	r0, [pc, #200]	; (800e168 <pbuf_free+0x10c>)
 800e0a0:	f00b fc9e 	bl	80199e0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	7b9b      	ldrb	r3, [r3, #14]
 800e0a8:	3b01      	subs	r3, #1
 800e0aa:	b2da      	uxtb	r2, r3
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	739a      	strb	r2, [r3, #14]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	7b9b      	ldrb	r3, [r3, #14]
 800e0b4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e0b6:	69b8      	ldr	r0, [r7, #24]
 800e0b8:	f009 fd50 	bl	8017b5c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e0bc:	7dfb      	ldrb	r3, [r7, #23]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d143      	bne.n	800e14a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	7b1b      	ldrb	r3, [r3, #12]
 800e0cc:	f003 030f 	and.w	r3, r3, #15
 800e0d0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	7b5b      	ldrb	r3, [r3, #13]
 800e0d6:	f003 0302 	and.w	r3, r3, #2
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d011      	beq.n	800e102 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	691b      	ldr	r3, [r3, #16]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d106      	bne.n	800e0f8 <pbuf_free+0x9c>
 800e0ea:	4b1d      	ldr	r3, [pc, #116]	; (800e160 <pbuf_free+0x104>)
 800e0ec:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e0f0:	491f      	ldr	r1, [pc, #124]	; (800e170 <pbuf_free+0x114>)
 800e0f2:	481d      	ldr	r0, [pc, #116]	; (800e168 <pbuf_free+0x10c>)
 800e0f4:	f00b fc74 	bl	80199e0 <iprintf>
        pc->custom_free_function(p);
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	691b      	ldr	r3, [r3, #16]
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	4798      	blx	r3
 800e100:	e01d      	b.n	800e13e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e102:	7bfb      	ldrb	r3, [r7, #15]
 800e104:	2b02      	cmp	r3, #2
 800e106:	d104      	bne.n	800e112 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e108:	6879      	ldr	r1, [r7, #4]
 800e10a:	200c      	movs	r0, #12
 800e10c:	f7ff f902 	bl	800d314 <memp_free>
 800e110:	e015      	b.n	800e13e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e112:	7bfb      	ldrb	r3, [r7, #15]
 800e114:	2b01      	cmp	r3, #1
 800e116:	d104      	bne.n	800e122 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e118:	6879      	ldr	r1, [r7, #4]
 800e11a:	200b      	movs	r0, #11
 800e11c:	f7ff f8fa 	bl	800d314 <memp_free>
 800e120:	e00d      	b.n	800e13e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e122:	7bfb      	ldrb	r3, [r7, #15]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d103      	bne.n	800e130 <pbuf_free+0xd4>
          mem_free(p);
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f7fe fd35 	bl	800cb98 <mem_free>
 800e12e:	e006      	b.n	800e13e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e130:	4b0b      	ldr	r3, [pc, #44]	; (800e160 <pbuf_free+0x104>)
 800e132:	f240 320f 	movw	r2, #783	; 0x30f
 800e136:	490f      	ldr	r1, [pc, #60]	; (800e174 <pbuf_free+0x118>)
 800e138:	480b      	ldr	r0, [pc, #44]	; (800e168 <pbuf_free+0x10c>)
 800e13a:	f00b fc51 	bl	80199e0 <iprintf>
        }
      }
      count++;
 800e13e:	7ffb      	ldrb	r3, [r7, #31]
 800e140:	3301      	adds	r3, #1
 800e142:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	607b      	str	r3, [r7, #4]
 800e148:	e001      	b.n	800e14e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e14a:	2300      	movs	r3, #0
 800e14c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d199      	bne.n	800e088 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e154:	7ffb      	ldrb	r3, [r7, #31]
}
 800e156:	4618      	mov	r0, r3
 800e158:	3720      	adds	r7, #32
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
 800e15e:	bf00      	nop
 800e160:	0801bd10 	.word	0x0801bd10
 800e164:	0801be74 	.word	0x0801be74
 800e168:	0801bd70 	.word	0x0801bd70
 800e16c:	0801bea0 	.word	0x0801bea0
 800e170:	0801beb8 	.word	0x0801beb8
 800e174:	0801bedc 	.word	0x0801bedc

0800e178 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e178:	b480      	push	{r7}
 800e17a:	b085      	sub	sp, #20
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e180:	2300      	movs	r3, #0
 800e182:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e184:	e005      	b.n	800e192 <pbuf_clen+0x1a>
    ++len;
 800e186:	89fb      	ldrh	r3, [r7, #14]
 800e188:	3301      	adds	r3, #1
 800e18a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d1f6      	bne.n	800e186 <pbuf_clen+0xe>
  }
  return len;
 800e198:	89fb      	ldrh	r3, [r7, #14]
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3714      	adds	r7, #20
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
	...

0800e1a8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d016      	beq.n	800e1e4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e1b6:	f009 fcc3 	bl	8017b40 <sys_arch_protect>
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	7b9b      	ldrb	r3, [r3, #14]
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	b2da      	uxtb	r2, r3
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	739a      	strb	r2, [r3, #14]
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f009 fcc7 	bl	8017b5c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	7b9b      	ldrb	r3, [r3, #14]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d106      	bne.n	800e1e4 <pbuf_ref+0x3c>
 800e1d6:	4b05      	ldr	r3, [pc, #20]	; (800e1ec <pbuf_ref+0x44>)
 800e1d8:	f240 3242 	movw	r2, #834	; 0x342
 800e1dc:	4904      	ldr	r1, [pc, #16]	; (800e1f0 <pbuf_ref+0x48>)
 800e1de:	4805      	ldr	r0, [pc, #20]	; (800e1f4 <pbuf_ref+0x4c>)
 800e1e0:	f00b fbfe 	bl	80199e0 <iprintf>
  }
}
 800e1e4:	bf00      	nop
 800e1e6:	3710      	adds	r7, #16
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	0801bd10 	.word	0x0801bd10
 800e1f0:	0801bef0 	.word	0x0801bef0
 800e1f4:	0801bd70 	.word	0x0801bd70

0800e1f8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b084      	sub	sp, #16
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
 800e200:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d002      	beq.n	800e20e <pbuf_cat+0x16>
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d107      	bne.n	800e21e <pbuf_cat+0x26>
 800e20e:	4b20      	ldr	r3, [pc, #128]	; (800e290 <pbuf_cat+0x98>)
 800e210:	f240 3259 	movw	r2, #857	; 0x359
 800e214:	491f      	ldr	r1, [pc, #124]	; (800e294 <pbuf_cat+0x9c>)
 800e216:	4820      	ldr	r0, [pc, #128]	; (800e298 <pbuf_cat+0xa0>)
 800e218:	f00b fbe2 	bl	80199e0 <iprintf>
 800e21c:	e034      	b.n	800e288 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	60fb      	str	r3, [r7, #12]
 800e222:	e00a      	b.n	800e23a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	891a      	ldrh	r2, [r3, #8]
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	891b      	ldrh	r3, [r3, #8]
 800e22c:	4413      	add	r3, r2
 800e22e:	b29a      	uxth	r2, r3
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	60fb      	str	r3, [r7, #12]
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d1f0      	bne.n	800e224 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	891a      	ldrh	r2, [r3, #8]
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	895b      	ldrh	r3, [r3, #10]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d006      	beq.n	800e25c <pbuf_cat+0x64>
 800e24e:	4b10      	ldr	r3, [pc, #64]	; (800e290 <pbuf_cat+0x98>)
 800e250:	f240 3262 	movw	r2, #866	; 0x362
 800e254:	4911      	ldr	r1, [pc, #68]	; (800e29c <pbuf_cat+0xa4>)
 800e256:	4810      	ldr	r0, [pc, #64]	; (800e298 <pbuf_cat+0xa0>)
 800e258:	f00b fbc2 	bl	80199e0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d006      	beq.n	800e272 <pbuf_cat+0x7a>
 800e264:	4b0a      	ldr	r3, [pc, #40]	; (800e290 <pbuf_cat+0x98>)
 800e266:	f240 3263 	movw	r2, #867	; 0x363
 800e26a:	490d      	ldr	r1, [pc, #52]	; (800e2a0 <pbuf_cat+0xa8>)
 800e26c:	480a      	ldr	r0, [pc, #40]	; (800e298 <pbuf_cat+0xa0>)
 800e26e:	f00b fbb7 	bl	80199e0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	891a      	ldrh	r2, [r3, #8]
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	891b      	ldrh	r3, [r3, #8]
 800e27a:	4413      	add	r3, r2
 800e27c:	b29a      	uxth	r2, r3
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	683a      	ldr	r2, [r7, #0]
 800e286:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e288:	3710      	adds	r7, #16
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	0801bd10 	.word	0x0801bd10
 800e294:	0801bf04 	.word	0x0801bf04
 800e298:	0801bd70 	.word	0x0801bd70
 800e29c:	0801bf3c 	.word	0x0801bf3c
 800e2a0:	0801bf6c 	.word	0x0801bf6c

0800e2a4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b086      	sub	sp, #24
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	617b      	str	r3, [r7, #20]
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d008      	beq.n	800e2ce <pbuf_copy+0x2a>
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d005      	beq.n	800e2ce <pbuf_copy+0x2a>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	891a      	ldrh	r2, [r3, #8]
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	891b      	ldrh	r3, [r3, #8]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d209      	bcs.n	800e2e2 <pbuf_copy+0x3e>
 800e2ce:	4b57      	ldr	r3, [pc, #348]	; (800e42c <pbuf_copy+0x188>)
 800e2d0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e2d4:	4956      	ldr	r1, [pc, #344]	; (800e430 <pbuf_copy+0x18c>)
 800e2d6:	4857      	ldr	r0, [pc, #348]	; (800e434 <pbuf_copy+0x190>)
 800e2d8:	f00b fb82 	bl	80199e0 <iprintf>
 800e2dc:	f06f 030f 	mvn.w	r3, #15
 800e2e0:	e09f      	b.n	800e422 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	895b      	ldrh	r3, [r3, #10]
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	1ad2      	subs	r2, r2, r3
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	895b      	ldrh	r3, [r3, #10]
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	693b      	ldr	r3, [r7, #16]
 800e2f4:	1acb      	subs	r3, r1, r3
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d306      	bcc.n	800e308 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	895b      	ldrh	r3, [r3, #10]
 800e2fe:	461a      	mov	r2, r3
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	1ad3      	subs	r3, r2, r3
 800e304:	60fb      	str	r3, [r7, #12]
 800e306:	e005      	b.n	800e314 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	895b      	ldrh	r3, [r3, #10]
 800e30c:	461a      	mov	r2, r3
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	1ad3      	subs	r3, r2, r3
 800e312:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	685a      	ldr	r2, [r3, #4]
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	18d0      	adds	r0, r2, r3
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	685a      	ldr	r2, [r3, #4]
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	4413      	add	r3, r2
 800e324:	68fa      	ldr	r2, [r7, #12]
 800e326:	4619      	mov	r1, r3
 800e328:	f00b fb44 	bl	80199b4 <memcpy>
    offset_to += len;
 800e32c:	697a      	ldr	r2, [r7, #20]
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	4413      	add	r3, r2
 800e332:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e334:	693a      	ldr	r2, [r7, #16]
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	4413      	add	r3, r2
 800e33a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	895b      	ldrh	r3, [r3, #10]
 800e340:	461a      	mov	r2, r3
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	4293      	cmp	r3, r2
 800e346:	d906      	bls.n	800e356 <pbuf_copy+0xb2>
 800e348:	4b38      	ldr	r3, [pc, #224]	; (800e42c <pbuf_copy+0x188>)
 800e34a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e34e:	493a      	ldr	r1, [pc, #232]	; (800e438 <pbuf_copy+0x194>)
 800e350:	4838      	ldr	r0, [pc, #224]	; (800e434 <pbuf_copy+0x190>)
 800e352:	f00b fb45 	bl	80199e0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	895b      	ldrh	r3, [r3, #10]
 800e35a:	461a      	mov	r2, r3
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	4293      	cmp	r3, r2
 800e360:	d906      	bls.n	800e370 <pbuf_copy+0xcc>
 800e362:	4b32      	ldr	r3, [pc, #200]	; (800e42c <pbuf_copy+0x188>)
 800e364:	f240 32da 	movw	r2, #986	; 0x3da
 800e368:	4934      	ldr	r1, [pc, #208]	; (800e43c <pbuf_copy+0x198>)
 800e36a:	4832      	ldr	r0, [pc, #200]	; (800e434 <pbuf_copy+0x190>)
 800e36c:	f00b fb38 	bl	80199e0 <iprintf>
    if (offset_from >= p_from->len) {
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	895b      	ldrh	r3, [r3, #10]
 800e374:	461a      	mov	r2, r3
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	4293      	cmp	r3, r2
 800e37a:	d304      	bcc.n	800e386 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e37c:	2300      	movs	r3, #0
 800e37e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	895b      	ldrh	r3, [r3, #10]
 800e38a:	461a      	mov	r2, r3
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	4293      	cmp	r3, r2
 800e390:	d114      	bne.n	800e3bc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e392:	2300      	movs	r3, #0
 800e394:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d10c      	bne.n	800e3bc <pbuf_copy+0x118>
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d009      	beq.n	800e3bc <pbuf_copy+0x118>
 800e3a8:	4b20      	ldr	r3, [pc, #128]	; (800e42c <pbuf_copy+0x188>)
 800e3aa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e3ae:	4924      	ldr	r1, [pc, #144]	; (800e440 <pbuf_copy+0x19c>)
 800e3b0:	4820      	ldr	r0, [pc, #128]	; (800e434 <pbuf_copy+0x190>)
 800e3b2:	f00b fb15 	bl	80199e0 <iprintf>
 800e3b6:	f06f 030f 	mvn.w	r3, #15
 800e3ba:	e032      	b.n	800e422 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d013      	beq.n	800e3ea <pbuf_copy+0x146>
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	895a      	ldrh	r2, [r3, #10]
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	891b      	ldrh	r3, [r3, #8]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d10d      	bne.n	800e3ea <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d009      	beq.n	800e3ea <pbuf_copy+0x146>
 800e3d6:	4b15      	ldr	r3, [pc, #84]	; (800e42c <pbuf_copy+0x188>)
 800e3d8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e3dc:	4919      	ldr	r1, [pc, #100]	; (800e444 <pbuf_copy+0x1a0>)
 800e3de:	4815      	ldr	r0, [pc, #84]	; (800e434 <pbuf_copy+0x190>)
 800e3e0:	f00b fafe 	bl	80199e0 <iprintf>
 800e3e4:	f06f 0305 	mvn.w	r3, #5
 800e3e8:	e01b      	b.n	800e422 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d013      	beq.n	800e418 <pbuf_copy+0x174>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	895a      	ldrh	r2, [r3, #10]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	891b      	ldrh	r3, [r3, #8]
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d10d      	bne.n	800e418 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d009      	beq.n	800e418 <pbuf_copy+0x174>
 800e404:	4b09      	ldr	r3, [pc, #36]	; (800e42c <pbuf_copy+0x188>)
 800e406:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e40a:	490e      	ldr	r1, [pc, #56]	; (800e444 <pbuf_copy+0x1a0>)
 800e40c:	4809      	ldr	r0, [pc, #36]	; (800e434 <pbuf_copy+0x190>)
 800e40e:	f00b fae7 	bl	80199e0 <iprintf>
 800e412:	f06f 0305 	mvn.w	r3, #5
 800e416:	e004      	b.n	800e422 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	f47f af61 	bne.w	800e2e2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e420:	2300      	movs	r3, #0
}
 800e422:	4618      	mov	r0, r3
 800e424:	3718      	adds	r7, #24
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	0801bd10 	.word	0x0801bd10
 800e430:	0801bfb8 	.word	0x0801bfb8
 800e434:	0801bd70 	.word	0x0801bd70
 800e438:	0801bfe8 	.word	0x0801bfe8
 800e43c:	0801c000 	.word	0x0801c000
 800e440:	0801c01c 	.word	0x0801c01c
 800e444:	0801c02c 	.word	0x0801c02c

0800e448 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b088      	sub	sp, #32
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	4611      	mov	r1, r2
 800e454:	461a      	mov	r2, r3
 800e456:	460b      	mov	r3, r1
 800e458:	80fb      	strh	r3, [r7, #6]
 800e45a:	4613      	mov	r3, r2
 800e45c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e45e:	2300      	movs	r3, #0
 800e460:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e462:	2300      	movs	r3, #0
 800e464:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d108      	bne.n	800e47e <pbuf_copy_partial+0x36>
 800e46c:	4b2b      	ldr	r3, [pc, #172]	; (800e51c <pbuf_copy_partial+0xd4>)
 800e46e:	f240 420a 	movw	r2, #1034	; 0x40a
 800e472:	492b      	ldr	r1, [pc, #172]	; (800e520 <pbuf_copy_partial+0xd8>)
 800e474:	482b      	ldr	r0, [pc, #172]	; (800e524 <pbuf_copy_partial+0xdc>)
 800e476:	f00b fab3 	bl	80199e0 <iprintf>
 800e47a:	2300      	movs	r3, #0
 800e47c:	e04a      	b.n	800e514 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d108      	bne.n	800e496 <pbuf_copy_partial+0x4e>
 800e484:	4b25      	ldr	r3, [pc, #148]	; (800e51c <pbuf_copy_partial+0xd4>)
 800e486:	f240 420b 	movw	r2, #1035	; 0x40b
 800e48a:	4927      	ldr	r1, [pc, #156]	; (800e528 <pbuf_copy_partial+0xe0>)
 800e48c:	4825      	ldr	r0, [pc, #148]	; (800e524 <pbuf_copy_partial+0xdc>)
 800e48e:	f00b faa7 	bl	80199e0 <iprintf>
 800e492:	2300      	movs	r3, #0
 800e494:	e03e      	b.n	800e514 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	61fb      	str	r3, [r7, #28]
 800e49a:	e034      	b.n	800e506 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e49c:	88bb      	ldrh	r3, [r7, #4]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00a      	beq.n	800e4b8 <pbuf_copy_partial+0x70>
 800e4a2:	69fb      	ldr	r3, [r7, #28]
 800e4a4:	895b      	ldrh	r3, [r3, #10]
 800e4a6:	88ba      	ldrh	r2, [r7, #4]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d305      	bcc.n	800e4b8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	895b      	ldrh	r3, [r3, #10]
 800e4b0:	88ba      	ldrh	r2, [r7, #4]
 800e4b2:	1ad3      	subs	r3, r2, r3
 800e4b4:	80bb      	strh	r3, [r7, #4]
 800e4b6:	e023      	b.n	800e500 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	895a      	ldrh	r2, [r3, #10]
 800e4bc:	88bb      	ldrh	r3, [r7, #4]
 800e4be:	1ad3      	subs	r3, r2, r3
 800e4c0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e4c2:	8b3a      	ldrh	r2, [r7, #24]
 800e4c4:	88fb      	ldrh	r3, [r7, #6]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d901      	bls.n	800e4ce <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e4ca:	88fb      	ldrh	r3, [r7, #6]
 800e4cc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e4ce:	8b7b      	ldrh	r3, [r7, #26]
 800e4d0:	68ba      	ldr	r2, [r7, #8]
 800e4d2:	18d0      	adds	r0, r2, r3
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	685a      	ldr	r2, [r3, #4]
 800e4d8:	88bb      	ldrh	r3, [r7, #4]
 800e4da:	4413      	add	r3, r2
 800e4dc:	8b3a      	ldrh	r2, [r7, #24]
 800e4de:	4619      	mov	r1, r3
 800e4e0:	f00b fa68 	bl	80199b4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e4e4:	8afa      	ldrh	r2, [r7, #22]
 800e4e6:	8b3b      	ldrh	r3, [r7, #24]
 800e4e8:	4413      	add	r3, r2
 800e4ea:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e4ec:	8b7a      	ldrh	r2, [r7, #26]
 800e4ee:	8b3b      	ldrh	r3, [r7, #24]
 800e4f0:	4413      	add	r3, r2
 800e4f2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e4f4:	88fa      	ldrh	r2, [r7, #6]
 800e4f6:	8b3b      	ldrh	r3, [r7, #24]
 800e4f8:	1ad3      	subs	r3, r2, r3
 800e4fa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e500:	69fb      	ldr	r3, [r7, #28]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	61fb      	str	r3, [r7, #28]
 800e506:	88fb      	ldrh	r3, [r7, #6]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d002      	beq.n	800e512 <pbuf_copy_partial+0xca>
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1c4      	bne.n	800e49c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e512:	8afb      	ldrh	r3, [r7, #22]
}
 800e514:	4618      	mov	r0, r3
 800e516:	3720      	adds	r7, #32
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	0801bd10 	.word	0x0801bd10
 800e520:	0801c058 	.word	0x0801c058
 800e524:	0801bd70 	.word	0x0801bd70
 800e528:	0801c078 	.word	0x0801c078

0800e52c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	4603      	mov	r3, r0
 800e534:	603a      	str	r2, [r7, #0]
 800e536:	71fb      	strb	r3, [r7, #7]
 800e538:	460b      	mov	r3, r1
 800e53a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	8919      	ldrh	r1, [r3, #8]
 800e540:	88ba      	ldrh	r2, [r7, #4]
 800e542:	79fb      	ldrb	r3, [r7, #7]
 800e544:	4618      	mov	r0, r3
 800e546:	f7ff faa5 	bl	800da94 <pbuf_alloc>
 800e54a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d101      	bne.n	800e556 <pbuf_clone+0x2a>
    return NULL;
 800e552:	2300      	movs	r3, #0
 800e554:	e011      	b.n	800e57a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e556:	6839      	ldr	r1, [r7, #0]
 800e558:	68f8      	ldr	r0, [r7, #12]
 800e55a:	f7ff fea3 	bl	800e2a4 <pbuf_copy>
 800e55e:	4603      	mov	r3, r0
 800e560:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e562:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d006      	beq.n	800e578 <pbuf_clone+0x4c>
 800e56a:	4b06      	ldr	r3, [pc, #24]	; (800e584 <pbuf_clone+0x58>)
 800e56c:	f240 5224 	movw	r2, #1316	; 0x524
 800e570:	4905      	ldr	r1, [pc, #20]	; (800e588 <pbuf_clone+0x5c>)
 800e572:	4806      	ldr	r0, [pc, #24]	; (800e58c <pbuf_clone+0x60>)
 800e574:	f00b fa34 	bl	80199e0 <iprintf>
  return q;
 800e578:	68fb      	ldr	r3, [r7, #12]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3710      	adds	r7, #16
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	0801bd10 	.word	0x0801bd10
 800e588:	0801c184 	.word	0x0801c184
 800e58c:	0801bd70 	.word	0x0801bd70

0800e590 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e594:	f00b fab2 	bl	8019afc <rand>
 800e598:	4603      	mov	r3, r0
 800e59a:	b29b      	uxth	r3, r3
 800e59c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e5a0:	b29b      	uxth	r3, r3
 800e5a2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e5a6:	b29a      	uxth	r2, r3
 800e5a8:	4b01      	ldr	r3, [pc, #4]	; (800e5b0 <tcp_init+0x20>)
 800e5aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e5ac:	bf00      	nop
 800e5ae:	bd80      	pop	{r7, pc}
 800e5b0:	20000028 	.word	0x20000028

0800e5b4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	7d1b      	ldrb	r3, [r3, #20]
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d105      	bne.n	800e5d0 <tcp_free+0x1c>
 800e5c4:	4b06      	ldr	r3, [pc, #24]	; (800e5e0 <tcp_free+0x2c>)
 800e5c6:	22d4      	movs	r2, #212	; 0xd4
 800e5c8:	4906      	ldr	r1, [pc, #24]	; (800e5e4 <tcp_free+0x30>)
 800e5ca:	4807      	ldr	r0, [pc, #28]	; (800e5e8 <tcp_free+0x34>)
 800e5cc:	f00b fa08 	bl	80199e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e5d0:	6879      	ldr	r1, [r7, #4]
 800e5d2:	2001      	movs	r0, #1
 800e5d4:	f7fe fe9e 	bl	800d314 <memp_free>
}
 800e5d8:	bf00      	nop
 800e5da:	3708      	adds	r7, #8
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}
 800e5e0:	0801c210 	.word	0x0801c210
 800e5e4:	0801c240 	.word	0x0801c240
 800e5e8:	0801c254 	.word	0x0801c254

0800e5ec <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	7d1b      	ldrb	r3, [r3, #20]
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d105      	bne.n	800e608 <tcp_free_listen+0x1c>
 800e5fc:	4b06      	ldr	r3, [pc, #24]	; (800e618 <tcp_free_listen+0x2c>)
 800e5fe:	22df      	movs	r2, #223	; 0xdf
 800e600:	4906      	ldr	r1, [pc, #24]	; (800e61c <tcp_free_listen+0x30>)
 800e602:	4807      	ldr	r0, [pc, #28]	; (800e620 <tcp_free_listen+0x34>)
 800e604:	f00b f9ec 	bl	80199e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e608:	6879      	ldr	r1, [r7, #4]
 800e60a:	2002      	movs	r0, #2
 800e60c:	f7fe fe82 	bl	800d314 <memp_free>
}
 800e610:	bf00      	nop
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	0801c210 	.word	0x0801c210
 800e61c:	0801c27c 	.word	0x0801c27c
 800e620:	0801c254 	.word	0x0801c254

0800e624 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e628:	f001 f85c 	bl	800f6e4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e62c:	4b07      	ldr	r3, [pc, #28]	; (800e64c <tcp_tmr+0x28>)
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	3301      	adds	r3, #1
 800e632:	b2da      	uxtb	r2, r3
 800e634:	4b05      	ldr	r3, [pc, #20]	; (800e64c <tcp_tmr+0x28>)
 800e636:	701a      	strb	r2, [r3, #0]
 800e638:	4b04      	ldr	r3, [pc, #16]	; (800e64c <tcp_tmr+0x28>)
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	f003 0301 	and.w	r3, r3, #1
 800e640:	2b00      	cmp	r3, #0
 800e642:	d001      	beq.n	800e648 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e644:	f000 fd0e 	bl	800f064 <tcp_slowtmr>
  }
}
 800e648:	bf00      	nop
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	200112b5 	.word	0x200112b5

0800e650 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d105      	bne.n	800e66c <tcp_remove_listener+0x1c>
 800e660:	4b0d      	ldr	r3, [pc, #52]	; (800e698 <tcp_remove_listener+0x48>)
 800e662:	22ff      	movs	r2, #255	; 0xff
 800e664:	490d      	ldr	r1, [pc, #52]	; (800e69c <tcp_remove_listener+0x4c>)
 800e666:	480e      	ldr	r0, [pc, #56]	; (800e6a0 <tcp_remove_listener+0x50>)
 800e668:	f00b f9ba 	bl	80199e0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	60fb      	str	r3, [r7, #12]
 800e670:	e00a      	b.n	800e688 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e676:	683a      	ldr	r2, [r7, #0]
 800e678:	429a      	cmp	r2, r3
 800e67a:	d102      	bne.n	800e682 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2200      	movs	r2, #0
 800e680:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	68db      	ldr	r3, [r3, #12]
 800e686:	60fb      	str	r3, [r7, #12]
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d1f1      	bne.n	800e672 <tcp_remove_listener+0x22>
    }
  }
}
 800e68e:	bf00      	nop
 800e690:	bf00      	nop
 800e692:	3710      	adds	r7, #16
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	0801c210 	.word	0x0801c210
 800e69c:	0801c298 	.word	0x0801c298
 800e6a0:	0801c254 	.word	0x0801c254

0800e6a4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d106      	bne.n	800e6c0 <tcp_listen_closed+0x1c>
 800e6b2:	4b14      	ldr	r3, [pc, #80]	; (800e704 <tcp_listen_closed+0x60>)
 800e6b4:	f240 1211 	movw	r2, #273	; 0x111
 800e6b8:	4913      	ldr	r1, [pc, #76]	; (800e708 <tcp_listen_closed+0x64>)
 800e6ba:	4814      	ldr	r0, [pc, #80]	; (800e70c <tcp_listen_closed+0x68>)
 800e6bc:	f00b f990 	bl	80199e0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	7d1b      	ldrb	r3, [r3, #20]
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	d006      	beq.n	800e6d6 <tcp_listen_closed+0x32>
 800e6c8:	4b0e      	ldr	r3, [pc, #56]	; (800e704 <tcp_listen_closed+0x60>)
 800e6ca:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e6ce:	4910      	ldr	r1, [pc, #64]	; (800e710 <tcp_listen_closed+0x6c>)
 800e6d0:	480e      	ldr	r0, [pc, #56]	; (800e70c <tcp_listen_closed+0x68>)
 800e6d2:	f00b f985 	bl	80199e0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	60fb      	str	r3, [r7, #12]
 800e6da:	e00b      	b.n	800e6f4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e6dc:	4a0d      	ldr	r2, [pc, #52]	; (800e714 <tcp_listen_closed+0x70>)
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	6879      	ldr	r1, [r7, #4]
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7ff ffb1 	bl	800e650 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	60fb      	str	r3, [r7, #12]
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2b03      	cmp	r3, #3
 800e6f8:	d9f0      	bls.n	800e6dc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e6fa:	bf00      	nop
 800e6fc:	bf00      	nop
 800e6fe:	3710      	adds	r7, #16
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}
 800e704:	0801c210 	.word	0x0801c210
 800e708:	0801c2c0 	.word	0x0801c2c0
 800e70c:	0801c254 	.word	0x0801c254
 800e710:	0801c2cc 	.word	0x0801c2cc
 800e714:	0801e30c 	.word	0x0801e30c

0800e718 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e718:	b5b0      	push	{r4, r5, r7, lr}
 800e71a:	b088      	sub	sp, #32
 800e71c:	af04      	add	r7, sp, #16
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	460b      	mov	r3, r1
 800e722:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d106      	bne.n	800e738 <tcp_close_shutdown+0x20>
 800e72a:	4b63      	ldr	r3, [pc, #396]	; (800e8b8 <tcp_close_shutdown+0x1a0>)
 800e72c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e730:	4962      	ldr	r1, [pc, #392]	; (800e8bc <tcp_close_shutdown+0x1a4>)
 800e732:	4863      	ldr	r0, [pc, #396]	; (800e8c0 <tcp_close_shutdown+0x1a8>)
 800e734:	f00b f954 	bl	80199e0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e738:	78fb      	ldrb	r3, [r7, #3]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d066      	beq.n	800e80c <tcp_close_shutdown+0xf4>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	7d1b      	ldrb	r3, [r3, #20]
 800e742:	2b04      	cmp	r3, #4
 800e744:	d003      	beq.n	800e74e <tcp_close_shutdown+0x36>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	7d1b      	ldrb	r3, [r3, #20]
 800e74a:	2b07      	cmp	r3, #7
 800e74c:	d15e      	bne.n	800e80c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e752:	2b00      	cmp	r3, #0
 800e754:	d104      	bne.n	800e760 <tcp_close_shutdown+0x48>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e75a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e75e:	d055      	beq.n	800e80c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	8b5b      	ldrh	r3, [r3, #26]
 800e764:	f003 0310 	and.w	r3, r3, #16
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d106      	bne.n	800e77a <tcp_close_shutdown+0x62>
 800e76c:	4b52      	ldr	r3, [pc, #328]	; (800e8b8 <tcp_close_shutdown+0x1a0>)
 800e76e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e772:	4954      	ldr	r1, [pc, #336]	; (800e8c4 <tcp_close_shutdown+0x1ac>)
 800e774:	4852      	ldr	r0, [pc, #328]	; (800e8c0 <tcp_close_shutdown+0x1a8>)
 800e776:	f00b f933 	bl	80199e0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e782:	687d      	ldr	r5, [r7, #4]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	3304      	adds	r3, #4
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	8ad2      	ldrh	r2, [r2, #22]
 800e78c:	6879      	ldr	r1, [r7, #4]
 800e78e:	8b09      	ldrh	r1, [r1, #24]
 800e790:	9102      	str	r1, [sp, #8]
 800e792:	9201      	str	r2, [sp, #4]
 800e794:	9300      	str	r3, [sp, #0]
 800e796:	462b      	mov	r3, r5
 800e798:	4622      	mov	r2, r4
 800e79a:	4601      	mov	r1, r0
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f005 fd71 	bl	8014284 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f001 fb4e 	bl	800fe44 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e7a8:	4b47      	ldr	r3, [pc, #284]	; (800e8c8 <tcp_close_shutdown+0x1b0>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	687a      	ldr	r2, [r7, #4]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d105      	bne.n	800e7be <tcp_close_shutdown+0xa6>
 800e7b2:	4b45      	ldr	r3, [pc, #276]	; (800e8c8 <tcp_close_shutdown+0x1b0>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	68db      	ldr	r3, [r3, #12]
 800e7b8:	4a43      	ldr	r2, [pc, #268]	; (800e8c8 <tcp_close_shutdown+0x1b0>)
 800e7ba:	6013      	str	r3, [r2, #0]
 800e7bc:	e013      	b.n	800e7e6 <tcp_close_shutdown+0xce>
 800e7be:	4b42      	ldr	r3, [pc, #264]	; (800e8c8 <tcp_close_shutdown+0x1b0>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	60fb      	str	r3, [r7, #12]
 800e7c4:	e00c      	b.n	800e7e0 <tcp_close_shutdown+0xc8>
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	68db      	ldr	r3, [r3, #12]
 800e7ca:	687a      	ldr	r2, [r7, #4]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d104      	bne.n	800e7da <tcp_close_shutdown+0xc2>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	68da      	ldr	r2, [r3, #12]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	60da      	str	r2, [r3, #12]
 800e7d8:	e005      	b.n	800e7e6 <tcp_close_shutdown+0xce>
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	68db      	ldr	r3, [r3, #12]
 800e7de:	60fb      	str	r3, [r7, #12]
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d1ef      	bne.n	800e7c6 <tcp_close_shutdown+0xae>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	60da      	str	r2, [r3, #12]
 800e7ec:	4b37      	ldr	r3, [pc, #220]	; (800e8cc <tcp_close_shutdown+0x1b4>)
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e7f2:	4b37      	ldr	r3, [pc, #220]	; (800e8d0 <tcp_close_shutdown+0x1b8>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d102      	bne.n	800e802 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e7fc:	f003 ffe6 	bl	80127cc <tcp_trigger_input_pcb_close>
 800e800:	e002      	b.n	800e808 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7ff fed6 	bl	800e5b4 <tcp_free>
      }
      return ERR_OK;
 800e808:	2300      	movs	r3, #0
 800e80a:	e050      	b.n	800e8ae <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	7d1b      	ldrb	r3, [r3, #20]
 800e810:	2b02      	cmp	r3, #2
 800e812:	d03b      	beq.n	800e88c <tcp_close_shutdown+0x174>
 800e814:	2b02      	cmp	r3, #2
 800e816:	dc44      	bgt.n	800e8a2 <tcp_close_shutdown+0x18a>
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d002      	beq.n	800e822 <tcp_close_shutdown+0x10a>
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	d02a      	beq.n	800e876 <tcp_close_shutdown+0x15e>
 800e820:	e03f      	b.n	800e8a2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	8adb      	ldrh	r3, [r3, #22]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d021      	beq.n	800e86e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e82a:	4b2a      	ldr	r3, [pc, #168]	; (800e8d4 <tcp_close_shutdown+0x1bc>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	687a      	ldr	r2, [r7, #4]
 800e830:	429a      	cmp	r2, r3
 800e832:	d105      	bne.n	800e840 <tcp_close_shutdown+0x128>
 800e834:	4b27      	ldr	r3, [pc, #156]	; (800e8d4 <tcp_close_shutdown+0x1bc>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	68db      	ldr	r3, [r3, #12]
 800e83a:	4a26      	ldr	r2, [pc, #152]	; (800e8d4 <tcp_close_shutdown+0x1bc>)
 800e83c:	6013      	str	r3, [r2, #0]
 800e83e:	e013      	b.n	800e868 <tcp_close_shutdown+0x150>
 800e840:	4b24      	ldr	r3, [pc, #144]	; (800e8d4 <tcp_close_shutdown+0x1bc>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	60bb      	str	r3, [r7, #8]
 800e846:	e00c      	b.n	800e862 <tcp_close_shutdown+0x14a>
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	68db      	ldr	r3, [r3, #12]
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	429a      	cmp	r2, r3
 800e850:	d104      	bne.n	800e85c <tcp_close_shutdown+0x144>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	68da      	ldr	r2, [r3, #12]
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	60da      	str	r2, [r3, #12]
 800e85a:	e005      	b.n	800e868 <tcp_close_shutdown+0x150>
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	68db      	ldr	r3, [r3, #12]
 800e860:	60bb      	str	r3, [r7, #8]
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d1ef      	bne.n	800e848 <tcp_close_shutdown+0x130>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2200      	movs	r2, #0
 800e86c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f7ff fea0 	bl	800e5b4 <tcp_free>
      break;
 800e874:	e01a      	b.n	800e8ac <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f7ff ff14 	bl	800e6a4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e87c:	6879      	ldr	r1, [r7, #4]
 800e87e:	4816      	ldr	r0, [pc, #88]	; (800e8d8 <tcp_close_shutdown+0x1c0>)
 800e880:	f001 fb30 	bl	800fee4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f7ff feb1 	bl	800e5ec <tcp_free_listen>
      break;
 800e88a:	e00f      	b.n	800e8ac <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e88c:	6879      	ldr	r1, [r7, #4]
 800e88e:	480e      	ldr	r0, [pc, #56]	; (800e8c8 <tcp_close_shutdown+0x1b0>)
 800e890:	f001 fb28 	bl	800fee4 <tcp_pcb_remove>
 800e894:	4b0d      	ldr	r3, [pc, #52]	; (800e8cc <tcp_close_shutdown+0x1b4>)
 800e896:	2201      	movs	r2, #1
 800e898:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f7ff fe8a 	bl	800e5b4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e8a0:	e004      	b.n	800e8ac <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f000 f81a 	bl	800e8dc <tcp_close_shutdown_fin>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	e000      	b.n	800e8ae <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e8ac:	2300      	movs	r3, #0
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3710      	adds	r7, #16
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bdb0      	pop	{r4, r5, r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	0801c210 	.word	0x0801c210
 800e8bc:	0801c2e4 	.word	0x0801c2e4
 800e8c0:	0801c254 	.word	0x0801c254
 800e8c4:	0801c304 	.word	0x0801c304
 800e8c8:	200112ac 	.word	0x200112ac
 800e8cc:	200112b4 	.word	0x200112b4
 800e8d0:	200112ec 	.word	0x200112ec
 800e8d4:	200112a4 	.word	0x200112a4
 800e8d8:	200112a8 	.word	0x200112a8

0800e8dc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d106      	bne.n	800e8f8 <tcp_close_shutdown_fin+0x1c>
 800e8ea:	4b2e      	ldr	r3, [pc, #184]	; (800e9a4 <tcp_close_shutdown_fin+0xc8>)
 800e8ec:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e8f0:	492d      	ldr	r1, [pc, #180]	; (800e9a8 <tcp_close_shutdown_fin+0xcc>)
 800e8f2:	482e      	ldr	r0, [pc, #184]	; (800e9ac <tcp_close_shutdown_fin+0xd0>)
 800e8f4:	f00b f874 	bl	80199e0 <iprintf>

  switch (pcb->state) {
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	7d1b      	ldrb	r3, [r3, #20]
 800e8fc:	2b07      	cmp	r3, #7
 800e8fe:	d020      	beq.n	800e942 <tcp_close_shutdown_fin+0x66>
 800e900:	2b07      	cmp	r3, #7
 800e902:	dc2b      	bgt.n	800e95c <tcp_close_shutdown_fin+0x80>
 800e904:	2b03      	cmp	r3, #3
 800e906:	d002      	beq.n	800e90e <tcp_close_shutdown_fin+0x32>
 800e908:	2b04      	cmp	r3, #4
 800e90a:	d00d      	beq.n	800e928 <tcp_close_shutdown_fin+0x4c>
 800e90c:	e026      	b.n	800e95c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f004 fdc6 	bl	80134a0 <tcp_send_fin>
 800e914:	4603      	mov	r3, r0
 800e916:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d11f      	bne.n	800e960 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2205      	movs	r2, #5
 800e924:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e926:	e01b      	b.n	800e960 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f004 fdb9 	bl	80134a0 <tcp_send_fin>
 800e92e:	4603      	mov	r3, r0
 800e930:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d114      	bne.n	800e964 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2205      	movs	r2, #5
 800e93e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e940:	e010      	b.n	800e964 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f004 fdac 	bl	80134a0 <tcp_send_fin>
 800e948:	4603      	mov	r3, r0
 800e94a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e94c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d109      	bne.n	800e968 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2209      	movs	r2, #9
 800e958:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e95a:	e005      	b.n	800e968 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e95c:	2300      	movs	r3, #0
 800e95e:	e01c      	b.n	800e99a <tcp_close_shutdown_fin+0xbe>
      break;
 800e960:	bf00      	nop
 800e962:	e002      	b.n	800e96a <tcp_close_shutdown_fin+0x8e>
      break;
 800e964:	bf00      	nop
 800e966:	e000      	b.n	800e96a <tcp_close_shutdown_fin+0x8e>
      break;
 800e968:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e96a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d103      	bne.n	800e97a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f004 fed2 	bl	801371c <tcp_output>
 800e978:	e00d      	b.n	800e996 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e97a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e97e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e982:	d108      	bne.n	800e996 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	8b5b      	ldrh	r3, [r3, #26]
 800e988:	f043 0308 	orr.w	r3, r3, #8
 800e98c:	b29a      	uxth	r2, r3
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e992:	2300      	movs	r3, #0
 800e994:	e001      	b.n	800e99a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e996:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3710      	adds	r7, #16
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	0801c210 	.word	0x0801c210
 800e9a8:	0801c2c0 	.word	0x0801c2c0
 800e9ac:	0801c254 	.word	0x0801c254

0800e9b0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b082      	sub	sp, #8
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d109      	bne.n	800e9d2 <tcp_close+0x22>
 800e9be:	4b0f      	ldr	r3, [pc, #60]	; (800e9fc <tcp_close+0x4c>)
 800e9c0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e9c4:	490e      	ldr	r1, [pc, #56]	; (800ea00 <tcp_close+0x50>)
 800e9c6:	480f      	ldr	r0, [pc, #60]	; (800ea04 <tcp_close+0x54>)
 800e9c8:	f00b f80a 	bl	80199e0 <iprintf>
 800e9cc:	f06f 030f 	mvn.w	r3, #15
 800e9d0:	e00f      	b.n	800e9f2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	7d1b      	ldrb	r3, [r3, #20]
 800e9d6:	2b01      	cmp	r3, #1
 800e9d8:	d006      	beq.n	800e9e8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	8b5b      	ldrh	r3, [r3, #26]
 800e9de:	f043 0310 	orr.w	r3, r3, #16
 800e9e2:	b29a      	uxth	r2, r3
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e9e8:	2101      	movs	r1, #1
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f7ff fe94 	bl	800e718 <tcp_close_shutdown>
 800e9f0:	4603      	mov	r3, r0
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3708      	adds	r7, #8
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	0801c210 	.word	0x0801c210
 800ea00:	0801c320 	.word	0x0801c320
 800ea04:	0801c254 	.word	0x0801c254

0800ea08 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b084      	sub	sp, #16
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	60f8      	str	r0, [r7, #12]
 800ea10:	60b9      	str	r1, [r7, #8]
 800ea12:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d109      	bne.n	800ea2e <tcp_shutdown+0x26>
 800ea1a:	4b26      	ldr	r3, [pc, #152]	; (800eab4 <tcp_shutdown+0xac>)
 800ea1c:	f240 2207 	movw	r2, #519	; 0x207
 800ea20:	4925      	ldr	r1, [pc, #148]	; (800eab8 <tcp_shutdown+0xb0>)
 800ea22:	4826      	ldr	r0, [pc, #152]	; (800eabc <tcp_shutdown+0xb4>)
 800ea24:	f00a ffdc 	bl	80199e0 <iprintf>
 800ea28:	f06f 030f 	mvn.w	r3, #15
 800ea2c:	e03d      	b.n	800eaaa <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	7d1b      	ldrb	r3, [r3, #20]
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d102      	bne.n	800ea3c <tcp_shutdown+0x34>
    return ERR_CONN;
 800ea36:	f06f 030a 	mvn.w	r3, #10
 800ea3a:	e036      	b.n	800eaaa <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d01b      	beq.n	800ea7a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	8b5b      	ldrh	r3, [r3, #26]
 800ea46:	f043 0310 	orr.w	r3, r3, #16
 800ea4a:	b29a      	uxth	r2, r3
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d005      	beq.n	800ea62 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800ea56:	2101      	movs	r1, #1
 800ea58:	68f8      	ldr	r0, [r7, #12]
 800ea5a:	f7ff fe5d 	bl	800e718 <tcp_close_shutdown>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	e023      	b.n	800eaaa <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d007      	beq.n	800ea7a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7ff faf4 	bl	800e05c <pbuf_free>
      pcb->refused_data = NULL;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2200      	movs	r2, #0
 800ea78:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d013      	beq.n	800eaa8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	7d1b      	ldrb	r3, [r3, #20]
 800ea84:	2b04      	cmp	r3, #4
 800ea86:	dc02      	bgt.n	800ea8e <tcp_shutdown+0x86>
 800ea88:	2b03      	cmp	r3, #3
 800ea8a:	da02      	bge.n	800ea92 <tcp_shutdown+0x8a>
 800ea8c:	e009      	b.n	800eaa2 <tcp_shutdown+0x9a>
 800ea8e:	2b07      	cmp	r3, #7
 800ea90:	d107      	bne.n	800eaa2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	4619      	mov	r1, r3
 800ea98:	68f8      	ldr	r0, [r7, #12]
 800ea9a:	f7ff fe3d 	bl	800e718 <tcp_close_shutdown>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	e003      	b.n	800eaaa <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800eaa2:	f06f 030a 	mvn.w	r3, #10
 800eaa6:	e000      	b.n	800eaaa <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800eaa8:	2300      	movs	r3, #0
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3710      	adds	r7, #16
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	0801c210 	.word	0x0801c210
 800eab8:	0801c338 	.word	0x0801c338
 800eabc:	0801c254 	.word	0x0801c254

0800eac0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b08e      	sub	sp, #56	; 0x38
 800eac4:	af04      	add	r7, sp, #16
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d107      	bne.n	800eae0 <tcp_abandon+0x20>
 800ead0:	4b52      	ldr	r3, [pc, #328]	; (800ec1c <tcp_abandon+0x15c>)
 800ead2:	f240 223d 	movw	r2, #573	; 0x23d
 800ead6:	4952      	ldr	r1, [pc, #328]	; (800ec20 <tcp_abandon+0x160>)
 800ead8:	4852      	ldr	r0, [pc, #328]	; (800ec24 <tcp_abandon+0x164>)
 800eada:	f00a ff81 	bl	80199e0 <iprintf>
 800eade:	e099      	b.n	800ec14 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	7d1b      	ldrb	r3, [r3, #20]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d106      	bne.n	800eaf6 <tcp_abandon+0x36>
 800eae8:	4b4c      	ldr	r3, [pc, #304]	; (800ec1c <tcp_abandon+0x15c>)
 800eaea:	f44f 7210 	mov.w	r2, #576	; 0x240
 800eaee:	494e      	ldr	r1, [pc, #312]	; (800ec28 <tcp_abandon+0x168>)
 800eaf0:	484c      	ldr	r0, [pc, #304]	; (800ec24 <tcp_abandon+0x164>)
 800eaf2:	f00a ff75 	bl	80199e0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	7d1b      	ldrb	r3, [r3, #20]
 800eafa:	2b0a      	cmp	r3, #10
 800eafc:	d107      	bne.n	800eb0e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800eafe:	6879      	ldr	r1, [r7, #4]
 800eb00:	484a      	ldr	r0, [pc, #296]	; (800ec2c <tcp_abandon+0x16c>)
 800eb02:	f001 f9ef 	bl	800fee4 <tcp_pcb_remove>
    tcp_free(pcb);
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f7ff fd54 	bl	800e5b4 <tcp_free>
 800eb0c:	e082      	b.n	800ec14 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800eb12:	2300      	movs	r3, #0
 800eb14:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb1a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb20:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb28:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	691b      	ldr	r3, [r3, #16]
 800eb2e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	7d1b      	ldrb	r3, [r3, #20]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d126      	bne.n	800eb86 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	8adb      	ldrh	r3, [r3, #22]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d02e      	beq.n	800eb9e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800eb40:	4b3b      	ldr	r3, [pc, #236]	; (800ec30 <tcp_abandon+0x170>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	687a      	ldr	r2, [r7, #4]
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d105      	bne.n	800eb56 <tcp_abandon+0x96>
 800eb4a:	4b39      	ldr	r3, [pc, #228]	; (800ec30 <tcp_abandon+0x170>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	68db      	ldr	r3, [r3, #12]
 800eb50:	4a37      	ldr	r2, [pc, #220]	; (800ec30 <tcp_abandon+0x170>)
 800eb52:	6013      	str	r3, [r2, #0]
 800eb54:	e013      	b.n	800eb7e <tcp_abandon+0xbe>
 800eb56:	4b36      	ldr	r3, [pc, #216]	; (800ec30 <tcp_abandon+0x170>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	61fb      	str	r3, [r7, #28]
 800eb5c:	e00c      	b.n	800eb78 <tcp_abandon+0xb8>
 800eb5e:	69fb      	ldr	r3, [r7, #28]
 800eb60:	68db      	ldr	r3, [r3, #12]
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d104      	bne.n	800eb72 <tcp_abandon+0xb2>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	68da      	ldr	r2, [r3, #12]
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	60da      	str	r2, [r3, #12]
 800eb70:	e005      	b.n	800eb7e <tcp_abandon+0xbe>
 800eb72:	69fb      	ldr	r3, [r7, #28]
 800eb74:	68db      	ldr	r3, [r3, #12]
 800eb76:	61fb      	str	r3, [r7, #28]
 800eb78:	69fb      	ldr	r3, [r7, #28]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d1ef      	bne.n	800eb5e <tcp_abandon+0x9e>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2200      	movs	r2, #0
 800eb82:	60da      	str	r2, [r3, #12]
 800eb84:	e00b      	b.n	800eb9e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	8adb      	ldrh	r3, [r3, #22]
 800eb8e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800eb90:	6879      	ldr	r1, [r7, #4]
 800eb92:	4828      	ldr	r0, [pc, #160]	; (800ec34 <tcp_abandon+0x174>)
 800eb94:	f001 f9a6 	bl	800fee4 <tcp_pcb_remove>
 800eb98:	4b27      	ldr	r3, [pc, #156]	; (800ec38 <tcp_abandon+0x178>)
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d004      	beq.n	800ebb0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f000 fe7a 	bl	800f8a4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d004      	beq.n	800ebc2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f000 fe71 	bl	800f8a4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d004      	beq.n	800ebd4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f000 fe68 	bl	800f8a4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ebd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d00e      	beq.n	800ebf8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ebda:	6879      	ldr	r1, [r7, #4]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	3304      	adds	r3, #4
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	8b12      	ldrh	r2, [r2, #24]
 800ebe4:	9202      	str	r2, [sp, #8]
 800ebe6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ebe8:	9201      	str	r2, [sp, #4]
 800ebea:	9300      	str	r3, [sp, #0]
 800ebec:	460b      	mov	r3, r1
 800ebee:	697a      	ldr	r2, [r7, #20]
 800ebf0:	69b9      	ldr	r1, [r7, #24]
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f005 fb46 	bl	8014284 <tcp_rst>
    }
    last_state = pcb->state;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	7d1b      	ldrb	r3, [r3, #20]
 800ebfc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f7ff fcd8 	bl	800e5b4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d004      	beq.n	800ec14 <tcp_abandon+0x154>
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	f06f 010c 	mvn.w	r1, #12
 800ec10:	68f8      	ldr	r0, [r7, #12]
 800ec12:	4798      	blx	r3
  }
}
 800ec14:	3728      	adds	r7, #40	; 0x28
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	0801c210 	.word	0x0801c210
 800ec20:	0801c354 	.word	0x0801c354
 800ec24:	0801c254 	.word	0x0801c254
 800ec28:	0801c370 	.word	0x0801c370
 800ec2c:	200112b0 	.word	0x200112b0
 800ec30:	200112a4 	.word	0x200112a4
 800ec34:	200112ac 	.word	0x200112ac
 800ec38:	200112b4 	.word	0x200112b4

0800ec3c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ec44:	2101      	movs	r1, #1
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f7ff ff3a 	bl	800eac0 <tcp_abandon>
}
 800ec4c:	bf00      	nop
 800ec4e:	3708      	adds	r7, #8
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}

0800ec54 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d106      	bne.n	800ec70 <tcp_update_rcv_ann_wnd+0x1c>
 800ec62:	4b25      	ldr	r3, [pc, #148]	; (800ecf8 <tcp_update_rcv_ann_wnd+0xa4>)
 800ec64:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ec68:	4924      	ldr	r1, [pc, #144]	; (800ecfc <tcp_update_rcv_ann_wnd+0xa8>)
 800ec6a:	4825      	ldr	r0, [pc, #148]	; (800ed00 <tcp_update_rcv_ann_wnd+0xac>)
 800ec6c:	f00a feb8 	bl	80199e0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec74:	687a      	ldr	r2, [r7, #4]
 800ec76:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ec78:	4413      	add	r3, r2
 800ec7a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec80:	687a      	ldr	r2, [r7, #4]
 800ec82:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ec84:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ec88:	bf28      	it	cs
 800ec8a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ec8e:	b292      	uxth	r2, r2
 800ec90:	4413      	add	r3, r2
 800ec92:	68fa      	ldr	r2, [r7, #12]
 800ec94:	1ad3      	subs	r3, r2, r3
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	db08      	blt.n	800ecac <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eca6:	68fa      	ldr	r2, [r7, #12]
 800eca8:	1ad3      	subs	r3, r2, r3
 800ecaa:	e020      	b.n	800ecee <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecb4:	1ad3      	subs	r3, r2, r3
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	dd03      	ble.n	800ecc2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ecc0:	e014      	b.n	800ecec <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecca:	1ad3      	subs	r3, r2, r3
 800eccc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecd4:	d306      	bcc.n	800ece4 <tcp_update_rcv_ann_wnd+0x90>
 800ecd6:	4b08      	ldr	r3, [pc, #32]	; (800ecf8 <tcp_update_rcv_ann_wnd+0xa4>)
 800ecd8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ecdc:	4909      	ldr	r1, [pc, #36]	; (800ed04 <tcp_update_rcv_ann_wnd+0xb0>)
 800ecde:	4808      	ldr	r0, [pc, #32]	; (800ed00 <tcp_update_rcv_ann_wnd+0xac>)
 800ece0:	f00a fe7e 	bl	80199e0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	b29a      	uxth	r2, r3
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ecec:	2300      	movs	r3, #0
  }
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3710      	adds	r7, #16
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	0801c210 	.word	0x0801c210
 800ecfc:	0801c46c 	.word	0x0801c46c
 800ed00:	0801c254 	.word	0x0801c254
 800ed04:	0801c490 	.word	0x0801c490

0800ed08 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	460b      	mov	r3, r1
 800ed12:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d107      	bne.n	800ed2a <tcp_recved+0x22>
 800ed1a:	4b1f      	ldr	r3, [pc, #124]	; (800ed98 <tcp_recved+0x90>)
 800ed1c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ed20:	491e      	ldr	r1, [pc, #120]	; (800ed9c <tcp_recved+0x94>)
 800ed22:	481f      	ldr	r0, [pc, #124]	; (800eda0 <tcp_recved+0x98>)
 800ed24:	f00a fe5c 	bl	80199e0 <iprintf>
 800ed28:	e032      	b.n	800ed90 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	7d1b      	ldrb	r3, [r3, #20]
 800ed2e:	2b01      	cmp	r3, #1
 800ed30:	d106      	bne.n	800ed40 <tcp_recved+0x38>
 800ed32:	4b19      	ldr	r3, [pc, #100]	; (800ed98 <tcp_recved+0x90>)
 800ed34:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ed38:	491a      	ldr	r1, [pc, #104]	; (800eda4 <tcp_recved+0x9c>)
 800ed3a:	4819      	ldr	r0, [pc, #100]	; (800eda0 <tcp_recved+0x98>)
 800ed3c:	f00a fe50 	bl	80199e0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ed44:	887b      	ldrh	r3, [r7, #2]
 800ed46:	4413      	add	r3, r2
 800ed48:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ed4a:	89fb      	ldrh	r3, [r7, #14]
 800ed4c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ed50:	d804      	bhi.n	800ed5c <tcp_recved+0x54>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed56:	89fa      	ldrh	r2, [r7, #14]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d204      	bcs.n	800ed66 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ed62:	851a      	strh	r2, [r3, #40]	; 0x28
 800ed64:	e002      	b.n	800ed6c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	89fa      	ldrh	r2, [r7, #14]
 800ed6a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f7ff ff71 	bl	800ec54 <tcp_update_rcv_ann_wnd>
 800ed72:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ed7a:	d309      	bcc.n	800ed90 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	8b5b      	ldrh	r3, [r3, #26]
 800ed80:	f043 0302 	orr.w	r3, r3, #2
 800ed84:	b29a      	uxth	r2, r3
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f004 fcc6 	bl	801371c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ed90:	3710      	adds	r7, #16
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop
 800ed98:	0801c210 	.word	0x0801c210
 800ed9c:	0801c4ac 	.word	0x0801c4ac
 800eda0:	0801c254 	.word	0x0801c254
 800eda4:	0801c4c4 	.word	0x0801c4c4

0800eda8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800eda8:	b480      	push	{r7}
 800edaa:	b083      	sub	sp, #12
 800edac:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800edae:	2300      	movs	r3, #0
 800edb0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800edb2:	4b1e      	ldr	r3, [pc, #120]	; (800ee2c <tcp_new_port+0x84>)
 800edb4:	881b      	ldrh	r3, [r3, #0]
 800edb6:	3301      	adds	r3, #1
 800edb8:	b29a      	uxth	r2, r3
 800edba:	4b1c      	ldr	r3, [pc, #112]	; (800ee2c <tcp_new_port+0x84>)
 800edbc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800edbe:	4b1b      	ldr	r3, [pc, #108]	; (800ee2c <tcp_new_port+0x84>)
 800edc0:	881b      	ldrh	r3, [r3, #0]
 800edc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d103      	bne.n	800edd2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800edca:	4b18      	ldr	r3, [pc, #96]	; (800ee2c <tcp_new_port+0x84>)
 800edcc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800edd0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800edd2:	2300      	movs	r3, #0
 800edd4:	71fb      	strb	r3, [r7, #7]
 800edd6:	e01e      	b.n	800ee16 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800edd8:	79fb      	ldrb	r3, [r7, #7]
 800edda:	4a15      	ldr	r2, [pc, #84]	; (800ee30 <tcp_new_port+0x88>)
 800eddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	603b      	str	r3, [r7, #0]
 800ede4:	e011      	b.n	800ee0a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	8ada      	ldrh	r2, [r3, #22]
 800edea:	4b10      	ldr	r3, [pc, #64]	; (800ee2c <tcp_new_port+0x84>)
 800edec:	881b      	ldrh	r3, [r3, #0]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d108      	bne.n	800ee04 <tcp_new_port+0x5c>
        n++;
 800edf2:	88bb      	ldrh	r3, [r7, #4]
 800edf4:	3301      	adds	r3, #1
 800edf6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800edf8:	88bb      	ldrh	r3, [r7, #4]
 800edfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800edfe:	d3d8      	bcc.n	800edb2 <tcp_new_port+0xa>
          return 0;
 800ee00:	2300      	movs	r3, #0
 800ee02:	e00d      	b.n	800ee20 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	603b      	str	r3, [r7, #0]
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d1ea      	bne.n	800ede6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ee10:	79fb      	ldrb	r3, [r7, #7]
 800ee12:	3301      	adds	r3, #1
 800ee14:	71fb      	strb	r3, [r7, #7]
 800ee16:	79fb      	ldrb	r3, [r7, #7]
 800ee18:	2b03      	cmp	r3, #3
 800ee1a:	d9dd      	bls.n	800edd8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ee1c:	4b03      	ldr	r3, [pc, #12]	; (800ee2c <tcp_new_port+0x84>)
 800ee1e:	881b      	ldrh	r3, [r3, #0]
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	370c      	adds	r7, #12
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr
 800ee2c:	20000028 	.word	0x20000028
 800ee30:	0801e30c 	.word	0x0801e30c

0800ee34 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b08a      	sub	sp, #40	; 0x28
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	60b9      	str	r1, [r7, #8]
 800ee3e:	603b      	str	r3, [r7, #0]
 800ee40:	4613      	mov	r3, r2
 800ee42:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800ee44:	2300      	movs	r3, #0
 800ee46:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d109      	bne.n	800ee62 <tcp_connect+0x2e>
 800ee4e:	4b7d      	ldr	r3, [pc, #500]	; (800f044 <tcp_connect+0x210>)
 800ee50:	f240 4235 	movw	r2, #1077	; 0x435
 800ee54:	497c      	ldr	r1, [pc, #496]	; (800f048 <tcp_connect+0x214>)
 800ee56:	487d      	ldr	r0, [pc, #500]	; (800f04c <tcp_connect+0x218>)
 800ee58:	f00a fdc2 	bl	80199e0 <iprintf>
 800ee5c:	f06f 030f 	mvn.w	r3, #15
 800ee60:	e0ec      	b.n	800f03c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d109      	bne.n	800ee7c <tcp_connect+0x48>
 800ee68:	4b76      	ldr	r3, [pc, #472]	; (800f044 <tcp_connect+0x210>)
 800ee6a:	f240 4236 	movw	r2, #1078	; 0x436
 800ee6e:	4978      	ldr	r1, [pc, #480]	; (800f050 <tcp_connect+0x21c>)
 800ee70:	4876      	ldr	r0, [pc, #472]	; (800f04c <tcp_connect+0x218>)
 800ee72:	f00a fdb5 	bl	80199e0 <iprintf>
 800ee76:	f06f 030f 	mvn.w	r3, #15
 800ee7a:	e0df      	b.n	800f03c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	7d1b      	ldrb	r3, [r3, #20]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d009      	beq.n	800ee98 <tcp_connect+0x64>
 800ee84:	4b6f      	ldr	r3, [pc, #444]	; (800f044 <tcp_connect+0x210>)
 800ee86:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800ee8a:	4972      	ldr	r1, [pc, #456]	; (800f054 <tcp_connect+0x220>)
 800ee8c:	486f      	ldr	r0, [pc, #444]	; (800f04c <tcp_connect+0x218>)
 800ee8e:	f00a fda7 	bl	80199e0 <iprintf>
 800ee92:	f06f 0309 	mvn.w	r3, #9
 800ee96:	e0d1      	b.n	800f03c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d002      	beq.n	800eea4 <tcp_connect+0x70>
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	e000      	b.n	800eea6 <tcp_connect+0x72>
 800eea4:	2300      	movs	r3, #0
 800eea6:	68fa      	ldr	r2, [r7, #12]
 800eea8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	88fa      	ldrh	r2, [r7, #6]
 800eeae:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	7a1b      	ldrb	r3, [r3, #8]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d006      	beq.n	800eec6 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	7a1b      	ldrb	r3, [r3, #8]
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7fe fd3f 	bl	800d940 <netif_get_by_index>
 800eec2:	6278      	str	r0, [r7, #36]	; 0x24
 800eec4:	e005      	b.n	800eed2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	3304      	adds	r3, #4
 800eeca:	4618      	mov	r0, r3
 800eecc:	f007 f95e 	bl	801618c <ip4_route>
 800eed0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800eed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d102      	bne.n	800eede <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800eed8:	f06f 0303 	mvn.w	r3, #3
 800eedc:	e0ae      	b.n	800f03c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d003      	beq.n	800eeec <tcp_connect+0xb8>
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d111      	bne.n	800ef10 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800eeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d002      	beq.n	800eef8 <tcp_connect+0xc4>
 800eef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef4:	3304      	adds	r3, #4
 800eef6:	e000      	b.n	800eefa <tcp_connect+0xc6>
 800eef8:	2300      	movs	r3, #0
 800eefa:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d102      	bne.n	800ef08 <tcp_connect+0xd4>
      return ERR_RTE;
 800ef02:	f06f 0303 	mvn.w	r3, #3
 800ef06:	e099      	b.n	800f03c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ef08:	69fb      	ldr	r3, [r7, #28]
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	8adb      	ldrh	r3, [r3, #22]
 800ef14:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	8adb      	ldrh	r3, [r3, #22]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d10c      	bne.n	800ef38 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800ef1e:	f7ff ff43 	bl	800eda8 <tcp_new_port>
 800ef22:	4603      	mov	r3, r0
 800ef24:	461a      	mov	r2, r3
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	8adb      	ldrh	r3, [r3, #22]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d102      	bne.n	800ef38 <tcp_connect+0x104>
      return ERR_BUF;
 800ef32:	f06f 0301 	mvn.w	r3, #1
 800ef36:	e081      	b.n	800f03c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800ef38:	68f8      	ldr	r0, [r7, #12]
 800ef3a:	f001 f867 	bl	801000c <tcp_next_iss>
 800ef3e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2200      	movs	r2, #0
 800ef44:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	697a      	ldr	r2, [r7, #20]
 800ef4a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	1e5a      	subs	r2, r3, #1
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	1e5a      	subs	r2, r3, #1
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	1e5a      	subs	r2, r3, #1
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ef6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ef82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ef8c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	3304      	adds	r3, #4
 800ef96:	461a      	mov	r2, r3
 800ef98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef9a:	f001 f85d 	bl	8010058 <tcp_eff_send_mss_netif>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	461a      	mov	r2, r3
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	2201      	movs	r2, #1
 800efaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	683a      	ldr	r2, [r7, #0]
 800efb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800efb6:	2102      	movs	r1, #2
 800efb8:	68f8      	ldr	r0, [r7, #12]
 800efba:	f004 fac1 	bl	8013540 <tcp_enqueue_flags>
 800efbe:	4603      	mov	r3, r0
 800efc0:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800efc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d136      	bne.n	800f038 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2202      	movs	r2, #2
 800efce:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800efd0:	8b7b      	ldrh	r3, [r7, #26]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d021      	beq.n	800f01a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800efd6:	4b20      	ldr	r3, [pc, #128]	; (800f058 <tcp_connect+0x224>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	68fa      	ldr	r2, [r7, #12]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d105      	bne.n	800efec <tcp_connect+0x1b8>
 800efe0:	4b1d      	ldr	r3, [pc, #116]	; (800f058 <tcp_connect+0x224>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	68db      	ldr	r3, [r3, #12]
 800efe6:	4a1c      	ldr	r2, [pc, #112]	; (800f058 <tcp_connect+0x224>)
 800efe8:	6013      	str	r3, [r2, #0]
 800efea:	e013      	b.n	800f014 <tcp_connect+0x1e0>
 800efec:	4b1a      	ldr	r3, [pc, #104]	; (800f058 <tcp_connect+0x224>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	623b      	str	r3, [r7, #32]
 800eff2:	e00c      	b.n	800f00e <tcp_connect+0x1da>
 800eff4:	6a3b      	ldr	r3, [r7, #32]
 800eff6:	68db      	ldr	r3, [r3, #12]
 800eff8:	68fa      	ldr	r2, [r7, #12]
 800effa:	429a      	cmp	r2, r3
 800effc:	d104      	bne.n	800f008 <tcp_connect+0x1d4>
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	68da      	ldr	r2, [r3, #12]
 800f002:	6a3b      	ldr	r3, [r7, #32]
 800f004:	60da      	str	r2, [r3, #12]
 800f006:	e005      	b.n	800f014 <tcp_connect+0x1e0>
 800f008:	6a3b      	ldr	r3, [r7, #32]
 800f00a:	68db      	ldr	r3, [r3, #12]
 800f00c:	623b      	str	r3, [r7, #32]
 800f00e:	6a3b      	ldr	r3, [r7, #32]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d1ef      	bne.n	800eff4 <tcp_connect+0x1c0>
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2200      	movs	r2, #0
 800f018:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800f01a:	4b10      	ldr	r3, [pc, #64]	; (800f05c <tcp_connect+0x228>)
 800f01c:	681a      	ldr	r2, [r3, #0]
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	60da      	str	r2, [r3, #12]
 800f022:	4a0e      	ldr	r2, [pc, #56]	; (800f05c <tcp_connect+0x228>)
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	6013      	str	r3, [r2, #0]
 800f028:	f005 faee 	bl	8014608 <tcp_timer_needed>
 800f02c:	4b0c      	ldr	r3, [pc, #48]	; (800f060 <tcp_connect+0x22c>)
 800f02e:	2201      	movs	r2, #1
 800f030:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800f032:	68f8      	ldr	r0, [r7, #12]
 800f034:	f004 fb72 	bl	801371c <tcp_output>
  }
  return ret;
 800f038:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3728      	adds	r7, #40	; 0x28
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}
 800f044:	0801c210 	.word	0x0801c210
 800f048:	0801c4ec 	.word	0x0801c4ec
 800f04c:	0801c254 	.word	0x0801c254
 800f050:	0801c508 	.word	0x0801c508
 800f054:	0801c524 	.word	0x0801c524
 800f058:	200112a4 	.word	0x200112a4
 800f05c:	200112ac 	.word	0x200112ac
 800f060:	200112b4 	.word	0x200112b4

0800f064 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f064:	b5b0      	push	{r4, r5, r7, lr}
 800f066:	b090      	sub	sp, #64	; 0x40
 800f068:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f06a:	2300      	movs	r3, #0
 800f06c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f070:	4b94      	ldr	r3, [pc, #592]	; (800f2c4 <tcp_slowtmr+0x260>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	3301      	adds	r3, #1
 800f076:	4a93      	ldr	r2, [pc, #588]	; (800f2c4 <tcp_slowtmr+0x260>)
 800f078:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f07a:	4b93      	ldr	r3, [pc, #588]	; (800f2c8 <tcp_slowtmr+0x264>)
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	3301      	adds	r3, #1
 800f080:	b2da      	uxtb	r2, r3
 800f082:	4b91      	ldr	r3, [pc, #580]	; (800f2c8 <tcp_slowtmr+0x264>)
 800f084:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f086:	2300      	movs	r3, #0
 800f088:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f08a:	4b90      	ldr	r3, [pc, #576]	; (800f2cc <tcp_slowtmr+0x268>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f090:	e29d      	b.n	800f5ce <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f094:	7d1b      	ldrb	r3, [r3, #20]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d106      	bne.n	800f0a8 <tcp_slowtmr+0x44>
 800f09a:	4b8d      	ldr	r3, [pc, #564]	; (800f2d0 <tcp_slowtmr+0x26c>)
 800f09c:	f240 42be 	movw	r2, #1214	; 0x4be
 800f0a0:	498c      	ldr	r1, [pc, #560]	; (800f2d4 <tcp_slowtmr+0x270>)
 800f0a2:	488d      	ldr	r0, [pc, #564]	; (800f2d8 <tcp_slowtmr+0x274>)
 800f0a4:	f00a fc9c 	bl	80199e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0aa:	7d1b      	ldrb	r3, [r3, #20]
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	d106      	bne.n	800f0be <tcp_slowtmr+0x5a>
 800f0b0:	4b87      	ldr	r3, [pc, #540]	; (800f2d0 <tcp_slowtmr+0x26c>)
 800f0b2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f0b6:	4989      	ldr	r1, [pc, #548]	; (800f2dc <tcp_slowtmr+0x278>)
 800f0b8:	4887      	ldr	r0, [pc, #540]	; (800f2d8 <tcp_slowtmr+0x274>)
 800f0ba:	f00a fc91 	bl	80199e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c0:	7d1b      	ldrb	r3, [r3, #20]
 800f0c2:	2b0a      	cmp	r3, #10
 800f0c4:	d106      	bne.n	800f0d4 <tcp_slowtmr+0x70>
 800f0c6:	4b82      	ldr	r3, [pc, #520]	; (800f2d0 <tcp_slowtmr+0x26c>)
 800f0c8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f0cc:	4984      	ldr	r1, [pc, #528]	; (800f2e0 <tcp_slowtmr+0x27c>)
 800f0ce:	4882      	ldr	r0, [pc, #520]	; (800f2d8 <tcp_slowtmr+0x274>)
 800f0d0:	f00a fc86 	bl	80199e0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d6:	7f9a      	ldrb	r2, [r3, #30]
 800f0d8:	4b7b      	ldr	r3, [pc, #492]	; (800f2c8 <tcp_slowtmr+0x264>)
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d105      	bne.n	800f0ec <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e6:	68db      	ldr	r3, [r3, #12]
 800f0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f0ea:	e270      	b.n	800f5ce <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f0ec:	4b76      	ldr	r3, [pc, #472]	; (800f2c8 <tcp_slowtmr+0x264>)
 800f0ee:	781a      	ldrb	r2, [r3, #0]
 800f0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f102:	7d1b      	ldrb	r3, [r3, #20]
 800f104:	2b02      	cmp	r3, #2
 800f106:	d10a      	bne.n	800f11e <tcp_slowtmr+0xba>
 800f108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f10e:	2b05      	cmp	r3, #5
 800f110:	d905      	bls.n	800f11e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f116:	3301      	adds	r3, #1
 800f118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f11c:	e11e      	b.n	800f35c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f120:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f124:	2b0b      	cmp	r3, #11
 800f126:	d905      	bls.n	800f134 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f12c:	3301      	adds	r3, #1
 800f12e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f132:	e113      	b.n	800f35c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f136:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d075      	beq.n	800f22a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f142:	2b00      	cmp	r3, #0
 800f144:	d006      	beq.n	800f154 <tcp_slowtmr+0xf0>
 800f146:	4b62      	ldr	r3, [pc, #392]	; (800f2d0 <tcp_slowtmr+0x26c>)
 800f148:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f14c:	4965      	ldr	r1, [pc, #404]	; (800f2e4 <tcp_slowtmr+0x280>)
 800f14e:	4862      	ldr	r0, [pc, #392]	; (800f2d8 <tcp_slowtmr+0x274>)
 800f150:	f00a fc46 	bl	80199e0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d106      	bne.n	800f16a <tcp_slowtmr+0x106>
 800f15c:	4b5c      	ldr	r3, [pc, #368]	; (800f2d0 <tcp_slowtmr+0x26c>)
 800f15e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f162:	4961      	ldr	r1, [pc, #388]	; (800f2e8 <tcp_slowtmr+0x284>)
 800f164:	485c      	ldr	r0, [pc, #368]	; (800f2d8 <tcp_slowtmr+0x274>)
 800f166:	f00a fc3b 	bl	80199e0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f170:	2b0b      	cmp	r3, #11
 800f172:	d905      	bls.n	800f180 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f178:	3301      	adds	r3, #1
 800f17a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f17e:	e0ed      	b.n	800f35c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f182:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f186:	3b01      	subs	r3, #1
 800f188:	4a58      	ldr	r2, [pc, #352]	; (800f2ec <tcp_slowtmr+0x288>)
 800f18a:	5cd3      	ldrb	r3, [r2, r3]
 800f18c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f190:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f194:	7c7a      	ldrb	r2, [r7, #17]
 800f196:	429a      	cmp	r2, r3
 800f198:	d907      	bls.n	800f1aa <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	b2da      	uxtb	r2, r3
 800f1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f1b0:	7c7a      	ldrb	r2, [r7, #17]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	f200 80d2 	bhi.w	800f35c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d108      	bne.n	800f1d8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f1c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1c8:	f005 f950 	bl	801446c <tcp_zero_window_probe>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d014      	beq.n	800f1fc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	623b      	str	r3, [r7, #32]
 800f1d6:	e011      	b.n	800f1fc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f1de:	4619      	mov	r1, r3
 800f1e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1e2:	f004 f815 	bl	8013210 <tcp_split_unsent_seg>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d107      	bne.n	800f1fc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f1ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1ee:	f004 fa95 	bl	801371c <tcp_output>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d101      	bne.n	800f1fc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f1fc:	6a3b      	ldr	r3, [r7, #32]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	f000 80ac 	beq.w	800f35c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f206:	2200      	movs	r2, #0
 800f208:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f212:	2b06      	cmp	r3, #6
 800f214:	f200 80a2 	bhi.w	800f35c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f21e:	3301      	adds	r3, #1
 800f220:	b2da      	uxtb	r2, r3
 800f222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f224:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f228:	e098      	b.n	800f35c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f22c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f230:	2b00      	cmp	r3, #0
 800f232:	db0f      	blt.n	800f254 <tcp_slowtmr+0x1f0>
 800f234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f236:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f23a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f23e:	4293      	cmp	r3, r2
 800f240:	d008      	beq.n	800f254 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f244:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f248:	b29b      	uxth	r3, r3
 800f24a:	3301      	adds	r3, #1
 800f24c:	b29b      	uxth	r3, r3
 800f24e:	b21a      	sxth	r2, r3
 800f250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f252:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f256:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f260:	429a      	cmp	r2, r3
 800f262:	db7b      	blt.n	800f35c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f264:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f266:	f004 fd4b 	bl	8013d00 <tcp_rexmit_rto_prepare>
 800f26a:	4603      	mov	r3, r0
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d007      	beq.n	800f280 <tcp_slowtmr+0x21c>
 800f270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f274:	2b00      	cmp	r3, #0
 800f276:	d171      	bne.n	800f35c <tcp_slowtmr+0x2f8>
 800f278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d06d      	beq.n	800f35c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f282:	7d1b      	ldrb	r3, [r3, #20]
 800f284:	2b02      	cmp	r3, #2
 800f286:	d03a      	beq.n	800f2fe <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f28e:	2b0c      	cmp	r3, #12
 800f290:	bf28      	it	cs
 800f292:	230c      	movcs	r3, #12
 800f294:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f298:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f29c:	10db      	asrs	r3, r3, #3
 800f29e:	b21b      	sxth	r3, r3
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f2a8:	4413      	add	r3, r2
 800f2aa:	7efa      	ldrb	r2, [r7, #27]
 800f2ac:	4910      	ldr	r1, [pc, #64]	; (800f2f0 <tcp_slowtmr+0x28c>)
 800f2ae:	5c8a      	ldrb	r2, [r1, r2]
 800f2b0:	4093      	lsls	r3, r2
 800f2b2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	dc1a      	bgt.n	800f2f4 <tcp_slowtmr+0x290>
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	b21a      	sxth	r2, r3
 800f2c2:	e019      	b.n	800f2f8 <tcp_slowtmr+0x294>
 800f2c4:	200112a0 	.word	0x200112a0
 800f2c8:	200112b6 	.word	0x200112b6
 800f2cc:	200112ac 	.word	0x200112ac
 800f2d0:	0801c210 	.word	0x0801c210
 800f2d4:	0801c554 	.word	0x0801c554
 800f2d8:	0801c254 	.word	0x0801c254
 800f2dc:	0801c580 	.word	0x0801c580
 800f2e0:	0801c5ac 	.word	0x0801c5ac
 800f2e4:	0801c5dc 	.word	0x0801c5dc
 800f2e8:	0801c610 	.word	0x0801c610
 800f2ec:	0801e304 	.word	0x0801e304
 800f2f0:	0801e2f4 	.word	0x0801e2f4
 800f2f4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f300:	2200      	movs	r2, #0
 800f302:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f306:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f310:	4293      	cmp	r3, r2
 800f312:	bf28      	it	cs
 800f314:	4613      	movcs	r3, r2
 800f316:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f318:	8a7b      	ldrh	r3, [r7, #18]
 800f31a:	085b      	lsrs	r3, r3, #1
 800f31c:	b29a      	uxth	r2, r3
 800f31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f320:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f326:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f32e:	005b      	lsls	r3, r3, #1
 800f330:	b29b      	uxth	r3, r3
 800f332:	429a      	cmp	r2, r3
 800f334:	d206      	bcs.n	800f344 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f338:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f33a:	005b      	lsls	r3, r3, #1
 800f33c:	b29a      	uxth	r2, r3
 800f33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f340:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f346:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f34a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f350:	2200      	movs	r2, #0
 800f352:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f356:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f358:	f004 fd42 	bl	8013de0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35e:	7d1b      	ldrb	r3, [r3, #20]
 800f360:	2b06      	cmp	r3, #6
 800f362:	d111      	bne.n	800f388 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f366:	8b5b      	ldrh	r3, [r3, #26]
 800f368:	f003 0310 	and.w	r3, r3, #16
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d00b      	beq.n	800f388 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f370:	4b9c      	ldr	r3, [pc, #624]	; (800f5e4 <tcp_slowtmr+0x580>)
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f376:	6a1b      	ldr	r3, [r3, #32]
 800f378:	1ad3      	subs	r3, r2, r3
 800f37a:	2b28      	cmp	r3, #40	; 0x28
 800f37c:	d904      	bls.n	800f388 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f37e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f382:	3301      	adds	r3, #1
 800f384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38a:	7a5b      	ldrb	r3, [r3, #9]
 800f38c:	f003 0308 	and.w	r3, r3, #8
 800f390:	2b00      	cmp	r3, #0
 800f392:	d04a      	beq.n	800f42a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800f394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f396:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f398:	2b04      	cmp	r3, #4
 800f39a:	d003      	beq.n	800f3a4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f3a0:	2b07      	cmp	r3, #7
 800f3a2:	d142      	bne.n	800f42a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f3a4:	4b8f      	ldr	r3, [pc, #572]	; (800f5e4 <tcp_slowtmr+0x580>)
 800f3a6:	681a      	ldr	r2, [r3, #0]
 800f3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3aa:	6a1b      	ldr	r3, [r3, #32]
 800f3ac:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f3b4:	4b8c      	ldr	r3, [pc, #560]	; (800f5e8 <tcp_slowtmr+0x584>)
 800f3b6:	440b      	add	r3, r1
 800f3b8:	498c      	ldr	r1, [pc, #560]	; (800f5ec <tcp_slowtmr+0x588>)
 800f3ba:	fba1 1303 	umull	r1, r3, r1, r3
 800f3be:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d90a      	bls.n	800f3da <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f3c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f3ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f3d8:	e027      	b.n	800f42a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f3da:	4b82      	ldr	r3, [pc, #520]	; (800f5e4 <tcp_slowtmr+0x580>)
 800f3dc:	681a      	ldr	r2, [r3, #0]
 800f3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e0:	6a1b      	ldr	r3, [r3, #32]
 800f3e2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	4b7f      	ldr	r3, [pc, #508]	; (800f5f0 <tcp_slowtmr+0x58c>)
 800f3f4:	fb00 f303 	mul.w	r3, r0, r3
 800f3f8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f3fa:	497c      	ldr	r1, [pc, #496]	; (800f5ec <tcp_slowtmr+0x588>)
 800f3fc:	fba1 1303 	umull	r1, r3, r1, r3
 800f400:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f402:	429a      	cmp	r2, r3
 800f404:	d911      	bls.n	800f42a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800f406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f408:	f004 fff0 	bl	80143ec <tcp_keepalive>
 800f40c:	4603      	mov	r3, r0
 800f40e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f412:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f416:	2b00      	cmp	r3, #0
 800f418:	d107      	bne.n	800f42a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800f41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f41c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f420:	3301      	adds	r3, #1
 800f422:	b2da      	uxtb	r2, r3
 800f424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f426:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d011      	beq.n	800f456 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f432:	4b6c      	ldr	r3, [pc, #432]	; (800f5e4 <tcp_slowtmr+0x580>)
 800f434:	681a      	ldr	r2, [r3, #0]
 800f436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f438:	6a1b      	ldr	r3, [r3, #32]
 800f43a:	1ad2      	subs	r2, r2, r3
 800f43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f442:	4619      	mov	r1, r3
 800f444:	460b      	mov	r3, r1
 800f446:	005b      	lsls	r3, r3, #1
 800f448:	440b      	add	r3, r1
 800f44a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f44c:	429a      	cmp	r2, r3
 800f44e:	d302      	bcc.n	800f456 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f450:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f452:	f000 feab 	bl	80101ac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f458:	7d1b      	ldrb	r3, [r3, #20]
 800f45a:	2b03      	cmp	r3, #3
 800f45c:	d10b      	bne.n	800f476 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f45e:	4b61      	ldr	r3, [pc, #388]	; (800f5e4 <tcp_slowtmr+0x580>)
 800f460:	681a      	ldr	r2, [r3, #0]
 800f462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f464:	6a1b      	ldr	r3, [r3, #32]
 800f466:	1ad3      	subs	r3, r2, r3
 800f468:	2b28      	cmp	r3, #40	; 0x28
 800f46a:	d904      	bls.n	800f476 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f46c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f470:	3301      	adds	r3, #1
 800f472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f478:	7d1b      	ldrb	r3, [r3, #20]
 800f47a:	2b09      	cmp	r3, #9
 800f47c:	d10b      	bne.n	800f496 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f47e:	4b59      	ldr	r3, [pc, #356]	; (800f5e4 <tcp_slowtmr+0x580>)
 800f480:	681a      	ldr	r2, [r3, #0]
 800f482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f484:	6a1b      	ldr	r3, [r3, #32]
 800f486:	1ad3      	subs	r3, r2, r3
 800f488:	2bf0      	cmp	r3, #240	; 0xf0
 800f48a:	d904      	bls.n	800f496 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800f48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f490:	3301      	adds	r3, #1
 800f492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d060      	beq.n	800f560 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4a4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f4a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4a8:	f000 fccc 	bl	800fe44 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d010      	beq.n	800f4d4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f4b2:	4b50      	ldr	r3, [pc, #320]	; (800f5f4 <tcp_slowtmr+0x590>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d106      	bne.n	800f4ca <tcp_slowtmr+0x466>
 800f4bc:	4b4e      	ldr	r3, [pc, #312]	; (800f5f8 <tcp_slowtmr+0x594>)
 800f4be:	f240 526d 	movw	r2, #1389	; 0x56d
 800f4c2:	494e      	ldr	r1, [pc, #312]	; (800f5fc <tcp_slowtmr+0x598>)
 800f4c4:	484e      	ldr	r0, [pc, #312]	; (800f600 <tcp_slowtmr+0x59c>)
 800f4c6:	f00a fa8b 	bl	80199e0 <iprintf>
        prev->next = pcb->next;
 800f4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4cc:	68da      	ldr	r2, [r3, #12]
 800f4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d0:	60da      	str	r2, [r3, #12]
 800f4d2:	e00f      	b.n	800f4f4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f4d4:	4b47      	ldr	r3, [pc, #284]	; (800f5f4 <tcp_slowtmr+0x590>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d006      	beq.n	800f4ec <tcp_slowtmr+0x488>
 800f4de:	4b46      	ldr	r3, [pc, #280]	; (800f5f8 <tcp_slowtmr+0x594>)
 800f4e0:	f240 5271 	movw	r2, #1393	; 0x571
 800f4e4:	4947      	ldr	r1, [pc, #284]	; (800f604 <tcp_slowtmr+0x5a0>)
 800f4e6:	4846      	ldr	r0, [pc, #280]	; (800f600 <tcp_slowtmr+0x59c>)
 800f4e8:	f00a fa7a 	bl	80199e0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ee:	68db      	ldr	r3, [r3, #12]
 800f4f0:	4a40      	ldr	r2, [pc, #256]	; (800f5f4 <tcp_slowtmr+0x590>)
 800f4f2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f4f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d013      	beq.n	800f524 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4fe:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f502:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f504:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f508:	3304      	adds	r3, #4
 800f50a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f50c:	8ad2      	ldrh	r2, [r2, #22]
 800f50e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f510:	8b09      	ldrh	r1, [r1, #24]
 800f512:	9102      	str	r1, [sp, #8]
 800f514:	9201      	str	r2, [sp, #4]
 800f516:	9300      	str	r3, [sp, #0]
 800f518:	462b      	mov	r3, r5
 800f51a:	4622      	mov	r2, r4
 800f51c:	4601      	mov	r1, r0
 800f51e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f520:	f004 feb0 	bl	8014284 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f526:	691b      	ldr	r3, [r3, #16]
 800f528:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f52c:	7d1b      	ldrb	r3, [r3, #20]
 800f52e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f532:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f536:	68db      	ldr	r3, [r3, #12]
 800f538:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f53a:	6838      	ldr	r0, [r7, #0]
 800f53c:	f7ff f83a 	bl	800e5b4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f540:	4b31      	ldr	r3, [pc, #196]	; (800f608 <tcp_slowtmr+0x5a4>)
 800f542:	2200      	movs	r2, #0
 800f544:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d004      	beq.n	800f556 <tcp_slowtmr+0x4f2>
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	f06f 010c 	mvn.w	r1, #12
 800f552:	68b8      	ldr	r0, [r7, #8]
 800f554:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f556:	4b2c      	ldr	r3, [pc, #176]	; (800f608 <tcp_slowtmr+0x5a4>)
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d037      	beq.n	800f5ce <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800f55e:	e592      	b.n	800f086 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f562:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f566:	68db      	ldr	r3, [r3, #12]
 800f568:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56c:	7f1b      	ldrb	r3, [r3, #28]
 800f56e:	3301      	adds	r3, #1
 800f570:	b2da      	uxtb	r2, r3
 800f572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f574:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f578:	7f1a      	ldrb	r2, [r3, #28]
 800f57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57c:	7f5b      	ldrb	r3, [r3, #29]
 800f57e:	429a      	cmp	r2, r3
 800f580:	d325      	bcc.n	800f5ce <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800f582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f584:	2200      	movs	r2, #0
 800f586:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f588:	4b1f      	ldr	r3, [pc, #124]	; (800f608 <tcp_slowtmr+0x5a4>)
 800f58a:	2200      	movs	r2, #0
 800f58c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f594:	2b00      	cmp	r3, #0
 800f596:	d00b      	beq.n	800f5b0 <tcp_slowtmr+0x54c>
 800f598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f59a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f59e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5a0:	6912      	ldr	r2, [r2, #16]
 800f5a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f5a4:	4610      	mov	r0, r2
 800f5a6:	4798      	blx	r3
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f5ae:	e002      	b.n	800f5b6 <tcp_slowtmr+0x552>
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f5b6:	4b14      	ldr	r3, [pc, #80]	; (800f608 <tcp_slowtmr+0x5a4>)
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d000      	beq.n	800f5c0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800f5be:	e562      	b.n	800f086 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f5c0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d102      	bne.n	800f5ce <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800f5c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5ca:	f004 f8a7 	bl	801371c <tcp_output>
  while (pcb != NULL) {
 800f5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	f47f ad5e 	bne.w	800f092 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f5da:	4b0c      	ldr	r3, [pc, #48]	; (800f60c <tcp_slowtmr+0x5a8>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f5e0:	e069      	b.n	800f6b6 <tcp_slowtmr+0x652>
 800f5e2:	bf00      	nop
 800f5e4:	200112a0 	.word	0x200112a0
 800f5e8:	000a4cb8 	.word	0x000a4cb8
 800f5ec:	10624dd3 	.word	0x10624dd3
 800f5f0:	000124f8 	.word	0x000124f8
 800f5f4:	200112ac 	.word	0x200112ac
 800f5f8:	0801c210 	.word	0x0801c210
 800f5fc:	0801c648 	.word	0x0801c648
 800f600:	0801c254 	.word	0x0801c254
 800f604:	0801c674 	.word	0x0801c674
 800f608:	200112b4 	.word	0x200112b4
 800f60c:	200112b0 	.word	0x200112b0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f612:	7d1b      	ldrb	r3, [r3, #20]
 800f614:	2b0a      	cmp	r3, #10
 800f616:	d006      	beq.n	800f626 <tcp_slowtmr+0x5c2>
 800f618:	4b2b      	ldr	r3, [pc, #172]	; (800f6c8 <tcp_slowtmr+0x664>)
 800f61a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f61e:	492b      	ldr	r1, [pc, #172]	; (800f6cc <tcp_slowtmr+0x668>)
 800f620:	482b      	ldr	r0, [pc, #172]	; (800f6d0 <tcp_slowtmr+0x66c>)
 800f622:	f00a f9dd 	bl	80199e0 <iprintf>
    pcb_remove = 0;
 800f626:	2300      	movs	r3, #0
 800f628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f62c:	4b29      	ldr	r3, [pc, #164]	; (800f6d4 <tcp_slowtmr+0x670>)
 800f62e:	681a      	ldr	r2, [r3, #0]
 800f630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f632:	6a1b      	ldr	r3, [r3, #32]
 800f634:	1ad3      	subs	r3, r2, r3
 800f636:	2bf0      	cmp	r3, #240	; 0xf0
 800f638:	d904      	bls.n	800f644 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f63a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f63e:	3301      	adds	r3, #1
 800f640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d02f      	beq.n	800f6ac <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f64c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f64e:	f000 fbf9 	bl	800fe44 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f654:	2b00      	cmp	r3, #0
 800f656:	d010      	beq.n	800f67a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f658:	4b1f      	ldr	r3, [pc, #124]	; (800f6d8 <tcp_slowtmr+0x674>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f65e:	429a      	cmp	r2, r3
 800f660:	d106      	bne.n	800f670 <tcp_slowtmr+0x60c>
 800f662:	4b19      	ldr	r3, [pc, #100]	; (800f6c8 <tcp_slowtmr+0x664>)
 800f664:	f240 52af 	movw	r2, #1455	; 0x5af
 800f668:	491c      	ldr	r1, [pc, #112]	; (800f6dc <tcp_slowtmr+0x678>)
 800f66a:	4819      	ldr	r0, [pc, #100]	; (800f6d0 <tcp_slowtmr+0x66c>)
 800f66c:	f00a f9b8 	bl	80199e0 <iprintf>
        prev->next = pcb->next;
 800f670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f672:	68da      	ldr	r2, [r3, #12]
 800f674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f676:	60da      	str	r2, [r3, #12]
 800f678:	e00f      	b.n	800f69a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f67a:	4b17      	ldr	r3, [pc, #92]	; (800f6d8 <tcp_slowtmr+0x674>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f680:	429a      	cmp	r2, r3
 800f682:	d006      	beq.n	800f692 <tcp_slowtmr+0x62e>
 800f684:	4b10      	ldr	r3, [pc, #64]	; (800f6c8 <tcp_slowtmr+0x664>)
 800f686:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f68a:	4915      	ldr	r1, [pc, #84]	; (800f6e0 <tcp_slowtmr+0x67c>)
 800f68c:	4810      	ldr	r0, [pc, #64]	; (800f6d0 <tcp_slowtmr+0x66c>)
 800f68e:	f00a f9a7 	bl	80199e0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f694:	68db      	ldr	r3, [r3, #12]
 800f696:	4a10      	ldr	r2, [pc, #64]	; (800f6d8 <tcp_slowtmr+0x674>)
 800f698:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f69c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f6a4:	69f8      	ldr	r0, [r7, #28]
 800f6a6:	f7fe ff85 	bl	800e5b4 <tcp_free>
 800f6aa:	e004      	b.n	800f6b6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b2:	68db      	ldr	r3, [r3, #12]
 800f6b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d1a9      	bne.n	800f610 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f6bc:	bf00      	nop
 800f6be:	bf00      	nop
 800f6c0:	3730      	adds	r7, #48	; 0x30
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bdb0      	pop	{r4, r5, r7, pc}
 800f6c6:	bf00      	nop
 800f6c8:	0801c210 	.word	0x0801c210
 800f6cc:	0801c6a0 	.word	0x0801c6a0
 800f6d0:	0801c254 	.word	0x0801c254
 800f6d4:	200112a0 	.word	0x200112a0
 800f6d8:	200112b0 	.word	0x200112b0
 800f6dc:	0801c6d0 	.word	0x0801c6d0
 800f6e0:	0801c6f8 	.word	0x0801c6f8

0800f6e4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f6ea:	4b2d      	ldr	r3, [pc, #180]	; (800f7a0 <tcp_fasttmr+0xbc>)
 800f6ec:	781b      	ldrb	r3, [r3, #0]
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	b2da      	uxtb	r2, r3
 800f6f2:	4b2b      	ldr	r3, [pc, #172]	; (800f7a0 <tcp_fasttmr+0xbc>)
 800f6f4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f6f6:	4b2b      	ldr	r3, [pc, #172]	; (800f7a4 <tcp_fasttmr+0xc0>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f6fc:	e048      	b.n	800f790 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	7f9a      	ldrb	r2, [r3, #30]
 800f702:	4b27      	ldr	r3, [pc, #156]	; (800f7a0 <tcp_fasttmr+0xbc>)
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	429a      	cmp	r2, r3
 800f708:	d03f      	beq.n	800f78a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f70a:	4b25      	ldr	r3, [pc, #148]	; (800f7a0 <tcp_fasttmr+0xbc>)
 800f70c:	781a      	ldrb	r2, [r3, #0]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	8b5b      	ldrh	r3, [r3, #26]
 800f716:	f003 0301 	and.w	r3, r3, #1
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d010      	beq.n	800f740 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	8b5b      	ldrh	r3, [r3, #26]
 800f722:	f043 0302 	orr.w	r3, r3, #2
 800f726:	b29a      	uxth	r2, r3
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f003 fff5 	bl	801371c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	8b5b      	ldrh	r3, [r3, #26]
 800f736:	f023 0303 	bic.w	r3, r3, #3
 800f73a:	b29a      	uxth	r2, r3
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	8b5b      	ldrh	r3, [r3, #26]
 800f744:	f003 0308 	and.w	r3, r3, #8
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d009      	beq.n	800f760 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	8b5b      	ldrh	r3, [r3, #26]
 800f750:	f023 0308 	bic.w	r3, r3, #8
 800f754:	b29a      	uxth	r2, r3
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f7ff f8be 	bl	800e8dc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	68db      	ldr	r3, [r3, #12]
 800f764:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d00a      	beq.n	800f784 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f76e:	4b0e      	ldr	r3, [pc, #56]	; (800f7a8 <tcp_fasttmr+0xc4>)
 800f770:	2200      	movs	r2, #0
 800f772:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f000 f819 	bl	800f7ac <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f77a:	4b0b      	ldr	r3, [pc, #44]	; (800f7a8 <tcp_fasttmr+0xc4>)
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d000      	beq.n	800f784 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f782:	e7b8      	b.n	800f6f6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	607b      	str	r3, [r7, #4]
 800f788:	e002      	b.n	800f790 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	68db      	ldr	r3, [r3, #12]
 800f78e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d1b3      	bne.n	800f6fe <tcp_fasttmr+0x1a>
    }
  }
}
 800f796:	bf00      	nop
 800f798:	bf00      	nop
 800f79a:	3708      	adds	r7, #8
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}
 800f7a0:	200112b6 	.word	0x200112b6
 800f7a4:	200112ac 	.word	0x200112ac
 800f7a8:	200112b4 	.word	0x200112b4

0800f7ac <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f7ac:	b590      	push	{r4, r7, lr}
 800f7ae:	b085      	sub	sp, #20
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d109      	bne.n	800f7ce <tcp_process_refused_data+0x22>
 800f7ba:	4b37      	ldr	r3, [pc, #220]	; (800f898 <tcp_process_refused_data+0xec>)
 800f7bc:	f240 6209 	movw	r2, #1545	; 0x609
 800f7c0:	4936      	ldr	r1, [pc, #216]	; (800f89c <tcp_process_refused_data+0xf0>)
 800f7c2:	4837      	ldr	r0, [pc, #220]	; (800f8a0 <tcp_process_refused_data+0xf4>)
 800f7c4:	f00a f90c 	bl	80199e0 <iprintf>
 800f7c8:	f06f 030f 	mvn.w	r3, #15
 800f7cc:	e060      	b.n	800f890 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7d2:	7b5b      	ldrb	r3, [r3, #13]
 800f7d4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7da:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2200      	movs	r2, #0
 800f7e0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d00b      	beq.n	800f804 <tcp_process_refused_data+0x58>
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6918      	ldr	r0, [r3, #16]
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	68ba      	ldr	r2, [r7, #8]
 800f7fa:	6879      	ldr	r1, [r7, #4]
 800f7fc:	47a0      	blx	r4
 800f7fe:	4603      	mov	r3, r0
 800f800:	73fb      	strb	r3, [r7, #15]
 800f802:	e007      	b.n	800f814 <tcp_process_refused_data+0x68>
 800f804:	2300      	movs	r3, #0
 800f806:	68ba      	ldr	r2, [r7, #8]
 800f808:	6879      	ldr	r1, [r7, #4]
 800f80a:	2000      	movs	r0, #0
 800f80c:	f000 f8a4 	bl	800f958 <tcp_recv_null>
 800f810:	4603      	mov	r3, r0
 800f812:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d12a      	bne.n	800f872 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f81c:	7bbb      	ldrb	r3, [r7, #14]
 800f81e:	f003 0320 	and.w	r3, r3, #32
 800f822:	2b00      	cmp	r3, #0
 800f824:	d033      	beq.n	800f88e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f82a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f82e:	d005      	beq.n	800f83c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f834:	3301      	adds	r3, #1
 800f836:	b29a      	uxth	r2, r3
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f842:	2b00      	cmp	r3, #0
 800f844:	d00b      	beq.n	800f85e <tcp_process_refused_data+0xb2>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6918      	ldr	r0, [r3, #16]
 800f850:	2300      	movs	r3, #0
 800f852:	2200      	movs	r2, #0
 800f854:	6879      	ldr	r1, [r7, #4]
 800f856:	47a0      	blx	r4
 800f858:	4603      	mov	r3, r0
 800f85a:	73fb      	strb	r3, [r7, #15]
 800f85c:	e001      	b.n	800f862 <tcp_process_refused_data+0xb6>
 800f85e:	2300      	movs	r3, #0
 800f860:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f866:	f113 0f0d 	cmn.w	r3, #13
 800f86a:	d110      	bne.n	800f88e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f86c:	f06f 030c 	mvn.w	r3, #12
 800f870:	e00e      	b.n	800f890 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f876:	f113 0f0d 	cmn.w	r3, #13
 800f87a:	d102      	bne.n	800f882 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f87c:	f06f 030c 	mvn.w	r3, #12
 800f880:	e006      	b.n	800f890 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	68ba      	ldr	r2, [r7, #8]
 800f886:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f888:	f06f 0304 	mvn.w	r3, #4
 800f88c:	e000      	b.n	800f890 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f88e:	2300      	movs	r3, #0
}
 800f890:	4618      	mov	r0, r3
 800f892:	3714      	adds	r7, #20
 800f894:	46bd      	mov	sp, r7
 800f896:	bd90      	pop	{r4, r7, pc}
 800f898:	0801c210 	.word	0x0801c210
 800f89c:	0801c720 	.word	0x0801c720
 800f8a0:	0801c254 	.word	0x0801c254

0800f8a4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b084      	sub	sp, #16
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f8ac:	e007      	b.n	800f8be <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f000 f80a 	bl	800f8ce <tcp_seg_free>
    seg = next;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d1f4      	bne.n	800f8ae <tcp_segs_free+0xa>
  }
}
 800f8c4:	bf00      	nop
 800f8c6:	bf00      	nop
 800f8c8:	3710      	adds	r7, #16
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}

0800f8ce <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f8ce:	b580      	push	{r7, lr}
 800f8d0:	b082      	sub	sp, #8
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d00c      	beq.n	800f8f6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	685b      	ldr	r3, [r3, #4]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d004      	beq.n	800f8ee <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7fe fbb7 	bl	800e05c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f8ee:	6879      	ldr	r1, [r7, #4]
 800f8f0:	2003      	movs	r0, #3
 800f8f2:	f7fd fd0f 	bl	800d314 <memp_free>
  }
}
 800f8f6:	bf00      	nop
 800f8f8:	3708      	adds	r7, #8
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
	...

0800f900 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b084      	sub	sp, #16
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d106      	bne.n	800f91c <tcp_seg_copy+0x1c>
 800f90e:	4b0f      	ldr	r3, [pc, #60]	; (800f94c <tcp_seg_copy+0x4c>)
 800f910:	f240 6282 	movw	r2, #1666	; 0x682
 800f914:	490e      	ldr	r1, [pc, #56]	; (800f950 <tcp_seg_copy+0x50>)
 800f916:	480f      	ldr	r0, [pc, #60]	; (800f954 <tcp_seg_copy+0x54>)
 800f918:	f00a f862 	bl	80199e0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f91c:	2003      	movs	r0, #3
 800f91e:	f7fd fc83 	bl	800d228 <memp_malloc>
 800f922:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d101      	bne.n	800f92e <tcp_seg_copy+0x2e>
    return NULL;
 800f92a:	2300      	movs	r3, #0
 800f92c:	e00a      	b.n	800f944 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f92e:	2210      	movs	r2, #16
 800f930:	6879      	ldr	r1, [r7, #4]
 800f932:	68f8      	ldr	r0, [r7, #12]
 800f934:	f00a f83e 	bl	80199b4 <memcpy>
  pbuf_ref(cseg->p);
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	4618      	mov	r0, r3
 800f93e:	f7fe fc33 	bl	800e1a8 <pbuf_ref>
  return cseg;
 800f942:	68fb      	ldr	r3, [r7, #12]
}
 800f944:	4618      	mov	r0, r3
 800f946:	3710      	adds	r7, #16
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	0801c210 	.word	0x0801c210
 800f950:	0801c764 	.word	0x0801c764
 800f954:	0801c254 	.word	0x0801c254

0800f958 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b084      	sub	sp, #16
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	60f8      	str	r0, [r7, #12]
 800f960:	60b9      	str	r1, [r7, #8]
 800f962:	607a      	str	r2, [r7, #4]
 800f964:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d109      	bne.n	800f980 <tcp_recv_null+0x28>
 800f96c:	4b12      	ldr	r3, [pc, #72]	; (800f9b8 <tcp_recv_null+0x60>)
 800f96e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f972:	4912      	ldr	r1, [pc, #72]	; (800f9bc <tcp_recv_null+0x64>)
 800f974:	4812      	ldr	r0, [pc, #72]	; (800f9c0 <tcp_recv_null+0x68>)
 800f976:	f00a f833 	bl	80199e0 <iprintf>
 800f97a:	f06f 030f 	mvn.w	r3, #15
 800f97e:	e016      	b.n	800f9ae <tcp_recv_null+0x56>

  if (p != NULL) {
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d009      	beq.n	800f99a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	891b      	ldrh	r3, [r3, #8]
 800f98a:	4619      	mov	r1, r3
 800f98c:	68b8      	ldr	r0, [r7, #8]
 800f98e:	f7ff f9bb 	bl	800ed08 <tcp_recved>
    pbuf_free(p);
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f7fe fb62 	bl	800e05c <pbuf_free>
 800f998:	e008      	b.n	800f9ac <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f99a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d104      	bne.n	800f9ac <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f9a2:	68b8      	ldr	r0, [r7, #8]
 800f9a4:	f7ff f804 	bl	800e9b0 <tcp_close>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	e000      	b.n	800f9ae <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f9ac:	2300      	movs	r3, #0
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3710      	adds	r7, #16
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	0801c210 	.word	0x0801c210
 800f9bc:	0801c780 	.word	0x0801c780
 800f9c0:	0801c254 	.word	0x0801c254

0800f9c4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b086      	sub	sp, #24
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f9ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	db01      	blt.n	800f9da <tcp_kill_prio+0x16>
 800f9d6:	79fb      	ldrb	r3, [r7, #7]
 800f9d8:	e000      	b.n	800f9dc <tcp_kill_prio+0x18>
 800f9da:	237f      	movs	r3, #127	; 0x7f
 800f9dc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f9de:	7afb      	ldrb	r3, [r7, #11]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d034      	beq.n	800fa4e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f9e4:	7afb      	ldrb	r3, [r7, #11]
 800f9e6:	3b01      	subs	r3, #1
 800f9e8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9f2:	4b19      	ldr	r3, [pc, #100]	; (800fa58 <tcp_kill_prio+0x94>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	617b      	str	r3, [r7, #20]
 800f9f8:	e01f      	b.n	800fa3a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	7d5b      	ldrb	r3, [r3, #21]
 800f9fe:	7afa      	ldrb	r2, [r7, #11]
 800fa00:	429a      	cmp	r2, r3
 800fa02:	d80c      	bhi.n	800fa1e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800fa08:	7afa      	ldrb	r2, [r7, #11]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d112      	bne.n	800fa34 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fa0e:	4b13      	ldr	r3, [pc, #76]	; (800fa5c <tcp_kill_prio+0x98>)
 800fa10:	681a      	ldr	r2, [r3, #0]
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	6a1b      	ldr	r3, [r3, #32]
 800fa16:	1ad3      	subs	r3, r2, r3
 800fa18:	68fa      	ldr	r2, [r7, #12]
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d80a      	bhi.n	800fa34 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800fa1e:	4b0f      	ldr	r3, [pc, #60]	; (800fa5c <tcp_kill_prio+0x98>)
 800fa20:	681a      	ldr	r2, [r3, #0]
 800fa22:	697b      	ldr	r3, [r7, #20]
 800fa24:	6a1b      	ldr	r3, [r3, #32]
 800fa26:	1ad3      	subs	r3, r2, r3
 800fa28:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	7d5b      	ldrb	r3, [r3, #21]
 800fa32:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	68db      	ldr	r3, [r3, #12]
 800fa38:	617b      	str	r3, [r7, #20]
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d1dc      	bne.n	800f9fa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d004      	beq.n	800fa50 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fa46:	6938      	ldr	r0, [r7, #16]
 800fa48:	f7ff f8f8 	bl	800ec3c <tcp_abort>
 800fa4c:	e000      	b.n	800fa50 <tcp_kill_prio+0x8c>
    return;
 800fa4e:	bf00      	nop
  }
}
 800fa50:	3718      	adds	r7, #24
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}
 800fa56:	bf00      	nop
 800fa58:	200112ac 	.word	0x200112ac
 800fa5c:	200112a0 	.word	0x200112a0

0800fa60 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b086      	sub	sp, #24
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	4603      	mov	r3, r0
 800fa68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800fa6a:	79fb      	ldrb	r3, [r7, #7]
 800fa6c:	2b08      	cmp	r3, #8
 800fa6e:	d009      	beq.n	800fa84 <tcp_kill_state+0x24>
 800fa70:	79fb      	ldrb	r3, [r7, #7]
 800fa72:	2b09      	cmp	r3, #9
 800fa74:	d006      	beq.n	800fa84 <tcp_kill_state+0x24>
 800fa76:	4b1a      	ldr	r3, [pc, #104]	; (800fae0 <tcp_kill_state+0x80>)
 800fa78:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800fa7c:	4919      	ldr	r1, [pc, #100]	; (800fae4 <tcp_kill_state+0x84>)
 800fa7e:	481a      	ldr	r0, [pc, #104]	; (800fae8 <tcp_kill_state+0x88>)
 800fa80:	f009 ffae 	bl	80199e0 <iprintf>

  inactivity = 0;
 800fa84:	2300      	movs	r3, #0
 800fa86:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa8c:	4b17      	ldr	r3, [pc, #92]	; (800faec <tcp_kill_state+0x8c>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	617b      	str	r3, [r7, #20]
 800fa92:	e017      	b.n	800fac4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	7d1b      	ldrb	r3, [r3, #20]
 800fa98:	79fa      	ldrb	r2, [r7, #7]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d10f      	bne.n	800fabe <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fa9e:	4b14      	ldr	r3, [pc, #80]	; (800faf0 <tcp_kill_state+0x90>)
 800faa0:	681a      	ldr	r2, [r3, #0]
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	6a1b      	ldr	r3, [r3, #32]
 800faa6:	1ad3      	subs	r3, r2, r3
 800faa8:	68fa      	ldr	r2, [r7, #12]
 800faaa:	429a      	cmp	r2, r3
 800faac:	d807      	bhi.n	800fabe <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800faae:	4b10      	ldr	r3, [pc, #64]	; (800faf0 <tcp_kill_state+0x90>)
 800fab0:	681a      	ldr	r2, [r3, #0]
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	6a1b      	ldr	r3, [r3, #32]
 800fab6:	1ad3      	subs	r3, r2, r3
 800fab8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	68db      	ldr	r3, [r3, #12]
 800fac2:	617b      	str	r3, [r7, #20]
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d1e4      	bne.n	800fa94 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800faca:	693b      	ldr	r3, [r7, #16]
 800facc:	2b00      	cmp	r3, #0
 800face:	d003      	beq.n	800fad8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800fad0:	2100      	movs	r1, #0
 800fad2:	6938      	ldr	r0, [r7, #16]
 800fad4:	f7fe fff4 	bl	800eac0 <tcp_abandon>
  }
}
 800fad8:	bf00      	nop
 800fada:	3718      	adds	r7, #24
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}
 800fae0:	0801c210 	.word	0x0801c210
 800fae4:	0801c79c 	.word	0x0801c79c
 800fae8:	0801c254 	.word	0x0801c254
 800faec:	200112ac 	.word	0x200112ac
 800faf0:	200112a0 	.word	0x200112a0

0800faf4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800fafa:	2300      	movs	r3, #0
 800fafc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800fafe:	2300      	movs	r3, #0
 800fb00:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb02:	4b12      	ldr	r3, [pc, #72]	; (800fb4c <tcp_kill_timewait+0x58>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	60fb      	str	r3, [r7, #12]
 800fb08:	e012      	b.n	800fb30 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fb0a:	4b11      	ldr	r3, [pc, #68]	; (800fb50 <tcp_kill_timewait+0x5c>)
 800fb0c:	681a      	ldr	r2, [r3, #0]
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	6a1b      	ldr	r3, [r3, #32]
 800fb12:	1ad3      	subs	r3, r2, r3
 800fb14:	687a      	ldr	r2, [r7, #4]
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d807      	bhi.n	800fb2a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800fb1a:	4b0d      	ldr	r3, [pc, #52]	; (800fb50 <tcp_kill_timewait+0x5c>)
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	6a1b      	ldr	r3, [r3, #32]
 800fb22:	1ad3      	subs	r3, r2, r3
 800fb24:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	68db      	ldr	r3, [r3, #12]
 800fb2e:	60fb      	str	r3, [r7, #12]
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d1e9      	bne.n	800fb0a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d002      	beq.n	800fb42 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fb3c:	68b8      	ldr	r0, [r7, #8]
 800fb3e:	f7ff f87d 	bl	800ec3c <tcp_abort>
  }
}
 800fb42:	bf00      	nop
 800fb44:	3710      	adds	r7, #16
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	200112b0 	.word	0x200112b0
 800fb50:	200112a0 	.word	0x200112a0

0800fb54 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800fb5a:	4b10      	ldr	r3, [pc, #64]	; (800fb9c <tcp_handle_closepend+0x48>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fb60:	e014      	b.n	800fb8c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	68db      	ldr	r3, [r3, #12]
 800fb66:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	8b5b      	ldrh	r3, [r3, #26]
 800fb6c:	f003 0308 	and.w	r3, r3, #8
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d009      	beq.n	800fb88 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	8b5b      	ldrh	r3, [r3, #26]
 800fb78:	f023 0308 	bic.w	r3, r3, #8
 800fb7c:	b29a      	uxth	r2, r3
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f7fe feaa 	bl	800e8dc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d1e7      	bne.n	800fb62 <tcp_handle_closepend+0xe>
  }
}
 800fb92:	bf00      	nop
 800fb94:	bf00      	nop
 800fb96:	3708      	adds	r7, #8
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}
 800fb9c:	200112ac 	.word	0x200112ac

0800fba0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b084      	sub	sp, #16
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	4603      	mov	r3, r0
 800fba8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fbaa:	2001      	movs	r0, #1
 800fbac:	f7fd fb3c 	bl	800d228 <memp_malloc>
 800fbb0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d126      	bne.n	800fc06 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fbb8:	f7ff ffcc 	bl	800fb54 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fbbc:	f7ff ff9a 	bl	800faf4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fbc0:	2001      	movs	r0, #1
 800fbc2:	f7fd fb31 	bl	800d228 <memp_malloc>
 800fbc6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d11b      	bne.n	800fc06 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fbce:	2009      	movs	r0, #9
 800fbd0:	f7ff ff46 	bl	800fa60 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fbd4:	2001      	movs	r0, #1
 800fbd6:	f7fd fb27 	bl	800d228 <memp_malloc>
 800fbda:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d111      	bne.n	800fc06 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fbe2:	2008      	movs	r0, #8
 800fbe4:	f7ff ff3c 	bl	800fa60 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fbe8:	2001      	movs	r0, #1
 800fbea:	f7fd fb1d 	bl	800d228 <memp_malloc>
 800fbee:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d107      	bne.n	800fc06 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fbf6:	79fb      	ldrb	r3, [r7, #7]
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f7ff fee3 	bl	800f9c4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fbfe:	2001      	movs	r0, #1
 800fc00:	f7fd fb12 	bl	800d228 <memp_malloc>
 800fc04:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d03f      	beq.n	800fc8c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fc0c:	229c      	movs	r2, #156	; 0x9c
 800fc0e:	2100      	movs	r1, #0
 800fc10:	68f8      	ldr	r0, [r7, #12]
 800fc12:	f009 fedd 	bl	80199d0 <memset>
    pcb->prio = prio;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	79fa      	ldrb	r2, [r7, #7]
 800fc1a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fc22:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fc2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	22ff      	movs	r2, #255	; 0xff
 800fc3a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fc42:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	2206      	movs	r2, #6
 800fc48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	2206      	movs	r2, #6
 800fc50:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc58:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	2201      	movs	r2, #1
 800fc5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800fc62:	4b0d      	ldr	r3, [pc, #52]	; (800fc98 <tcp_alloc+0xf8>)
 800fc64:	681a      	ldr	r2, [r3, #0]
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fc6a:	4b0c      	ldr	r3, [pc, #48]	; (800fc9c <tcp_alloc+0xfc>)
 800fc6c:	781a      	ldrb	r2, [r3, #0]
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fc78:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	4a08      	ldr	r2, [pc, #32]	; (800fca0 <tcp_alloc+0x100>)
 800fc80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	4a07      	ldr	r2, [pc, #28]	; (800fca4 <tcp_alloc+0x104>)
 800fc88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3710      	adds	r7, #16
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}
 800fc96:	bf00      	nop
 800fc98:	200112a0 	.word	0x200112a0
 800fc9c:	200112b6 	.word	0x200112b6
 800fca0:	0800f959 	.word	0x0800f959
 800fca4:	006ddd00 	.word	0x006ddd00

0800fca8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	4603      	mov	r3, r0
 800fcb0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800fcb2:	2040      	movs	r0, #64	; 0x40
 800fcb4:	f7ff ff74 	bl	800fba0 <tcp_alloc>
 800fcb8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800fcba:	68fb      	ldr	r3, [r7, #12]
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3710      	adds	r7, #16
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d002      	beq.n	800fcda <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	683a      	ldr	r2, [r7, #0]
 800fcd8:	611a      	str	r2, [r3, #16]
  }
}
 800fcda:	bf00      	nop
 800fcdc:	370c      	adds	r7, #12
 800fcde:	46bd      	mov	sp, r7
 800fce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce4:	4770      	bx	lr
	...

0800fce8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b082      	sub	sp, #8
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d00e      	beq.n	800fd16 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	7d1b      	ldrb	r3, [r3, #20]
 800fcfc:	2b01      	cmp	r3, #1
 800fcfe:	d106      	bne.n	800fd0e <tcp_recv+0x26>
 800fd00:	4b07      	ldr	r3, [pc, #28]	; (800fd20 <tcp_recv+0x38>)
 800fd02:	f240 72df 	movw	r2, #2015	; 0x7df
 800fd06:	4907      	ldr	r1, [pc, #28]	; (800fd24 <tcp_recv+0x3c>)
 800fd08:	4807      	ldr	r0, [pc, #28]	; (800fd28 <tcp_recv+0x40>)
 800fd0a:	f009 fe69 	bl	80199e0 <iprintf>
    pcb->recv = recv;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	683a      	ldr	r2, [r7, #0]
 800fd12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800fd16:	bf00      	nop
 800fd18:	3708      	adds	r7, #8
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}
 800fd1e:	bf00      	nop
 800fd20:	0801c210 	.word	0x0801c210
 800fd24:	0801c7ac 	.word	0x0801c7ac
 800fd28:	0801c254 	.word	0x0801c254

0800fd2c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d00e      	beq.n	800fd5a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	7d1b      	ldrb	r3, [r3, #20]
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d106      	bne.n	800fd52 <tcp_sent+0x26>
 800fd44:	4b07      	ldr	r3, [pc, #28]	; (800fd64 <tcp_sent+0x38>)
 800fd46:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800fd4a:	4907      	ldr	r1, [pc, #28]	; (800fd68 <tcp_sent+0x3c>)
 800fd4c:	4807      	ldr	r0, [pc, #28]	; (800fd6c <tcp_sent+0x40>)
 800fd4e:	f009 fe47 	bl	80199e0 <iprintf>
    pcb->sent = sent;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	683a      	ldr	r2, [r7, #0]
 800fd56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800fd5a:	bf00      	nop
 800fd5c:	3708      	adds	r7, #8
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
 800fd62:	bf00      	nop
 800fd64:	0801c210 	.word	0x0801c210
 800fd68:	0801c7d4 	.word	0x0801c7d4
 800fd6c:	0801c254 	.word	0x0801c254

0800fd70 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b082      	sub	sp, #8
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d00e      	beq.n	800fd9e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	7d1b      	ldrb	r3, [r3, #20]
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d106      	bne.n	800fd96 <tcp_err+0x26>
 800fd88:	4b07      	ldr	r3, [pc, #28]	; (800fda8 <tcp_err+0x38>)
 800fd8a:	f640 020d 	movw	r2, #2061	; 0x80d
 800fd8e:	4907      	ldr	r1, [pc, #28]	; (800fdac <tcp_err+0x3c>)
 800fd90:	4807      	ldr	r0, [pc, #28]	; (800fdb0 <tcp_err+0x40>)
 800fd92:	f009 fe25 	bl	80199e0 <iprintf>
    pcb->errf = err;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	683a      	ldr	r2, [r7, #0]
 800fd9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800fd9e:	bf00      	nop
 800fda0:	3708      	adds	r7, #8
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	0801c210 	.word	0x0801c210
 800fdac:	0801c7fc 	.word	0x0801c7fc
 800fdb0:	0801c254 	.word	0x0801c254

0800fdb4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b085      	sub	sp, #20
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d008      	beq.n	800fdd6 <tcp_accept+0x22>
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	7d1b      	ldrb	r3, [r3, #20]
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d104      	bne.n	800fdd6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	683a      	ldr	r2, [r7, #0]
 800fdd4:	619a      	str	r2, [r3, #24]
  }
}
 800fdd6:	bf00      	nop
 800fdd8:	3714      	adds	r7, #20
 800fdda:	46bd      	mov	sp, r7
 800fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde0:	4770      	bx	lr
	...

0800fde4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b084      	sub	sp, #16
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	60f8      	str	r0, [r7, #12]
 800fdec:	60b9      	str	r1, [r7, #8]
 800fdee:	4613      	mov	r3, r2
 800fdf0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d107      	bne.n	800fe08 <tcp_poll+0x24>
 800fdf8:	4b0e      	ldr	r3, [pc, #56]	; (800fe34 <tcp_poll+0x50>)
 800fdfa:	f640 023d 	movw	r2, #2109	; 0x83d
 800fdfe:	490e      	ldr	r1, [pc, #56]	; (800fe38 <tcp_poll+0x54>)
 800fe00:	480e      	ldr	r0, [pc, #56]	; (800fe3c <tcp_poll+0x58>)
 800fe02:	f009 fded 	bl	80199e0 <iprintf>
 800fe06:	e011      	b.n	800fe2c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	7d1b      	ldrb	r3, [r3, #20]
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d106      	bne.n	800fe1e <tcp_poll+0x3a>
 800fe10:	4b08      	ldr	r3, [pc, #32]	; (800fe34 <tcp_poll+0x50>)
 800fe12:	f640 023e 	movw	r2, #2110	; 0x83e
 800fe16:	490a      	ldr	r1, [pc, #40]	; (800fe40 <tcp_poll+0x5c>)
 800fe18:	4808      	ldr	r0, [pc, #32]	; (800fe3c <tcp_poll+0x58>)
 800fe1a:	f009 fde1 	bl	80199e0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	68ba      	ldr	r2, [r7, #8]
 800fe22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	79fa      	ldrb	r2, [r7, #7]
 800fe2a:	775a      	strb	r2, [r3, #29]
}
 800fe2c:	3710      	adds	r7, #16
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}
 800fe32:	bf00      	nop
 800fe34:	0801c210 	.word	0x0801c210
 800fe38:	0801c824 	.word	0x0801c824
 800fe3c:	0801c254 	.word	0x0801c254
 800fe40:	0801c83c 	.word	0x0801c83c

0800fe44 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b082      	sub	sp, #8
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d107      	bne.n	800fe62 <tcp_pcb_purge+0x1e>
 800fe52:	4b21      	ldr	r3, [pc, #132]	; (800fed8 <tcp_pcb_purge+0x94>)
 800fe54:	f640 0251 	movw	r2, #2129	; 0x851
 800fe58:	4920      	ldr	r1, [pc, #128]	; (800fedc <tcp_pcb_purge+0x98>)
 800fe5a:	4821      	ldr	r0, [pc, #132]	; (800fee0 <tcp_pcb_purge+0x9c>)
 800fe5c:	f009 fdc0 	bl	80199e0 <iprintf>
 800fe60:	e037      	b.n	800fed2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	7d1b      	ldrb	r3, [r3, #20]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d033      	beq.n	800fed2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fe6e:	2b0a      	cmp	r3, #10
 800fe70:	d02f      	beq.n	800fed2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fe76:	2b01      	cmp	r3, #1
 800fe78:	d02b      	beq.n	800fed2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d007      	beq.n	800fe92 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7fe f8e8 	bl	800e05c <pbuf_free>
      pcb->refused_data = NULL;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d002      	beq.n	800fea0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f000 f986 	bl	80101ac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fea6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800feac:	4618      	mov	r0, r3
 800feae:	f7ff fcf9 	bl	800f8a4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7ff fcf4 	bl	800f8a4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2200      	movs	r2, #0
 800fec0:	66da      	str	r2, [r3, #108]	; 0x6c
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2200      	movs	r2, #0
 800fece:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fed2:	3708      	adds	r7, #8
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}
 800fed8:	0801c210 	.word	0x0801c210
 800fedc:	0801c85c 	.word	0x0801c85c
 800fee0:	0801c254 	.word	0x0801c254

0800fee4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b084      	sub	sp, #16
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d106      	bne.n	800ff02 <tcp_pcb_remove+0x1e>
 800fef4:	4b3e      	ldr	r3, [pc, #248]	; (800fff0 <tcp_pcb_remove+0x10c>)
 800fef6:	f640 0283 	movw	r2, #2179	; 0x883
 800fefa:	493e      	ldr	r1, [pc, #248]	; (800fff4 <tcp_pcb_remove+0x110>)
 800fefc:	483e      	ldr	r0, [pc, #248]	; (800fff8 <tcp_pcb_remove+0x114>)
 800fefe:	f009 fd6f 	bl	80199e0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d106      	bne.n	800ff16 <tcp_pcb_remove+0x32>
 800ff08:	4b39      	ldr	r3, [pc, #228]	; (800fff0 <tcp_pcb_remove+0x10c>)
 800ff0a:	f640 0284 	movw	r2, #2180	; 0x884
 800ff0e:	493b      	ldr	r1, [pc, #236]	; (800fffc <tcp_pcb_remove+0x118>)
 800ff10:	4839      	ldr	r0, [pc, #228]	; (800fff8 <tcp_pcb_remove+0x114>)
 800ff12:	f009 fd65 	bl	80199e0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	683a      	ldr	r2, [r7, #0]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d105      	bne.n	800ff2c <tcp_pcb_remove+0x48>
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	68da      	ldr	r2, [r3, #12]
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	601a      	str	r2, [r3, #0]
 800ff2a:	e013      	b.n	800ff54 <tcp_pcb_remove+0x70>
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	60fb      	str	r3, [r7, #12]
 800ff32:	e00c      	b.n	800ff4e <tcp_pcb_remove+0x6a>
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	68db      	ldr	r3, [r3, #12]
 800ff38:	683a      	ldr	r2, [r7, #0]
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d104      	bne.n	800ff48 <tcp_pcb_remove+0x64>
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	68da      	ldr	r2, [r3, #12]
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	60da      	str	r2, [r3, #12]
 800ff46:	e005      	b.n	800ff54 <tcp_pcb_remove+0x70>
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	68db      	ldr	r3, [r3, #12]
 800ff4c:	60fb      	str	r3, [r7, #12]
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d1ef      	bne.n	800ff34 <tcp_pcb_remove+0x50>
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	2200      	movs	r2, #0
 800ff58:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ff5a:	6838      	ldr	r0, [r7, #0]
 800ff5c:	f7ff ff72 	bl	800fe44 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	7d1b      	ldrb	r3, [r3, #20]
 800ff64:	2b0a      	cmp	r3, #10
 800ff66:	d013      	beq.n	800ff90 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d00f      	beq.n	800ff90 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	8b5b      	ldrh	r3, [r3, #26]
 800ff74:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d009      	beq.n	800ff90 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	8b5b      	ldrh	r3, [r3, #26]
 800ff80:	f043 0302 	orr.w	r3, r3, #2
 800ff84:	b29a      	uxth	r2, r3
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ff8a:	6838      	ldr	r0, [r7, #0]
 800ff8c:	f003 fbc6 	bl	801371c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	7d1b      	ldrb	r3, [r3, #20]
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d020      	beq.n	800ffda <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d006      	beq.n	800ffae <tcp_pcb_remove+0xca>
 800ffa0:	4b13      	ldr	r3, [pc, #76]	; (800fff0 <tcp_pcb_remove+0x10c>)
 800ffa2:	f640 0293 	movw	r2, #2195	; 0x893
 800ffa6:	4916      	ldr	r1, [pc, #88]	; (8010000 <tcp_pcb_remove+0x11c>)
 800ffa8:	4813      	ldr	r0, [pc, #76]	; (800fff8 <tcp_pcb_remove+0x114>)
 800ffaa:	f009 fd19 	bl	80199e0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d006      	beq.n	800ffc4 <tcp_pcb_remove+0xe0>
 800ffb6:	4b0e      	ldr	r3, [pc, #56]	; (800fff0 <tcp_pcb_remove+0x10c>)
 800ffb8:	f640 0294 	movw	r2, #2196	; 0x894
 800ffbc:	4911      	ldr	r1, [pc, #68]	; (8010004 <tcp_pcb_remove+0x120>)
 800ffbe:	480e      	ldr	r0, [pc, #56]	; (800fff8 <tcp_pcb_remove+0x114>)
 800ffc0:	f009 fd0e 	bl	80199e0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d006      	beq.n	800ffda <tcp_pcb_remove+0xf6>
 800ffcc:	4b08      	ldr	r3, [pc, #32]	; (800fff0 <tcp_pcb_remove+0x10c>)
 800ffce:	f640 0296 	movw	r2, #2198	; 0x896
 800ffd2:	490d      	ldr	r1, [pc, #52]	; (8010008 <tcp_pcb_remove+0x124>)
 800ffd4:	4808      	ldr	r0, [pc, #32]	; (800fff8 <tcp_pcb_remove+0x114>)
 800ffd6:	f009 fd03 	bl	80199e0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ffe6:	bf00      	nop
 800ffe8:	3710      	adds	r7, #16
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	0801c210 	.word	0x0801c210
 800fff4:	0801c878 	.word	0x0801c878
 800fff8:	0801c254 	.word	0x0801c254
 800fffc:	0801c894 	.word	0x0801c894
 8010000:	0801c8b4 	.word	0x0801c8b4
 8010004:	0801c8cc 	.word	0x0801c8cc
 8010008:	0801c8e8 	.word	0x0801c8e8

0801000c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d106      	bne.n	8010028 <tcp_next_iss+0x1c>
 801001a:	4b0a      	ldr	r3, [pc, #40]	; (8010044 <tcp_next_iss+0x38>)
 801001c:	f640 02af 	movw	r2, #2223	; 0x8af
 8010020:	4909      	ldr	r1, [pc, #36]	; (8010048 <tcp_next_iss+0x3c>)
 8010022:	480a      	ldr	r0, [pc, #40]	; (801004c <tcp_next_iss+0x40>)
 8010024:	f009 fcdc 	bl	80199e0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010028:	4b09      	ldr	r3, [pc, #36]	; (8010050 <tcp_next_iss+0x44>)
 801002a:	681a      	ldr	r2, [r3, #0]
 801002c:	4b09      	ldr	r3, [pc, #36]	; (8010054 <tcp_next_iss+0x48>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	4413      	add	r3, r2
 8010032:	4a07      	ldr	r2, [pc, #28]	; (8010050 <tcp_next_iss+0x44>)
 8010034:	6013      	str	r3, [r2, #0]
  return iss;
 8010036:	4b06      	ldr	r3, [pc, #24]	; (8010050 <tcp_next_iss+0x44>)
 8010038:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801003a:	4618      	mov	r0, r3
 801003c:	3708      	adds	r7, #8
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop
 8010044:	0801c210 	.word	0x0801c210
 8010048:	0801c900 	.word	0x0801c900
 801004c:	0801c254 	.word	0x0801c254
 8010050:	2000002c 	.word	0x2000002c
 8010054:	200112a0 	.word	0x200112a0

08010058 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b086      	sub	sp, #24
 801005c:	af00      	add	r7, sp, #0
 801005e:	4603      	mov	r3, r0
 8010060:	60b9      	str	r1, [r7, #8]
 8010062:	607a      	str	r2, [r7, #4]
 8010064:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d106      	bne.n	801007a <tcp_eff_send_mss_netif+0x22>
 801006c:	4b14      	ldr	r3, [pc, #80]	; (80100c0 <tcp_eff_send_mss_netif+0x68>)
 801006e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010072:	4914      	ldr	r1, [pc, #80]	; (80100c4 <tcp_eff_send_mss_netif+0x6c>)
 8010074:	4814      	ldr	r0, [pc, #80]	; (80100c8 <tcp_eff_send_mss_netif+0x70>)
 8010076:	f009 fcb3 	bl	80199e0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d101      	bne.n	8010084 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010080:	89fb      	ldrh	r3, [r7, #14]
 8010082:	e019      	b.n	80100b8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010088:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801008a:	8afb      	ldrh	r3, [r7, #22]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d012      	beq.n	80100b6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010090:	2328      	movs	r3, #40	; 0x28
 8010092:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010094:	8afa      	ldrh	r2, [r7, #22]
 8010096:	8abb      	ldrh	r3, [r7, #20]
 8010098:	429a      	cmp	r2, r3
 801009a:	d904      	bls.n	80100a6 <tcp_eff_send_mss_netif+0x4e>
 801009c:	8afa      	ldrh	r2, [r7, #22]
 801009e:	8abb      	ldrh	r3, [r7, #20]
 80100a0:	1ad3      	subs	r3, r2, r3
 80100a2:	b29b      	uxth	r3, r3
 80100a4:	e000      	b.n	80100a8 <tcp_eff_send_mss_netif+0x50>
 80100a6:	2300      	movs	r3, #0
 80100a8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80100aa:	8a7a      	ldrh	r2, [r7, #18]
 80100ac:	89fb      	ldrh	r3, [r7, #14]
 80100ae:	4293      	cmp	r3, r2
 80100b0:	bf28      	it	cs
 80100b2:	4613      	movcs	r3, r2
 80100b4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80100b6:	89fb      	ldrh	r3, [r7, #14]
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3718      	adds	r7, #24
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}
 80100c0:	0801c210 	.word	0x0801c210
 80100c4:	0801c91c 	.word	0x0801c91c
 80100c8:	0801c254 	.word	0x0801c254

080100cc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b084      	sub	sp, #16
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
 80100d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d119      	bne.n	8010114 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80100e0:	4b10      	ldr	r3, [pc, #64]	; (8010124 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80100e2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80100e6:	4910      	ldr	r1, [pc, #64]	; (8010128 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80100e8:	4810      	ldr	r0, [pc, #64]	; (801012c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80100ea:	f009 fc79 	bl	80199e0 <iprintf>

  while (pcb != NULL) {
 80100ee:	e011      	b.n	8010114 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	681a      	ldr	r2, [r3, #0]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d108      	bne.n	801010e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	68db      	ldr	r3, [r3, #12]
 8010100:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010102:	68f8      	ldr	r0, [r7, #12]
 8010104:	f7fe fd9a 	bl	800ec3c <tcp_abort>
      pcb = next;
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	60fb      	str	r3, [r7, #12]
 801010c:	e002      	b.n	8010114 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	68db      	ldr	r3, [r3, #12]
 8010112:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d1ea      	bne.n	80100f0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801011a:	bf00      	nop
 801011c:	bf00      	nop
 801011e:	3710      	adds	r7, #16
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	0801c210 	.word	0x0801c210
 8010128:	0801c944 	.word	0x0801c944
 801012c:	0801c254 	.word	0x0801c254

08010130 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b084      	sub	sp, #16
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d02a      	beq.n	8010196 <tcp_netif_ip_addr_changed+0x66>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d026      	beq.n	8010196 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010148:	4b15      	ldr	r3, [pc, #84]	; (80101a0 <tcp_netif_ip_addr_changed+0x70>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	4619      	mov	r1, r3
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f7ff ffbc 	bl	80100cc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010154:	4b13      	ldr	r3, [pc, #76]	; (80101a4 <tcp_netif_ip_addr_changed+0x74>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	4619      	mov	r1, r3
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f7ff ffb6 	bl	80100cc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d017      	beq.n	8010196 <tcp_netif_ip_addr_changed+0x66>
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d013      	beq.n	8010196 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801016e:	4b0e      	ldr	r3, [pc, #56]	; (80101a8 <tcp_netif_ip_addr_changed+0x78>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	60fb      	str	r3, [r7, #12]
 8010174:	e00c      	b.n	8010190 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681a      	ldr	r2, [r3, #0]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	429a      	cmp	r2, r3
 8010180:	d103      	bne.n	801018a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	681a      	ldr	r2, [r3, #0]
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	60fb      	str	r3, [r7, #12]
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d1ef      	bne.n	8010176 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010196:	bf00      	nop
 8010198:	3710      	adds	r7, #16
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}
 801019e:	bf00      	nop
 80101a0:	200112ac 	.word	0x200112ac
 80101a4:	200112a4 	.word	0x200112a4
 80101a8:	200112a8 	.word	0x200112a8

080101ac <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d007      	beq.n	80101cc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7ff fb6f 	bl	800f8a4 <tcp_segs_free>
    pcb->ooseq = NULL;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2200      	movs	r2, #0
 80101ca:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80101cc:	bf00      	nop
 80101ce:	3708      	adds	r7, #8
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80101d4:	b590      	push	{r4, r7, lr}
 80101d6:	b08d      	sub	sp, #52	; 0x34
 80101d8:	af04      	add	r7, sp, #16
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d105      	bne.n	80101f0 <tcp_input+0x1c>
 80101e4:	4b9b      	ldr	r3, [pc, #620]	; (8010454 <tcp_input+0x280>)
 80101e6:	2283      	movs	r2, #131	; 0x83
 80101e8:	499b      	ldr	r1, [pc, #620]	; (8010458 <tcp_input+0x284>)
 80101ea:	489c      	ldr	r0, [pc, #624]	; (801045c <tcp_input+0x288>)
 80101ec:	f009 fbf8 	bl	80199e0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	4a9a      	ldr	r2, [pc, #616]	; (8010460 <tcp_input+0x28c>)
 80101f6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	895b      	ldrh	r3, [r3, #10]
 80101fc:	2b13      	cmp	r3, #19
 80101fe:	f240 83d1 	bls.w	80109a4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010202:	4b98      	ldr	r3, [pc, #608]	; (8010464 <tcp_input+0x290>)
 8010204:	695b      	ldr	r3, [r3, #20]
 8010206:	4a97      	ldr	r2, [pc, #604]	; (8010464 <tcp_input+0x290>)
 8010208:	6812      	ldr	r2, [r2, #0]
 801020a:	4611      	mov	r1, r2
 801020c:	4618      	mov	r0, r3
 801020e:	f006 fa53 	bl	80166b8 <ip4_addr_isbroadcast_u32>
 8010212:	4603      	mov	r3, r0
 8010214:	2b00      	cmp	r3, #0
 8010216:	f040 83c7 	bne.w	80109a8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801021a:	4b92      	ldr	r3, [pc, #584]	; (8010464 <tcp_input+0x290>)
 801021c:	695b      	ldr	r3, [r3, #20]
 801021e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010222:	2be0      	cmp	r3, #224	; 0xe0
 8010224:	f000 83c0 	beq.w	80109a8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010228:	4b8d      	ldr	r3, [pc, #564]	; (8010460 <tcp_input+0x28c>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	899b      	ldrh	r3, [r3, #12]
 801022e:	b29b      	uxth	r3, r3
 8010230:	4618      	mov	r0, r3
 8010232:	f7fc fb11 	bl	800c858 <lwip_htons>
 8010236:	4603      	mov	r3, r0
 8010238:	0b1b      	lsrs	r3, r3, #12
 801023a:	b29b      	uxth	r3, r3
 801023c:	b2db      	uxtb	r3, r3
 801023e:	009b      	lsls	r3, r3, #2
 8010240:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010242:	7cbb      	ldrb	r3, [r7, #18]
 8010244:	2b13      	cmp	r3, #19
 8010246:	f240 83b1 	bls.w	80109ac <tcp_input+0x7d8>
 801024a:	7cbb      	ldrb	r3, [r7, #18]
 801024c:	b29a      	uxth	r2, r3
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	891b      	ldrh	r3, [r3, #8]
 8010252:	429a      	cmp	r2, r3
 8010254:	f200 83aa 	bhi.w	80109ac <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010258:	7cbb      	ldrb	r3, [r7, #18]
 801025a:	b29b      	uxth	r3, r3
 801025c:	3b14      	subs	r3, #20
 801025e:	b29a      	uxth	r2, r3
 8010260:	4b81      	ldr	r3, [pc, #516]	; (8010468 <tcp_input+0x294>)
 8010262:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010264:	4b81      	ldr	r3, [pc, #516]	; (801046c <tcp_input+0x298>)
 8010266:	2200      	movs	r2, #0
 8010268:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	895a      	ldrh	r2, [r3, #10]
 801026e:	7cbb      	ldrb	r3, [r7, #18]
 8010270:	b29b      	uxth	r3, r3
 8010272:	429a      	cmp	r2, r3
 8010274:	d309      	bcc.n	801028a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010276:	4b7c      	ldr	r3, [pc, #496]	; (8010468 <tcp_input+0x294>)
 8010278:	881a      	ldrh	r2, [r3, #0]
 801027a:	4b7d      	ldr	r3, [pc, #500]	; (8010470 <tcp_input+0x29c>)
 801027c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801027e:	7cbb      	ldrb	r3, [r7, #18]
 8010280:	4619      	mov	r1, r3
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	f7fd fe64 	bl	800df50 <pbuf_remove_header>
 8010288:	e04e      	b.n	8010328 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d105      	bne.n	801029e <tcp_input+0xca>
 8010292:	4b70      	ldr	r3, [pc, #448]	; (8010454 <tcp_input+0x280>)
 8010294:	22c2      	movs	r2, #194	; 0xc2
 8010296:	4977      	ldr	r1, [pc, #476]	; (8010474 <tcp_input+0x2a0>)
 8010298:	4870      	ldr	r0, [pc, #448]	; (801045c <tcp_input+0x288>)
 801029a:	f009 fba1 	bl	80199e0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801029e:	2114      	movs	r1, #20
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f7fd fe55 	bl	800df50 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	895a      	ldrh	r2, [r3, #10]
 80102aa:	4b71      	ldr	r3, [pc, #452]	; (8010470 <tcp_input+0x29c>)
 80102ac:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80102ae:	4b6e      	ldr	r3, [pc, #440]	; (8010468 <tcp_input+0x294>)
 80102b0:	881a      	ldrh	r2, [r3, #0]
 80102b2:	4b6f      	ldr	r3, [pc, #444]	; (8010470 <tcp_input+0x29c>)
 80102b4:	881b      	ldrh	r3, [r3, #0]
 80102b6:	1ad3      	subs	r3, r2, r3
 80102b8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80102ba:	4b6d      	ldr	r3, [pc, #436]	; (8010470 <tcp_input+0x29c>)
 80102bc:	881b      	ldrh	r3, [r3, #0]
 80102be:	4619      	mov	r1, r3
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f7fd fe45 	bl	800df50 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	895b      	ldrh	r3, [r3, #10]
 80102cc:	8a3a      	ldrh	r2, [r7, #16]
 80102ce:	429a      	cmp	r2, r3
 80102d0:	f200 836e 	bhi.w	80109b0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	685b      	ldr	r3, [r3, #4]
 80102da:	4a64      	ldr	r2, [pc, #400]	; (801046c <tcp_input+0x298>)
 80102dc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	8a3a      	ldrh	r2, [r7, #16]
 80102e4:	4611      	mov	r1, r2
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fd fe32 	bl	800df50 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	891a      	ldrh	r2, [r3, #8]
 80102f0:	8a3b      	ldrh	r3, [r7, #16]
 80102f2:	1ad3      	subs	r3, r2, r3
 80102f4:	b29a      	uxth	r2, r3
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	895b      	ldrh	r3, [r3, #10]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d005      	beq.n	801030e <tcp_input+0x13a>
 8010302:	4b54      	ldr	r3, [pc, #336]	; (8010454 <tcp_input+0x280>)
 8010304:	22df      	movs	r2, #223	; 0xdf
 8010306:	495c      	ldr	r1, [pc, #368]	; (8010478 <tcp_input+0x2a4>)
 8010308:	4854      	ldr	r0, [pc, #336]	; (801045c <tcp_input+0x288>)
 801030a:	f009 fb69 	bl	80199e0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	891a      	ldrh	r2, [r3, #8]
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	891b      	ldrh	r3, [r3, #8]
 8010318:	429a      	cmp	r2, r3
 801031a:	d005      	beq.n	8010328 <tcp_input+0x154>
 801031c:	4b4d      	ldr	r3, [pc, #308]	; (8010454 <tcp_input+0x280>)
 801031e:	22e0      	movs	r2, #224	; 0xe0
 8010320:	4956      	ldr	r1, [pc, #344]	; (801047c <tcp_input+0x2a8>)
 8010322:	484e      	ldr	r0, [pc, #312]	; (801045c <tcp_input+0x288>)
 8010324:	f009 fb5c 	bl	80199e0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010328:	4b4d      	ldr	r3, [pc, #308]	; (8010460 <tcp_input+0x28c>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	881b      	ldrh	r3, [r3, #0]
 801032e:	b29b      	uxth	r3, r3
 8010330:	4a4b      	ldr	r2, [pc, #300]	; (8010460 <tcp_input+0x28c>)
 8010332:	6814      	ldr	r4, [r2, #0]
 8010334:	4618      	mov	r0, r3
 8010336:	f7fc fa8f 	bl	800c858 <lwip_htons>
 801033a:	4603      	mov	r3, r0
 801033c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801033e:	4b48      	ldr	r3, [pc, #288]	; (8010460 <tcp_input+0x28c>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	885b      	ldrh	r3, [r3, #2]
 8010344:	b29b      	uxth	r3, r3
 8010346:	4a46      	ldr	r2, [pc, #280]	; (8010460 <tcp_input+0x28c>)
 8010348:	6814      	ldr	r4, [r2, #0]
 801034a:	4618      	mov	r0, r3
 801034c:	f7fc fa84 	bl	800c858 <lwip_htons>
 8010350:	4603      	mov	r3, r0
 8010352:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010354:	4b42      	ldr	r3, [pc, #264]	; (8010460 <tcp_input+0x28c>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	685b      	ldr	r3, [r3, #4]
 801035a:	4a41      	ldr	r2, [pc, #260]	; (8010460 <tcp_input+0x28c>)
 801035c:	6814      	ldr	r4, [r2, #0]
 801035e:	4618      	mov	r0, r3
 8010360:	f7fc fa8f 	bl	800c882 <lwip_htonl>
 8010364:	4603      	mov	r3, r0
 8010366:	6063      	str	r3, [r4, #4]
 8010368:	6863      	ldr	r3, [r4, #4]
 801036a:	4a45      	ldr	r2, [pc, #276]	; (8010480 <tcp_input+0x2ac>)
 801036c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801036e:	4b3c      	ldr	r3, [pc, #240]	; (8010460 <tcp_input+0x28c>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	689b      	ldr	r3, [r3, #8]
 8010374:	4a3a      	ldr	r2, [pc, #232]	; (8010460 <tcp_input+0x28c>)
 8010376:	6814      	ldr	r4, [r2, #0]
 8010378:	4618      	mov	r0, r3
 801037a:	f7fc fa82 	bl	800c882 <lwip_htonl>
 801037e:	4603      	mov	r3, r0
 8010380:	60a3      	str	r3, [r4, #8]
 8010382:	68a3      	ldr	r3, [r4, #8]
 8010384:	4a3f      	ldr	r2, [pc, #252]	; (8010484 <tcp_input+0x2b0>)
 8010386:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010388:	4b35      	ldr	r3, [pc, #212]	; (8010460 <tcp_input+0x28c>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	89db      	ldrh	r3, [r3, #14]
 801038e:	b29b      	uxth	r3, r3
 8010390:	4a33      	ldr	r2, [pc, #204]	; (8010460 <tcp_input+0x28c>)
 8010392:	6814      	ldr	r4, [r2, #0]
 8010394:	4618      	mov	r0, r3
 8010396:	f7fc fa5f 	bl	800c858 <lwip_htons>
 801039a:	4603      	mov	r3, r0
 801039c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801039e:	4b30      	ldr	r3, [pc, #192]	; (8010460 <tcp_input+0x28c>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	899b      	ldrh	r3, [r3, #12]
 80103a4:	b29b      	uxth	r3, r3
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7fc fa56 	bl	800c858 <lwip_htons>
 80103ac:	4603      	mov	r3, r0
 80103ae:	b2db      	uxtb	r3, r3
 80103b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80103b4:	b2da      	uxtb	r2, r3
 80103b6:	4b34      	ldr	r3, [pc, #208]	; (8010488 <tcp_input+0x2b4>)
 80103b8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	891a      	ldrh	r2, [r3, #8]
 80103be:	4b33      	ldr	r3, [pc, #204]	; (801048c <tcp_input+0x2b8>)
 80103c0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80103c2:	4b31      	ldr	r3, [pc, #196]	; (8010488 <tcp_input+0x2b4>)
 80103c4:	781b      	ldrb	r3, [r3, #0]
 80103c6:	f003 0303 	and.w	r3, r3, #3
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d00c      	beq.n	80103e8 <tcp_input+0x214>
    tcplen++;
 80103ce:	4b2f      	ldr	r3, [pc, #188]	; (801048c <tcp_input+0x2b8>)
 80103d0:	881b      	ldrh	r3, [r3, #0]
 80103d2:	3301      	adds	r3, #1
 80103d4:	b29a      	uxth	r2, r3
 80103d6:	4b2d      	ldr	r3, [pc, #180]	; (801048c <tcp_input+0x2b8>)
 80103d8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	891a      	ldrh	r2, [r3, #8]
 80103de:	4b2b      	ldr	r3, [pc, #172]	; (801048c <tcp_input+0x2b8>)
 80103e0:	881b      	ldrh	r3, [r3, #0]
 80103e2:	429a      	cmp	r2, r3
 80103e4:	f200 82e6 	bhi.w	80109b4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80103e8:	2300      	movs	r3, #0
 80103ea:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80103ec:	4b28      	ldr	r3, [pc, #160]	; (8010490 <tcp_input+0x2bc>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	61fb      	str	r3, [r7, #28]
 80103f2:	e09d      	b.n	8010530 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80103f4:	69fb      	ldr	r3, [r7, #28]
 80103f6:	7d1b      	ldrb	r3, [r3, #20]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d105      	bne.n	8010408 <tcp_input+0x234>
 80103fc:	4b15      	ldr	r3, [pc, #84]	; (8010454 <tcp_input+0x280>)
 80103fe:	22fb      	movs	r2, #251	; 0xfb
 8010400:	4924      	ldr	r1, [pc, #144]	; (8010494 <tcp_input+0x2c0>)
 8010402:	4816      	ldr	r0, [pc, #88]	; (801045c <tcp_input+0x288>)
 8010404:	f009 faec 	bl	80199e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010408:	69fb      	ldr	r3, [r7, #28]
 801040a:	7d1b      	ldrb	r3, [r3, #20]
 801040c:	2b0a      	cmp	r3, #10
 801040e:	d105      	bne.n	801041c <tcp_input+0x248>
 8010410:	4b10      	ldr	r3, [pc, #64]	; (8010454 <tcp_input+0x280>)
 8010412:	22fc      	movs	r2, #252	; 0xfc
 8010414:	4920      	ldr	r1, [pc, #128]	; (8010498 <tcp_input+0x2c4>)
 8010416:	4811      	ldr	r0, [pc, #68]	; (801045c <tcp_input+0x288>)
 8010418:	f009 fae2 	bl	80199e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801041c:	69fb      	ldr	r3, [r7, #28]
 801041e:	7d1b      	ldrb	r3, [r3, #20]
 8010420:	2b01      	cmp	r3, #1
 8010422:	d105      	bne.n	8010430 <tcp_input+0x25c>
 8010424:	4b0b      	ldr	r3, [pc, #44]	; (8010454 <tcp_input+0x280>)
 8010426:	22fd      	movs	r2, #253	; 0xfd
 8010428:	491c      	ldr	r1, [pc, #112]	; (801049c <tcp_input+0x2c8>)
 801042a:	480c      	ldr	r0, [pc, #48]	; (801045c <tcp_input+0x288>)
 801042c:	f009 fad8 	bl	80199e0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010430:	69fb      	ldr	r3, [r7, #28]
 8010432:	7a1b      	ldrb	r3, [r3, #8]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d033      	beq.n	80104a0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010438:	69fb      	ldr	r3, [r7, #28]
 801043a:	7a1a      	ldrb	r2, [r3, #8]
 801043c:	4b09      	ldr	r3, [pc, #36]	; (8010464 <tcp_input+0x290>)
 801043e:	685b      	ldr	r3, [r3, #4]
 8010440:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010444:	3301      	adds	r3, #1
 8010446:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010448:	429a      	cmp	r2, r3
 801044a:	d029      	beq.n	80104a0 <tcp_input+0x2cc>
      prev = pcb;
 801044c:	69fb      	ldr	r3, [r7, #28]
 801044e:	61bb      	str	r3, [r7, #24]
      continue;
 8010450:	e06b      	b.n	801052a <tcp_input+0x356>
 8010452:	bf00      	nop
 8010454:	0801c978 	.word	0x0801c978
 8010458:	0801c9ac 	.word	0x0801c9ac
 801045c:	0801c9c4 	.word	0x0801c9c4
 8010460:	200112c8 	.word	0x200112c8
 8010464:	2000a1a4 	.word	0x2000a1a4
 8010468:	200112cc 	.word	0x200112cc
 801046c:	200112d0 	.word	0x200112d0
 8010470:	200112ce 	.word	0x200112ce
 8010474:	0801c9ec 	.word	0x0801c9ec
 8010478:	0801c9fc 	.word	0x0801c9fc
 801047c:	0801ca08 	.word	0x0801ca08
 8010480:	200112d8 	.word	0x200112d8
 8010484:	200112dc 	.word	0x200112dc
 8010488:	200112e4 	.word	0x200112e4
 801048c:	200112e2 	.word	0x200112e2
 8010490:	200112ac 	.word	0x200112ac
 8010494:	0801ca28 	.word	0x0801ca28
 8010498:	0801ca50 	.word	0x0801ca50
 801049c:	0801ca7c 	.word	0x0801ca7c
    }

    if (pcb->remote_port == tcphdr->src &&
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	8b1a      	ldrh	r2, [r3, #24]
 80104a4:	4b72      	ldr	r3, [pc, #456]	; (8010670 <tcp_input+0x49c>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	881b      	ldrh	r3, [r3, #0]
 80104aa:	b29b      	uxth	r3, r3
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d13a      	bne.n	8010526 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80104b0:	69fb      	ldr	r3, [r7, #28]
 80104b2:	8ada      	ldrh	r2, [r3, #22]
 80104b4:	4b6e      	ldr	r3, [pc, #440]	; (8010670 <tcp_input+0x49c>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	885b      	ldrh	r3, [r3, #2]
 80104ba:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80104bc:	429a      	cmp	r2, r3
 80104be:	d132      	bne.n	8010526 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80104c0:	69fb      	ldr	r3, [r7, #28]
 80104c2:	685a      	ldr	r2, [r3, #4]
 80104c4:	4b6b      	ldr	r3, [pc, #428]	; (8010674 <tcp_input+0x4a0>)
 80104c6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80104c8:	429a      	cmp	r2, r3
 80104ca:	d12c      	bne.n	8010526 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80104cc:	69fb      	ldr	r3, [r7, #28]
 80104ce:	681a      	ldr	r2, [r3, #0]
 80104d0:	4b68      	ldr	r3, [pc, #416]	; (8010674 <tcp_input+0x4a0>)
 80104d2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80104d4:	429a      	cmp	r2, r3
 80104d6:	d126      	bne.n	8010526 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80104d8:	69fb      	ldr	r3, [r7, #28]
 80104da:	68db      	ldr	r3, [r3, #12]
 80104dc:	69fa      	ldr	r2, [r7, #28]
 80104de:	429a      	cmp	r2, r3
 80104e0:	d106      	bne.n	80104f0 <tcp_input+0x31c>
 80104e2:	4b65      	ldr	r3, [pc, #404]	; (8010678 <tcp_input+0x4a4>)
 80104e4:	f240 120d 	movw	r2, #269	; 0x10d
 80104e8:	4964      	ldr	r1, [pc, #400]	; (801067c <tcp_input+0x4a8>)
 80104ea:	4865      	ldr	r0, [pc, #404]	; (8010680 <tcp_input+0x4ac>)
 80104ec:	f009 fa78 	bl	80199e0 <iprintf>
      if (prev != NULL) {
 80104f0:	69bb      	ldr	r3, [r7, #24]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d00a      	beq.n	801050c <tcp_input+0x338>
        prev->next = pcb->next;
 80104f6:	69fb      	ldr	r3, [r7, #28]
 80104f8:	68da      	ldr	r2, [r3, #12]
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80104fe:	4b61      	ldr	r3, [pc, #388]	; (8010684 <tcp_input+0x4b0>)
 8010500:	681a      	ldr	r2, [r3, #0]
 8010502:	69fb      	ldr	r3, [r7, #28]
 8010504:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010506:	4a5f      	ldr	r2, [pc, #380]	; (8010684 <tcp_input+0x4b0>)
 8010508:	69fb      	ldr	r3, [r7, #28]
 801050a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	68db      	ldr	r3, [r3, #12]
 8010510:	69fa      	ldr	r2, [r7, #28]
 8010512:	429a      	cmp	r2, r3
 8010514:	d111      	bne.n	801053a <tcp_input+0x366>
 8010516:	4b58      	ldr	r3, [pc, #352]	; (8010678 <tcp_input+0x4a4>)
 8010518:	f240 1215 	movw	r2, #277	; 0x115
 801051c:	495a      	ldr	r1, [pc, #360]	; (8010688 <tcp_input+0x4b4>)
 801051e:	4858      	ldr	r0, [pc, #352]	; (8010680 <tcp_input+0x4ac>)
 8010520:	f009 fa5e 	bl	80199e0 <iprintf>
      break;
 8010524:	e009      	b.n	801053a <tcp_input+0x366>
    }
    prev = pcb;
 8010526:	69fb      	ldr	r3, [r7, #28]
 8010528:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801052a:	69fb      	ldr	r3, [r7, #28]
 801052c:	68db      	ldr	r3, [r3, #12]
 801052e:	61fb      	str	r3, [r7, #28]
 8010530:	69fb      	ldr	r3, [r7, #28]
 8010532:	2b00      	cmp	r3, #0
 8010534:	f47f af5e 	bne.w	80103f4 <tcp_input+0x220>
 8010538:	e000      	b.n	801053c <tcp_input+0x368>
      break;
 801053a:	bf00      	nop
  }

  if (pcb == NULL) {
 801053c:	69fb      	ldr	r3, [r7, #28]
 801053e:	2b00      	cmp	r3, #0
 8010540:	f040 80aa 	bne.w	8010698 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010544:	4b51      	ldr	r3, [pc, #324]	; (801068c <tcp_input+0x4b8>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	61fb      	str	r3, [r7, #28]
 801054a:	e03f      	b.n	80105cc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801054c:	69fb      	ldr	r3, [r7, #28]
 801054e:	7d1b      	ldrb	r3, [r3, #20]
 8010550:	2b0a      	cmp	r3, #10
 8010552:	d006      	beq.n	8010562 <tcp_input+0x38e>
 8010554:	4b48      	ldr	r3, [pc, #288]	; (8010678 <tcp_input+0x4a4>)
 8010556:	f240 121f 	movw	r2, #287	; 0x11f
 801055a:	494d      	ldr	r1, [pc, #308]	; (8010690 <tcp_input+0x4bc>)
 801055c:	4848      	ldr	r0, [pc, #288]	; (8010680 <tcp_input+0x4ac>)
 801055e:	f009 fa3f 	bl	80199e0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010562:	69fb      	ldr	r3, [r7, #28]
 8010564:	7a1b      	ldrb	r3, [r3, #8]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d009      	beq.n	801057e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801056a:	69fb      	ldr	r3, [r7, #28]
 801056c:	7a1a      	ldrb	r2, [r3, #8]
 801056e:	4b41      	ldr	r3, [pc, #260]	; (8010674 <tcp_input+0x4a0>)
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010576:	3301      	adds	r3, #1
 8010578:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801057a:	429a      	cmp	r2, r3
 801057c:	d122      	bne.n	80105c4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801057e:	69fb      	ldr	r3, [r7, #28]
 8010580:	8b1a      	ldrh	r2, [r3, #24]
 8010582:	4b3b      	ldr	r3, [pc, #236]	; (8010670 <tcp_input+0x49c>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	881b      	ldrh	r3, [r3, #0]
 8010588:	b29b      	uxth	r3, r3
 801058a:	429a      	cmp	r2, r3
 801058c:	d11b      	bne.n	80105c6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801058e:	69fb      	ldr	r3, [r7, #28]
 8010590:	8ada      	ldrh	r2, [r3, #22]
 8010592:	4b37      	ldr	r3, [pc, #220]	; (8010670 <tcp_input+0x49c>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	885b      	ldrh	r3, [r3, #2]
 8010598:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801059a:	429a      	cmp	r2, r3
 801059c:	d113      	bne.n	80105c6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801059e:	69fb      	ldr	r3, [r7, #28]
 80105a0:	685a      	ldr	r2, [r3, #4]
 80105a2:	4b34      	ldr	r3, [pc, #208]	; (8010674 <tcp_input+0x4a0>)
 80105a4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80105a6:	429a      	cmp	r2, r3
 80105a8:	d10d      	bne.n	80105c6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80105aa:	69fb      	ldr	r3, [r7, #28]
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	4b31      	ldr	r3, [pc, #196]	; (8010674 <tcp_input+0x4a0>)
 80105b0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d107      	bne.n	80105c6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80105b6:	69f8      	ldr	r0, [r7, #28]
 80105b8:	f000 fb56 	bl	8010c68 <tcp_timewait_input>
        }
        pbuf_free(p);
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f7fd fd4d 	bl	800e05c <pbuf_free>
        return;
 80105c2:	e1fd      	b.n	80109c0 <tcp_input+0x7ec>
        continue;
 80105c4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80105c6:	69fb      	ldr	r3, [r7, #28]
 80105c8:	68db      	ldr	r3, [r3, #12]
 80105ca:	61fb      	str	r3, [r7, #28]
 80105cc:	69fb      	ldr	r3, [r7, #28]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d1bc      	bne.n	801054c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80105d2:	2300      	movs	r3, #0
 80105d4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80105d6:	4b2f      	ldr	r3, [pc, #188]	; (8010694 <tcp_input+0x4c0>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	617b      	str	r3, [r7, #20]
 80105dc:	e02a      	b.n	8010634 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	7a1b      	ldrb	r3, [r3, #8]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d00c      	beq.n	8010600 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	7a1a      	ldrb	r2, [r3, #8]
 80105ea:	4b22      	ldr	r3, [pc, #136]	; (8010674 <tcp_input+0x4a0>)
 80105ec:	685b      	ldr	r3, [r3, #4]
 80105ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80105f2:	3301      	adds	r3, #1
 80105f4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80105f6:	429a      	cmp	r2, r3
 80105f8:	d002      	beq.n	8010600 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80105fa:	697b      	ldr	r3, [r7, #20]
 80105fc:	61bb      	str	r3, [r7, #24]
        continue;
 80105fe:	e016      	b.n	801062e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	8ada      	ldrh	r2, [r3, #22]
 8010604:	4b1a      	ldr	r3, [pc, #104]	; (8010670 <tcp_input+0x49c>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	885b      	ldrh	r3, [r3, #2]
 801060a:	b29b      	uxth	r3, r3
 801060c:	429a      	cmp	r2, r3
 801060e:	d10c      	bne.n	801062a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010610:	697b      	ldr	r3, [r7, #20]
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	4b17      	ldr	r3, [pc, #92]	; (8010674 <tcp_input+0x4a0>)
 8010616:	695b      	ldr	r3, [r3, #20]
 8010618:	429a      	cmp	r2, r3
 801061a:	d00f      	beq.n	801063c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d00d      	beq.n	801063e <tcp_input+0x46a>
 8010622:	697b      	ldr	r3, [r7, #20]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d009      	beq.n	801063e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801062e:	697b      	ldr	r3, [r7, #20]
 8010630:	68db      	ldr	r3, [r3, #12]
 8010632:	617b      	str	r3, [r7, #20]
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d1d1      	bne.n	80105de <tcp_input+0x40a>
 801063a:	e000      	b.n	801063e <tcp_input+0x46a>
            break;
 801063c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801063e:	697b      	ldr	r3, [r7, #20]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d029      	beq.n	8010698 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010644:	69bb      	ldr	r3, [r7, #24]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d00a      	beq.n	8010660 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801064a:	697b      	ldr	r3, [r7, #20]
 801064c:	68da      	ldr	r2, [r3, #12]
 801064e:	69bb      	ldr	r3, [r7, #24]
 8010650:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010652:	4b10      	ldr	r3, [pc, #64]	; (8010694 <tcp_input+0x4c0>)
 8010654:	681a      	ldr	r2, [r3, #0]
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801065a:	4a0e      	ldr	r2, [pc, #56]	; (8010694 <tcp_input+0x4c0>)
 801065c:	697b      	ldr	r3, [r7, #20]
 801065e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010660:	6978      	ldr	r0, [r7, #20]
 8010662:	f000 fa03 	bl	8010a6c <tcp_listen_input>
      }
      pbuf_free(p);
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f7fd fcf8 	bl	800e05c <pbuf_free>
      return;
 801066c:	e1a8      	b.n	80109c0 <tcp_input+0x7ec>
 801066e:	bf00      	nop
 8010670:	200112c8 	.word	0x200112c8
 8010674:	2000a1a4 	.word	0x2000a1a4
 8010678:	0801c978 	.word	0x0801c978
 801067c:	0801caa4 	.word	0x0801caa4
 8010680:	0801c9c4 	.word	0x0801c9c4
 8010684:	200112ac 	.word	0x200112ac
 8010688:	0801cad0 	.word	0x0801cad0
 801068c:	200112b0 	.word	0x200112b0
 8010690:	0801cafc 	.word	0x0801cafc
 8010694:	200112a8 	.word	0x200112a8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010698:	69fb      	ldr	r3, [r7, #28]
 801069a:	2b00      	cmp	r3, #0
 801069c:	f000 8158 	beq.w	8010950 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80106a0:	4b95      	ldr	r3, [pc, #596]	; (80108f8 <tcp_input+0x724>)
 80106a2:	2200      	movs	r2, #0
 80106a4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	891a      	ldrh	r2, [r3, #8]
 80106aa:	4b93      	ldr	r3, [pc, #588]	; (80108f8 <tcp_input+0x724>)
 80106ac:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80106ae:	4a92      	ldr	r2, [pc, #584]	; (80108f8 <tcp_input+0x724>)
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80106b4:	4b91      	ldr	r3, [pc, #580]	; (80108fc <tcp_input+0x728>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	4a8f      	ldr	r2, [pc, #572]	; (80108f8 <tcp_input+0x724>)
 80106ba:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80106bc:	4b90      	ldr	r3, [pc, #576]	; (8010900 <tcp_input+0x72c>)
 80106be:	2200      	movs	r2, #0
 80106c0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80106c2:	4b90      	ldr	r3, [pc, #576]	; (8010904 <tcp_input+0x730>)
 80106c4:	2200      	movs	r2, #0
 80106c6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80106c8:	4b8f      	ldr	r3, [pc, #572]	; (8010908 <tcp_input+0x734>)
 80106ca:	2200      	movs	r2, #0
 80106cc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80106ce:	4b8f      	ldr	r3, [pc, #572]	; (801090c <tcp_input+0x738>)
 80106d0:	781b      	ldrb	r3, [r3, #0]
 80106d2:	f003 0308 	and.w	r3, r3, #8
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d006      	beq.n	80106e8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	7b5b      	ldrb	r3, [r3, #13]
 80106de:	f043 0301 	orr.w	r3, r3, #1
 80106e2:	b2da      	uxtb	r2, r3
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80106e8:	69fb      	ldr	r3, [r7, #28]
 80106ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d017      	beq.n	8010720 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80106f0:	69f8      	ldr	r0, [r7, #28]
 80106f2:	f7ff f85b 	bl	800f7ac <tcp_process_refused_data>
 80106f6:	4603      	mov	r3, r0
 80106f8:	f113 0f0d 	cmn.w	r3, #13
 80106fc:	d007      	beq.n	801070e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80106fe:	69fb      	ldr	r3, [r7, #28]
 8010700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010702:	2b00      	cmp	r3, #0
 8010704:	d00c      	beq.n	8010720 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010706:	4b82      	ldr	r3, [pc, #520]	; (8010910 <tcp_input+0x73c>)
 8010708:	881b      	ldrh	r3, [r3, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d008      	beq.n	8010720 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801070e:	69fb      	ldr	r3, [r7, #28]
 8010710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010712:	2b00      	cmp	r3, #0
 8010714:	f040 80e3 	bne.w	80108de <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010718:	69f8      	ldr	r0, [r7, #28]
 801071a:	f003 fe05 	bl	8014328 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801071e:	e0de      	b.n	80108de <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010720:	4a7c      	ldr	r2, [pc, #496]	; (8010914 <tcp_input+0x740>)
 8010722:	69fb      	ldr	r3, [r7, #28]
 8010724:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010726:	69f8      	ldr	r0, [r7, #28]
 8010728:	f000 fb18 	bl	8010d5c <tcp_process>
 801072c:	4603      	mov	r3, r0
 801072e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010730:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010734:	f113 0f0d 	cmn.w	r3, #13
 8010738:	f000 80d3 	beq.w	80108e2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801073c:	4b71      	ldr	r3, [pc, #452]	; (8010904 <tcp_input+0x730>)
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	f003 0308 	and.w	r3, r3, #8
 8010744:	2b00      	cmp	r3, #0
 8010746:	d015      	beq.n	8010774 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010748:	69fb      	ldr	r3, [r7, #28]
 801074a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801074e:	2b00      	cmp	r3, #0
 8010750:	d008      	beq.n	8010764 <tcp_input+0x590>
 8010752:	69fb      	ldr	r3, [r7, #28]
 8010754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010758:	69fa      	ldr	r2, [r7, #28]
 801075a:	6912      	ldr	r2, [r2, #16]
 801075c:	f06f 010d 	mvn.w	r1, #13
 8010760:	4610      	mov	r0, r2
 8010762:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010764:	69f9      	ldr	r1, [r7, #28]
 8010766:	486c      	ldr	r0, [pc, #432]	; (8010918 <tcp_input+0x744>)
 8010768:	f7ff fbbc 	bl	800fee4 <tcp_pcb_remove>
        tcp_free(pcb);
 801076c:	69f8      	ldr	r0, [r7, #28]
 801076e:	f7fd ff21 	bl	800e5b4 <tcp_free>
 8010772:	e0da      	b.n	801092a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010774:	2300      	movs	r3, #0
 8010776:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010778:	4b63      	ldr	r3, [pc, #396]	; (8010908 <tcp_input+0x734>)
 801077a:	881b      	ldrh	r3, [r3, #0]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d01d      	beq.n	80107bc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010780:	4b61      	ldr	r3, [pc, #388]	; (8010908 <tcp_input+0x734>)
 8010782:	881b      	ldrh	r3, [r3, #0]
 8010784:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010786:	69fb      	ldr	r3, [r7, #28]
 8010788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801078c:	2b00      	cmp	r3, #0
 801078e:	d00a      	beq.n	80107a6 <tcp_input+0x5d2>
 8010790:	69fb      	ldr	r3, [r7, #28]
 8010792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010796:	69fa      	ldr	r2, [r7, #28]
 8010798:	6910      	ldr	r0, [r2, #16]
 801079a:	89fa      	ldrh	r2, [r7, #14]
 801079c:	69f9      	ldr	r1, [r7, #28]
 801079e:	4798      	blx	r3
 80107a0:	4603      	mov	r3, r0
 80107a2:	74fb      	strb	r3, [r7, #19]
 80107a4:	e001      	b.n	80107aa <tcp_input+0x5d6>
 80107a6:	2300      	movs	r3, #0
 80107a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80107aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80107ae:	f113 0f0d 	cmn.w	r3, #13
 80107b2:	f000 8098 	beq.w	80108e6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80107b6:	4b54      	ldr	r3, [pc, #336]	; (8010908 <tcp_input+0x734>)
 80107b8:	2200      	movs	r2, #0
 80107ba:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80107bc:	69f8      	ldr	r0, [r7, #28]
 80107be:	f000 f915 	bl	80109ec <tcp_input_delayed_close>
 80107c2:	4603      	mov	r3, r0
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	f040 8090 	bne.w	80108ea <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80107ca:	4b4d      	ldr	r3, [pc, #308]	; (8010900 <tcp_input+0x72c>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d041      	beq.n	8010856 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80107d2:	69fb      	ldr	r3, [r7, #28]
 80107d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d006      	beq.n	80107e8 <tcp_input+0x614>
 80107da:	4b50      	ldr	r3, [pc, #320]	; (801091c <tcp_input+0x748>)
 80107dc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80107e0:	494f      	ldr	r1, [pc, #316]	; (8010920 <tcp_input+0x74c>)
 80107e2:	4850      	ldr	r0, [pc, #320]	; (8010924 <tcp_input+0x750>)
 80107e4:	f009 f8fc 	bl	80199e0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80107e8:	69fb      	ldr	r3, [r7, #28]
 80107ea:	8b5b      	ldrh	r3, [r3, #26]
 80107ec:	f003 0310 	and.w	r3, r3, #16
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d008      	beq.n	8010806 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80107f4:	4b42      	ldr	r3, [pc, #264]	; (8010900 <tcp_input+0x72c>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7fd fc2f 	bl	800e05c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80107fe:	69f8      	ldr	r0, [r7, #28]
 8010800:	f7fe fa1c 	bl	800ec3c <tcp_abort>
            goto aborted;
 8010804:	e091      	b.n	801092a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010806:	69fb      	ldr	r3, [r7, #28]
 8010808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801080c:	2b00      	cmp	r3, #0
 801080e:	d00c      	beq.n	801082a <tcp_input+0x656>
 8010810:	69fb      	ldr	r3, [r7, #28]
 8010812:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010816:	69fb      	ldr	r3, [r7, #28]
 8010818:	6918      	ldr	r0, [r3, #16]
 801081a:	4b39      	ldr	r3, [pc, #228]	; (8010900 <tcp_input+0x72c>)
 801081c:	681a      	ldr	r2, [r3, #0]
 801081e:	2300      	movs	r3, #0
 8010820:	69f9      	ldr	r1, [r7, #28]
 8010822:	47a0      	blx	r4
 8010824:	4603      	mov	r3, r0
 8010826:	74fb      	strb	r3, [r7, #19]
 8010828:	e008      	b.n	801083c <tcp_input+0x668>
 801082a:	4b35      	ldr	r3, [pc, #212]	; (8010900 <tcp_input+0x72c>)
 801082c:	681a      	ldr	r2, [r3, #0]
 801082e:	2300      	movs	r3, #0
 8010830:	69f9      	ldr	r1, [r7, #28]
 8010832:	2000      	movs	r0, #0
 8010834:	f7ff f890 	bl	800f958 <tcp_recv_null>
 8010838:	4603      	mov	r3, r0
 801083a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801083c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010840:	f113 0f0d 	cmn.w	r3, #13
 8010844:	d053      	beq.n	80108ee <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010846:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d003      	beq.n	8010856 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801084e:	4b2c      	ldr	r3, [pc, #176]	; (8010900 <tcp_input+0x72c>)
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010856:	4b2b      	ldr	r3, [pc, #172]	; (8010904 <tcp_input+0x730>)
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	f003 0320 	and.w	r3, r3, #32
 801085e:	2b00      	cmp	r3, #0
 8010860:	d030      	beq.n	80108c4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8010862:	69fb      	ldr	r3, [r7, #28]
 8010864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010866:	2b00      	cmp	r3, #0
 8010868:	d009      	beq.n	801087e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801086a:	69fb      	ldr	r3, [r7, #28]
 801086c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801086e:	7b5a      	ldrb	r2, [r3, #13]
 8010870:	69fb      	ldr	r3, [r7, #28]
 8010872:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010874:	f042 0220 	orr.w	r2, r2, #32
 8010878:	b2d2      	uxtb	r2, r2
 801087a:	735a      	strb	r2, [r3, #13]
 801087c:	e022      	b.n	80108c4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801087e:	69fb      	ldr	r3, [r7, #28]
 8010880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010882:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010886:	d005      	beq.n	8010894 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8010888:	69fb      	ldr	r3, [r7, #28]
 801088a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801088c:	3301      	adds	r3, #1
 801088e:	b29a      	uxth	r2, r3
 8010890:	69fb      	ldr	r3, [r7, #28]
 8010892:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010894:	69fb      	ldr	r3, [r7, #28]
 8010896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801089a:	2b00      	cmp	r3, #0
 801089c:	d00b      	beq.n	80108b6 <tcp_input+0x6e2>
 801089e:	69fb      	ldr	r3, [r7, #28]
 80108a0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80108a4:	69fb      	ldr	r3, [r7, #28]
 80108a6:	6918      	ldr	r0, [r3, #16]
 80108a8:	2300      	movs	r3, #0
 80108aa:	2200      	movs	r2, #0
 80108ac:	69f9      	ldr	r1, [r7, #28]
 80108ae:	47a0      	blx	r4
 80108b0:	4603      	mov	r3, r0
 80108b2:	74fb      	strb	r3, [r7, #19]
 80108b4:	e001      	b.n	80108ba <tcp_input+0x6e6>
 80108b6:	2300      	movs	r3, #0
 80108b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80108ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80108be:	f113 0f0d 	cmn.w	r3, #13
 80108c2:	d016      	beq.n	80108f2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80108c4:	4b13      	ldr	r3, [pc, #76]	; (8010914 <tcp_input+0x740>)
 80108c6:	2200      	movs	r2, #0
 80108c8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80108ca:	69f8      	ldr	r0, [r7, #28]
 80108cc:	f000 f88e 	bl	80109ec <tcp_input_delayed_close>
 80108d0:	4603      	mov	r3, r0
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d128      	bne.n	8010928 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80108d6:	69f8      	ldr	r0, [r7, #28]
 80108d8:	f002 ff20 	bl	801371c <tcp_output>
 80108dc:	e025      	b.n	801092a <tcp_input+0x756>
        goto aborted;
 80108de:	bf00      	nop
 80108e0:	e023      	b.n	801092a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80108e2:	bf00      	nop
 80108e4:	e021      	b.n	801092a <tcp_input+0x756>
              goto aborted;
 80108e6:	bf00      	nop
 80108e8:	e01f      	b.n	801092a <tcp_input+0x756>
          goto aborted;
 80108ea:	bf00      	nop
 80108ec:	e01d      	b.n	801092a <tcp_input+0x756>
            goto aborted;
 80108ee:	bf00      	nop
 80108f0:	e01b      	b.n	801092a <tcp_input+0x756>
              goto aborted;
 80108f2:	bf00      	nop
 80108f4:	e019      	b.n	801092a <tcp_input+0x756>
 80108f6:	bf00      	nop
 80108f8:	200112b8 	.word	0x200112b8
 80108fc:	200112c8 	.word	0x200112c8
 8010900:	200112e8 	.word	0x200112e8
 8010904:	200112e5 	.word	0x200112e5
 8010908:	200112e0 	.word	0x200112e0
 801090c:	200112e4 	.word	0x200112e4
 8010910:	200112e2 	.word	0x200112e2
 8010914:	200112ec 	.word	0x200112ec
 8010918:	200112ac 	.word	0x200112ac
 801091c:	0801c978 	.word	0x0801c978
 8010920:	0801cb2c 	.word	0x0801cb2c
 8010924:	0801c9c4 	.word	0x0801c9c4
          goto aborted;
 8010928:	bf00      	nop
    tcp_input_pcb = NULL;
 801092a:	4b27      	ldr	r3, [pc, #156]	; (80109c8 <tcp_input+0x7f4>)
 801092c:	2200      	movs	r2, #0
 801092e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010930:	4b26      	ldr	r3, [pc, #152]	; (80109cc <tcp_input+0x7f8>)
 8010932:	2200      	movs	r2, #0
 8010934:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010936:	4b26      	ldr	r3, [pc, #152]	; (80109d0 <tcp_input+0x7fc>)
 8010938:	685b      	ldr	r3, [r3, #4]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d03f      	beq.n	80109be <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801093e:	4b24      	ldr	r3, [pc, #144]	; (80109d0 <tcp_input+0x7fc>)
 8010940:	685b      	ldr	r3, [r3, #4]
 8010942:	4618      	mov	r0, r3
 8010944:	f7fd fb8a 	bl	800e05c <pbuf_free>
      inseg.p = NULL;
 8010948:	4b21      	ldr	r3, [pc, #132]	; (80109d0 <tcp_input+0x7fc>)
 801094a:	2200      	movs	r2, #0
 801094c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801094e:	e036      	b.n	80109be <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010950:	4b20      	ldr	r3, [pc, #128]	; (80109d4 <tcp_input+0x800>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	899b      	ldrh	r3, [r3, #12]
 8010956:	b29b      	uxth	r3, r3
 8010958:	4618      	mov	r0, r3
 801095a:	f7fb ff7d 	bl	800c858 <lwip_htons>
 801095e:	4603      	mov	r3, r0
 8010960:	b2db      	uxtb	r3, r3
 8010962:	f003 0304 	and.w	r3, r3, #4
 8010966:	2b00      	cmp	r3, #0
 8010968:	d118      	bne.n	801099c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801096a:	4b1b      	ldr	r3, [pc, #108]	; (80109d8 <tcp_input+0x804>)
 801096c:	6819      	ldr	r1, [r3, #0]
 801096e:	4b1b      	ldr	r3, [pc, #108]	; (80109dc <tcp_input+0x808>)
 8010970:	881b      	ldrh	r3, [r3, #0]
 8010972:	461a      	mov	r2, r3
 8010974:	4b1a      	ldr	r3, [pc, #104]	; (80109e0 <tcp_input+0x80c>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801097a:	4b16      	ldr	r3, [pc, #88]	; (80109d4 <tcp_input+0x800>)
 801097c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801097e:	885b      	ldrh	r3, [r3, #2]
 8010980:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010982:	4a14      	ldr	r2, [pc, #80]	; (80109d4 <tcp_input+0x800>)
 8010984:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010986:	8812      	ldrh	r2, [r2, #0]
 8010988:	b292      	uxth	r2, r2
 801098a:	9202      	str	r2, [sp, #8]
 801098c:	9301      	str	r3, [sp, #4]
 801098e:	4b15      	ldr	r3, [pc, #84]	; (80109e4 <tcp_input+0x810>)
 8010990:	9300      	str	r3, [sp, #0]
 8010992:	4b15      	ldr	r3, [pc, #84]	; (80109e8 <tcp_input+0x814>)
 8010994:	4602      	mov	r2, r0
 8010996:	2000      	movs	r0, #0
 8010998:	f003 fc74 	bl	8014284 <tcp_rst>
    pbuf_free(p);
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f7fd fb5d 	bl	800e05c <pbuf_free>
  return;
 80109a2:	e00c      	b.n	80109be <tcp_input+0x7ea>
    goto dropped;
 80109a4:	bf00      	nop
 80109a6:	e006      	b.n	80109b6 <tcp_input+0x7e2>
    goto dropped;
 80109a8:	bf00      	nop
 80109aa:	e004      	b.n	80109b6 <tcp_input+0x7e2>
    goto dropped;
 80109ac:	bf00      	nop
 80109ae:	e002      	b.n	80109b6 <tcp_input+0x7e2>
      goto dropped;
 80109b0:	bf00      	nop
 80109b2:	e000      	b.n	80109b6 <tcp_input+0x7e2>
      goto dropped;
 80109b4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f7fd fb50 	bl	800e05c <pbuf_free>
 80109bc:	e000      	b.n	80109c0 <tcp_input+0x7ec>
  return;
 80109be:	bf00      	nop
}
 80109c0:	3724      	adds	r7, #36	; 0x24
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd90      	pop	{r4, r7, pc}
 80109c6:	bf00      	nop
 80109c8:	200112ec 	.word	0x200112ec
 80109cc:	200112e8 	.word	0x200112e8
 80109d0:	200112b8 	.word	0x200112b8
 80109d4:	200112c8 	.word	0x200112c8
 80109d8:	200112dc 	.word	0x200112dc
 80109dc:	200112e2 	.word	0x200112e2
 80109e0:	200112d8 	.word	0x200112d8
 80109e4:	2000a1b4 	.word	0x2000a1b4
 80109e8:	2000a1b8 	.word	0x2000a1b8

080109ec <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d106      	bne.n	8010a08 <tcp_input_delayed_close+0x1c>
 80109fa:	4b17      	ldr	r3, [pc, #92]	; (8010a58 <tcp_input_delayed_close+0x6c>)
 80109fc:	f240 225a 	movw	r2, #602	; 0x25a
 8010a00:	4916      	ldr	r1, [pc, #88]	; (8010a5c <tcp_input_delayed_close+0x70>)
 8010a02:	4817      	ldr	r0, [pc, #92]	; (8010a60 <tcp_input_delayed_close+0x74>)
 8010a04:	f008 ffec 	bl	80199e0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010a08:	4b16      	ldr	r3, [pc, #88]	; (8010a64 <tcp_input_delayed_close+0x78>)
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	f003 0310 	and.w	r3, r3, #16
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d01c      	beq.n	8010a4e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	8b5b      	ldrh	r3, [r3, #26]
 8010a18:	f003 0310 	and.w	r3, r3, #16
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d10d      	bne.n	8010a3c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d008      	beq.n	8010a3c <tcp_input_delayed_close+0x50>
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a30:	687a      	ldr	r2, [r7, #4]
 8010a32:	6912      	ldr	r2, [r2, #16]
 8010a34:	f06f 010e 	mvn.w	r1, #14
 8010a38:	4610      	mov	r0, r2
 8010a3a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010a3c:	6879      	ldr	r1, [r7, #4]
 8010a3e:	480a      	ldr	r0, [pc, #40]	; (8010a68 <tcp_input_delayed_close+0x7c>)
 8010a40:	f7ff fa50 	bl	800fee4 <tcp_pcb_remove>
    tcp_free(pcb);
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f7fd fdb5 	bl	800e5b4 <tcp_free>
    return 1;
 8010a4a:	2301      	movs	r3, #1
 8010a4c:	e000      	b.n	8010a50 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010a4e:	2300      	movs	r3, #0
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	3708      	adds	r7, #8
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}
 8010a58:	0801c978 	.word	0x0801c978
 8010a5c:	0801cb48 	.word	0x0801cb48
 8010a60:	0801c9c4 	.word	0x0801c9c4
 8010a64:	200112e5 	.word	0x200112e5
 8010a68:	200112ac 	.word	0x200112ac

08010a6c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010a6c:	b590      	push	{r4, r7, lr}
 8010a6e:	b08b      	sub	sp, #44	; 0x2c
 8010a70:	af04      	add	r7, sp, #16
 8010a72:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010a74:	4b6f      	ldr	r3, [pc, #444]	; (8010c34 <tcp_listen_input+0x1c8>)
 8010a76:	781b      	ldrb	r3, [r3, #0]
 8010a78:	f003 0304 	and.w	r3, r3, #4
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	f040 80d2 	bne.w	8010c26 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d106      	bne.n	8010a96 <tcp_listen_input+0x2a>
 8010a88:	4b6b      	ldr	r3, [pc, #428]	; (8010c38 <tcp_listen_input+0x1cc>)
 8010a8a:	f240 2281 	movw	r2, #641	; 0x281
 8010a8e:	496b      	ldr	r1, [pc, #428]	; (8010c3c <tcp_listen_input+0x1d0>)
 8010a90:	486b      	ldr	r0, [pc, #428]	; (8010c40 <tcp_listen_input+0x1d4>)
 8010a92:	f008 ffa5 	bl	80199e0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010a96:	4b67      	ldr	r3, [pc, #412]	; (8010c34 <tcp_listen_input+0x1c8>)
 8010a98:	781b      	ldrb	r3, [r3, #0]
 8010a9a:	f003 0310 	and.w	r3, r3, #16
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d019      	beq.n	8010ad6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010aa2:	4b68      	ldr	r3, [pc, #416]	; (8010c44 <tcp_listen_input+0x1d8>)
 8010aa4:	6819      	ldr	r1, [r3, #0]
 8010aa6:	4b68      	ldr	r3, [pc, #416]	; (8010c48 <tcp_listen_input+0x1dc>)
 8010aa8:	881b      	ldrh	r3, [r3, #0]
 8010aaa:	461a      	mov	r2, r3
 8010aac:	4b67      	ldr	r3, [pc, #412]	; (8010c4c <tcp_listen_input+0x1e0>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ab2:	4b67      	ldr	r3, [pc, #412]	; (8010c50 <tcp_listen_input+0x1e4>)
 8010ab4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ab6:	885b      	ldrh	r3, [r3, #2]
 8010ab8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010aba:	4a65      	ldr	r2, [pc, #404]	; (8010c50 <tcp_listen_input+0x1e4>)
 8010abc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010abe:	8812      	ldrh	r2, [r2, #0]
 8010ac0:	b292      	uxth	r2, r2
 8010ac2:	9202      	str	r2, [sp, #8]
 8010ac4:	9301      	str	r3, [sp, #4]
 8010ac6:	4b63      	ldr	r3, [pc, #396]	; (8010c54 <tcp_listen_input+0x1e8>)
 8010ac8:	9300      	str	r3, [sp, #0]
 8010aca:	4b63      	ldr	r3, [pc, #396]	; (8010c58 <tcp_listen_input+0x1ec>)
 8010acc:	4602      	mov	r2, r0
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f003 fbd8 	bl	8014284 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010ad4:	e0a9      	b.n	8010c2a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010ad6:	4b57      	ldr	r3, [pc, #348]	; (8010c34 <tcp_listen_input+0x1c8>)
 8010ad8:	781b      	ldrb	r3, [r3, #0]
 8010ada:	f003 0302 	and.w	r3, r3, #2
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	f000 80a3 	beq.w	8010c2a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	7d5b      	ldrb	r3, [r3, #21]
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7ff f859 	bl	800fba0 <tcp_alloc>
 8010aee:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d111      	bne.n	8010b1a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	699b      	ldr	r3, [r3, #24]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d00a      	beq.n	8010b14 <tcp_listen_input+0xa8>
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	699b      	ldr	r3, [r3, #24]
 8010b02:	687a      	ldr	r2, [r7, #4]
 8010b04:	6910      	ldr	r0, [r2, #16]
 8010b06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010b0a:	2100      	movs	r1, #0
 8010b0c:	4798      	blx	r3
 8010b0e:	4603      	mov	r3, r0
 8010b10:	73bb      	strb	r3, [r7, #14]
      return;
 8010b12:	e08b      	b.n	8010c2c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010b14:	23f0      	movs	r3, #240	; 0xf0
 8010b16:	73bb      	strb	r3, [r7, #14]
      return;
 8010b18:	e088      	b.n	8010c2c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010b1a:	4b50      	ldr	r3, [pc, #320]	; (8010c5c <tcp_listen_input+0x1f0>)
 8010b1c:	695a      	ldr	r2, [r3, #20]
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010b22:	4b4e      	ldr	r3, [pc, #312]	; (8010c5c <tcp_listen_input+0x1f0>)
 8010b24:	691a      	ldr	r2, [r3, #16]
 8010b26:	697b      	ldr	r3, [r7, #20]
 8010b28:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	8ada      	ldrh	r2, [r3, #22]
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010b32:	4b47      	ldr	r3, [pc, #284]	; (8010c50 <tcp_listen_input+0x1e4>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	881b      	ldrh	r3, [r3, #0]
 8010b38:	b29a      	uxth	r2, r3
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	2203      	movs	r2, #3
 8010b42:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010b44:	4b41      	ldr	r3, [pc, #260]	; (8010c4c <tcp_listen_input+0x1e0>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	1c5a      	adds	r2, r3, #1
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010b56:	6978      	ldr	r0, [r7, #20]
 8010b58:	f7ff fa58 	bl	801000c <tcp_next_iss>
 8010b5c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	693a      	ldr	r2, [r7, #16]
 8010b62:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	693a      	ldr	r2, [r7, #16]
 8010b68:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	693a      	ldr	r2, [r7, #16]
 8010b6e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010b70:	697b      	ldr	r3, [r7, #20]
 8010b72:	693a      	ldr	r2, [r7, #16]
 8010b74:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010b76:	4b35      	ldr	r3, [pc, #212]	; (8010c4c <tcp_listen_input+0x1e0>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	1e5a      	subs	r2, r3, #1
 8010b7c:	697b      	ldr	r3, [r7, #20]
 8010b7e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	691a      	ldr	r2, [r3, #16]
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	7a5b      	ldrb	r3, [r3, #9]
 8010b92:	f003 030c 	and.w	r3, r3, #12
 8010b96:	b2da      	uxtb	r2, r3
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	7a1a      	ldrb	r2, [r3, #8]
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010ba4:	4b2e      	ldr	r3, [pc, #184]	; (8010c60 <tcp_listen_input+0x1f4>)
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	60da      	str	r2, [r3, #12]
 8010bac:	4a2c      	ldr	r2, [pc, #176]	; (8010c60 <tcp_listen_input+0x1f4>)
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	6013      	str	r3, [r2, #0]
 8010bb2:	f003 fd29 	bl	8014608 <tcp_timer_needed>
 8010bb6:	4b2b      	ldr	r3, [pc, #172]	; (8010c64 <tcp_listen_input+0x1f8>)
 8010bb8:	2201      	movs	r2, #1
 8010bba:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010bbc:	6978      	ldr	r0, [r7, #20]
 8010bbe:	f001 fd8f 	bl	80126e0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010bc2:	4b23      	ldr	r3, [pc, #140]	; (8010c50 <tcp_listen_input+0x1e4>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	89db      	ldrh	r3, [r3, #14]
 8010bc8:	b29a      	uxth	r2, r3
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010be0:	697b      	ldr	r3, [r7, #20]
 8010be2:	3304      	adds	r3, #4
 8010be4:	4618      	mov	r0, r3
 8010be6:	f005 fad1 	bl	801618c <ip4_route>
 8010bea:	4601      	mov	r1, r0
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	3304      	adds	r3, #4
 8010bf0:	461a      	mov	r2, r3
 8010bf2:	4620      	mov	r0, r4
 8010bf4:	f7ff fa30 	bl	8010058 <tcp_eff_send_mss_netif>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010c00:	2112      	movs	r1, #18
 8010c02:	6978      	ldr	r0, [r7, #20]
 8010c04:	f002 fc9c 	bl	8013540 <tcp_enqueue_flags>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d004      	beq.n	8010c1e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010c14:	2100      	movs	r1, #0
 8010c16:	6978      	ldr	r0, [r7, #20]
 8010c18:	f7fd ff52 	bl	800eac0 <tcp_abandon>
      return;
 8010c1c:	e006      	b.n	8010c2c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010c1e:	6978      	ldr	r0, [r7, #20]
 8010c20:	f002 fd7c 	bl	801371c <tcp_output>
  return;
 8010c24:	e001      	b.n	8010c2a <tcp_listen_input+0x1be>
    return;
 8010c26:	bf00      	nop
 8010c28:	e000      	b.n	8010c2c <tcp_listen_input+0x1c0>
  return;
 8010c2a:	bf00      	nop
}
 8010c2c:	371c      	adds	r7, #28
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd90      	pop	{r4, r7, pc}
 8010c32:	bf00      	nop
 8010c34:	200112e4 	.word	0x200112e4
 8010c38:	0801c978 	.word	0x0801c978
 8010c3c:	0801cb70 	.word	0x0801cb70
 8010c40:	0801c9c4 	.word	0x0801c9c4
 8010c44:	200112dc 	.word	0x200112dc
 8010c48:	200112e2 	.word	0x200112e2
 8010c4c:	200112d8 	.word	0x200112d8
 8010c50:	200112c8 	.word	0x200112c8
 8010c54:	2000a1b4 	.word	0x2000a1b4
 8010c58:	2000a1b8 	.word	0x2000a1b8
 8010c5c:	2000a1a4 	.word	0x2000a1a4
 8010c60:	200112ac 	.word	0x200112ac
 8010c64:	200112b4 	.word	0x200112b4

08010c68 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b086      	sub	sp, #24
 8010c6c:	af04      	add	r7, sp, #16
 8010c6e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010c70:	4b2f      	ldr	r3, [pc, #188]	; (8010d30 <tcp_timewait_input+0xc8>)
 8010c72:	781b      	ldrb	r3, [r3, #0]
 8010c74:	f003 0304 	and.w	r3, r3, #4
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d153      	bne.n	8010d24 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d106      	bne.n	8010c90 <tcp_timewait_input+0x28>
 8010c82:	4b2c      	ldr	r3, [pc, #176]	; (8010d34 <tcp_timewait_input+0xcc>)
 8010c84:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010c88:	492b      	ldr	r1, [pc, #172]	; (8010d38 <tcp_timewait_input+0xd0>)
 8010c8a:	482c      	ldr	r0, [pc, #176]	; (8010d3c <tcp_timewait_input+0xd4>)
 8010c8c:	f008 fea8 	bl	80199e0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010c90:	4b27      	ldr	r3, [pc, #156]	; (8010d30 <tcp_timewait_input+0xc8>)
 8010c92:	781b      	ldrb	r3, [r3, #0]
 8010c94:	f003 0302 	and.w	r3, r3, #2
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d02a      	beq.n	8010cf2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010c9c:	4b28      	ldr	r3, [pc, #160]	; (8010d40 <tcp_timewait_input+0xd8>)
 8010c9e:	681a      	ldr	r2, [r3, #0]
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ca4:	1ad3      	subs	r3, r2, r3
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	db2d      	blt.n	8010d06 <tcp_timewait_input+0x9e>
 8010caa:	4b25      	ldr	r3, [pc, #148]	; (8010d40 <tcp_timewait_input+0xd8>)
 8010cac:	681a      	ldr	r2, [r3, #0]
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cb2:	6879      	ldr	r1, [r7, #4]
 8010cb4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010cb6:	440b      	add	r3, r1
 8010cb8:	1ad3      	subs	r3, r2, r3
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	dc23      	bgt.n	8010d06 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010cbe:	4b21      	ldr	r3, [pc, #132]	; (8010d44 <tcp_timewait_input+0xdc>)
 8010cc0:	6819      	ldr	r1, [r3, #0]
 8010cc2:	4b21      	ldr	r3, [pc, #132]	; (8010d48 <tcp_timewait_input+0xe0>)
 8010cc4:	881b      	ldrh	r3, [r3, #0]
 8010cc6:	461a      	mov	r2, r3
 8010cc8:	4b1d      	ldr	r3, [pc, #116]	; (8010d40 <tcp_timewait_input+0xd8>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010cce:	4b1f      	ldr	r3, [pc, #124]	; (8010d4c <tcp_timewait_input+0xe4>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010cd2:	885b      	ldrh	r3, [r3, #2]
 8010cd4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010cd6:	4a1d      	ldr	r2, [pc, #116]	; (8010d4c <tcp_timewait_input+0xe4>)
 8010cd8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010cda:	8812      	ldrh	r2, [r2, #0]
 8010cdc:	b292      	uxth	r2, r2
 8010cde:	9202      	str	r2, [sp, #8]
 8010ce0:	9301      	str	r3, [sp, #4]
 8010ce2:	4b1b      	ldr	r3, [pc, #108]	; (8010d50 <tcp_timewait_input+0xe8>)
 8010ce4:	9300      	str	r3, [sp, #0]
 8010ce6:	4b1b      	ldr	r3, [pc, #108]	; (8010d54 <tcp_timewait_input+0xec>)
 8010ce8:	4602      	mov	r2, r0
 8010cea:	6878      	ldr	r0, [r7, #4]
 8010cec:	f003 faca 	bl	8014284 <tcp_rst>
      return;
 8010cf0:	e01b      	b.n	8010d2a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010cf2:	4b0f      	ldr	r3, [pc, #60]	; (8010d30 <tcp_timewait_input+0xc8>)
 8010cf4:	781b      	ldrb	r3, [r3, #0]
 8010cf6:	f003 0301 	and.w	r3, r3, #1
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d003      	beq.n	8010d06 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010cfe:	4b16      	ldr	r3, [pc, #88]	; (8010d58 <tcp_timewait_input+0xf0>)
 8010d00:	681a      	ldr	r2, [r3, #0]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010d06:	4b10      	ldr	r3, [pc, #64]	; (8010d48 <tcp_timewait_input+0xe0>)
 8010d08:	881b      	ldrh	r3, [r3, #0]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d00c      	beq.n	8010d28 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	8b5b      	ldrh	r3, [r3, #26]
 8010d12:	f043 0302 	orr.w	r3, r3, #2
 8010d16:	b29a      	uxth	r2, r3
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f002 fcfd 	bl	801371c <tcp_output>
  }
  return;
 8010d22:	e001      	b.n	8010d28 <tcp_timewait_input+0xc0>
    return;
 8010d24:	bf00      	nop
 8010d26:	e000      	b.n	8010d2a <tcp_timewait_input+0xc2>
  return;
 8010d28:	bf00      	nop
}
 8010d2a:	3708      	adds	r7, #8
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}
 8010d30:	200112e4 	.word	0x200112e4
 8010d34:	0801c978 	.word	0x0801c978
 8010d38:	0801cb90 	.word	0x0801cb90
 8010d3c:	0801c9c4 	.word	0x0801c9c4
 8010d40:	200112d8 	.word	0x200112d8
 8010d44:	200112dc 	.word	0x200112dc
 8010d48:	200112e2 	.word	0x200112e2
 8010d4c:	200112c8 	.word	0x200112c8
 8010d50:	2000a1b4 	.word	0x2000a1b4
 8010d54:	2000a1b8 	.word	0x2000a1b8
 8010d58:	200112a0 	.word	0x200112a0

08010d5c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010d5c:	b590      	push	{r4, r7, lr}
 8010d5e:	b08d      	sub	sp, #52	; 0x34
 8010d60:	af04      	add	r7, sp, #16
 8010d62:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010d64:	2300      	movs	r3, #0
 8010d66:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d106      	bne.n	8010d80 <tcp_process+0x24>
 8010d72:	4b9d      	ldr	r3, [pc, #628]	; (8010fe8 <tcp_process+0x28c>)
 8010d74:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010d78:	499c      	ldr	r1, [pc, #624]	; (8010fec <tcp_process+0x290>)
 8010d7a:	489d      	ldr	r0, [pc, #628]	; (8010ff0 <tcp_process+0x294>)
 8010d7c:	f008 fe30 	bl	80199e0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010d80:	4b9c      	ldr	r3, [pc, #624]	; (8010ff4 <tcp_process+0x298>)
 8010d82:	781b      	ldrb	r3, [r3, #0]
 8010d84:	f003 0304 	and.w	r3, r3, #4
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d04e      	beq.n	8010e2a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	7d1b      	ldrb	r3, [r3, #20]
 8010d90:	2b02      	cmp	r3, #2
 8010d92:	d108      	bne.n	8010da6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010d98:	4b97      	ldr	r3, [pc, #604]	; (8010ff8 <tcp_process+0x29c>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	d123      	bne.n	8010de8 <tcp_process+0x8c>
        acceptable = 1;
 8010da0:	2301      	movs	r3, #1
 8010da2:	76fb      	strb	r3, [r7, #27]
 8010da4:	e020      	b.n	8010de8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010daa:	4b94      	ldr	r3, [pc, #592]	; (8010ffc <tcp_process+0x2a0>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	429a      	cmp	r2, r3
 8010db0:	d102      	bne.n	8010db8 <tcp_process+0x5c>
        acceptable = 1;
 8010db2:	2301      	movs	r3, #1
 8010db4:	76fb      	strb	r3, [r7, #27]
 8010db6:	e017      	b.n	8010de8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010db8:	4b90      	ldr	r3, [pc, #576]	; (8010ffc <tcp_process+0x2a0>)
 8010dba:	681a      	ldr	r2, [r3, #0]
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dc0:	1ad3      	subs	r3, r2, r3
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	db10      	blt.n	8010de8 <tcp_process+0x8c>
 8010dc6:	4b8d      	ldr	r3, [pc, #564]	; (8010ffc <tcp_process+0x2a0>)
 8010dc8:	681a      	ldr	r2, [r3, #0]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dce:	6879      	ldr	r1, [r7, #4]
 8010dd0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010dd2:	440b      	add	r3, r1
 8010dd4:	1ad3      	subs	r3, r2, r3
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	dc06      	bgt.n	8010de8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	8b5b      	ldrh	r3, [r3, #26]
 8010dde:	f043 0302 	orr.w	r3, r3, #2
 8010de2:	b29a      	uxth	r2, r3
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010de8:	7efb      	ldrb	r3, [r7, #27]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d01b      	beq.n	8010e26 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	7d1b      	ldrb	r3, [r3, #20]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d106      	bne.n	8010e04 <tcp_process+0xa8>
 8010df6:	4b7c      	ldr	r3, [pc, #496]	; (8010fe8 <tcp_process+0x28c>)
 8010df8:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010dfc:	4980      	ldr	r1, [pc, #512]	; (8011000 <tcp_process+0x2a4>)
 8010dfe:	487c      	ldr	r0, [pc, #496]	; (8010ff0 <tcp_process+0x294>)
 8010e00:	f008 fdee 	bl	80199e0 <iprintf>
      recv_flags |= TF_RESET;
 8010e04:	4b7f      	ldr	r3, [pc, #508]	; (8011004 <tcp_process+0x2a8>)
 8010e06:	781b      	ldrb	r3, [r3, #0]
 8010e08:	f043 0308 	orr.w	r3, r3, #8
 8010e0c:	b2da      	uxtb	r2, r3
 8010e0e:	4b7d      	ldr	r3, [pc, #500]	; (8011004 <tcp_process+0x2a8>)
 8010e10:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	8b5b      	ldrh	r3, [r3, #26]
 8010e16:	f023 0301 	bic.w	r3, r3, #1
 8010e1a:	b29a      	uxth	r2, r3
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010e20:	f06f 030d 	mvn.w	r3, #13
 8010e24:	e37a      	b.n	801151c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010e26:	2300      	movs	r3, #0
 8010e28:	e378      	b.n	801151c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010e2a:	4b72      	ldr	r3, [pc, #456]	; (8010ff4 <tcp_process+0x298>)
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	f003 0302 	and.w	r3, r3, #2
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d010      	beq.n	8010e58 <tcp_process+0xfc>
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	7d1b      	ldrb	r3, [r3, #20]
 8010e3a:	2b02      	cmp	r3, #2
 8010e3c:	d00c      	beq.n	8010e58 <tcp_process+0xfc>
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	7d1b      	ldrb	r3, [r3, #20]
 8010e42:	2b03      	cmp	r3, #3
 8010e44:	d008      	beq.n	8010e58 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	8b5b      	ldrh	r3, [r3, #26]
 8010e4a:	f043 0302 	orr.w	r3, r3, #2
 8010e4e:	b29a      	uxth	r2, r3
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010e54:	2300      	movs	r3, #0
 8010e56:	e361      	b.n	801151c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	8b5b      	ldrh	r3, [r3, #26]
 8010e5c:	f003 0310 	and.w	r3, r3, #16
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d103      	bne.n	8010e6c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010e64:	4b68      	ldr	r3, [pc, #416]	; (8011008 <tcp_process+0x2ac>)
 8010e66:	681a      	ldr	r2, [r3, #0]
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2200      	movs	r2, #0
 8010e70:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2200      	movs	r2, #0
 8010e78:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f001 fc2f 	bl	80126e0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	7d1b      	ldrb	r3, [r3, #20]
 8010e86:	3b02      	subs	r3, #2
 8010e88:	2b07      	cmp	r3, #7
 8010e8a:	f200 8337 	bhi.w	80114fc <tcp_process+0x7a0>
 8010e8e:	a201      	add	r2, pc, #4	; (adr r2, 8010e94 <tcp_process+0x138>)
 8010e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e94:	08010eb5 	.word	0x08010eb5
 8010e98:	080110e5 	.word	0x080110e5
 8010e9c:	0801125d 	.word	0x0801125d
 8010ea0:	08011287 	.word	0x08011287
 8010ea4:	080113ab 	.word	0x080113ab
 8010ea8:	0801125d 	.word	0x0801125d
 8010eac:	08011437 	.word	0x08011437
 8010eb0:	080114c7 	.word	0x080114c7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010eb4:	4b4f      	ldr	r3, [pc, #316]	; (8010ff4 <tcp_process+0x298>)
 8010eb6:	781b      	ldrb	r3, [r3, #0]
 8010eb8:	f003 0310 	and.w	r3, r3, #16
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	f000 80e4 	beq.w	801108a <tcp_process+0x32e>
 8010ec2:	4b4c      	ldr	r3, [pc, #304]	; (8010ff4 <tcp_process+0x298>)
 8010ec4:	781b      	ldrb	r3, [r3, #0]
 8010ec6:	f003 0302 	and.w	r3, r3, #2
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	f000 80dd 	beq.w	801108a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ed4:	1c5a      	adds	r2, r3, #1
 8010ed6:	4b48      	ldr	r3, [pc, #288]	; (8010ff8 <tcp_process+0x29c>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	429a      	cmp	r2, r3
 8010edc:	f040 80d5 	bne.w	801108a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010ee0:	4b46      	ldr	r3, [pc, #280]	; (8010ffc <tcp_process+0x2a0>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	1c5a      	adds	r2, r3, #1
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010ef2:	4b41      	ldr	r3, [pc, #260]	; (8010ff8 <tcp_process+0x29c>)
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010efa:	4b44      	ldr	r3, [pc, #272]	; (801100c <tcp_process+0x2b0>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	89db      	ldrh	r3, [r3, #14]
 8010f00:	b29a      	uxth	r2, r3
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010f14:	4b39      	ldr	r3, [pc, #228]	; (8010ffc <tcp_process+0x2a0>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	1e5a      	subs	r2, r3, #1
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2204      	movs	r2, #4
 8010f22:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	3304      	adds	r3, #4
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f005 f92d 	bl	801618c <ip4_route>
 8010f32:	4601      	mov	r1, r0
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	3304      	adds	r3, #4
 8010f38:	461a      	mov	r2, r3
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	f7ff f88c 	bl	8010058 <tcp_eff_send_mss_netif>
 8010f40:	4603      	mov	r3, r0
 8010f42:	461a      	mov	r2, r3
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f4c:	009a      	lsls	r2, r3, #2
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f52:	005b      	lsls	r3, r3, #1
 8010f54:	f241 111c 	movw	r1, #4380	; 0x111c
 8010f58:	428b      	cmp	r3, r1
 8010f5a:	bf38      	it	cc
 8010f5c:	460b      	movcc	r3, r1
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d204      	bcs.n	8010f6c <tcp_process+0x210>
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f66:	009b      	lsls	r3, r3, #2
 8010f68:	b29b      	uxth	r3, r3
 8010f6a:	e00d      	b.n	8010f88 <tcp_process+0x22c>
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f70:	005b      	lsls	r3, r3, #1
 8010f72:	f241 121c 	movw	r2, #4380	; 0x111c
 8010f76:	4293      	cmp	r3, r2
 8010f78:	d904      	bls.n	8010f84 <tcp_process+0x228>
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f7e:	005b      	lsls	r3, r3, #1
 8010f80:	b29b      	uxth	r3, r3
 8010f82:	e001      	b.n	8010f88 <tcp_process+0x22c>
 8010f84:	f241 131c 	movw	r3, #4380	; 0x111c
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d106      	bne.n	8010fa6 <tcp_process+0x24a>
 8010f98:	4b13      	ldr	r3, [pc, #76]	; (8010fe8 <tcp_process+0x28c>)
 8010f9a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010f9e:	491c      	ldr	r1, [pc, #112]	; (8011010 <tcp_process+0x2b4>)
 8010fa0:	4813      	ldr	r0, [pc, #76]	; (8010ff0 <tcp_process+0x294>)
 8010fa2:	f008 fd1d 	bl	80199e0 <iprintf>
        --pcb->snd_queuelen;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010fac:	3b01      	subs	r3, #1
 8010fae:	b29a      	uxth	r2, r3
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fba:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010fbc:	69fb      	ldr	r3, [r7, #28]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d12a      	bne.n	8011018 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fc6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010fc8:	69fb      	ldr	r3, [r7, #28]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d106      	bne.n	8010fdc <tcp_process+0x280>
 8010fce:	4b06      	ldr	r3, [pc, #24]	; (8010fe8 <tcp_process+0x28c>)
 8010fd0:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010fd4:	490f      	ldr	r1, [pc, #60]	; (8011014 <tcp_process+0x2b8>)
 8010fd6:	4806      	ldr	r0, [pc, #24]	; (8010ff0 <tcp_process+0x294>)
 8010fd8:	f008 fd02 	bl	80199e0 <iprintf>
          pcb->unsent = rseg->next;
 8010fdc:	69fb      	ldr	r3, [r7, #28]
 8010fde:	681a      	ldr	r2, [r3, #0]
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	66da      	str	r2, [r3, #108]	; 0x6c
 8010fe4:	e01c      	b.n	8011020 <tcp_process+0x2c4>
 8010fe6:	bf00      	nop
 8010fe8:	0801c978 	.word	0x0801c978
 8010fec:	0801cbb0 	.word	0x0801cbb0
 8010ff0:	0801c9c4 	.word	0x0801c9c4
 8010ff4:	200112e4 	.word	0x200112e4
 8010ff8:	200112dc 	.word	0x200112dc
 8010ffc:	200112d8 	.word	0x200112d8
 8011000:	0801cbcc 	.word	0x0801cbcc
 8011004:	200112e5 	.word	0x200112e5
 8011008:	200112a0 	.word	0x200112a0
 801100c:	200112c8 	.word	0x200112c8
 8011010:	0801cbec 	.word	0x0801cbec
 8011014:	0801cc04 	.word	0x0801cc04
        } else {
          pcb->unacked = rseg->next;
 8011018:	69fb      	ldr	r3, [r7, #28]
 801101a:	681a      	ldr	r2, [r3, #0]
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011020:	69f8      	ldr	r0, [r7, #28]
 8011022:	f7fe fc54 	bl	800f8ce <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801102a:	2b00      	cmp	r3, #0
 801102c:	d104      	bne.n	8011038 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011034:	861a      	strh	r2, [r3, #48]	; 0x30
 8011036:	e006      	b.n	8011046 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2200      	movs	r2, #0
 801103c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	2200      	movs	r2, #0
 8011042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801104c:	2b00      	cmp	r3, #0
 801104e:	d00a      	beq.n	8011066 <tcp_process+0x30a>
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011056:	687a      	ldr	r2, [r7, #4]
 8011058:	6910      	ldr	r0, [r2, #16]
 801105a:	2200      	movs	r2, #0
 801105c:	6879      	ldr	r1, [r7, #4]
 801105e:	4798      	blx	r3
 8011060:	4603      	mov	r3, r0
 8011062:	76bb      	strb	r3, [r7, #26]
 8011064:	e001      	b.n	801106a <tcp_process+0x30e>
 8011066:	2300      	movs	r3, #0
 8011068:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801106a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801106e:	f113 0f0d 	cmn.w	r3, #13
 8011072:	d102      	bne.n	801107a <tcp_process+0x31e>
          return ERR_ABRT;
 8011074:	f06f 030c 	mvn.w	r3, #12
 8011078:	e250      	b.n	801151c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	8b5b      	ldrh	r3, [r3, #26]
 801107e:	f043 0302 	orr.w	r3, r3, #2
 8011082:	b29a      	uxth	r2, r3
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011088:	e23a      	b.n	8011500 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801108a:	4b98      	ldr	r3, [pc, #608]	; (80112ec <tcp_process+0x590>)
 801108c:	781b      	ldrb	r3, [r3, #0]
 801108e:	f003 0310 	and.w	r3, r3, #16
 8011092:	2b00      	cmp	r3, #0
 8011094:	f000 8234 	beq.w	8011500 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011098:	4b95      	ldr	r3, [pc, #596]	; (80112f0 <tcp_process+0x594>)
 801109a:	6819      	ldr	r1, [r3, #0]
 801109c:	4b95      	ldr	r3, [pc, #596]	; (80112f4 <tcp_process+0x598>)
 801109e:	881b      	ldrh	r3, [r3, #0]
 80110a0:	461a      	mov	r2, r3
 80110a2:	4b95      	ldr	r3, [pc, #596]	; (80112f8 <tcp_process+0x59c>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80110a8:	4b94      	ldr	r3, [pc, #592]	; (80112fc <tcp_process+0x5a0>)
 80110aa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110ac:	885b      	ldrh	r3, [r3, #2]
 80110ae:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80110b0:	4a92      	ldr	r2, [pc, #584]	; (80112fc <tcp_process+0x5a0>)
 80110b2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110b4:	8812      	ldrh	r2, [r2, #0]
 80110b6:	b292      	uxth	r2, r2
 80110b8:	9202      	str	r2, [sp, #8]
 80110ba:	9301      	str	r3, [sp, #4]
 80110bc:	4b90      	ldr	r3, [pc, #576]	; (8011300 <tcp_process+0x5a4>)
 80110be:	9300      	str	r3, [sp, #0]
 80110c0:	4b90      	ldr	r3, [pc, #576]	; (8011304 <tcp_process+0x5a8>)
 80110c2:	4602      	mov	r2, r0
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f003 f8dd 	bl	8014284 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80110d0:	2b05      	cmp	r3, #5
 80110d2:	f200 8215 	bhi.w	8011500 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2200      	movs	r2, #0
 80110da:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f002 fea7 	bl	8013e30 <tcp_rexmit_rto>
      break;
 80110e2:	e20d      	b.n	8011500 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80110e4:	4b81      	ldr	r3, [pc, #516]	; (80112ec <tcp_process+0x590>)
 80110e6:	781b      	ldrb	r3, [r3, #0]
 80110e8:	f003 0310 	and.w	r3, r3, #16
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	f000 80a1 	beq.w	8011234 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80110f2:	4b7f      	ldr	r3, [pc, #508]	; (80112f0 <tcp_process+0x594>)
 80110f4:	681a      	ldr	r2, [r3, #0]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110fa:	1ad3      	subs	r3, r2, r3
 80110fc:	3b01      	subs	r3, #1
 80110fe:	2b00      	cmp	r3, #0
 8011100:	db7e      	blt.n	8011200 <tcp_process+0x4a4>
 8011102:	4b7b      	ldr	r3, [pc, #492]	; (80112f0 <tcp_process+0x594>)
 8011104:	681a      	ldr	r2, [r3, #0]
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801110a:	1ad3      	subs	r3, r2, r3
 801110c:	2b00      	cmp	r3, #0
 801110e:	dc77      	bgt.n	8011200 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2204      	movs	r2, #4
 8011114:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801111a:	2b00      	cmp	r3, #0
 801111c:	d102      	bne.n	8011124 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801111e:	23fa      	movs	r3, #250	; 0xfa
 8011120:	76bb      	strb	r3, [r7, #26]
 8011122:	e01d      	b.n	8011160 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011128:	699b      	ldr	r3, [r3, #24]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d106      	bne.n	801113c <tcp_process+0x3e0>
 801112e:	4b76      	ldr	r3, [pc, #472]	; (8011308 <tcp_process+0x5ac>)
 8011130:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011134:	4975      	ldr	r1, [pc, #468]	; (801130c <tcp_process+0x5b0>)
 8011136:	4876      	ldr	r0, [pc, #472]	; (8011310 <tcp_process+0x5b4>)
 8011138:	f008 fc52 	bl	80199e0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011140:	699b      	ldr	r3, [r3, #24]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d00a      	beq.n	801115c <tcp_process+0x400>
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801114a:	699b      	ldr	r3, [r3, #24]
 801114c:	687a      	ldr	r2, [r7, #4]
 801114e:	6910      	ldr	r0, [r2, #16]
 8011150:	2200      	movs	r2, #0
 8011152:	6879      	ldr	r1, [r7, #4]
 8011154:	4798      	blx	r3
 8011156:	4603      	mov	r3, r0
 8011158:	76bb      	strb	r3, [r7, #26]
 801115a:	e001      	b.n	8011160 <tcp_process+0x404>
 801115c:	23f0      	movs	r3, #240	; 0xf0
 801115e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011160:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d00a      	beq.n	801117e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011168:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801116c:	f113 0f0d 	cmn.w	r3, #13
 8011170:	d002      	beq.n	8011178 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f7fd fd62 	bl	800ec3c <tcp_abort>
            }
            return ERR_ABRT;
 8011178:	f06f 030c 	mvn.w	r3, #12
 801117c:	e1ce      	b.n	801151c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801117e:	6878      	ldr	r0, [r7, #4]
 8011180:	f000 fae0 	bl	8011744 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011184:	4b63      	ldr	r3, [pc, #396]	; (8011314 <tcp_process+0x5b8>)
 8011186:	881b      	ldrh	r3, [r3, #0]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d005      	beq.n	8011198 <tcp_process+0x43c>
            recv_acked--;
 801118c:	4b61      	ldr	r3, [pc, #388]	; (8011314 <tcp_process+0x5b8>)
 801118e:	881b      	ldrh	r3, [r3, #0]
 8011190:	3b01      	subs	r3, #1
 8011192:	b29a      	uxth	r2, r3
 8011194:	4b5f      	ldr	r3, [pc, #380]	; (8011314 <tcp_process+0x5b8>)
 8011196:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801119c:	009a      	lsls	r2, r3, #2
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111a2:	005b      	lsls	r3, r3, #1
 80111a4:	f241 111c 	movw	r1, #4380	; 0x111c
 80111a8:	428b      	cmp	r3, r1
 80111aa:	bf38      	it	cc
 80111ac:	460b      	movcc	r3, r1
 80111ae:	429a      	cmp	r2, r3
 80111b0:	d204      	bcs.n	80111bc <tcp_process+0x460>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111b6:	009b      	lsls	r3, r3, #2
 80111b8:	b29b      	uxth	r3, r3
 80111ba:	e00d      	b.n	80111d8 <tcp_process+0x47c>
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111c0:	005b      	lsls	r3, r3, #1
 80111c2:	f241 121c 	movw	r2, #4380	; 0x111c
 80111c6:	4293      	cmp	r3, r2
 80111c8:	d904      	bls.n	80111d4 <tcp_process+0x478>
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111ce:	005b      	lsls	r3, r3, #1
 80111d0:	b29b      	uxth	r3, r3
 80111d2:	e001      	b.n	80111d8 <tcp_process+0x47c>
 80111d4:	f241 131c 	movw	r3, #4380	; 0x111c
 80111d8:	687a      	ldr	r2, [r7, #4]
 80111da:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80111de:	4b4e      	ldr	r3, [pc, #312]	; (8011318 <tcp_process+0x5bc>)
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	f003 0320 	and.w	r3, r3, #32
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d037      	beq.n	801125a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	8b5b      	ldrh	r3, [r3, #26]
 80111ee:	f043 0302 	orr.w	r3, r3, #2
 80111f2:	b29a      	uxth	r2, r3
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2207      	movs	r2, #7
 80111fc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80111fe:	e02c      	b.n	801125a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011200:	4b3b      	ldr	r3, [pc, #236]	; (80112f0 <tcp_process+0x594>)
 8011202:	6819      	ldr	r1, [r3, #0]
 8011204:	4b3b      	ldr	r3, [pc, #236]	; (80112f4 <tcp_process+0x598>)
 8011206:	881b      	ldrh	r3, [r3, #0]
 8011208:	461a      	mov	r2, r3
 801120a:	4b3b      	ldr	r3, [pc, #236]	; (80112f8 <tcp_process+0x59c>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011210:	4b3a      	ldr	r3, [pc, #232]	; (80112fc <tcp_process+0x5a0>)
 8011212:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011214:	885b      	ldrh	r3, [r3, #2]
 8011216:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011218:	4a38      	ldr	r2, [pc, #224]	; (80112fc <tcp_process+0x5a0>)
 801121a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801121c:	8812      	ldrh	r2, [r2, #0]
 801121e:	b292      	uxth	r2, r2
 8011220:	9202      	str	r2, [sp, #8]
 8011222:	9301      	str	r3, [sp, #4]
 8011224:	4b36      	ldr	r3, [pc, #216]	; (8011300 <tcp_process+0x5a4>)
 8011226:	9300      	str	r3, [sp, #0]
 8011228:	4b36      	ldr	r3, [pc, #216]	; (8011304 <tcp_process+0x5a8>)
 801122a:	4602      	mov	r2, r0
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f003 f829 	bl	8014284 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011232:	e167      	b.n	8011504 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011234:	4b2d      	ldr	r3, [pc, #180]	; (80112ec <tcp_process+0x590>)
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	f003 0302 	and.w	r3, r3, #2
 801123c:	2b00      	cmp	r3, #0
 801123e:	f000 8161 	beq.w	8011504 <tcp_process+0x7a8>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011246:	1e5a      	subs	r2, r3, #1
 8011248:	4b2b      	ldr	r3, [pc, #172]	; (80112f8 <tcp_process+0x59c>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	429a      	cmp	r2, r3
 801124e:	f040 8159 	bne.w	8011504 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011252:	6878      	ldr	r0, [r7, #4]
 8011254:	f002 fe0e 	bl	8013e74 <tcp_rexmit>
      break;
 8011258:	e154      	b.n	8011504 <tcp_process+0x7a8>
 801125a:	e153      	b.n	8011504 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f000 fa71 	bl	8011744 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011262:	4b2d      	ldr	r3, [pc, #180]	; (8011318 <tcp_process+0x5bc>)
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	f003 0320 	and.w	r3, r3, #32
 801126a:	2b00      	cmp	r3, #0
 801126c:	f000 814c 	beq.w	8011508 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	8b5b      	ldrh	r3, [r3, #26]
 8011274:	f043 0302 	orr.w	r3, r3, #2
 8011278:	b29a      	uxth	r2, r3
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	2207      	movs	r2, #7
 8011282:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011284:	e140      	b.n	8011508 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011286:	6878      	ldr	r0, [r7, #4]
 8011288:	f000 fa5c 	bl	8011744 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801128c:	4b22      	ldr	r3, [pc, #136]	; (8011318 <tcp_process+0x5bc>)
 801128e:	781b      	ldrb	r3, [r3, #0]
 8011290:	f003 0320 	and.w	r3, r3, #32
 8011294:	2b00      	cmp	r3, #0
 8011296:	d071      	beq.n	801137c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011298:	4b14      	ldr	r3, [pc, #80]	; (80112ec <tcp_process+0x590>)
 801129a:	781b      	ldrb	r3, [r3, #0]
 801129c:	f003 0310 	and.w	r3, r3, #16
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d060      	beq.n	8011366 <tcp_process+0x60a>
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80112a8:	4b11      	ldr	r3, [pc, #68]	; (80112f0 <tcp_process+0x594>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	429a      	cmp	r2, r3
 80112ae:	d15a      	bne.n	8011366 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d156      	bne.n	8011366 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	8b5b      	ldrh	r3, [r3, #26]
 80112bc:	f043 0302 	orr.w	r3, r3, #2
 80112c0:	b29a      	uxth	r2, r3
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f7fe fdbc 	bl	800fe44 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80112cc:	4b13      	ldr	r3, [pc, #76]	; (801131c <tcp_process+0x5c0>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	687a      	ldr	r2, [r7, #4]
 80112d2:	429a      	cmp	r2, r3
 80112d4:	d105      	bne.n	80112e2 <tcp_process+0x586>
 80112d6:	4b11      	ldr	r3, [pc, #68]	; (801131c <tcp_process+0x5c0>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	68db      	ldr	r3, [r3, #12]
 80112dc:	4a0f      	ldr	r2, [pc, #60]	; (801131c <tcp_process+0x5c0>)
 80112de:	6013      	str	r3, [r2, #0]
 80112e0:	e02e      	b.n	8011340 <tcp_process+0x5e4>
 80112e2:	4b0e      	ldr	r3, [pc, #56]	; (801131c <tcp_process+0x5c0>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	617b      	str	r3, [r7, #20]
 80112e8:	e027      	b.n	801133a <tcp_process+0x5de>
 80112ea:	bf00      	nop
 80112ec:	200112e4 	.word	0x200112e4
 80112f0:	200112dc 	.word	0x200112dc
 80112f4:	200112e2 	.word	0x200112e2
 80112f8:	200112d8 	.word	0x200112d8
 80112fc:	200112c8 	.word	0x200112c8
 8011300:	2000a1b4 	.word	0x2000a1b4
 8011304:	2000a1b8 	.word	0x2000a1b8
 8011308:	0801c978 	.word	0x0801c978
 801130c:	0801cc18 	.word	0x0801cc18
 8011310:	0801c9c4 	.word	0x0801c9c4
 8011314:	200112e0 	.word	0x200112e0
 8011318:	200112e5 	.word	0x200112e5
 801131c:	200112ac 	.word	0x200112ac
 8011320:	697b      	ldr	r3, [r7, #20]
 8011322:	68db      	ldr	r3, [r3, #12]
 8011324:	687a      	ldr	r2, [r7, #4]
 8011326:	429a      	cmp	r2, r3
 8011328:	d104      	bne.n	8011334 <tcp_process+0x5d8>
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	68da      	ldr	r2, [r3, #12]
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	60da      	str	r2, [r3, #12]
 8011332:	e005      	b.n	8011340 <tcp_process+0x5e4>
 8011334:	697b      	ldr	r3, [r7, #20]
 8011336:	68db      	ldr	r3, [r3, #12]
 8011338:	617b      	str	r3, [r7, #20]
 801133a:	697b      	ldr	r3, [r7, #20]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d1ef      	bne.n	8011320 <tcp_process+0x5c4>
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	2200      	movs	r2, #0
 8011344:	60da      	str	r2, [r3, #12]
 8011346:	4b77      	ldr	r3, [pc, #476]	; (8011524 <tcp_process+0x7c8>)
 8011348:	2201      	movs	r2, #1
 801134a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	220a      	movs	r2, #10
 8011350:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011352:	4b75      	ldr	r3, [pc, #468]	; (8011528 <tcp_process+0x7cc>)
 8011354:	681a      	ldr	r2, [r3, #0]
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	60da      	str	r2, [r3, #12]
 801135a:	4a73      	ldr	r2, [pc, #460]	; (8011528 <tcp_process+0x7cc>)
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	6013      	str	r3, [r2, #0]
 8011360:	f003 f952 	bl	8014608 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011364:	e0d2      	b.n	801150c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	8b5b      	ldrh	r3, [r3, #26]
 801136a:	f043 0302 	orr.w	r3, r3, #2
 801136e:	b29a      	uxth	r2, r3
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2208      	movs	r2, #8
 8011378:	751a      	strb	r2, [r3, #20]
      break;
 801137a:	e0c7      	b.n	801150c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801137c:	4b6b      	ldr	r3, [pc, #428]	; (801152c <tcp_process+0x7d0>)
 801137e:	781b      	ldrb	r3, [r3, #0]
 8011380:	f003 0310 	and.w	r3, r3, #16
 8011384:	2b00      	cmp	r3, #0
 8011386:	f000 80c1 	beq.w	801150c <tcp_process+0x7b0>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801138e:	4b68      	ldr	r3, [pc, #416]	; (8011530 <tcp_process+0x7d4>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	429a      	cmp	r2, r3
 8011394:	f040 80ba 	bne.w	801150c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801139c:	2b00      	cmp	r3, #0
 801139e:	f040 80b5 	bne.w	801150c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	2206      	movs	r2, #6
 80113a6:	751a      	strb	r2, [r3, #20]
      break;
 80113a8:	e0b0      	b.n	801150c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f000 f9ca 	bl	8011744 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80113b0:	4b60      	ldr	r3, [pc, #384]	; (8011534 <tcp_process+0x7d8>)
 80113b2:	781b      	ldrb	r3, [r3, #0]
 80113b4:	f003 0320 	and.w	r3, r3, #32
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	f000 80a9 	beq.w	8011510 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	8b5b      	ldrh	r3, [r3, #26]
 80113c2:	f043 0302 	orr.w	r3, r3, #2
 80113c6:	b29a      	uxth	r2, r3
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	f7fe fd39 	bl	800fe44 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80113d2:	4b59      	ldr	r3, [pc, #356]	; (8011538 <tcp_process+0x7dc>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	687a      	ldr	r2, [r7, #4]
 80113d8:	429a      	cmp	r2, r3
 80113da:	d105      	bne.n	80113e8 <tcp_process+0x68c>
 80113dc:	4b56      	ldr	r3, [pc, #344]	; (8011538 <tcp_process+0x7dc>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	68db      	ldr	r3, [r3, #12]
 80113e2:	4a55      	ldr	r2, [pc, #340]	; (8011538 <tcp_process+0x7dc>)
 80113e4:	6013      	str	r3, [r2, #0]
 80113e6:	e013      	b.n	8011410 <tcp_process+0x6b4>
 80113e8:	4b53      	ldr	r3, [pc, #332]	; (8011538 <tcp_process+0x7dc>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	613b      	str	r3, [r7, #16]
 80113ee:	e00c      	b.n	801140a <tcp_process+0x6ae>
 80113f0:	693b      	ldr	r3, [r7, #16]
 80113f2:	68db      	ldr	r3, [r3, #12]
 80113f4:	687a      	ldr	r2, [r7, #4]
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d104      	bne.n	8011404 <tcp_process+0x6a8>
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	68da      	ldr	r2, [r3, #12]
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	60da      	str	r2, [r3, #12]
 8011402:	e005      	b.n	8011410 <tcp_process+0x6b4>
 8011404:	693b      	ldr	r3, [r7, #16]
 8011406:	68db      	ldr	r3, [r3, #12]
 8011408:	613b      	str	r3, [r7, #16]
 801140a:	693b      	ldr	r3, [r7, #16]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d1ef      	bne.n	80113f0 <tcp_process+0x694>
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2200      	movs	r2, #0
 8011414:	60da      	str	r2, [r3, #12]
 8011416:	4b43      	ldr	r3, [pc, #268]	; (8011524 <tcp_process+0x7c8>)
 8011418:	2201      	movs	r2, #1
 801141a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	220a      	movs	r2, #10
 8011420:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011422:	4b41      	ldr	r3, [pc, #260]	; (8011528 <tcp_process+0x7cc>)
 8011424:	681a      	ldr	r2, [r3, #0]
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	60da      	str	r2, [r3, #12]
 801142a:	4a3f      	ldr	r2, [pc, #252]	; (8011528 <tcp_process+0x7cc>)
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	6013      	str	r3, [r2, #0]
 8011430:	f003 f8ea 	bl	8014608 <tcp_timer_needed>
      }
      break;
 8011434:	e06c      	b.n	8011510 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f000 f984 	bl	8011744 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801143c:	4b3b      	ldr	r3, [pc, #236]	; (801152c <tcp_process+0x7d0>)
 801143e:	781b      	ldrb	r3, [r3, #0]
 8011440:	f003 0310 	and.w	r3, r3, #16
 8011444:	2b00      	cmp	r3, #0
 8011446:	d065      	beq.n	8011514 <tcp_process+0x7b8>
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801144c:	4b38      	ldr	r3, [pc, #224]	; (8011530 <tcp_process+0x7d4>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	429a      	cmp	r2, r3
 8011452:	d15f      	bne.n	8011514 <tcp_process+0x7b8>
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011458:	2b00      	cmp	r3, #0
 801145a:	d15b      	bne.n	8011514 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	f7fe fcf1 	bl	800fe44 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011462:	4b35      	ldr	r3, [pc, #212]	; (8011538 <tcp_process+0x7dc>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	687a      	ldr	r2, [r7, #4]
 8011468:	429a      	cmp	r2, r3
 801146a:	d105      	bne.n	8011478 <tcp_process+0x71c>
 801146c:	4b32      	ldr	r3, [pc, #200]	; (8011538 <tcp_process+0x7dc>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	68db      	ldr	r3, [r3, #12]
 8011472:	4a31      	ldr	r2, [pc, #196]	; (8011538 <tcp_process+0x7dc>)
 8011474:	6013      	str	r3, [r2, #0]
 8011476:	e013      	b.n	80114a0 <tcp_process+0x744>
 8011478:	4b2f      	ldr	r3, [pc, #188]	; (8011538 <tcp_process+0x7dc>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	60fb      	str	r3, [r7, #12]
 801147e:	e00c      	b.n	801149a <tcp_process+0x73e>
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	68db      	ldr	r3, [r3, #12]
 8011484:	687a      	ldr	r2, [r7, #4]
 8011486:	429a      	cmp	r2, r3
 8011488:	d104      	bne.n	8011494 <tcp_process+0x738>
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	68da      	ldr	r2, [r3, #12]
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	60da      	str	r2, [r3, #12]
 8011492:	e005      	b.n	80114a0 <tcp_process+0x744>
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	68db      	ldr	r3, [r3, #12]
 8011498:	60fb      	str	r3, [r7, #12]
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d1ef      	bne.n	8011480 <tcp_process+0x724>
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2200      	movs	r2, #0
 80114a4:	60da      	str	r2, [r3, #12]
 80114a6:	4b1f      	ldr	r3, [pc, #124]	; (8011524 <tcp_process+0x7c8>)
 80114a8:	2201      	movs	r2, #1
 80114aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	220a      	movs	r2, #10
 80114b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80114b2:	4b1d      	ldr	r3, [pc, #116]	; (8011528 <tcp_process+0x7cc>)
 80114b4:	681a      	ldr	r2, [r3, #0]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	60da      	str	r2, [r3, #12]
 80114ba:	4a1b      	ldr	r2, [pc, #108]	; (8011528 <tcp_process+0x7cc>)
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6013      	str	r3, [r2, #0]
 80114c0:	f003 f8a2 	bl	8014608 <tcp_timer_needed>
      }
      break;
 80114c4:	e026      	b.n	8011514 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f000 f93c 	bl	8011744 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80114cc:	4b17      	ldr	r3, [pc, #92]	; (801152c <tcp_process+0x7d0>)
 80114ce:	781b      	ldrb	r3, [r3, #0]
 80114d0:	f003 0310 	and.w	r3, r3, #16
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d01f      	beq.n	8011518 <tcp_process+0x7bc>
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80114dc:	4b14      	ldr	r3, [pc, #80]	; (8011530 <tcp_process+0x7d4>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d119      	bne.n	8011518 <tcp_process+0x7bc>
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d115      	bne.n	8011518 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80114ec:	4b11      	ldr	r3, [pc, #68]	; (8011534 <tcp_process+0x7d8>)
 80114ee:	781b      	ldrb	r3, [r3, #0]
 80114f0:	f043 0310 	orr.w	r3, r3, #16
 80114f4:	b2da      	uxtb	r2, r3
 80114f6:	4b0f      	ldr	r3, [pc, #60]	; (8011534 <tcp_process+0x7d8>)
 80114f8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80114fa:	e00d      	b.n	8011518 <tcp_process+0x7bc>
    default:
      break;
 80114fc:	bf00      	nop
 80114fe:	e00c      	b.n	801151a <tcp_process+0x7be>
      break;
 8011500:	bf00      	nop
 8011502:	e00a      	b.n	801151a <tcp_process+0x7be>
      break;
 8011504:	bf00      	nop
 8011506:	e008      	b.n	801151a <tcp_process+0x7be>
      break;
 8011508:	bf00      	nop
 801150a:	e006      	b.n	801151a <tcp_process+0x7be>
      break;
 801150c:	bf00      	nop
 801150e:	e004      	b.n	801151a <tcp_process+0x7be>
      break;
 8011510:	bf00      	nop
 8011512:	e002      	b.n	801151a <tcp_process+0x7be>
      break;
 8011514:	bf00      	nop
 8011516:	e000      	b.n	801151a <tcp_process+0x7be>
      break;
 8011518:	bf00      	nop
  }
  return ERR_OK;
 801151a:	2300      	movs	r3, #0
}
 801151c:	4618      	mov	r0, r3
 801151e:	3724      	adds	r7, #36	; 0x24
 8011520:	46bd      	mov	sp, r7
 8011522:	bd90      	pop	{r4, r7, pc}
 8011524:	200112b4 	.word	0x200112b4
 8011528:	200112b0 	.word	0x200112b0
 801152c:	200112e4 	.word	0x200112e4
 8011530:	200112dc 	.word	0x200112dc
 8011534:	200112e5 	.word	0x200112e5
 8011538:	200112ac 	.word	0x200112ac

0801153c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801153c:	b590      	push	{r4, r7, lr}
 801153e:	b085      	sub	sp, #20
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
 8011544:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d106      	bne.n	801155a <tcp_oos_insert_segment+0x1e>
 801154c:	4b3b      	ldr	r3, [pc, #236]	; (801163c <tcp_oos_insert_segment+0x100>)
 801154e:	f240 421f 	movw	r2, #1055	; 0x41f
 8011552:	493b      	ldr	r1, [pc, #236]	; (8011640 <tcp_oos_insert_segment+0x104>)
 8011554:	483b      	ldr	r0, [pc, #236]	; (8011644 <tcp_oos_insert_segment+0x108>)
 8011556:	f008 fa43 	bl	80199e0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	68db      	ldr	r3, [r3, #12]
 801155e:	899b      	ldrh	r3, [r3, #12]
 8011560:	b29b      	uxth	r3, r3
 8011562:	4618      	mov	r0, r3
 8011564:	f7fb f978 	bl	800c858 <lwip_htons>
 8011568:	4603      	mov	r3, r0
 801156a:	b2db      	uxtb	r3, r3
 801156c:	f003 0301 	and.w	r3, r3, #1
 8011570:	2b00      	cmp	r3, #0
 8011572:	d028      	beq.n	80115c6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011574:	6838      	ldr	r0, [r7, #0]
 8011576:	f7fe f995 	bl	800f8a4 <tcp_segs_free>
    next = NULL;
 801157a:	2300      	movs	r3, #0
 801157c:	603b      	str	r3, [r7, #0]
 801157e:	e056      	b.n	801162e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	68db      	ldr	r3, [r3, #12]
 8011584:	899b      	ldrh	r3, [r3, #12]
 8011586:	b29b      	uxth	r3, r3
 8011588:	4618      	mov	r0, r3
 801158a:	f7fb f965 	bl	800c858 <lwip_htons>
 801158e:	4603      	mov	r3, r0
 8011590:	b2db      	uxtb	r3, r3
 8011592:	f003 0301 	and.w	r3, r3, #1
 8011596:	2b00      	cmp	r3, #0
 8011598:	d00d      	beq.n	80115b6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	68db      	ldr	r3, [r3, #12]
 801159e:	899b      	ldrh	r3, [r3, #12]
 80115a0:	b29c      	uxth	r4, r3
 80115a2:	2001      	movs	r0, #1
 80115a4:	f7fb f958 	bl	800c858 <lwip_htons>
 80115a8:	4603      	mov	r3, r0
 80115aa:	461a      	mov	r2, r3
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	68db      	ldr	r3, [r3, #12]
 80115b0:	4322      	orrs	r2, r4
 80115b2:	b292      	uxth	r2, r2
 80115b4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80115c0:	68f8      	ldr	r0, [r7, #12]
 80115c2:	f7fe f984 	bl	800f8ce <tcp_seg_free>
    while (next &&
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d00e      	beq.n	80115ea <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	891b      	ldrh	r3, [r3, #8]
 80115d0:	461a      	mov	r2, r3
 80115d2:	4b1d      	ldr	r3, [pc, #116]	; (8011648 <tcp_oos_insert_segment+0x10c>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	441a      	add	r2, r3
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	68db      	ldr	r3, [r3, #12]
 80115dc:	685b      	ldr	r3, [r3, #4]
 80115de:	6839      	ldr	r1, [r7, #0]
 80115e0:	8909      	ldrh	r1, [r1, #8]
 80115e2:	440b      	add	r3, r1
 80115e4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	daca      	bge.n	8011580 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d01e      	beq.n	801162e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	891b      	ldrh	r3, [r3, #8]
 80115f4:	461a      	mov	r2, r3
 80115f6:	4b14      	ldr	r3, [pc, #80]	; (8011648 <tcp_oos_insert_segment+0x10c>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	441a      	add	r2, r3
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	68db      	ldr	r3, [r3, #12]
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011604:	2b00      	cmp	r3, #0
 8011606:	dd12      	ble.n	801162e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	68db      	ldr	r3, [r3, #12]
 801160c:	685b      	ldr	r3, [r3, #4]
 801160e:	b29a      	uxth	r2, r3
 8011610:	4b0d      	ldr	r3, [pc, #52]	; (8011648 <tcp_oos_insert_segment+0x10c>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	b29b      	uxth	r3, r3
 8011616:	1ad3      	subs	r3, r2, r3
 8011618:	b29a      	uxth	r2, r3
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	685a      	ldr	r2, [r3, #4]
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	891b      	ldrh	r3, [r3, #8]
 8011626:	4619      	mov	r1, r3
 8011628:	4610      	mov	r0, r2
 801162a:	f7fc fb91 	bl	800dd50 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	683a      	ldr	r2, [r7, #0]
 8011632:	601a      	str	r2, [r3, #0]
}
 8011634:	bf00      	nop
 8011636:	3714      	adds	r7, #20
 8011638:	46bd      	mov	sp, r7
 801163a:	bd90      	pop	{r4, r7, pc}
 801163c:	0801c978 	.word	0x0801c978
 8011640:	0801cc38 	.word	0x0801cc38
 8011644:	0801c9c4 	.word	0x0801c9c4
 8011648:	200112d8 	.word	0x200112d8

0801164c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801164c:	b5b0      	push	{r4, r5, r7, lr}
 801164e:	b086      	sub	sp, #24
 8011650:	af00      	add	r7, sp, #0
 8011652:	60f8      	str	r0, [r7, #12]
 8011654:	60b9      	str	r1, [r7, #8]
 8011656:	607a      	str	r2, [r7, #4]
 8011658:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801165a:	e03e      	b.n	80116da <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011660:	68bb      	ldr	r3, [r7, #8]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	685b      	ldr	r3, [r3, #4]
 801166a:	4618      	mov	r0, r3
 801166c:	f7fc fd84 	bl	800e178 <pbuf_clen>
 8011670:	4603      	mov	r3, r0
 8011672:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801167a:	8a7a      	ldrh	r2, [r7, #18]
 801167c:	429a      	cmp	r2, r3
 801167e:	d906      	bls.n	801168e <tcp_free_acked_segments+0x42>
 8011680:	4b2a      	ldr	r3, [pc, #168]	; (801172c <tcp_free_acked_segments+0xe0>)
 8011682:	f240 4257 	movw	r2, #1111	; 0x457
 8011686:	492a      	ldr	r1, [pc, #168]	; (8011730 <tcp_free_acked_segments+0xe4>)
 8011688:	482a      	ldr	r0, [pc, #168]	; (8011734 <tcp_free_acked_segments+0xe8>)
 801168a:	f008 f9a9 	bl	80199e0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011694:	8a7b      	ldrh	r3, [r7, #18]
 8011696:	1ad3      	subs	r3, r2, r3
 8011698:	b29a      	uxth	r2, r3
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80116a0:	697b      	ldr	r3, [r7, #20]
 80116a2:	891a      	ldrh	r2, [r3, #8]
 80116a4:	4b24      	ldr	r3, [pc, #144]	; (8011738 <tcp_free_acked_segments+0xec>)
 80116a6:	881b      	ldrh	r3, [r3, #0]
 80116a8:	4413      	add	r3, r2
 80116aa:	b29a      	uxth	r2, r3
 80116ac:	4b22      	ldr	r3, [pc, #136]	; (8011738 <tcp_free_acked_segments+0xec>)
 80116ae:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80116b0:	6978      	ldr	r0, [r7, #20]
 80116b2:	f7fe f90c 	bl	800f8ce <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d00c      	beq.n	80116da <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d109      	bne.n	80116da <tcp_free_acked_segments+0x8e>
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d106      	bne.n	80116da <tcp_free_acked_segments+0x8e>
 80116cc:	4b17      	ldr	r3, [pc, #92]	; (801172c <tcp_free_acked_segments+0xe0>)
 80116ce:	f240 4261 	movw	r2, #1121	; 0x461
 80116d2:	491a      	ldr	r1, [pc, #104]	; (801173c <tcp_free_acked_segments+0xf0>)
 80116d4:	4817      	ldr	r0, [pc, #92]	; (8011734 <tcp_free_acked_segments+0xe8>)
 80116d6:	f008 f983 	bl	80199e0 <iprintf>
  while (seg_list != NULL &&
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d020      	beq.n	8011722 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	68db      	ldr	r3, [r3, #12]
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7fb f8cb 	bl	800c882 <lwip_htonl>
 80116ec:	4604      	mov	r4, r0
 80116ee:	68bb      	ldr	r3, [r7, #8]
 80116f0:	891b      	ldrh	r3, [r3, #8]
 80116f2:	461d      	mov	r5, r3
 80116f4:	68bb      	ldr	r3, [r7, #8]
 80116f6:	68db      	ldr	r3, [r3, #12]
 80116f8:	899b      	ldrh	r3, [r3, #12]
 80116fa:	b29b      	uxth	r3, r3
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7fb f8ab 	bl	800c858 <lwip_htons>
 8011702:	4603      	mov	r3, r0
 8011704:	b2db      	uxtb	r3, r3
 8011706:	f003 0303 	and.w	r3, r3, #3
 801170a:	2b00      	cmp	r3, #0
 801170c:	d001      	beq.n	8011712 <tcp_free_acked_segments+0xc6>
 801170e:	2301      	movs	r3, #1
 8011710:	e000      	b.n	8011714 <tcp_free_acked_segments+0xc8>
 8011712:	2300      	movs	r3, #0
 8011714:	442b      	add	r3, r5
 8011716:	18e2      	adds	r2, r4, r3
 8011718:	4b09      	ldr	r3, [pc, #36]	; (8011740 <tcp_free_acked_segments+0xf4>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801171e:	2b00      	cmp	r3, #0
 8011720:	dd9c      	ble.n	801165c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011722:	68bb      	ldr	r3, [r7, #8]
}
 8011724:	4618      	mov	r0, r3
 8011726:	3718      	adds	r7, #24
 8011728:	46bd      	mov	sp, r7
 801172a:	bdb0      	pop	{r4, r5, r7, pc}
 801172c:	0801c978 	.word	0x0801c978
 8011730:	0801cc60 	.word	0x0801cc60
 8011734:	0801c9c4 	.word	0x0801c9c4
 8011738:	200112e0 	.word	0x200112e0
 801173c:	0801cc88 	.word	0x0801cc88
 8011740:	200112dc 	.word	0x200112dc

08011744 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011744:	b5b0      	push	{r4, r5, r7, lr}
 8011746:	b094      	sub	sp, #80	; 0x50
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801174c:	2300      	movs	r3, #0
 801174e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d106      	bne.n	8011764 <tcp_receive+0x20>
 8011756:	4b91      	ldr	r3, [pc, #580]	; (801199c <tcp_receive+0x258>)
 8011758:	f240 427b 	movw	r2, #1147	; 0x47b
 801175c:	4990      	ldr	r1, [pc, #576]	; (80119a0 <tcp_receive+0x25c>)
 801175e:	4891      	ldr	r0, [pc, #580]	; (80119a4 <tcp_receive+0x260>)
 8011760:	f008 f93e 	bl	80199e0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	7d1b      	ldrb	r3, [r3, #20]
 8011768:	2b03      	cmp	r3, #3
 801176a:	d806      	bhi.n	801177a <tcp_receive+0x36>
 801176c:	4b8b      	ldr	r3, [pc, #556]	; (801199c <tcp_receive+0x258>)
 801176e:	f240 427c 	movw	r2, #1148	; 0x47c
 8011772:	498d      	ldr	r1, [pc, #564]	; (80119a8 <tcp_receive+0x264>)
 8011774:	488b      	ldr	r0, [pc, #556]	; (80119a4 <tcp_receive+0x260>)
 8011776:	f008 f933 	bl	80199e0 <iprintf>

  if (flags & TCP_ACK) {
 801177a:	4b8c      	ldr	r3, [pc, #560]	; (80119ac <tcp_receive+0x268>)
 801177c:	781b      	ldrb	r3, [r3, #0]
 801177e:	f003 0310 	and.w	r3, r3, #16
 8011782:	2b00      	cmp	r3, #0
 8011784:	f000 8264 	beq.w	8011c50 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801178e:	461a      	mov	r2, r3
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011794:	4413      	add	r3, r2
 8011796:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801179c:	4b84      	ldr	r3, [pc, #528]	; (80119b0 <tcp_receive+0x26c>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	1ad3      	subs	r3, r2, r3
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	db1b      	blt.n	80117de <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80117aa:	4b81      	ldr	r3, [pc, #516]	; (80119b0 <tcp_receive+0x26c>)
 80117ac:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d106      	bne.n	80117c0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80117b6:	4b7f      	ldr	r3, [pc, #508]	; (80119b4 <tcp_receive+0x270>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	1ad3      	subs	r3, r2, r3
 80117bc:	2b00      	cmp	r3, #0
 80117be:	db0e      	blt.n	80117de <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80117c4:	4b7b      	ldr	r3, [pc, #492]	; (80119b4 <tcp_receive+0x270>)
 80117c6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d125      	bne.n	8011818 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80117cc:	4b7a      	ldr	r3, [pc, #488]	; (80119b8 <tcp_receive+0x274>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	89db      	ldrh	r3, [r3, #14]
 80117d2:	b29a      	uxth	r2, r3
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80117da:	429a      	cmp	r2, r3
 80117dc:	d91c      	bls.n	8011818 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80117de:	4b76      	ldr	r3, [pc, #472]	; (80119b8 <tcp_receive+0x274>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	89db      	ldrh	r3, [r3, #14]
 80117e4:	b29a      	uxth	r2, r3
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d205      	bcs.n	8011808 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011808:	4b69      	ldr	r3, [pc, #420]	; (80119b0 <tcp_receive+0x26c>)
 801180a:	681a      	ldr	r2, [r3, #0]
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011810:	4b68      	ldr	r3, [pc, #416]	; (80119b4 <tcp_receive+0x270>)
 8011812:	681a      	ldr	r2, [r3, #0]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011818:	4b66      	ldr	r3, [pc, #408]	; (80119b4 <tcp_receive+0x270>)
 801181a:	681a      	ldr	r2, [r3, #0]
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011820:	1ad3      	subs	r3, r2, r3
 8011822:	2b00      	cmp	r3, #0
 8011824:	dc58      	bgt.n	80118d8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011826:	4b65      	ldr	r3, [pc, #404]	; (80119bc <tcp_receive+0x278>)
 8011828:	881b      	ldrh	r3, [r3, #0]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d14b      	bne.n	80118c6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011832:	687a      	ldr	r2, [r7, #4]
 8011834:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011838:	4413      	add	r3, r2
 801183a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801183c:	429a      	cmp	r2, r3
 801183e:	d142      	bne.n	80118c6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011846:	2b00      	cmp	r3, #0
 8011848:	db3d      	blt.n	80118c6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801184e:	4b59      	ldr	r3, [pc, #356]	; (80119b4 <tcp_receive+0x270>)
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	429a      	cmp	r2, r3
 8011854:	d137      	bne.n	80118c6 <tcp_receive+0x182>
              found_dupack = 1;
 8011856:	2301      	movs	r3, #1
 8011858:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011860:	2bff      	cmp	r3, #255	; 0xff
 8011862:	d007      	beq.n	8011874 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801186a:	3301      	adds	r3, #1
 801186c:	b2da      	uxtb	r2, r3
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801187a:	2b03      	cmp	r3, #3
 801187c:	d91b      	bls.n	80118b6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011888:	4413      	add	r3, r2
 801188a:	b29a      	uxth	r2, r3
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011892:	429a      	cmp	r2, r3
 8011894:	d30a      	bcc.n	80118ac <tcp_receive+0x168>
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118a0:	4413      	add	r3, r2
 80118a2:	b29a      	uxth	r2, r3
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80118aa:	e004      	b.n	80118b6 <tcp_receive+0x172>
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80118bc:	2b02      	cmp	r3, #2
 80118be:	d902      	bls.n	80118c6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f002 fb43 	bl	8013f4c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80118c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	f040 8161 	bne.w	8011b90 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2200      	movs	r2, #0
 80118d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80118d6:	e15b      	b.n	8011b90 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80118d8:	4b36      	ldr	r3, [pc, #216]	; (80119b4 <tcp_receive+0x270>)
 80118da:	681a      	ldr	r2, [r3, #0]
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118e0:	1ad3      	subs	r3, r2, r3
 80118e2:	3b01      	subs	r3, #1
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	f2c0 814e 	blt.w	8011b86 <tcp_receive+0x442>
 80118ea:	4b32      	ldr	r3, [pc, #200]	; (80119b4 <tcp_receive+0x270>)
 80118ec:	681a      	ldr	r2, [r3, #0]
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80118f2:	1ad3      	subs	r3, r2, r3
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	f300 8146 	bgt.w	8011b86 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	8b5b      	ldrh	r3, [r3, #26]
 80118fe:	f003 0304 	and.w	r3, r3, #4
 8011902:	2b00      	cmp	r3, #0
 8011904:	d010      	beq.n	8011928 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	8b5b      	ldrh	r3, [r3, #26]
 801190a:	f023 0304 	bic.w	r3, r3, #4
 801190e:	b29a      	uxth	r2, r3
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2200      	movs	r2, #0
 8011924:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2200      	movs	r2, #0
 801192c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011936:	10db      	asrs	r3, r3, #3
 8011938:	b21b      	sxth	r3, r3
 801193a:	b29a      	uxth	r2, r3
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011942:	b29b      	uxth	r3, r3
 8011944:	4413      	add	r3, r2
 8011946:	b29b      	uxth	r3, r3
 8011948:	b21a      	sxth	r2, r3
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011950:	4b18      	ldr	r3, [pc, #96]	; (80119b4 <tcp_receive+0x270>)
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	b29a      	uxth	r2, r3
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801195a:	b29b      	uxth	r3, r3
 801195c:	1ad3      	subs	r3, r2, r3
 801195e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2200      	movs	r2, #0
 8011964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011968:	4b12      	ldr	r3, [pc, #72]	; (80119b4 <tcp_receive+0x270>)
 801196a:	681a      	ldr	r2, [r3, #0]
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	7d1b      	ldrb	r3, [r3, #20]
 8011974:	2b03      	cmp	r3, #3
 8011976:	f240 8097 	bls.w	8011aa8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011986:	429a      	cmp	r2, r3
 8011988:	d245      	bcs.n	8011a16 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	8b5b      	ldrh	r3, [r3, #26]
 801198e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011992:	2b00      	cmp	r3, #0
 8011994:	d014      	beq.n	80119c0 <tcp_receive+0x27c>
 8011996:	2301      	movs	r3, #1
 8011998:	e013      	b.n	80119c2 <tcp_receive+0x27e>
 801199a:	bf00      	nop
 801199c:	0801c978 	.word	0x0801c978
 80119a0:	0801cca8 	.word	0x0801cca8
 80119a4:	0801c9c4 	.word	0x0801c9c4
 80119a8:	0801ccc4 	.word	0x0801ccc4
 80119ac:	200112e4 	.word	0x200112e4
 80119b0:	200112d8 	.word	0x200112d8
 80119b4:	200112dc 	.word	0x200112dc
 80119b8:	200112c8 	.word	0x200112c8
 80119bc:	200112e2 	.word	0x200112e2
 80119c0:	2302      	movs	r3, #2
 80119c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80119c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80119ca:	b29a      	uxth	r2, r3
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119d0:	fb12 f303 	smulbb	r3, r2, r3
 80119d4:	b29b      	uxth	r3, r3
 80119d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80119d8:	4293      	cmp	r3, r2
 80119da:	bf28      	it	cs
 80119dc:	4613      	movcs	r3, r2
 80119de:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80119e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80119e8:	4413      	add	r3, r2
 80119ea:	b29a      	uxth	r2, r3
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d309      	bcc.n	8011a0a <tcp_receive+0x2c6>
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80119fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80119fe:	4413      	add	r3, r2
 8011a00:	b29a      	uxth	r2, r3
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011a08:	e04e      	b.n	8011aa8 <tcp_receive+0x364>
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a10:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011a14:	e048      	b.n	8011aa8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011a1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011a1e:	4413      	add	r3, r2
 8011a20:	b29a      	uxth	r2, r3
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011a28:	429a      	cmp	r2, r3
 8011a2a:	d309      	bcc.n	8011a40 <tcp_receive+0x2fc>
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011a32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011a34:	4413      	add	r3, r2
 8011a36:	b29a      	uxth	r2, r3
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011a3e:	e004      	b.n	8011a4a <tcp_receive+0x306>
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d326      	bcc.n	8011aa8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011a66:	1ad3      	subs	r3, r2, r3
 8011a68:	b29a      	uxth	r2, r3
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a7a:	4413      	add	r3, r2
 8011a7c:	b29a      	uxth	r2, r3
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011a84:	429a      	cmp	r2, r3
 8011a86:	d30a      	bcc.n	8011a9e <tcp_receive+0x35a>
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a92:	4413      	add	r3, r2
 8011a94:	b29a      	uxth	r2, r3
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011a9c:	e004      	b.n	8011aa8 <tcp_receive+0x364>
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011aa4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ab0:	4a98      	ldr	r2, [pc, #608]	; (8011d14 <tcp_receive+0x5d0>)
 8011ab2:	6878      	ldr	r0, [r7, #4]
 8011ab4:	f7ff fdca 	bl	801164c <tcp_free_acked_segments>
 8011ab8:	4602      	mov	r2, r0
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ac6:	4a94      	ldr	r2, [pc, #592]	; (8011d18 <tcp_receive+0x5d4>)
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	f7ff fdbf 	bl	801164c <tcp_free_acked_segments>
 8011ace:	4602      	mov	r2, r0
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d104      	bne.n	8011ae6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ae2:	861a      	strh	r2, [r3, #48]	; 0x30
 8011ae4:	e002      	b.n	8011aec <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	2200      	movs	r2, #0
 8011aea:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2200      	movs	r2, #0
 8011af0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d103      	bne.n	8011b02 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	2200      	movs	r2, #0
 8011afe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011b08:	4b84      	ldr	r3, [pc, #528]	; (8011d1c <tcp_receive+0x5d8>)
 8011b0a:	881b      	ldrh	r3, [r3, #0]
 8011b0c:	4413      	add	r3, r2
 8011b0e:	b29a      	uxth	r2, r3
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	8b5b      	ldrh	r3, [r3, #26]
 8011b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d035      	beq.n	8011b8e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d118      	bne.n	8011b5c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d00c      	beq.n	8011b4c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b3a:	68db      	ldr	r3, [r3, #12]
 8011b3c:	685b      	ldr	r3, [r3, #4]
 8011b3e:	4618      	mov	r0, r3
 8011b40:	f7fa fe9f 	bl	800c882 <lwip_htonl>
 8011b44:	4603      	mov	r3, r0
 8011b46:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	dc20      	bgt.n	8011b8e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	8b5b      	ldrh	r3, [r3, #26]
 8011b50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011b54:	b29a      	uxth	r2, r3
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011b5a:	e018      	b.n	8011b8e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b64:	68db      	ldr	r3, [r3, #12]
 8011b66:	685b      	ldr	r3, [r3, #4]
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f7fa fe8a 	bl	800c882 <lwip_htonl>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	1ae3      	subs	r3, r4, r3
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	dc0b      	bgt.n	8011b8e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	8b5b      	ldrh	r3, [r3, #26]
 8011b7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011b7e:	b29a      	uxth	r2, r3
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011b84:	e003      	b.n	8011b8e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f002 fbce 	bl	8014328 <tcp_send_empty_ack>
 8011b8c:	e000      	b.n	8011b90 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011b8e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d05b      	beq.n	8011c50 <tcp_receive+0x50c>
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011b9c:	4b60      	ldr	r3, [pc, #384]	; (8011d20 <tcp_receive+0x5dc>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	1ad3      	subs	r3, r2, r3
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	da54      	bge.n	8011c50 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011ba6:	4b5f      	ldr	r3, [pc, #380]	; (8011d24 <tcp_receive+0x5e0>)
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	b29a      	uxth	r2, r3
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bb0:	b29b      	uxth	r3, r3
 8011bb2:	1ad3      	subs	r3, r2, r3
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011bba:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011bc4:	10db      	asrs	r3, r3, #3
 8011bc6:	b21b      	sxth	r3, r3
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	1ad3      	subs	r3, r2, r3
 8011bcc:	b29b      	uxth	r3, r3
 8011bce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011bd8:	b29a      	uxth	r2, r3
 8011bda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011bde:	4413      	add	r3, r2
 8011be0:	b29b      	uxth	r3, r3
 8011be2:	b21a      	sxth	r2, r3
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011be8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	da05      	bge.n	8011bfc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011bf0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011bf4:	425b      	negs	r3, r3
 8011bf6:	b29b      	uxth	r3, r3
 8011bf8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011bfc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011c06:	109b      	asrs	r3, r3, #2
 8011c08:	b21b      	sxth	r3, r3
 8011c0a:	b29b      	uxth	r3, r3
 8011c0c:	1ad3      	subs	r3, r2, r3
 8011c0e:	b29b      	uxth	r3, r3
 8011c10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011c1a:	b29a      	uxth	r2, r3
 8011c1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011c20:	4413      	add	r3, r2
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	b21a      	sxth	r2, r3
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011c30:	10db      	asrs	r3, r3, #3
 8011c32:	b21b      	sxth	r3, r3
 8011c34:	b29a      	uxth	r2, r3
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011c3c:	b29b      	uxth	r3, r3
 8011c3e:	4413      	add	r3, r2
 8011c40:	b29b      	uxth	r3, r3
 8011c42:	b21a      	sxth	r2, r3
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011c50:	4b35      	ldr	r3, [pc, #212]	; (8011d28 <tcp_receive+0x5e4>)
 8011c52:	881b      	ldrh	r3, [r3, #0]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	f000 84e2 	beq.w	801261e <tcp_receive+0xeda>
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	7d1b      	ldrb	r3, [r3, #20]
 8011c5e:	2b06      	cmp	r3, #6
 8011c60:	f200 84dd 	bhi.w	801261e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c68:	4b30      	ldr	r3, [pc, #192]	; (8011d2c <tcp_receive+0x5e8>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	1ad3      	subs	r3, r2, r3
 8011c6e:	3b01      	subs	r3, #1
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	f2c0 808f 	blt.w	8011d94 <tcp_receive+0x650>
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c7a:	4b2b      	ldr	r3, [pc, #172]	; (8011d28 <tcp_receive+0x5e4>)
 8011c7c:	881b      	ldrh	r3, [r3, #0]
 8011c7e:	4619      	mov	r1, r3
 8011c80:	4b2a      	ldr	r3, [pc, #168]	; (8011d2c <tcp_receive+0x5e8>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	440b      	add	r3, r1
 8011c86:	1ad3      	subs	r3, r2, r3
 8011c88:	3301      	adds	r3, #1
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	f300 8082 	bgt.w	8011d94 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011c90:	4b27      	ldr	r3, [pc, #156]	; (8011d30 <tcp_receive+0x5ec>)
 8011c92:	685b      	ldr	r3, [r3, #4]
 8011c94:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c9a:	4b24      	ldr	r3, [pc, #144]	; (8011d2c <tcp_receive+0x5e8>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	1ad3      	subs	r3, r2, r3
 8011ca0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011ca2:	4b23      	ldr	r3, [pc, #140]	; (8011d30 <tcp_receive+0x5ec>)
 8011ca4:	685b      	ldr	r3, [r3, #4]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d106      	bne.n	8011cb8 <tcp_receive+0x574>
 8011caa:	4b22      	ldr	r3, [pc, #136]	; (8011d34 <tcp_receive+0x5f0>)
 8011cac:	f240 5294 	movw	r2, #1428	; 0x594
 8011cb0:	4921      	ldr	r1, [pc, #132]	; (8011d38 <tcp_receive+0x5f4>)
 8011cb2:	4822      	ldr	r0, [pc, #136]	; (8011d3c <tcp_receive+0x5f8>)
 8011cb4:	f007 fe94 	bl	80199e0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011cbe:	4293      	cmp	r3, r2
 8011cc0:	d906      	bls.n	8011cd0 <tcp_receive+0x58c>
 8011cc2:	4b1c      	ldr	r3, [pc, #112]	; (8011d34 <tcp_receive+0x5f0>)
 8011cc4:	f240 5295 	movw	r2, #1429	; 0x595
 8011cc8:	491d      	ldr	r1, [pc, #116]	; (8011d40 <tcp_receive+0x5fc>)
 8011cca:	481c      	ldr	r0, [pc, #112]	; (8011d3c <tcp_receive+0x5f8>)
 8011ccc:	f007 fe88 	bl	80199e0 <iprintf>
      off = (u16_t)off32;
 8011cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011cd6:	4b16      	ldr	r3, [pc, #88]	; (8011d30 <tcp_receive+0x5ec>)
 8011cd8:	685b      	ldr	r3, [r3, #4]
 8011cda:	891b      	ldrh	r3, [r3, #8]
 8011cdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d906      	bls.n	8011cf2 <tcp_receive+0x5ae>
 8011ce4:	4b13      	ldr	r3, [pc, #76]	; (8011d34 <tcp_receive+0x5f0>)
 8011ce6:	f240 5297 	movw	r2, #1431	; 0x597
 8011cea:	4916      	ldr	r1, [pc, #88]	; (8011d44 <tcp_receive+0x600>)
 8011cec:	4813      	ldr	r0, [pc, #76]	; (8011d3c <tcp_receive+0x5f8>)
 8011cee:	f007 fe77 	bl	80199e0 <iprintf>
      inseg.len -= off;
 8011cf2:	4b0f      	ldr	r3, [pc, #60]	; (8011d30 <tcp_receive+0x5ec>)
 8011cf4:	891a      	ldrh	r2, [r3, #8]
 8011cf6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011cfa:	1ad3      	subs	r3, r2, r3
 8011cfc:	b29a      	uxth	r2, r3
 8011cfe:	4b0c      	ldr	r3, [pc, #48]	; (8011d30 <tcp_receive+0x5ec>)
 8011d00:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011d02:	4b0b      	ldr	r3, [pc, #44]	; (8011d30 <tcp_receive+0x5ec>)
 8011d04:	685b      	ldr	r3, [r3, #4]
 8011d06:	891a      	ldrh	r2, [r3, #8]
 8011d08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d0c:	1ad3      	subs	r3, r2, r3
 8011d0e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011d10:	e02a      	b.n	8011d68 <tcp_receive+0x624>
 8011d12:	bf00      	nop
 8011d14:	0801cce0 	.word	0x0801cce0
 8011d18:	0801cce8 	.word	0x0801cce8
 8011d1c:	200112e0 	.word	0x200112e0
 8011d20:	200112dc 	.word	0x200112dc
 8011d24:	200112a0 	.word	0x200112a0
 8011d28:	200112e2 	.word	0x200112e2
 8011d2c:	200112d8 	.word	0x200112d8
 8011d30:	200112b8 	.word	0x200112b8
 8011d34:	0801c978 	.word	0x0801c978
 8011d38:	0801ccf0 	.word	0x0801ccf0
 8011d3c:	0801c9c4 	.word	0x0801c9c4
 8011d40:	0801cd00 	.word	0x0801cd00
 8011d44:	0801cd10 	.word	0x0801cd10
        off -= p->len;
 8011d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d4a:	895b      	ldrh	r3, [r3, #10]
 8011d4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d50:	1ad3      	subs	r3, r2, r3
 8011d52:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d58:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011d5a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d5e:	2200      	movs	r2, #0
 8011d60:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d6a:	895b      	ldrh	r3, [r3, #10]
 8011d6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d70:	429a      	cmp	r2, r3
 8011d72:	d8e9      	bhi.n	8011d48 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011d74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d78:	4619      	mov	r1, r3
 8011d7a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011d7c:	f7fc f8e8 	bl	800df50 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d84:	4a91      	ldr	r2, [pc, #580]	; (8011fcc <tcp_receive+0x888>)
 8011d86:	6013      	str	r3, [r2, #0]
 8011d88:	4b91      	ldr	r3, [pc, #580]	; (8011fd0 <tcp_receive+0x88c>)
 8011d8a:	68db      	ldr	r3, [r3, #12]
 8011d8c:	4a8f      	ldr	r2, [pc, #572]	; (8011fcc <tcp_receive+0x888>)
 8011d8e:	6812      	ldr	r2, [r2, #0]
 8011d90:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011d92:	e00d      	b.n	8011db0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011d94:	4b8d      	ldr	r3, [pc, #564]	; (8011fcc <tcp_receive+0x888>)
 8011d96:	681a      	ldr	r2, [r3, #0]
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d9c:	1ad3      	subs	r3, r2, r3
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	da06      	bge.n	8011db0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	8b5b      	ldrh	r3, [r3, #26]
 8011da6:	f043 0302 	orr.w	r3, r3, #2
 8011daa:	b29a      	uxth	r2, r3
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011db0:	4b86      	ldr	r3, [pc, #536]	; (8011fcc <tcp_receive+0x888>)
 8011db2:	681a      	ldr	r2, [r3, #0]
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011db8:	1ad3      	subs	r3, r2, r3
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	f2c0 842a 	blt.w	8012614 <tcp_receive+0xed0>
 8011dc0:	4b82      	ldr	r3, [pc, #520]	; (8011fcc <tcp_receive+0x888>)
 8011dc2:	681a      	ldr	r2, [r3, #0]
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dc8:	6879      	ldr	r1, [r7, #4]
 8011dca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011dcc:	440b      	add	r3, r1
 8011dce:	1ad3      	subs	r3, r2, r3
 8011dd0:	3301      	adds	r3, #1
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	f300 841e 	bgt.w	8012614 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ddc:	4b7b      	ldr	r3, [pc, #492]	; (8011fcc <tcp_receive+0x888>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	429a      	cmp	r2, r3
 8011de2:	f040 829a 	bne.w	801231a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011de6:	4b7a      	ldr	r3, [pc, #488]	; (8011fd0 <tcp_receive+0x88c>)
 8011de8:	891c      	ldrh	r4, [r3, #8]
 8011dea:	4b79      	ldr	r3, [pc, #484]	; (8011fd0 <tcp_receive+0x88c>)
 8011dec:	68db      	ldr	r3, [r3, #12]
 8011dee:	899b      	ldrh	r3, [r3, #12]
 8011df0:	b29b      	uxth	r3, r3
 8011df2:	4618      	mov	r0, r3
 8011df4:	f7fa fd30 	bl	800c858 <lwip_htons>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	b2db      	uxtb	r3, r3
 8011dfc:	f003 0303 	and.w	r3, r3, #3
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d001      	beq.n	8011e08 <tcp_receive+0x6c4>
 8011e04:	2301      	movs	r3, #1
 8011e06:	e000      	b.n	8011e0a <tcp_receive+0x6c6>
 8011e08:	2300      	movs	r3, #0
 8011e0a:	4423      	add	r3, r4
 8011e0c:	b29a      	uxth	r2, r3
 8011e0e:	4b71      	ldr	r3, [pc, #452]	; (8011fd4 <tcp_receive+0x890>)
 8011e10:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011e16:	4b6f      	ldr	r3, [pc, #444]	; (8011fd4 <tcp_receive+0x890>)
 8011e18:	881b      	ldrh	r3, [r3, #0]
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	d275      	bcs.n	8011f0a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011e1e:	4b6c      	ldr	r3, [pc, #432]	; (8011fd0 <tcp_receive+0x88c>)
 8011e20:	68db      	ldr	r3, [r3, #12]
 8011e22:	899b      	ldrh	r3, [r3, #12]
 8011e24:	b29b      	uxth	r3, r3
 8011e26:	4618      	mov	r0, r3
 8011e28:	f7fa fd16 	bl	800c858 <lwip_htons>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	b2db      	uxtb	r3, r3
 8011e30:	f003 0301 	and.w	r3, r3, #1
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d01f      	beq.n	8011e78 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011e38:	4b65      	ldr	r3, [pc, #404]	; (8011fd0 <tcp_receive+0x88c>)
 8011e3a:	68db      	ldr	r3, [r3, #12]
 8011e3c:	899b      	ldrh	r3, [r3, #12]
 8011e3e:	b29b      	uxth	r3, r3
 8011e40:	b21b      	sxth	r3, r3
 8011e42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011e46:	b21c      	sxth	r4, r3
 8011e48:	4b61      	ldr	r3, [pc, #388]	; (8011fd0 <tcp_receive+0x88c>)
 8011e4a:	68db      	ldr	r3, [r3, #12]
 8011e4c:	899b      	ldrh	r3, [r3, #12]
 8011e4e:	b29b      	uxth	r3, r3
 8011e50:	4618      	mov	r0, r3
 8011e52:	f7fa fd01 	bl	800c858 <lwip_htons>
 8011e56:	4603      	mov	r3, r0
 8011e58:	b2db      	uxtb	r3, r3
 8011e5a:	b29b      	uxth	r3, r3
 8011e5c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011e60:	b29b      	uxth	r3, r3
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7fa fcf8 	bl	800c858 <lwip_htons>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	b21b      	sxth	r3, r3
 8011e6c:	4323      	orrs	r3, r4
 8011e6e:	b21a      	sxth	r2, r3
 8011e70:	4b57      	ldr	r3, [pc, #348]	; (8011fd0 <tcp_receive+0x88c>)
 8011e72:	68db      	ldr	r3, [r3, #12]
 8011e74:	b292      	uxth	r2, r2
 8011e76:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011e7c:	4b54      	ldr	r3, [pc, #336]	; (8011fd0 <tcp_receive+0x88c>)
 8011e7e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011e80:	4b53      	ldr	r3, [pc, #332]	; (8011fd0 <tcp_receive+0x88c>)
 8011e82:	68db      	ldr	r3, [r3, #12]
 8011e84:	899b      	ldrh	r3, [r3, #12]
 8011e86:	b29b      	uxth	r3, r3
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f7fa fce5 	bl	800c858 <lwip_htons>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	b2db      	uxtb	r3, r3
 8011e92:	f003 0302 	and.w	r3, r3, #2
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d005      	beq.n	8011ea6 <tcp_receive+0x762>
            inseg.len -= 1;
 8011e9a:	4b4d      	ldr	r3, [pc, #308]	; (8011fd0 <tcp_receive+0x88c>)
 8011e9c:	891b      	ldrh	r3, [r3, #8]
 8011e9e:	3b01      	subs	r3, #1
 8011ea0:	b29a      	uxth	r2, r3
 8011ea2:	4b4b      	ldr	r3, [pc, #300]	; (8011fd0 <tcp_receive+0x88c>)
 8011ea4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011ea6:	4b4a      	ldr	r3, [pc, #296]	; (8011fd0 <tcp_receive+0x88c>)
 8011ea8:	685b      	ldr	r3, [r3, #4]
 8011eaa:	4a49      	ldr	r2, [pc, #292]	; (8011fd0 <tcp_receive+0x88c>)
 8011eac:	8912      	ldrh	r2, [r2, #8]
 8011eae:	4611      	mov	r1, r2
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7fb ff4d 	bl	800dd50 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011eb6:	4b46      	ldr	r3, [pc, #280]	; (8011fd0 <tcp_receive+0x88c>)
 8011eb8:	891c      	ldrh	r4, [r3, #8]
 8011eba:	4b45      	ldr	r3, [pc, #276]	; (8011fd0 <tcp_receive+0x88c>)
 8011ebc:	68db      	ldr	r3, [r3, #12]
 8011ebe:	899b      	ldrh	r3, [r3, #12]
 8011ec0:	b29b      	uxth	r3, r3
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f7fa fcc8 	bl	800c858 <lwip_htons>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	b2db      	uxtb	r3, r3
 8011ecc:	f003 0303 	and.w	r3, r3, #3
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d001      	beq.n	8011ed8 <tcp_receive+0x794>
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	e000      	b.n	8011eda <tcp_receive+0x796>
 8011ed8:	2300      	movs	r3, #0
 8011eda:	4423      	add	r3, r4
 8011edc:	b29a      	uxth	r2, r3
 8011ede:	4b3d      	ldr	r3, [pc, #244]	; (8011fd4 <tcp_receive+0x890>)
 8011ee0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011ee2:	4b3c      	ldr	r3, [pc, #240]	; (8011fd4 <tcp_receive+0x890>)
 8011ee4:	881b      	ldrh	r3, [r3, #0]
 8011ee6:	461a      	mov	r2, r3
 8011ee8:	4b38      	ldr	r3, [pc, #224]	; (8011fcc <tcp_receive+0x888>)
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	441a      	add	r2, r3
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ef2:	6879      	ldr	r1, [r7, #4]
 8011ef4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011ef6:	440b      	add	r3, r1
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	d006      	beq.n	8011f0a <tcp_receive+0x7c6>
 8011efc:	4b36      	ldr	r3, [pc, #216]	; (8011fd8 <tcp_receive+0x894>)
 8011efe:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011f02:	4936      	ldr	r1, [pc, #216]	; (8011fdc <tcp_receive+0x898>)
 8011f04:	4836      	ldr	r0, [pc, #216]	; (8011fe0 <tcp_receive+0x89c>)
 8011f06:	f007 fd6b 	bl	80199e0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	f000 80e7 	beq.w	80120e2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011f14:	4b2e      	ldr	r3, [pc, #184]	; (8011fd0 <tcp_receive+0x88c>)
 8011f16:	68db      	ldr	r3, [r3, #12]
 8011f18:	899b      	ldrh	r3, [r3, #12]
 8011f1a:	b29b      	uxth	r3, r3
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f7fa fc9b 	bl	800c858 <lwip_htons>
 8011f22:	4603      	mov	r3, r0
 8011f24:	b2db      	uxtb	r3, r3
 8011f26:	f003 0301 	and.w	r3, r3, #1
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d010      	beq.n	8011f50 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011f2e:	e00a      	b.n	8011f46 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f34:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f3a:	681a      	ldr	r2, [r3, #0]
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011f40:	68f8      	ldr	r0, [r7, #12]
 8011f42:	f7fd fcc4 	bl	800f8ce <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d1f0      	bne.n	8011f30 <tcp_receive+0x7ec>
 8011f4e:	e0c8      	b.n	80120e2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f54:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011f56:	e052      	b.n	8011ffe <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f5a:	68db      	ldr	r3, [r3, #12]
 8011f5c:	899b      	ldrh	r3, [r3, #12]
 8011f5e:	b29b      	uxth	r3, r3
 8011f60:	4618      	mov	r0, r3
 8011f62:	f7fa fc79 	bl	800c858 <lwip_htons>
 8011f66:	4603      	mov	r3, r0
 8011f68:	b2db      	uxtb	r3, r3
 8011f6a:	f003 0301 	and.w	r3, r3, #1
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d03d      	beq.n	8011fee <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011f72:	4b17      	ldr	r3, [pc, #92]	; (8011fd0 <tcp_receive+0x88c>)
 8011f74:	68db      	ldr	r3, [r3, #12]
 8011f76:	899b      	ldrh	r3, [r3, #12]
 8011f78:	b29b      	uxth	r3, r3
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f7fa fc6c 	bl	800c858 <lwip_htons>
 8011f80:	4603      	mov	r3, r0
 8011f82:	b2db      	uxtb	r3, r3
 8011f84:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d130      	bne.n	8011fee <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011f8c:	4b10      	ldr	r3, [pc, #64]	; (8011fd0 <tcp_receive+0x88c>)
 8011f8e:	68db      	ldr	r3, [r3, #12]
 8011f90:	899b      	ldrh	r3, [r3, #12]
 8011f92:	b29c      	uxth	r4, r3
 8011f94:	2001      	movs	r0, #1
 8011f96:	f7fa fc5f 	bl	800c858 <lwip_htons>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	461a      	mov	r2, r3
 8011f9e:	4b0c      	ldr	r3, [pc, #48]	; (8011fd0 <tcp_receive+0x88c>)
 8011fa0:	68db      	ldr	r3, [r3, #12]
 8011fa2:	4322      	orrs	r2, r4
 8011fa4:	b292      	uxth	r2, r2
 8011fa6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011fa8:	4b09      	ldr	r3, [pc, #36]	; (8011fd0 <tcp_receive+0x88c>)
 8011faa:	891c      	ldrh	r4, [r3, #8]
 8011fac:	4b08      	ldr	r3, [pc, #32]	; (8011fd0 <tcp_receive+0x88c>)
 8011fae:	68db      	ldr	r3, [r3, #12]
 8011fb0:	899b      	ldrh	r3, [r3, #12]
 8011fb2:	b29b      	uxth	r3, r3
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f7fa fc4f 	bl	800c858 <lwip_htons>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	b2db      	uxtb	r3, r3
 8011fbe:	f003 0303 	and.w	r3, r3, #3
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d00e      	beq.n	8011fe4 <tcp_receive+0x8a0>
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	e00d      	b.n	8011fe6 <tcp_receive+0x8a2>
 8011fca:	bf00      	nop
 8011fcc:	200112d8 	.word	0x200112d8
 8011fd0:	200112b8 	.word	0x200112b8
 8011fd4:	200112e2 	.word	0x200112e2
 8011fd8:	0801c978 	.word	0x0801c978
 8011fdc:	0801cd20 	.word	0x0801cd20
 8011fe0:	0801c9c4 	.word	0x0801c9c4
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	4423      	add	r3, r4
 8011fe8:	b29a      	uxth	r2, r3
 8011fea:	4b98      	ldr	r3, [pc, #608]	; (801224c <tcp_receive+0xb08>)
 8011fec:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ff0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011ff8:	6938      	ldr	r0, [r7, #16]
 8011ffa:	f7fd fc68 	bl	800f8ce <tcp_seg_free>
            while (next &&
 8011ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012000:	2b00      	cmp	r3, #0
 8012002:	d00e      	beq.n	8012022 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012004:	4b91      	ldr	r3, [pc, #580]	; (801224c <tcp_receive+0xb08>)
 8012006:	881b      	ldrh	r3, [r3, #0]
 8012008:	461a      	mov	r2, r3
 801200a:	4b91      	ldr	r3, [pc, #580]	; (8012250 <tcp_receive+0xb0c>)
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	441a      	add	r2, r3
 8012010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012012:	68db      	ldr	r3, [r3, #12]
 8012014:	685b      	ldr	r3, [r3, #4]
 8012016:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012018:	8909      	ldrh	r1, [r1, #8]
 801201a:	440b      	add	r3, r1
 801201c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801201e:	2b00      	cmp	r3, #0
 8012020:	da9a      	bge.n	8011f58 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012024:	2b00      	cmp	r3, #0
 8012026:	d059      	beq.n	80120dc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8012028:	4b88      	ldr	r3, [pc, #544]	; (801224c <tcp_receive+0xb08>)
 801202a:	881b      	ldrh	r3, [r3, #0]
 801202c:	461a      	mov	r2, r3
 801202e:	4b88      	ldr	r3, [pc, #544]	; (8012250 <tcp_receive+0xb0c>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	441a      	add	r2, r3
 8012034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012036:	68db      	ldr	r3, [r3, #12]
 8012038:	685b      	ldr	r3, [r3, #4]
 801203a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801203c:	2b00      	cmp	r3, #0
 801203e:	dd4d      	ble.n	80120dc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012042:	68db      	ldr	r3, [r3, #12]
 8012044:	685b      	ldr	r3, [r3, #4]
 8012046:	b29a      	uxth	r2, r3
 8012048:	4b81      	ldr	r3, [pc, #516]	; (8012250 <tcp_receive+0xb0c>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	b29b      	uxth	r3, r3
 801204e:	1ad3      	subs	r3, r2, r3
 8012050:	b29a      	uxth	r2, r3
 8012052:	4b80      	ldr	r3, [pc, #512]	; (8012254 <tcp_receive+0xb10>)
 8012054:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012056:	4b7f      	ldr	r3, [pc, #508]	; (8012254 <tcp_receive+0xb10>)
 8012058:	68db      	ldr	r3, [r3, #12]
 801205a:	899b      	ldrh	r3, [r3, #12]
 801205c:	b29b      	uxth	r3, r3
 801205e:	4618      	mov	r0, r3
 8012060:	f7fa fbfa 	bl	800c858 <lwip_htons>
 8012064:	4603      	mov	r3, r0
 8012066:	b2db      	uxtb	r3, r3
 8012068:	f003 0302 	and.w	r3, r3, #2
 801206c:	2b00      	cmp	r3, #0
 801206e:	d005      	beq.n	801207c <tcp_receive+0x938>
                inseg.len -= 1;
 8012070:	4b78      	ldr	r3, [pc, #480]	; (8012254 <tcp_receive+0xb10>)
 8012072:	891b      	ldrh	r3, [r3, #8]
 8012074:	3b01      	subs	r3, #1
 8012076:	b29a      	uxth	r2, r3
 8012078:	4b76      	ldr	r3, [pc, #472]	; (8012254 <tcp_receive+0xb10>)
 801207a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801207c:	4b75      	ldr	r3, [pc, #468]	; (8012254 <tcp_receive+0xb10>)
 801207e:	685b      	ldr	r3, [r3, #4]
 8012080:	4a74      	ldr	r2, [pc, #464]	; (8012254 <tcp_receive+0xb10>)
 8012082:	8912      	ldrh	r2, [r2, #8]
 8012084:	4611      	mov	r1, r2
 8012086:	4618      	mov	r0, r3
 8012088:	f7fb fe62 	bl	800dd50 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801208c:	4b71      	ldr	r3, [pc, #452]	; (8012254 <tcp_receive+0xb10>)
 801208e:	891c      	ldrh	r4, [r3, #8]
 8012090:	4b70      	ldr	r3, [pc, #448]	; (8012254 <tcp_receive+0xb10>)
 8012092:	68db      	ldr	r3, [r3, #12]
 8012094:	899b      	ldrh	r3, [r3, #12]
 8012096:	b29b      	uxth	r3, r3
 8012098:	4618      	mov	r0, r3
 801209a:	f7fa fbdd 	bl	800c858 <lwip_htons>
 801209e:	4603      	mov	r3, r0
 80120a0:	b2db      	uxtb	r3, r3
 80120a2:	f003 0303 	and.w	r3, r3, #3
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d001      	beq.n	80120ae <tcp_receive+0x96a>
 80120aa:	2301      	movs	r3, #1
 80120ac:	e000      	b.n	80120b0 <tcp_receive+0x96c>
 80120ae:	2300      	movs	r3, #0
 80120b0:	4423      	add	r3, r4
 80120b2:	b29a      	uxth	r2, r3
 80120b4:	4b65      	ldr	r3, [pc, #404]	; (801224c <tcp_receive+0xb08>)
 80120b6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80120b8:	4b64      	ldr	r3, [pc, #400]	; (801224c <tcp_receive+0xb08>)
 80120ba:	881b      	ldrh	r3, [r3, #0]
 80120bc:	461a      	mov	r2, r3
 80120be:	4b64      	ldr	r3, [pc, #400]	; (8012250 <tcp_receive+0xb0c>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	441a      	add	r2, r3
 80120c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120c6:	68db      	ldr	r3, [r3, #12]
 80120c8:	685b      	ldr	r3, [r3, #4]
 80120ca:	429a      	cmp	r2, r3
 80120cc:	d006      	beq.n	80120dc <tcp_receive+0x998>
 80120ce:	4b62      	ldr	r3, [pc, #392]	; (8012258 <tcp_receive+0xb14>)
 80120d0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80120d4:	4961      	ldr	r1, [pc, #388]	; (801225c <tcp_receive+0xb18>)
 80120d6:	4862      	ldr	r0, [pc, #392]	; (8012260 <tcp_receive+0xb1c>)
 80120d8:	f007 fc82 	bl	80199e0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80120e0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80120e2:	4b5a      	ldr	r3, [pc, #360]	; (801224c <tcp_receive+0xb08>)
 80120e4:	881b      	ldrh	r3, [r3, #0]
 80120e6:	461a      	mov	r2, r3
 80120e8:	4b59      	ldr	r3, [pc, #356]	; (8012250 <tcp_receive+0xb0c>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	441a      	add	r2, r3
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80120f6:	4b55      	ldr	r3, [pc, #340]	; (801224c <tcp_receive+0xb08>)
 80120f8:	881b      	ldrh	r3, [r3, #0]
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d206      	bcs.n	801210c <tcp_receive+0x9c8>
 80120fe:	4b56      	ldr	r3, [pc, #344]	; (8012258 <tcp_receive+0xb14>)
 8012100:	f240 6207 	movw	r2, #1543	; 0x607
 8012104:	4957      	ldr	r1, [pc, #348]	; (8012264 <tcp_receive+0xb20>)
 8012106:	4856      	ldr	r0, [pc, #344]	; (8012260 <tcp_receive+0xb1c>)
 8012108:	f007 fc6a 	bl	80199e0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012110:	4b4e      	ldr	r3, [pc, #312]	; (801224c <tcp_receive+0xb08>)
 8012112:	881b      	ldrh	r3, [r3, #0]
 8012114:	1ad3      	subs	r3, r2, r3
 8012116:	b29a      	uxth	r2, r3
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f7fc fd99 	bl	800ec54 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012122:	4b4c      	ldr	r3, [pc, #304]	; (8012254 <tcp_receive+0xb10>)
 8012124:	685b      	ldr	r3, [r3, #4]
 8012126:	891b      	ldrh	r3, [r3, #8]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d006      	beq.n	801213a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801212c:	4b49      	ldr	r3, [pc, #292]	; (8012254 <tcp_receive+0xb10>)
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	4a4d      	ldr	r2, [pc, #308]	; (8012268 <tcp_receive+0xb24>)
 8012132:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012134:	4b47      	ldr	r3, [pc, #284]	; (8012254 <tcp_receive+0xb10>)
 8012136:	2200      	movs	r2, #0
 8012138:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801213a:	4b46      	ldr	r3, [pc, #280]	; (8012254 <tcp_receive+0xb10>)
 801213c:	68db      	ldr	r3, [r3, #12]
 801213e:	899b      	ldrh	r3, [r3, #12]
 8012140:	b29b      	uxth	r3, r3
 8012142:	4618      	mov	r0, r3
 8012144:	f7fa fb88 	bl	800c858 <lwip_htons>
 8012148:	4603      	mov	r3, r0
 801214a:	b2db      	uxtb	r3, r3
 801214c:	f003 0301 	and.w	r3, r3, #1
 8012150:	2b00      	cmp	r3, #0
 8012152:	f000 80b8 	beq.w	80122c6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012156:	4b45      	ldr	r3, [pc, #276]	; (801226c <tcp_receive+0xb28>)
 8012158:	781b      	ldrb	r3, [r3, #0]
 801215a:	f043 0320 	orr.w	r3, r3, #32
 801215e:	b2da      	uxtb	r2, r3
 8012160:	4b42      	ldr	r3, [pc, #264]	; (801226c <tcp_receive+0xb28>)
 8012162:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012164:	e0af      	b.n	80122c6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801216a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012170:	68db      	ldr	r3, [r3, #12]
 8012172:	685b      	ldr	r3, [r3, #4]
 8012174:	4a36      	ldr	r2, [pc, #216]	; (8012250 <tcp_receive+0xb0c>)
 8012176:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	891b      	ldrh	r3, [r3, #8]
 801217c:	461c      	mov	r4, r3
 801217e:	68bb      	ldr	r3, [r7, #8]
 8012180:	68db      	ldr	r3, [r3, #12]
 8012182:	899b      	ldrh	r3, [r3, #12]
 8012184:	b29b      	uxth	r3, r3
 8012186:	4618      	mov	r0, r3
 8012188:	f7fa fb66 	bl	800c858 <lwip_htons>
 801218c:	4603      	mov	r3, r0
 801218e:	b2db      	uxtb	r3, r3
 8012190:	f003 0303 	and.w	r3, r3, #3
 8012194:	2b00      	cmp	r3, #0
 8012196:	d001      	beq.n	801219c <tcp_receive+0xa58>
 8012198:	2301      	movs	r3, #1
 801219a:	e000      	b.n	801219e <tcp_receive+0xa5a>
 801219c:	2300      	movs	r3, #0
 801219e:	191a      	adds	r2, r3, r4
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121a4:	441a      	add	r2, r3
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80121ae:	461c      	mov	r4, r3
 80121b0:	68bb      	ldr	r3, [r7, #8]
 80121b2:	891b      	ldrh	r3, [r3, #8]
 80121b4:	461d      	mov	r5, r3
 80121b6:	68bb      	ldr	r3, [r7, #8]
 80121b8:	68db      	ldr	r3, [r3, #12]
 80121ba:	899b      	ldrh	r3, [r3, #12]
 80121bc:	b29b      	uxth	r3, r3
 80121be:	4618      	mov	r0, r3
 80121c0:	f7fa fb4a 	bl	800c858 <lwip_htons>
 80121c4:	4603      	mov	r3, r0
 80121c6:	b2db      	uxtb	r3, r3
 80121c8:	f003 0303 	and.w	r3, r3, #3
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d001      	beq.n	80121d4 <tcp_receive+0xa90>
 80121d0:	2301      	movs	r3, #1
 80121d2:	e000      	b.n	80121d6 <tcp_receive+0xa92>
 80121d4:	2300      	movs	r3, #0
 80121d6:	442b      	add	r3, r5
 80121d8:	429c      	cmp	r4, r3
 80121da:	d206      	bcs.n	80121ea <tcp_receive+0xaa6>
 80121dc:	4b1e      	ldr	r3, [pc, #120]	; (8012258 <tcp_receive+0xb14>)
 80121de:	f240 622b 	movw	r2, #1579	; 0x62b
 80121e2:	4923      	ldr	r1, [pc, #140]	; (8012270 <tcp_receive+0xb2c>)
 80121e4:	481e      	ldr	r0, [pc, #120]	; (8012260 <tcp_receive+0xb1c>)
 80121e6:	f007 fbfb 	bl	80199e0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80121ea:	68bb      	ldr	r3, [r7, #8]
 80121ec:	891b      	ldrh	r3, [r3, #8]
 80121ee:	461c      	mov	r4, r3
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	68db      	ldr	r3, [r3, #12]
 80121f4:	899b      	ldrh	r3, [r3, #12]
 80121f6:	b29b      	uxth	r3, r3
 80121f8:	4618      	mov	r0, r3
 80121fa:	f7fa fb2d 	bl	800c858 <lwip_htons>
 80121fe:	4603      	mov	r3, r0
 8012200:	b2db      	uxtb	r3, r3
 8012202:	f003 0303 	and.w	r3, r3, #3
 8012206:	2b00      	cmp	r3, #0
 8012208:	d001      	beq.n	801220e <tcp_receive+0xaca>
 801220a:	2301      	movs	r3, #1
 801220c:	e000      	b.n	8012210 <tcp_receive+0xacc>
 801220e:	2300      	movs	r3, #0
 8012210:	1919      	adds	r1, r3, r4
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012216:	b28b      	uxth	r3, r1
 8012218:	1ad3      	subs	r3, r2, r3
 801221a:	b29a      	uxth	r2, r3
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f7fc fd17 	bl	800ec54 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	891b      	ldrh	r3, [r3, #8]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d028      	beq.n	8012282 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012230:	4b0d      	ldr	r3, [pc, #52]	; (8012268 <tcp_receive+0xb24>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d01d      	beq.n	8012274 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8012238:	4b0b      	ldr	r3, [pc, #44]	; (8012268 <tcp_receive+0xb24>)
 801223a:	681a      	ldr	r2, [r3, #0]
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	685b      	ldr	r3, [r3, #4]
 8012240:	4619      	mov	r1, r3
 8012242:	4610      	mov	r0, r2
 8012244:	f7fb ffd8 	bl	800e1f8 <pbuf_cat>
 8012248:	e018      	b.n	801227c <tcp_receive+0xb38>
 801224a:	bf00      	nop
 801224c:	200112e2 	.word	0x200112e2
 8012250:	200112d8 	.word	0x200112d8
 8012254:	200112b8 	.word	0x200112b8
 8012258:	0801c978 	.word	0x0801c978
 801225c:	0801cd58 	.word	0x0801cd58
 8012260:	0801c9c4 	.word	0x0801c9c4
 8012264:	0801cd94 	.word	0x0801cd94
 8012268:	200112e8 	.word	0x200112e8
 801226c:	200112e5 	.word	0x200112e5
 8012270:	0801cdb4 	.word	0x0801cdb4
            } else {
              recv_data = cseg->p;
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	685b      	ldr	r3, [r3, #4]
 8012278:	4a70      	ldr	r2, [pc, #448]	; (801243c <tcp_receive+0xcf8>)
 801227a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801227c:	68bb      	ldr	r3, [r7, #8]
 801227e:	2200      	movs	r2, #0
 8012280:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	68db      	ldr	r3, [r3, #12]
 8012286:	899b      	ldrh	r3, [r3, #12]
 8012288:	b29b      	uxth	r3, r3
 801228a:	4618      	mov	r0, r3
 801228c:	f7fa fae4 	bl	800c858 <lwip_htons>
 8012290:	4603      	mov	r3, r0
 8012292:	b2db      	uxtb	r3, r3
 8012294:	f003 0301 	and.w	r3, r3, #1
 8012298:	2b00      	cmp	r3, #0
 801229a:	d00d      	beq.n	80122b8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801229c:	4b68      	ldr	r3, [pc, #416]	; (8012440 <tcp_receive+0xcfc>)
 801229e:	781b      	ldrb	r3, [r3, #0]
 80122a0:	f043 0320 	orr.w	r3, r3, #32
 80122a4:	b2da      	uxtb	r2, r3
 80122a6:	4b66      	ldr	r3, [pc, #408]	; (8012440 <tcp_receive+0xcfc>)
 80122a8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	7d1b      	ldrb	r3, [r3, #20]
 80122ae:	2b04      	cmp	r3, #4
 80122b0:	d102      	bne.n	80122b8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	2207      	movs	r2, #7
 80122b6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80122b8:	68bb      	ldr	r3, [r7, #8]
 80122ba:	681a      	ldr	r2, [r3, #0]
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80122c0:	68b8      	ldr	r0, [r7, #8]
 80122c2:	f7fd fb04 	bl	800f8ce <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d008      	beq.n	80122e0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122d2:	68db      	ldr	r3, [r3, #12]
 80122d4:	685a      	ldr	r2, [r3, #4]
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80122da:	429a      	cmp	r2, r3
 80122dc:	f43f af43 	beq.w	8012166 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	8b5b      	ldrh	r3, [r3, #26]
 80122e4:	f003 0301 	and.w	r3, r3, #1
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d00e      	beq.n	801230a <tcp_receive+0xbc6>
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	8b5b      	ldrh	r3, [r3, #26]
 80122f0:	f023 0301 	bic.w	r3, r3, #1
 80122f4:	b29a      	uxth	r2, r3
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	835a      	strh	r2, [r3, #26]
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	8b5b      	ldrh	r3, [r3, #26]
 80122fe:	f043 0302 	orr.w	r3, r3, #2
 8012302:	b29a      	uxth	r2, r3
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012308:	e188      	b.n	801261c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	8b5b      	ldrh	r3, [r3, #26]
 801230e:	f043 0301 	orr.w	r3, r3, #1
 8012312:	b29a      	uxth	r2, r3
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012318:	e180      	b.n	801261c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801231e:	2b00      	cmp	r3, #0
 8012320:	d106      	bne.n	8012330 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012322:	4848      	ldr	r0, [pc, #288]	; (8012444 <tcp_receive+0xd00>)
 8012324:	f7fd faec 	bl	800f900 <tcp_seg_copy>
 8012328:	4602      	mov	r2, r0
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	675a      	str	r2, [r3, #116]	; 0x74
 801232e:	e16d      	b.n	801260c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012330:	2300      	movs	r3, #0
 8012332:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012338:	63bb      	str	r3, [r7, #56]	; 0x38
 801233a:	e157      	b.n	80125ec <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801233c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801233e:	68db      	ldr	r3, [r3, #12]
 8012340:	685a      	ldr	r2, [r3, #4]
 8012342:	4b41      	ldr	r3, [pc, #260]	; (8012448 <tcp_receive+0xd04>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	429a      	cmp	r2, r3
 8012348:	d11d      	bne.n	8012386 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801234a:	4b3e      	ldr	r3, [pc, #248]	; (8012444 <tcp_receive+0xd00>)
 801234c:	891a      	ldrh	r2, [r3, #8]
 801234e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012350:	891b      	ldrh	r3, [r3, #8]
 8012352:	429a      	cmp	r2, r3
 8012354:	f240 814f 	bls.w	80125f6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012358:	483a      	ldr	r0, [pc, #232]	; (8012444 <tcp_receive+0xd00>)
 801235a:	f7fd fad1 	bl	800f900 <tcp_seg_copy>
 801235e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	2b00      	cmp	r3, #0
 8012364:	f000 8149 	beq.w	80125fa <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8012368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801236a:	2b00      	cmp	r3, #0
 801236c:	d003      	beq.n	8012376 <tcp_receive+0xc32>
                    prev->next = cseg;
 801236e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012370:	697a      	ldr	r2, [r7, #20]
 8012372:	601a      	str	r2, [r3, #0]
 8012374:	e002      	b.n	801237c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	697a      	ldr	r2, [r7, #20]
 801237a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801237c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801237e:	6978      	ldr	r0, [r7, #20]
 8012380:	f7ff f8dc 	bl	801153c <tcp_oos_insert_segment>
                }
                break;
 8012384:	e139      	b.n	80125fa <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012388:	2b00      	cmp	r3, #0
 801238a:	d117      	bne.n	80123bc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801238c:	4b2e      	ldr	r3, [pc, #184]	; (8012448 <tcp_receive+0xd04>)
 801238e:	681a      	ldr	r2, [r3, #0]
 8012390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012392:	68db      	ldr	r3, [r3, #12]
 8012394:	685b      	ldr	r3, [r3, #4]
 8012396:	1ad3      	subs	r3, r2, r3
 8012398:	2b00      	cmp	r3, #0
 801239a:	da57      	bge.n	801244c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801239c:	4829      	ldr	r0, [pc, #164]	; (8012444 <tcp_receive+0xd00>)
 801239e:	f7fd faaf 	bl	800f900 <tcp_seg_copy>
 80123a2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80123a4:	69bb      	ldr	r3, [r7, #24]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	f000 8129 	beq.w	80125fe <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	69ba      	ldr	r2, [r7, #24]
 80123b0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80123b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80123b4:	69b8      	ldr	r0, [r7, #24]
 80123b6:	f7ff f8c1 	bl	801153c <tcp_oos_insert_segment>
                  }
                  break;
 80123ba:	e120      	b.n	80125fe <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80123bc:	4b22      	ldr	r3, [pc, #136]	; (8012448 <tcp_receive+0xd04>)
 80123be:	681a      	ldr	r2, [r3, #0]
 80123c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123c2:	68db      	ldr	r3, [r3, #12]
 80123c4:	685b      	ldr	r3, [r3, #4]
 80123c6:	1ad3      	subs	r3, r2, r3
 80123c8:	3b01      	subs	r3, #1
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	db3e      	blt.n	801244c <tcp_receive+0xd08>
 80123ce:	4b1e      	ldr	r3, [pc, #120]	; (8012448 <tcp_receive+0xd04>)
 80123d0:	681a      	ldr	r2, [r3, #0]
 80123d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123d4:	68db      	ldr	r3, [r3, #12]
 80123d6:	685b      	ldr	r3, [r3, #4]
 80123d8:	1ad3      	subs	r3, r2, r3
 80123da:	3301      	adds	r3, #1
 80123dc:	2b00      	cmp	r3, #0
 80123de:	dc35      	bgt.n	801244c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80123e0:	4818      	ldr	r0, [pc, #96]	; (8012444 <tcp_receive+0xd00>)
 80123e2:	f7fd fa8d 	bl	800f900 <tcp_seg_copy>
 80123e6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80123e8:	69fb      	ldr	r3, [r7, #28]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	f000 8109 	beq.w	8012602 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80123f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123f2:	68db      	ldr	r3, [r3, #12]
 80123f4:	685b      	ldr	r3, [r3, #4]
 80123f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123f8:	8912      	ldrh	r2, [r2, #8]
 80123fa:	441a      	add	r2, r3
 80123fc:	4b12      	ldr	r3, [pc, #72]	; (8012448 <tcp_receive+0xd04>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	1ad3      	subs	r3, r2, r3
 8012402:	2b00      	cmp	r3, #0
 8012404:	dd12      	ble.n	801242c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012406:	4b10      	ldr	r3, [pc, #64]	; (8012448 <tcp_receive+0xd04>)
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	b29a      	uxth	r2, r3
 801240c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801240e:	68db      	ldr	r3, [r3, #12]
 8012410:	685b      	ldr	r3, [r3, #4]
 8012412:	b29b      	uxth	r3, r3
 8012414:	1ad3      	subs	r3, r2, r3
 8012416:	b29a      	uxth	r2, r3
 8012418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801241a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801241c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801241e:	685a      	ldr	r2, [r3, #4]
 8012420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012422:	891b      	ldrh	r3, [r3, #8]
 8012424:	4619      	mov	r1, r3
 8012426:	4610      	mov	r0, r2
 8012428:	f7fb fc92 	bl	800dd50 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801242c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801242e:	69fa      	ldr	r2, [r7, #28]
 8012430:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012432:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012434:	69f8      	ldr	r0, [r7, #28]
 8012436:	f7ff f881 	bl	801153c <tcp_oos_insert_segment>
                  }
                  break;
 801243a:	e0e2      	b.n	8012602 <tcp_receive+0xebe>
 801243c:	200112e8 	.word	0x200112e8
 8012440:	200112e5 	.word	0x200112e5
 8012444:	200112b8 	.word	0x200112b8
 8012448:	200112d8 	.word	0x200112d8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801244c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801244e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	2b00      	cmp	r3, #0
 8012456:	f040 80c6 	bne.w	80125e6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801245a:	4b80      	ldr	r3, [pc, #512]	; (801265c <tcp_receive+0xf18>)
 801245c:	681a      	ldr	r2, [r3, #0]
 801245e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012466:	2b00      	cmp	r3, #0
 8012468:	f340 80bd 	ble.w	80125e6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801246c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801246e:	68db      	ldr	r3, [r3, #12]
 8012470:	899b      	ldrh	r3, [r3, #12]
 8012472:	b29b      	uxth	r3, r3
 8012474:	4618      	mov	r0, r3
 8012476:	f7fa f9ef 	bl	800c858 <lwip_htons>
 801247a:	4603      	mov	r3, r0
 801247c:	b2db      	uxtb	r3, r3
 801247e:	f003 0301 	and.w	r3, r3, #1
 8012482:	2b00      	cmp	r3, #0
 8012484:	f040 80bf 	bne.w	8012606 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012488:	4875      	ldr	r0, [pc, #468]	; (8012660 <tcp_receive+0xf1c>)
 801248a:	f7fd fa39 	bl	800f900 <tcp_seg_copy>
 801248e:	4602      	mov	r2, r0
 8012490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012492:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	2b00      	cmp	r3, #0
 801249a:	f000 80b6 	beq.w	801260a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801249e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124a0:	68db      	ldr	r3, [r3, #12]
 80124a2:	685b      	ldr	r3, [r3, #4]
 80124a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124a6:	8912      	ldrh	r2, [r2, #8]
 80124a8:	441a      	add	r2, r3
 80124aa:	4b6c      	ldr	r3, [pc, #432]	; (801265c <tcp_receive+0xf18>)
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	1ad3      	subs	r3, r2, r3
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	dd12      	ble.n	80124da <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80124b4:	4b69      	ldr	r3, [pc, #420]	; (801265c <tcp_receive+0xf18>)
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	b29a      	uxth	r2, r3
 80124ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124bc:	68db      	ldr	r3, [r3, #12]
 80124be:	685b      	ldr	r3, [r3, #4]
 80124c0:	b29b      	uxth	r3, r3
 80124c2:	1ad3      	subs	r3, r2, r3
 80124c4:	b29a      	uxth	r2, r3
 80124c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80124ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124cc:	685a      	ldr	r2, [r3, #4]
 80124ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d0:	891b      	ldrh	r3, [r3, #8]
 80124d2:	4619      	mov	r1, r3
 80124d4:	4610      	mov	r0, r2
 80124d6:	f7fb fc3b 	bl	800dd50 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80124da:	4b62      	ldr	r3, [pc, #392]	; (8012664 <tcp_receive+0xf20>)
 80124dc:	881b      	ldrh	r3, [r3, #0]
 80124de:	461a      	mov	r2, r3
 80124e0:	4b5e      	ldr	r3, [pc, #376]	; (801265c <tcp_receive+0xf18>)
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	441a      	add	r2, r3
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124ea:	6879      	ldr	r1, [r7, #4]
 80124ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80124ee:	440b      	add	r3, r1
 80124f0:	1ad3      	subs	r3, r2, r3
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	f340 8089 	ble.w	801260a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80124f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	68db      	ldr	r3, [r3, #12]
 80124fe:	899b      	ldrh	r3, [r3, #12]
 8012500:	b29b      	uxth	r3, r3
 8012502:	4618      	mov	r0, r3
 8012504:	f7fa f9a8 	bl	800c858 <lwip_htons>
 8012508:	4603      	mov	r3, r0
 801250a:	b2db      	uxtb	r3, r3
 801250c:	f003 0301 	and.w	r3, r3, #1
 8012510:	2b00      	cmp	r3, #0
 8012512:	d022      	beq.n	801255a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	68db      	ldr	r3, [r3, #12]
 801251a:	899b      	ldrh	r3, [r3, #12]
 801251c:	b29b      	uxth	r3, r3
 801251e:	b21b      	sxth	r3, r3
 8012520:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012524:	b21c      	sxth	r4, r3
 8012526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	68db      	ldr	r3, [r3, #12]
 801252c:	899b      	ldrh	r3, [r3, #12]
 801252e:	b29b      	uxth	r3, r3
 8012530:	4618      	mov	r0, r3
 8012532:	f7fa f991 	bl	800c858 <lwip_htons>
 8012536:	4603      	mov	r3, r0
 8012538:	b2db      	uxtb	r3, r3
 801253a:	b29b      	uxth	r3, r3
 801253c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012540:	b29b      	uxth	r3, r3
 8012542:	4618      	mov	r0, r3
 8012544:	f7fa f988 	bl	800c858 <lwip_htons>
 8012548:	4603      	mov	r3, r0
 801254a:	b21b      	sxth	r3, r3
 801254c:	4323      	orrs	r3, r4
 801254e:	b21a      	sxth	r2, r3
 8012550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	68db      	ldr	r3, [r3, #12]
 8012556:	b292      	uxth	r2, r2
 8012558:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801255e:	b29a      	uxth	r2, r3
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012564:	4413      	add	r3, r2
 8012566:	b299      	uxth	r1, r3
 8012568:	4b3c      	ldr	r3, [pc, #240]	; (801265c <tcp_receive+0xf18>)
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	b29a      	uxth	r2, r3
 801256e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	1a8a      	subs	r2, r1, r2
 8012574:	b292      	uxth	r2, r2
 8012576:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	685a      	ldr	r2, [r3, #4]
 801257e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	891b      	ldrh	r3, [r3, #8]
 8012584:	4619      	mov	r1, r3
 8012586:	4610      	mov	r0, r2
 8012588:	f7fb fbe2 	bl	800dd50 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	891c      	ldrh	r4, [r3, #8]
 8012592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	68db      	ldr	r3, [r3, #12]
 8012598:	899b      	ldrh	r3, [r3, #12]
 801259a:	b29b      	uxth	r3, r3
 801259c:	4618      	mov	r0, r3
 801259e:	f7fa f95b 	bl	800c858 <lwip_htons>
 80125a2:	4603      	mov	r3, r0
 80125a4:	b2db      	uxtb	r3, r3
 80125a6:	f003 0303 	and.w	r3, r3, #3
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d001      	beq.n	80125b2 <tcp_receive+0xe6e>
 80125ae:	2301      	movs	r3, #1
 80125b0:	e000      	b.n	80125b4 <tcp_receive+0xe70>
 80125b2:	2300      	movs	r3, #0
 80125b4:	4423      	add	r3, r4
 80125b6:	b29a      	uxth	r2, r3
 80125b8:	4b2a      	ldr	r3, [pc, #168]	; (8012664 <tcp_receive+0xf20>)
 80125ba:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80125bc:	4b29      	ldr	r3, [pc, #164]	; (8012664 <tcp_receive+0xf20>)
 80125be:	881b      	ldrh	r3, [r3, #0]
 80125c0:	461a      	mov	r2, r3
 80125c2:	4b26      	ldr	r3, [pc, #152]	; (801265c <tcp_receive+0xf18>)
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	441a      	add	r2, r3
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125cc:	6879      	ldr	r1, [r7, #4]
 80125ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80125d0:	440b      	add	r3, r1
 80125d2:	429a      	cmp	r2, r3
 80125d4:	d019      	beq.n	801260a <tcp_receive+0xec6>
 80125d6:	4b24      	ldr	r3, [pc, #144]	; (8012668 <tcp_receive+0xf24>)
 80125d8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80125dc:	4923      	ldr	r1, [pc, #140]	; (801266c <tcp_receive+0xf28>)
 80125de:	4824      	ldr	r0, [pc, #144]	; (8012670 <tcp_receive+0xf2c>)
 80125e0:	f007 f9fe 	bl	80199e0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80125e4:	e011      	b.n	801260a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80125e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80125ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	f47f aea4 	bne.w	801233c <tcp_receive+0xbf8>
 80125f4:	e00a      	b.n	801260c <tcp_receive+0xec8>
                break;
 80125f6:	bf00      	nop
 80125f8:	e008      	b.n	801260c <tcp_receive+0xec8>
                break;
 80125fa:	bf00      	nop
 80125fc:	e006      	b.n	801260c <tcp_receive+0xec8>
                  break;
 80125fe:	bf00      	nop
 8012600:	e004      	b.n	801260c <tcp_receive+0xec8>
                  break;
 8012602:	bf00      	nop
 8012604:	e002      	b.n	801260c <tcp_receive+0xec8>
                  break;
 8012606:	bf00      	nop
 8012608:	e000      	b.n	801260c <tcp_receive+0xec8>
                break;
 801260a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f001 fe8b 	bl	8014328 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012612:	e003      	b.n	801261c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012614:	6878      	ldr	r0, [r7, #4]
 8012616:	f001 fe87 	bl	8014328 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801261a:	e01a      	b.n	8012652 <tcp_receive+0xf0e>
 801261c:	e019      	b.n	8012652 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801261e:	4b0f      	ldr	r3, [pc, #60]	; (801265c <tcp_receive+0xf18>)
 8012620:	681a      	ldr	r2, [r3, #0]
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012626:	1ad3      	subs	r3, r2, r3
 8012628:	2b00      	cmp	r3, #0
 801262a:	db0a      	blt.n	8012642 <tcp_receive+0xefe>
 801262c:	4b0b      	ldr	r3, [pc, #44]	; (801265c <tcp_receive+0xf18>)
 801262e:	681a      	ldr	r2, [r3, #0]
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012634:	6879      	ldr	r1, [r7, #4]
 8012636:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012638:	440b      	add	r3, r1
 801263a:	1ad3      	subs	r3, r2, r3
 801263c:	3301      	adds	r3, #1
 801263e:	2b00      	cmp	r3, #0
 8012640:	dd07      	ble.n	8012652 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	8b5b      	ldrh	r3, [r3, #26]
 8012646:	f043 0302 	orr.w	r3, r3, #2
 801264a:	b29a      	uxth	r2, r3
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012650:	e7ff      	b.n	8012652 <tcp_receive+0xf0e>
 8012652:	bf00      	nop
 8012654:	3750      	adds	r7, #80	; 0x50
 8012656:	46bd      	mov	sp, r7
 8012658:	bdb0      	pop	{r4, r5, r7, pc}
 801265a:	bf00      	nop
 801265c:	200112d8 	.word	0x200112d8
 8012660:	200112b8 	.word	0x200112b8
 8012664:	200112e2 	.word	0x200112e2
 8012668:	0801c978 	.word	0x0801c978
 801266c:	0801cd20 	.word	0x0801cd20
 8012670:	0801c9c4 	.word	0x0801c9c4

08012674 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012674:	b480      	push	{r7}
 8012676:	b083      	sub	sp, #12
 8012678:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801267a:	4b15      	ldr	r3, [pc, #84]	; (80126d0 <tcp_get_next_optbyte+0x5c>)
 801267c:	881b      	ldrh	r3, [r3, #0]
 801267e:	1c5a      	adds	r2, r3, #1
 8012680:	b291      	uxth	r1, r2
 8012682:	4a13      	ldr	r2, [pc, #76]	; (80126d0 <tcp_get_next_optbyte+0x5c>)
 8012684:	8011      	strh	r1, [r2, #0]
 8012686:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012688:	4b12      	ldr	r3, [pc, #72]	; (80126d4 <tcp_get_next_optbyte+0x60>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d004      	beq.n	801269a <tcp_get_next_optbyte+0x26>
 8012690:	4b11      	ldr	r3, [pc, #68]	; (80126d8 <tcp_get_next_optbyte+0x64>)
 8012692:	881b      	ldrh	r3, [r3, #0]
 8012694:	88fa      	ldrh	r2, [r7, #6]
 8012696:	429a      	cmp	r2, r3
 8012698:	d208      	bcs.n	80126ac <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801269a:	4b10      	ldr	r3, [pc, #64]	; (80126dc <tcp_get_next_optbyte+0x68>)
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	3314      	adds	r3, #20
 80126a0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80126a2:	88fb      	ldrh	r3, [r7, #6]
 80126a4:	683a      	ldr	r2, [r7, #0]
 80126a6:	4413      	add	r3, r2
 80126a8:	781b      	ldrb	r3, [r3, #0]
 80126aa:	e00b      	b.n	80126c4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80126ac:	88fb      	ldrh	r3, [r7, #6]
 80126ae:	b2da      	uxtb	r2, r3
 80126b0:	4b09      	ldr	r3, [pc, #36]	; (80126d8 <tcp_get_next_optbyte+0x64>)
 80126b2:	881b      	ldrh	r3, [r3, #0]
 80126b4:	b2db      	uxtb	r3, r3
 80126b6:	1ad3      	subs	r3, r2, r3
 80126b8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80126ba:	4b06      	ldr	r3, [pc, #24]	; (80126d4 <tcp_get_next_optbyte+0x60>)
 80126bc:	681a      	ldr	r2, [r3, #0]
 80126be:	797b      	ldrb	r3, [r7, #5]
 80126c0:	4413      	add	r3, r2
 80126c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80126c4:	4618      	mov	r0, r3
 80126c6:	370c      	adds	r7, #12
 80126c8:	46bd      	mov	sp, r7
 80126ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ce:	4770      	bx	lr
 80126d0:	200112d4 	.word	0x200112d4
 80126d4:	200112d0 	.word	0x200112d0
 80126d8:	200112ce 	.word	0x200112ce
 80126dc:	200112c8 	.word	0x200112c8

080126e0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b084      	sub	sp, #16
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d106      	bne.n	80126fc <tcp_parseopt+0x1c>
 80126ee:	4b32      	ldr	r3, [pc, #200]	; (80127b8 <tcp_parseopt+0xd8>)
 80126f0:	f240 727d 	movw	r2, #1917	; 0x77d
 80126f4:	4931      	ldr	r1, [pc, #196]	; (80127bc <tcp_parseopt+0xdc>)
 80126f6:	4832      	ldr	r0, [pc, #200]	; (80127c0 <tcp_parseopt+0xe0>)
 80126f8:	f007 f972 	bl	80199e0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80126fc:	4b31      	ldr	r3, [pc, #196]	; (80127c4 <tcp_parseopt+0xe4>)
 80126fe:	881b      	ldrh	r3, [r3, #0]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d055      	beq.n	80127b0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012704:	4b30      	ldr	r3, [pc, #192]	; (80127c8 <tcp_parseopt+0xe8>)
 8012706:	2200      	movs	r2, #0
 8012708:	801a      	strh	r2, [r3, #0]
 801270a:	e045      	b.n	8012798 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801270c:	f7ff ffb2 	bl	8012674 <tcp_get_next_optbyte>
 8012710:	4603      	mov	r3, r0
 8012712:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012714:	7bfb      	ldrb	r3, [r7, #15]
 8012716:	2b02      	cmp	r3, #2
 8012718:	d006      	beq.n	8012728 <tcp_parseopt+0x48>
 801271a:	2b02      	cmp	r3, #2
 801271c:	dc2b      	bgt.n	8012776 <tcp_parseopt+0x96>
 801271e:	2b00      	cmp	r3, #0
 8012720:	d041      	beq.n	80127a6 <tcp_parseopt+0xc6>
 8012722:	2b01      	cmp	r3, #1
 8012724:	d127      	bne.n	8012776 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012726:	e037      	b.n	8012798 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012728:	f7ff ffa4 	bl	8012674 <tcp_get_next_optbyte>
 801272c:	4603      	mov	r3, r0
 801272e:	2b04      	cmp	r3, #4
 8012730:	d13b      	bne.n	80127aa <tcp_parseopt+0xca>
 8012732:	4b25      	ldr	r3, [pc, #148]	; (80127c8 <tcp_parseopt+0xe8>)
 8012734:	881b      	ldrh	r3, [r3, #0]
 8012736:	3301      	adds	r3, #1
 8012738:	4a22      	ldr	r2, [pc, #136]	; (80127c4 <tcp_parseopt+0xe4>)
 801273a:	8812      	ldrh	r2, [r2, #0]
 801273c:	4293      	cmp	r3, r2
 801273e:	da34      	bge.n	80127aa <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012740:	f7ff ff98 	bl	8012674 <tcp_get_next_optbyte>
 8012744:	4603      	mov	r3, r0
 8012746:	b29b      	uxth	r3, r3
 8012748:	021b      	lsls	r3, r3, #8
 801274a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801274c:	f7ff ff92 	bl	8012674 <tcp_get_next_optbyte>
 8012750:	4603      	mov	r3, r0
 8012752:	b29a      	uxth	r2, r3
 8012754:	89bb      	ldrh	r3, [r7, #12]
 8012756:	4313      	orrs	r3, r2
 8012758:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801275a:	89bb      	ldrh	r3, [r7, #12]
 801275c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012760:	d804      	bhi.n	801276c <tcp_parseopt+0x8c>
 8012762:	89bb      	ldrh	r3, [r7, #12]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d001      	beq.n	801276c <tcp_parseopt+0x8c>
 8012768:	89ba      	ldrh	r2, [r7, #12]
 801276a:	e001      	b.n	8012770 <tcp_parseopt+0x90>
 801276c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012774:	e010      	b.n	8012798 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012776:	f7ff ff7d 	bl	8012674 <tcp_get_next_optbyte>
 801277a:	4603      	mov	r3, r0
 801277c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801277e:	7afb      	ldrb	r3, [r7, #11]
 8012780:	2b01      	cmp	r3, #1
 8012782:	d914      	bls.n	80127ae <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012784:	7afb      	ldrb	r3, [r7, #11]
 8012786:	b29a      	uxth	r2, r3
 8012788:	4b0f      	ldr	r3, [pc, #60]	; (80127c8 <tcp_parseopt+0xe8>)
 801278a:	881b      	ldrh	r3, [r3, #0]
 801278c:	4413      	add	r3, r2
 801278e:	b29b      	uxth	r3, r3
 8012790:	3b02      	subs	r3, #2
 8012792:	b29a      	uxth	r2, r3
 8012794:	4b0c      	ldr	r3, [pc, #48]	; (80127c8 <tcp_parseopt+0xe8>)
 8012796:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012798:	4b0b      	ldr	r3, [pc, #44]	; (80127c8 <tcp_parseopt+0xe8>)
 801279a:	881a      	ldrh	r2, [r3, #0]
 801279c:	4b09      	ldr	r3, [pc, #36]	; (80127c4 <tcp_parseopt+0xe4>)
 801279e:	881b      	ldrh	r3, [r3, #0]
 80127a0:	429a      	cmp	r2, r3
 80127a2:	d3b3      	bcc.n	801270c <tcp_parseopt+0x2c>
 80127a4:	e004      	b.n	80127b0 <tcp_parseopt+0xd0>
          return;
 80127a6:	bf00      	nop
 80127a8:	e002      	b.n	80127b0 <tcp_parseopt+0xd0>
            return;
 80127aa:	bf00      	nop
 80127ac:	e000      	b.n	80127b0 <tcp_parseopt+0xd0>
            return;
 80127ae:	bf00      	nop
      }
    }
  }
}
 80127b0:	3710      	adds	r7, #16
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}
 80127b6:	bf00      	nop
 80127b8:	0801c978 	.word	0x0801c978
 80127bc:	0801cddc 	.word	0x0801cddc
 80127c0:	0801c9c4 	.word	0x0801c9c4
 80127c4:	200112cc 	.word	0x200112cc
 80127c8:	200112d4 	.word	0x200112d4

080127cc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80127cc:	b480      	push	{r7}
 80127ce:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80127d0:	4b05      	ldr	r3, [pc, #20]	; (80127e8 <tcp_trigger_input_pcb_close+0x1c>)
 80127d2:	781b      	ldrb	r3, [r3, #0]
 80127d4:	f043 0310 	orr.w	r3, r3, #16
 80127d8:	b2da      	uxtb	r2, r3
 80127da:	4b03      	ldr	r3, [pc, #12]	; (80127e8 <tcp_trigger_input_pcb_close+0x1c>)
 80127dc:	701a      	strb	r2, [r3, #0]
}
 80127de:	bf00      	nop
 80127e0:	46bd      	mov	sp, r7
 80127e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e6:	4770      	bx	lr
 80127e8:	200112e5 	.word	0x200112e5

080127ec <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b084      	sub	sp, #16
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	60f8      	str	r0, [r7, #12]
 80127f4:	60b9      	str	r1, [r7, #8]
 80127f6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d00a      	beq.n	8012814 <tcp_route+0x28>
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	7a1b      	ldrb	r3, [r3, #8]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d006      	beq.n	8012814 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	7a1b      	ldrb	r3, [r3, #8]
 801280a:	4618      	mov	r0, r3
 801280c:	f7fb f898 	bl	800d940 <netif_get_by_index>
 8012810:	4603      	mov	r3, r0
 8012812:	e003      	b.n	801281c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f003 fcb9 	bl	801618c <ip4_route>
 801281a:	4603      	mov	r3, r0
  }
}
 801281c:	4618      	mov	r0, r3
 801281e:	3710      	adds	r7, #16
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}

08012824 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012824:	b590      	push	{r4, r7, lr}
 8012826:	b087      	sub	sp, #28
 8012828:	af00      	add	r7, sp, #0
 801282a:	60f8      	str	r0, [r7, #12]
 801282c:	60b9      	str	r1, [r7, #8]
 801282e:	603b      	str	r3, [r7, #0]
 8012830:	4613      	mov	r3, r2
 8012832:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d105      	bne.n	8012846 <tcp_create_segment+0x22>
 801283a:	4b44      	ldr	r3, [pc, #272]	; (801294c <tcp_create_segment+0x128>)
 801283c:	22a3      	movs	r2, #163	; 0xa3
 801283e:	4944      	ldr	r1, [pc, #272]	; (8012950 <tcp_create_segment+0x12c>)
 8012840:	4844      	ldr	r0, [pc, #272]	; (8012954 <tcp_create_segment+0x130>)
 8012842:	f007 f8cd 	bl	80199e0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012846:	68bb      	ldr	r3, [r7, #8]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d105      	bne.n	8012858 <tcp_create_segment+0x34>
 801284c:	4b3f      	ldr	r3, [pc, #252]	; (801294c <tcp_create_segment+0x128>)
 801284e:	22a4      	movs	r2, #164	; 0xa4
 8012850:	4941      	ldr	r1, [pc, #260]	; (8012958 <tcp_create_segment+0x134>)
 8012852:	4840      	ldr	r0, [pc, #256]	; (8012954 <tcp_create_segment+0x130>)
 8012854:	f007 f8c4 	bl	80199e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012858:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801285c:	009b      	lsls	r3, r3, #2
 801285e:	b2db      	uxtb	r3, r3
 8012860:	f003 0304 	and.w	r3, r3, #4
 8012864:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012866:	2003      	movs	r0, #3
 8012868:	f7fa fcde 	bl	800d228 <memp_malloc>
 801286c:	6138      	str	r0, [r7, #16]
 801286e:	693b      	ldr	r3, [r7, #16]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d104      	bne.n	801287e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012874:	68b8      	ldr	r0, [r7, #8]
 8012876:	f7fb fbf1 	bl	800e05c <pbuf_free>
    return NULL;
 801287a:	2300      	movs	r3, #0
 801287c:	e061      	b.n	8012942 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801287e:	693b      	ldr	r3, [r7, #16]
 8012880:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012884:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012886:	693b      	ldr	r3, [r7, #16]
 8012888:	2200      	movs	r2, #0
 801288a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801288c:	693b      	ldr	r3, [r7, #16]
 801288e:	68ba      	ldr	r2, [r7, #8]
 8012890:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012892:	68bb      	ldr	r3, [r7, #8]
 8012894:	891a      	ldrh	r2, [r3, #8]
 8012896:	7dfb      	ldrb	r3, [r7, #23]
 8012898:	b29b      	uxth	r3, r3
 801289a:	429a      	cmp	r2, r3
 801289c:	d205      	bcs.n	80128aa <tcp_create_segment+0x86>
 801289e:	4b2b      	ldr	r3, [pc, #172]	; (801294c <tcp_create_segment+0x128>)
 80128a0:	22b0      	movs	r2, #176	; 0xb0
 80128a2:	492e      	ldr	r1, [pc, #184]	; (801295c <tcp_create_segment+0x138>)
 80128a4:	482b      	ldr	r0, [pc, #172]	; (8012954 <tcp_create_segment+0x130>)
 80128a6:	f007 f89b 	bl	80199e0 <iprintf>
  seg->len = p->tot_len - optlen;
 80128aa:	68bb      	ldr	r3, [r7, #8]
 80128ac:	891a      	ldrh	r2, [r3, #8]
 80128ae:	7dfb      	ldrb	r3, [r7, #23]
 80128b0:	b29b      	uxth	r3, r3
 80128b2:	1ad3      	subs	r3, r2, r3
 80128b4:	b29a      	uxth	r2, r3
 80128b6:	693b      	ldr	r3, [r7, #16]
 80128b8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80128ba:	2114      	movs	r1, #20
 80128bc:	68b8      	ldr	r0, [r7, #8]
 80128be:	f7fb fb37 	bl	800df30 <pbuf_add_header>
 80128c2:	4603      	mov	r3, r0
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d004      	beq.n	80128d2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80128c8:	6938      	ldr	r0, [r7, #16]
 80128ca:	f7fd f800 	bl	800f8ce <tcp_seg_free>
    return NULL;
 80128ce:	2300      	movs	r3, #0
 80128d0:	e037      	b.n	8012942 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80128d2:	693b      	ldr	r3, [r7, #16]
 80128d4:	685b      	ldr	r3, [r3, #4]
 80128d6:	685a      	ldr	r2, [r3, #4]
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	8ada      	ldrh	r2, [r3, #22]
 80128e0:	693b      	ldr	r3, [r7, #16]
 80128e2:	68dc      	ldr	r4, [r3, #12]
 80128e4:	4610      	mov	r0, r2
 80128e6:	f7f9 ffb7 	bl	800c858 <lwip_htons>
 80128ea:	4603      	mov	r3, r0
 80128ec:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	8b1a      	ldrh	r2, [r3, #24]
 80128f2:	693b      	ldr	r3, [r7, #16]
 80128f4:	68dc      	ldr	r4, [r3, #12]
 80128f6:	4610      	mov	r0, r2
 80128f8:	f7f9 ffae 	bl	800c858 <lwip_htons>
 80128fc:	4603      	mov	r3, r0
 80128fe:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012900:	693b      	ldr	r3, [r7, #16]
 8012902:	68dc      	ldr	r4, [r3, #12]
 8012904:	6838      	ldr	r0, [r7, #0]
 8012906:	f7f9 ffbc 	bl	800c882 <lwip_htonl>
 801290a:	4603      	mov	r3, r0
 801290c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801290e:	7dfb      	ldrb	r3, [r7, #23]
 8012910:	089b      	lsrs	r3, r3, #2
 8012912:	b2db      	uxtb	r3, r3
 8012914:	b29b      	uxth	r3, r3
 8012916:	3305      	adds	r3, #5
 8012918:	b29b      	uxth	r3, r3
 801291a:	031b      	lsls	r3, r3, #12
 801291c:	b29a      	uxth	r2, r3
 801291e:	79fb      	ldrb	r3, [r7, #7]
 8012920:	b29b      	uxth	r3, r3
 8012922:	4313      	orrs	r3, r2
 8012924:	b29a      	uxth	r2, r3
 8012926:	693b      	ldr	r3, [r7, #16]
 8012928:	68dc      	ldr	r4, [r3, #12]
 801292a:	4610      	mov	r0, r2
 801292c:	f7f9 ff94 	bl	800c858 <lwip_htons>
 8012930:	4603      	mov	r3, r0
 8012932:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012934:	693b      	ldr	r3, [r7, #16]
 8012936:	68db      	ldr	r3, [r3, #12]
 8012938:	2200      	movs	r2, #0
 801293a:	749a      	strb	r2, [r3, #18]
 801293c:	2200      	movs	r2, #0
 801293e:	74da      	strb	r2, [r3, #19]
  return seg;
 8012940:	693b      	ldr	r3, [r7, #16]
}
 8012942:	4618      	mov	r0, r3
 8012944:	371c      	adds	r7, #28
 8012946:	46bd      	mov	sp, r7
 8012948:	bd90      	pop	{r4, r7, pc}
 801294a:	bf00      	nop
 801294c:	0801cdf8 	.word	0x0801cdf8
 8012950:	0801ce2c 	.word	0x0801ce2c
 8012954:	0801ce4c 	.word	0x0801ce4c
 8012958:	0801ce74 	.word	0x0801ce74
 801295c:	0801ce98 	.word	0x0801ce98

08012960 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b086      	sub	sp, #24
 8012964:	af00      	add	r7, sp, #0
 8012966:	607b      	str	r3, [r7, #4]
 8012968:	4603      	mov	r3, r0
 801296a:	73fb      	strb	r3, [r7, #15]
 801296c:	460b      	mov	r3, r1
 801296e:	81bb      	strh	r3, [r7, #12]
 8012970:	4613      	mov	r3, r2
 8012972:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012974:	89bb      	ldrh	r3, [r7, #12]
 8012976:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d105      	bne.n	801298a <tcp_pbuf_prealloc+0x2a>
 801297e:	4b30      	ldr	r3, [pc, #192]	; (8012a40 <tcp_pbuf_prealloc+0xe0>)
 8012980:	22e8      	movs	r2, #232	; 0xe8
 8012982:	4930      	ldr	r1, [pc, #192]	; (8012a44 <tcp_pbuf_prealloc+0xe4>)
 8012984:	4830      	ldr	r0, [pc, #192]	; (8012a48 <tcp_pbuf_prealloc+0xe8>)
 8012986:	f007 f82b 	bl	80199e0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801298a:	6a3b      	ldr	r3, [r7, #32]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d105      	bne.n	801299c <tcp_pbuf_prealloc+0x3c>
 8012990:	4b2b      	ldr	r3, [pc, #172]	; (8012a40 <tcp_pbuf_prealloc+0xe0>)
 8012992:	22e9      	movs	r2, #233	; 0xe9
 8012994:	492d      	ldr	r1, [pc, #180]	; (8012a4c <tcp_pbuf_prealloc+0xec>)
 8012996:	482c      	ldr	r0, [pc, #176]	; (8012a48 <tcp_pbuf_prealloc+0xe8>)
 8012998:	f007 f822 	bl	80199e0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801299c:	89ba      	ldrh	r2, [r7, #12]
 801299e:	897b      	ldrh	r3, [r7, #10]
 80129a0:	429a      	cmp	r2, r3
 80129a2:	d221      	bcs.n	80129e8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80129a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80129a8:	f003 0302 	and.w	r3, r3, #2
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d111      	bne.n	80129d4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80129b0:	6a3b      	ldr	r3, [r7, #32]
 80129b2:	8b5b      	ldrh	r3, [r3, #26]
 80129b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d115      	bne.n	80129e8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80129bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d007      	beq.n	80129d4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80129c4:	6a3b      	ldr	r3, [r7, #32]
 80129c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d103      	bne.n	80129d4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80129cc:	6a3b      	ldr	r3, [r7, #32]
 80129ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d009      	beq.n	80129e8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80129d4:	89bb      	ldrh	r3, [r7, #12]
 80129d6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80129da:	f023 0203 	bic.w	r2, r3, #3
 80129de:	897b      	ldrh	r3, [r7, #10]
 80129e0:	4293      	cmp	r3, r2
 80129e2:	bf28      	it	cs
 80129e4:	4613      	movcs	r3, r2
 80129e6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80129e8:	8af9      	ldrh	r1, [r7, #22]
 80129ea:	7bfb      	ldrb	r3, [r7, #15]
 80129ec:	f44f 7220 	mov.w	r2, #640	; 0x280
 80129f0:	4618      	mov	r0, r3
 80129f2:	f7fb f84f 	bl	800da94 <pbuf_alloc>
 80129f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80129f8:	693b      	ldr	r3, [r7, #16]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d101      	bne.n	8012a02 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80129fe:	2300      	movs	r3, #0
 8012a00:	e019      	b.n	8012a36 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012a02:	693b      	ldr	r3, [r7, #16]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d006      	beq.n	8012a18 <tcp_pbuf_prealloc+0xb8>
 8012a0a:	4b0d      	ldr	r3, [pc, #52]	; (8012a40 <tcp_pbuf_prealloc+0xe0>)
 8012a0c:	f240 120b 	movw	r2, #267	; 0x10b
 8012a10:	490f      	ldr	r1, [pc, #60]	; (8012a50 <tcp_pbuf_prealloc+0xf0>)
 8012a12:	480d      	ldr	r0, [pc, #52]	; (8012a48 <tcp_pbuf_prealloc+0xe8>)
 8012a14:	f006 ffe4 	bl	80199e0 <iprintf>
  *oversize = p->len - length;
 8012a18:	693b      	ldr	r3, [r7, #16]
 8012a1a:	895a      	ldrh	r2, [r3, #10]
 8012a1c:	89bb      	ldrh	r3, [r7, #12]
 8012a1e:	1ad3      	subs	r3, r2, r3
 8012a20:	b29a      	uxth	r2, r3
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012a26:	693b      	ldr	r3, [r7, #16]
 8012a28:	89ba      	ldrh	r2, [r7, #12]
 8012a2a:	811a      	strh	r2, [r3, #8]
 8012a2c:	693b      	ldr	r3, [r7, #16]
 8012a2e:	891a      	ldrh	r2, [r3, #8]
 8012a30:	693b      	ldr	r3, [r7, #16]
 8012a32:	815a      	strh	r2, [r3, #10]
  return p;
 8012a34:	693b      	ldr	r3, [r7, #16]
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	3718      	adds	r7, #24
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}
 8012a3e:	bf00      	nop
 8012a40:	0801cdf8 	.word	0x0801cdf8
 8012a44:	0801ceb0 	.word	0x0801ceb0
 8012a48:	0801ce4c 	.word	0x0801ce4c
 8012a4c:	0801ced4 	.word	0x0801ced4
 8012a50:	0801cef4 	.word	0x0801cef4

08012a54 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b082      	sub	sp, #8
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	460b      	mov	r3, r1
 8012a5e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d106      	bne.n	8012a74 <tcp_write_checks+0x20>
 8012a66:	4b33      	ldr	r3, [pc, #204]	; (8012b34 <tcp_write_checks+0xe0>)
 8012a68:	f240 1233 	movw	r2, #307	; 0x133
 8012a6c:	4932      	ldr	r1, [pc, #200]	; (8012b38 <tcp_write_checks+0xe4>)
 8012a6e:	4833      	ldr	r0, [pc, #204]	; (8012b3c <tcp_write_checks+0xe8>)
 8012a70:	f006 ffb6 	bl	80199e0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	7d1b      	ldrb	r3, [r3, #20]
 8012a78:	2b04      	cmp	r3, #4
 8012a7a:	d00e      	beq.n	8012a9a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012a80:	2b07      	cmp	r3, #7
 8012a82:	d00a      	beq.n	8012a9a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012a88:	2b02      	cmp	r3, #2
 8012a8a:	d006      	beq.n	8012a9a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012a90:	2b03      	cmp	r3, #3
 8012a92:	d002      	beq.n	8012a9a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012a94:	f06f 030a 	mvn.w	r3, #10
 8012a98:	e048      	b.n	8012b2c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8012a9a:	887b      	ldrh	r3, [r7, #2]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d101      	bne.n	8012aa4 <tcp_write_checks+0x50>
    return ERR_OK;
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	e043      	b.n	8012b2c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012aaa:	887a      	ldrh	r2, [r7, #2]
 8012aac:	429a      	cmp	r2, r3
 8012aae:	d909      	bls.n	8012ac4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	8b5b      	ldrh	r3, [r3, #26]
 8012ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ab8:	b29a      	uxth	r2, r3
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ac2:	e033      	b.n	8012b2c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012aca:	2b08      	cmp	r3, #8
 8012acc:	d909      	bls.n	8012ae2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	8b5b      	ldrh	r3, [r3, #26]
 8012ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ad6:	b29a      	uxth	r2, r3
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ae0:	e024      	b.n	8012b2c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d00f      	beq.n	8012b0c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d11a      	bne.n	8012b2a <tcp_write_checks+0xd6>
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d116      	bne.n	8012b2a <tcp_write_checks+0xd6>
 8012afc:	4b0d      	ldr	r3, [pc, #52]	; (8012b34 <tcp_write_checks+0xe0>)
 8012afe:	f240 1255 	movw	r2, #341	; 0x155
 8012b02:	490f      	ldr	r1, [pc, #60]	; (8012b40 <tcp_write_checks+0xec>)
 8012b04:	480d      	ldr	r0, [pc, #52]	; (8012b3c <tcp_write_checks+0xe8>)
 8012b06:	f006 ff6b 	bl	80199e0 <iprintf>
 8012b0a:	e00e      	b.n	8012b2a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d103      	bne.n	8012b1c <tcp_write_checks+0xc8>
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d006      	beq.n	8012b2a <tcp_write_checks+0xd6>
 8012b1c:	4b05      	ldr	r3, [pc, #20]	; (8012b34 <tcp_write_checks+0xe0>)
 8012b1e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8012b22:	4908      	ldr	r1, [pc, #32]	; (8012b44 <tcp_write_checks+0xf0>)
 8012b24:	4805      	ldr	r0, [pc, #20]	; (8012b3c <tcp_write_checks+0xe8>)
 8012b26:	f006 ff5b 	bl	80199e0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012b2a:	2300      	movs	r3, #0
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3708      	adds	r7, #8
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}
 8012b34:	0801cdf8 	.word	0x0801cdf8
 8012b38:	0801cf08 	.word	0x0801cf08
 8012b3c:	0801ce4c 	.word	0x0801ce4c
 8012b40:	0801cf28 	.word	0x0801cf28
 8012b44:	0801cf64 	.word	0x0801cf64

08012b48 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012b48:	b590      	push	{r4, r7, lr}
 8012b4a:	b09b      	sub	sp, #108	; 0x6c
 8012b4c:	af04      	add	r7, sp, #16
 8012b4e:	60f8      	str	r0, [r7, #12]
 8012b50:	60b9      	str	r1, [r7, #8]
 8012b52:	4611      	mov	r1, r2
 8012b54:	461a      	mov	r2, r3
 8012b56:	460b      	mov	r3, r1
 8012b58:	80fb      	strh	r3, [r7, #6]
 8012b5a:	4613      	mov	r3, r2
 8012b5c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012b5e:	2300      	movs	r3, #0
 8012b60:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012b62:	2300      	movs	r3, #0
 8012b64:	653b      	str	r3, [r7, #80]	; 0x50
 8012b66:	2300      	movs	r3, #0
 8012b68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8012b6e:	2300      	movs	r3, #0
 8012b70:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012b72:	2300      	movs	r3, #0
 8012b74:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012b78:	2300      	movs	r3, #0
 8012b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8012b7e:	2300      	movs	r3, #0
 8012b80:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012b82:	2300      	movs	r3, #0
 8012b84:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012b86:	2300      	movs	r3, #0
 8012b88:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d109      	bne.n	8012ba4 <tcp_write+0x5c>
 8012b90:	4ba4      	ldr	r3, [pc, #656]	; (8012e24 <tcp_write+0x2dc>)
 8012b92:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8012b96:	49a4      	ldr	r1, [pc, #656]	; (8012e28 <tcp_write+0x2e0>)
 8012b98:	48a4      	ldr	r0, [pc, #656]	; (8012e2c <tcp_write+0x2e4>)
 8012b9a:	f006 ff21 	bl	80199e0 <iprintf>
 8012b9e:	f06f 030f 	mvn.w	r3, #15
 8012ba2:	e32a      	b.n	80131fa <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012baa:	085b      	lsrs	r3, r3, #1
 8012bac:	b29a      	uxth	r2, r3
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bb2:	4293      	cmp	r3, r2
 8012bb4:	bf28      	it	cs
 8012bb6:	4613      	movcs	r3, r2
 8012bb8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012bba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d102      	bne.n	8012bc6 <tcp_write+0x7e>
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bc4:	e000      	b.n	8012bc8 <tcp_write+0x80>
 8012bc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012bc8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012bca:	68bb      	ldr	r3, [r7, #8]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d109      	bne.n	8012be4 <tcp_write+0x9c>
 8012bd0:	4b94      	ldr	r3, [pc, #592]	; (8012e24 <tcp_write+0x2dc>)
 8012bd2:	f240 12ad 	movw	r2, #429	; 0x1ad
 8012bd6:	4996      	ldr	r1, [pc, #600]	; (8012e30 <tcp_write+0x2e8>)
 8012bd8:	4894      	ldr	r0, [pc, #592]	; (8012e2c <tcp_write+0x2e4>)
 8012bda:	f006 ff01 	bl	80199e0 <iprintf>
 8012bde:	f06f 030f 	mvn.w	r3, #15
 8012be2:	e30a      	b.n	80131fa <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012be4:	88fb      	ldrh	r3, [r7, #6]
 8012be6:	4619      	mov	r1, r3
 8012be8:	68f8      	ldr	r0, [r7, #12]
 8012bea:	f7ff ff33 	bl	8012a54 <tcp_write_checks>
 8012bee:	4603      	mov	r3, r0
 8012bf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012bf4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d002      	beq.n	8012c02 <tcp_write+0xba>
    return err;
 8012bfc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012c00:	e2fb      	b.n	80131fa <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c08:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	f000 80f6 	beq.w	8012e08 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c20:	653b      	str	r3, [r7, #80]	; 0x50
 8012c22:	e002      	b.n	8012c2a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d1f8      	bne.n	8012c24 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c34:	7a9b      	ldrb	r3, [r3, #10]
 8012c36:	009b      	lsls	r3, r3, #2
 8012c38:	b29b      	uxth	r3, r3
 8012c3a:	f003 0304 	and.w	r3, r3, #4
 8012c3e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012c40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c44:	891b      	ldrh	r3, [r3, #8]
 8012c46:	4619      	mov	r1, r3
 8012c48:	8c3b      	ldrh	r3, [r7, #32]
 8012c4a:	440b      	add	r3, r1
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	da06      	bge.n	8012c5e <tcp_write+0x116>
 8012c50:	4b74      	ldr	r3, [pc, #464]	; (8012e24 <tcp_write+0x2dc>)
 8012c52:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012c56:	4977      	ldr	r1, [pc, #476]	; (8012e34 <tcp_write+0x2ec>)
 8012c58:	4874      	ldr	r0, [pc, #464]	; (8012e2c <tcp_write+0x2e4>)
 8012c5a:	f006 fec1 	bl	80199e0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c60:	891a      	ldrh	r2, [r3, #8]
 8012c62:	8c3b      	ldrh	r3, [r7, #32]
 8012c64:	4413      	add	r3, r2
 8012c66:	b29b      	uxth	r3, r3
 8012c68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c6a:	1ad3      	subs	r3, r2, r3
 8012c6c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012c74:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012c76:	8a7b      	ldrh	r3, [r7, #18]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d026      	beq.n	8012cca <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012c7c:	8a7b      	ldrh	r3, [r7, #18]
 8012c7e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012c80:	429a      	cmp	r2, r3
 8012c82:	d206      	bcs.n	8012c92 <tcp_write+0x14a>
 8012c84:	4b67      	ldr	r3, [pc, #412]	; (8012e24 <tcp_write+0x2dc>)
 8012c86:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012c8a:	496b      	ldr	r1, [pc, #428]	; (8012e38 <tcp_write+0x2f0>)
 8012c8c:	4867      	ldr	r0, [pc, #412]	; (8012e2c <tcp_write+0x2e4>)
 8012c8e:	f006 fea7 	bl	80199e0 <iprintf>
      seg = last_unsent;
 8012c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c94:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012c96:	8a7b      	ldrh	r3, [r7, #18]
 8012c98:	88fa      	ldrh	r2, [r7, #6]
 8012c9a:	4293      	cmp	r3, r2
 8012c9c:	bf28      	it	cs
 8012c9e:	4613      	movcs	r3, r2
 8012ca0:	b29b      	uxth	r3, r3
 8012ca2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012ca4:	4293      	cmp	r3, r2
 8012ca6:	bf28      	it	cs
 8012ca8:	4613      	movcs	r3, r2
 8012caa:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012cac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012cb0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012cb2:	4413      	add	r3, r2
 8012cb4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012cb8:	8a7a      	ldrh	r2, [r7, #18]
 8012cba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012cbc:	1ad3      	subs	r3, r2, r3
 8012cbe:	b29b      	uxth	r3, r3
 8012cc0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012cc2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012cc4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012cc6:	1ad3      	subs	r3, r2, r3
 8012cc8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012cca:	8a7b      	ldrh	r3, [r7, #18]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d00b      	beq.n	8012ce8 <tcp_write+0x1a0>
 8012cd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012cd4:	88fb      	ldrh	r3, [r7, #6]
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d006      	beq.n	8012ce8 <tcp_write+0x1a0>
 8012cda:	4b52      	ldr	r3, [pc, #328]	; (8012e24 <tcp_write+0x2dc>)
 8012cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012ce0:	4956      	ldr	r1, [pc, #344]	; (8012e3c <tcp_write+0x2f4>)
 8012ce2:	4852      	ldr	r0, [pc, #328]	; (8012e2c <tcp_write+0x2e4>)
 8012ce4:	f006 fe7c 	bl	80199e0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012ce8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012cec:	88fb      	ldrh	r3, [r7, #6]
 8012cee:	429a      	cmp	r2, r3
 8012cf0:	f080 8167 	bcs.w	8012fc2 <tcp_write+0x47a>
 8012cf4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	f000 8163 	beq.w	8012fc2 <tcp_write+0x47a>
 8012cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cfe:	891b      	ldrh	r3, [r3, #8]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	f000 815e 	beq.w	8012fc2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012d06:	88fa      	ldrh	r2, [r7, #6]
 8012d08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d0c:	1ad2      	subs	r2, r2, r3
 8012d0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012d10:	4293      	cmp	r3, r2
 8012d12:	bfa8      	it	ge
 8012d14:	4613      	movge	r3, r2
 8012d16:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d1a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012d1c:	797b      	ldrb	r3, [r7, #5]
 8012d1e:	f003 0301 	and.w	r3, r3, #1
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d027      	beq.n	8012d76 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012d26:	f107 0012 	add.w	r0, r7, #18
 8012d2a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012d2c:	8bf9      	ldrh	r1, [r7, #30]
 8012d2e:	2301      	movs	r3, #1
 8012d30:	9302      	str	r3, [sp, #8]
 8012d32:	797b      	ldrb	r3, [r7, #5]
 8012d34:	9301      	str	r3, [sp, #4]
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	9300      	str	r3, [sp, #0]
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	2000      	movs	r0, #0
 8012d3e:	f7ff fe0f 	bl	8012960 <tcp_pbuf_prealloc>
 8012d42:	6578      	str	r0, [r7, #84]	; 0x54
 8012d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	f000 8225 	beq.w	8013196 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d4e:	6858      	ldr	r0, [r3, #4]
 8012d50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d54:	68ba      	ldr	r2, [r7, #8]
 8012d56:	4413      	add	r3, r2
 8012d58:	8bfa      	ldrh	r2, [r7, #30]
 8012d5a:	4619      	mov	r1, r3
 8012d5c:	f006 fe2a 	bl	80199b4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012d60:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012d62:	f7fb fa09 	bl	800e178 <pbuf_clen>
 8012d66:	4603      	mov	r3, r0
 8012d68:	461a      	mov	r2, r3
 8012d6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012d6e:	4413      	add	r3, r2
 8012d70:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012d74:	e041      	b.n	8012dfa <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d78:	685b      	ldr	r3, [r3, #4]
 8012d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8012d7c:	e002      	b.n	8012d84 <tcp_write+0x23c>
 8012d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	637b      	str	r3, [r7, #52]	; 0x34
 8012d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d1f8      	bne.n	8012d7e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d8e:	7b1b      	ldrb	r3, [r3, #12]
 8012d90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d115      	bne.n	8012dc4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d9a:	685b      	ldr	r3, [r3, #4]
 8012d9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d9e:	8952      	ldrh	r2, [r2, #10]
 8012da0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012da2:	68ba      	ldr	r2, [r7, #8]
 8012da4:	429a      	cmp	r2, r3
 8012da6:	d10d      	bne.n	8012dc4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012da8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d006      	beq.n	8012dbe <tcp_write+0x276>
 8012db0:	4b1c      	ldr	r3, [pc, #112]	; (8012e24 <tcp_write+0x2dc>)
 8012db2:	f240 2231 	movw	r2, #561	; 0x231
 8012db6:	4922      	ldr	r1, [pc, #136]	; (8012e40 <tcp_write+0x2f8>)
 8012db8:	481c      	ldr	r0, [pc, #112]	; (8012e2c <tcp_write+0x2e4>)
 8012dba:	f006 fe11 	bl	80199e0 <iprintf>
          extendlen = seglen;
 8012dbe:	8bfb      	ldrh	r3, [r7, #30]
 8012dc0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012dc2:	e01a      	b.n	8012dfa <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012dc4:	8bfb      	ldrh	r3, [r7, #30]
 8012dc6:	2201      	movs	r2, #1
 8012dc8:	4619      	mov	r1, r3
 8012dca:	2000      	movs	r0, #0
 8012dcc:	f7fa fe62 	bl	800da94 <pbuf_alloc>
 8012dd0:	6578      	str	r0, [r7, #84]	; 0x54
 8012dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	f000 81e0 	beq.w	801319a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012dda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012dde:	68ba      	ldr	r2, [r7, #8]
 8012de0:	441a      	add	r2, r3
 8012de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012de4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012de6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012de8:	f7fb f9c6 	bl	800e178 <pbuf_clen>
 8012dec:	4603      	mov	r3, r0
 8012dee:	461a      	mov	r2, r3
 8012df0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012df4:	4413      	add	r3, r2
 8012df6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012dfa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012dfe:	8bfb      	ldrh	r3, [r7, #30]
 8012e00:	4413      	add	r3, r2
 8012e02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012e06:	e0dc      	b.n	8012fc2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	f000 80d7 	beq.w	8012fc2 <tcp_write+0x47a>
 8012e14:	4b03      	ldr	r3, [pc, #12]	; (8012e24 <tcp_write+0x2dc>)
 8012e16:	f240 224a 	movw	r2, #586	; 0x24a
 8012e1a:	490a      	ldr	r1, [pc, #40]	; (8012e44 <tcp_write+0x2fc>)
 8012e1c:	4803      	ldr	r0, [pc, #12]	; (8012e2c <tcp_write+0x2e4>)
 8012e1e:	f006 fddf 	bl	80199e0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012e22:	e0ce      	b.n	8012fc2 <tcp_write+0x47a>
 8012e24:	0801cdf8 	.word	0x0801cdf8
 8012e28:	0801cf98 	.word	0x0801cf98
 8012e2c:	0801ce4c 	.word	0x0801ce4c
 8012e30:	0801cfb0 	.word	0x0801cfb0
 8012e34:	0801cfe4 	.word	0x0801cfe4
 8012e38:	0801cffc 	.word	0x0801cffc
 8012e3c:	0801d01c 	.word	0x0801d01c
 8012e40:	0801d03c 	.word	0x0801d03c
 8012e44:	0801d068 	.word	0x0801d068
    struct pbuf *p;
    u16_t left = len - pos;
 8012e48:	88fa      	ldrh	r2, [r7, #6]
 8012e4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012e4e:	1ad3      	subs	r3, r2, r3
 8012e50:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012e52:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012e56:	b29b      	uxth	r3, r3
 8012e58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012e5a:	1ad3      	subs	r3, r2, r3
 8012e5c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012e5e:	8b7a      	ldrh	r2, [r7, #26]
 8012e60:	8bbb      	ldrh	r3, [r7, #28]
 8012e62:	4293      	cmp	r3, r2
 8012e64:	bf28      	it	cs
 8012e66:	4613      	movcs	r3, r2
 8012e68:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012e6a:	797b      	ldrb	r3, [r7, #5]
 8012e6c:	f003 0301 	and.w	r3, r3, #1
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d036      	beq.n	8012ee2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012e74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012e78:	b29a      	uxth	r2, r3
 8012e7a:	8b3b      	ldrh	r3, [r7, #24]
 8012e7c:	4413      	add	r3, r2
 8012e7e:	b299      	uxth	r1, r3
 8012e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	bf0c      	ite	eq
 8012e86:	2301      	moveq	r3, #1
 8012e88:	2300      	movne	r3, #0
 8012e8a:	b2db      	uxtb	r3, r3
 8012e8c:	f107 0012 	add.w	r0, r7, #18
 8012e90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012e92:	9302      	str	r3, [sp, #8]
 8012e94:	797b      	ldrb	r3, [r7, #5]
 8012e96:	9301      	str	r3, [sp, #4]
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	9300      	str	r3, [sp, #0]
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	2036      	movs	r0, #54	; 0x36
 8012ea0:	f7ff fd5e 	bl	8012960 <tcp_pbuf_prealloc>
 8012ea4:	6338      	str	r0, [r7, #48]	; 0x30
 8012ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	f000 8178 	beq.w	801319e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eb0:	895b      	ldrh	r3, [r3, #10]
 8012eb2:	8b3a      	ldrh	r2, [r7, #24]
 8012eb4:	429a      	cmp	r2, r3
 8012eb6:	d906      	bls.n	8012ec6 <tcp_write+0x37e>
 8012eb8:	4b8c      	ldr	r3, [pc, #560]	; (80130ec <tcp_write+0x5a4>)
 8012eba:	f240 2266 	movw	r2, #614	; 0x266
 8012ebe:	498c      	ldr	r1, [pc, #560]	; (80130f0 <tcp_write+0x5a8>)
 8012ec0:	488c      	ldr	r0, [pc, #560]	; (80130f4 <tcp_write+0x5ac>)
 8012ec2:	f006 fd8d 	bl	80199e0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ec8:	685a      	ldr	r2, [r3, #4]
 8012eca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012ece:	18d0      	adds	r0, r2, r3
 8012ed0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ed4:	68ba      	ldr	r2, [r7, #8]
 8012ed6:	4413      	add	r3, r2
 8012ed8:	8b3a      	ldrh	r2, [r7, #24]
 8012eda:	4619      	mov	r1, r3
 8012edc:	f006 fd6a 	bl	80199b4 <memcpy>
 8012ee0:	e02f      	b.n	8012f42 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012ee2:	8a7b      	ldrh	r3, [r7, #18]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d006      	beq.n	8012ef6 <tcp_write+0x3ae>
 8012ee8:	4b80      	ldr	r3, [pc, #512]	; (80130ec <tcp_write+0x5a4>)
 8012eea:	f240 2271 	movw	r2, #625	; 0x271
 8012eee:	4982      	ldr	r1, [pc, #520]	; (80130f8 <tcp_write+0x5b0>)
 8012ef0:	4880      	ldr	r0, [pc, #512]	; (80130f4 <tcp_write+0x5ac>)
 8012ef2:	f006 fd75 	bl	80199e0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012ef6:	8b3b      	ldrh	r3, [r7, #24]
 8012ef8:	2201      	movs	r2, #1
 8012efa:	4619      	mov	r1, r3
 8012efc:	2036      	movs	r0, #54	; 0x36
 8012efe:	f7fa fdc9 	bl	800da94 <pbuf_alloc>
 8012f02:	6178      	str	r0, [r7, #20]
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	f000 814b 	beq.w	80131a2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012f0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012f10:	68ba      	ldr	r2, [r7, #8]
 8012f12:	441a      	add	r2, r3
 8012f14:	697b      	ldr	r3, [r7, #20]
 8012f16:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012f18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012f1c:	b29b      	uxth	r3, r3
 8012f1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012f22:	4619      	mov	r1, r3
 8012f24:	2036      	movs	r0, #54	; 0x36
 8012f26:	f7fa fdb5 	bl	800da94 <pbuf_alloc>
 8012f2a:	6338      	str	r0, [r7, #48]	; 0x30
 8012f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d103      	bne.n	8012f3a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012f32:	6978      	ldr	r0, [r7, #20]
 8012f34:	f7fb f892 	bl	800e05c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012f38:	e136      	b.n	80131a8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012f3a:	6979      	ldr	r1, [r7, #20]
 8012f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f3e:	f7fb f95b 	bl	800e1f8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012f42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f44:	f7fb f918 	bl	800e178 <pbuf_clen>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	461a      	mov	r2, r3
 8012f4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012f50:	4413      	add	r3, r2
 8012f52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012f56:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012f5a:	2b09      	cmp	r3, #9
 8012f5c:	d903      	bls.n	8012f66 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012f5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f60:	f7fb f87c 	bl	800e05c <pbuf_free>
      goto memerr;
 8012f64:	e120      	b.n	80131a8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012f6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012f6e:	441a      	add	r2, r3
 8012f70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f74:	9300      	str	r3, [sp, #0]
 8012f76:	4613      	mov	r3, r2
 8012f78:	2200      	movs	r2, #0
 8012f7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012f7c:	68f8      	ldr	r0, [r7, #12]
 8012f7e:	f7ff fc51 	bl	8012824 <tcp_create_segment>
 8012f82:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	f000 810d 	beq.w	80131a6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d102      	bne.n	8012f98 <tcp_write+0x450>
      queue = seg;
 8012f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f94:	647b      	str	r3, [r7, #68]	; 0x44
 8012f96:	e00c      	b.n	8012fb2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d106      	bne.n	8012fac <tcp_write+0x464>
 8012f9e:	4b53      	ldr	r3, [pc, #332]	; (80130ec <tcp_write+0x5a4>)
 8012fa0:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012fa4:	4955      	ldr	r1, [pc, #340]	; (80130fc <tcp_write+0x5b4>)
 8012fa6:	4853      	ldr	r0, [pc, #332]	; (80130f4 <tcp_write+0x5ac>)
 8012fa8:	f006 fd1a 	bl	80199e0 <iprintf>
      prev_seg->next = seg;
 8012fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012fb0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fb4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012fb6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012fba:	8b3b      	ldrh	r3, [r7, #24]
 8012fbc:	4413      	add	r3, r2
 8012fbe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012fc2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012fc6:	88fb      	ldrh	r3, [r7, #6]
 8012fc8:	429a      	cmp	r2, r3
 8012fca:	f4ff af3d 	bcc.w	8012e48 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012fce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d02c      	beq.n	801302e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fd6:	685b      	ldr	r3, [r3, #4]
 8012fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012fda:	e01e      	b.n	801301a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fde:	891a      	ldrh	r2, [r3, #8]
 8012fe0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012fe2:	4413      	add	r3, r2
 8012fe4:	b29a      	uxth	r2, r3
 8012fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d110      	bne.n	8013014 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff4:	685b      	ldr	r3, [r3, #4]
 8012ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ff8:	8952      	ldrh	r2, [r2, #10]
 8012ffa:	4413      	add	r3, r2
 8012ffc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012ffe:	68b9      	ldr	r1, [r7, #8]
 8013000:	4618      	mov	r0, r3
 8013002:	f006 fcd7 	bl	80199b4 <memcpy>
        p->len += oversize_used;
 8013006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013008:	895a      	ldrh	r2, [r3, #10]
 801300a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801300c:	4413      	add	r3, r2
 801300e:	b29a      	uxth	r2, r3
 8013010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013012:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	62fb      	str	r3, [r7, #44]	; 0x2c
 801301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801301c:	2b00      	cmp	r3, #0
 801301e:	d1dd      	bne.n	8012fdc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8013020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013022:	891a      	ldrh	r2, [r3, #8]
 8013024:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013026:	4413      	add	r3, r2
 8013028:	b29a      	uxth	r2, r3
 801302a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801302c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801302e:	8a7a      	ldrh	r2, [r7, #18]
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013038:	2b00      	cmp	r3, #0
 801303a:	d018      	beq.n	801306e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801303c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801303e:	2b00      	cmp	r3, #0
 8013040:	d106      	bne.n	8013050 <tcp_write+0x508>
 8013042:	4b2a      	ldr	r3, [pc, #168]	; (80130ec <tcp_write+0x5a4>)
 8013044:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8013048:	492d      	ldr	r1, [pc, #180]	; (8013100 <tcp_write+0x5b8>)
 801304a:	482a      	ldr	r0, [pc, #168]	; (80130f4 <tcp_write+0x5ac>)
 801304c:	f006 fcc8 	bl	80199e0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013052:	685b      	ldr	r3, [r3, #4]
 8013054:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013056:	4618      	mov	r0, r3
 8013058:	f7fb f8ce 	bl	800e1f8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801305c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801305e:	891a      	ldrh	r2, [r3, #8]
 8013060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013062:	891b      	ldrh	r3, [r3, #8]
 8013064:	4413      	add	r3, r2
 8013066:	b29a      	uxth	r2, r3
 8013068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801306a:	811a      	strh	r2, [r3, #8]
 801306c:	e037      	b.n	80130de <tcp_write+0x596>
  } else if (extendlen > 0) {
 801306e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013070:	2b00      	cmp	r3, #0
 8013072:	d034      	beq.n	80130de <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013076:	2b00      	cmp	r3, #0
 8013078:	d003      	beq.n	8013082 <tcp_write+0x53a>
 801307a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801307c:	685b      	ldr	r3, [r3, #4]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d106      	bne.n	8013090 <tcp_write+0x548>
 8013082:	4b1a      	ldr	r3, [pc, #104]	; (80130ec <tcp_write+0x5a4>)
 8013084:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013088:	491e      	ldr	r1, [pc, #120]	; (8013104 <tcp_write+0x5bc>)
 801308a:	481a      	ldr	r0, [pc, #104]	; (80130f4 <tcp_write+0x5ac>)
 801308c:	f006 fca8 	bl	80199e0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013092:	685b      	ldr	r3, [r3, #4]
 8013094:	62bb      	str	r3, [r7, #40]	; 0x28
 8013096:	e009      	b.n	80130ac <tcp_write+0x564>
      p->tot_len += extendlen;
 8013098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801309a:	891a      	ldrh	r2, [r3, #8]
 801309c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801309e:	4413      	add	r3, r2
 80130a0:	b29a      	uxth	r2, r3
 80130a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130a4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80130a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80130ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d1f1      	bne.n	8013098 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80130b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130b6:	891a      	ldrh	r2, [r3, #8]
 80130b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80130ba:	4413      	add	r3, r2
 80130bc:	b29a      	uxth	r2, r3
 80130be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130c0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80130c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130c4:	895a      	ldrh	r2, [r3, #10]
 80130c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80130c8:	4413      	add	r3, r2
 80130ca:	b29a      	uxth	r2, r3
 80130cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ce:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80130d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130d2:	891a      	ldrh	r2, [r3, #8]
 80130d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80130d6:	4413      	add	r3, r2
 80130d8:	b29a      	uxth	r2, r3
 80130da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130dc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80130de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d111      	bne.n	8013108 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80130e8:	66da      	str	r2, [r3, #108]	; 0x6c
 80130ea:	e010      	b.n	801310e <tcp_write+0x5c6>
 80130ec:	0801cdf8 	.word	0x0801cdf8
 80130f0:	0801d098 	.word	0x0801d098
 80130f4:	0801ce4c 	.word	0x0801ce4c
 80130f8:	0801d0d8 	.word	0x0801d0d8
 80130fc:	0801d0e8 	.word	0x0801d0e8
 8013100:	0801d0fc 	.word	0x0801d0fc
 8013104:	0801d134 	.word	0x0801d134
  } else {
    last_unsent->next = queue;
 8013108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801310a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801310c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013112:	88fb      	ldrh	r3, [r7, #6]
 8013114:	441a      	add	r2, r3
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013120:	88fb      	ldrh	r3, [r7, #6]
 8013122:	1ad3      	subs	r3, r2, r3
 8013124:	b29a      	uxth	r2, r3
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013132:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801313c:	2b00      	cmp	r3, #0
 801313e:	d00e      	beq.n	801315e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013144:	2b00      	cmp	r3, #0
 8013146:	d10a      	bne.n	801315e <tcp_write+0x616>
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801314c:	2b00      	cmp	r3, #0
 801314e:	d106      	bne.n	801315e <tcp_write+0x616>
 8013150:	4b2c      	ldr	r3, [pc, #176]	; (8013204 <tcp_write+0x6bc>)
 8013152:	f240 3212 	movw	r2, #786	; 0x312
 8013156:	492c      	ldr	r1, [pc, #176]	; (8013208 <tcp_write+0x6c0>)
 8013158:	482c      	ldr	r0, [pc, #176]	; (801320c <tcp_write+0x6c4>)
 801315a:	f006 fc41 	bl	80199e0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801315e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013160:	2b00      	cmp	r3, #0
 8013162:	d016      	beq.n	8013192 <tcp_write+0x64a>
 8013164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013166:	68db      	ldr	r3, [r3, #12]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d012      	beq.n	8013192 <tcp_write+0x64a>
 801316c:	797b      	ldrb	r3, [r7, #5]
 801316e:	f003 0302 	and.w	r3, r3, #2
 8013172:	2b00      	cmp	r3, #0
 8013174:	d10d      	bne.n	8013192 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013178:	68db      	ldr	r3, [r3, #12]
 801317a:	899b      	ldrh	r3, [r3, #12]
 801317c:	b29c      	uxth	r4, r3
 801317e:	2008      	movs	r0, #8
 8013180:	f7f9 fb6a 	bl	800c858 <lwip_htons>
 8013184:	4603      	mov	r3, r0
 8013186:	461a      	mov	r2, r3
 8013188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801318a:	68db      	ldr	r3, [r3, #12]
 801318c:	4322      	orrs	r2, r4
 801318e:	b292      	uxth	r2, r2
 8013190:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013192:	2300      	movs	r3, #0
 8013194:	e031      	b.n	80131fa <tcp_write+0x6b2>
          goto memerr;
 8013196:	bf00      	nop
 8013198:	e006      	b.n	80131a8 <tcp_write+0x660>
            goto memerr;
 801319a:	bf00      	nop
 801319c:	e004      	b.n	80131a8 <tcp_write+0x660>
        goto memerr;
 801319e:	bf00      	nop
 80131a0:	e002      	b.n	80131a8 <tcp_write+0x660>
        goto memerr;
 80131a2:	bf00      	nop
 80131a4:	e000      	b.n	80131a8 <tcp_write+0x660>
      goto memerr;
 80131a6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	8b5b      	ldrh	r3, [r3, #26]
 80131ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131b0:	b29a      	uxth	r2, r3
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80131b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d002      	beq.n	80131c2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80131bc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80131be:	f7fa ff4d 	bl	800e05c <pbuf_free>
  }
  if (queue != NULL) {
 80131c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d002      	beq.n	80131ce <tcp_write+0x686>
    tcp_segs_free(queue);
 80131c8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80131ca:	f7fc fb6b 	bl	800f8a4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d00e      	beq.n	80131f6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d10a      	bne.n	80131f6 <tcp_write+0x6ae>
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d106      	bne.n	80131f6 <tcp_write+0x6ae>
 80131e8:	4b06      	ldr	r3, [pc, #24]	; (8013204 <tcp_write+0x6bc>)
 80131ea:	f240 3227 	movw	r2, #807	; 0x327
 80131ee:	4906      	ldr	r1, [pc, #24]	; (8013208 <tcp_write+0x6c0>)
 80131f0:	4806      	ldr	r0, [pc, #24]	; (801320c <tcp_write+0x6c4>)
 80131f2:	f006 fbf5 	bl	80199e0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80131f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80131fa:	4618      	mov	r0, r3
 80131fc:	375c      	adds	r7, #92	; 0x5c
 80131fe:	46bd      	mov	sp, r7
 8013200:	bd90      	pop	{r4, r7, pc}
 8013202:	bf00      	nop
 8013204:	0801cdf8 	.word	0x0801cdf8
 8013208:	0801d16c 	.word	0x0801d16c
 801320c:	0801ce4c 	.word	0x0801ce4c

08013210 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013210:	b590      	push	{r4, r7, lr}
 8013212:	b08b      	sub	sp, #44	; 0x2c
 8013214:	af02      	add	r7, sp, #8
 8013216:	6078      	str	r0, [r7, #4]
 8013218:	460b      	mov	r3, r1
 801321a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801321c:	2300      	movs	r3, #0
 801321e:	61fb      	str	r3, [r7, #28]
 8013220:	2300      	movs	r3, #0
 8013222:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013224:	2300      	movs	r3, #0
 8013226:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d106      	bne.n	801323c <tcp_split_unsent_seg+0x2c>
 801322e:	4b95      	ldr	r3, [pc, #596]	; (8013484 <tcp_split_unsent_seg+0x274>)
 8013230:	f240 324b 	movw	r2, #843	; 0x34b
 8013234:	4994      	ldr	r1, [pc, #592]	; (8013488 <tcp_split_unsent_seg+0x278>)
 8013236:	4895      	ldr	r0, [pc, #596]	; (801348c <tcp_split_unsent_seg+0x27c>)
 8013238:	f006 fbd2 	bl	80199e0 <iprintf>

  useg = pcb->unsent;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013240:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013242:	697b      	ldr	r3, [r7, #20]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d102      	bne.n	801324e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801324c:	e116      	b.n	801347c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801324e:	887b      	ldrh	r3, [r7, #2]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d109      	bne.n	8013268 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013254:	4b8b      	ldr	r3, [pc, #556]	; (8013484 <tcp_split_unsent_seg+0x274>)
 8013256:	f240 3253 	movw	r2, #851	; 0x353
 801325a:	498d      	ldr	r1, [pc, #564]	; (8013490 <tcp_split_unsent_seg+0x280>)
 801325c:	488b      	ldr	r0, [pc, #556]	; (801348c <tcp_split_unsent_seg+0x27c>)
 801325e:	f006 fbbf 	bl	80199e0 <iprintf>
    return ERR_VAL;
 8013262:	f06f 0305 	mvn.w	r3, #5
 8013266:	e109      	b.n	801347c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	891b      	ldrh	r3, [r3, #8]
 801326c:	887a      	ldrh	r2, [r7, #2]
 801326e:	429a      	cmp	r2, r3
 8013270:	d301      	bcc.n	8013276 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013272:	2300      	movs	r3, #0
 8013274:	e102      	b.n	801347c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801327a:	887a      	ldrh	r2, [r7, #2]
 801327c:	429a      	cmp	r2, r3
 801327e:	d906      	bls.n	801328e <tcp_split_unsent_seg+0x7e>
 8013280:	4b80      	ldr	r3, [pc, #512]	; (8013484 <tcp_split_unsent_seg+0x274>)
 8013282:	f240 325b 	movw	r2, #859	; 0x35b
 8013286:	4983      	ldr	r1, [pc, #524]	; (8013494 <tcp_split_unsent_seg+0x284>)
 8013288:	4880      	ldr	r0, [pc, #512]	; (801348c <tcp_split_unsent_seg+0x27c>)
 801328a:	f006 fba9 	bl	80199e0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801328e:	697b      	ldr	r3, [r7, #20]
 8013290:	891b      	ldrh	r3, [r3, #8]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d106      	bne.n	80132a4 <tcp_split_unsent_seg+0x94>
 8013296:	4b7b      	ldr	r3, [pc, #492]	; (8013484 <tcp_split_unsent_seg+0x274>)
 8013298:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801329c:	497e      	ldr	r1, [pc, #504]	; (8013498 <tcp_split_unsent_seg+0x288>)
 801329e:	487b      	ldr	r0, [pc, #492]	; (801348c <tcp_split_unsent_seg+0x27c>)
 80132a0:	f006 fb9e 	bl	80199e0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80132a4:	697b      	ldr	r3, [r7, #20]
 80132a6:	7a9b      	ldrb	r3, [r3, #10]
 80132a8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80132aa:	7bfb      	ldrb	r3, [r7, #15]
 80132ac:	009b      	lsls	r3, r3, #2
 80132ae:	b2db      	uxtb	r3, r3
 80132b0:	f003 0304 	and.w	r3, r3, #4
 80132b4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80132b6:	697b      	ldr	r3, [r7, #20]
 80132b8:	891a      	ldrh	r2, [r3, #8]
 80132ba:	887b      	ldrh	r3, [r7, #2]
 80132bc:	1ad3      	subs	r3, r2, r3
 80132be:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80132c0:	7bbb      	ldrb	r3, [r7, #14]
 80132c2:	b29a      	uxth	r2, r3
 80132c4:	89bb      	ldrh	r3, [r7, #12]
 80132c6:	4413      	add	r3, r2
 80132c8:	b29b      	uxth	r3, r3
 80132ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80132ce:	4619      	mov	r1, r3
 80132d0:	2036      	movs	r0, #54	; 0x36
 80132d2:	f7fa fbdf 	bl	800da94 <pbuf_alloc>
 80132d6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80132d8:	693b      	ldr	r3, [r7, #16]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	f000 80b7 	beq.w	801344e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80132e0:	697b      	ldr	r3, [r7, #20]
 80132e2:	685b      	ldr	r3, [r3, #4]
 80132e4:	891a      	ldrh	r2, [r3, #8]
 80132e6:	697b      	ldr	r3, [r7, #20]
 80132e8:	891b      	ldrh	r3, [r3, #8]
 80132ea:	1ad3      	subs	r3, r2, r3
 80132ec:	b29a      	uxth	r2, r3
 80132ee:	887b      	ldrh	r3, [r7, #2]
 80132f0:	4413      	add	r3, r2
 80132f2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	6858      	ldr	r0, [r3, #4]
 80132f8:	693b      	ldr	r3, [r7, #16]
 80132fa:	685a      	ldr	r2, [r3, #4]
 80132fc:	7bbb      	ldrb	r3, [r7, #14]
 80132fe:	18d1      	adds	r1, r2, r3
 8013300:	897b      	ldrh	r3, [r7, #10]
 8013302:	89ba      	ldrh	r2, [r7, #12]
 8013304:	f7fb f8a0 	bl	800e448 <pbuf_copy_partial>
 8013308:	4603      	mov	r3, r0
 801330a:	461a      	mov	r2, r3
 801330c:	89bb      	ldrh	r3, [r7, #12]
 801330e:	4293      	cmp	r3, r2
 8013310:	f040 809f 	bne.w	8013452 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	68db      	ldr	r3, [r3, #12]
 8013318:	899b      	ldrh	r3, [r3, #12]
 801331a:	b29b      	uxth	r3, r3
 801331c:	4618      	mov	r0, r3
 801331e:	f7f9 fa9b 	bl	800c858 <lwip_htons>
 8013322:	4603      	mov	r3, r0
 8013324:	b2db      	uxtb	r3, r3
 8013326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801332a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801332c:	2300      	movs	r3, #0
 801332e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013330:	7efb      	ldrb	r3, [r7, #27]
 8013332:	f003 0308 	and.w	r3, r3, #8
 8013336:	2b00      	cmp	r3, #0
 8013338:	d007      	beq.n	801334a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801333a:	7efb      	ldrb	r3, [r7, #27]
 801333c:	f023 0308 	bic.w	r3, r3, #8
 8013340:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013342:	7ebb      	ldrb	r3, [r7, #26]
 8013344:	f043 0308 	orr.w	r3, r3, #8
 8013348:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801334a:	7efb      	ldrb	r3, [r7, #27]
 801334c:	f003 0301 	and.w	r3, r3, #1
 8013350:	2b00      	cmp	r3, #0
 8013352:	d007      	beq.n	8013364 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013354:	7efb      	ldrb	r3, [r7, #27]
 8013356:	f023 0301 	bic.w	r3, r3, #1
 801335a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801335c:	7ebb      	ldrb	r3, [r7, #26]
 801335e:	f043 0301 	orr.w	r3, r3, #1
 8013362:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	68db      	ldr	r3, [r3, #12]
 8013368:	685b      	ldr	r3, [r3, #4]
 801336a:	4618      	mov	r0, r3
 801336c:	f7f9 fa89 	bl	800c882 <lwip_htonl>
 8013370:	4602      	mov	r2, r0
 8013372:	887b      	ldrh	r3, [r7, #2]
 8013374:	18d1      	adds	r1, r2, r3
 8013376:	7eba      	ldrb	r2, [r7, #26]
 8013378:	7bfb      	ldrb	r3, [r7, #15]
 801337a:	9300      	str	r3, [sp, #0]
 801337c:	460b      	mov	r3, r1
 801337e:	6939      	ldr	r1, [r7, #16]
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f7ff fa4f 	bl	8012824 <tcp_create_segment>
 8013386:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013388:	69fb      	ldr	r3, [r7, #28]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d063      	beq.n	8013456 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	685b      	ldr	r3, [r3, #4]
 8013392:	4618      	mov	r0, r3
 8013394:	f7fa fef0 	bl	800e178 <pbuf_clen>
 8013398:	4603      	mov	r3, r0
 801339a:	461a      	mov	r2, r3
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80133a2:	1a9b      	subs	r3, r3, r2
 80133a4:	b29a      	uxth	r2, r3
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80133ac:	697b      	ldr	r3, [r7, #20]
 80133ae:	6858      	ldr	r0, [r3, #4]
 80133b0:	697b      	ldr	r3, [r7, #20]
 80133b2:	685b      	ldr	r3, [r3, #4]
 80133b4:	891a      	ldrh	r2, [r3, #8]
 80133b6:	89bb      	ldrh	r3, [r7, #12]
 80133b8:	1ad3      	subs	r3, r2, r3
 80133ba:	b29b      	uxth	r3, r3
 80133bc:	4619      	mov	r1, r3
 80133be:	f7fa fcc7 	bl	800dd50 <pbuf_realloc>
  useg->len -= remainder;
 80133c2:	697b      	ldr	r3, [r7, #20]
 80133c4:	891a      	ldrh	r2, [r3, #8]
 80133c6:	89bb      	ldrh	r3, [r7, #12]
 80133c8:	1ad3      	subs	r3, r2, r3
 80133ca:	b29a      	uxth	r2, r3
 80133cc:	697b      	ldr	r3, [r7, #20]
 80133ce:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	68db      	ldr	r3, [r3, #12]
 80133d4:	899b      	ldrh	r3, [r3, #12]
 80133d6:	b29c      	uxth	r4, r3
 80133d8:	7efb      	ldrb	r3, [r7, #27]
 80133da:	b29b      	uxth	r3, r3
 80133dc:	4618      	mov	r0, r3
 80133de:	f7f9 fa3b 	bl	800c858 <lwip_htons>
 80133e2:	4603      	mov	r3, r0
 80133e4:	461a      	mov	r2, r3
 80133e6:	697b      	ldr	r3, [r7, #20]
 80133e8:	68db      	ldr	r3, [r3, #12]
 80133ea:	4322      	orrs	r2, r4
 80133ec:	b292      	uxth	r2, r2
 80133ee:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80133f0:	697b      	ldr	r3, [r7, #20]
 80133f2:	685b      	ldr	r3, [r3, #4]
 80133f4:	4618      	mov	r0, r3
 80133f6:	f7fa febf 	bl	800e178 <pbuf_clen>
 80133fa:	4603      	mov	r3, r0
 80133fc:	461a      	mov	r2, r3
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013404:	4413      	add	r3, r2
 8013406:	b29a      	uxth	r2, r3
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801340e:	69fb      	ldr	r3, [r7, #28]
 8013410:	685b      	ldr	r3, [r3, #4]
 8013412:	4618      	mov	r0, r3
 8013414:	f7fa feb0 	bl	800e178 <pbuf_clen>
 8013418:	4603      	mov	r3, r0
 801341a:	461a      	mov	r2, r3
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013422:	4413      	add	r3, r2
 8013424:	b29a      	uxth	r2, r3
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801342c:	697b      	ldr	r3, [r7, #20]
 801342e:	681a      	ldr	r2, [r3, #0]
 8013430:	69fb      	ldr	r3, [r7, #28]
 8013432:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013434:	697b      	ldr	r3, [r7, #20]
 8013436:	69fa      	ldr	r2, [r7, #28]
 8013438:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801343a:	69fb      	ldr	r3, [r7, #28]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d103      	bne.n	801344a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	2200      	movs	r2, #0
 8013446:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801344a:	2300      	movs	r3, #0
 801344c:	e016      	b.n	801347c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801344e:	bf00      	nop
 8013450:	e002      	b.n	8013458 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013452:	bf00      	nop
 8013454:	e000      	b.n	8013458 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013456:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013458:	69fb      	ldr	r3, [r7, #28]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d006      	beq.n	801346c <tcp_split_unsent_seg+0x25c>
 801345e:	4b09      	ldr	r3, [pc, #36]	; (8013484 <tcp_split_unsent_seg+0x274>)
 8013460:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013464:	490d      	ldr	r1, [pc, #52]	; (801349c <tcp_split_unsent_seg+0x28c>)
 8013466:	4809      	ldr	r0, [pc, #36]	; (801348c <tcp_split_unsent_seg+0x27c>)
 8013468:	f006 faba 	bl	80199e0 <iprintf>
  if (p != NULL) {
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d002      	beq.n	8013478 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013472:	6938      	ldr	r0, [r7, #16]
 8013474:	f7fa fdf2 	bl	800e05c <pbuf_free>
  }

  return ERR_MEM;
 8013478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801347c:	4618      	mov	r0, r3
 801347e:	3724      	adds	r7, #36	; 0x24
 8013480:	46bd      	mov	sp, r7
 8013482:	bd90      	pop	{r4, r7, pc}
 8013484:	0801cdf8 	.word	0x0801cdf8
 8013488:	0801d18c 	.word	0x0801d18c
 801348c:	0801ce4c 	.word	0x0801ce4c
 8013490:	0801d1b0 	.word	0x0801d1b0
 8013494:	0801d1d4 	.word	0x0801d1d4
 8013498:	0801d1e4 	.word	0x0801d1e4
 801349c:	0801d1f4 	.word	0x0801d1f4

080134a0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80134a0:	b590      	push	{r4, r7, lr}
 80134a2:	b085      	sub	sp, #20
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d106      	bne.n	80134bc <tcp_send_fin+0x1c>
 80134ae:	4b21      	ldr	r3, [pc, #132]	; (8013534 <tcp_send_fin+0x94>)
 80134b0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80134b4:	4920      	ldr	r1, [pc, #128]	; (8013538 <tcp_send_fin+0x98>)
 80134b6:	4821      	ldr	r0, [pc, #132]	; (801353c <tcp_send_fin+0x9c>)
 80134b8:	f006 fa92 	bl	80199e0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d02e      	beq.n	8013522 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134c8:	60fb      	str	r3, [r7, #12]
 80134ca:	e002      	b.n	80134d2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d1f8      	bne.n	80134cc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	68db      	ldr	r3, [r3, #12]
 80134de:	899b      	ldrh	r3, [r3, #12]
 80134e0:	b29b      	uxth	r3, r3
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7f9 f9b8 	bl	800c858 <lwip_htons>
 80134e8:	4603      	mov	r3, r0
 80134ea:	b2db      	uxtb	r3, r3
 80134ec:	f003 0307 	and.w	r3, r3, #7
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d116      	bne.n	8013522 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	68db      	ldr	r3, [r3, #12]
 80134f8:	899b      	ldrh	r3, [r3, #12]
 80134fa:	b29c      	uxth	r4, r3
 80134fc:	2001      	movs	r0, #1
 80134fe:	f7f9 f9ab 	bl	800c858 <lwip_htons>
 8013502:	4603      	mov	r3, r0
 8013504:	461a      	mov	r2, r3
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	68db      	ldr	r3, [r3, #12]
 801350a:	4322      	orrs	r2, r4
 801350c:	b292      	uxth	r2, r2
 801350e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	8b5b      	ldrh	r3, [r3, #26]
 8013514:	f043 0320 	orr.w	r3, r3, #32
 8013518:	b29a      	uxth	r2, r3
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801351e:	2300      	movs	r3, #0
 8013520:	e004      	b.n	801352c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013522:	2101      	movs	r1, #1
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f000 f80b 	bl	8013540 <tcp_enqueue_flags>
 801352a:	4603      	mov	r3, r0
}
 801352c:	4618      	mov	r0, r3
 801352e:	3714      	adds	r7, #20
 8013530:	46bd      	mov	sp, r7
 8013532:	bd90      	pop	{r4, r7, pc}
 8013534:	0801cdf8 	.word	0x0801cdf8
 8013538:	0801d200 	.word	0x0801d200
 801353c:	0801ce4c 	.word	0x0801ce4c

08013540 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b08a      	sub	sp, #40	; 0x28
 8013544:	af02      	add	r7, sp, #8
 8013546:	6078      	str	r0, [r7, #4]
 8013548:	460b      	mov	r3, r1
 801354a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801354c:	2300      	movs	r3, #0
 801354e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013550:	2300      	movs	r3, #0
 8013552:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013554:	78fb      	ldrb	r3, [r7, #3]
 8013556:	f003 0303 	and.w	r3, r3, #3
 801355a:	2b00      	cmp	r3, #0
 801355c:	d106      	bne.n	801356c <tcp_enqueue_flags+0x2c>
 801355e:	4b67      	ldr	r3, [pc, #412]	; (80136fc <tcp_enqueue_flags+0x1bc>)
 8013560:	f240 4211 	movw	r2, #1041	; 0x411
 8013564:	4966      	ldr	r1, [pc, #408]	; (8013700 <tcp_enqueue_flags+0x1c0>)
 8013566:	4867      	ldr	r0, [pc, #412]	; (8013704 <tcp_enqueue_flags+0x1c4>)
 8013568:	f006 fa3a 	bl	80199e0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d106      	bne.n	8013580 <tcp_enqueue_flags+0x40>
 8013572:	4b62      	ldr	r3, [pc, #392]	; (80136fc <tcp_enqueue_flags+0x1bc>)
 8013574:	f240 4213 	movw	r2, #1043	; 0x413
 8013578:	4963      	ldr	r1, [pc, #396]	; (8013708 <tcp_enqueue_flags+0x1c8>)
 801357a:	4862      	ldr	r0, [pc, #392]	; (8013704 <tcp_enqueue_flags+0x1c4>)
 801357c:	f006 fa30 	bl	80199e0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013580:	78fb      	ldrb	r3, [r7, #3]
 8013582:	f003 0302 	and.w	r3, r3, #2
 8013586:	2b00      	cmp	r3, #0
 8013588:	d001      	beq.n	801358e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801358a:	2301      	movs	r3, #1
 801358c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801358e:	7ffb      	ldrb	r3, [r7, #31]
 8013590:	009b      	lsls	r3, r3, #2
 8013592:	b2db      	uxtb	r3, r3
 8013594:	f003 0304 	and.w	r3, r3, #4
 8013598:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801359a:	7dfb      	ldrb	r3, [r7, #23]
 801359c:	b29b      	uxth	r3, r3
 801359e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80135a2:	4619      	mov	r1, r3
 80135a4:	2036      	movs	r0, #54	; 0x36
 80135a6:	f7fa fa75 	bl	800da94 <pbuf_alloc>
 80135aa:	6138      	str	r0, [r7, #16]
 80135ac:	693b      	ldr	r3, [r7, #16]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d109      	bne.n	80135c6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	8b5b      	ldrh	r3, [r3, #26]
 80135b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135ba:	b29a      	uxth	r2, r3
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80135c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80135c4:	e095      	b.n	80136f2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80135c6:	693b      	ldr	r3, [r7, #16]
 80135c8:	895a      	ldrh	r2, [r3, #10]
 80135ca:	7dfb      	ldrb	r3, [r7, #23]
 80135cc:	b29b      	uxth	r3, r3
 80135ce:	429a      	cmp	r2, r3
 80135d0:	d206      	bcs.n	80135e0 <tcp_enqueue_flags+0xa0>
 80135d2:	4b4a      	ldr	r3, [pc, #296]	; (80136fc <tcp_enqueue_flags+0x1bc>)
 80135d4:	f240 4239 	movw	r2, #1081	; 0x439
 80135d8:	494c      	ldr	r1, [pc, #304]	; (801370c <tcp_enqueue_flags+0x1cc>)
 80135da:	484a      	ldr	r0, [pc, #296]	; (8013704 <tcp_enqueue_flags+0x1c4>)
 80135dc:	f006 fa00 	bl	80199e0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80135e4:	78fa      	ldrb	r2, [r7, #3]
 80135e6:	7ffb      	ldrb	r3, [r7, #31]
 80135e8:	9300      	str	r3, [sp, #0]
 80135ea:	460b      	mov	r3, r1
 80135ec:	6939      	ldr	r1, [r7, #16]
 80135ee:	6878      	ldr	r0, [r7, #4]
 80135f0:	f7ff f918 	bl	8012824 <tcp_create_segment>
 80135f4:	60f8      	str	r0, [r7, #12]
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d109      	bne.n	8013610 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	8b5b      	ldrh	r3, [r3, #26]
 8013600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013604:	b29a      	uxth	r2, r3
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801360a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801360e:	e070      	b.n	80136f2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	68db      	ldr	r3, [r3, #12]
 8013614:	f003 0303 	and.w	r3, r3, #3
 8013618:	2b00      	cmp	r3, #0
 801361a:	d006      	beq.n	801362a <tcp_enqueue_flags+0xea>
 801361c:	4b37      	ldr	r3, [pc, #220]	; (80136fc <tcp_enqueue_flags+0x1bc>)
 801361e:	f240 4242 	movw	r2, #1090	; 0x442
 8013622:	493b      	ldr	r1, [pc, #236]	; (8013710 <tcp_enqueue_flags+0x1d0>)
 8013624:	4837      	ldr	r0, [pc, #220]	; (8013704 <tcp_enqueue_flags+0x1c4>)
 8013626:	f006 f9db 	bl	80199e0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	891b      	ldrh	r3, [r3, #8]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d006      	beq.n	8013640 <tcp_enqueue_flags+0x100>
 8013632:	4b32      	ldr	r3, [pc, #200]	; (80136fc <tcp_enqueue_flags+0x1bc>)
 8013634:	f240 4243 	movw	r2, #1091	; 0x443
 8013638:	4936      	ldr	r1, [pc, #216]	; (8013714 <tcp_enqueue_flags+0x1d4>)
 801363a:	4832      	ldr	r0, [pc, #200]	; (8013704 <tcp_enqueue_flags+0x1c4>)
 801363c:	f006 f9d0 	bl	80199e0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013644:	2b00      	cmp	r3, #0
 8013646:	d103      	bne.n	8013650 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	68fa      	ldr	r2, [r7, #12]
 801364c:	66da      	str	r2, [r3, #108]	; 0x6c
 801364e:	e00d      	b.n	801366c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013654:	61bb      	str	r3, [r7, #24]
 8013656:	e002      	b.n	801365e <tcp_enqueue_flags+0x11e>
 8013658:	69bb      	ldr	r3, [r7, #24]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	61bb      	str	r3, [r7, #24]
 801365e:	69bb      	ldr	r3, [r7, #24]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d1f8      	bne.n	8013658 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013666:	69bb      	ldr	r3, [r7, #24]
 8013668:	68fa      	ldr	r2, [r7, #12]
 801366a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2200      	movs	r2, #0
 8013670:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013674:	78fb      	ldrb	r3, [r7, #3]
 8013676:	f003 0302 	and.w	r3, r3, #2
 801367a:	2b00      	cmp	r3, #0
 801367c:	d104      	bne.n	8013688 <tcp_enqueue_flags+0x148>
 801367e:	78fb      	ldrb	r3, [r7, #3]
 8013680:	f003 0301 	and.w	r3, r3, #1
 8013684:	2b00      	cmp	r3, #0
 8013686:	d004      	beq.n	8013692 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801368c:	1c5a      	adds	r2, r3, #1
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013692:	78fb      	ldrb	r3, [r7, #3]
 8013694:	f003 0301 	and.w	r3, r3, #1
 8013698:	2b00      	cmp	r3, #0
 801369a:	d006      	beq.n	80136aa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	8b5b      	ldrh	r3, [r3, #26]
 80136a0:	f043 0320 	orr.w	r3, r3, #32
 80136a4:	b29a      	uxth	r2, r3
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	685b      	ldr	r3, [r3, #4]
 80136ae:	4618      	mov	r0, r3
 80136b0:	f7fa fd62 	bl	800e178 <pbuf_clen>
 80136b4:	4603      	mov	r3, r0
 80136b6:	461a      	mov	r2, r3
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80136be:	4413      	add	r3, r2
 80136c0:	b29a      	uxth	r2, r3
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d00e      	beq.n	80136f0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d10a      	bne.n	80136f0 <tcp_enqueue_flags+0x1b0>
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d106      	bne.n	80136f0 <tcp_enqueue_flags+0x1b0>
 80136e2:	4b06      	ldr	r3, [pc, #24]	; (80136fc <tcp_enqueue_flags+0x1bc>)
 80136e4:	f240 4265 	movw	r2, #1125	; 0x465
 80136e8:	490b      	ldr	r1, [pc, #44]	; (8013718 <tcp_enqueue_flags+0x1d8>)
 80136ea:	4806      	ldr	r0, [pc, #24]	; (8013704 <tcp_enqueue_flags+0x1c4>)
 80136ec:	f006 f978 	bl	80199e0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80136f0:	2300      	movs	r3, #0
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	3720      	adds	r7, #32
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}
 80136fa:	bf00      	nop
 80136fc:	0801cdf8 	.word	0x0801cdf8
 8013700:	0801d21c 	.word	0x0801d21c
 8013704:	0801ce4c 	.word	0x0801ce4c
 8013708:	0801d274 	.word	0x0801d274
 801370c:	0801d294 	.word	0x0801d294
 8013710:	0801d2d0 	.word	0x0801d2d0
 8013714:	0801d2e8 	.word	0x0801d2e8
 8013718:	0801d314 	.word	0x0801d314

0801371c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801371c:	b5b0      	push	{r4, r5, r7, lr}
 801371e:	b08a      	sub	sp, #40	; 0x28
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d106      	bne.n	8013738 <tcp_output+0x1c>
 801372a:	4b8a      	ldr	r3, [pc, #552]	; (8013954 <tcp_output+0x238>)
 801372c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013730:	4989      	ldr	r1, [pc, #548]	; (8013958 <tcp_output+0x23c>)
 8013732:	488a      	ldr	r0, [pc, #552]	; (801395c <tcp_output+0x240>)
 8013734:	f006 f954 	bl	80199e0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	7d1b      	ldrb	r3, [r3, #20]
 801373c:	2b01      	cmp	r3, #1
 801373e:	d106      	bne.n	801374e <tcp_output+0x32>
 8013740:	4b84      	ldr	r3, [pc, #528]	; (8013954 <tcp_output+0x238>)
 8013742:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013746:	4986      	ldr	r1, [pc, #536]	; (8013960 <tcp_output+0x244>)
 8013748:	4884      	ldr	r0, [pc, #528]	; (801395c <tcp_output+0x240>)
 801374a:	f006 f949 	bl	80199e0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801374e:	4b85      	ldr	r3, [pc, #532]	; (8013964 <tcp_output+0x248>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	687a      	ldr	r2, [r7, #4]
 8013754:	429a      	cmp	r2, r3
 8013756:	d101      	bne.n	801375c <tcp_output+0x40>
    return ERR_OK;
 8013758:	2300      	movs	r3, #0
 801375a:	e1ce      	b.n	8013afa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013768:	4293      	cmp	r3, r2
 801376a:	bf28      	it	cs
 801376c:	4613      	movcs	r3, r2
 801376e:	b29b      	uxth	r3, r3
 8013770:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013776:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801377a:	2b00      	cmp	r3, #0
 801377c:	d10b      	bne.n	8013796 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	8b5b      	ldrh	r3, [r3, #26]
 8013782:	f003 0302 	and.w	r3, r3, #2
 8013786:	2b00      	cmp	r3, #0
 8013788:	f000 81aa 	beq.w	8013ae0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801378c:	6878      	ldr	r0, [r7, #4]
 801378e:	f000 fdcb 	bl	8014328 <tcp_send_empty_ack>
 8013792:	4603      	mov	r3, r0
 8013794:	e1b1      	b.n	8013afa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013796:	6879      	ldr	r1, [r7, #4]
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	3304      	adds	r3, #4
 801379c:	461a      	mov	r2, r3
 801379e:	6878      	ldr	r0, [r7, #4]
 80137a0:	f7ff f824 	bl	80127ec <tcp_route>
 80137a4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80137a6:	697b      	ldr	r3, [r7, #20]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d102      	bne.n	80137b2 <tcp_output+0x96>
    return ERR_RTE;
 80137ac:	f06f 0303 	mvn.w	r3, #3
 80137b0:	e1a3      	b.n	8013afa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d003      	beq.n	80137c0 <tcp_output+0xa4>
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d111      	bne.n	80137e4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d002      	beq.n	80137cc <tcp_output+0xb0>
 80137c6:	697b      	ldr	r3, [r7, #20]
 80137c8:	3304      	adds	r3, #4
 80137ca:	e000      	b.n	80137ce <tcp_output+0xb2>
 80137cc:	2300      	movs	r3, #0
 80137ce:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80137d0:	693b      	ldr	r3, [r7, #16]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d102      	bne.n	80137dc <tcp_output+0xc0>
      return ERR_RTE;
 80137d6:	f06f 0303 	mvn.w	r3, #3
 80137da:	e18e      	b.n	8013afa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80137dc:	693b      	ldr	r3, [r7, #16]
 80137de:	681a      	ldr	r2, [r3, #0]
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80137e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137e6:	68db      	ldr	r3, [r3, #12]
 80137e8:	685b      	ldr	r3, [r3, #4]
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7f9 f849 	bl	800c882 <lwip_htonl>
 80137f0:	4602      	mov	r2, r0
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137f6:	1ad3      	subs	r3, r2, r3
 80137f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137fa:	8912      	ldrh	r2, [r2, #8]
 80137fc:	4413      	add	r3, r2
 80137fe:	69ba      	ldr	r2, [r7, #24]
 8013800:	429a      	cmp	r2, r3
 8013802:	d227      	bcs.n	8013854 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801380a:	461a      	mov	r2, r3
 801380c:	69bb      	ldr	r3, [r7, #24]
 801380e:	4293      	cmp	r3, r2
 8013810:	d114      	bne.n	801383c <tcp_output+0x120>
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013816:	2b00      	cmp	r3, #0
 8013818:	d110      	bne.n	801383c <tcp_output+0x120>
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013820:	2b00      	cmp	r3, #0
 8013822:	d10b      	bne.n	801383c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	2200      	movs	r2, #0
 8013828:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	2201      	movs	r2, #1
 8013830:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2200      	movs	r2, #0
 8013838:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	8b5b      	ldrh	r3, [r3, #26]
 8013840:	f003 0302 	and.w	r3, r3, #2
 8013844:	2b00      	cmp	r3, #0
 8013846:	f000 814d 	beq.w	8013ae4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801384a:	6878      	ldr	r0, [r7, #4]
 801384c:	f000 fd6c 	bl	8014328 <tcp_send_empty_ack>
 8013850:	4603      	mov	r3, r0
 8013852:	e152      	b.n	8013afa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	2200      	movs	r2, #0
 8013858:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013860:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013862:	6a3b      	ldr	r3, [r7, #32]
 8013864:	2b00      	cmp	r3, #0
 8013866:	f000 811c 	beq.w	8013aa2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801386a:	e002      	b.n	8013872 <tcp_output+0x156>
 801386c:	6a3b      	ldr	r3, [r7, #32]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	623b      	str	r3, [r7, #32]
 8013872:	6a3b      	ldr	r3, [r7, #32]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d1f8      	bne.n	801386c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801387a:	e112      	b.n	8013aa2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801387e:	68db      	ldr	r3, [r3, #12]
 8013880:	899b      	ldrh	r3, [r3, #12]
 8013882:	b29b      	uxth	r3, r3
 8013884:	4618      	mov	r0, r3
 8013886:	f7f8 ffe7 	bl	800c858 <lwip_htons>
 801388a:	4603      	mov	r3, r0
 801388c:	b2db      	uxtb	r3, r3
 801388e:	f003 0304 	and.w	r3, r3, #4
 8013892:	2b00      	cmp	r3, #0
 8013894:	d006      	beq.n	80138a4 <tcp_output+0x188>
 8013896:	4b2f      	ldr	r3, [pc, #188]	; (8013954 <tcp_output+0x238>)
 8013898:	f240 5236 	movw	r2, #1334	; 0x536
 801389c:	4932      	ldr	r1, [pc, #200]	; (8013968 <tcp_output+0x24c>)
 801389e:	482f      	ldr	r0, [pc, #188]	; (801395c <tcp_output+0x240>)
 80138a0:	f006 f89e 	bl	80199e0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d01f      	beq.n	80138ec <tcp_output+0x1d0>
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	8b5b      	ldrh	r3, [r3, #26]
 80138b0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d119      	bne.n	80138ec <tcp_output+0x1d0>
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d00b      	beq.n	80138d8 <tcp_output+0x1bc>
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d110      	bne.n	80138ec <tcp_output+0x1d0>
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138ce:	891a      	ldrh	r2, [r3, #8]
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d209      	bcs.n	80138ec <tcp_output+0x1d0>
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d004      	beq.n	80138ec <tcp_output+0x1d0>
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80138e8:	2b08      	cmp	r3, #8
 80138ea:	d901      	bls.n	80138f0 <tcp_output+0x1d4>
 80138ec:	2301      	movs	r3, #1
 80138ee:	e000      	b.n	80138f2 <tcp_output+0x1d6>
 80138f0:	2300      	movs	r3, #0
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d106      	bne.n	8013904 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	8b5b      	ldrh	r3, [r3, #26]
 80138fa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80138fe:	2b00      	cmp	r3, #0
 8013900:	f000 80e4 	beq.w	8013acc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	7d1b      	ldrb	r3, [r3, #20]
 8013908:	2b02      	cmp	r3, #2
 801390a:	d00d      	beq.n	8013928 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801390e:	68db      	ldr	r3, [r3, #12]
 8013910:	899b      	ldrh	r3, [r3, #12]
 8013912:	b29c      	uxth	r4, r3
 8013914:	2010      	movs	r0, #16
 8013916:	f7f8 ff9f 	bl	800c858 <lwip_htons>
 801391a:	4603      	mov	r3, r0
 801391c:	461a      	mov	r2, r3
 801391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013920:	68db      	ldr	r3, [r3, #12]
 8013922:	4322      	orrs	r2, r4
 8013924:	b292      	uxth	r2, r2
 8013926:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013928:	697a      	ldr	r2, [r7, #20]
 801392a:	6879      	ldr	r1, [r7, #4]
 801392c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801392e:	f000 f909 	bl	8013b44 <tcp_output_segment>
 8013932:	4603      	mov	r3, r0
 8013934:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d016      	beq.n	801396c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	8b5b      	ldrh	r3, [r3, #26]
 8013942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013946:	b29a      	uxth	r2, r3
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	835a      	strh	r2, [r3, #26]
      return err;
 801394c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013950:	e0d3      	b.n	8013afa <tcp_output+0x3de>
 8013952:	bf00      	nop
 8013954:	0801cdf8 	.word	0x0801cdf8
 8013958:	0801d33c 	.word	0x0801d33c
 801395c:	0801ce4c 	.word	0x0801ce4c
 8013960:	0801d354 	.word	0x0801d354
 8013964:	200112ec 	.word	0x200112ec
 8013968:	0801d37c 	.word	0x0801d37c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801396e:	681a      	ldr	r2, [r3, #0]
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	7d1b      	ldrb	r3, [r3, #20]
 8013978:	2b02      	cmp	r3, #2
 801397a:	d006      	beq.n	801398a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	8b5b      	ldrh	r3, [r3, #26]
 8013980:	f023 0303 	bic.w	r3, r3, #3
 8013984:	b29a      	uxth	r2, r3
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801398c:	68db      	ldr	r3, [r3, #12]
 801398e:	685b      	ldr	r3, [r3, #4]
 8013990:	4618      	mov	r0, r3
 8013992:	f7f8 ff76 	bl	800c882 <lwip_htonl>
 8013996:	4604      	mov	r4, r0
 8013998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801399a:	891b      	ldrh	r3, [r3, #8]
 801399c:	461d      	mov	r5, r3
 801399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139a0:	68db      	ldr	r3, [r3, #12]
 80139a2:	899b      	ldrh	r3, [r3, #12]
 80139a4:	b29b      	uxth	r3, r3
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7f8 ff56 	bl	800c858 <lwip_htons>
 80139ac:	4603      	mov	r3, r0
 80139ae:	b2db      	uxtb	r3, r3
 80139b0:	f003 0303 	and.w	r3, r3, #3
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d001      	beq.n	80139bc <tcp_output+0x2a0>
 80139b8:	2301      	movs	r3, #1
 80139ba:	e000      	b.n	80139be <tcp_output+0x2a2>
 80139bc:	2300      	movs	r3, #0
 80139be:	442b      	add	r3, r5
 80139c0:	4423      	add	r3, r4
 80139c2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	1ad3      	subs	r3, r2, r3
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	da02      	bge.n	80139d6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	68ba      	ldr	r2, [r7, #8]
 80139d4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80139d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139d8:	891b      	ldrh	r3, [r3, #8]
 80139da:	461c      	mov	r4, r3
 80139dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139de:	68db      	ldr	r3, [r3, #12]
 80139e0:	899b      	ldrh	r3, [r3, #12]
 80139e2:	b29b      	uxth	r3, r3
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7f8 ff37 	bl	800c858 <lwip_htons>
 80139ea:	4603      	mov	r3, r0
 80139ec:	b2db      	uxtb	r3, r3
 80139ee:	f003 0303 	and.w	r3, r3, #3
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d001      	beq.n	80139fa <tcp_output+0x2de>
 80139f6:	2301      	movs	r3, #1
 80139f8:	e000      	b.n	80139fc <tcp_output+0x2e0>
 80139fa:	2300      	movs	r3, #0
 80139fc:	4423      	add	r3, r4
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d049      	beq.n	8013a96 <tcp_output+0x37a>
      seg->next = NULL;
 8013a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a04:	2200      	movs	r2, #0
 8013a06:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d105      	bne.n	8013a1c <tcp_output+0x300>
        pcb->unacked = seg;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a14:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a18:	623b      	str	r3, [r7, #32]
 8013a1a:	e03f      	b.n	8013a9c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1e:	68db      	ldr	r3, [r3, #12]
 8013a20:	685b      	ldr	r3, [r3, #4]
 8013a22:	4618      	mov	r0, r3
 8013a24:	f7f8 ff2d 	bl	800c882 <lwip_htonl>
 8013a28:	4604      	mov	r4, r0
 8013a2a:	6a3b      	ldr	r3, [r7, #32]
 8013a2c:	68db      	ldr	r3, [r3, #12]
 8013a2e:	685b      	ldr	r3, [r3, #4]
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7f8 ff26 	bl	800c882 <lwip_htonl>
 8013a36:	4603      	mov	r3, r0
 8013a38:	1ae3      	subs	r3, r4, r3
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	da24      	bge.n	8013a88 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	3370      	adds	r3, #112	; 0x70
 8013a42:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013a44:	e002      	b.n	8013a4c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013a46:	69fb      	ldr	r3, [r7, #28]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013a4c:	69fb      	ldr	r3, [r7, #28]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d011      	beq.n	8013a78 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013a54:	69fb      	ldr	r3, [r7, #28]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	68db      	ldr	r3, [r3, #12]
 8013a5a:	685b      	ldr	r3, [r3, #4]
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f7f8 ff10 	bl	800c882 <lwip_htonl>
 8013a62:	4604      	mov	r4, r0
 8013a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a66:	68db      	ldr	r3, [r3, #12]
 8013a68:	685b      	ldr	r3, [r3, #4]
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	f7f8 ff09 	bl	800c882 <lwip_htonl>
 8013a70:	4603      	mov	r3, r0
 8013a72:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	dbe6      	blt.n	8013a46 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013a78:	69fb      	ldr	r3, [r7, #28]
 8013a7a:	681a      	ldr	r2, [r3, #0]
 8013a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a7e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013a80:	69fb      	ldr	r3, [r7, #28]
 8013a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a84:	601a      	str	r2, [r3, #0]
 8013a86:	e009      	b.n	8013a9c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013a88:	6a3b      	ldr	r3, [r7, #32]
 8013a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a8c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013a8e:	6a3b      	ldr	r3, [r7, #32]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	623b      	str	r3, [r7, #32]
 8013a94:	e002      	b.n	8013a9c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013a96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a98:	f7fb ff19 	bl	800f8ce <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013aa0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d012      	beq.n	8013ace <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aaa:	68db      	ldr	r3, [r3, #12]
 8013aac:	685b      	ldr	r3, [r3, #4]
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f7f8 fee7 	bl	800c882 <lwip_htonl>
 8013ab4:	4602      	mov	r2, r0
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013aba:	1ad3      	subs	r3, r2, r3
 8013abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013abe:	8912      	ldrh	r2, [r2, #8]
 8013ac0:	4413      	add	r3, r2
  while (seg != NULL &&
 8013ac2:	69ba      	ldr	r2, [r7, #24]
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	f4bf aed9 	bcs.w	801387c <tcp_output+0x160>
 8013aca:	e000      	b.n	8013ace <tcp_output+0x3b2>
      break;
 8013acc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d108      	bne.n	8013ae8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	2200      	movs	r2, #0
 8013ada:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013ade:	e004      	b.n	8013aea <tcp_output+0x3ce>
    goto output_done;
 8013ae0:	bf00      	nop
 8013ae2:	e002      	b.n	8013aea <tcp_output+0x3ce>
    goto output_done;
 8013ae4:	bf00      	nop
 8013ae6:	e000      	b.n	8013aea <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013ae8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	8b5b      	ldrh	r3, [r3, #26]
 8013aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013af2:	b29a      	uxth	r2, r3
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013af8:	2300      	movs	r3, #0
}
 8013afa:	4618      	mov	r0, r3
 8013afc:	3728      	adds	r7, #40	; 0x28
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bdb0      	pop	{r4, r5, r7, pc}
 8013b02:	bf00      	nop

08013b04 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b082      	sub	sp, #8
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d106      	bne.n	8013b20 <tcp_output_segment_busy+0x1c>
 8013b12:	4b09      	ldr	r3, [pc, #36]	; (8013b38 <tcp_output_segment_busy+0x34>)
 8013b14:	f240 529a 	movw	r2, #1434	; 0x59a
 8013b18:	4908      	ldr	r1, [pc, #32]	; (8013b3c <tcp_output_segment_busy+0x38>)
 8013b1a:	4809      	ldr	r0, [pc, #36]	; (8013b40 <tcp_output_segment_busy+0x3c>)
 8013b1c:	f005 ff60 	bl	80199e0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	685b      	ldr	r3, [r3, #4]
 8013b24:	7b9b      	ldrb	r3, [r3, #14]
 8013b26:	2b01      	cmp	r3, #1
 8013b28:	d001      	beq.n	8013b2e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	e000      	b.n	8013b30 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013b2e:	2300      	movs	r3, #0
}
 8013b30:	4618      	mov	r0, r3
 8013b32:	3708      	adds	r7, #8
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bd80      	pop	{r7, pc}
 8013b38:	0801cdf8 	.word	0x0801cdf8
 8013b3c:	0801d394 	.word	0x0801d394
 8013b40:	0801ce4c 	.word	0x0801ce4c

08013b44 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013b44:	b5b0      	push	{r4, r5, r7, lr}
 8013b46:	b08c      	sub	sp, #48	; 0x30
 8013b48:	af04      	add	r7, sp, #16
 8013b4a:	60f8      	str	r0, [r7, #12]
 8013b4c:	60b9      	str	r1, [r7, #8]
 8013b4e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d106      	bne.n	8013b64 <tcp_output_segment+0x20>
 8013b56:	4b63      	ldr	r3, [pc, #396]	; (8013ce4 <tcp_output_segment+0x1a0>)
 8013b58:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013b5c:	4962      	ldr	r1, [pc, #392]	; (8013ce8 <tcp_output_segment+0x1a4>)
 8013b5e:	4863      	ldr	r0, [pc, #396]	; (8013cec <tcp_output_segment+0x1a8>)
 8013b60:	f005 ff3e 	bl	80199e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013b64:	68bb      	ldr	r3, [r7, #8]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d106      	bne.n	8013b78 <tcp_output_segment+0x34>
 8013b6a:	4b5e      	ldr	r3, [pc, #376]	; (8013ce4 <tcp_output_segment+0x1a0>)
 8013b6c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013b70:	495f      	ldr	r1, [pc, #380]	; (8013cf0 <tcp_output_segment+0x1ac>)
 8013b72:	485e      	ldr	r0, [pc, #376]	; (8013cec <tcp_output_segment+0x1a8>)
 8013b74:	f005 ff34 	bl	80199e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d106      	bne.n	8013b8c <tcp_output_segment+0x48>
 8013b7e:	4b59      	ldr	r3, [pc, #356]	; (8013ce4 <tcp_output_segment+0x1a0>)
 8013b80:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013b84:	495b      	ldr	r1, [pc, #364]	; (8013cf4 <tcp_output_segment+0x1b0>)
 8013b86:	4859      	ldr	r0, [pc, #356]	; (8013cec <tcp_output_segment+0x1a8>)
 8013b88:	f005 ff2a 	bl	80199e0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013b8c:	68f8      	ldr	r0, [r7, #12]
 8013b8e:	f7ff ffb9 	bl	8013b04 <tcp_output_segment_busy>
 8013b92:	4603      	mov	r3, r0
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d001      	beq.n	8013b9c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013b98:	2300      	movs	r3, #0
 8013b9a:	e09f      	b.n	8013cdc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013b9c:	68bb      	ldr	r3, [r7, #8]
 8013b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	68dc      	ldr	r4, [r3, #12]
 8013ba4:	4610      	mov	r0, r2
 8013ba6:	f7f8 fe6c 	bl	800c882 <lwip_htonl>
 8013baa:	4603      	mov	r3, r0
 8013bac:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013bae:	68bb      	ldr	r3, [r7, #8]
 8013bb0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	68dc      	ldr	r4, [r3, #12]
 8013bb6:	4610      	mov	r0, r2
 8013bb8:	f7f8 fe4e 	bl	800c858 <lwip_htons>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013bc0:	68bb      	ldr	r3, [r7, #8]
 8013bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bc4:	68ba      	ldr	r2, [r7, #8]
 8013bc6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013bc8:	441a      	add	r2, r3
 8013bca:	68bb      	ldr	r3, [r7, #8]
 8013bcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	68db      	ldr	r3, [r3, #12]
 8013bd2:	3314      	adds	r3, #20
 8013bd4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	7a9b      	ldrb	r3, [r3, #10]
 8013bda:	f003 0301 	and.w	r3, r3, #1
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d015      	beq.n	8013c0e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013be2:	68bb      	ldr	r3, [r7, #8]
 8013be4:	3304      	adds	r3, #4
 8013be6:	461a      	mov	r2, r3
 8013be8:	6879      	ldr	r1, [r7, #4]
 8013bea:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013bee:	f7fc fa33 	bl	8010058 <tcp_eff_send_mss_netif>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013bf6:	8b7b      	ldrh	r3, [r7, #26]
 8013bf8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7f8 fe40 	bl	800c882 <lwip_htonl>
 8013c02:	4602      	mov	r2, r0
 8013c04:	69fb      	ldr	r3, [r7, #28]
 8013c06:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013c08:	69fb      	ldr	r3, [r7, #28]
 8013c0a:	3304      	adds	r3, #4
 8013c0c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013c0e:	68bb      	ldr	r3, [r7, #8]
 8013c10:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	da02      	bge.n	8013c1e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013c1e:	68bb      	ldr	r3, [r7, #8]
 8013c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d10c      	bne.n	8013c40 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013c26:	4b34      	ldr	r3, [pc, #208]	; (8013cf8 <tcp_output_segment+0x1b4>)
 8013c28:	681a      	ldr	r2, [r3, #0]
 8013c2a:	68bb      	ldr	r3, [r7, #8]
 8013c2c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	68db      	ldr	r3, [r3, #12]
 8013c32:	685b      	ldr	r3, [r3, #4]
 8013c34:	4618      	mov	r0, r3
 8013c36:	f7f8 fe24 	bl	800c882 <lwip_htonl>
 8013c3a:	4602      	mov	r2, r0
 8013c3c:	68bb      	ldr	r3, [r7, #8]
 8013c3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	68da      	ldr	r2, [r3, #12]
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	685b      	ldr	r3, [r3, #4]
 8013c48:	685b      	ldr	r3, [r3, #4]
 8013c4a:	1ad3      	subs	r3, r2, r3
 8013c4c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	685b      	ldr	r3, [r3, #4]
 8013c52:	8959      	ldrh	r1, [r3, #10]
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	685b      	ldr	r3, [r3, #4]
 8013c58:	8b3a      	ldrh	r2, [r7, #24]
 8013c5a:	1a8a      	subs	r2, r1, r2
 8013c5c:	b292      	uxth	r2, r2
 8013c5e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	685b      	ldr	r3, [r3, #4]
 8013c64:	8919      	ldrh	r1, [r3, #8]
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	685b      	ldr	r3, [r3, #4]
 8013c6a:	8b3a      	ldrh	r2, [r7, #24]
 8013c6c:	1a8a      	subs	r2, r1, r2
 8013c6e:	b292      	uxth	r2, r2
 8013c70:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	685b      	ldr	r3, [r3, #4]
 8013c76:	68fa      	ldr	r2, [r7, #12]
 8013c78:	68d2      	ldr	r2, [r2, #12]
 8013c7a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	68db      	ldr	r3, [r3, #12]
 8013c80:	2200      	movs	r2, #0
 8013c82:	741a      	strb	r2, [r3, #16]
 8013c84:	2200      	movs	r2, #0
 8013c86:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	68db      	ldr	r3, [r3, #12]
 8013c8c:	f103 0214 	add.w	r2, r3, #20
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	7a9b      	ldrb	r3, [r3, #10]
 8013c94:	009b      	lsls	r3, r3, #2
 8013c96:	f003 0304 	and.w	r3, r3, #4
 8013c9a:	4413      	add	r3, r2
 8013c9c:	69fa      	ldr	r2, [r7, #28]
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d006      	beq.n	8013cb0 <tcp_output_segment+0x16c>
 8013ca2:	4b10      	ldr	r3, [pc, #64]	; (8013ce4 <tcp_output_segment+0x1a0>)
 8013ca4:	f240 621c 	movw	r2, #1564	; 0x61c
 8013ca8:	4914      	ldr	r1, [pc, #80]	; (8013cfc <tcp_output_segment+0x1b8>)
 8013caa:	4810      	ldr	r0, [pc, #64]	; (8013cec <tcp_output_segment+0x1a8>)
 8013cac:	f005 fe98 	bl	80199e0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	6858      	ldr	r0, [r3, #4]
 8013cb4:	68b9      	ldr	r1, [r7, #8]
 8013cb6:	68bb      	ldr	r3, [r7, #8]
 8013cb8:	1d1c      	adds	r4, r3, #4
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	7add      	ldrb	r5, [r3, #11]
 8013cbe:	68bb      	ldr	r3, [r7, #8]
 8013cc0:	7a9b      	ldrb	r3, [r3, #10]
 8013cc2:	687a      	ldr	r2, [r7, #4]
 8013cc4:	9202      	str	r2, [sp, #8]
 8013cc6:	2206      	movs	r2, #6
 8013cc8:	9201      	str	r2, [sp, #4]
 8013cca:	9300      	str	r3, [sp, #0]
 8013ccc:	462b      	mov	r3, r5
 8013cce:	4622      	mov	r2, r4
 8013cd0:	f002 fc1a 	bl	8016508 <ip4_output_if>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013cd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013cdc:	4618      	mov	r0, r3
 8013cde:	3720      	adds	r7, #32
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8013ce4:	0801cdf8 	.word	0x0801cdf8
 8013ce8:	0801d3bc 	.word	0x0801d3bc
 8013cec:	0801ce4c 	.word	0x0801ce4c
 8013cf0:	0801d3dc 	.word	0x0801d3dc
 8013cf4:	0801d3fc 	.word	0x0801d3fc
 8013cf8:	200112a0 	.word	0x200112a0
 8013cfc:	0801d420 	.word	0x0801d420

08013d00 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013d00:	b5b0      	push	{r4, r5, r7, lr}
 8013d02:	b084      	sub	sp, #16
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d106      	bne.n	8013d1c <tcp_rexmit_rto_prepare+0x1c>
 8013d0e:	4b31      	ldr	r3, [pc, #196]	; (8013dd4 <tcp_rexmit_rto_prepare+0xd4>)
 8013d10:	f240 6263 	movw	r2, #1635	; 0x663
 8013d14:	4930      	ldr	r1, [pc, #192]	; (8013dd8 <tcp_rexmit_rto_prepare+0xd8>)
 8013d16:	4831      	ldr	r0, [pc, #196]	; (8013ddc <tcp_rexmit_rto_prepare+0xdc>)
 8013d18:	f005 fe62 	bl	80199e0 <iprintf>

  if (pcb->unacked == NULL) {
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d102      	bne.n	8013d2a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013d24:	f06f 0305 	mvn.w	r3, #5
 8013d28:	e050      	b.n	8013dcc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d2e:	60fb      	str	r3, [r7, #12]
 8013d30:	e00b      	b.n	8013d4a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013d32:	68f8      	ldr	r0, [r7, #12]
 8013d34:	f7ff fee6 	bl	8013b04 <tcp_output_segment_busy>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d002      	beq.n	8013d44 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013d3e:	f06f 0305 	mvn.w	r3, #5
 8013d42:	e043      	b.n	8013dcc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	60fb      	str	r3, [r7, #12]
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d1ef      	bne.n	8013d32 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013d52:	68f8      	ldr	r0, [r7, #12]
 8013d54:	f7ff fed6 	bl	8013b04 <tcp_output_segment_busy>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d002      	beq.n	8013d64 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013d5e:	f06f 0305 	mvn.w	r3, #5
 8013d62:	e033      	b.n	8013dcc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2200      	movs	r2, #0
 8013d78:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	8b5b      	ldrh	r3, [r3, #26]
 8013d7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013d82:	b29a      	uxth	r2, r3
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	68db      	ldr	r3, [r3, #12]
 8013d8c:	685b      	ldr	r3, [r3, #4]
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7f8 fd77 	bl	800c882 <lwip_htonl>
 8013d94:	4604      	mov	r4, r0
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	891b      	ldrh	r3, [r3, #8]
 8013d9a:	461d      	mov	r5, r3
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	68db      	ldr	r3, [r3, #12]
 8013da0:	899b      	ldrh	r3, [r3, #12]
 8013da2:	b29b      	uxth	r3, r3
 8013da4:	4618      	mov	r0, r3
 8013da6:	f7f8 fd57 	bl	800c858 <lwip_htons>
 8013daa:	4603      	mov	r3, r0
 8013dac:	b2db      	uxtb	r3, r3
 8013dae:	f003 0303 	and.w	r3, r3, #3
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d001      	beq.n	8013dba <tcp_rexmit_rto_prepare+0xba>
 8013db6:	2301      	movs	r3, #1
 8013db8:	e000      	b.n	8013dbc <tcp_rexmit_rto_prepare+0xbc>
 8013dba:	2300      	movs	r3, #0
 8013dbc:	442b      	add	r3, r5
 8013dbe:	18e2      	adds	r2, r4, r3
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013dca:	2300      	movs	r3, #0
}
 8013dcc:	4618      	mov	r0, r3
 8013dce:	3710      	adds	r7, #16
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8013dd4:	0801cdf8 	.word	0x0801cdf8
 8013dd8:	0801d434 	.word	0x0801d434
 8013ddc:	0801ce4c 	.word	0x0801ce4c

08013de0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b082      	sub	sp, #8
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d106      	bne.n	8013dfc <tcp_rexmit_rto_commit+0x1c>
 8013dee:	4b0d      	ldr	r3, [pc, #52]	; (8013e24 <tcp_rexmit_rto_commit+0x44>)
 8013df0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013df4:	490c      	ldr	r1, [pc, #48]	; (8013e28 <tcp_rexmit_rto_commit+0x48>)
 8013df6:	480d      	ldr	r0, [pc, #52]	; (8013e2c <tcp_rexmit_rto_commit+0x4c>)
 8013df8:	f005 fdf2 	bl	80199e0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013e02:	2bff      	cmp	r3, #255	; 0xff
 8013e04:	d007      	beq.n	8013e16 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013e0c:	3301      	adds	r3, #1
 8013e0e:	b2da      	uxtb	r2, r3
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013e16:	6878      	ldr	r0, [r7, #4]
 8013e18:	f7ff fc80 	bl	801371c <tcp_output>
}
 8013e1c:	bf00      	nop
 8013e1e:	3708      	adds	r7, #8
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}
 8013e24:	0801cdf8 	.word	0x0801cdf8
 8013e28:	0801d458 	.word	0x0801d458
 8013e2c:	0801ce4c 	.word	0x0801ce4c

08013e30 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b082      	sub	sp, #8
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d106      	bne.n	8013e4c <tcp_rexmit_rto+0x1c>
 8013e3e:	4b0a      	ldr	r3, [pc, #40]	; (8013e68 <tcp_rexmit_rto+0x38>)
 8013e40:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013e44:	4909      	ldr	r1, [pc, #36]	; (8013e6c <tcp_rexmit_rto+0x3c>)
 8013e46:	480a      	ldr	r0, [pc, #40]	; (8013e70 <tcp_rexmit_rto+0x40>)
 8013e48:	f005 fdca 	bl	80199e0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013e4c:	6878      	ldr	r0, [r7, #4]
 8013e4e:	f7ff ff57 	bl	8013d00 <tcp_rexmit_rto_prepare>
 8013e52:	4603      	mov	r3, r0
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d102      	bne.n	8013e5e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013e58:	6878      	ldr	r0, [r7, #4]
 8013e5a:	f7ff ffc1 	bl	8013de0 <tcp_rexmit_rto_commit>
  }
}
 8013e5e:	bf00      	nop
 8013e60:	3708      	adds	r7, #8
 8013e62:	46bd      	mov	sp, r7
 8013e64:	bd80      	pop	{r7, pc}
 8013e66:	bf00      	nop
 8013e68:	0801cdf8 	.word	0x0801cdf8
 8013e6c:	0801d47c 	.word	0x0801d47c
 8013e70:	0801ce4c 	.word	0x0801ce4c

08013e74 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013e74:	b590      	push	{r4, r7, lr}
 8013e76:	b085      	sub	sp, #20
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d106      	bne.n	8013e90 <tcp_rexmit+0x1c>
 8013e82:	4b2f      	ldr	r3, [pc, #188]	; (8013f40 <tcp_rexmit+0xcc>)
 8013e84:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013e88:	492e      	ldr	r1, [pc, #184]	; (8013f44 <tcp_rexmit+0xd0>)
 8013e8a:	482f      	ldr	r0, [pc, #188]	; (8013f48 <tcp_rexmit+0xd4>)
 8013e8c:	f005 fda8 	bl	80199e0 <iprintf>

  if (pcb->unacked == NULL) {
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d102      	bne.n	8013e9e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013e98:	f06f 0305 	mvn.w	r3, #5
 8013e9c:	e04c      	b.n	8013f38 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ea2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013ea4:	68b8      	ldr	r0, [r7, #8]
 8013ea6:	f7ff fe2d 	bl	8013b04 <tcp_output_segment_busy>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d002      	beq.n	8013eb6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013eb0:	f06f 0305 	mvn.w	r3, #5
 8013eb4:	e040      	b.n	8013f38 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	681a      	ldr	r2, [r3, #0]
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	336c      	adds	r3, #108	; 0x6c
 8013ec2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013ec4:	e002      	b.n	8013ecc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d011      	beq.n	8013ef8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	68db      	ldr	r3, [r3, #12]
 8013eda:	685b      	ldr	r3, [r3, #4]
 8013edc:	4618      	mov	r0, r3
 8013ede:	f7f8 fcd0 	bl	800c882 <lwip_htonl>
 8013ee2:	4604      	mov	r4, r0
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	68db      	ldr	r3, [r3, #12]
 8013ee8:	685b      	ldr	r3, [r3, #4]
 8013eea:	4618      	mov	r0, r3
 8013eec:	f7f8 fcc9 	bl	800c882 <lwip_htonl>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	dbe6      	blt.n	8013ec6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	681a      	ldr	r2, [r3, #0]
 8013efc:	68bb      	ldr	r3, [r7, #8]
 8013efe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	68ba      	ldr	r2, [r7, #8]
 8013f04:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013f06:	68bb      	ldr	r3, [r7, #8]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d103      	bne.n	8013f16 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	2200      	movs	r2, #0
 8013f12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013f1c:	2bff      	cmp	r3, #255	; 0xff
 8013f1e:	d007      	beq.n	8013f30 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013f26:	3301      	adds	r3, #1
 8013f28:	b2da      	uxtb	r2, r3
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2200      	movs	r2, #0
 8013f34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013f36:	2300      	movs	r3, #0
}
 8013f38:	4618      	mov	r0, r3
 8013f3a:	3714      	adds	r7, #20
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	bd90      	pop	{r4, r7, pc}
 8013f40:	0801cdf8 	.word	0x0801cdf8
 8013f44:	0801d498 	.word	0x0801d498
 8013f48:	0801ce4c 	.word	0x0801ce4c

08013f4c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b082      	sub	sp, #8
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d106      	bne.n	8013f68 <tcp_rexmit_fast+0x1c>
 8013f5a:	4b2a      	ldr	r3, [pc, #168]	; (8014004 <tcp_rexmit_fast+0xb8>)
 8013f5c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013f60:	4929      	ldr	r1, [pc, #164]	; (8014008 <tcp_rexmit_fast+0xbc>)
 8013f62:	482a      	ldr	r0, [pc, #168]	; (801400c <tcp_rexmit_fast+0xc0>)
 8013f64:	f005 fd3c 	bl	80199e0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d045      	beq.n	8013ffc <tcp_rexmit_fast+0xb0>
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	8b5b      	ldrh	r3, [r3, #26]
 8013f74:	f003 0304 	and.w	r3, r3, #4
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d13f      	bne.n	8013ffc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013f7c:	6878      	ldr	r0, [r7, #4]
 8013f7e:	f7ff ff79 	bl	8013e74 <tcp_rexmit>
 8013f82:	4603      	mov	r3, r0
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d139      	bne.n	8013ffc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013f94:	4293      	cmp	r3, r2
 8013f96:	bf28      	it	cs
 8013f98:	4613      	movcs	r3, r2
 8013f9a:	b29b      	uxth	r3, r3
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	da00      	bge.n	8013fa2 <tcp_rexmit_fast+0x56>
 8013fa0:	3301      	adds	r3, #1
 8013fa2:	105b      	asrs	r3, r3, #1
 8013fa4:	b29a      	uxth	r2, r3
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013fb2:	461a      	mov	r2, r3
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013fb8:	005b      	lsls	r3, r3, #1
 8013fba:	429a      	cmp	r2, r3
 8013fbc:	d206      	bcs.n	8013fcc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013fc2:	005b      	lsls	r3, r3, #1
 8013fc4:	b29a      	uxth	r2, r3
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013fd6:	4619      	mov	r1, r3
 8013fd8:	0049      	lsls	r1, r1, #1
 8013fda:	440b      	add	r3, r1
 8013fdc:	b29b      	uxth	r3, r3
 8013fde:	4413      	add	r3, r2
 8013fe0:	b29a      	uxth	r2, r3
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	8b5b      	ldrh	r3, [r3, #26]
 8013fec:	f043 0304 	orr.w	r3, r3, #4
 8013ff0:	b29a      	uxth	r2, r3
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013ffc:	bf00      	nop
 8013ffe:	3708      	adds	r7, #8
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}
 8014004:	0801cdf8 	.word	0x0801cdf8
 8014008:	0801d4b0 	.word	0x0801d4b0
 801400c:	0801ce4c 	.word	0x0801ce4c

08014010 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b086      	sub	sp, #24
 8014014:	af00      	add	r7, sp, #0
 8014016:	60f8      	str	r0, [r7, #12]
 8014018:	607b      	str	r3, [r7, #4]
 801401a:	460b      	mov	r3, r1
 801401c:	817b      	strh	r3, [r7, #10]
 801401e:	4613      	mov	r3, r2
 8014020:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014022:	897a      	ldrh	r2, [r7, #10]
 8014024:	893b      	ldrh	r3, [r7, #8]
 8014026:	4413      	add	r3, r2
 8014028:	b29b      	uxth	r3, r3
 801402a:	3314      	adds	r3, #20
 801402c:	b29b      	uxth	r3, r3
 801402e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014032:	4619      	mov	r1, r3
 8014034:	2022      	movs	r0, #34	; 0x22
 8014036:	f7f9 fd2d 	bl	800da94 <pbuf_alloc>
 801403a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801403c:	697b      	ldr	r3, [r7, #20]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d04d      	beq.n	80140de <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014042:	897b      	ldrh	r3, [r7, #10]
 8014044:	3313      	adds	r3, #19
 8014046:	697a      	ldr	r2, [r7, #20]
 8014048:	8952      	ldrh	r2, [r2, #10]
 801404a:	4293      	cmp	r3, r2
 801404c:	db06      	blt.n	801405c <tcp_output_alloc_header_common+0x4c>
 801404e:	4b26      	ldr	r3, [pc, #152]	; (80140e8 <tcp_output_alloc_header_common+0xd8>)
 8014050:	f240 7223 	movw	r2, #1827	; 0x723
 8014054:	4925      	ldr	r1, [pc, #148]	; (80140ec <tcp_output_alloc_header_common+0xdc>)
 8014056:	4826      	ldr	r0, [pc, #152]	; (80140f0 <tcp_output_alloc_header_common+0xe0>)
 8014058:	f005 fcc2 	bl	80199e0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801405c:	697b      	ldr	r3, [r7, #20]
 801405e:	685b      	ldr	r3, [r3, #4]
 8014060:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014062:	8c3b      	ldrh	r3, [r7, #32]
 8014064:	4618      	mov	r0, r3
 8014066:	f7f8 fbf7 	bl	800c858 <lwip_htons>
 801406a:	4603      	mov	r3, r0
 801406c:	461a      	mov	r2, r3
 801406e:	693b      	ldr	r3, [r7, #16]
 8014070:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014074:	4618      	mov	r0, r3
 8014076:	f7f8 fbef 	bl	800c858 <lwip_htons>
 801407a:	4603      	mov	r3, r0
 801407c:	461a      	mov	r2, r3
 801407e:	693b      	ldr	r3, [r7, #16]
 8014080:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014082:	693b      	ldr	r3, [r7, #16]
 8014084:	687a      	ldr	r2, [r7, #4]
 8014086:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014088:	68f8      	ldr	r0, [r7, #12]
 801408a:	f7f8 fbfa 	bl	800c882 <lwip_htonl>
 801408e:	4602      	mov	r2, r0
 8014090:	693b      	ldr	r3, [r7, #16]
 8014092:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014094:	897b      	ldrh	r3, [r7, #10]
 8014096:	089b      	lsrs	r3, r3, #2
 8014098:	b29b      	uxth	r3, r3
 801409a:	3305      	adds	r3, #5
 801409c:	b29b      	uxth	r3, r3
 801409e:	031b      	lsls	r3, r3, #12
 80140a0:	b29a      	uxth	r2, r3
 80140a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80140a6:	b29b      	uxth	r3, r3
 80140a8:	4313      	orrs	r3, r2
 80140aa:	b29b      	uxth	r3, r3
 80140ac:	4618      	mov	r0, r3
 80140ae:	f7f8 fbd3 	bl	800c858 <lwip_htons>
 80140b2:	4603      	mov	r3, r0
 80140b4:	461a      	mov	r2, r3
 80140b6:	693b      	ldr	r3, [r7, #16]
 80140b8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80140ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80140bc:	4618      	mov	r0, r3
 80140be:	f7f8 fbcb 	bl	800c858 <lwip_htons>
 80140c2:	4603      	mov	r3, r0
 80140c4:	461a      	mov	r2, r3
 80140c6:	693b      	ldr	r3, [r7, #16]
 80140c8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80140ca:	693b      	ldr	r3, [r7, #16]
 80140cc:	2200      	movs	r2, #0
 80140ce:	741a      	strb	r2, [r3, #16]
 80140d0:	2200      	movs	r2, #0
 80140d2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	2200      	movs	r2, #0
 80140d8:	749a      	strb	r2, [r3, #18]
 80140da:	2200      	movs	r2, #0
 80140dc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80140de:	697b      	ldr	r3, [r7, #20]
}
 80140e0:	4618      	mov	r0, r3
 80140e2:	3718      	adds	r7, #24
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}
 80140e8:	0801cdf8 	.word	0x0801cdf8
 80140ec:	0801d4d0 	.word	0x0801d4d0
 80140f0:	0801ce4c 	.word	0x0801ce4c

080140f4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80140f4:	b5b0      	push	{r4, r5, r7, lr}
 80140f6:	b08a      	sub	sp, #40	; 0x28
 80140f8:	af04      	add	r7, sp, #16
 80140fa:	60f8      	str	r0, [r7, #12]
 80140fc:	607b      	str	r3, [r7, #4]
 80140fe:	460b      	mov	r3, r1
 8014100:	817b      	strh	r3, [r7, #10]
 8014102:	4613      	mov	r3, r2
 8014104:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d106      	bne.n	801411a <tcp_output_alloc_header+0x26>
 801410c:	4b15      	ldr	r3, [pc, #84]	; (8014164 <tcp_output_alloc_header+0x70>)
 801410e:	f240 7242 	movw	r2, #1858	; 0x742
 8014112:	4915      	ldr	r1, [pc, #84]	; (8014168 <tcp_output_alloc_header+0x74>)
 8014114:	4815      	ldr	r0, [pc, #84]	; (801416c <tcp_output_alloc_header+0x78>)
 8014116:	f005 fc63 	bl	80199e0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	8adb      	ldrh	r3, [r3, #22]
 8014122:	68fa      	ldr	r2, [r7, #12]
 8014124:	8b12      	ldrh	r2, [r2, #24]
 8014126:	68f9      	ldr	r1, [r7, #12]
 8014128:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801412a:	893d      	ldrh	r5, [r7, #8]
 801412c:	897c      	ldrh	r4, [r7, #10]
 801412e:	9103      	str	r1, [sp, #12]
 8014130:	2110      	movs	r1, #16
 8014132:	9102      	str	r1, [sp, #8]
 8014134:	9201      	str	r2, [sp, #4]
 8014136:	9300      	str	r3, [sp, #0]
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	462a      	mov	r2, r5
 801413c:	4621      	mov	r1, r4
 801413e:	f7ff ff67 	bl	8014010 <tcp_output_alloc_header_common>
 8014142:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014144:	697b      	ldr	r3, [r7, #20]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d006      	beq.n	8014158 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801414e:	68fa      	ldr	r2, [r7, #12]
 8014150:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014152:	441a      	add	r2, r3
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014158:	697b      	ldr	r3, [r7, #20]
}
 801415a:	4618      	mov	r0, r3
 801415c:	3718      	adds	r7, #24
 801415e:	46bd      	mov	sp, r7
 8014160:	bdb0      	pop	{r4, r5, r7, pc}
 8014162:	bf00      	nop
 8014164:	0801cdf8 	.word	0x0801cdf8
 8014168:	0801d500 	.word	0x0801d500
 801416c:	0801ce4c 	.word	0x0801ce4c

08014170 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b088      	sub	sp, #32
 8014174:	af00      	add	r7, sp, #0
 8014176:	60f8      	str	r0, [r7, #12]
 8014178:	60b9      	str	r1, [r7, #8]
 801417a:	4611      	mov	r1, r2
 801417c:	461a      	mov	r2, r3
 801417e:	460b      	mov	r3, r1
 8014180:	71fb      	strb	r3, [r7, #7]
 8014182:	4613      	mov	r3, r2
 8014184:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014186:	2300      	movs	r3, #0
 8014188:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d106      	bne.n	801419e <tcp_output_fill_options+0x2e>
 8014190:	4b13      	ldr	r3, [pc, #76]	; (80141e0 <tcp_output_fill_options+0x70>)
 8014192:	f240 7256 	movw	r2, #1878	; 0x756
 8014196:	4913      	ldr	r1, [pc, #76]	; (80141e4 <tcp_output_fill_options+0x74>)
 8014198:	4813      	ldr	r0, [pc, #76]	; (80141e8 <tcp_output_fill_options+0x78>)
 801419a:	f005 fc21 	bl	80199e0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801419e:	68bb      	ldr	r3, [r7, #8]
 80141a0:	685b      	ldr	r3, [r3, #4]
 80141a2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80141a4:	69bb      	ldr	r3, [r7, #24]
 80141a6:	3314      	adds	r3, #20
 80141a8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80141aa:	69bb      	ldr	r3, [r7, #24]
 80141ac:	f103 0214 	add.w	r2, r3, #20
 80141b0:	8bfb      	ldrh	r3, [r7, #30]
 80141b2:	009b      	lsls	r3, r3, #2
 80141b4:	4619      	mov	r1, r3
 80141b6:	79fb      	ldrb	r3, [r7, #7]
 80141b8:	009b      	lsls	r3, r3, #2
 80141ba:	f003 0304 	and.w	r3, r3, #4
 80141be:	440b      	add	r3, r1
 80141c0:	4413      	add	r3, r2
 80141c2:	697a      	ldr	r2, [r7, #20]
 80141c4:	429a      	cmp	r2, r3
 80141c6:	d006      	beq.n	80141d6 <tcp_output_fill_options+0x66>
 80141c8:	4b05      	ldr	r3, [pc, #20]	; (80141e0 <tcp_output_fill_options+0x70>)
 80141ca:	f240 7275 	movw	r2, #1909	; 0x775
 80141ce:	4907      	ldr	r1, [pc, #28]	; (80141ec <tcp_output_fill_options+0x7c>)
 80141d0:	4805      	ldr	r0, [pc, #20]	; (80141e8 <tcp_output_fill_options+0x78>)
 80141d2:	f005 fc05 	bl	80199e0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80141d6:	bf00      	nop
 80141d8:	3720      	adds	r7, #32
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}
 80141de:	bf00      	nop
 80141e0:	0801cdf8 	.word	0x0801cdf8
 80141e4:	0801d528 	.word	0x0801d528
 80141e8:	0801ce4c 	.word	0x0801ce4c
 80141ec:	0801d420 	.word	0x0801d420

080141f0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b08a      	sub	sp, #40	; 0x28
 80141f4:	af04      	add	r7, sp, #16
 80141f6:	60f8      	str	r0, [r7, #12]
 80141f8:	60b9      	str	r1, [r7, #8]
 80141fa:	607a      	str	r2, [r7, #4]
 80141fc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80141fe:	68bb      	ldr	r3, [r7, #8]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d106      	bne.n	8014212 <tcp_output_control_segment+0x22>
 8014204:	4b1c      	ldr	r3, [pc, #112]	; (8014278 <tcp_output_control_segment+0x88>)
 8014206:	f240 7287 	movw	r2, #1927	; 0x787
 801420a:	491c      	ldr	r1, [pc, #112]	; (801427c <tcp_output_control_segment+0x8c>)
 801420c:	481c      	ldr	r0, [pc, #112]	; (8014280 <tcp_output_control_segment+0x90>)
 801420e:	f005 fbe7 	bl	80199e0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014212:	683a      	ldr	r2, [r7, #0]
 8014214:	6879      	ldr	r1, [r7, #4]
 8014216:	68f8      	ldr	r0, [r7, #12]
 8014218:	f7fe fae8 	bl	80127ec <tcp_route>
 801421c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801421e:	693b      	ldr	r3, [r7, #16]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d102      	bne.n	801422a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014224:	23fc      	movs	r3, #252	; 0xfc
 8014226:	75fb      	strb	r3, [r7, #23]
 8014228:	e01c      	b.n	8014264 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d006      	beq.n	801423e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	7adb      	ldrb	r3, [r3, #11]
 8014234:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	7a9b      	ldrb	r3, [r3, #10]
 801423a:	757b      	strb	r3, [r7, #21]
 801423c:	e003      	b.n	8014246 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801423e:	23ff      	movs	r3, #255	; 0xff
 8014240:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014242:	2300      	movs	r3, #0
 8014244:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014246:	7dba      	ldrb	r2, [r7, #22]
 8014248:	693b      	ldr	r3, [r7, #16]
 801424a:	9302      	str	r3, [sp, #8]
 801424c:	2306      	movs	r3, #6
 801424e:	9301      	str	r3, [sp, #4]
 8014250:	7d7b      	ldrb	r3, [r7, #21]
 8014252:	9300      	str	r3, [sp, #0]
 8014254:	4613      	mov	r3, r2
 8014256:	683a      	ldr	r2, [r7, #0]
 8014258:	6879      	ldr	r1, [r7, #4]
 801425a:	68b8      	ldr	r0, [r7, #8]
 801425c:	f002 f954 	bl	8016508 <ip4_output_if>
 8014260:	4603      	mov	r3, r0
 8014262:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014264:	68b8      	ldr	r0, [r7, #8]
 8014266:	f7f9 fef9 	bl	800e05c <pbuf_free>
  return err;
 801426a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801426e:	4618      	mov	r0, r3
 8014270:	3718      	adds	r7, #24
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}
 8014276:	bf00      	nop
 8014278:	0801cdf8 	.word	0x0801cdf8
 801427c:	0801d550 	.word	0x0801d550
 8014280:	0801ce4c 	.word	0x0801ce4c

08014284 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014284:	b590      	push	{r4, r7, lr}
 8014286:	b08b      	sub	sp, #44	; 0x2c
 8014288:	af04      	add	r7, sp, #16
 801428a:	60f8      	str	r0, [r7, #12]
 801428c:	60b9      	str	r1, [r7, #8]
 801428e:	607a      	str	r2, [r7, #4]
 8014290:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014292:	683b      	ldr	r3, [r7, #0]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d106      	bne.n	80142a6 <tcp_rst+0x22>
 8014298:	4b1f      	ldr	r3, [pc, #124]	; (8014318 <tcp_rst+0x94>)
 801429a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801429e:	491f      	ldr	r1, [pc, #124]	; (801431c <tcp_rst+0x98>)
 80142a0:	481f      	ldr	r0, [pc, #124]	; (8014320 <tcp_rst+0x9c>)
 80142a2:	f005 fb9d 	bl	80199e0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80142a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d106      	bne.n	80142ba <tcp_rst+0x36>
 80142ac:	4b1a      	ldr	r3, [pc, #104]	; (8014318 <tcp_rst+0x94>)
 80142ae:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80142b2:	491c      	ldr	r1, [pc, #112]	; (8014324 <tcp_rst+0xa0>)
 80142b4:	481a      	ldr	r0, [pc, #104]	; (8014320 <tcp_rst+0x9c>)
 80142b6:	f005 fb93 	bl	80199e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80142ba:	2300      	movs	r3, #0
 80142bc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80142be:	f246 0308 	movw	r3, #24584	; 0x6008
 80142c2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80142c4:	7dfb      	ldrb	r3, [r7, #23]
 80142c6:	b29c      	uxth	r4, r3
 80142c8:	68b8      	ldr	r0, [r7, #8]
 80142ca:	f7f8 fada 	bl	800c882 <lwip_htonl>
 80142ce:	4602      	mov	r2, r0
 80142d0:	8abb      	ldrh	r3, [r7, #20]
 80142d2:	9303      	str	r3, [sp, #12]
 80142d4:	2314      	movs	r3, #20
 80142d6:	9302      	str	r3, [sp, #8]
 80142d8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80142da:	9301      	str	r3, [sp, #4]
 80142dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80142de:	9300      	str	r3, [sp, #0]
 80142e0:	4613      	mov	r3, r2
 80142e2:	2200      	movs	r2, #0
 80142e4:	4621      	mov	r1, r4
 80142e6:	6878      	ldr	r0, [r7, #4]
 80142e8:	f7ff fe92 	bl	8014010 <tcp_output_alloc_header_common>
 80142ec:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80142ee:	693b      	ldr	r3, [r7, #16]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d00c      	beq.n	801430e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80142f4:	7dfb      	ldrb	r3, [r7, #23]
 80142f6:	2200      	movs	r2, #0
 80142f8:	6939      	ldr	r1, [r7, #16]
 80142fa:	68f8      	ldr	r0, [r7, #12]
 80142fc:	f7ff ff38 	bl	8014170 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014302:	683a      	ldr	r2, [r7, #0]
 8014304:	6939      	ldr	r1, [r7, #16]
 8014306:	68f8      	ldr	r0, [r7, #12]
 8014308:	f7ff ff72 	bl	80141f0 <tcp_output_control_segment>
 801430c:	e000      	b.n	8014310 <tcp_rst+0x8c>
    return;
 801430e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014310:	371c      	adds	r7, #28
 8014312:	46bd      	mov	sp, r7
 8014314:	bd90      	pop	{r4, r7, pc}
 8014316:	bf00      	nop
 8014318:	0801cdf8 	.word	0x0801cdf8
 801431c:	0801d57c 	.word	0x0801d57c
 8014320:	0801ce4c 	.word	0x0801ce4c
 8014324:	0801d598 	.word	0x0801d598

08014328 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014328:	b590      	push	{r4, r7, lr}
 801432a:	b087      	sub	sp, #28
 801432c:	af00      	add	r7, sp, #0
 801432e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014330:	2300      	movs	r3, #0
 8014332:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014334:	2300      	movs	r3, #0
 8014336:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d106      	bne.n	801434c <tcp_send_empty_ack+0x24>
 801433e:	4b28      	ldr	r3, [pc, #160]	; (80143e0 <tcp_send_empty_ack+0xb8>)
 8014340:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014344:	4927      	ldr	r1, [pc, #156]	; (80143e4 <tcp_send_empty_ack+0xbc>)
 8014346:	4828      	ldr	r0, [pc, #160]	; (80143e8 <tcp_send_empty_ack+0xc0>)
 8014348:	f005 fb4a 	bl	80199e0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801434c:	7dfb      	ldrb	r3, [r7, #23]
 801434e:	009b      	lsls	r3, r3, #2
 8014350:	b2db      	uxtb	r3, r3
 8014352:	f003 0304 	and.w	r3, r3, #4
 8014356:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014358:	7d7b      	ldrb	r3, [r7, #21]
 801435a:	b29c      	uxth	r4, r3
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014360:	4618      	mov	r0, r3
 8014362:	f7f8 fa8e 	bl	800c882 <lwip_htonl>
 8014366:	4603      	mov	r3, r0
 8014368:	2200      	movs	r2, #0
 801436a:	4621      	mov	r1, r4
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f7ff fec1 	bl	80140f4 <tcp_output_alloc_header>
 8014372:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d109      	bne.n	801438e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	8b5b      	ldrh	r3, [r3, #26]
 801437e:	f043 0303 	orr.w	r3, r3, #3
 8014382:	b29a      	uxth	r2, r3
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014388:	f06f 0301 	mvn.w	r3, #1
 801438c:	e023      	b.n	80143d6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801438e:	7dbb      	ldrb	r3, [r7, #22]
 8014390:	7dfa      	ldrb	r2, [r7, #23]
 8014392:	6939      	ldr	r1, [r7, #16]
 8014394:	6878      	ldr	r0, [r7, #4]
 8014396:	f7ff feeb 	bl	8014170 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801439a:	687a      	ldr	r2, [r7, #4]
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	3304      	adds	r3, #4
 80143a0:	6939      	ldr	r1, [r7, #16]
 80143a2:	6878      	ldr	r0, [r7, #4]
 80143a4:	f7ff ff24 	bl	80141f0 <tcp_output_control_segment>
 80143a8:	4603      	mov	r3, r0
 80143aa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80143ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d007      	beq.n	80143c4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	8b5b      	ldrh	r3, [r3, #26]
 80143b8:	f043 0303 	orr.w	r3, r3, #3
 80143bc:	b29a      	uxth	r2, r3
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	835a      	strh	r2, [r3, #26]
 80143c2:	e006      	b.n	80143d2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	8b5b      	ldrh	r3, [r3, #26]
 80143c8:	f023 0303 	bic.w	r3, r3, #3
 80143cc:	b29a      	uxth	r2, r3
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80143d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80143d6:	4618      	mov	r0, r3
 80143d8:	371c      	adds	r7, #28
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd90      	pop	{r4, r7, pc}
 80143de:	bf00      	nop
 80143e0:	0801cdf8 	.word	0x0801cdf8
 80143e4:	0801d5b4 	.word	0x0801d5b4
 80143e8:	0801ce4c 	.word	0x0801ce4c

080143ec <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80143ec:	b590      	push	{r4, r7, lr}
 80143ee:	b087      	sub	sp, #28
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80143f4:	2300      	movs	r3, #0
 80143f6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d106      	bne.n	801440c <tcp_keepalive+0x20>
 80143fe:	4b18      	ldr	r3, [pc, #96]	; (8014460 <tcp_keepalive+0x74>)
 8014400:	f640 0224 	movw	r2, #2084	; 0x824
 8014404:	4917      	ldr	r1, [pc, #92]	; (8014464 <tcp_keepalive+0x78>)
 8014406:	4818      	ldr	r0, [pc, #96]	; (8014468 <tcp_keepalive+0x7c>)
 8014408:	f005 faea 	bl	80199e0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801440c:	7dfb      	ldrb	r3, [r7, #23]
 801440e:	b29c      	uxth	r4, r3
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014414:	3b01      	subs	r3, #1
 8014416:	4618      	mov	r0, r3
 8014418:	f7f8 fa33 	bl	800c882 <lwip_htonl>
 801441c:	4603      	mov	r3, r0
 801441e:	2200      	movs	r2, #0
 8014420:	4621      	mov	r1, r4
 8014422:	6878      	ldr	r0, [r7, #4]
 8014424:	f7ff fe66 	bl	80140f4 <tcp_output_alloc_header>
 8014428:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801442a:	693b      	ldr	r3, [r7, #16]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d102      	bne.n	8014436 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014434:	e010      	b.n	8014458 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014436:	7dfb      	ldrb	r3, [r7, #23]
 8014438:	2200      	movs	r2, #0
 801443a:	6939      	ldr	r1, [r7, #16]
 801443c:	6878      	ldr	r0, [r7, #4]
 801443e:	f7ff fe97 	bl	8014170 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014442:	687a      	ldr	r2, [r7, #4]
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	3304      	adds	r3, #4
 8014448:	6939      	ldr	r1, [r7, #16]
 801444a:	6878      	ldr	r0, [r7, #4]
 801444c:	f7ff fed0 	bl	80141f0 <tcp_output_control_segment>
 8014450:	4603      	mov	r3, r0
 8014452:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014454:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014458:	4618      	mov	r0, r3
 801445a:	371c      	adds	r7, #28
 801445c:	46bd      	mov	sp, r7
 801445e:	bd90      	pop	{r4, r7, pc}
 8014460:	0801cdf8 	.word	0x0801cdf8
 8014464:	0801d5d4 	.word	0x0801d5d4
 8014468:	0801ce4c 	.word	0x0801ce4c

0801446c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801446c:	b590      	push	{r4, r7, lr}
 801446e:	b08b      	sub	sp, #44	; 0x2c
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014474:	2300      	movs	r3, #0
 8014476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d106      	bne.n	801448e <tcp_zero_window_probe+0x22>
 8014480:	4b4c      	ldr	r3, [pc, #304]	; (80145b4 <tcp_zero_window_probe+0x148>)
 8014482:	f640 024f 	movw	r2, #2127	; 0x84f
 8014486:	494c      	ldr	r1, [pc, #304]	; (80145b8 <tcp_zero_window_probe+0x14c>)
 8014488:	484c      	ldr	r0, [pc, #304]	; (80145bc <tcp_zero_window_probe+0x150>)
 801448a:	f005 faa9 	bl	80199e0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014492:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014494:	6a3b      	ldr	r3, [r7, #32]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d101      	bne.n	801449e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801449a:	2300      	movs	r3, #0
 801449c:	e086      	b.n	80145ac <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80144a4:	2bff      	cmp	r3, #255	; 0xff
 80144a6:	d007      	beq.n	80144b8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80144ae:	3301      	adds	r3, #1
 80144b0:	b2da      	uxtb	r2, r3
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80144b8:	6a3b      	ldr	r3, [r7, #32]
 80144ba:	68db      	ldr	r3, [r3, #12]
 80144bc:	899b      	ldrh	r3, [r3, #12]
 80144be:	b29b      	uxth	r3, r3
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7f8 f9c9 	bl	800c858 <lwip_htons>
 80144c6:	4603      	mov	r3, r0
 80144c8:	b2db      	uxtb	r3, r3
 80144ca:	f003 0301 	and.w	r3, r3, #1
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d005      	beq.n	80144de <tcp_zero_window_probe+0x72>
 80144d2:	6a3b      	ldr	r3, [r7, #32]
 80144d4:	891b      	ldrh	r3, [r3, #8]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d101      	bne.n	80144de <tcp_zero_window_probe+0x72>
 80144da:	2301      	movs	r3, #1
 80144dc:	e000      	b.n	80144e0 <tcp_zero_window_probe+0x74>
 80144de:	2300      	movs	r3, #0
 80144e0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80144e2:	7ffb      	ldrb	r3, [r7, #31]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	bf0c      	ite	eq
 80144e8:	2301      	moveq	r3, #1
 80144ea:	2300      	movne	r3, #0
 80144ec:	b2db      	uxtb	r3, r3
 80144ee:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80144f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144f4:	b299      	uxth	r1, r3
 80144f6:	6a3b      	ldr	r3, [r7, #32]
 80144f8:	68db      	ldr	r3, [r3, #12]
 80144fa:	685b      	ldr	r3, [r3, #4]
 80144fc:	8bba      	ldrh	r2, [r7, #28]
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f7ff fdf8 	bl	80140f4 <tcp_output_alloc_header>
 8014504:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014506:	69bb      	ldr	r3, [r7, #24]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d102      	bne.n	8014512 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801450c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014510:	e04c      	b.n	80145ac <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014512:	69bb      	ldr	r3, [r7, #24]
 8014514:	685b      	ldr	r3, [r3, #4]
 8014516:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014518:	7ffb      	ldrb	r3, [r7, #31]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d011      	beq.n	8014542 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	899b      	ldrh	r3, [r3, #12]
 8014522:	b29b      	uxth	r3, r3
 8014524:	b21b      	sxth	r3, r3
 8014526:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801452a:	b21c      	sxth	r4, r3
 801452c:	2011      	movs	r0, #17
 801452e:	f7f8 f993 	bl	800c858 <lwip_htons>
 8014532:	4603      	mov	r3, r0
 8014534:	b21b      	sxth	r3, r3
 8014536:	4323      	orrs	r3, r4
 8014538:	b21b      	sxth	r3, r3
 801453a:	b29a      	uxth	r2, r3
 801453c:	697b      	ldr	r3, [r7, #20]
 801453e:	819a      	strh	r2, [r3, #12]
 8014540:	e010      	b.n	8014564 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014542:	69bb      	ldr	r3, [r7, #24]
 8014544:	685b      	ldr	r3, [r3, #4]
 8014546:	3314      	adds	r3, #20
 8014548:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801454a:	6a3b      	ldr	r3, [r7, #32]
 801454c:	6858      	ldr	r0, [r3, #4]
 801454e:	6a3b      	ldr	r3, [r7, #32]
 8014550:	685b      	ldr	r3, [r3, #4]
 8014552:	891a      	ldrh	r2, [r3, #8]
 8014554:	6a3b      	ldr	r3, [r7, #32]
 8014556:	891b      	ldrh	r3, [r3, #8]
 8014558:	1ad3      	subs	r3, r2, r3
 801455a:	b29b      	uxth	r3, r3
 801455c:	2201      	movs	r2, #1
 801455e:	6939      	ldr	r1, [r7, #16]
 8014560:	f7f9 ff72 	bl	800e448 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014564:	6a3b      	ldr	r3, [r7, #32]
 8014566:	68db      	ldr	r3, [r3, #12]
 8014568:	685b      	ldr	r3, [r3, #4]
 801456a:	4618      	mov	r0, r3
 801456c:	f7f8 f989 	bl	800c882 <lwip_htonl>
 8014570:	4603      	mov	r3, r0
 8014572:	3301      	adds	r3, #1
 8014574:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	1ad3      	subs	r3, r2, r3
 801457e:	2b00      	cmp	r3, #0
 8014580:	da02      	bge.n	8014588 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	68fa      	ldr	r2, [r7, #12]
 8014586:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801458c:	2200      	movs	r2, #0
 801458e:	69b9      	ldr	r1, [r7, #24]
 8014590:	6878      	ldr	r0, [r7, #4]
 8014592:	f7ff fded 	bl	8014170 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014596:	687a      	ldr	r2, [r7, #4]
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	3304      	adds	r3, #4
 801459c:	69b9      	ldr	r1, [r7, #24]
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f7ff fe26 	bl	80141f0 <tcp_output_control_segment>
 80145a4:	4603      	mov	r3, r0
 80145a6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80145a8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	372c      	adds	r7, #44	; 0x2c
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd90      	pop	{r4, r7, pc}
 80145b4:	0801cdf8 	.word	0x0801cdf8
 80145b8:	0801d5f0 	.word	0x0801d5f0
 80145bc:	0801ce4c 	.word	0x0801ce4c

080145c0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b082      	sub	sp, #8
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80145c8:	f7fa f82c 	bl	800e624 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80145cc:	4b0a      	ldr	r3, [pc, #40]	; (80145f8 <tcpip_tcp_timer+0x38>)
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d103      	bne.n	80145dc <tcpip_tcp_timer+0x1c>
 80145d4:	4b09      	ldr	r3, [pc, #36]	; (80145fc <tcpip_tcp_timer+0x3c>)
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d005      	beq.n	80145e8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80145dc:	2200      	movs	r2, #0
 80145de:	4908      	ldr	r1, [pc, #32]	; (8014600 <tcpip_tcp_timer+0x40>)
 80145e0:	20fa      	movs	r0, #250	; 0xfa
 80145e2:	f000 f8f3 	bl	80147cc <sys_timeout>
 80145e6:	e003      	b.n	80145f0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80145e8:	4b06      	ldr	r3, [pc, #24]	; (8014604 <tcpip_tcp_timer+0x44>)
 80145ea:	2200      	movs	r2, #0
 80145ec:	601a      	str	r2, [r3, #0]
  }
}
 80145ee:	bf00      	nop
 80145f0:	bf00      	nop
 80145f2:	3708      	adds	r7, #8
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}
 80145f8:	200112ac 	.word	0x200112ac
 80145fc:	200112b0 	.word	0x200112b0
 8014600:	080145c1 	.word	0x080145c1
 8014604:	200112f8 	.word	0x200112f8

08014608 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801460c:	4b0a      	ldr	r3, [pc, #40]	; (8014638 <tcp_timer_needed+0x30>)
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d10f      	bne.n	8014634 <tcp_timer_needed+0x2c>
 8014614:	4b09      	ldr	r3, [pc, #36]	; (801463c <tcp_timer_needed+0x34>)
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d103      	bne.n	8014624 <tcp_timer_needed+0x1c>
 801461c:	4b08      	ldr	r3, [pc, #32]	; (8014640 <tcp_timer_needed+0x38>)
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d007      	beq.n	8014634 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014624:	4b04      	ldr	r3, [pc, #16]	; (8014638 <tcp_timer_needed+0x30>)
 8014626:	2201      	movs	r2, #1
 8014628:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801462a:	2200      	movs	r2, #0
 801462c:	4905      	ldr	r1, [pc, #20]	; (8014644 <tcp_timer_needed+0x3c>)
 801462e:	20fa      	movs	r0, #250	; 0xfa
 8014630:	f000 f8cc 	bl	80147cc <sys_timeout>
  }
}
 8014634:	bf00      	nop
 8014636:	bd80      	pop	{r7, pc}
 8014638:	200112f8 	.word	0x200112f8
 801463c:	200112ac 	.word	0x200112ac
 8014640:	200112b0 	.word	0x200112b0
 8014644:	080145c1 	.word	0x080145c1

08014648 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014648:	b580      	push	{r7, lr}
 801464a:	b086      	sub	sp, #24
 801464c:	af00      	add	r7, sp, #0
 801464e:	60f8      	str	r0, [r7, #12]
 8014650:	60b9      	str	r1, [r7, #8]
 8014652:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014654:	200a      	movs	r0, #10
 8014656:	f7f8 fde7 	bl	800d228 <memp_malloc>
 801465a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801465c:	693b      	ldr	r3, [r7, #16]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d109      	bne.n	8014676 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014662:	693b      	ldr	r3, [r7, #16]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d151      	bne.n	801470c <sys_timeout_abs+0xc4>
 8014668:	4b2a      	ldr	r3, [pc, #168]	; (8014714 <sys_timeout_abs+0xcc>)
 801466a:	22be      	movs	r2, #190	; 0xbe
 801466c:	492a      	ldr	r1, [pc, #168]	; (8014718 <sys_timeout_abs+0xd0>)
 801466e:	482b      	ldr	r0, [pc, #172]	; (801471c <sys_timeout_abs+0xd4>)
 8014670:	f005 f9b6 	bl	80199e0 <iprintf>
    return;
 8014674:	e04a      	b.n	801470c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014676:	693b      	ldr	r3, [r7, #16]
 8014678:	2200      	movs	r2, #0
 801467a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801467c:	693b      	ldr	r3, [r7, #16]
 801467e:	68ba      	ldr	r2, [r7, #8]
 8014680:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014682:	693b      	ldr	r3, [r7, #16]
 8014684:	687a      	ldr	r2, [r7, #4]
 8014686:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014688:	693b      	ldr	r3, [r7, #16]
 801468a:	68fa      	ldr	r2, [r7, #12]
 801468c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801468e:	4b24      	ldr	r3, [pc, #144]	; (8014720 <sys_timeout_abs+0xd8>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d103      	bne.n	801469e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014696:	4a22      	ldr	r2, [pc, #136]	; (8014720 <sys_timeout_abs+0xd8>)
 8014698:	693b      	ldr	r3, [r7, #16]
 801469a:	6013      	str	r3, [r2, #0]
    return;
 801469c:	e037      	b.n	801470e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801469e:	693b      	ldr	r3, [r7, #16]
 80146a0:	685a      	ldr	r2, [r3, #4]
 80146a2:	4b1f      	ldr	r3, [pc, #124]	; (8014720 <sys_timeout_abs+0xd8>)
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	685b      	ldr	r3, [r3, #4]
 80146a8:	1ad3      	subs	r3, r2, r3
 80146aa:	0fdb      	lsrs	r3, r3, #31
 80146ac:	f003 0301 	and.w	r3, r3, #1
 80146b0:	b2db      	uxtb	r3, r3
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d007      	beq.n	80146c6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80146b6:	4b1a      	ldr	r3, [pc, #104]	; (8014720 <sys_timeout_abs+0xd8>)
 80146b8:	681a      	ldr	r2, [r3, #0]
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80146be:	4a18      	ldr	r2, [pc, #96]	; (8014720 <sys_timeout_abs+0xd8>)
 80146c0:	693b      	ldr	r3, [r7, #16]
 80146c2:	6013      	str	r3, [r2, #0]
 80146c4:	e023      	b.n	801470e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80146c6:	4b16      	ldr	r3, [pc, #88]	; (8014720 <sys_timeout_abs+0xd8>)
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	617b      	str	r3, [r7, #20]
 80146cc:	e01a      	b.n	8014704 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80146ce:	697b      	ldr	r3, [r7, #20]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d00b      	beq.n	80146ee <sys_timeout_abs+0xa6>
 80146d6:	693b      	ldr	r3, [r7, #16]
 80146d8:	685a      	ldr	r2, [r3, #4]
 80146da:	697b      	ldr	r3, [r7, #20]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	685b      	ldr	r3, [r3, #4]
 80146e0:	1ad3      	subs	r3, r2, r3
 80146e2:	0fdb      	lsrs	r3, r3, #31
 80146e4:	f003 0301 	and.w	r3, r3, #1
 80146e8:	b2db      	uxtb	r3, r3
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d007      	beq.n	80146fe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80146ee:	697b      	ldr	r3, [r7, #20]
 80146f0:	681a      	ldr	r2, [r3, #0]
 80146f2:	693b      	ldr	r3, [r7, #16]
 80146f4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	693a      	ldr	r2, [r7, #16]
 80146fa:	601a      	str	r2, [r3, #0]
        break;
 80146fc:	e007      	b.n	801470e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80146fe:	697b      	ldr	r3, [r7, #20]
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	617b      	str	r3, [r7, #20]
 8014704:	697b      	ldr	r3, [r7, #20]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d1e1      	bne.n	80146ce <sys_timeout_abs+0x86>
 801470a:	e000      	b.n	801470e <sys_timeout_abs+0xc6>
    return;
 801470c:	bf00      	nop
      }
    }
  }
}
 801470e:	3718      	adds	r7, #24
 8014710:	46bd      	mov	sp, r7
 8014712:	bd80      	pop	{r7, pc}
 8014714:	0801d614 	.word	0x0801d614
 8014718:	0801d648 	.word	0x0801d648
 801471c:	0801d688 	.word	0x0801d688
 8014720:	200112f0 	.word	0x200112f0

08014724 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b086      	sub	sp, #24
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014730:	697b      	ldr	r3, [r7, #20]
 8014732:	685b      	ldr	r3, [r3, #4]
 8014734:	4798      	blx	r3

  now = sys_now();
 8014736:	f7f2 fc9d 	bl	8007074 <sys_now>
 801473a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801473c:	697b      	ldr	r3, [r7, #20]
 801473e:	681a      	ldr	r2, [r3, #0]
 8014740:	4b0f      	ldr	r3, [pc, #60]	; (8014780 <lwip_cyclic_timer+0x5c>)
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	4413      	add	r3, r2
 8014746:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014748:	68fa      	ldr	r2, [r7, #12]
 801474a:	693b      	ldr	r3, [r7, #16]
 801474c:	1ad3      	subs	r3, r2, r3
 801474e:	0fdb      	lsrs	r3, r3, #31
 8014750:	f003 0301 	and.w	r3, r3, #1
 8014754:	b2db      	uxtb	r3, r3
 8014756:	2b00      	cmp	r3, #0
 8014758:	d009      	beq.n	801476e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801475a:	697b      	ldr	r3, [r7, #20]
 801475c:	681a      	ldr	r2, [r3, #0]
 801475e:	693b      	ldr	r3, [r7, #16]
 8014760:	4413      	add	r3, r2
 8014762:	687a      	ldr	r2, [r7, #4]
 8014764:	4907      	ldr	r1, [pc, #28]	; (8014784 <lwip_cyclic_timer+0x60>)
 8014766:	4618      	mov	r0, r3
 8014768:	f7ff ff6e 	bl	8014648 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801476c:	e004      	b.n	8014778 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801476e:	687a      	ldr	r2, [r7, #4]
 8014770:	4904      	ldr	r1, [pc, #16]	; (8014784 <lwip_cyclic_timer+0x60>)
 8014772:	68f8      	ldr	r0, [r7, #12]
 8014774:	f7ff ff68 	bl	8014648 <sys_timeout_abs>
}
 8014778:	bf00      	nop
 801477a:	3718      	adds	r7, #24
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}
 8014780:	200112f4 	.word	0x200112f4
 8014784:	08014725 	.word	0x08014725

08014788 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b082      	sub	sp, #8
 801478c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801478e:	2301      	movs	r3, #1
 8014790:	607b      	str	r3, [r7, #4]
 8014792:	e00e      	b.n	80147b2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014794:	4a0b      	ldr	r2, [pc, #44]	; (80147c4 <sys_timeouts_init+0x3c>)
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	00db      	lsls	r3, r3, #3
 80147a0:	4a08      	ldr	r2, [pc, #32]	; (80147c4 <sys_timeouts_init+0x3c>)
 80147a2:	4413      	add	r3, r2
 80147a4:	461a      	mov	r2, r3
 80147a6:	4908      	ldr	r1, [pc, #32]	; (80147c8 <sys_timeouts_init+0x40>)
 80147a8:	f000 f810 	bl	80147cc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	3301      	adds	r3, #1
 80147b0:	607b      	str	r3, [r7, #4]
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	2b02      	cmp	r3, #2
 80147b6:	d9ed      	bls.n	8014794 <sys_timeouts_init+0xc>
  }
}
 80147b8:	bf00      	nop
 80147ba:	bf00      	nop
 80147bc:	3708      	adds	r7, #8
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}
 80147c2:	bf00      	nop
 80147c4:	0801e31c 	.word	0x0801e31c
 80147c8:	08014725 	.word	0x08014725

080147cc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b086      	sub	sp, #24
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	60f8      	str	r0, [r7, #12]
 80147d4:	60b9      	str	r1, [r7, #8]
 80147d6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80147de:	d306      	bcc.n	80147ee <sys_timeout+0x22>
 80147e0:	4b0a      	ldr	r3, [pc, #40]	; (801480c <sys_timeout+0x40>)
 80147e2:	f240 1229 	movw	r2, #297	; 0x129
 80147e6:	490a      	ldr	r1, [pc, #40]	; (8014810 <sys_timeout+0x44>)
 80147e8:	480a      	ldr	r0, [pc, #40]	; (8014814 <sys_timeout+0x48>)
 80147ea:	f005 f8f9 	bl	80199e0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80147ee:	f7f2 fc41 	bl	8007074 <sys_now>
 80147f2:	4602      	mov	r2, r0
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	4413      	add	r3, r2
 80147f8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80147fa:	687a      	ldr	r2, [r7, #4]
 80147fc:	68b9      	ldr	r1, [r7, #8]
 80147fe:	6978      	ldr	r0, [r7, #20]
 8014800:	f7ff ff22 	bl	8014648 <sys_timeout_abs>
#endif
}
 8014804:	bf00      	nop
 8014806:	3718      	adds	r7, #24
 8014808:	46bd      	mov	sp, r7
 801480a:	bd80      	pop	{r7, pc}
 801480c:	0801d614 	.word	0x0801d614
 8014810:	0801d6b0 	.word	0x0801d6b0
 8014814:	0801d688 	.word	0x0801d688

08014818 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b084      	sub	sp, #16
 801481c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801481e:	f7f2 fc29 	bl	8007074 <sys_now>
 8014822:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014824:	4b17      	ldr	r3, [pc, #92]	; (8014884 <sys_check_timeouts+0x6c>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801482a:	68bb      	ldr	r3, [r7, #8]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d022      	beq.n	8014876 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014830:	68bb      	ldr	r3, [r7, #8]
 8014832:	685b      	ldr	r3, [r3, #4]
 8014834:	68fa      	ldr	r2, [r7, #12]
 8014836:	1ad3      	subs	r3, r2, r3
 8014838:	0fdb      	lsrs	r3, r3, #31
 801483a:	f003 0301 	and.w	r3, r3, #1
 801483e:	b2db      	uxtb	r3, r3
 8014840:	2b00      	cmp	r3, #0
 8014842:	d11a      	bne.n	801487a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014844:	68bb      	ldr	r3, [r7, #8]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	4a0e      	ldr	r2, [pc, #56]	; (8014884 <sys_check_timeouts+0x6c>)
 801484a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801484c:	68bb      	ldr	r3, [r7, #8]
 801484e:	689b      	ldr	r3, [r3, #8]
 8014850:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014852:	68bb      	ldr	r3, [r7, #8]
 8014854:	68db      	ldr	r3, [r3, #12]
 8014856:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014858:	68bb      	ldr	r3, [r7, #8]
 801485a:	685b      	ldr	r3, [r3, #4]
 801485c:	4a0a      	ldr	r2, [pc, #40]	; (8014888 <sys_check_timeouts+0x70>)
 801485e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014860:	68b9      	ldr	r1, [r7, #8]
 8014862:	200a      	movs	r0, #10
 8014864:	f7f8 fd56 	bl	800d314 <memp_free>
    if (handler != NULL) {
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d0da      	beq.n	8014824 <sys_check_timeouts+0xc>
      handler(arg);
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	6838      	ldr	r0, [r7, #0]
 8014872:	4798      	blx	r3
  do {
 8014874:	e7d6      	b.n	8014824 <sys_check_timeouts+0xc>
      return;
 8014876:	bf00      	nop
 8014878:	e000      	b.n	801487c <sys_check_timeouts+0x64>
      return;
 801487a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801487c:	3710      	adds	r7, #16
 801487e:	46bd      	mov	sp, r7
 8014880:	bd80      	pop	{r7, pc}
 8014882:	bf00      	nop
 8014884:	200112f0 	.word	0x200112f0
 8014888:	200112f4 	.word	0x200112f4

0801488c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b082      	sub	sp, #8
 8014890:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014892:	4b16      	ldr	r3, [pc, #88]	; (80148ec <sys_timeouts_sleeptime+0x60>)
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d102      	bne.n	80148a0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801489a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801489e:	e020      	b.n	80148e2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80148a0:	f7f2 fbe8 	bl	8007074 <sys_now>
 80148a4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80148a6:	4b11      	ldr	r3, [pc, #68]	; (80148ec <sys_timeouts_sleeptime+0x60>)
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	685a      	ldr	r2, [r3, #4]
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	1ad3      	subs	r3, r2, r3
 80148b0:	0fdb      	lsrs	r3, r3, #31
 80148b2:	f003 0301 	and.w	r3, r3, #1
 80148b6:	b2db      	uxtb	r3, r3
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d001      	beq.n	80148c0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80148bc:	2300      	movs	r3, #0
 80148be:	e010      	b.n	80148e2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80148c0:	4b0a      	ldr	r3, [pc, #40]	; (80148ec <sys_timeouts_sleeptime+0x60>)
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	685a      	ldr	r2, [r3, #4]
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	1ad3      	subs	r3, r2, r3
 80148ca:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80148cc:	683b      	ldr	r3, [r7, #0]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	da06      	bge.n	80148e0 <sys_timeouts_sleeptime+0x54>
 80148d2:	4b07      	ldr	r3, [pc, #28]	; (80148f0 <sys_timeouts_sleeptime+0x64>)
 80148d4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80148d8:	4906      	ldr	r1, [pc, #24]	; (80148f4 <sys_timeouts_sleeptime+0x68>)
 80148da:	4807      	ldr	r0, [pc, #28]	; (80148f8 <sys_timeouts_sleeptime+0x6c>)
 80148dc:	f005 f880 	bl	80199e0 <iprintf>
    return ret;
 80148e0:	683b      	ldr	r3, [r7, #0]
  }
}
 80148e2:	4618      	mov	r0, r3
 80148e4:	3708      	adds	r7, #8
 80148e6:	46bd      	mov	sp, r7
 80148e8:	bd80      	pop	{r7, pc}
 80148ea:	bf00      	nop
 80148ec:	200112f0 	.word	0x200112f0
 80148f0:	0801d614 	.word	0x0801d614
 80148f4:	0801d6e8 	.word	0x0801d6e8
 80148f8:	0801d688 	.word	0x0801d688

080148fc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014900:	f005 f8fc 	bl	8019afc <rand>
 8014904:	4603      	mov	r3, r0
 8014906:	b29b      	uxth	r3, r3
 8014908:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801490c:	b29b      	uxth	r3, r3
 801490e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014912:	b29a      	uxth	r2, r3
 8014914:	4b01      	ldr	r3, [pc, #4]	; (801491c <udp_init+0x20>)
 8014916:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014918:	bf00      	nop
 801491a:	bd80      	pop	{r7, pc}
 801491c:	20000030 	.word	0x20000030

08014920 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014920:	b480      	push	{r7}
 8014922:	b083      	sub	sp, #12
 8014924:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014926:	2300      	movs	r3, #0
 8014928:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801492a:	4b17      	ldr	r3, [pc, #92]	; (8014988 <udp_new_port+0x68>)
 801492c:	881b      	ldrh	r3, [r3, #0]
 801492e:	1c5a      	adds	r2, r3, #1
 8014930:	b291      	uxth	r1, r2
 8014932:	4a15      	ldr	r2, [pc, #84]	; (8014988 <udp_new_port+0x68>)
 8014934:	8011      	strh	r1, [r2, #0]
 8014936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801493a:	4293      	cmp	r3, r2
 801493c:	d103      	bne.n	8014946 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801493e:	4b12      	ldr	r3, [pc, #72]	; (8014988 <udp_new_port+0x68>)
 8014940:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014944:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014946:	4b11      	ldr	r3, [pc, #68]	; (801498c <udp_new_port+0x6c>)
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	603b      	str	r3, [r7, #0]
 801494c:	e011      	b.n	8014972 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801494e:	683b      	ldr	r3, [r7, #0]
 8014950:	8a5a      	ldrh	r2, [r3, #18]
 8014952:	4b0d      	ldr	r3, [pc, #52]	; (8014988 <udp_new_port+0x68>)
 8014954:	881b      	ldrh	r3, [r3, #0]
 8014956:	429a      	cmp	r2, r3
 8014958:	d108      	bne.n	801496c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801495a:	88fb      	ldrh	r3, [r7, #6]
 801495c:	3301      	adds	r3, #1
 801495e:	80fb      	strh	r3, [r7, #6]
 8014960:	88fb      	ldrh	r3, [r7, #6]
 8014962:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014966:	d3e0      	bcc.n	801492a <udp_new_port+0xa>
        return 0;
 8014968:	2300      	movs	r3, #0
 801496a:	e007      	b.n	801497c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801496c:	683b      	ldr	r3, [r7, #0]
 801496e:	68db      	ldr	r3, [r3, #12]
 8014970:	603b      	str	r3, [r7, #0]
 8014972:	683b      	ldr	r3, [r7, #0]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d1ea      	bne.n	801494e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014978:	4b03      	ldr	r3, [pc, #12]	; (8014988 <udp_new_port+0x68>)
 801497a:	881b      	ldrh	r3, [r3, #0]
}
 801497c:	4618      	mov	r0, r3
 801497e:	370c      	adds	r7, #12
 8014980:	46bd      	mov	sp, r7
 8014982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014986:	4770      	bx	lr
 8014988:	20000030 	.word	0x20000030
 801498c:	200112fc 	.word	0x200112fc

08014990 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b084      	sub	sp, #16
 8014994:	af00      	add	r7, sp, #0
 8014996:	60f8      	str	r0, [r7, #12]
 8014998:	60b9      	str	r1, [r7, #8]
 801499a:	4613      	mov	r3, r2
 801499c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d105      	bne.n	80149b0 <udp_input_local_match+0x20>
 80149a4:	4b27      	ldr	r3, [pc, #156]	; (8014a44 <udp_input_local_match+0xb4>)
 80149a6:	2287      	movs	r2, #135	; 0x87
 80149a8:	4927      	ldr	r1, [pc, #156]	; (8014a48 <udp_input_local_match+0xb8>)
 80149aa:	4828      	ldr	r0, [pc, #160]	; (8014a4c <udp_input_local_match+0xbc>)
 80149ac:	f005 f818 	bl	80199e0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80149b0:	68bb      	ldr	r3, [r7, #8]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d105      	bne.n	80149c2 <udp_input_local_match+0x32>
 80149b6:	4b23      	ldr	r3, [pc, #140]	; (8014a44 <udp_input_local_match+0xb4>)
 80149b8:	2288      	movs	r2, #136	; 0x88
 80149ba:	4925      	ldr	r1, [pc, #148]	; (8014a50 <udp_input_local_match+0xc0>)
 80149bc:	4823      	ldr	r0, [pc, #140]	; (8014a4c <udp_input_local_match+0xbc>)
 80149be:	f005 f80f 	bl	80199e0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	7a1b      	ldrb	r3, [r3, #8]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d00b      	beq.n	80149e2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	7a1a      	ldrb	r2, [r3, #8]
 80149ce:	4b21      	ldr	r3, [pc, #132]	; (8014a54 <udp_input_local_match+0xc4>)
 80149d0:	685b      	ldr	r3, [r3, #4]
 80149d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80149d6:	3301      	adds	r3, #1
 80149d8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80149da:	429a      	cmp	r2, r3
 80149dc:	d001      	beq.n	80149e2 <udp_input_local_match+0x52>
    return 0;
 80149de:	2300      	movs	r3, #0
 80149e0:	e02b      	b.n	8014a3a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80149e2:	79fb      	ldrb	r3, [r7, #7]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d018      	beq.n	8014a1a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d013      	beq.n	8014a16 <udp_input_local_match+0x86>
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d00f      	beq.n	8014a16 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80149f6:	4b17      	ldr	r3, [pc, #92]	; (8014a54 <udp_input_local_match+0xc4>)
 80149f8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80149fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80149fe:	d00a      	beq.n	8014a16 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	681a      	ldr	r2, [r3, #0]
 8014a04:	4b13      	ldr	r3, [pc, #76]	; (8014a54 <udp_input_local_match+0xc4>)
 8014a06:	695b      	ldr	r3, [r3, #20]
 8014a08:	405a      	eors	r2, r3
 8014a0a:	68bb      	ldr	r3, [r7, #8]
 8014a0c:	3308      	adds	r3, #8
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d110      	bne.n	8014a38 <udp_input_local_match+0xa8>
          return 1;
 8014a16:	2301      	movs	r3, #1
 8014a18:	e00f      	b.n	8014a3a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d009      	beq.n	8014a34 <udp_input_local_match+0xa4>
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d005      	beq.n	8014a34 <udp_input_local_match+0xa4>
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	681a      	ldr	r2, [r3, #0]
 8014a2c:	4b09      	ldr	r3, [pc, #36]	; (8014a54 <udp_input_local_match+0xc4>)
 8014a2e:	695b      	ldr	r3, [r3, #20]
 8014a30:	429a      	cmp	r2, r3
 8014a32:	d101      	bne.n	8014a38 <udp_input_local_match+0xa8>
        return 1;
 8014a34:	2301      	movs	r3, #1
 8014a36:	e000      	b.n	8014a3a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014a38:	2300      	movs	r3, #0
}
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	3710      	adds	r7, #16
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}
 8014a42:	bf00      	nop
 8014a44:	0801d6fc 	.word	0x0801d6fc
 8014a48:	0801d72c 	.word	0x0801d72c
 8014a4c:	0801d750 	.word	0x0801d750
 8014a50:	0801d778 	.word	0x0801d778
 8014a54:	2000a1a4 	.word	0x2000a1a4

08014a58 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014a58:	b590      	push	{r4, r7, lr}
 8014a5a:	b08d      	sub	sp, #52	; 0x34
 8014a5c:	af02      	add	r7, sp, #8
 8014a5e:	6078      	str	r0, [r7, #4]
 8014a60:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014a62:	2300      	movs	r3, #0
 8014a64:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d105      	bne.n	8014a78 <udp_input+0x20>
 8014a6c:	4b7c      	ldr	r3, [pc, #496]	; (8014c60 <udp_input+0x208>)
 8014a6e:	22cf      	movs	r2, #207	; 0xcf
 8014a70:	497c      	ldr	r1, [pc, #496]	; (8014c64 <udp_input+0x20c>)
 8014a72:	487d      	ldr	r0, [pc, #500]	; (8014c68 <udp_input+0x210>)
 8014a74:	f004 ffb4 	bl	80199e0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d105      	bne.n	8014a8a <udp_input+0x32>
 8014a7e:	4b78      	ldr	r3, [pc, #480]	; (8014c60 <udp_input+0x208>)
 8014a80:	22d0      	movs	r2, #208	; 0xd0
 8014a82:	497a      	ldr	r1, [pc, #488]	; (8014c6c <udp_input+0x214>)
 8014a84:	4878      	ldr	r0, [pc, #480]	; (8014c68 <udp_input+0x210>)
 8014a86:	f004 ffab 	bl	80199e0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	895b      	ldrh	r3, [r3, #10]
 8014a8e:	2b07      	cmp	r3, #7
 8014a90:	d803      	bhi.n	8014a9a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f7f9 fae2 	bl	800e05c <pbuf_free>
    goto end;
 8014a98:	e0de      	b.n	8014c58 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	685b      	ldr	r3, [r3, #4]
 8014a9e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014aa0:	4b73      	ldr	r3, [pc, #460]	; (8014c70 <udp_input+0x218>)
 8014aa2:	695b      	ldr	r3, [r3, #20]
 8014aa4:	4a72      	ldr	r2, [pc, #456]	; (8014c70 <udp_input+0x218>)
 8014aa6:	6812      	ldr	r2, [r2, #0]
 8014aa8:	4611      	mov	r1, r2
 8014aaa:	4618      	mov	r0, r3
 8014aac:	f001 fe04 	bl	80166b8 <ip4_addr_isbroadcast_u32>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014ab4:	697b      	ldr	r3, [r7, #20]
 8014ab6:	881b      	ldrh	r3, [r3, #0]
 8014ab8:	b29b      	uxth	r3, r3
 8014aba:	4618      	mov	r0, r3
 8014abc:	f7f7 fecc 	bl	800c858 <lwip_htons>
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014ac4:	697b      	ldr	r3, [r7, #20]
 8014ac6:	885b      	ldrh	r3, [r3, #2]
 8014ac8:	b29b      	uxth	r3, r3
 8014aca:	4618      	mov	r0, r3
 8014acc:	f7f7 fec4 	bl	800c858 <lwip_htons>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014ad8:	2300      	movs	r3, #0
 8014ada:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014adc:	2300      	movs	r3, #0
 8014ade:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014ae0:	4b64      	ldr	r3, [pc, #400]	; (8014c74 <udp_input+0x21c>)
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8014ae6:	e054      	b.n	8014b92 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aea:	8a5b      	ldrh	r3, [r3, #18]
 8014aec:	89fa      	ldrh	r2, [r7, #14]
 8014aee:	429a      	cmp	r2, r3
 8014af0:	d14a      	bne.n	8014b88 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014af2:	7cfb      	ldrb	r3, [r7, #19]
 8014af4:	461a      	mov	r2, r3
 8014af6:	6839      	ldr	r1, [r7, #0]
 8014af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014afa:	f7ff ff49 	bl	8014990 <udp_input_local_match>
 8014afe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d041      	beq.n	8014b88 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b06:	7c1b      	ldrb	r3, [r3, #16]
 8014b08:	f003 0304 	and.w	r3, r3, #4
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d11d      	bne.n	8014b4c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014b10:	69fb      	ldr	r3, [r7, #28]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d102      	bne.n	8014b1c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b18:	61fb      	str	r3, [r7, #28]
 8014b1a:	e017      	b.n	8014b4c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014b1c:	7cfb      	ldrb	r3, [r7, #19]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d014      	beq.n	8014b4c <udp_input+0xf4>
 8014b22:	4b53      	ldr	r3, [pc, #332]	; (8014c70 <udp_input+0x218>)
 8014b24:	695b      	ldr	r3, [r3, #20]
 8014b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b2a:	d10f      	bne.n	8014b4c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014b2c:	69fb      	ldr	r3, [r7, #28]
 8014b2e:	681a      	ldr	r2, [r3, #0]
 8014b30:	683b      	ldr	r3, [r7, #0]
 8014b32:	3304      	adds	r3, #4
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	429a      	cmp	r2, r3
 8014b38:	d008      	beq.n	8014b4c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b3c:	681a      	ldr	r2, [r3, #0]
 8014b3e:	683b      	ldr	r3, [r7, #0]
 8014b40:	3304      	adds	r3, #4
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	429a      	cmp	r2, r3
 8014b46:	d101      	bne.n	8014b4c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b4a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b4e:	8a9b      	ldrh	r3, [r3, #20]
 8014b50:	8a3a      	ldrh	r2, [r7, #16]
 8014b52:	429a      	cmp	r2, r3
 8014b54:	d118      	bne.n	8014b88 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b58:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d005      	beq.n	8014b6a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b60:	685a      	ldr	r2, [r3, #4]
 8014b62:	4b43      	ldr	r3, [pc, #268]	; (8014c70 <udp_input+0x218>)
 8014b64:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014b66:	429a      	cmp	r2, r3
 8014b68:	d10e      	bne.n	8014b88 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014b6a:	6a3b      	ldr	r3, [r7, #32]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d014      	beq.n	8014b9a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b72:	68da      	ldr	r2, [r3, #12]
 8014b74:	6a3b      	ldr	r3, [r7, #32]
 8014b76:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014b78:	4b3e      	ldr	r3, [pc, #248]	; (8014c74 <udp_input+0x21c>)
 8014b7a:	681a      	ldr	r2, [r3, #0]
 8014b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b7e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014b80:	4a3c      	ldr	r2, [pc, #240]	; (8014c74 <udp_input+0x21c>)
 8014b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b84:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014b86:	e008      	b.n	8014b9a <udp_input+0x142>
      }
    }

    prev = pcb;
 8014b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b8a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b8e:	68db      	ldr	r3, [r3, #12]
 8014b90:	627b      	str	r3, [r7, #36]	; 0x24
 8014b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d1a7      	bne.n	8014ae8 <udp_input+0x90>
 8014b98:	e000      	b.n	8014b9c <udp_input+0x144>
        break;
 8014b9a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d101      	bne.n	8014ba6 <udp_input+0x14e>
    pcb = uncon_pcb;
 8014ba2:	69fb      	ldr	r3, [r7, #28]
 8014ba4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d002      	beq.n	8014bb2 <udp_input+0x15a>
    for_us = 1;
 8014bac:	2301      	movs	r3, #1
 8014bae:	76fb      	strb	r3, [r7, #27]
 8014bb0:	e00a      	b.n	8014bc8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	3304      	adds	r3, #4
 8014bb6:	681a      	ldr	r2, [r3, #0]
 8014bb8:	4b2d      	ldr	r3, [pc, #180]	; (8014c70 <udp_input+0x218>)
 8014bba:	695b      	ldr	r3, [r3, #20]
 8014bbc:	429a      	cmp	r2, r3
 8014bbe:	bf0c      	ite	eq
 8014bc0:	2301      	moveq	r3, #1
 8014bc2:	2300      	movne	r3, #0
 8014bc4:	b2db      	uxtb	r3, r3
 8014bc6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014bc8:	7efb      	ldrb	r3, [r7, #27]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d041      	beq.n	8014c52 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014bce:	2108      	movs	r1, #8
 8014bd0:	6878      	ldr	r0, [r7, #4]
 8014bd2:	f7f9 f9bd 	bl	800df50 <pbuf_remove_header>
 8014bd6:	4603      	mov	r3, r0
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d00a      	beq.n	8014bf2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014bdc:	4b20      	ldr	r3, [pc, #128]	; (8014c60 <udp_input+0x208>)
 8014bde:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014be2:	4925      	ldr	r1, [pc, #148]	; (8014c78 <udp_input+0x220>)
 8014be4:	4820      	ldr	r0, [pc, #128]	; (8014c68 <udp_input+0x210>)
 8014be6:	f004 fefb 	bl	80199e0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014bea:	6878      	ldr	r0, [r7, #4]
 8014bec:	f7f9 fa36 	bl	800e05c <pbuf_free>
      goto end;
 8014bf0:	e032      	b.n	8014c58 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d012      	beq.n	8014c1e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bfa:	699b      	ldr	r3, [r3, #24]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d00a      	beq.n	8014c16 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c02:	699c      	ldr	r4, [r3, #24]
 8014c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c06:	69d8      	ldr	r0, [r3, #28]
 8014c08:	8a3b      	ldrh	r3, [r7, #16]
 8014c0a:	9300      	str	r3, [sp, #0]
 8014c0c:	4b1b      	ldr	r3, [pc, #108]	; (8014c7c <udp_input+0x224>)
 8014c0e:	687a      	ldr	r2, [r7, #4]
 8014c10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014c12:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014c14:	e021      	b.n	8014c5a <udp_input+0x202>
        pbuf_free(p);
 8014c16:	6878      	ldr	r0, [r7, #4]
 8014c18:	f7f9 fa20 	bl	800e05c <pbuf_free>
        goto end;
 8014c1c:	e01c      	b.n	8014c58 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014c1e:	7cfb      	ldrb	r3, [r7, #19]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d112      	bne.n	8014c4a <udp_input+0x1f2>
 8014c24:	4b12      	ldr	r3, [pc, #72]	; (8014c70 <udp_input+0x218>)
 8014c26:	695b      	ldr	r3, [r3, #20]
 8014c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014c2c:	2be0      	cmp	r3, #224	; 0xe0
 8014c2e:	d00c      	beq.n	8014c4a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014c30:	4b0f      	ldr	r3, [pc, #60]	; (8014c70 <udp_input+0x218>)
 8014c32:	899b      	ldrh	r3, [r3, #12]
 8014c34:	3308      	adds	r3, #8
 8014c36:	b29b      	uxth	r3, r3
 8014c38:	b21b      	sxth	r3, r3
 8014c3a:	4619      	mov	r1, r3
 8014c3c:	6878      	ldr	r0, [r7, #4]
 8014c3e:	f7f9 f9fa 	bl	800e036 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014c42:	2103      	movs	r1, #3
 8014c44:	6878      	ldr	r0, [r7, #4]
 8014c46:	f001 fa17 	bl	8016078 <icmp_dest_unreach>
      pbuf_free(p);
 8014c4a:	6878      	ldr	r0, [r7, #4]
 8014c4c:	f7f9 fa06 	bl	800e05c <pbuf_free>
  return;
 8014c50:	e003      	b.n	8014c5a <udp_input+0x202>
    pbuf_free(p);
 8014c52:	6878      	ldr	r0, [r7, #4]
 8014c54:	f7f9 fa02 	bl	800e05c <pbuf_free>
  return;
 8014c58:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014c5a:	372c      	adds	r7, #44	; 0x2c
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	bd90      	pop	{r4, r7, pc}
 8014c60:	0801d6fc 	.word	0x0801d6fc
 8014c64:	0801d7a0 	.word	0x0801d7a0
 8014c68:	0801d750 	.word	0x0801d750
 8014c6c:	0801d7b8 	.word	0x0801d7b8
 8014c70:	2000a1a4 	.word	0x2000a1a4
 8014c74:	200112fc 	.word	0x200112fc
 8014c78:	0801d7d4 	.word	0x0801d7d4
 8014c7c:	2000a1b4 	.word	0x2000a1b4

08014c80 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b086      	sub	sp, #24
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	60f8      	str	r0, [r7, #12]
 8014c88:	60b9      	str	r1, [r7, #8]
 8014c8a:	4613      	mov	r3, r2
 8014c8c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014c8e:	68bb      	ldr	r3, [r7, #8]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d101      	bne.n	8014c98 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014c94:	4b39      	ldr	r3, [pc, #228]	; (8014d7c <udp_bind+0xfc>)
 8014c96:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d109      	bne.n	8014cb2 <udp_bind+0x32>
 8014c9e:	4b38      	ldr	r3, [pc, #224]	; (8014d80 <udp_bind+0x100>)
 8014ca0:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014ca4:	4937      	ldr	r1, [pc, #220]	; (8014d84 <udp_bind+0x104>)
 8014ca6:	4838      	ldr	r0, [pc, #224]	; (8014d88 <udp_bind+0x108>)
 8014ca8:	f004 fe9a 	bl	80199e0 <iprintf>
 8014cac:	f06f 030f 	mvn.w	r3, #15
 8014cb0:	e060      	b.n	8014d74 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014cb6:	4b35      	ldr	r3, [pc, #212]	; (8014d8c <udp_bind+0x10c>)
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	617b      	str	r3, [r7, #20]
 8014cbc:	e009      	b.n	8014cd2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014cbe:	68fa      	ldr	r2, [r7, #12]
 8014cc0:	697b      	ldr	r3, [r7, #20]
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	d102      	bne.n	8014ccc <udp_bind+0x4c>
      rebind = 1;
 8014cc6:	2301      	movs	r3, #1
 8014cc8:	74fb      	strb	r3, [r7, #19]
      break;
 8014cca:	e005      	b.n	8014cd8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014ccc:	697b      	ldr	r3, [r7, #20]
 8014cce:	68db      	ldr	r3, [r3, #12]
 8014cd0:	617b      	str	r3, [r7, #20]
 8014cd2:	697b      	ldr	r3, [r7, #20]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d1f2      	bne.n	8014cbe <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014cd8:	88fb      	ldrh	r3, [r7, #6]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d109      	bne.n	8014cf2 <udp_bind+0x72>
    port = udp_new_port();
 8014cde:	f7ff fe1f 	bl	8014920 <udp_new_port>
 8014ce2:	4603      	mov	r3, r0
 8014ce4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014ce6:	88fb      	ldrh	r3, [r7, #6]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d12c      	bne.n	8014d46 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014cec:	f06f 0307 	mvn.w	r3, #7
 8014cf0:	e040      	b.n	8014d74 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014cf2:	4b26      	ldr	r3, [pc, #152]	; (8014d8c <udp_bind+0x10c>)
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	617b      	str	r3, [r7, #20]
 8014cf8:	e022      	b.n	8014d40 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014cfa:	68fa      	ldr	r2, [r7, #12]
 8014cfc:	697b      	ldr	r3, [r7, #20]
 8014cfe:	429a      	cmp	r2, r3
 8014d00:	d01b      	beq.n	8014d3a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014d02:	697b      	ldr	r3, [r7, #20]
 8014d04:	8a5b      	ldrh	r3, [r3, #18]
 8014d06:	88fa      	ldrh	r2, [r7, #6]
 8014d08:	429a      	cmp	r2, r3
 8014d0a:	d116      	bne.n	8014d3a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014d0c:	697b      	ldr	r3, [r7, #20]
 8014d0e:	681a      	ldr	r2, [r3, #0]
 8014d10:	68bb      	ldr	r3, [r7, #8]
 8014d12:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014d14:	429a      	cmp	r2, r3
 8014d16:	d00d      	beq.n	8014d34 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d00a      	beq.n	8014d34 <udp_bind+0xb4>
 8014d1e:	68bb      	ldr	r3, [r7, #8]
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d006      	beq.n	8014d34 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014d26:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d003      	beq.n	8014d34 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014d2c:	697b      	ldr	r3, [r7, #20]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d102      	bne.n	8014d3a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014d34:	f06f 0307 	mvn.w	r3, #7
 8014d38:	e01c      	b.n	8014d74 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014d3a:	697b      	ldr	r3, [r7, #20]
 8014d3c:	68db      	ldr	r3, [r3, #12]
 8014d3e:	617b      	str	r3, [r7, #20]
 8014d40:	697b      	ldr	r3, [r7, #20]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d1d9      	bne.n	8014cfa <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014d46:	68bb      	ldr	r3, [r7, #8]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d002      	beq.n	8014d52 <udp_bind+0xd2>
 8014d4c:	68bb      	ldr	r3, [r7, #8]
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	e000      	b.n	8014d54 <udp_bind+0xd4>
 8014d52:	2300      	movs	r3, #0
 8014d54:	68fa      	ldr	r2, [r7, #12]
 8014d56:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	88fa      	ldrh	r2, [r7, #6]
 8014d5c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014d5e:	7cfb      	ldrb	r3, [r7, #19]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d106      	bne.n	8014d72 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014d64:	4b09      	ldr	r3, [pc, #36]	; (8014d8c <udp_bind+0x10c>)
 8014d66:	681a      	ldr	r2, [r3, #0]
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014d6c:	4a07      	ldr	r2, [pc, #28]	; (8014d8c <udp_bind+0x10c>)
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014d72:	2300      	movs	r3, #0
}
 8014d74:	4618      	mov	r0, r3
 8014d76:	3718      	adds	r7, #24
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	bd80      	pop	{r7, pc}
 8014d7c:	0801e334 	.word	0x0801e334
 8014d80:	0801d6fc 	.word	0x0801d6fc
 8014d84:	0801d9c4 	.word	0x0801d9c4
 8014d88:	0801d750 	.word	0x0801d750
 8014d8c:	200112fc 	.word	0x200112fc

08014d90 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b086      	sub	sp, #24
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	60f8      	str	r0, [r7, #12]
 8014d98:	60b9      	str	r1, [r7, #8]
 8014d9a:	4613      	mov	r3, r2
 8014d9c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d109      	bne.n	8014db8 <udp_connect+0x28>
 8014da4:	4b2c      	ldr	r3, [pc, #176]	; (8014e58 <udp_connect+0xc8>)
 8014da6:	f240 4235 	movw	r2, #1077	; 0x435
 8014daa:	492c      	ldr	r1, [pc, #176]	; (8014e5c <udp_connect+0xcc>)
 8014dac:	482c      	ldr	r0, [pc, #176]	; (8014e60 <udp_connect+0xd0>)
 8014dae:	f004 fe17 	bl	80199e0 <iprintf>
 8014db2:	f06f 030f 	mvn.w	r3, #15
 8014db6:	e04b      	b.n	8014e50 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014db8:	68bb      	ldr	r3, [r7, #8]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d109      	bne.n	8014dd2 <udp_connect+0x42>
 8014dbe:	4b26      	ldr	r3, [pc, #152]	; (8014e58 <udp_connect+0xc8>)
 8014dc0:	f240 4236 	movw	r2, #1078	; 0x436
 8014dc4:	4927      	ldr	r1, [pc, #156]	; (8014e64 <udp_connect+0xd4>)
 8014dc6:	4826      	ldr	r0, [pc, #152]	; (8014e60 <udp_connect+0xd0>)
 8014dc8:	f004 fe0a 	bl	80199e0 <iprintf>
 8014dcc:	f06f 030f 	mvn.w	r3, #15
 8014dd0:	e03e      	b.n	8014e50 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	8a5b      	ldrh	r3, [r3, #18]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d10f      	bne.n	8014dfa <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014dda:	68f9      	ldr	r1, [r7, #12]
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	8a5b      	ldrh	r3, [r3, #18]
 8014de0:	461a      	mov	r2, r3
 8014de2:	68f8      	ldr	r0, [r7, #12]
 8014de4:	f7ff ff4c 	bl	8014c80 <udp_bind>
 8014de8:	4603      	mov	r3, r0
 8014dea:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014dec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d002      	beq.n	8014dfa <udp_connect+0x6a>
      return err;
 8014df4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014df8:	e02a      	b.n	8014e50 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8014dfa:	68bb      	ldr	r3, [r7, #8]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d002      	beq.n	8014e06 <udp_connect+0x76>
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	e000      	b.n	8014e08 <udp_connect+0x78>
 8014e06:	2300      	movs	r3, #0
 8014e08:	68fa      	ldr	r2, [r7, #12]
 8014e0a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	88fa      	ldrh	r2, [r7, #6]
 8014e10:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	7c1b      	ldrb	r3, [r3, #16]
 8014e16:	f043 0304 	orr.w	r3, r3, #4
 8014e1a:	b2da      	uxtb	r2, r3
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014e20:	4b11      	ldr	r3, [pc, #68]	; (8014e68 <udp_connect+0xd8>)
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	617b      	str	r3, [r7, #20]
 8014e26:	e008      	b.n	8014e3a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014e28:	68fa      	ldr	r2, [r7, #12]
 8014e2a:	697b      	ldr	r3, [r7, #20]
 8014e2c:	429a      	cmp	r2, r3
 8014e2e:	d101      	bne.n	8014e34 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014e30:	2300      	movs	r3, #0
 8014e32:	e00d      	b.n	8014e50 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014e34:	697b      	ldr	r3, [r7, #20]
 8014e36:	68db      	ldr	r3, [r3, #12]
 8014e38:	617b      	str	r3, [r7, #20]
 8014e3a:	697b      	ldr	r3, [r7, #20]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d1f3      	bne.n	8014e28 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014e40:	4b09      	ldr	r3, [pc, #36]	; (8014e68 <udp_connect+0xd8>)
 8014e42:	681a      	ldr	r2, [r3, #0]
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014e48:	4a07      	ldr	r2, [pc, #28]	; (8014e68 <udp_connect+0xd8>)
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014e4e:	2300      	movs	r3, #0
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	3718      	adds	r7, #24
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}
 8014e58:	0801d6fc 	.word	0x0801d6fc
 8014e5c:	0801d9dc 	.word	0x0801d9dc
 8014e60:	0801d750 	.word	0x0801d750
 8014e64:	0801d9f8 	.word	0x0801d9f8
 8014e68:	200112fc 	.word	0x200112fc

08014e6c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b084      	sub	sp, #16
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	60f8      	str	r0, [r7, #12]
 8014e74:	60b9      	str	r1, [r7, #8]
 8014e76:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d107      	bne.n	8014e8e <udp_recv+0x22>
 8014e7e:	4b08      	ldr	r3, [pc, #32]	; (8014ea0 <udp_recv+0x34>)
 8014e80:	f240 428a 	movw	r2, #1162	; 0x48a
 8014e84:	4907      	ldr	r1, [pc, #28]	; (8014ea4 <udp_recv+0x38>)
 8014e86:	4808      	ldr	r0, [pc, #32]	; (8014ea8 <udp_recv+0x3c>)
 8014e88:	f004 fdaa 	bl	80199e0 <iprintf>
 8014e8c:	e005      	b.n	8014e9a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	68ba      	ldr	r2, [r7, #8]
 8014e92:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	687a      	ldr	r2, [r7, #4]
 8014e98:	61da      	str	r2, [r3, #28]
}
 8014e9a:	3710      	adds	r7, #16
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	bd80      	pop	{r7, pc}
 8014ea0:	0801d6fc 	.word	0x0801d6fc
 8014ea4:	0801da30 	.word	0x0801da30
 8014ea8:	0801d750 	.word	0x0801d750

08014eac <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b084      	sub	sp, #16
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d107      	bne.n	8014eca <udp_remove+0x1e>
 8014eba:	4b19      	ldr	r3, [pc, #100]	; (8014f20 <udp_remove+0x74>)
 8014ebc:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014ec0:	4918      	ldr	r1, [pc, #96]	; (8014f24 <udp_remove+0x78>)
 8014ec2:	4819      	ldr	r0, [pc, #100]	; (8014f28 <udp_remove+0x7c>)
 8014ec4:	f004 fd8c 	bl	80199e0 <iprintf>
 8014ec8:	e026      	b.n	8014f18 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014eca:	4b18      	ldr	r3, [pc, #96]	; (8014f2c <udp_remove+0x80>)
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	687a      	ldr	r2, [r7, #4]
 8014ed0:	429a      	cmp	r2, r3
 8014ed2:	d105      	bne.n	8014ee0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014ed4:	4b15      	ldr	r3, [pc, #84]	; (8014f2c <udp_remove+0x80>)
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	68db      	ldr	r3, [r3, #12]
 8014eda:	4a14      	ldr	r2, [pc, #80]	; (8014f2c <udp_remove+0x80>)
 8014edc:	6013      	str	r3, [r2, #0]
 8014ede:	e017      	b.n	8014f10 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014ee0:	4b12      	ldr	r3, [pc, #72]	; (8014f2c <udp_remove+0x80>)
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	60fb      	str	r3, [r7, #12]
 8014ee6:	e010      	b.n	8014f0a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	68db      	ldr	r3, [r3, #12]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d009      	beq.n	8014f04 <udp_remove+0x58>
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	68db      	ldr	r3, [r3, #12]
 8014ef4:	687a      	ldr	r2, [r7, #4]
 8014ef6:	429a      	cmp	r2, r3
 8014ef8:	d104      	bne.n	8014f04 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	68da      	ldr	r2, [r3, #12]
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	60da      	str	r2, [r3, #12]
        break;
 8014f02:	e005      	b.n	8014f10 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	68db      	ldr	r3, [r3, #12]
 8014f08:	60fb      	str	r3, [r7, #12]
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d1eb      	bne.n	8014ee8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014f10:	6879      	ldr	r1, [r7, #4]
 8014f12:	2000      	movs	r0, #0
 8014f14:	f7f8 f9fe 	bl	800d314 <memp_free>
}
 8014f18:	3710      	adds	r7, #16
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	bd80      	pop	{r7, pc}
 8014f1e:	bf00      	nop
 8014f20:	0801d6fc 	.word	0x0801d6fc
 8014f24:	0801da48 	.word	0x0801da48
 8014f28:	0801d750 	.word	0x0801d750
 8014f2c:	200112fc 	.word	0x200112fc

08014f30 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b082      	sub	sp, #8
 8014f34:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014f36:	2000      	movs	r0, #0
 8014f38:	f7f8 f976 	bl	800d228 <memp_malloc>
 8014f3c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d007      	beq.n	8014f54 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014f44:	2220      	movs	r2, #32
 8014f46:	2100      	movs	r1, #0
 8014f48:	6878      	ldr	r0, [r7, #4]
 8014f4a:	f004 fd41 	bl	80199d0 <memset>
    pcb->ttl = UDP_TTL;
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	22ff      	movs	r2, #255	; 0xff
 8014f52:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014f54:	687b      	ldr	r3, [r7, #4]
}
 8014f56:	4618      	mov	r0, r3
 8014f58:	3708      	adds	r7, #8
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	bd80      	pop	{r7, pc}

08014f5e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014f5e:	b580      	push	{r7, lr}
 8014f60:	b084      	sub	sp, #16
 8014f62:	af00      	add	r7, sp, #0
 8014f64:	4603      	mov	r3, r0
 8014f66:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014f68:	f7ff ffe2 	bl	8014f30 <udp_new>
 8014f6c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014f6e:	68fb      	ldr	r3, [r7, #12]
}
 8014f70:	4618      	mov	r0, r3
 8014f72:	3710      	adds	r7, #16
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}

08014f78 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014f78:	b480      	push	{r7}
 8014f7a:	b085      	sub	sp, #20
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]
 8014f80:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d01e      	beq.n	8014fc6 <udp_netif_ip_addr_changed+0x4e>
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d01a      	beq.n	8014fc6 <udp_netif_ip_addr_changed+0x4e>
 8014f90:	683b      	ldr	r3, [r7, #0]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d017      	beq.n	8014fc6 <udp_netif_ip_addr_changed+0x4e>
 8014f96:	683b      	ldr	r3, [r7, #0]
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d013      	beq.n	8014fc6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014f9e:	4b0d      	ldr	r3, [pc, #52]	; (8014fd4 <udp_netif_ip_addr_changed+0x5c>)
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	60fb      	str	r3, [r7, #12]
 8014fa4:	e00c      	b.n	8014fc0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	681a      	ldr	r2, [r3, #0]
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	429a      	cmp	r2, r3
 8014fb0:	d103      	bne.n	8014fba <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014fb2:	683b      	ldr	r3, [r7, #0]
 8014fb4:	681a      	ldr	r2, [r3, #0]
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	68db      	ldr	r3, [r3, #12]
 8014fbe:	60fb      	str	r3, [r7, #12]
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d1ef      	bne.n	8014fa6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014fc6:	bf00      	nop
 8014fc8:	3714      	adds	r7, #20
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd0:	4770      	bx	lr
 8014fd2:	bf00      	nop
 8014fd4:	200112fc 	.word	0x200112fc

08014fd8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b082      	sub	sp, #8
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014fe0:	4915      	ldr	r1, [pc, #84]	; (8015038 <etharp_free_entry+0x60>)
 8014fe2:	687a      	ldr	r2, [r7, #4]
 8014fe4:	4613      	mov	r3, r2
 8014fe6:	005b      	lsls	r3, r3, #1
 8014fe8:	4413      	add	r3, r2
 8014fea:	00db      	lsls	r3, r3, #3
 8014fec:	440b      	add	r3, r1
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d013      	beq.n	801501c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014ff4:	4910      	ldr	r1, [pc, #64]	; (8015038 <etharp_free_entry+0x60>)
 8014ff6:	687a      	ldr	r2, [r7, #4]
 8014ff8:	4613      	mov	r3, r2
 8014ffa:	005b      	lsls	r3, r3, #1
 8014ffc:	4413      	add	r3, r2
 8014ffe:	00db      	lsls	r3, r3, #3
 8015000:	440b      	add	r3, r1
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	4618      	mov	r0, r3
 8015006:	f7f9 f829 	bl	800e05c <pbuf_free>
    arp_table[i].q = NULL;
 801500a:	490b      	ldr	r1, [pc, #44]	; (8015038 <etharp_free_entry+0x60>)
 801500c:	687a      	ldr	r2, [r7, #4]
 801500e:	4613      	mov	r3, r2
 8015010:	005b      	lsls	r3, r3, #1
 8015012:	4413      	add	r3, r2
 8015014:	00db      	lsls	r3, r3, #3
 8015016:	440b      	add	r3, r1
 8015018:	2200      	movs	r2, #0
 801501a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801501c:	4906      	ldr	r1, [pc, #24]	; (8015038 <etharp_free_entry+0x60>)
 801501e:	687a      	ldr	r2, [r7, #4]
 8015020:	4613      	mov	r3, r2
 8015022:	005b      	lsls	r3, r3, #1
 8015024:	4413      	add	r3, r2
 8015026:	00db      	lsls	r3, r3, #3
 8015028:	440b      	add	r3, r1
 801502a:	3314      	adds	r3, #20
 801502c:	2200      	movs	r2, #0
 801502e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015030:	bf00      	nop
 8015032:	3708      	adds	r7, #8
 8015034:	46bd      	mov	sp, r7
 8015036:	bd80      	pop	{r7, pc}
 8015038:	20011300 	.word	0x20011300

0801503c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b082      	sub	sp, #8
 8015040:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015042:	2300      	movs	r3, #0
 8015044:	607b      	str	r3, [r7, #4]
 8015046:	e096      	b.n	8015176 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015048:	494f      	ldr	r1, [pc, #316]	; (8015188 <etharp_tmr+0x14c>)
 801504a:	687a      	ldr	r2, [r7, #4]
 801504c:	4613      	mov	r3, r2
 801504e:	005b      	lsls	r3, r3, #1
 8015050:	4413      	add	r3, r2
 8015052:	00db      	lsls	r3, r3, #3
 8015054:	440b      	add	r3, r1
 8015056:	3314      	adds	r3, #20
 8015058:	781b      	ldrb	r3, [r3, #0]
 801505a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801505c:	78fb      	ldrb	r3, [r7, #3]
 801505e:	2b00      	cmp	r3, #0
 8015060:	f000 8086 	beq.w	8015170 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015064:	4948      	ldr	r1, [pc, #288]	; (8015188 <etharp_tmr+0x14c>)
 8015066:	687a      	ldr	r2, [r7, #4]
 8015068:	4613      	mov	r3, r2
 801506a:	005b      	lsls	r3, r3, #1
 801506c:	4413      	add	r3, r2
 801506e:	00db      	lsls	r3, r3, #3
 8015070:	440b      	add	r3, r1
 8015072:	3312      	adds	r3, #18
 8015074:	881b      	ldrh	r3, [r3, #0]
 8015076:	3301      	adds	r3, #1
 8015078:	b298      	uxth	r0, r3
 801507a:	4943      	ldr	r1, [pc, #268]	; (8015188 <etharp_tmr+0x14c>)
 801507c:	687a      	ldr	r2, [r7, #4]
 801507e:	4613      	mov	r3, r2
 8015080:	005b      	lsls	r3, r3, #1
 8015082:	4413      	add	r3, r2
 8015084:	00db      	lsls	r3, r3, #3
 8015086:	440b      	add	r3, r1
 8015088:	3312      	adds	r3, #18
 801508a:	4602      	mov	r2, r0
 801508c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801508e:	493e      	ldr	r1, [pc, #248]	; (8015188 <etharp_tmr+0x14c>)
 8015090:	687a      	ldr	r2, [r7, #4]
 8015092:	4613      	mov	r3, r2
 8015094:	005b      	lsls	r3, r3, #1
 8015096:	4413      	add	r3, r2
 8015098:	00db      	lsls	r3, r3, #3
 801509a:	440b      	add	r3, r1
 801509c:	3312      	adds	r3, #18
 801509e:	881b      	ldrh	r3, [r3, #0]
 80150a0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80150a4:	d215      	bcs.n	80150d2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80150a6:	4938      	ldr	r1, [pc, #224]	; (8015188 <etharp_tmr+0x14c>)
 80150a8:	687a      	ldr	r2, [r7, #4]
 80150aa:	4613      	mov	r3, r2
 80150ac:	005b      	lsls	r3, r3, #1
 80150ae:	4413      	add	r3, r2
 80150b0:	00db      	lsls	r3, r3, #3
 80150b2:	440b      	add	r3, r1
 80150b4:	3314      	adds	r3, #20
 80150b6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80150b8:	2b01      	cmp	r3, #1
 80150ba:	d10e      	bne.n	80150da <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80150bc:	4932      	ldr	r1, [pc, #200]	; (8015188 <etharp_tmr+0x14c>)
 80150be:	687a      	ldr	r2, [r7, #4]
 80150c0:	4613      	mov	r3, r2
 80150c2:	005b      	lsls	r3, r3, #1
 80150c4:	4413      	add	r3, r2
 80150c6:	00db      	lsls	r3, r3, #3
 80150c8:	440b      	add	r3, r1
 80150ca:	3312      	adds	r3, #18
 80150cc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80150ce:	2b04      	cmp	r3, #4
 80150d0:	d903      	bls.n	80150da <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80150d2:	6878      	ldr	r0, [r7, #4]
 80150d4:	f7ff ff80 	bl	8014fd8 <etharp_free_entry>
 80150d8:	e04a      	b.n	8015170 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80150da:	492b      	ldr	r1, [pc, #172]	; (8015188 <etharp_tmr+0x14c>)
 80150dc:	687a      	ldr	r2, [r7, #4]
 80150de:	4613      	mov	r3, r2
 80150e0:	005b      	lsls	r3, r3, #1
 80150e2:	4413      	add	r3, r2
 80150e4:	00db      	lsls	r3, r3, #3
 80150e6:	440b      	add	r3, r1
 80150e8:	3314      	adds	r3, #20
 80150ea:	781b      	ldrb	r3, [r3, #0]
 80150ec:	2b03      	cmp	r3, #3
 80150ee:	d10a      	bne.n	8015106 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80150f0:	4925      	ldr	r1, [pc, #148]	; (8015188 <etharp_tmr+0x14c>)
 80150f2:	687a      	ldr	r2, [r7, #4]
 80150f4:	4613      	mov	r3, r2
 80150f6:	005b      	lsls	r3, r3, #1
 80150f8:	4413      	add	r3, r2
 80150fa:	00db      	lsls	r3, r3, #3
 80150fc:	440b      	add	r3, r1
 80150fe:	3314      	adds	r3, #20
 8015100:	2204      	movs	r2, #4
 8015102:	701a      	strb	r2, [r3, #0]
 8015104:	e034      	b.n	8015170 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015106:	4920      	ldr	r1, [pc, #128]	; (8015188 <etharp_tmr+0x14c>)
 8015108:	687a      	ldr	r2, [r7, #4]
 801510a:	4613      	mov	r3, r2
 801510c:	005b      	lsls	r3, r3, #1
 801510e:	4413      	add	r3, r2
 8015110:	00db      	lsls	r3, r3, #3
 8015112:	440b      	add	r3, r1
 8015114:	3314      	adds	r3, #20
 8015116:	781b      	ldrb	r3, [r3, #0]
 8015118:	2b04      	cmp	r3, #4
 801511a:	d10a      	bne.n	8015132 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801511c:	491a      	ldr	r1, [pc, #104]	; (8015188 <etharp_tmr+0x14c>)
 801511e:	687a      	ldr	r2, [r7, #4]
 8015120:	4613      	mov	r3, r2
 8015122:	005b      	lsls	r3, r3, #1
 8015124:	4413      	add	r3, r2
 8015126:	00db      	lsls	r3, r3, #3
 8015128:	440b      	add	r3, r1
 801512a:	3314      	adds	r3, #20
 801512c:	2202      	movs	r2, #2
 801512e:	701a      	strb	r2, [r3, #0]
 8015130:	e01e      	b.n	8015170 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015132:	4915      	ldr	r1, [pc, #84]	; (8015188 <etharp_tmr+0x14c>)
 8015134:	687a      	ldr	r2, [r7, #4]
 8015136:	4613      	mov	r3, r2
 8015138:	005b      	lsls	r3, r3, #1
 801513a:	4413      	add	r3, r2
 801513c:	00db      	lsls	r3, r3, #3
 801513e:	440b      	add	r3, r1
 8015140:	3314      	adds	r3, #20
 8015142:	781b      	ldrb	r3, [r3, #0]
 8015144:	2b01      	cmp	r3, #1
 8015146:	d113      	bne.n	8015170 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015148:	490f      	ldr	r1, [pc, #60]	; (8015188 <etharp_tmr+0x14c>)
 801514a:	687a      	ldr	r2, [r7, #4]
 801514c:	4613      	mov	r3, r2
 801514e:	005b      	lsls	r3, r3, #1
 8015150:	4413      	add	r3, r2
 8015152:	00db      	lsls	r3, r3, #3
 8015154:	440b      	add	r3, r1
 8015156:	3308      	adds	r3, #8
 8015158:	6818      	ldr	r0, [r3, #0]
 801515a:	687a      	ldr	r2, [r7, #4]
 801515c:	4613      	mov	r3, r2
 801515e:	005b      	lsls	r3, r3, #1
 8015160:	4413      	add	r3, r2
 8015162:	00db      	lsls	r3, r3, #3
 8015164:	4a08      	ldr	r2, [pc, #32]	; (8015188 <etharp_tmr+0x14c>)
 8015166:	4413      	add	r3, r2
 8015168:	3304      	adds	r3, #4
 801516a:	4619      	mov	r1, r3
 801516c:	f000 fe6e 	bl	8015e4c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	3301      	adds	r3, #1
 8015174:	607b      	str	r3, [r7, #4]
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	2b09      	cmp	r3, #9
 801517a:	f77f af65 	ble.w	8015048 <etharp_tmr+0xc>
      }
    }
  }
}
 801517e:	bf00      	nop
 8015180:	bf00      	nop
 8015182:	3708      	adds	r7, #8
 8015184:	46bd      	mov	sp, r7
 8015186:	bd80      	pop	{r7, pc}
 8015188:	20011300 	.word	0x20011300

0801518c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801518c:	b580      	push	{r7, lr}
 801518e:	b08a      	sub	sp, #40	; 0x28
 8015190:	af00      	add	r7, sp, #0
 8015192:	60f8      	str	r0, [r7, #12]
 8015194:	460b      	mov	r3, r1
 8015196:	607a      	str	r2, [r7, #4]
 8015198:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801519a:	230a      	movs	r3, #10
 801519c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801519e:	230a      	movs	r3, #10
 80151a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80151a2:	230a      	movs	r3, #10
 80151a4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80151a6:	2300      	movs	r3, #0
 80151a8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80151aa:	230a      	movs	r3, #10
 80151ac:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80151ae:	2300      	movs	r3, #0
 80151b0:	83bb      	strh	r3, [r7, #28]
 80151b2:	2300      	movs	r3, #0
 80151b4:	837b      	strh	r3, [r7, #26]
 80151b6:	2300      	movs	r3, #0
 80151b8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80151ba:	2300      	movs	r3, #0
 80151bc:	843b      	strh	r3, [r7, #32]
 80151be:	e0ae      	b.n	801531e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80151c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151c4:	49a6      	ldr	r1, [pc, #664]	; (8015460 <etharp_find_entry+0x2d4>)
 80151c6:	4613      	mov	r3, r2
 80151c8:	005b      	lsls	r3, r3, #1
 80151ca:	4413      	add	r3, r2
 80151cc:	00db      	lsls	r3, r3, #3
 80151ce:	440b      	add	r3, r1
 80151d0:	3314      	adds	r3, #20
 80151d2:	781b      	ldrb	r3, [r3, #0]
 80151d4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80151d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80151da:	2b0a      	cmp	r3, #10
 80151dc:	d105      	bne.n	80151ea <etharp_find_entry+0x5e>
 80151de:	7dfb      	ldrb	r3, [r7, #23]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d102      	bne.n	80151ea <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80151e4:	8c3b      	ldrh	r3, [r7, #32]
 80151e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80151e8:	e095      	b.n	8015316 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80151ea:	7dfb      	ldrb	r3, [r7, #23]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	f000 8092 	beq.w	8015316 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80151f2:	7dfb      	ldrb	r3, [r7, #23]
 80151f4:	2b01      	cmp	r3, #1
 80151f6:	d009      	beq.n	801520c <etharp_find_entry+0x80>
 80151f8:	7dfb      	ldrb	r3, [r7, #23]
 80151fa:	2b01      	cmp	r3, #1
 80151fc:	d806      	bhi.n	801520c <etharp_find_entry+0x80>
 80151fe:	4b99      	ldr	r3, [pc, #612]	; (8015464 <etharp_find_entry+0x2d8>)
 8015200:	f240 1223 	movw	r2, #291	; 0x123
 8015204:	4998      	ldr	r1, [pc, #608]	; (8015468 <etharp_find_entry+0x2dc>)
 8015206:	4899      	ldr	r0, [pc, #612]	; (801546c <etharp_find_entry+0x2e0>)
 8015208:	f004 fbea 	bl	80199e0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d020      	beq.n	8015254 <etharp_find_entry+0xc8>
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	6819      	ldr	r1, [r3, #0]
 8015216:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801521a:	4891      	ldr	r0, [pc, #580]	; (8015460 <etharp_find_entry+0x2d4>)
 801521c:	4613      	mov	r3, r2
 801521e:	005b      	lsls	r3, r3, #1
 8015220:	4413      	add	r3, r2
 8015222:	00db      	lsls	r3, r3, #3
 8015224:	4403      	add	r3, r0
 8015226:	3304      	adds	r3, #4
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	4299      	cmp	r1, r3
 801522c:	d112      	bne.n	8015254 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d00c      	beq.n	801524e <etharp_find_entry+0xc2>
 8015234:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015238:	4989      	ldr	r1, [pc, #548]	; (8015460 <etharp_find_entry+0x2d4>)
 801523a:	4613      	mov	r3, r2
 801523c:	005b      	lsls	r3, r3, #1
 801523e:	4413      	add	r3, r2
 8015240:	00db      	lsls	r3, r3, #3
 8015242:	440b      	add	r3, r1
 8015244:	3308      	adds	r3, #8
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	687a      	ldr	r2, [r7, #4]
 801524a:	429a      	cmp	r2, r3
 801524c:	d102      	bne.n	8015254 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801524e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015252:	e100      	b.n	8015456 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015254:	7dfb      	ldrb	r3, [r7, #23]
 8015256:	2b01      	cmp	r3, #1
 8015258:	d140      	bne.n	80152dc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801525a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801525e:	4980      	ldr	r1, [pc, #512]	; (8015460 <etharp_find_entry+0x2d4>)
 8015260:	4613      	mov	r3, r2
 8015262:	005b      	lsls	r3, r3, #1
 8015264:	4413      	add	r3, r2
 8015266:	00db      	lsls	r3, r3, #3
 8015268:	440b      	add	r3, r1
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d01a      	beq.n	80152a6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015270:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015274:	497a      	ldr	r1, [pc, #488]	; (8015460 <etharp_find_entry+0x2d4>)
 8015276:	4613      	mov	r3, r2
 8015278:	005b      	lsls	r3, r3, #1
 801527a:	4413      	add	r3, r2
 801527c:	00db      	lsls	r3, r3, #3
 801527e:	440b      	add	r3, r1
 8015280:	3312      	adds	r3, #18
 8015282:	881b      	ldrh	r3, [r3, #0]
 8015284:	8bba      	ldrh	r2, [r7, #28]
 8015286:	429a      	cmp	r2, r3
 8015288:	d845      	bhi.n	8015316 <etharp_find_entry+0x18a>
            old_queue = i;
 801528a:	8c3b      	ldrh	r3, [r7, #32]
 801528c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801528e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015292:	4973      	ldr	r1, [pc, #460]	; (8015460 <etharp_find_entry+0x2d4>)
 8015294:	4613      	mov	r3, r2
 8015296:	005b      	lsls	r3, r3, #1
 8015298:	4413      	add	r3, r2
 801529a:	00db      	lsls	r3, r3, #3
 801529c:	440b      	add	r3, r1
 801529e:	3312      	adds	r3, #18
 80152a0:	881b      	ldrh	r3, [r3, #0]
 80152a2:	83bb      	strh	r3, [r7, #28]
 80152a4:	e037      	b.n	8015316 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80152a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152aa:	496d      	ldr	r1, [pc, #436]	; (8015460 <etharp_find_entry+0x2d4>)
 80152ac:	4613      	mov	r3, r2
 80152ae:	005b      	lsls	r3, r3, #1
 80152b0:	4413      	add	r3, r2
 80152b2:	00db      	lsls	r3, r3, #3
 80152b4:	440b      	add	r3, r1
 80152b6:	3312      	adds	r3, #18
 80152b8:	881b      	ldrh	r3, [r3, #0]
 80152ba:	8b7a      	ldrh	r2, [r7, #26]
 80152bc:	429a      	cmp	r2, r3
 80152be:	d82a      	bhi.n	8015316 <etharp_find_entry+0x18a>
            old_pending = i;
 80152c0:	8c3b      	ldrh	r3, [r7, #32]
 80152c2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80152c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152c8:	4965      	ldr	r1, [pc, #404]	; (8015460 <etharp_find_entry+0x2d4>)
 80152ca:	4613      	mov	r3, r2
 80152cc:	005b      	lsls	r3, r3, #1
 80152ce:	4413      	add	r3, r2
 80152d0:	00db      	lsls	r3, r3, #3
 80152d2:	440b      	add	r3, r1
 80152d4:	3312      	adds	r3, #18
 80152d6:	881b      	ldrh	r3, [r3, #0]
 80152d8:	837b      	strh	r3, [r7, #26]
 80152da:	e01c      	b.n	8015316 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80152dc:	7dfb      	ldrb	r3, [r7, #23]
 80152de:	2b01      	cmp	r3, #1
 80152e0:	d919      	bls.n	8015316 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80152e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152e6:	495e      	ldr	r1, [pc, #376]	; (8015460 <etharp_find_entry+0x2d4>)
 80152e8:	4613      	mov	r3, r2
 80152ea:	005b      	lsls	r3, r3, #1
 80152ec:	4413      	add	r3, r2
 80152ee:	00db      	lsls	r3, r3, #3
 80152f0:	440b      	add	r3, r1
 80152f2:	3312      	adds	r3, #18
 80152f4:	881b      	ldrh	r3, [r3, #0]
 80152f6:	8b3a      	ldrh	r2, [r7, #24]
 80152f8:	429a      	cmp	r2, r3
 80152fa:	d80c      	bhi.n	8015316 <etharp_find_entry+0x18a>
            old_stable = i;
 80152fc:	8c3b      	ldrh	r3, [r7, #32]
 80152fe:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015300:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015304:	4956      	ldr	r1, [pc, #344]	; (8015460 <etharp_find_entry+0x2d4>)
 8015306:	4613      	mov	r3, r2
 8015308:	005b      	lsls	r3, r3, #1
 801530a:	4413      	add	r3, r2
 801530c:	00db      	lsls	r3, r3, #3
 801530e:	440b      	add	r3, r1
 8015310:	3312      	adds	r3, #18
 8015312:	881b      	ldrh	r3, [r3, #0]
 8015314:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015316:	8c3b      	ldrh	r3, [r7, #32]
 8015318:	3301      	adds	r3, #1
 801531a:	b29b      	uxth	r3, r3
 801531c:	843b      	strh	r3, [r7, #32]
 801531e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015322:	2b09      	cmp	r3, #9
 8015324:	f77f af4c 	ble.w	80151c0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015328:	7afb      	ldrb	r3, [r7, #11]
 801532a:	f003 0302 	and.w	r3, r3, #2
 801532e:	2b00      	cmp	r3, #0
 8015330:	d108      	bne.n	8015344 <etharp_find_entry+0x1b8>
 8015332:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015336:	2b0a      	cmp	r3, #10
 8015338:	d107      	bne.n	801534a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801533a:	7afb      	ldrb	r3, [r7, #11]
 801533c:	f003 0301 	and.w	r3, r3, #1
 8015340:	2b00      	cmp	r3, #0
 8015342:	d102      	bne.n	801534a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015348:	e085      	b.n	8015456 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801534a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801534e:	2b09      	cmp	r3, #9
 8015350:	dc02      	bgt.n	8015358 <etharp_find_entry+0x1cc>
    i = empty;
 8015352:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015354:	843b      	strh	r3, [r7, #32]
 8015356:	e039      	b.n	80153cc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015358:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801535c:	2b09      	cmp	r3, #9
 801535e:	dc14      	bgt.n	801538a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015362:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015364:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015368:	493d      	ldr	r1, [pc, #244]	; (8015460 <etharp_find_entry+0x2d4>)
 801536a:	4613      	mov	r3, r2
 801536c:	005b      	lsls	r3, r3, #1
 801536e:	4413      	add	r3, r2
 8015370:	00db      	lsls	r3, r3, #3
 8015372:	440b      	add	r3, r1
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d018      	beq.n	80153ac <etharp_find_entry+0x220>
 801537a:	4b3a      	ldr	r3, [pc, #232]	; (8015464 <etharp_find_entry+0x2d8>)
 801537c:	f240 126d 	movw	r2, #365	; 0x16d
 8015380:	493b      	ldr	r1, [pc, #236]	; (8015470 <etharp_find_entry+0x2e4>)
 8015382:	483a      	ldr	r0, [pc, #232]	; (801546c <etharp_find_entry+0x2e0>)
 8015384:	f004 fb2c 	bl	80199e0 <iprintf>
 8015388:	e010      	b.n	80153ac <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801538a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801538e:	2b09      	cmp	r3, #9
 8015390:	dc02      	bgt.n	8015398 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015392:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015394:	843b      	strh	r3, [r7, #32]
 8015396:	e009      	b.n	80153ac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015398:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801539c:	2b09      	cmp	r3, #9
 801539e:	dc02      	bgt.n	80153a6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80153a0:	8bfb      	ldrh	r3, [r7, #30]
 80153a2:	843b      	strh	r3, [r7, #32]
 80153a4:	e002      	b.n	80153ac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80153a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80153aa:	e054      	b.n	8015456 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80153ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80153b0:	2b09      	cmp	r3, #9
 80153b2:	dd06      	ble.n	80153c2 <etharp_find_entry+0x236>
 80153b4:	4b2b      	ldr	r3, [pc, #172]	; (8015464 <etharp_find_entry+0x2d8>)
 80153b6:	f240 127f 	movw	r2, #383	; 0x17f
 80153ba:	492e      	ldr	r1, [pc, #184]	; (8015474 <etharp_find_entry+0x2e8>)
 80153bc:	482b      	ldr	r0, [pc, #172]	; (801546c <etharp_find_entry+0x2e0>)
 80153be:	f004 fb0f 	bl	80199e0 <iprintf>
    etharp_free_entry(i);
 80153c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80153c6:	4618      	mov	r0, r3
 80153c8:	f7ff fe06 	bl	8014fd8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80153cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80153d0:	2b09      	cmp	r3, #9
 80153d2:	dd06      	ble.n	80153e2 <etharp_find_entry+0x256>
 80153d4:	4b23      	ldr	r3, [pc, #140]	; (8015464 <etharp_find_entry+0x2d8>)
 80153d6:	f240 1283 	movw	r2, #387	; 0x183
 80153da:	4926      	ldr	r1, [pc, #152]	; (8015474 <etharp_find_entry+0x2e8>)
 80153dc:	4823      	ldr	r0, [pc, #140]	; (801546c <etharp_find_entry+0x2e0>)
 80153de:	f004 faff 	bl	80199e0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80153e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153e6:	491e      	ldr	r1, [pc, #120]	; (8015460 <etharp_find_entry+0x2d4>)
 80153e8:	4613      	mov	r3, r2
 80153ea:	005b      	lsls	r3, r3, #1
 80153ec:	4413      	add	r3, r2
 80153ee:	00db      	lsls	r3, r3, #3
 80153f0:	440b      	add	r3, r1
 80153f2:	3314      	adds	r3, #20
 80153f4:	781b      	ldrb	r3, [r3, #0]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d006      	beq.n	8015408 <etharp_find_entry+0x27c>
 80153fa:	4b1a      	ldr	r3, [pc, #104]	; (8015464 <etharp_find_entry+0x2d8>)
 80153fc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015400:	491d      	ldr	r1, [pc, #116]	; (8015478 <etharp_find_entry+0x2ec>)
 8015402:	481a      	ldr	r0, [pc, #104]	; (801546c <etharp_find_entry+0x2e0>)
 8015404:	f004 faec 	bl	80199e0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d00b      	beq.n	8015426 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801540e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	6819      	ldr	r1, [r3, #0]
 8015416:	4812      	ldr	r0, [pc, #72]	; (8015460 <etharp_find_entry+0x2d4>)
 8015418:	4613      	mov	r3, r2
 801541a:	005b      	lsls	r3, r3, #1
 801541c:	4413      	add	r3, r2
 801541e:	00db      	lsls	r3, r3, #3
 8015420:	4403      	add	r3, r0
 8015422:	3304      	adds	r3, #4
 8015424:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015426:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801542a:	490d      	ldr	r1, [pc, #52]	; (8015460 <etharp_find_entry+0x2d4>)
 801542c:	4613      	mov	r3, r2
 801542e:	005b      	lsls	r3, r3, #1
 8015430:	4413      	add	r3, r2
 8015432:	00db      	lsls	r3, r3, #3
 8015434:	440b      	add	r3, r1
 8015436:	3312      	adds	r3, #18
 8015438:	2200      	movs	r2, #0
 801543a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801543c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015440:	4907      	ldr	r1, [pc, #28]	; (8015460 <etharp_find_entry+0x2d4>)
 8015442:	4613      	mov	r3, r2
 8015444:	005b      	lsls	r3, r3, #1
 8015446:	4413      	add	r3, r2
 8015448:	00db      	lsls	r3, r3, #3
 801544a:	440b      	add	r3, r1
 801544c:	3308      	adds	r3, #8
 801544e:	687a      	ldr	r2, [r7, #4]
 8015450:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015452:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015456:	4618      	mov	r0, r3
 8015458:	3728      	adds	r7, #40	; 0x28
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}
 801545e:	bf00      	nop
 8015460:	20011300 	.word	0x20011300
 8015464:	0801da60 	.word	0x0801da60
 8015468:	0801da98 	.word	0x0801da98
 801546c:	0801dad8 	.word	0x0801dad8
 8015470:	0801db00 	.word	0x0801db00
 8015474:	0801db18 	.word	0x0801db18
 8015478:	0801db2c 	.word	0x0801db2c

0801547c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801547c:	b580      	push	{r7, lr}
 801547e:	b088      	sub	sp, #32
 8015480:	af02      	add	r7, sp, #8
 8015482:	60f8      	str	r0, [r7, #12]
 8015484:	60b9      	str	r1, [r7, #8]
 8015486:	607a      	str	r2, [r7, #4]
 8015488:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015490:	2b06      	cmp	r3, #6
 8015492:	d006      	beq.n	80154a2 <etharp_update_arp_entry+0x26>
 8015494:	4b48      	ldr	r3, [pc, #288]	; (80155b8 <etharp_update_arp_entry+0x13c>)
 8015496:	f240 12a9 	movw	r2, #425	; 0x1a9
 801549a:	4948      	ldr	r1, [pc, #288]	; (80155bc <etharp_update_arp_entry+0x140>)
 801549c:	4848      	ldr	r0, [pc, #288]	; (80155c0 <etharp_update_arp_entry+0x144>)
 801549e:	f004 fa9f 	bl	80199e0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80154a2:	68bb      	ldr	r3, [r7, #8]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d012      	beq.n	80154ce <etharp_update_arp_entry+0x52>
 80154a8:	68bb      	ldr	r3, [r7, #8]
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d00e      	beq.n	80154ce <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80154b0:	68bb      	ldr	r3, [r7, #8]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	68f9      	ldr	r1, [r7, #12]
 80154b6:	4618      	mov	r0, r3
 80154b8:	f001 f8fe 	bl	80166b8 <ip4_addr_isbroadcast_u32>
 80154bc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d105      	bne.n	80154ce <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80154c2:	68bb      	ldr	r3, [r7, #8]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80154ca:	2be0      	cmp	r3, #224	; 0xe0
 80154cc:	d102      	bne.n	80154d4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80154ce:	f06f 030f 	mvn.w	r3, #15
 80154d2:	e06c      	b.n	80155ae <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80154d4:	78fb      	ldrb	r3, [r7, #3]
 80154d6:	68fa      	ldr	r2, [r7, #12]
 80154d8:	4619      	mov	r1, r3
 80154da:	68b8      	ldr	r0, [r7, #8]
 80154dc:	f7ff fe56 	bl	801518c <etharp_find_entry>
 80154e0:	4603      	mov	r3, r0
 80154e2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80154e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	da02      	bge.n	80154f2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80154ec:	8afb      	ldrh	r3, [r7, #22]
 80154ee:	b25b      	sxtb	r3, r3
 80154f0:	e05d      	b.n	80155ae <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80154f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80154f6:	4933      	ldr	r1, [pc, #204]	; (80155c4 <etharp_update_arp_entry+0x148>)
 80154f8:	4613      	mov	r3, r2
 80154fa:	005b      	lsls	r3, r3, #1
 80154fc:	4413      	add	r3, r2
 80154fe:	00db      	lsls	r3, r3, #3
 8015500:	440b      	add	r3, r1
 8015502:	3314      	adds	r3, #20
 8015504:	2202      	movs	r2, #2
 8015506:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015508:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801550c:	492d      	ldr	r1, [pc, #180]	; (80155c4 <etharp_update_arp_entry+0x148>)
 801550e:	4613      	mov	r3, r2
 8015510:	005b      	lsls	r3, r3, #1
 8015512:	4413      	add	r3, r2
 8015514:	00db      	lsls	r3, r3, #3
 8015516:	440b      	add	r3, r1
 8015518:	3308      	adds	r3, #8
 801551a:	68fa      	ldr	r2, [r7, #12]
 801551c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801551e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015522:	4613      	mov	r3, r2
 8015524:	005b      	lsls	r3, r3, #1
 8015526:	4413      	add	r3, r2
 8015528:	00db      	lsls	r3, r3, #3
 801552a:	3308      	adds	r3, #8
 801552c:	4a25      	ldr	r2, [pc, #148]	; (80155c4 <etharp_update_arp_entry+0x148>)
 801552e:	4413      	add	r3, r2
 8015530:	3304      	adds	r3, #4
 8015532:	2206      	movs	r2, #6
 8015534:	6879      	ldr	r1, [r7, #4]
 8015536:	4618      	mov	r0, r3
 8015538:	f004 fa3c 	bl	80199b4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801553c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015540:	4920      	ldr	r1, [pc, #128]	; (80155c4 <etharp_update_arp_entry+0x148>)
 8015542:	4613      	mov	r3, r2
 8015544:	005b      	lsls	r3, r3, #1
 8015546:	4413      	add	r3, r2
 8015548:	00db      	lsls	r3, r3, #3
 801554a:	440b      	add	r3, r1
 801554c:	3312      	adds	r3, #18
 801554e:	2200      	movs	r2, #0
 8015550:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015552:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015556:	491b      	ldr	r1, [pc, #108]	; (80155c4 <etharp_update_arp_entry+0x148>)
 8015558:	4613      	mov	r3, r2
 801555a:	005b      	lsls	r3, r3, #1
 801555c:	4413      	add	r3, r2
 801555e:	00db      	lsls	r3, r3, #3
 8015560:	440b      	add	r3, r1
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d021      	beq.n	80155ac <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015568:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801556c:	4915      	ldr	r1, [pc, #84]	; (80155c4 <etharp_update_arp_entry+0x148>)
 801556e:	4613      	mov	r3, r2
 8015570:	005b      	lsls	r3, r3, #1
 8015572:	4413      	add	r3, r2
 8015574:	00db      	lsls	r3, r3, #3
 8015576:	440b      	add	r3, r1
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801557c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015580:	4910      	ldr	r1, [pc, #64]	; (80155c4 <etharp_update_arp_entry+0x148>)
 8015582:	4613      	mov	r3, r2
 8015584:	005b      	lsls	r3, r3, #1
 8015586:	4413      	add	r3, r2
 8015588:	00db      	lsls	r3, r3, #3
 801558a:	440b      	add	r3, r1
 801558c:	2200      	movs	r2, #0
 801558e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015596:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801559a:	9300      	str	r3, [sp, #0]
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	6939      	ldr	r1, [r7, #16]
 80155a0:	68f8      	ldr	r0, [r7, #12]
 80155a2:	f002 f8c1 	bl	8017728 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80155a6:	6938      	ldr	r0, [r7, #16]
 80155a8:	f7f8 fd58 	bl	800e05c <pbuf_free>
  }
  return ERR_OK;
 80155ac:	2300      	movs	r3, #0
}
 80155ae:	4618      	mov	r0, r3
 80155b0:	3718      	adds	r7, #24
 80155b2:	46bd      	mov	sp, r7
 80155b4:	bd80      	pop	{r7, pc}
 80155b6:	bf00      	nop
 80155b8:	0801da60 	.word	0x0801da60
 80155bc:	0801db58 	.word	0x0801db58
 80155c0:	0801dad8 	.word	0x0801dad8
 80155c4:	20011300 	.word	0x20011300

080155c8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80155c8:	b580      	push	{r7, lr}
 80155ca:	b084      	sub	sp, #16
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80155d0:	2300      	movs	r3, #0
 80155d2:	60fb      	str	r3, [r7, #12]
 80155d4:	e01e      	b.n	8015614 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80155d6:	4913      	ldr	r1, [pc, #76]	; (8015624 <etharp_cleanup_netif+0x5c>)
 80155d8:	68fa      	ldr	r2, [r7, #12]
 80155da:	4613      	mov	r3, r2
 80155dc:	005b      	lsls	r3, r3, #1
 80155de:	4413      	add	r3, r2
 80155e0:	00db      	lsls	r3, r3, #3
 80155e2:	440b      	add	r3, r1
 80155e4:	3314      	adds	r3, #20
 80155e6:	781b      	ldrb	r3, [r3, #0]
 80155e8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80155ea:	7afb      	ldrb	r3, [r7, #11]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d00e      	beq.n	801560e <etharp_cleanup_netif+0x46>
 80155f0:	490c      	ldr	r1, [pc, #48]	; (8015624 <etharp_cleanup_netif+0x5c>)
 80155f2:	68fa      	ldr	r2, [r7, #12]
 80155f4:	4613      	mov	r3, r2
 80155f6:	005b      	lsls	r3, r3, #1
 80155f8:	4413      	add	r3, r2
 80155fa:	00db      	lsls	r3, r3, #3
 80155fc:	440b      	add	r3, r1
 80155fe:	3308      	adds	r3, #8
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	687a      	ldr	r2, [r7, #4]
 8015604:	429a      	cmp	r2, r3
 8015606:	d102      	bne.n	801560e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015608:	68f8      	ldr	r0, [r7, #12]
 801560a:	f7ff fce5 	bl	8014fd8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	3301      	adds	r3, #1
 8015612:	60fb      	str	r3, [r7, #12]
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	2b09      	cmp	r3, #9
 8015618:	dddd      	ble.n	80155d6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801561a:	bf00      	nop
 801561c:	bf00      	nop
 801561e:	3710      	adds	r7, #16
 8015620:	46bd      	mov	sp, r7
 8015622:	bd80      	pop	{r7, pc}
 8015624:	20011300 	.word	0x20011300

08015628 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015628:	b5b0      	push	{r4, r5, r7, lr}
 801562a:	b08a      	sub	sp, #40	; 0x28
 801562c:	af04      	add	r7, sp, #16
 801562e:	6078      	str	r0, [r7, #4]
 8015630:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d107      	bne.n	8015648 <etharp_input+0x20>
 8015638:	4b3d      	ldr	r3, [pc, #244]	; (8015730 <etharp_input+0x108>)
 801563a:	f240 228a 	movw	r2, #650	; 0x28a
 801563e:	493d      	ldr	r1, [pc, #244]	; (8015734 <etharp_input+0x10c>)
 8015640:	483d      	ldr	r0, [pc, #244]	; (8015738 <etharp_input+0x110>)
 8015642:	f004 f9cd 	bl	80199e0 <iprintf>
 8015646:	e06f      	b.n	8015728 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	685b      	ldr	r3, [r3, #4]
 801564c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801564e:	693b      	ldr	r3, [r7, #16]
 8015650:	881b      	ldrh	r3, [r3, #0]
 8015652:	b29b      	uxth	r3, r3
 8015654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015658:	d10c      	bne.n	8015674 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801565a:	693b      	ldr	r3, [r7, #16]
 801565c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801565e:	2b06      	cmp	r3, #6
 8015660:	d108      	bne.n	8015674 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015662:	693b      	ldr	r3, [r7, #16]
 8015664:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015666:	2b04      	cmp	r3, #4
 8015668:	d104      	bne.n	8015674 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801566a:	693b      	ldr	r3, [r7, #16]
 801566c:	885b      	ldrh	r3, [r3, #2]
 801566e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015670:	2b08      	cmp	r3, #8
 8015672:	d003      	beq.n	801567c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015674:	6878      	ldr	r0, [r7, #4]
 8015676:	f7f8 fcf1 	bl	800e05c <pbuf_free>
    return;
 801567a:	e055      	b.n	8015728 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801567c:	693b      	ldr	r3, [r7, #16]
 801567e:	330e      	adds	r3, #14
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015684:	693b      	ldr	r3, [r7, #16]
 8015686:	3318      	adds	r3, #24
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801568c:	683b      	ldr	r3, [r7, #0]
 801568e:	3304      	adds	r3, #4
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d102      	bne.n	801569c <etharp_input+0x74>
    for_us = 0;
 8015696:	2300      	movs	r3, #0
 8015698:	75fb      	strb	r3, [r7, #23]
 801569a:	e009      	b.n	80156b0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801569c:	68ba      	ldr	r2, [r7, #8]
 801569e:	683b      	ldr	r3, [r7, #0]
 80156a0:	3304      	adds	r3, #4
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	429a      	cmp	r2, r3
 80156a6:	bf0c      	ite	eq
 80156a8:	2301      	moveq	r3, #1
 80156aa:	2300      	movne	r3, #0
 80156ac:	b2db      	uxtb	r3, r3
 80156ae:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80156b0:	693b      	ldr	r3, [r7, #16]
 80156b2:	f103 0208 	add.w	r2, r3, #8
 80156b6:	7dfb      	ldrb	r3, [r7, #23]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d001      	beq.n	80156c0 <etharp_input+0x98>
 80156bc:	2301      	movs	r3, #1
 80156be:	e000      	b.n	80156c2 <etharp_input+0x9a>
 80156c0:	2302      	movs	r3, #2
 80156c2:	f107 010c 	add.w	r1, r7, #12
 80156c6:	6838      	ldr	r0, [r7, #0]
 80156c8:	f7ff fed8 	bl	801547c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80156cc:	693b      	ldr	r3, [r7, #16]
 80156ce:	88db      	ldrh	r3, [r3, #6]
 80156d0:	b29b      	uxth	r3, r3
 80156d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80156d6:	d003      	beq.n	80156e0 <etharp_input+0xb8>
 80156d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80156dc:	d01e      	beq.n	801571c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80156de:	e020      	b.n	8015722 <etharp_input+0xfa>
      if (for_us) {
 80156e0:	7dfb      	ldrb	r3, [r7, #23]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d01c      	beq.n	8015720 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80156e6:	683b      	ldr	r3, [r7, #0]
 80156e8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80156ec:	693b      	ldr	r3, [r7, #16]
 80156ee:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80156f2:	683b      	ldr	r3, [r7, #0]
 80156f4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80156f8:	683b      	ldr	r3, [r7, #0]
 80156fa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80156fc:	693a      	ldr	r2, [r7, #16]
 80156fe:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015700:	2102      	movs	r1, #2
 8015702:	9103      	str	r1, [sp, #12]
 8015704:	f107 010c 	add.w	r1, r7, #12
 8015708:	9102      	str	r1, [sp, #8]
 801570a:	9201      	str	r2, [sp, #4]
 801570c:	9300      	str	r3, [sp, #0]
 801570e:	462b      	mov	r3, r5
 8015710:	4622      	mov	r2, r4
 8015712:	4601      	mov	r1, r0
 8015714:	6838      	ldr	r0, [r7, #0]
 8015716:	f000 faeb 	bl	8015cf0 <etharp_raw>
      break;
 801571a:	e001      	b.n	8015720 <etharp_input+0xf8>
      break;
 801571c:	bf00      	nop
 801571e:	e000      	b.n	8015722 <etharp_input+0xfa>
      break;
 8015720:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015722:	6878      	ldr	r0, [r7, #4]
 8015724:	f7f8 fc9a 	bl	800e05c <pbuf_free>
}
 8015728:	3718      	adds	r7, #24
 801572a:	46bd      	mov	sp, r7
 801572c:	bdb0      	pop	{r4, r5, r7, pc}
 801572e:	bf00      	nop
 8015730:	0801da60 	.word	0x0801da60
 8015734:	0801dbb0 	.word	0x0801dbb0
 8015738:	0801dad8 	.word	0x0801dad8

0801573c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801573c:	b580      	push	{r7, lr}
 801573e:	b086      	sub	sp, #24
 8015740:	af02      	add	r7, sp, #8
 8015742:	60f8      	str	r0, [r7, #12]
 8015744:	60b9      	str	r1, [r7, #8]
 8015746:	4613      	mov	r3, r2
 8015748:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801574a:	79fa      	ldrb	r2, [r7, #7]
 801574c:	4944      	ldr	r1, [pc, #272]	; (8015860 <etharp_output_to_arp_index+0x124>)
 801574e:	4613      	mov	r3, r2
 8015750:	005b      	lsls	r3, r3, #1
 8015752:	4413      	add	r3, r2
 8015754:	00db      	lsls	r3, r3, #3
 8015756:	440b      	add	r3, r1
 8015758:	3314      	adds	r3, #20
 801575a:	781b      	ldrb	r3, [r3, #0]
 801575c:	2b01      	cmp	r3, #1
 801575e:	d806      	bhi.n	801576e <etharp_output_to_arp_index+0x32>
 8015760:	4b40      	ldr	r3, [pc, #256]	; (8015864 <etharp_output_to_arp_index+0x128>)
 8015762:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015766:	4940      	ldr	r1, [pc, #256]	; (8015868 <etharp_output_to_arp_index+0x12c>)
 8015768:	4840      	ldr	r0, [pc, #256]	; (801586c <etharp_output_to_arp_index+0x130>)
 801576a:	f004 f939 	bl	80199e0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801576e:	79fa      	ldrb	r2, [r7, #7]
 8015770:	493b      	ldr	r1, [pc, #236]	; (8015860 <etharp_output_to_arp_index+0x124>)
 8015772:	4613      	mov	r3, r2
 8015774:	005b      	lsls	r3, r3, #1
 8015776:	4413      	add	r3, r2
 8015778:	00db      	lsls	r3, r3, #3
 801577a:	440b      	add	r3, r1
 801577c:	3314      	adds	r3, #20
 801577e:	781b      	ldrb	r3, [r3, #0]
 8015780:	2b02      	cmp	r3, #2
 8015782:	d153      	bne.n	801582c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015784:	79fa      	ldrb	r2, [r7, #7]
 8015786:	4936      	ldr	r1, [pc, #216]	; (8015860 <etharp_output_to_arp_index+0x124>)
 8015788:	4613      	mov	r3, r2
 801578a:	005b      	lsls	r3, r3, #1
 801578c:	4413      	add	r3, r2
 801578e:	00db      	lsls	r3, r3, #3
 8015790:	440b      	add	r3, r1
 8015792:	3312      	adds	r3, #18
 8015794:	881b      	ldrh	r3, [r3, #0]
 8015796:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801579a:	d919      	bls.n	80157d0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801579c:	79fa      	ldrb	r2, [r7, #7]
 801579e:	4613      	mov	r3, r2
 80157a0:	005b      	lsls	r3, r3, #1
 80157a2:	4413      	add	r3, r2
 80157a4:	00db      	lsls	r3, r3, #3
 80157a6:	4a2e      	ldr	r2, [pc, #184]	; (8015860 <etharp_output_to_arp_index+0x124>)
 80157a8:	4413      	add	r3, r2
 80157aa:	3304      	adds	r3, #4
 80157ac:	4619      	mov	r1, r3
 80157ae:	68f8      	ldr	r0, [r7, #12]
 80157b0:	f000 fb4c 	bl	8015e4c <etharp_request>
 80157b4:	4603      	mov	r3, r0
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d138      	bne.n	801582c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80157ba:	79fa      	ldrb	r2, [r7, #7]
 80157bc:	4928      	ldr	r1, [pc, #160]	; (8015860 <etharp_output_to_arp_index+0x124>)
 80157be:	4613      	mov	r3, r2
 80157c0:	005b      	lsls	r3, r3, #1
 80157c2:	4413      	add	r3, r2
 80157c4:	00db      	lsls	r3, r3, #3
 80157c6:	440b      	add	r3, r1
 80157c8:	3314      	adds	r3, #20
 80157ca:	2203      	movs	r2, #3
 80157cc:	701a      	strb	r2, [r3, #0]
 80157ce:	e02d      	b.n	801582c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80157d0:	79fa      	ldrb	r2, [r7, #7]
 80157d2:	4923      	ldr	r1, [pc, #140]	; (8015860 <etharp_output_to_arp_index+0x124>)
 80157d4:	4613      	mov	r3, r2
 80157d6:	005b      	lsls	r3, r3, #1
 80157d8:	4413      	add	r3, r2
 80157da:	00db      	lsls	r3, r3, #3
 80157dc:	440b      	add	r3, r1
 80157de:	3312      	adds	r3, #18
 80157e0:	881b      	ldrh	r3, [r3, #0]
 80157e2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80157e6:	d321      	bcc.n	801582c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80157e8:	79fa      	ldrb	r2, [r7, #7]
 80157ea:	4613      	mov	r3, r2
 80157ec:	005b      	lsls	r3, r3, #1
 80157ee:	4413      	add	r3, r2
 80157f0:	00db      	lsls	r3, r3, #3
 80157f2:	4a1b      	ldr	r2, [pc, #108]	; (8015860 <etharp_output_to_arp_index+0x124>)
 80157f4:	4413      	add	r3, r2
 80157f6:	1d19      	adds	r1, r3, #4
 80157f8:	79fa      	ldrb	r2, [r7, #7]
 80157fa:	4613      	mov	r3, r2
 80157fc:	005b      	lsls	r3, r3, #1
 80157fe:	4413      	add	r3, r2
 8015800:	00db      	lsls	r3, r3, #3
 8015802:	3308      	adds	r3, #8
 8015804:	4a16      	ldr	r2, [pc, #88]	; (8015860 <etharp_output_to_arp_index+0x124>)
 8015806:	4413      	add	r3, r2
 8015808:	3304      	adds	r3, #4
 801580a:	461a      	mov	r2, r3
 801580c:	68f8      	ldr	r0, [r7, #12]
 801580e:	f000 fafb 	bl	8015e08 <etharp_request_dst>
 8015812:	4603      	mov	r3, r0
 8015814:	2b00      	cmp	r3, #0
 8015816:	d109      	bne.n	801582c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015818:	79fa      	ldrb	r2, [r7, #7]
 801581a:	4911      	ldr	r1, [pc, #68]	; (8015860 <etharp_output_to_arp_index+0x124>)
 801581c:	4613      	mov	r3, r2
 801581e:	005b      	lsls	r3, r3, #1
 8015820:	4413      	add	r3, r2
 8015822:	00db      	lsls	r3, r3, #3
 8015824:	440b      	add	r3, r1
 8015826:	3314      	adds	r3, #20
 8015828:	2203      	movs	r2, #3
 801582a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8015832:	79fa      	ldrb	r2, [r7, #7]
 8015834:	4613      	mov	r3, r2
 8015836:	005b      	lsls	r3, r3, #1
 8015838:	4413      	add	r3, r2
 801583a:	00db      	lsls	r3, r3, #3
 801583c:	3308      	adds	r3, #8
 801583e:	4a08      	ldr	r2, [pc, #32]	; (8015860 <etharp_output_to_arp_index+0x124>)
 8015840:	4413      	add	r3, r2
 8015842:	3304      	adds	r3, #4
 8015844:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015848:	9200      	str	r2, [sp, #0]
 801584a:	460a      	mov	r2, r1
 801584c:	68b9      	ldr	r1, [r7, #8]
 801584e:	68f8      	ldr	r0, [r7, #12]
 8015850:	f001 ff6a 	bl	8017728 <ethernet_output>
 8015854:	4603      	mov	r3, r0
}
 8015856:	4618      	mov	r0, r3
 8015858:	3710      	adds	r7, #16
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}
 801585e:	bf00      	nop
 8015860:	20011300 	.word	0x20011300
 8015864:	0801da60 	.word	0x0801da60
 8015868:	0801dbd0 	.word	0x0801dbd0
 801586c:	0801dad8 	.word	0x0801dad8

08015870 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015870:	b580      	push	{r7, lr}
 8015872:	b08a      	sub	sp, #40	; 0x28
 8015874:	af02      	add	r7, sp, #8
 8015876:	60f8      	str	r0, [r7, #12]
 8015878:	60b9      	str	r1, [r7, #8]
 801587a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d106      	bne.n	8015894 <etharp_output+0x24>
 8015886:	4b73      	ldr	r3, [pc, #460]	; (8015a54 <etharp_output+0x1e4>)
 8015888:	f240 321e 	movw	r2, #798	; 0x31e
 801588c:	4972      	ldr	r1, [pc, #456]	; (8015a58 <etharp_output+0x1e8>)
 801588e:	4873      	ldr	r0, [pc, #460]	; (8015a5c <etharp_output+0x1ec>)
 8015890:	f004 f8a6 	bl	80199e0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015894:	68bb      	ldr	r3, [r7, #8]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d106      	bne.n	80158a8 <etharp_output+0x38>
 801589a:	4b6e      	ldr	r3, [pc, #440]	; (8015a54 <etharp_output+0x1e4>)
 801589c:	f240 321f 	movw	r2, #799	; 0x31f
 80158a0:	496f      	ldr	r1, [pc, #444]	; (8015a60 <etharp_output+0x1f0>)
 80158a2:	486e      	ldr	r0, [pc, #440]	; (8015a5c <etharp_output+0x1ec>)
 80158a4:	f004 f89c 	bl	80199e0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d106      	bne.n	80158bc <etharp_output+0x4c>
 80158ae:	4b69      	ldr	r3, [pc, #420]	; (8015a54 <etharp_output+0x1e4>)
 80158b0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80158b4:	496b      	ldr	r1, [pc, #428]	; (8015a64 <etharp_output+0x1f4>)
 80158b6:	4869      	ldr	r0, [pc, #420]	; (8015a5c <etharp_output+0x1ec>)
 80158b8:	f004 f892 	bl	80199e0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	68f9      	ldr	r1, [r7, #12]
 80158c2:	4618      	mov	r0, r3
 80158c4:	f000 fef8 	bl	80166b8 <ip4_addr_isbroadcast_u32>
 80158c8:	4603      	mov	r3, r0
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d002      	beq.n	80158d4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80158ce:	4b66      	ldr	r3, [pc, #408]	; (8015a68 <etharp_output+0x1f8>)
 80158d0:	61fb      	str	r3, [r7, #28]
 80158d2:	e0af      	b.n	8015a34 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80158dc:	2be0      	cmp	r3, #224	; 0xe0
 80158de:	d118      	bne.n	8015912 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80158e0:	2301      	movs	r3, #1
 80158e2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80158e4:	2300      	movs	r3, #0
 80158e6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80158e8:	235e      	movs	r3, #94	; 0x5e
 80158ea:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	3301      	adds	r3, #1
 80158f0:	781b      	ldrb	r3, [r3, #0]
 80158f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80158f6:	b2db      	uxtb	r3, r3
 80158f8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	3302      	adds	r3, #2
 80158fe:	781b      	ldrb	r3, [r3, #0]
 8015900:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	3303      	adds	r3, #3
 8015906:	781b      	ldrb	r3, [r3, #0]
 8015908:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801590a:	f107 0310 	add.w	r3, r7, #16
 801590e:	61fb      	str	r3, [r7, #28]
 8015910:	e090      	b.n	8015a34 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	681a      	ldr	r2, [r3, #0]
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	3304      	adds	r3, #4
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	405a      	eors	r2, r3
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	3308      	adds	r3, #8
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	4013      	ands	r3, r2
 8015926:	2b00      	cmp	r3, #0
 8015928:	d012      	beq.n	8015950 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015930:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015934:	4293      	cmp	r3, r2
 8015936:	d00b      	beq.n	8015950 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	330c      	adds	r3, #12
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d003      	beq.n	801594a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	330c      	adds	r3, #12
 8015946:	61bb      	str	r3, [r7, #24]
 8015948:	e002      	b.n	8015950 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801594a:	f06f 0303 	mvn.w	r3, #3
 801594e:	e07d      	b.n	8015a4c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015950:	4b46      	ldr	r3, [pc, #280]	; (8015a6c <etharp_output+0x1fc>)
 8015952:	781b      	ldrb	r3, [r3, #0]
 8015954:	4619      	mov	r1, r3
 8015956:	4a46      	ldr	r2, [pc, #280]	; (8015a70 <etharp_output+0x200>)
 8015958:	460b      	mov	r3, r1
 801595a:	005b      	lsls	r3, r3, #1
 801595c:	440b      	add	r3, r1
 801595e:	00db      	lsls	r3, r3, #3
 8015960:	4413      	add	r3, r2
 8015962:	3314      	adds	r3, #20
 8015964:	781b      	ldrb	r3, [r3, #0]
 8015966:	2b01      	cmp	r3, #1
 8015968:	d925      	bls.n	80159b6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801596a:	4b40      	ldr	r3, [pc, #256]	; (8015a6c <etharp_output+0x1fc>)
 801596c:	781b      	ldrb	r3, [r3, #0]
 801596e:	4619      	mov	r1, r3
 8015970:	4a3f      	ldr	r2, [pc, #252]	; (8015a70 <etharp_output+0x200>)
 8015972:	460b      	mov	r3, r1
 8015974:	005b      	lsls	r3, r3, #1
 8015976:	440b      	add	r3, r1
 8015978:	00db      	lsls	r3, r3, #3
 801597a:	4413      	add	r3, r2
 801597c:	3308      	adds	r3, #8
 801597e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015980:	68fa      	ldr	r2, [r7, #12]
 8015982:	429a      	cmp	r2, r3
 8015984:	d117      	bne.n	80159b6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015986:	69bb      	ldr	r3, [r7, #24]
 8015988:	681a      	ldr	r2, [r3, #0]
 801598a:	4b38      	ldr	r3, [pc, #224]	; (8015a6c <etharp_output+0x1fc>)
 801598c:	781b      	ldrb	r3, [r3, #0]
 801598e:	4618      	mov	r0, r3
 8015990:	4937      	ldr	r1, [pc, #220]	; (8015a70 <etharp_output+0x200>)
 8015992:	4603      	mov	r3, r0
 8015994:	005b      	lsls	r3, r3, #1
 8015996:	4403      	add	r3, r0
 8015998:	00db      	lsls	r3, r3, #3
 801599a:	440b      	add	r3, r1
 801599c:	3304      	adds	r3, #4
 801599e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80159a0:	429a      	cmp	r2, r3
 80159a2:	d108      	bne.n	80159b6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80159a4:	4b31      	ldr	r3, [pc, #196]	; (8015a6c <etharp_output+0x1fc>)
 80159a6:	781b      	ldrb	r3, [r3, #0]
 80159a8:	461a      	mov	r2, r3
 80159aa:	68b9      	ldr	r1, [r7, #8]
 80159ac:	68f8      	ldr	r0, [r7, #12]
 80159ae:	f7ff fec5 	bl	801573c <etharp_output_to_arp_index>
 80159b2:	4603      	mov	r3, r0
 80159b4:	e04a      	b.n	8015a4c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80159b6:	2300      	movs	r3, #0
 80159b8:	75fb      	strb	r3, [r7, #23]
 80159ba:	e031      	b.n	8015a20 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80159bc:	7dfa      	ldrb	r2, [r7, #23]
 80159be:	492c      	ldr	r1, [pc, #176]	; (8015a70 <etharp_output+0x200>)
 80159c0:	4613      	mov	r3, r2
 80159c2:	005b      	lsls	r3, r3, #1
 80159c4:	4413      	add	r3, r2
 80159c6:	00db      	lsls	r3, r3, #3
 80159c8:	440b      	add	r3, r1
 80159ca:	3314      	adds	r3, #20
 80159cc:	781b      	ldrb	r3, [r3, #0]
 80159ce:	2b01      	cmp	r3, #1
 80159d0:	d923      	bls.n	8015a1a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80159d2:	7dfa      	ldrb	r2, [r7, #23]
 80159d4:	4926      	ldr	r1, [pc, #152]	; (8015a70 <etharp_output+0x200>)
 80159d6:	4613      	mov	r3, r2
 80159d8:	005b      	lsls	r3, r3, #1
 80159da:	4413      	add	r3, r2
 80159dc:	00db      	lsls	r3, r3, #3
 80159de:	440b      	add	r3, r1
 80159e0:	3308      	adds	r3, #8
 80159e2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80159e4:	68fa      	ldr	r2, [r7, #12]
 80159e6:	429a      	cmp	r2, r3
 80159e8:	d117      	bne.n	8015a1a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80159ea:	69bb      	ldr	r3, [r7, #24]
 80159ec:	6819      	ldr	r1, [r3, #0]
 80159ee:	7dfa      	ldrb	r2, [r7, #23]
 80159f0:	481f      	ldr	r0, [pc, #124]	; (8015a70 <etharp_output+0x200>)
 80159f2:	4613      	mov	r3, r2
 80159f4:	005b      	lsls	r3, r3, #1
 80159f6:	4413      	add	r3, r2
 80159f8:	00db      	lsls	r3, r3, #3
 80159fa:	4403      	add	r3, r0
 80159fc:	3304      	adds	r3, #4
 80159fe:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015a00:	4299      	cmp	r1, r3
 8015a02:	d10a      	bne.n	8015a1a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015a04:	4a19      	ldr	r2, [pc, #100]	; (8015a6c <etharp_output+0x1fc>)
 8015a06:	7dfb      	ldrb	r3, [r7, #23]
 8015a08:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015a0a:	7dfb      	ldrb	r3, [r7, #23]
 8015a0c:	461a      	mov	r2, r3
 8015a0e:	68b9      	ldr	r1, [r7, #8]
 8015a10:	68f8      	ldr	r0, [r7, #12]
 8015a12:	f7ff fe93 	bl	801573c <etharp_output_to_arp_index>
 8015a16:	4603      	mov	r3, r0
 8015a18:	e018      	b.n	8015a4c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015a1a:	7dfb      	ldrb	r3, [r7, #23]
 8015a1c:	3301      	adds	r3, #1
 8015a1e:	75fb      	strb	r3, [r7, #23]
 8015a20:	7dfb      	ldrb	r3, [r7, #23]
 8015a22:	2b09      	cmp	r3, #9
 8015a24:	d9ca      	bls.n	80159bc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015a26:	68ba      	ldr	r2, [r7, #8]
 8015a28:	69b9      	ldr	r1, [r7, #24]
 8015a2a:	68f8      	ldr	r0, [r7, #12]
 8015a2c:	f000 f822 	bl	8015a74 <etharp_query>
 8015a30:	4603      	mov	r3, r0
 8015a32:	e00b      	b.n	8015a4c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015a3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015a3e:	9300      	str	r3, [sp, #0]
 8015a40:	69fb      	ldr	r3, [r7, #28]
 8015a42:	68b9      	ldr	r1, [r7, #8]
 8015a44:	68f8      	ldr	r0, [r7, #12]
 8015a46:	f001 fe6f 	bl	8017728 <ethernet_output>
 8015a4a:	4603      	mov	r3, r0
}
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	3720      	adds	r7, #32
 8015a50:	46bd      	mov	sp, r7
 8015a52:	bd80      	pop	{r7, pc}
 8015a54:	0801da60 	.word	0x0801da60
 8015a58:	0801dbb0 	.word	0x0801dbb0
 8015a5c:	0801dad8 	.word	0x0801dad8
 8015a60:	0801dc00 	.word	0x0801dc00
 8015a64:	0801dba0 	.word	0x0801dba0
 8015a68:	0801e338 	.word	0x0801e338
 8015a6c:	200113f0 	.word	0x200113f0
 8015a70:	20011300 	.word	0x20011300

08015a74 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015a74:	b580      	push	{r7, lr}
 8015a76:	b08c      	sub	sp, #48	; 0x30
 8015a78:	af02      	add	r7, sp, #8
 8015a7a:	60f8      	str	r0, [r7, #12]
 8015a7c:	60b9      	str	r1, [r7, #8]
 8015a7e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	3326      	adds	r3, #38	; 0x26
 8015a84:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015a86:	23ff      	movs	r3, #255	; 0xff
 8015a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015a90:	68bb      	ldr	r3, [r7, #8]
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	68f9      	ldr	r1, [r7, #12]
 8015a96:	4618      	mov	r0, r3
 8015a98:	f000 fe0e 	bl	80166b8 <ip4_addr_isbroadcast_u32>
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d10c      	bne.n	8015abc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015aa2:	68bb      	ldr	r3, [r7, #8]
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015aaa:	2be0      	cmp	r3, #224	; 0xe0
 8015aac:	d006      	beq.n	8015abc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015aae:	68bb      	ldr	r3, [r7, #8]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d003      	beq.n	8015abc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015ab4:	68bb      	ldr	r3, [r7, #8]
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d102      	bne.n	8015ac2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015abc:	f06f 030f 	mvn.w	r3, #15
 8015ac0:	e101      	b.n	8015cc6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015ac2:	68fa      	ldr	r2, [r7, #12]
 8015ac4:	2101      	movs	r1, #1
 8015ac6:	68b8      	ldr	r0, [r7, #8]
 8015ac8:	f7ff fb60 	bl	801518c <etharp_find_entry>
 8015acc:	4603      	mov	r3, r0
 8015ace:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015ad0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	da02      	bge.n	8015ade <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015ad8:	8a7b      	ldrh	r3, [r7, #18]
 8015ada:	b25b      	sxtb	r3, r3
 8015adc:	e0f3      	b.n	8015cc6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015ade:	8a7b      	ldrh	r3, [r7, #18]
 8015ae0:	2b7e      	cmp	r3, #126	; 0x7e
 8015ae2:	d906      	bls.n	8015af2 <etharp_query+0x7e>
 8015ae4:	4b7a      	ldr	r3, [pc, #488]	; (8015cd0 <etharp_query+0x25c>)
 8015ae6:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015aea:	497a      	ldr	r1, [pc, #488]	; (8015cd4 <etharp_query+0x260>)
 8015aec:	487a      	ldr	r0, [pc, #488]	; (8015cd8 <etharp_query+0x264>)
 8015aee:	f003 ff77 	bl	80199e0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015af2:	8a7b      	ldrh	r3, [r7, #18]
 8015af4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015af6:	7c7a      	ldrb	r2, [r7, #17]
 8015af8:	4978      	ldr	r1, [pc, #480]	; (8015cdc <etharp_query+0x268>)
 8015afa:	4613      	mov	r3, r2
 8015afc:	005b      	lsls	r3, r3, #1
 8015afe:	4413      	add	r3, r2
 8015b00:	00db      	lsls	r3, r3, #3
 8015b02:	440b      	add	r3, r1
 8015b04:	3314      	adds	r3, #20
 8015b06:	781b      	ldrb	r3, [r3, #0]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d115      	bne.n	8015b38 <etharp_query+0xc4>
    is_new_entry = 1;
 8015b0c:	2301      	movs	r3, #1
 8015b0e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015b10:	7c7a      	ldrb	r2, [r7, #17]
 8015b12:	4972      	ldr	r1, [pc, #456]	; (8015cdc <etharp_query+0x268>)
 8015b14:	4613      	mov	r3, r2
 8015b16:	005b      	lsls	r3, r3, #1
 8015b18:	4413      	add	r3, r2
 8015b1a:	00db      	lsls	r3, r3, #3
 8015b1c:	440b      	add	r3, r1
 8015b1e:	3314      	adds	r3, #20
 8015b20:	2201      	movs	r2, #1
 8015b22:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015b24:	7c7a      	ldrb	r2, [r7, #17]
 8015b26:	496d      	ldr	r1, [pc, #436]	; (8015cdc <etharp_query+0x268>)
 8015b28:	4613      	mov	r3, r2
 8015b2a:	005b      	lsls	r3, r3, #1
 8015b2c:	4413      	add	r3, r2
 8015b2e:	00db      	lsls	r3, r3, #3
 8015b30:	440b      	add	r3, r1
 8015b32:	3308      	adds	r3, #8
 8015b34:	68fa      	ldr	r2, [r7, #12]
 8015b36:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015b38:	7c7a      	ldrb	r2, [r7, #17]
 8015b3a:	4968      	ldr	r1, [pc, #416]	; (8015cdc <etharp_query+0x268>)
 8015b3c:	4613      	mov	r3, r2
 8015b3e:	005b      	lsls	r3, r3, #1
 8015b40:	4413      	add	r3, r2
 8015b42:	00db      	lsls	r3, r3, #3
 8015b44:	440b      	add	r3, r1
 8015b46:	3314      	adds	r3, #20
 8015b48:	781b      	ldrb	r3, [r3, #0]
 8015b4a:	2b01      	cmp	r3, #1
 8015b4c:	d011      	beq.n	8015b72 <etharp_query+0xfe>
 8015b4e:	7c7a      	ldrb	r2, [r7, #17]
 8015b50:	4962      	ldr	r1, [pc, #392]	; (8015cdc <etharp_query+0x268>)
 8015b52:	4613      	mov	r3, r2
 8015b54:	005b      	lsls	r3, r3, #1
 8015b56:	4413      	add	r3, r2
 8015b58:	00db      	lsls	r3, r3, #3
 8015b5a:	440b      	add	r3, r1
 8015b5c:	3314      	adds	r3, #20
 8015b5e:	781b      	ldrb	r3, [r3, #0]
 8015b60:	2b01      	cmp	r3, #1
 8015b62:	d806      	bhi.n	8015b72 <etharp_query+0xfe>
 8015b64:	4b5a      	ldr	r3, [pc, #360]	; (8015cd0 <etharp_query+0x25c>)
 8015b66:	f240 32cd 	movw	r2, #973	; 0x3cd
 8015b6a:	495d      	ldr	r1, [pc, #372]	; (8015ce0 <etharp_query+0x26c>)
 8015b6c:	485a      	ldr	r0, [pc, #360]	; (8015cd8 <etharp_query+0x264>)
 8015b6e:	f003 ff37 	bl	80199e0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015b72:	6a3b      	ldr	r3, [r7, #32]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d102      	bne.n	8015b7e <etharp_query+0x10a>
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d10c      	bne.n	8015b98 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015b7e:	68b9      	ldr	r1, [r7, #8]
 8015b80:	68f8      	ldr	r0, [r7, #12]
 8015b82:	f000 f963 	bl	8015e4c <etharp_request>
 8015b86:	4603      	mov	r3, r0
 8015b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d102      	bne.n	8015b98 <etharp_query+0x124>
      return result;
 8015b92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015b96:	e096      	b.n	8015cc6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d106      	bne.n	8015bac <etharp_query+0x138>
 8015b9e:	4b4c      	ldr	r3, [pc, #304]	; (8015cd0 <etharp_query+0x25c>)
 8015ba0:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015ba4:	494f      	ldr	r1, [pc, #316]	; (8015ce4 <etharp_query+0x270>)
 8015ba6:	484c      	ldr	r0, [pc, #304]	; (8015cd8 <etharp_query+0x264>)
 8015ba8:	f003 ff1a 	bl	80199e0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015bac:	7c7a      	ldrb	r2, [r7, #17]
 8015bae:	494b      	ldr	r1, [pc, #300]	; (8015cdc <etharp_query+0x268>)
 8015bb0:	4613      	mov	r3, r2
 8015bb2:	005b      	lsls	r3, r3, #1
 8015bb4:	4413      	add	r3, r2
 8015bb6:	00db      	lsls	r3, r3, #3
 8015bb8:	440b      	add	r3, r1
 8015bba:	3314      	adds	r3, #20
 8015bbc:	781b      	ldrb	r3, [r3, #0]
 8015bbe:	2b01      	cmp	r3, #1
 8015bc0:	d917      	bls.n	8015bf2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015bc2:	4a49      	ldr	r2, [pc, #292]	; (8015ce8 <etharp_query+0x274>)
 8015bc4:	7c7b      	ldrb	r3, [r7, #17]
 8015bc6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015bc8:	7c7a      	ldrb	r2, [r7, #17]
 8015bca:	4613      	mov	r3, r2
 8015bcc:	005b      	lsls	r3, r3, #1
 8015bce:	4413      	add	r3, r2
 8015bd0:	00db      	lsls	r3, r3, #3
 8015bd2:	3308      	adds	r3, #8
 8015bd4:	4a41      	ldr	r2, [pc, #260]	; (8015cdc <etharp_query+0x268>)
 8015bd6:	4413      	add	r3, r2
 8015bd8:	3304      	adds	r3, #4
 8015bda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015bde:	9200      	str	r2, [sp, #0]
 8015be0:	697a      	ldr	r2, [r7, #20]
 8015be2:	6879      	ldr	r1, [r7, #4]
 8015be4:	68f8      	ldr	r0, [r7, #12]
 8015be6:	f001 fd9f 	bl	8017728 <ethernet_output>
 8015bea:	4603      	mov	r3, r0
 8015bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015bf0:	e067      	b.n	8015cc2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015bf2:	7c7a      	ldrb	r2, [r7, #17]
 8015bf4:	4939      	ldr	r1, [pc, #228]	; (8015cdc <etharp_query+0x268>)
 8015bf6:	4613      	mov	r3, r2
 8015bf8:	005b      	lsls	r3, r3, #1
 8015bfa:	4413      	add	r3, r2
 8015bfc:	00db      	lsls	r3, r3, #3
 8015bfe:	440b      	add	r3, r1
 8015c00:	3314      	adds	r3, #20
 8015c02:	781b      	ldrb	r3, [r3, #0]
 8015c04:	2b01      	cmp	r3, #1
 8015c06:	d15c      	bne.n	8015cc2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015c08:	2300      	movs	r3, #0
 8015c0a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015c10:	e01c      	b.n	8015c4c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015c12:	69fb      	ldr	r3, [r7, #28]
 8015c14:	895a      	ldrh	r2, [r3, #10]
 8015c16:	69fb      	ldr	r3, [r7, #28]
 8015c18:	891b      	ldrh	r3, [r3, #8]
 8015c1a:	429a      	cmp	r2, r3
 8015c1c:	d10a      	bne.n	8015c34 <etharp_query+0x1c0>
 8015c1e:	69fb      	ldr	r3, [r7, #28]
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d006      	beq.n	8015c34 <etharp_query+0x1c0>
 8015c26:	4b2a      	ldr	r3, [pc, #168]	; (8015cd0 <etharp_query+0x25c>)
 8015c28:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015c2c:	492f      	ldr	r1, [pc, #188]	; (8015cec <etharp_query+0x278>)
 8015c2e:	482a      	ldr	r0, [pc, #168]	; (8015cd8 <etharp_query+0x264>)
 8015c30:	f003 fed6 	bl	80199e0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015c34:	69fb      	ldr	r3, [r7, #28]
 8015c36:	7b1b      	ldrb	r3, [r3, #12]
 8015c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d002      	beq.n	8015c46 <etharp_query+0x1d2>
        copy_needed = 1;
 8015c40:	2301      	movs	r3, #1
 8015c42:	61bb      	str	r3, [r7, #24]
        break;
 8015c44:	e005      	b.n	8015c52 <etharp_query+0x1de>
      }
      p = p->next;
 8015c46:	69fb      	ldr	r3, [r7, #28]
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015c4c:	69fb      	ldr	r3, [r7, #28]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d1df      	bne.n	8015c12 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015c52:	69bb      	ldr	r3, [r7, #24]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d007      	beq.n	8015c68 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015c58:	687a      	ldr	r2, [r7, #4]
 8015c5a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015c5e:	200e      	movs	r0, #14
 8015c60:	f7f8 fc64 	bl	800e52c <pbuf_clone>
 8015c64:	61f8      	str	r0, [r7, #28]
 8015c66:	e004      	b.n	8015c72 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015c6c:	69f8      	ldr	r0, [r7, #28]
 8015c6e:	f7f8 fa9b 	bl	800e1a8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015c72:	69fb      	ldr	r3, [r7, #28]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d021      	beq.n	8015cbc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015c78:	7c7a      	ldrb	r2, [r7, #17]
 8015c7a:	4918      	ldr	r1, [pc, #96]	; (8015cdc <etharp_query+0x268>)
 8015c7c:	4613      	mov	r3, r2
 8015c7e:	005b      	lsls	r3, r3, #1
 8015c80:	4413      	add	r3, r2
 8015c82:	00db      	lsls	r3, r3, #3
 8015c84:	440b      	add	r3, r1
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d00a      	beq.n	8015ca2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015c8c:	7c7a      	ldrb	r2, [r7, #17]
 8015c8e:	4913      	ldr	r1, [pc, #76]	; (8015cdc <etharp_query+0x268>)
 8015c90:	4613      	mov	r3, r2
 8015c92:	005b      	lsls	r3, r3, #1
 8015c94:	4413      	add	r3, r2
 8015c96:	00db      	lsls	r3, r3, #3
 8015c98:	440b      	add	r3, r1
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	f7f8 f9dd 	bl	800e05c <pbuf_free>
      }
      arp_table[i].q = p;
 8015ca2:	7c7a      	ldrb	r2, [r7, #17]
 8015ca4:	490d      	ldr	r1, [pc, #52]	; (8015cdc <etharp_query+0x268>)
 8015ca6:	4613      	mov	r3, r2
 8015ca8:	005b      	lsls	r3, r3, #1
 8015caa:	4413      	add	r3, r2
 8015cac:	00db      	lsls	r3, r3, #3
 8015cae:	440b      	add	r3, r1
 8015cb0:	69fa      	ldr	r2, [r7, #28]
 8015cb2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015cba:	e002      	b.n	8015cc2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015cbc:	23ff      	movs	r3, #255	; 0xff
 8015cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015cc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	3728      	adds	r7, #40	; 0x28
 8015cca:	46bd      	mov	sp, r7
 8015ccc:	bd80      	pop	{r7, pc}
 8015cce:	bf00      	nop
 8015cd0:	0801da60 	.word	0x0801da60
 8015cd4:	0801dc0c 	.word	0x0801dc0c
 8015cd8:	0801dad8 	.word	0x0801dad8
 8015cdc:	20011300 	.word	0x20011300
 8015ce0:	0801dc1c 	.word	0x0801dc1c
 8015ce4:	0801dc00 	.word	0x0801dc00
 8015ce8:	200113f0 	.word	0x200113f0
 8015cec:	0801dc44 	.word	0x0801dc44

08015cf0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b08a      	sub	sp, #40	; 0x28
 8015cf4:	af02      	add	r7, sp, #8
 8015cf6:	60f8      	str	r0, [r7, #12]
 8015cf8:	60b9      	str	r1, [r7, #8]
 8015cfa:	607a      	str	r2, [r7, #4]
 8015cfc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015cfe:	2300      	movs	r3, #0
 8015d00:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d106      	bne.n	8015d16 <etharp_raw+0x26>
 8015d08:	4b3a      	ldr	r3, [pc, #232]	; (8015df4 <etharp_raw+0x104>)
 8015d0a:	f240 4257 	movw	r2, #1111	; 0x457
 8015d0e:	493a      	ldr	r1, [pc, #232]	; (8015df8 <etharp_raw+0x108>)
 8015d10:	483a      	ldr	r0, [pc, #232]	; (8015dfc <etharp_raw+0x10c>)
 8015d12:	f003 fe65 	bl	80199e0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015d16:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015d1a:	211c      	movs	r1, #28
 8015d1c:	200e      	movs	r0, #14
 8015d1e:	f7f7 feb9 	bl	800da94 <pbuf_alloc>
 8015d22:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015d24:	69bb      	ldr	r3, [r7, #24]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d102      	bne.n	8015d30 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d2e:	e05d      	b.n	8015dec <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015d30:	69bb      	ldr	r3, [r7, #24]
 8015d32:	895b      	ldrh	r3, [r3, #10]
 8015d34:	2b1b      	cmp	r3, #27
 8015d36:	d806      	bhi.n	8015d46 <etharp_raw+0x56>
 8015d38:	4b2e      	ldr	r3, [pc, #184]	; (8015df4 <etharp_raw+0x104>)
 8015d3a:	f240 4262 	movw	r2, #1122	; 0x462
 8015d3e:	4930      	ldr	r1, [pc, #192]	; (8015e00 <etharp_raw+0x110>)
 8015d40:	482e      	ldr	r0, [pc, #184]	; (8015dfc <etharp_raw+0x10c>)
 8015d42:	f003 fe4d 	bl	80199e0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015d46:	69bb      	ldr	r3, [r7, #24]
 8015d48:	685b      	ldr	r3, [r3, #4]
 8015d4a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015d4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015d4e:	4618      	mov	r0, r3
 8015d50:	f7f6 fd82 	bl	800c858 <lwip_htons>
 8015d54:	4603      	mov	r3, r0
 8015d56:	461a      	mov	r2, r3
 8015d58:	697b      	ldr	r3, [r7, #20]
 8015d5a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015d62:	2b06      	cmp	r3, #6
 8015d64:	d006      	beq.n	8015d74 <etharp_raw+0x84>
 8015d66:	4b23      	ldr	r3, [pc, #140]	; (8015df4 <etharp_raw+0x104>)
 8015d68:	f240 4269 	movw	r2, #1129	; 0x469
 8015d6c:	4925      	ldr	r1, [pc, #148]	; (8015e04 <etharp_raw+0x114>)
 8015d6e:	4823      	ldr	r0, [pc, #140]	; (8015dfc <etharp_raw+0x10c>)
 8015d70:	f003 fe36 	bl	80199e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015d74:	697b      	ldr	r3, [r7, #20]
 8015d76:	3308      	adds	r3, #8
 8015d78:	2206      	movs	r2, #6
 8015d7a:	6839      	ldr	r1, [r7, #0]
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	f003 fe19 	bl	80199b4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015d82:	697b      	ldr	r3, [r7, #20]
 8015d84:	3312      	adds	r3, #18
 8015d86:	2206      	movs	r2, #6
 8015d88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f003 fe12 	bl	80199b4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015d90:	697b      	ldr	r3, [r7, #20]
 8015d92:	330e      	adds	r3, #14
 8015d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d96:	6812      	ldr	r2, [r2, #0]
 8015d98:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015d9a:	697b      	ldr	r3, [r7, #20]
 8015d9c:	3318      	adds	r3, #24
 8015d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015da0:	6812      	ldr	r2, [r2, #0]
 8015da2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015da4:	697b      	ldr	r3, [r7, #20]
 8015da6:	2200      	movs	r2, #0
 8015da8:	701a      	strb	r2, [r3, #0]
 8015daa:	2200      	movs	r2, #0
 8015dac:	f042 0201 	orr.w	r2, r2, #1
 8015db0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015db2:	697b      	ldr	r3, [r7, #20]
 8015db4:	2200      	movs	r2, #0
 8015db6:	f042 0208 	orr.w	r2, r2, #8
 8015dba:	709a      	strb	r2, [r3, #2]
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015dc0:	697b      	ldr	r3, [r7, #20]
 8015dc2:	2206      	movs	r2, #6
 8015dc4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015dc6:	697b      	ldr	r3, [r7, #20]
 8015dc8:	2204      	movs	r2, #4
 8015dca:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015dcc:	f640 0306 	movw	r3, #2054	; 0x806
 8015dd0:	9300      	str	r3, [sp, #0]
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	68ba      	ldr	r2, [r7, #8]
 8015dd6:	69b9      	ldr	r1, [r7, #24]
 8015dd8:	68f8      	ldr	r0, [r7, #12]
 8015dda:	f001 fca5 	bl	8017728 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015dde:	69b8      	ldr	r0, [r7, #24]
 8015de0:	f7f8 f93c 	bl	800e05c <pbuf_free>
  p = NULL;
 8015de4:	2300      	movs	r3, #0
 8015de6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015de8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015dec:	4618      	mov	r0, r3
 8015dee:	3720      	adds	r7, #32
 8015df0:	46bd      	mov	sp, r7
 8015df2:	bd80      	pop	{r7, pc}
 8015df4:	0801da60 	.word	0x0801da60
 8015df8:	0801dbb0 	.word	0x0801dbb0
 8015dfc:	0801dad8 	.word	0x0801dad8
 8015e00:	0801dc60 	.word	0x0801dc60
 8015e04:	0801dc94 	.word	0x0801dc94

08015e08 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b088      	sub	sp, #32
 8015e0c:	af04      	add	r7, sp, #16
 8015e0e:	60f8      	str	r0, [r7, #12]
 8015e10:	60b9      	str	r1, [r7, #8]
 8015e12:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015e24:	2201      	movs	r2, #1
 8015e26:	9203      	str	r2, [sp, #12]
 8015e28:	68ba      	ldr	r2, [r7, #8]
 8015e2a:	9202      	str	r2, [sp, #8]
 8015e2c:	4a06      	ldr	r2, [pc, #24]	; (8015e48 <etharp_request_dst+0x40>)
 8015e2e:	9201      	str	r2, [sp, #4]
 8015e30:	9300      	str	r3, [sp, #0]
 8015e32:	4603      	mov	r3, r0
 8015e34:	687a      	ldr	r2, [r7, #4]
 8015e36:	68f8      	ldr	r0, [r7, #12]
 8015e38:	f7ff ff5a 	bl	8015cf0 <etharp_raw>
 8015e3c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015e3e:	4618      	mov	r0, r3
 8015e40:	3710      	adds	r7, #16
 8015e42:	46bd      	mov	sp, r7
 8015e44:	bd80      	pop	{r7, pc}
 8015e46:	bf00      	nop
 8015e48:	0801e340 	.word	0x0801e340

08015e4c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b082      	sub	sp, #8
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
 8015e54:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015e56:	4a05      	ldr	r2, [pc, #20]	; (8015e6c <etharp_request+0x20>)
 8015e58:	6839      	ldr	r1, [r7, #0]
 8015e5a:	6878      	ldr	r0, [r7, #4]
 8015e5c:	f7ff ffd4 	bl	8015e08 <etharp_request_dst>
 8015e60:	4603      	mov	r3, r0
}
 8015e62:	4618      	mov	r0, r3
 8015e64:	3708      	adds	r7, #8
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bd80      	pop	{r7, pc}
 8015e6a:	bf00      	nop
 8015e6c:	0801e338 	.word	0x0801e338

08015e70 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015e70:	b580      	push	{r7, lr}
 8015e72:	b08e      	sub	sp, #56	; 0x38
 8015e74:	af04      	add	r7, sp, #16
 8015e76:	6078      	str	r0, [r7, #4]
 8015e78:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015e7a:	4b79      	ldr	r3, [pc, #484]	; (8016060 <icmp_input+0x1f0>)
 8015e7c:	689b      	ldr	r3, [r3, #8]
 8015e7e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e82:	781b      	ldrb	r3, [r3, #0]
 8015e84:	f003 030f 	and.w	r3, r3, #15
 8015e88:	b2db      	uxtb	r3, r3
 8015e8a:	009b      	lsls	r3, r3, #2
 8015e8c:	b2db      	uxtb	r3, r3
 8015e8e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015e90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015e92:	2b13      	cmp	r3, #19
 8015e94:	f240 80cd 	bls.w	8016032 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	895b      	ldrh	r3, [r3, #10]
 8015e9c:	2b03      	cmp	r3, #3
 8015e9e:	f240 80ca 	bls.w	8016036 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	685b      	ldr	r3, [r3, #4]
 8015ea6:	781b      	ldrb	r3, [r3, #0]
 8015ea8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015eac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	f000 80b7 	beq.w	8016024 <icmp_input+0x1b4>
 8015eb6:	2b08      	cmp	r3, #8
 8015eb8:	f040 80b7 	bne.w	801602a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015ebc:	4b69      	ldr	r3, [pc, #420]	; (8016064 <icmp_input+0x1f4>)
 8015ebe:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015ec0:	4b67      	ldr	r3, [pc, #412]	; (8016060 <icmp_input+0x1f0>)
 8015ec2:	695b      	ldr	r3, [r3, #20]
 8015ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015ec8:	2be0      	cmp	r3, #224	; 0xe0
 8015eca:	f000 80bb 	beq.w	8016044 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015ece:	4b64      	ldr	r3, [pc, #400]	; (8016060 <icmp_input+0x1f0>)
 8015ed0:	695b      	ldr	r3, [r3, #20]
 8015ed2:	4a63      	ldr	r2, [pc, #396]	; (8016060 <icmp_input+0x1f0>)
 8015ed4:	6812      	ldr	r2, [r2, #0]
 8015ed6:	4611      	mov	r1, r2
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f000 fbed 	bl	80166b8 <ip4_addr_isbroadcast_u32>
 8015ede:	4603      	mov	r3, r0
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	f040 80b1 	bne.w	8016048 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	891b      	ldrh	r3, [r3, #8]
 8015eea:	2b07      	cmp	r3, #7
 8015eec:	f240 80a5 	bls.w	801603a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015ef0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015ef2:	330e      	adds	r3, #14
 8015ef4:	4619      	mov	r1, r3
 8015ef6:	6878      	ldr	r0, [r7, #4]
 8015ef8:	f7f8 f81a 	bl	800df30 <pbuf_add_header>
 8015efc:	4603      	mov	r3, r0
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d04b      	beq.n	8015f9a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	891a      	ldrh	r2, [r3, #8]
 8015f06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015f08:	4413      	add	r3, r2
 8015f0a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	891b      	ldrh	r3, [r3, #8]
 8015f10:	8b7a      	ldrh	r2, [r7, #26]
 8015f12:	429a      	cmp	r2, r3
 8015f14:	f0c0 809a 	bcc.w	801604c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015f18:	8b7b      	ldrh	r3, [r7, #26]
 8015f1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015f1e:	4619      	mov	r1, r3
 8015f20:	200e      	movs	r0, #14
 8015f22:	f7f7 fdb7 	bl	800da94 <pbuf_alloc>
 8015f26:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015f28:	697b      	ldr	r3, [r7, #20]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	f000 8090 	beq.w	8016050 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015f30:	697b      	ldr	r3, [r7, #20]
 8015f32:	895b      	ldrh	r3, [r3, #10]
 8015f34:	461a      	mov	r2, r3
 8015f36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015f38:	3308      	adds	r3, #8
 8015f3a:	429a      	cmp	r2, r3
 8015f3c:	d203      	bcs.n	8015f46 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015f3e:	6978      	ldr	r0, [r7, #20]
 8015f40:	f7f8 f88c 	bl	800e05c <pbuf_free>
          goto icmperr;
 8015f44:	e085      	b.n	8016052 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015f46:	697b      	ldr	r3, [r7, #20]
 8015f48:	685b      	ldr	r3, [r3, #4]
 8015f4a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015f4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015f4e:	4618      	mov	r0, r3
 8015f50:	f003 fd30 	bl	80199b4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015f54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015f56:	4619      	mov	r1, r3
 8015f58:	6978      	ldr	r0, [r7, #20]
 8015f5a:	f7f7 fff9 	bl	800df50 <pbuf_remove_header>
 8015f5e:	4603      	mov	r3, r0
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d009      	beq.n	8015f78 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015f64:	4b40      	ldr	r3, [pc, #256]	; (8016068 <icmp_input+0x1f8>)
 8015f66:	22b6      	movs	r2, #182	; 0xb6
 8015f68:	4940      	ldr	r1, [pc, #256]	; (801606c <icmp_input+0x1fc>)
 8015f6a:	4841      	ldr	r0, [pc, #260]	; (8016070 <icmp_input+0x200>)
 8015f6c:	f003 fd38 	bl	80199e0 <iprintf>
          pbuf_free(r);
 8015f70:	6978      	ldr	r0, [r7, #20]
 8015f72:	f7f8 f873 	bl	800e05c <pbuf_free>
          goto icmperr;
 8015f76:	e06c      	b.n	8016052 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015f78:	6879      	ldr	r1, [r7, #4]
 8015f7a:	6978      	ldr	r0, [r7, #20]
 8015f7c:	f7f8 f992 	bl	800e2a4 <pbuf_copy>
 8015f80:	4603      	mov	r3, r0
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d003      	beq.n	8015f8e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015f86:	6978      	ldr	r0, [r7, #20]
 8015f88:	f7f8 f868 	bl	800e05c <pbuf_free>
          goto icmperr;
 8015f8c:	e061      	b.n	8016052 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015f8e:	6878      	ldr	r0, [r7, #4]
 8015f90:	f7f8 f864 	bl	800e05c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015f94:	697b      	ldr	r3, [r7, #20]
 8015f96:	607b      	str	r3, [r7, #4]
 8015f98:	e00f      	b.n	8015fba <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015f9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015f9c:	330e      	adds	r3, #14
 8015f9e:	4619      	mov	r1, r3
 8015fa0:	6878      	ldr	r0, [r7, #4]
 8015fa2:	f7f7 ffd5 	bl	800df50 <pbuf_remove_header>
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d006      	beq.n	8015fba <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015fac:	4b2e      	ldr	r3, [pc, #184]	; (8016068 <icmp_input+0x1f8>)
 8015fae:	22c7      	movs	r2, #199	; 0xc7
 8015fb0:	4930      	ldr	r1, [pc, #192]	; (8016074 <icmp_input+0x204>)
 8015fb2:	482f      	ldr	r0, [pc, #188]	; (8016070 <icmp_input+0x200>)
 8015fb4:	f003 fd14 	bl	80199e0 <iprintf>
          goto icmperr;
 8015fb8:	e04b      	b.n	8016052 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	685b      	ldr	r3, [r3, #4]
 8015fbe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015fc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015fc2:	4619      	mov	r1, r3
 8015fc4:	6878      	ldr	r0, [r7, #4]
 8015fc6:	f7f7 ffb3 	bl	800df30 <pbuf_add_header>
 8015fca:	4603      	mov	r3, r0
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d12b      	bne.n	8016028 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	685b      	ldr	r3, [r3, #4]
 8015fd4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015fd6:	69fb      	ldr	r3, [r7, #28]
 8015fd8:	681a      	ldr	r2, [r3, #0]
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015fde:	4b20      	ldr	r3, [pc, #128]	; (8016060 <icmp_input+0x1f0>)
 8015fe0:	691a      	ldr	r2, [r3, #16]
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015fe6:	693b      	ldr	r3, [r7, #16]
 8015fe8:	2200      	movs	r2, #0
 8015fea:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015fec:	693b      	ldr	r3, [r7, #16]
 8015fee:	2200      	movs	r2, #0
 8015ff0:	709a      	strb	r2, [r3, #2]
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	22ff      	movs	r2, #255	; 0xff
 8015ffa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	2200      	movs	r2, #0
 8016000:	729a      	strb	r2, [r3, #10]
 8016002:	2200      	movs	r2, #0
 8016004:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016006:	683b      	ldr	r3, [r7, #0]
 8016008:	9302      	str	r3, [sp, #8]
 801600a:	2301      	movs	r3, #1
 801600c:	9301      	str	r3, [sp, #4]
 801600e:	2300      	movs	r3, #0
 8016010:	9300      	str	r3, [sp, #0]
 8016012:	23ff      	movs	r3, #255	; 0xff
 8016014:	2200      	movs	r2, #0
 8016016:	69f9      	ldr	r1, [r7, #28]
 8016018:	6878      	ldr	r0, [r7, #4]
 801601a:	f000 fa75 	bl	8016508 <ip4_output_if>
 801601e:	4603      	mov	r3, r0
 8016020:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016022:	e001      	b.n	8016028 <icmp_input+0x1b8>
      break;
 8016024:	bf00      	nop
 8016026:	e000      	b.n	801602a <icmp_input+0x1ba>
      break;
 8016028:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801602a:	6878      	ldr	r0, [r7, #4]
 801602c:	f7f8 f816 	bl	800e05c <pbuf_free>
  return;
 8016030:	e013      	b.n	801605a <icmp_input+0x1ea>
    goto lenerr;
 8016032:	bf00      	nop
 8016034:	e002      	b.n	801603c <icmp_input+0x1cc>
    goto lenerr;
 8016036:	bf00      	nop
 8016038:	e000      	b.n	801603c <icmp_input+0x1cc>
        goto lenerr;
 801603a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801603c:	6878      	ldr	r0, [r7, #4]
 801603e:	f7f8 f80d 	bl	800e05c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016042:	e00a      	b.n	801605a <icmp_input+0x1ea>
        goto icmperr;
 8016044:	bf00      	nop
 8016046:	e004      	b.n	8016052 <icmp_input+0x1e2>
        goto icmperr;
 8016048:	bf00      	nop
 801604a:	e002      	b.n	8016052 <icmp_input+0x1e2>
          goto icmperr;
 801604c:	bf00      	nop
 801604e:	e000      	b.n	8016052 <icmp_input+0x1e2>
          goto icmperr;
 8016050:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016052:	6878      	ldr	r0, [r7, #4]
 8016054:	f7f8 f802 	bl	800e05c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016058:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801605a:	3728      	adds	r7, #40	; 0x28
 801605c:	46bd      	mov	sp, r7
 801605e:	bd80      	pop	{r7, pc}
 8016060:	2000a1a4 	.word	0x2000a1a4
 8016064:	2000a1b8 	.word	0x2000a1b8
 8016068:	0801dcd8 	.word	0x0801dcd8
 801606c:	0801dd10 	.word	0x0801dd10
 8016070:	0801dd48 	.word	0x0801dd48
 8016074:	0801dd70 	.word	0x0801dd70

08016078 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b082      	sub	sp, #8
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
 8016080:	460b      	mov	r3, r1
 8016082:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016084:	78fb      	ldrb	r3, [r7, #3]
 8016086:	461a      	mov	r2, r3
 8016088:	2103      	movs	r1, #3
 801608a:	6878      	ldr	r0, [r7, #4]
 801608c:	f000 f814 	bl	80160b8 <icmp_send_response>
}
 8016090:	bf00      	nop
 8016092:	3708      	adds	r7, #8
 8016094:	46bd      	mov	sp, r7
 8016096:	bd80      	pop	{r7, pc}

08016098 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b082      	sub	sp, #8
 801609c:	af00      	add	r7, sp, #0
 801609e:	6078      	str	r0, [r7, #4]
 80160a0:	460b      	mov	r3, r1
 80160a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80160a4:	78fb      	ldrb	r3, [r7, #3]
 80160a6:	461a      	mov	r2, r3
 80160a8:	210b      	movs	r1, #11
 80160aa:	6878      	ldr	r0, [r7, #4]
 80160ac:	f000 f804 	bl	80160b8 <icmp_send_response>
}
 80160b0:	bf00      	nop
 80160b2:	3708      	adds	r7, #8
 80160b4:	46bd      	mov	sp, r7
 80160b6:	bd80      	pop	{r7, pc}

080160b8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	b08c      	sub	sp, #48	; 0x30
 80160bc:	af04      	add	r7, sp, #16
 80160be:	6078      	str	r0, [r7, #4]
 80160c0:	460b      	mov	r3, r1
 80160c2:	70fb      	strb	r3, [r7, #3]
 80160c4:	4613      	mov	r3, r2
 80160c6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80160c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80160cc:	2124      	movs	r1, #36	; 0x24
 80160ce:	2022      	movs	r0, #34	; 0x22
 80160d0:	f7f7 fce0 	bl	800da94 <pbuf_alloc>
 80160d4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80160d6:	69fb      	ldr	r3, [r7, #28]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d04c      	beq.n	8016176 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80160dc:	69fb      	ldr	r3, [r7, #28]
 80160de:	895b      	ldrh	r3, [r3, #10]
 80160e0:	2b23      	cmp	r3, #35	; 0x23
 80160e2:	d806      	bhi.n	80160f2 <icmp_send_response+0x3a>
 80160e4:	4b26      	ldr	r3, [pc, #152]	; (8016180 <icmp_send_response+0xc8>)
 80160e6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80160ea:	4926      	ldr	r1, [pc, #152]	; (8016184 <icmp_send_response+0xcc>)
 80160ec:	4826      	ldr	r0, [pc, #152]	; (8016188 <icmp_send_response+0xd0>)
 80160ee:	f003 fc77 	bl	80199e0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	685b      	ldr	r3, [r3, #4]
 80160f6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80160f8:	69fb      	ldr	r3, [r7, #28]
 80160fa:	685b      	ldr	r3, [r3, #4]
 80160fc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80160fe:	697b      	ldr	r3, [r7, #20]
 8016100:	78fa      	ldrb	r2, [r7, #3]
 8016102:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016104:	697b      	ldr	r3, [r7, #20]
 8016106:	78ba      	ldrb	r2, [r7, #2]
 8016108:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801610a:	697b      	ldr	r3, [r7, #20]
 801610c:	2200      	movs	r2, #0
 801610e:	711a      	strb	r2, [r3, #4]
 8016110:	2200      	movs	r2, #0
 8016112:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016114:	697b      	ldr	r3, [r7, #20]
 8016116:	2200      	movs	r2, #0
 8016118:	719a      	strb	r2, [r3, #6]
 801611a:	2200      	movs	r2, #0
 801611c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801611e:	69fb      	ldr	r3, [r7, #28]
 8016120:	685b      	ldr	r3, [r3, #4]
 8016122:	f103 0008 	add.w	r0, r3, #8
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	685b      	ldr	r3, [r3, #4]
 801612a:	221c      	movs	r2, #28
 801612c:	4619      	mov	r1, r3
 801612e:	f003 fc41 	bl	80199b4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016132:	69bb      	ldr	r3, [r7, #24]
 8016134:	68db      	ldr	r3, [r3, #12]
 8016136:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016138:	f107 030c 	add.w	r3, r7, #12
 801613c:	4618      	mov	r0, r3
 801613e:	f000 f825 	bl	801618c <ip4_route>
 8016142:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016144:	693b      	ldr	r3, [r7, #16]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d011      	beq.n	801616e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801614a:	697b      	ldr	r3, [r7, #20]
 801614c:	2200      	movs	r2, #0
 801614e:	709a      	strb	r2, [r3, #2]
 8016150:	2200      	movs	r2, #0
 8016152:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016154:	f107 020c 	add.w	r2, r7, #12
 8016158:	693b      	ldr	r3, [r7, #16]
 801615a:	9302      	str	r3, [sp, #8]
 801615c:	2301      	movs	r3, #1
 801615e:	9301      	str	r3, [sp, #4]
 8016160:	2300      	movs	r3, #0
 8016162:	9300      	str	r3, [sp, #0]
 8016164:	23ff      	movs	r3, #255	; 0xff
 8016166:	2100      	movs	r1, #0
 8016168:	69f8      	ldr	r0, [r7, #28]
 801616a:	f000 f9cd 	bl	8016508 <ip4_output_if>
  }
  pbuf_free(q);
 801616e:	69f8      	ldr	r0, [r7, #28]
 8016170:	f7f7 ff74 	bl	800e05c <pbuf_free>
 8016174:	e000      	b.n	8016178 <icmp_send_response+0xc0>
    return;
 8016176:	bf00      	nop
}
 8016178:	3720      	adds	r7, #32
 801617a:	46bd      	mov	sp, r7
 801617c:	bd80      	pop	{r7, pc}
 801617e:	bf00      	nop
 8016180:	0801dcd8 	.word	0x0801dcd8
 8016184:	0801dda4 	.word	0x0801dda4
 8016188:	0801dd48 	.word	0x0801dd48

0801618c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801618c:	b480      	push	{r7}
 801618e:	b085      	sub	sp, #20
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016194:	4b33      	ldr	r3, [pc, #204]	; (8016264 <ip4_route+0xd8>)
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	60fb      	str	r3, [r7, #12]
 801619a:	e036      	b.n	801620a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80161a2:	f003 0301 	and.w	r3, r3, #1
 80161a6:	b2db      	uxtb	r3, r3
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d02b      	beq.n	8016204 <ip4_route+0x78>
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80161b2:	089b      	lsrs	r3, r3, #2
 80161b4:	f003 0301 	and.w	r3, r3, #1
 80161b8:	b2db      	uxtb	r3, r3
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d022      	beq.n	8016204 <ip4_route+0x78>
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	3304      	adds	r3, #4
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d01d      	beq.n	8016204 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	681a      	ldr	r2, [r3, #0]
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	3304      	adds	r3, #4
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	405a      	eors	r2, r3
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	3308      	adds	r3, #8
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	4013      	ands	r3, r2
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d101      	bne.n	80161e4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	e038      	b.n	8016256 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80161ea:	f003 0302 	and.w	r3, r3, #2
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d108      	bne.n	8016204 <ip4_route+0x78>
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	681a      	ldr	r2, [r3, #0]
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	330c      	adds	r3, #12
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	429a      	cmp	r2, r3
 80161fe:	d101      	bne.n	8016204 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	e028      	b.n	8016256 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	60fb      	str	r3, [r7, #12]
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d1c5      	bne.n	801619c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016210:	4b15      	ldr	r3, [pc, #84]	; (8016268 <ip4_route+0xdc>)
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d01a      	beq.n	801624e <ip4_route+0xc2>
 8016218:	4b13      	ldr	r3, [pc, #76]	; (8016268 <ip4_route+0xdc>)
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016220:	f003 0301 	and.w	r3, r3, #1
 8016224:	2b00      	cmp	r3, #0
 8016226:	d012      	beq.n	801624e <ip4_route+0xc2>
 8016228:	4b0f      	ldr	r3, [pc, #60]	; (8016268 <ip4_route+0xdc>)
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016230:	f003 0304 	and.w	r3, r3, #4
 8016234:	2b00      	cmp	r3, #0
 8016236:	d00a      	beq.n	801624e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016238:	4b0b      	ldr	r3, [pc, #44]	; (8016268 <ip4_route+0xdc>)
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	3304      	adds	r3, #4
 801623e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016240:	2b00      	cmp	r3, #0
 8016242:	d004      	beq.n	801624e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	b2db      	uxtb	r3, r3
 801624a:	2b7f      	cmp	r3, #127	; 0x7f
 801624c:	d101      	bne.n	8016252 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801624e:	2300      	movs	r3, #0
 8016250:	e001      	b.n	8016256 <ip4_route+0xca>
  }

  return netif_default;
 8016252:	4b05      	ldr	r3, [pc, #20]	; (8016268 <ip4_route+0xdc>)
 8016254:	681b      	ldr	r3, [r3, #0]
}
 8016256:	4618      	mov	r0, r3
 8016258:	3714      	adds	r7, #20
 801625a:	46bd      	mov	sp, r7
 801625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016260:	4770      	bx	lr
 8016262:	bf00      	nop
 8016264:	20011294 	.word	0x20011294
 8016268:	20011298 	.word	0x20011298

0801626c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801626c:	b580      	push	{r7, lr}
 801626e:	b082      	sub	sp, #8
 8016270:	af00      	add	r7, sp, #0
 8016272:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801627a:	f003 0301 	and.w	r3, r3, #1
 801627e:	b2db      	uxtb	r3, r3
 8016280:	2b00      	cmp	r3, #0
 8016282:	d016      	beq.n	80162b2 <ip4_input_accept+0x46>
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	3304      	adds	r3, #4
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d011      	beq.n	80162b2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801628e:	4b0b      	ldr	r3, [pc, #44]	; (80162bc <ip4_input_accept+0x50>)
 8016290:	695a      	ldr	r2, [r3, #20]
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	3304      	adds	r3, #4
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	429a      	cmp	r2, r3
 801629a:	d008      	beq.n	80162ae <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801629c:	4b07      	ldr	r3, [pc, #28]	; (80162bc <ip4_input_accept+0x50>)
 801629e:	695b      	ldr	r3, [r3, #20]
 80162a0:	6879      	ldr	r1, [r7, #4]
 80162a2:	4618      	mov	r0, r3
 80162a4:	f000 fa08 	bl	80166b8 <ip4_addr_isbroadcast_u32>
 80162a8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d001      	beq.n	80162b2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80162ae:	2301      	movs	r3, #1
 80162b0:	e000      	b.n	80162b4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80162b2:	2300      	movs	r3, #0
}
 80162b4:	4618      	mov	r0, r3
 80162b6:	3708      	adds	r7, #8
 80162b8:	46bd      	mov	sp, r7
 80162ba:	bd80      	pop	{r7, pc}
 80162bc:	2000a1a4 	.word	0x2000a1a4

080162c0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80162c0:	b580      	push	{r7, lr}
 80162c2:	b086      	sub	sp, #24
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	6078      	str	r0, [r7, #4]
 80162c8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	685b      	ldr	r3, [r3, #4]
 80162ce:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80162d0:	697b      	ldr	r3, [r7, #20]
 80162d2:	781b      	ldrb	r3, [r3, #0]
 80162d4:	091b      	lsrs	r3, r3, #4
 80162d6:	b2db      	uxtb	r3, r3
 80162d8:	2b04      	cmp	r3, #4
 80162da:	d004      	beq.n	80162e6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80162dc:	6878      	ldr	r0, [r7, #4]
 80162de:	f7f7 febd 	bl	800e05c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80162e2:	2300      	movs	r3, #0
 80162e4:	e107      	b.n	80164f6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80162e6:	697b      	ldr	r3, [r7, #20]
 80162e8:	781b      	ldrb	r3, [r3, #0]
 80162ea:	f003 030f 	and.w	r3, r3, #15
 80162ee:	b2db      	uxtb	r3, r3
 80162f0:	009b      	lsls	r3, r3, #2
 80162f2:	b2db      	uxtb	r3, r3
 80162f4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80162f6:	697b      	ldr	r3, [r7, #20]
 80162f8:	885b      	ldrh	r3, [r3, #2]
 80162fa:	b29b      	uxth	r3, r3
 80162fc:	4618      	mov	r0, r3
 80162fe:	f7f6 faab 	bl	800c858 <lwip_htons>
 8016302:	4603      	mov	r3, r0
 8016304:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	891b      	ldrh	r3, [r3, #8]
 801630a:	89ba      	ldrh	r2, [r7, #12]
 801630c:	429a      	cmp	r2, r3
 801630e:	d204      	bcs.n	801631a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016310:	89bb      	ldrh	r3, [r7, #12]
 8016312:	4619      	mov	r1, r3
 8016314:	6878      	ldr	r0, [r7, #4]
 8016316:	f7f7 fd1b 	bl	800dd50 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	895b      	ldrh	r3, [r3, #10]
 801631e:	89fa      	ldrh	r2, [r7, #14]
 8016320:	429a      	cmp	r2, r3
 8016322:	d807      	bhi.n	8016334 <ip4_input+0x74>
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	891b      	ldrh	r3, [r3, #8]
 8016328:	89ba      	ldrh	r2, [r7, #12]
 801632a:	429a      	cmp	r2, r3
 801632c:	d802      	bhi.n	8016334 <ip4_input+0x74>
 801632e:	89fb      	ldrh	r3, [r7, #14]
 8016330:	2b13      	cmp	r3, #19
 8016332:	d804      	bhi.n	801633e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016334:	6878      	ldr	r0, [r7, #4]
 8016336:	f7f7 fe91 	bl	800e05c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801633a:	2300      	movs	r3, #0
 801633c:	e0db      	b.n	80164f6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801633e:	697b      	ldr	r3, [r7, #20]
 8016340:	691b      	ldr	r3, [r3, #16]
 8016342:	4a6f      	ldr	r2, [pc, #444]	; (8016500 <ip4_input+0x240>)
 8016344:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016346:	697b      	ldr	r3, [r7, #20]
 8016348:	68db      	ldr	r3, [r3, #12]
 801634a:	4a6d      	ldr	r2, [pc, #436]	; (8016500 <ip4_input+0x240>)
 801634c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801634e:	4b6c      	ldr	r3, [pc, #432]	; (8016500 <ip4_input+0x240>)
 8016350:	695b      	ldr	r3, [r3, #20]
 8016352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016356:	2be0      	cmp	r3, #224	; 0xe0
 8016358:	d112      	bne.n	8016380 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801635a:	683b      	ldr	r3, [r7, #0]
 801635c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016360:	f003 0301 	and.w	r3, r3, #1
 8016364:	b2db      	uxtb	r3, r3
 8016366:	2b00      	cmp	r3, #0
 8016368:	d007      	beq.n	801637a <ip4_input+0xba>
 801636a:	683b      	ldr	r3, [r7, #0]
 801636c:	3304      	adds	r3, #4
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d002      	beq.n	801637a <ip4_input+0xba>
      netif = inp;
 8016374:	683b      	ldr	r3, [r7, #0]
 8016376:	613b      	str	r3, [r7, #16]
 8016378:	e02a      	b.n	80163d0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801637a:	2300      	movs	r3, #0
 801637c:	613b      	str	r3, [r7, #16]
 801637e:	e027      	b.n	80163d0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016380:	6838      	ldr	r0, [r7, #0]
 8016382:	f7ff ff73 	bl	801626c <ip4_input_accept>
 8016386:	4603      	mov	r3, r0
 8016388:	2b00      	cmp	r3, #0
 801638a:	d002      	beq.n	8016392 <ip4_input+0xd2>
      netif = inp;
 801638c:	683b      	ldr	r3, [r7, #0]
 801638e:	613b      	str	r3, [r7, #16]
 8016390:	e01e      	b.n	80163d0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016392:	2300      	movs	r3, #0
 8016394:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016396:	4b5a      	ldr	r3, [pc, #360]	; (8016500 <ip4_input+0x240>)
 8016398:	695b      	ldr	r3, [r3, #20]
 801639a:	b2db      	uxtb	r3, r3
 801639c:	2b7f      	cmp	r3, #127	; 0x7f
 801639e:	d017      	beq.n	80163d0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80163a0:	4b58      	ldr	r3, [pc, #352]	; (8016504 <ip4_input+0x244>)
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	613b      	str	r3, [r7, #16]
 80163a6:	e00e      	b.n	80163c6 <ip4_input+0x106>
          if (netif == inp) {
 80163a8:	693a      	ldr	r2, [r7, #16]
 80163aa:	683b      	ldr	r3, [r7, #0]
 80163ac:	429a      	cmp	r2, r3
 80163ae:	d006      	beq.n	80163be <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80163b0:	6938      	ldr	r0, [r7, #16]
 80163b2:	f7ff ff5b 	bl	801626c <ip4_input_accept>
 80163b6:	4603      	mov	r3, r0
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d108      	bne.n	80163ce <ip4_input+0x10e>
 80163bc:	e000      	b.n	80163c0 <ip4_input+0x100>
            continue;
 80163be:	bf00      	nop
        NETIF_FOREACH(netif) {
 80163c0:	693b      	ldr	r3, [r7, #16]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	613b      	str	r3, [r7, #16]
 80163c6:	693b      	ldr	r3, [r7, #16]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d1ed      	bne.n	80163a8 <ip4_input+0xe8>
 80163cc:	e000      	b.n	80163d0 <ip4_input+0x110>
            break;
 80163ce:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80163d0:	4b4b      	ldr	r3, [pc, #300]	; (8016500 <ip4_input+0x240>)
 80163d2:	691b      	ldr	r3, [r3, #16]
 80163d4:	6839      	ldr	r1, [r7, #0]
 80163d6:	4618      	mov	r0, r3
 80163d8:	f000 f96e 	bl	80166b8 <ip4_addr_isbroadcast_u32>
 80163dc:	4603      	mov	r3, r0
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d105      	bne.n	80163ee <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80163e2:	4b47      	ldr	r3, [pc, #284]	; (8016500 <ip4_input+0x240>)
 80163e4:	691b      	ldr	r3, [r3, #16]
 80163e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80163ea:	2be0      	cmp	r3, #224	; 0xe0
 80163ec:	d104      	bne.n	80163f8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80163ee:	6878      	ldr	r0, [r7, #4]
 80163f0:	f7f7 fe34 	bl	800e05c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80163f4:	2300      	movs	r3, #0
 80163f6:	e07e      	b.n	80164f6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80163f8:	693b      	ldr	r3, [r7, #16]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d104      	bne.n	8016408 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80163fe:	6878      	ldr	r0, [r7, #4]
 8016400:	f7f7 fe2c 	bl	800e05c <pbuf_free>
    return ERR_OK;
 8016404:	2300      	movs	r3, #0
 8016406:	e076      	b.n	80164f6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016408:	697b      	ldr	r3, [r7, #20]
 801640a:	88db      	ldrh	r3, [r3, #6]
 801640c:	b29b      	uxth	r3, r3
 801640e:	461a      	mov	r2, r3
 8016410:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016414:	4013      	ands	r3, r2
 8016416:	2b00      	cmp	r3, #0
 8016418:	d00b      	beq.n	8016432 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801641a:	6878      	ldr	r0, [r7, #4]
 801641c:	f000 fdbc 	bl	8016f98 <ip4_reass>
 8016420:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d101      	bne.n	801642c <ip4_input+0x16c>
      return ERR_OK;
 8016428:	2300      	movs	r3, #0
 801642a:	e064      	b.n	80164f6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	685b      	ldr	r3, [r3, #4]
 8016430:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016432:	4a33      	ldr	r2, [pc, #204]	; (8016500 <ip4_input+0x240>)
 8016434:	693b      	ldr	r3, [r7, #16]
 8016436:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016438:	4a31      	ldr	r2, [pc, #196]	; (8016500 <ip4_input+0x240>)
 801643a:	683b      	ldr	r3, [r7, #0]
 801643c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801643e:	4a30      	ldr	r2, [pc, #192]	; (8016500 <ip4_input+0x240>)
 8016440:	697b      	ldr	r3, [r7, #20]
 8016442:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016444:	697b      	ldr	r3, [r7, #20]
 8016446:	781b      	ldrb	r3, [r3, #0]
 8016448:	f003 030f 	and.w	r3, r3, #15
 801644c:	b2db      	uxtb	r3, r3
 801644e:	009b      	lsls	r3, r3, #2
 8016450:	b2db      	uxtb	r3, r3
 8016452:	b29a      	uxth	r2, r3
 8016454:	4b2a      	ldr	r3, [pc, #168]	; (8016500 <ip4_input+0x240>)
 8016456:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016458:	89fb      	ldrh	r3, [r7, #14]
 801645a:	4619      	mov	r1, r3
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	f7f7 fd77 	bl	800df50 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016462:	697b      	ldr	r3, [r7, #20]
 8016464:	7a5b      	ldrb	r3, [r3, #9]
 8016466:	2b11      	cmp	r3, #17
 8016468:	d006      	beq.n	8016478 <ip4_input+0x1b8>
 801646a:	2b11      	cmp	r3, #17
 801646c:	dc13      	bgt.n	8016496 <ip4_input+0x1d6>
 801646e:	2b01      	cmp	r3, #1
 8016470:	d00c      	beq.n	801648c <ip4_input+0x1cc>
 8016472:	2b06      	cmp	r3, #6
 8016474:	d005      	beq.n	8016482 <ip4_input+0x1c2>
 8016476:	e00e      	b.n	8016496 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016478:	6839      	ldr	r1, [r7, #0]
 801647a:	6878      	ldr	r0, [r7, #4]
 801647c:	f7fe faec 	bl	8014a58 <udp_input>
        break;
 8016480:	e026      	b.n	80164d0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016482:	6839      	ldr	r1, [r7, #0]
 8016484:	6878      	ldr	r0, [r7, #4]
 8016486:	f7f9 fea5 	bl	80101d4 <tcp_input>
        break;
 801648a:	e021      	b.n	80164d0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801648c:	6839      	ldr	r1, [r7, #0]
 801648e:	6878      	ldr	r0, [r7, #4]
 8016490:	f7ff fcee 	bl	8015e70 <icmp_input>
        break;
 8016494:	e01c      	b.n	80164d0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016496:	4b1a      	ldr	r3, [pc, #104]	; (8016500 <ip4_input+0x240>)
 8016498:	695b      	ldr	r3, [r3, #20]
 801649a:	6939      	ldr	r1, [r7, #16]
 801649c:	4618      	mov	r0, r3
 801649e:	f000 f90b 	bl	80166b8 <ip4_addr_isbroadcast_u32>
 80164a2:	4603      	mov	r3, r0
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d10f      	bne.n	80164c8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80164a8:	4b15      	ldr	r3, [pc, #84]	; (8016500 <ip4_input+0x240>)
 80164aa:	695b      	ldr	r3, [r3, #20]
 80164ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80164b0:	2be0      	cmp	r3, #224	; 0xe0
 80164b2:	d009      	beq.n	80164c8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80164b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80164b8:	4619      	mov	r1, r3
 80164ba:	6878      	ldr	r0, [r7, #4]
 80164bc:	f7f7 fdbb 	bl	800e036 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80164c0:	2102      	movs	r1, #2
 80164c2:	6878      	ldr	r0, [r7, #4]
 80164c4:	f7ff fdd8 	bl	8016078 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80164c8:	6878      	ldr	r0, [r7, #4]
 80164ca:	f7f7 fdc7 	bl	800e05c <pbuf_free>
        break;
 80164ce:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80164d0:	4b0b      	ldr	r3, [pc, #44]	; (8016500 <ip4_input+0x240>)
 80164d2:	2200      	movs	r2, #0
 80164d4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80164d6:	4b0a      	ldr	r3, [pc, #40]	; (8016500 <ip4_input+0x240>)
 80164d8:	2200      	movs	r2, #0
 80164da:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80164dc:	4b08      	ldr	r3, [pc, #32]	; (8016500 <ip4_input+0x240>)
 80164de:	2200      	movs	r2, #0
 80164e0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80164e2:	4b07      	ldr	r3, [pc, #28]	; (8016500 <ip4_input+0x240>)
 80164e4:	2200      	movs	r2, #0
 80164e6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80164e8:	4b05      	ldr	r3, [pc, #20]	; (8016500 <ip4_input+0x240>)
 80164ea:	2200      	movs	r2, #0
 80164ec:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80164ee:	4b04      	ldr	r3, [pc, #16]	; (8016500 <ip4_input+0x240>)
 80164f0:	2200      	movs	r2, #0
 80164f2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80164f4:	2300      	movs	r3, #0
}
 80164f6:	4618      	mov	r0, r3
 80164f8:	3718      	adds	r7, #24
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}
 80164fe:	bf00      	nop
 8016500:	2000a1a4 	.word	0x2000a1a4
 8016504:	20011294 	.word	0x20011294

08016508 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b08a      	sub	sp, #40	; 0x28
 801650c:	af04      	add	r7, sp, #16
 801650e:	60f8      	str	r0, [r7, #12]
 8016510:	60b9      	str	r1, [r7, #8]
 8016512:	607a      	str	r2, [r7, #4]
 8016514:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016516:	68bb      	ldr	r3, [r7, #8]
 8016518:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d009      	beq.n	8016534 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016520:	68bb      	ldr	r3, [r7, #8]
 8016522:	2b00      	cmp	r3, #0
 8016524:	d003      	beq.n	801652e <ip4_output_if+0x26>
 8016526:	68bb      	ldr	r3, [r7, #8]
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d102      	bne.n	8016534 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016530:	3304      	adds	r3, #4
 8016532:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016534:	78fa      	ldrb	r2, [r7, #3]
 8016536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016538:	9302      	str	r3, [sp, #8]
 801653a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801653e:	9301      	str	r3, [sp, #4]
 8016540:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016544:	9300      	str	r3, [sp, #0]
 8016546:	4613      	mov	r3, r2
 8016548:	687a      	ldr	r2, [r7, #4]
 801654a:	6979      	ldr	r1, [r7, #20]
 801654c:	68f8      	ldr	r0, [r7, #12]
 801654e:	f000 f805 	bl	801655c <ip4_output_if_src>
 8016552:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016554:	4618      	mov	r0, r3
 8016556:	3718      	adds	r7, #24
 8016558:	46bd      	mov	sp, r7
 801655a:	bd80      	pop	{r7, pc}

0801655c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b088      	sub	sp, #32
 8016560:	af00      	add	r7, sp, #0
 8016562:	60f8      	str	r0, [r7, #12]
 8016564:	60b9      	str	r1, [r7, #8]
 8016566:	607a      	str	r2, [r7, #4]
 8016568:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	7b9b      	ldrb	r3, [r3, #14]
 801656e:	2b01      	cmp	r3, #1
 8016570:	d006      	beq.n	8016580 <ip4_output_if_src+0x24>
 8016572:	4b4b      	ldr	r3, [pc, #300]	; (80166a0 <ip4_output_if_src+0x144>)
 8016574:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016578:	494a      	ldr	r1, [pc, #296]	; (80166a4 <ip4_output_if_src+0x148>)
 801657a:	484b      	ldr	r0, [pc, #300]	; (80166a8 <ip4_output_if_src+0x14c>)
 801657c:	f003 fa30 	bl	80199e0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d060      	beq.n	8016648 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016586:	2314      	movs	r3, #20
 8016588:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801658a:	2114      	movs	r1, #20
 801658c:	68f8      	ldr	r0, [r7, #12]
 801658e:	f7f7 fccf 	bl	800df30 <pbuf_add_header>
 8016592:	4603      	mov	r3, r0
 8016594:	2b00      	cmp	r3, #0
 8016596:	d002      	beq.n	801659e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016598:	f06f 0301 	mvn.w	r3, #1
 801659c:	e07c      	b.n	8016698 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	685b      	ldr	r3, [r3, #4]
 80165a2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	895b      	ldrh	r3, [r3, #10]
 80165a8:	2b13      	cmp	r3, #19
 80165aa:	d806      	bhi.n	80165ba <ip4_output_if_src+0x5e>
 80165ac:	4b3c      	ldr	r3, [pc, #240]	; (80166a0 <ip4_output_if_src+0x144>)
 80165ae:	f44f 7262 	mov.w	r2, #904	; 0x388
 80165b2:	493e      	ldr	r1, [pc, #248]	; (80166ac <ip4_output_if_src+0x150>)
 80165b4:	483c      	ldr	r0, [pc, #240]	; (80166a8 <ip4_output_if_src+0x14c>)
 80165b6:	f003 fa13 	bl	80199e0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80165ba:	69fb      	ldr	r3, [r7, #28]
 80165bc:	78fa      	ldrb	r2, [r7, #3]
 80165be:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80165c0:	69fb      	ldr	r3, [r7, #28]
 80165c2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80165c6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	681a      	ldr	r2, [r3, #0]
 80165cc:	69fb      	ldr	r3, [r7, #28]
 80165ce:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80165d0:	8b7b      	ldrh	r3, [r7, #26]
 80165d2:	089b      	lsrs	r3, r3, #2
 80165d4:	b29b      	uxth	r3, r3
 80165d6:	b2db      	uxtb	r3, r3
 80165d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165dc:	b2da      	uxtb	r2, r3
 80165de:	69fb      	ldr	r3, [r7, #28]
 80165e0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80165e2:	69fb      	ldr	r3, [r7, #28]
 80165e4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80165e8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	891b      	ldrh	r3, [r3, #8]
 80165ee:	4618      	mov	r0, r3
 80165f0:	f7f6 f932 	bl	800c858 <lwip_htons>
 80165f4:	4603      	mov	r3, r0
 80165f6:	461a      	mov	r2, r3
 80165f8:	69fb      	ldr	r3, [r7, #28]
 80165fa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80165fc:	69fb      	ldr	r3, [r7, #28]
 80165fe:	2200      	movs	r2, #0
 8016600:	719a      	strb	r2, [r3, #6]
 8016602:	2200      	movs	r2, #0
 8016604:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016606:	4b2a      	ldr	r3, [pc, #168]	; (80166b0 <ip4_output_if_src+0x154>)
 8016608:	881b      	ldrh	r3, [r3, #0]
 801660a:	4618      	mov	r0, r3
 801660c:	f7f6 f924 	bl	800c858 <lwip_htons>
 8016610:	4603      	mov	r3, r0
 8016612:	461a      	mov	r2, r3
 8016614:	69fb      	ldr	r3, [r7, #28]
 8016616:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016618:	4b25      	ldr	r3, [pc, #148]	; (80166b0 <ip4_output_if_src+0x154>)
 801661a:	881b      	ldrh	r3, [r3, #0]
 801661c:	3301      	adds	r3, #1
 801661e:	b29a      	uxth	r2, r3
 8016620:	4b23      	ldr	r3, [pc, #140]	; (80166b0 <ip4_output_if_src+0x154>)
 8016622:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016624:	68bb      	ldr	r3, [r7, #8]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d104      	bne.n	8016634 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801662a:	4b22      	ldr	r3, [pc, #136]	; (80166b4 <ip4_output_if_src+0x158>)
 801662c:	681a      	ldr	r2, [r3, #0]
 801662e:	69fb      	ldr	r3, [r7, #28]
 8016630:	60da      	str	r2, [r3, #12]
 8016632:	e003      	b.n	801663c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016634:	68bb      	ldr	r3, [r7, #8]
 8016636:	681a      	ldr	r2, [r3, #0]
 8016638:	69fb      	ldr	r3, [r7, #28]
 801663a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801663c:	69fb      	ldr	r3, [r7, #28]
 801663e:	2200      	movs	r2, #0
 8016640:	729a      	strb	r2, [r3, #10]
 8016642:	2200      	movs	r2, #0
 8016644:	72da      	strb	r2, [r3, #11]
 8016646:	e00f      	b.n	8016668 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	895b      	ldrh	r3, [r3, #10]
 801664c:	2b13      	cmp	r3, #19
 801664e:	d802      	bhi.n	8016656 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016650:	f06f 0301 	mvn.w	r3, #1
 8016654:	e020      	b.n	8016698 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	685b      	ldr	r3, [r3, #4]
 801665a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801665c:	69fb      	ldr	r3, [r7, #28]
 801665e:	691b      	ldr	r3, [r3, #16]
 8016660:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016662:	f107 0314 	add.w	r3, r7, #20
 8016666:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801666a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801666c:	2b00      	cmp	r3, #0
 801666e:	d00c      	beq.n	801668a <ip4_output_if_src+0x12e>
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	891a      	ldrh	r2, [r3, #8]
 8016674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016676:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016678:	429a      	cmp	r2, r3
 801667a:	d906      	bls.n	801668a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801667c:	687a      	ldr	r2, [r7, #4]
 801667e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016680:	68f8      	ldr	r0, [r7, #12]
 8016682:	f000 fe7d 	bl	8017380 <ip4_frag>
 8016686:	4603      	mov	r3, r0
 8016688:	e006      	b.n	8016698 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801668c:	695b      	ldr	r3, [r3, #20]
 801668e:	687a      	ldr	r2, [r7, #4]
 8016690:	68f9      	ldr	r1, [r7, #12]
 8016692:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016694:	4798      	blx	r3
 8016696:	4603      	mov	r3, r0
}
 8016698:	4618      	mov	r0, r3
 801669a:	3720      	adds	r7, #32
 801669c:	46bd      	mov	sp, r7
 801669e:	bd80      	pop	{r7, pc}
 80166a0:	0801ddd0 	.word	0x0801ddd0
 80166a4:	0801de04 	.word	0x0801de04
 80166a8:	0801de10 	.word	0x0801de10
 80166ac:	0801de38 	.word	0x0801de38
 80166b0:	200113f2 	.word	0x200113f2
 80166b4:	0801e334 	.word	0x0801e334

080166b8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80166b8:	b480      	push	{r7}
 80166ba:	b085      	sub	sp, #20
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
 80166c0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80166cc:	d002      	beq.n	80166d4 <ip4_addr_isbroadcast_u32+0x1c>
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d101      	bne.n	80166d8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80166d4:	2301      	movs	r3, #1
 80166d6:	e02a      	b.n	801672e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80166d8:	683b      	ldr	r3, [r7, #0]
 80166da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80166de:	f003 0302 	and.w	r3, r3, #2
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d101      	bne.n	80166ea <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80166e6:	2300      	movs	r3, #0
 80166e8:	e021      	b.n	801672e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	3304      	adds	r3, #4
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	687a      	ldr	r2, [r7, #4]
 80166f2:	429a      	cmp	r2, r3
 80166f4:	d101      	bne.n	80166fa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80166f6:	2300      	movs	r3, #0
 80166f8:	e019      	b.n	801672e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80166fa:	68fa      	ldr	r2, [r7, #12]
 80166fc:	683b      	ldr	r3, [r7, #0]
 80166fe:	3304      	adds	r3, #4
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	405a      	eors	r2, r3
 8016704:	683b      	ldr	r3, [r7, #0]
 8016706:	3308      	adds	r3, #8
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	4013      	ands	r3, r2
 801670c:	2b00      	cmp	r3, #0
 801670e:	d10d      	bne.n	801672c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016710:	683b      	ldr	r3, [r7, #0]
 8016712:	3308      	adds	r3, #8
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	43da      	mvns	r2, r3
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801671c:	683b      	ldr	r3, [r7, #0]
 801671e:	3308      	adds	r3, #8
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016724:	429a      	cmp	r2, r3
 8016726:	d101      	bne.n	801672c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016728:	2301      	movs	r3, #1
 801672a:	e000      	b.n	801672e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801672c:	2300      	movs	r3, #0
  }
}
 801672e:	4618      	mov	r0, r3
 8016730:	3714      	adds	r7, #20
 8016732:	46bd      	mov	sp, r7
 8016734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016738:	4770      	bx	lr
	...

0801673c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801673c:	b580      	push	{r7, lr}
 801673e:	b08a      	sub	sp, #40	; 0x28
 8016740:	af00      	add	r7, sp, #0
 8016742:	6078      	str	r0, [r7, #4]
 8016744:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8016746:	f107 030c 	add.w	r3, r7, #12
 801674a:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	781b      	ldrb	r3, [r3, #0]
 8016750:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8016754:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016758:	3301      	adds	r3, #1
 801675a:	4a89      	ldr	r2, [pc, #548]	; (8016980 <ip4addr_aton+0x244>)
 801675c:	4413      	add	r3, r2
 801675e:	781b      	ldrb	r3, [r3, #0]
 8016760:	f003 0304 	and.w	r3, r3, #4
 8016764:	2b00      	cmp	r3, #0
 8016766:	d101      	bne.n	801676c <ip4addr_aton+0x30>
      return 0;
 8016768:	2300      	movs	r3, #0
 801676a:	e105      	b.n	8016978 <ip4addr_aton+0x23c>
    }
    val = 0;
 801676c:	2300      	movs	r3, #0
 801676e:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8016770:	230a      	movs	r3, #10
 8016772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8016776:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801677a:	2b30      	cmp	r3, #48	; 0x30
 801677c:	d11c      	bne.n	80167b8 <ip4addr_aton+0x7c>
      c = *++cp;
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	3301      	adds	r3, #1
 8016782:	607b      	str	r3, [r7, #4]
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	781b      	ldrb	r3, [r3, #0]
 8016788:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801678c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016790:	2b78      	cmp	r3, #120	; 0x78
 8016792:	d003      	beq.n	801679c <ip4addr_aton+0x60>
 8016794:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016798:	2b58      	cmp	r3, #88	; 0x58
 801679a:	d10a      	bne.n	80167b2 <ip4addr_aton+0x76>
        base = 16;
 801679c:	2310      	movs	r3, #16
 801679e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	3301      	adds	r3, #1
 80167a6:	607b      	str	r3, [r7, #4]
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	781b      	ldrb	r3, [r3, #0]
 80167ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80167b0:	e002      	b.n	80167b8 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 80167b2:	2308      	movs	r3, #8
 80167b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 80167b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80167bc:	3301      	adds	r3, #1
 80167be:	4a70      	ldr	r2, [pc, #448]	; (8016980 <ip4addr_aton+0x244>)
 80167c0:	4413      	add	r3, r2
 80167c2:	781b      	ldrb	r3, [r3, #0]
 80167c4:	f003 0304 	and.w	r3, r3, #4
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d011      	beq.n	80167f0 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 80167cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80167d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80167d2:	fb03 f202 	mul.w	r2, r3, r2
 80167d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80167da:	4413      	add	r3, r2
 80167dc:	3b30      	subs	r3, #48	; 0x30
 80167de:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	3301      	adds	r3, #1
 80167e4:	607b      	str	r3, [r7, #4]
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	781b      	ldrb	r3, [r3, #0]
 80167ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80167ee:	e7e3      	b.n	80167b8 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 80167f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80167f4:	2b10      	cmp	r3, #16
 80167f6:	d127      	bne.n	8016848 <ip4addr_aton+0x10c>
 80167f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80167fc:	3301      	adds	r3, #1
 80167fe:	4a60      	ldr	r2, [pc, #384]	; (8016980 <ip4addr_aton+0x244>)
 8016800:	4413      	add	r3, r2
 8016802:	781b      	ldrb	r3, [r3, #0]
 8016804:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016808:	2b00      	cmp	r3, #0
 801680a:	d01d      	beq.n	8016848 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801680e:	011b      	lsls	r3, r3, #4
 8016810:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016814:	f102 010a 	add.w	r1, r2, #10
 8016818:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801681c:	3201      	adds	r2, #1
 801681e:	4858      	ldr	r0, [pc, #352]	; (8016980 <ip4addr_aton+0x244>)
 8016820:	4402      	add	r2, r0
 8016822:	7812      	ldrb	r2, [r2, #0]
 8016824:	f002 0203 	and.w	r2, r2, #3
 8016828:	2a02      	cmp	r2, #2
 801682a:	d101      	bne.n	8016830 <ip4addr_aton+0xf4>
 801682c:	2261      	movs	r2, #97	; 0x61
 801682e:	e000      	b.n	8016832 <ip4addr_aton+0xf6>
 8016830:	2241      	movs	r2, #65	; 0x41
 8016832:	1a8a      	subs	r2, r1, r2
 8016834:	4313      	orrs	r3, r2
 8016836:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	3301      	adds	r3, #1
 801683c:	607b      	str	r3, [r7, #4]
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	781b      	ldrb	r3, [r3, #0]
 8016842:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8016846:	e7b7      	b.n	80167b8 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8016848:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801684c:	2b2e      	cmp	r3, #46	; 0x2e
 801684e:	d114      	bne.n	801687a <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8016850:	f107 030c 	add.w	r3, r7, #12
 8016854:	330c      	adds	r3, #12
 8016856:	69fa      	ldr	r2, [r7, #28]
 8016858:	429a      	cmp	r2, r3
 801685a:	d301      	bcc.n	8016860 <ip4addr_aton+0x124>
        return 0;
 801685c:	2300      	movs	r3, #0
 801685e:	e08b      	b.n	8016978 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8016860:	69fb      	ldr	r3, [r7, #28]
 8016862:	1d1a      	adds	r2, r3, #4
 8016864:	61fa      	str	r2, [r7, #28]
 8016866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016868:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	3301      	adds	r3, #1
 801686e:	607b      	str	r3, [r7, #4]
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	781b      	ldrb	r3, [r3, #0]
 8016874:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8016878:	e76c      	b.n	8016754 <ip4addr_aton+0x18>
    } else {
      break;
 801687a:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801687c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016880:	2b00      	cmp	r3, #0
 8016882:	d00b      	beq.n	801689c <ip4addr_aton+0x160>
 8016884:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016888:	3301      	adds	r3, #1
 801688a:	4a3d      	ldr	r2, [pc, #244]	; (8016980 <ip4addr_aton+0x244>)
 801688c:	4413      	add	r3, r2
 801688e:	781b      	ldrb	r3, [r3, #0]
 8016890:	f003 0308 	and.w	r3, r3, #8
 8016894:	2b00      	cmp	r3, #0
 8016896:	d101      	bne.n	801689c <ip4addr_aton+0x160>
    return 0;
 8016898:	2300      	movs	r3, #0
 801689a:	e06d      	b.n	8016978 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801689c:	f107 030c 	add.w	r3, r7, #12
 80168a0:	69fa      	ldr	r2, [r7, #28]
 80168a2:	1ad3      	subs	r3, r2, r3
 80168a4:	109b      	asrs	r3, r3, #2
 80168a6:	3301      	adds	r3, #1
 80168a8:	2b04      	cmp	r3, #4
 80168aa:	d853      	bhi.n	8016954 <ip4addr_aton+0x218>
 80168ac:	a201      	add	r2, pc, #4	; (adr r2, 80168b4 <ip4addr_aton+0x178>)
 80168ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168b2:	bf00      	nop
 80168b4:	080168c9 	.word	0x080168c9
 80168b8:	08016963 	.word	0x08016963
 80168bc:	080168cd 	.word	0x080168cd
 80168c0:	080168ef 	.word	0x080168ef
 80168c4:	0801691d 	.word	0x0801691d

    case 0:
      return 0;       /* initial nondigit */
 80168c8:	2300      	movs	r3, #0
 80168ca:	e055      	b.n	8016978 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 80168cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80168d2:	d301      	bcc.n	80168d8 <ip4addr_aton+0x19c>
        return 0;
 80168d4:	2300      	movs	r3, #0
 80168d6:	e04f      	b.n	8016978 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	2bff      	cmp	r3, #255	; 0xff
 80168dc:	d901      	bls.n	80168e2 <ip4addr_aton+0x1a6>
        return 0;
 80168de:	2300      	movs	r3, #0
 80168e0:	e04a      	b.n	8016978 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	061b      	lsls	r3, r3, #24
 80168e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80168e8:	4313      	orrs	r3, r2
 80168ea:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80168ec:	e03a      	b.n	8016964 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 80168ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80168f4:	d301      	bcc.n	80168fa <ip4addr_aton+0x1be>
        return 0;
 80168f6:	2300      	movs	r3, #0
 80168f8:	e03e      	b.n	8016978 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	2bff      	cmp	r3, #255	; 0xff
 80168fe:	d802      	bhi.n	8016906 <ip4addr_aton+0x1ca>
 8016900:	693b      	ldr	r3, [r7, #16]
 8016902:	2bff      	cmp	r3, #255	; 0xff
 8016904:	d901      	bls.n	801690a <ip4addr_aton+0x1ce>
        return 0;
 8016906:	2300      	movs	r3, #0
 8016908:	e036      	b.n	8016978 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	061a      	lsls	r2, r3, #24
 801690e:	693b      	ldr	r3, [r7, #16]
 8016910:	041b      	lsls	r3, r3, #16
 8016912:	4313      	orrs	r3, r2
 8016914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016916:	4313      	orrs	r3, r2
 8016918:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801691a:	e023      	b.n	8016964 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801691e:	2bff      	cmp	r3, #255	; 0xff
 8016920:	d901      	bls.n	8016926 <ip4addr_aton+0x1ea>
        return 0;
 8016922:	2300      	movs	r3, #0
 8016924:	e028      	b.n	8016978 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	2bff      	cmp	r3, #255	; 0xff
 801692a:	d805      	bhi.n	8016938 <ip4addr_aton+0x1fc>
 801692c:	693b      	ldr	r3, [r7, #16]
 801692e:	2bff      	cmp	r3, #255	; 0xff
 8016930:	d802      	bhi.n	8016938 <ip4addr_aton+0x1fc>
 8016932:	697b      	ldr	r3, [r7, #20]
 8016934:	2bff      	cmp	r3, #255	; 0xff
 8016936:	d901      	bls.n	801693c <ip4addr_aton+0x200>
        return 0;
 8016938:	2300      	movs	r3, #0
 801693a:	e01d      	b.n	8016978 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	061a      	lsls	r2, r3, #24
 8016940:	693b      	ldr	r3, [r7, #16]
 8016942:	041b      	lsls	r3, r3, #16
 8016944:	431a      	orrs	r2, r3
 8016946:	697b      	ldr	r3, [r7, #20]
 8016948:	021b      	lsls	r3, r3, #8
 801694a:	4313      	orrs	r3, r2
 801694c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801694e:	4313      	orrs	r3, r2
 8016950:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8016952:	e007      	b.n	8016964 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8016954:	4b0b      	ldr	r3, [pc, #44]	; (8016984 <ip4addr_aton+0x248>)
 8016956:	22f9      	movs	r2, #249	; 0xf9
 8016958:	490b      	ldr	r1, [pc, #44]	; (8016988 <ip4addr_aton+0x24c>)
 801695a:	480c      	ldr	r0, [pc, #48]	; (801698c <ip4addr_aton+0x250>)
 801695c:	f003 f840 	bl	80199e0 <iprintf>
      break;
 8016960:	e000      	b.n	8016964 <ip4addr_aton+0x228>
      break;
 8016962:	bf00      	nop
  }
  if (addr) {
 8016964:	683b      	ldr	r3, [r7, #0]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d005      	beq.n	8016976 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801696a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801696c:	f7f5 ff89 	bl	800c882 <lwip_htonl>
 8016970:	4602      	mov	r2, r0
 8016972:	683b      	ldr	r3, [r7, #0]
 8016974:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8016976:	2301      	movs	r3, #1
}
 8016978:	4618      	mov	r0, r3
 801697a:	3728      	adds	r7, #40	; 0x28
 801697c:	46bd      	mov	sp, r7
 801697e:	bd80      	pop	{r7, pc}
 8016980:	0801e350 	.word	0x0801e350
 8016984:	0801de68 	.word	0x0801de68
 8016988:	0801dea4 	.word	0x0801dea4
 801698c:	0801deb0 	.word	0x0801deb0

08016990 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016990:	b580      	push	{r7, lr}
 8016992:	b084      	sub	sp, #16
 8016994:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016996:	2300      	movs	r3, #0
 8016998:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801699a:	4b12      	ldr	r3, [pc, #72]	; (80169e4 <ip_reass_tmr+0x54>)
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80169a0:	e018      	b.n	80169d4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	7fdb      	ldrb	r3, [r3, #31]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d00b      	beq.n	80169c2 <ip_reass_tmr+0x32>
      r->timer--;
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	7fdb      	ldrb	r3, [r3, #31]
 80169ae:	3b01      	subs	r3, #1
 80169b0:	b2da      	uxtb	r2, r3
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	60fb      	str	r3, [r7, #12]
 80169c0:	e008      	b.n	80169d4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80169cc:	68b9      	ldr	r1, [r7, #8]
 80169ce:	6878      	ldr	r0, [r7, #4]
 80169d0:	f000 f80a 	bl	80169e8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d1e3      	bne.n	80169a2 <ip_reass_tmr+0x12>
    }
  }
}
 80169da:	bf00      	nop
 80169dc:	bf00      	nop
 80169de:	3710      	adds	r7, #16
 80169e0:	46bd      	mov	sp, r7
 80169e2:	bd80      	pop	{r7, pc}
 80169e4:	200113f4 	.word	0x200113f4

080169e8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b088      	sub	sp, #32
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
 80169f0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80169f2:	2300      	movs	r3, #0
 80169f4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80169f6:	683a      	ldr	r2, [r7, #0]
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	429a      	cmp	r2, r3
 80169fc:	d105      	bne.n	8016a0a <ip_reass_free_complete_datagram+0x22>
 80169fe:	4b45      	ldr	r3, [pc, #276]	; (8016b14 <ip_reass_free_complete_datagram+0x12c>)
 8016a00:	22ab      	movs	r2, #171	; 0xab
 8016a02:	4945      	ldr	r1, [pc, #276]	; (8016b18 <ip_reass_free_complete_datagram+0x130>)
 8016a04:	4845      	ldr	r0, [pc, #276]	; (8016b1c <ip_reass_free_complete_datagram+0x134>)
 8016a06:	f002 ffeb 	bl	80199e0 <iprintf>
  if (prev != NULL) {
 8016a0a:	683b      	ldr	r3, [r7, #0]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d00a      	beq.n	8016a26 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016a10:	683b      	ldr	r3, [r7, #0]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	687a      	ldr	r2, [r7, #4]
 8016a16:	429a      	cmp	r2, r3
 8016a18:	d005      	beq.n	8016a26 <ip_reass_free_complete_datagram+0x3e>
 8016a1a:	4b3e      	ldr	r3, [pc, #248]	; (8016b14 <ip_reass_free_complete_datagram+0x12c>)
 8016a1c:	22ad      	movs	r2, #173	; 0xad
 8016a1e:	4940      	ldr	r1, [pc, #256]	; (8016b20 <ip_reass_free_complete_datagram+0x138>)
 8016a20:	483e      	ldr	r0, [pc, #248]	; (8016b1c <ip_reass_free_complete_datagram+0x134>)
 8016a22:	f002 ffdd 	bl	80199e0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	685b      	ldr	r3, [r3, #4]
 8016a2a:	685b      	ldr	r3, [r3, #4]
 8016a2c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016a2e:	697b      	ldr	r3, [r7, #20]
 8016a30:	889b      	ldrh	r3, [r3, #4]
 8016a32:	b29b      	uxth	r3, r3
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d12a      	bne.n	8016a8e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	685b      	ldr	r3, [r3, #4]
 8016a3c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016a3e:	697b      	ldr	r3, [r7, #20]
 8016a40:	681a      	ldr	r2, [r3, #0]
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016a46:	69bb      	ldr	r3, [r7, #24]
 8016a48:	6858      	ldr	r0, [r3, #4]
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	3308      	adds	r3, #8
 8016a4e:	2214      	movs	r2, #20
 8016a50:	4619      	mov	r1, r3
 8016a52:	f002 ffaf 	bl	80199b4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016a56:	2101      	movs	r1, #1
 8016a58:	69b8      	ldr	r0, [r7, #24]
 8016a5a:	f7ff fb1d 	bl	8016098 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016a5e:	69b8      	ldr	r0, [r7, #24]
 8016a60:	f7f7 fb8a 	bl	800e178 <pbuf_clen>
 8016a64:	4603      	mov	r3, r0
 8016a66:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016a68:	8bfa      	ldrh	r2, [r7, #30]
 8016a6a:	8a7b      	ldrh	r3, [r7, #18]
 8016a6c:	4413      	add	r3, r2
 8016a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016a72:	db05      	blt.n	8016a80 <ip_reass_free_complete_datagram+0x98>
 8016a74:	4b27      	ldr	r3, [pc, #156]	; (8016b14 <ip_reass_free_complete_datagram+0x12c>)
 8016a76:	22bc      	movs	r2, #188	; 0xbc
 8016a78:	492a      	ldr	r1, [pc, #168]	; (8016b24 <ip_reass_free_complete_datagram+0x13c>)
 8016a7a:	4828      	ldr	r0, [pc, #160]	; (8016b1c <ip_reass_free_complete_datagram+0x134>)
 8016a7c:	f002 ffb0 	bl	80199e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016a80:	8bfa      	ldrh	r2, [r7, #30]
 8016a82:	8a7b      	ldrh	r3, [r7, #18]
 8016a84:	4413      	add	r3, r2
 8016a86:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016a88:	69b8      	ldr	r0, [r7, #24]
 8016a8a:	f7f7 fae7 	bl	800e05c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	685b      	ldr	r3, [r3, #4]
 8016a92:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016a94:	e01f      	b.n	8016ad6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016a96:	69bb      	ldr	r3, [r7, #24]
 8016a98:	685b      	ldr	r3, [r3, #4]
 8016a9a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016a9c:	69bb      	ldr	r3, [r7, #24]
 8016a9e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016aa0:	697b      	ldr	r3, [r7, #20]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016aa6:	68f8      	ldr	r0, [r7, #12]
 8016aa8:	f7f7 fb66 	bl	800e178 <pbuf_clen>
 8016aac:	4603      	mov	r3, r0
 8016aae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016ab0:	8bfa      	ldrh	r2, [r7, #30]
 8016ab2:	8a7b      	ldrh	r3, [r7, #18]
 8016ab4:	4413      	add	r3, r2
 8016ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016aba:	db05      	blt.n	8016ac8 <ip_reass_free_complete_datagram+0xe0>
 8016abc:	4b15      	ldr	r3, [pc, #84]	; (8016b14 <ip_reass_free_complete_datagram+0x12c>)
 8016abe:	22cc      	movs	r2, #204	; 0xcc
 8016ac0:	4918      	ldr	r1, [pc, #96]	; (8016b24 <ip_reass_free_complete_datagram+0x13c>)
 8016ac2:	4816      	ldr	r0, [pc, #88]	; (8016b1c <ip_reass_free_complete_datagram+0x134>)
 8016ac4:	f002 ff8c 	bl	80199e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016ac8:	8bfa      	ldrh	r2, [r7, #30]
 8016aca:	8a7b      	ldrh	r3, [r7, #18]
 8016acc:	4413      	add	r3, r2
 8016ace:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016ad0:	68f8      	ldr	r0, [r7, #12]
 8016ad2:	f7f7 fac3 	bl	800e05c <pbuf_free>
  while (p != NULL) {
 8016ad6:	69bb      	ldr	r3, [r7, #24]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d1dc      	bne.n	8016a96 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016adc:	6839      	ldr	r1, [r7, #0]
 8016ade:	6878      	ldr	r0, [r7, #4]
 8016ae0:	f000 f8c2 	bl	8016c68 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016ae4:	4b10      	ldr	r3, [pc, #64]	; (8016b28 <ip_reass_free_complete_datagram+0x140>)
 8016ae6:	881b      	ldrh	r3, [r3, #0]
 8016ae8:	8bfa      	ldrh	r2, [r7, #30]
 8016aea:	429a      	cmp	r2, r3
 8016aec:	d905      	bls.n	8016afa <ip_reass_free_complete_datagram+0x112>
 8016aee:	4b09      	ldr	r3, [pc, #36]	; (8016b14 <ip_reass_free_complete_datagram+0x12c>)
 8016af0:	22d2      	movs	r2, #210	; 0xd2
 8016af2:	490e      	ldr	r1, [pc, #56]	; (8016b2c <ip_reass_free_complete_datagram+0x144>)
 8016af4:	4809      	ldr	r0, [pc, #36]	; (8016b1c <ip_reass_free_complete_datagram+0x134>)
 8016af6:	f002 ff73 	bl	80199e0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016afa:	4b0b      	ldr	r3, [pc, #44]	; (8016b28 <ip_reass_free_complete_datagram+0x140>)
 8016afc:	881a      	ldrh	r2, [r3, #0]
 8016afe:	8bfb      	ldrh	r3, [r7, #30]
 8016b00:	1ad3      	subs	r3, r2, r3
 8016b02:	b29a      	uxth	r2, r3
 8016b04:	4b08      	ldr	r3, [pc, #32]	; (8016b28 <ip_reass_free_complete_datagram+0x140>)
 8016b06:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016b08:	8bfb      	ldrh	r3, [r7, #30]
}
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	3720      	adds	r7, #32
 8016b0e:	46bd      	mov	sp, r7
 8016b10:	bd80      	pop	{r7, pc}
 8016b12:	bf00      	nop
 8016b14:	0801ded8 	.word	0x0801ded8
 8016b18:	0801df14 	.word	0x0801df14
 8016b1c:	0801df20 	.word	0x0801df20
 8016b20:	0801df48 	.word	0x0801df48
 8016b24:	0801df5c 	.word	0x0801df5c
 8016b28:	200113f8 	.word	0x200113f8
 8016b2c:	0801df7c 	.word	0x0801df7c

08016b30 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016b30:	b580      	push	{r7, lr}
 8016b32:	b08a      	sub	sp, #40	; 0x28
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	6078      	str	r0, [r7, #4]
 8016b38:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016b3e:	2300      	movs	r3, #0
 8016b40:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016b42:	2300      	movs	r3, #0
 8016b44:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016b46:	2300      	movs	r3, #0
 8016b48:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016b4e:	4b28      	ldr	r3, [pc, #160]	; (8016bf0 <ip_reass_remove_oldest_datagram+0xc0>)
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016b54:	e030      	b.n	8016bb8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b58:	695a      	ldr	r2, [r3, #20]
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	68db      	ldr	r3, [r3, #12]
 8016b5e:	429a      	cmp	r2, r3
 8016b60:	d10c      	bne.n	8016b7c <ip_reass_remove_oldest_datagram+0x4c>
 8016b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b64:	699a      	ldr	r2, [r3, #24]
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	691b      	ldr	r3, [r3, #16]
 8016b6a:	429a      	cmp	r2, r3
 8016b6c:	d106      	bne.n	8016b7c <ip_reass_remove_oldest_datagram+0x4c>
 8016b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b70:	899a      	ldrh	r2, [r3, #12]
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	889b      	ldrh	r3, [r3, #4]
 8016b76:	b29b      	uxth	r3, r3
 8016b78:	429a      	cmp	r2, r3
 8016b7a:	d014      	beq.n	8016ba6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016b7c:	693b      	ldr	r3, [r7, #16]
 8016b7e:	3301      	adds	r3, #1
 8016b80:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016b82:	6a3b      	ldr	r3, [r7, #32]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d104      	bne.n	8016b92 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b8a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016b8c:	69fb      	ldr	r3, [r7, #28]
 8016b8e:	61bb      	str	r3, [r7, #24]
 8016b90:	e009      	b.n	8016ba6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b94:	7fda      	ldrb	r2, [r3, #31]
 8016b96:	6a3b      	ldr	r3, [r7, #32]
 8016b98:	7fdb      	ldrb	r3, [r3, #31]
 8016b9a:	429a      	cmp	r2, r3
 8016b9c:	d803      	bhi.n	8016ba6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ba0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016ba2:	69fb      	ldr	r3, [r7, #28]
 8016ba4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d001      	beq.n	8016bb2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bb0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d1cb      	bne.n	8016b56 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016bbe:	6a3b      	ldr	r3, [r7, #32]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d008      	beq.n	8016bd6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016bc4:	69b9      	ldr	r1, [r7, #24]
 8016bc6:	6a38      	ldr	r0, [r7, #32]
 8016bc8:	f7ff ff0e 	bl	80169e8 <ip_reass_free_complete_datagram>
 8016bcc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016bce:	697a      	ldr	r2, [r7, #20]
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	4413      	add	r3, r2
 8016bd4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016bd6:	697a      	ldr	r2, [r7, #20]
 8016bd8:	683b      	ldr	r3, [r7, #0]
 8016bda:	429a      	cmp	r2, r3
 8016bdc:	da02      	bge.n	8016be4 <ip_reass_remove_oldest_datagram+0xb4>
 8016bde:	693b      	ldr	r3, [r7, #16]
 8016be0:	2b01      	cmp	r3, #1
 8016be2:	dcac      	bgt.n	8016b3e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016be4:	697b      	ldr	r3, [r7, #20]
}
 8016be6:	4618      	mov	r0, r3
 8016be8:	3728      	adds	r7, #40	; 0x28
 8016bea:	46bd      	mov	sp, r7
 8016bec:	bd80      	pop	{r7, pc}
 8016bee:	bf00      	nop
 8016bf0:	200113f4 	.word	0x200113f4

08016bf4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b084      	sub	sp, #16
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
 8016bfc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016bfe:	2004      	movs	r0, #4
 8016c00:	f7f6 fb12 	bl	800d228 <memp_malloc>
 8016c04:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d110      	bne.n	8016c2e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016c0c:	6839      	ldr	r1, [r7, #0]
 8016c0e:	6878      	ldr	r0, [r7, #4]
 8016c10:	f7ff ff8e 	bl	8016b30 <ip_reass_remove_oldest_datagram>
 8016c14:	4602      	mov	r2, r0
 8016c16:	683b      	ldr	r3, [r7, #0]
 8016c18:	4293      	cmp	r3, r2
 8016c1a:	dc03      	bgt.n	8016c24 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016c1c:	2004      	movs	r0, #4
 8016c1e:	f7f6 fb03 	bl	800d228 <memp_malloc>
 8016c22:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d101      	bne.n	8016c2e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	e016      	b.n	8016c5c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016c2e:	2220      	movs	r2, #32
 8016c30:	2100      	movs	r1, #0
 8016c32:	68f8      	ldr	r0, [r7, #12]
 8016c34:	f002 fecc 	bl	80199d0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	220f      	movs	r2, #15
 8016c3c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016c3e:	4b09      	ldr	r3, [pc, #36]	; (8016c64 <ip_reass_enqueue_new_datagram+0x70>)
 8016c40:	681a      	ldr	r2, [r3, #0]
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016c46:	4a07      	ldr	r2, [pc, #28]	; (8016c64 <ip_reass_enqueue_new_datagram+0x70>)
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	3308      	adds	r3, #8
 8016c50:	2214      	movs	r2, #20
 8016c52:	6879      	ldr	r1, [r7, #4]
 8016c54:	4618      	mov	r0, r3
 8016c56:	f002 fead 	bl	80199b4 <memcpy>
  return ipr;
 8016c5a:	68fb      	ldr	r3, [r7, #12]
}
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	3710      	adds	r7, #16
 8016c60:	46bd      	mov	sp, r7
 8016c62:	bd80      	pop	{r7, pc}
 8016c64:	200113f4 	.word	0x200113f4

08016c68 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b082      	sub	sp, #8
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
 8016c70:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016c72:	4b10      	ldr	r3, [pc, #64]	; (8016cb4 <ip_reass_dequeue_datagram+0x4c>)
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	687a      	ldr	r2, [r7, #4]
 8016c78:	429a      	cmp	r2, r3
 8016c7a:	d104      	bne.n	8016c86 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	4a0c      	ldr	r2, [pc, #48]	; (8016cb4 <ip_reass_dequeue_datagram+0x4c>)
 8016c82:	6013      	str	r3, [r2, #0]
 8016c84:	e00d      	b.n	8016ca2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016c86:	683b      	ldr	r3, [r7, #0]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d106      	bne.n	8016c9a <ip_reass_dequeue_datagram+0x32>
 8016c8c:	4b0a      	ldr	r3, [pc, #40]	; (8016cb8 <ip_reass_dequeue_datagram+0x50>)
 8016c8e:	f240 1245 	movw	r2, #325	; 0x145
 8016c92:	490a      	ldr	r1, [pc, #40]	; (8016cbc <ip_reass_dequeue_datagram+0x54>)
 8016c94:	480a      	ldr	r0, [pc, #40]	; (8016cc0 <ip_reass_dequeue_datagram+0x58>)
 8016c96:	f002 fea3 	bl	80199e0 <iprintf>
    prev->next = ipr->next;
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	681a      	ldr	r2, [r3, #0]
 8016c9e:	683b      	ldr	r3, [r7, #0]
 8016ca0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016ca2:	6879      	ldr	r1, [r7, #4]
 8016ca4:	2004      	movs	r0, #4
 8016ca6:	f7f6 fb35 	bl	800d314 <memp_free>
}
 8016caa:	bf00      	nop
 8016cac:	3708      	adds	r7, #8
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bd80      	pop	{r7, pc}
 8016cb2:	bf00      	nop
 8016cb4:	200113f4 	.word	0x200113f4
 8016cb8:	0801ded8 	.word	0x0801ded8
 8016cbc:	0801dfa0 	.word	0x0801dfa0
 8016cc0:	0801df20 	.word	0x0801df20

08016cc4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b08c      	sub	sp, #48	; 0x30
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	60f8      	str	r0, [r7, #12]
 8016ccc:	60b9      	str	r1, [r7, #8]
 8016cce:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016cd4:	2301      	movs	r3, #1
 8016cd6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016cd8:	68bb      	ldr	r3, [r7, #8]
 8016cda:	685b      	ldr	r3, [r3, #4]
 8016cdc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016cde:	69fb      	ldr	r3, [r7, #28]
 8016ce0:	885b      	ldrh	r3, [r3, #2]
 8016ce2:	b29b      	uxth	r3, r3
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	f7f5 fdb7 	bl	800c858 <lwip_htons>
 8016cea:	4603      	mov	r3, r0
 8016cec:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016cee:	69fb      	ldr	r3, [r7, #28]
 8016cf0:	781b      	ldrb	r3, [r3, #0]
 8016cf2:	f003 030f 	and.w	r3, r3, #15
 8016cf6:	b2db      	uxtb	r3, r3
 8016cf8:	009b      	lsls	r3, r3, #2
 8016cfa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016cfc:	7e7b      	ldrb	r3, [r7, #25]
 8016cfe:	b29b      	uxth	r3, r3
 8016d00:	8b7a      	ldrh	r2, [r7, #26]
 8016d02:	429a      	cmp	r2, r3
 8016d04:	d202      	bcs.n	8016d0c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d0a:	e135      	b.n	8016f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016d0c:	7e7b      	ldrb	r3, [r7, #25]
 8016d0e:	b29b      	uxth	r3, r3
 8016d10:	8b7a      	ldrh	r2, [r7, #26]
 8016d12:	1ad3      	subs	r3, r2, r3
 8016d14:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016d16:	69fb      	ldr	r3, [r7, #28]
 8016d18:	88db      	ldrh	r3, [r3, #6]
 8016d1a:	b29b      	uxth	r3, r3
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	f7f5 fd9b 	bl	800c858 <lwip_htons>
 8016d22:	4603      	mov	r3, r0
 8016d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016d28:	b29b      	uxth	r3, r3
 8016d2a:	00db      	lsls	r3, r3, #3
 8016d2c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016d2e:	68bb      	ldr	r3, [r7, #8]
 8016d30:	685b      	ldr	r3, [r3, #4]
 8016d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d36:	2200      	movs	r2, #0
 8016d38:	701a      	strb	r2, [r3, #0]
 8016d3a:	2200      	movs	r2, #0
 8016d3c:	705a      	strb	r2, [r3, #1]
 8016d3e:	2200      	movs	r2, #0
 8016d40:	709a      	strb	r2, [r3, #2]
 8016d42:	2200      	movs	r2, #0
 8016d44:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d48:	8afa      	ldrh	r2, [r7, #22]
 8016d4a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016d4c:	8afa      	ldrh	r2, [r7, #22]
 8016d4e:	8b7b      	ldrh	r3, [r7, #26]
 8016d50:	4413      	add	r3, r2
 8016d52:	b29a      	uxth	r2, r3
 8016d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d56:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d5a:	88db      	ldrh	r3, [r3, #6]
 8016d5c:	b29b      	uxth	r3, r3
 8016d5e:	8afa      	ldrh	r2, [r7, #22]
 8016d60:	429a      	cmp	r2, r3
 8016d62:	d902      	bls.n	8016d6a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d68:	e106      	b.n	8016f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	685b      	ldr	r3, [r3, #4]
 8016d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8016d70:	e068      	b.n	8016e44 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d74:	685b      	ldr	r3, [r3, #4]
 8016d76:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d7a:	889b      	ldrh	r3, [r3, #4]
 8016d7c:	b29a      	uxth	r2, r3
 8016d7e:	693b      	ldr	r3, [r7, #16]
 8016d80:	889b      	ldrh	r3, [r3, #4]
 8016d82:	b29b      	uxth	r3, r3
 8016d84:	429a      	cmp	r2, r3
 8016d86:	d235      	bcs.n	8016df4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d8c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d020      	beq.n	8016dd6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d96:	889b      	ldrh	r3, [r3, #4]
 8016d98:	b29a      	uxth	r2, r3
 8016d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d9c:	88db      	ldrh	r3, [r3, #6]
 8016d9e:	b29b      	uxth	r3, r3
 8016da0:	429a      	cmp	r2, r3
 8016da2:	d307      	bcc.n	8016db4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016da6:	88db      	ldrh	r3, [r3, #6]
 8016da8:	b29a      	uxth	r2, r3
 8016daa:	693b      	ldr	r3, [r7, #16]
 8016dac:	889b      	ldrh	r3, [r3, #4]
 8016dae:	b29b      	uxth	r3, r3
 8016db0:	429a      	cmp	r2, r3
 8016db2:	d902      	bls.n	8016dba <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016db8:	e0de      	b.n	8016f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dbc:	68ba      	ldr	r2, [r7, #8]
 8016dbe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dc2:	88db      	ldrh	r3, [r3, #6]
 8016dc4:	b29a      	uxth	r2, r3
 8016dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dc8:	889b      	ldrh	r3, [r3, #4]
 8016dca:	b29b      	uxth	r3, r3
 8016dcc:	429a      	cmp	r2, r3
 8016dce:	d03d      	beq.n	8016e4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016dd4:	e03a      	b.n	8016e4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dd8:	88db      	ldrh	r3, [r3, #6]
 8016dda:	b29a      	uxth	r2, r3
 8016ddc:	693b      	ldr	r3, [r7, #16]
 8016dde:	889b      	ldrh	r3, [r3, #4]
 8016de0:	b29b      	uxth	r3, r3
 8016de2:	429a      	cmp	r2, r3
 8016de4:	d902      	bls.n	8016dec <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016dea:	e0c5      	b.n	8016f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	68ba      	ldr	r2, [r7, #8]
 8016df0:	605a      	str	r2, [r3, #4]
      break;
 8016df2:	e02b      	b.n	8016e4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016df6:	889b      	ldrh	r3, [r3, #4]
 8016df8:	b29a      	uxth	r2, r3
 8016dfa:	693b      	ldr	r3, [r7, #16]
 8016dfc:	889b      	ldrh	r3, [r3, #4]
 8016dfe:	b29b      	uxth	r3, r3
 8016e00:	429a      	cmp	r2, r3
 8016e02:	d102      	bne.n	8016e0a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e08:	e0b6      	b.n	8016f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e0c:	889b      	ldrh	r3, [r3, #4]
 8016e0e:	b29a      	uxth	r2, r3
 8016e10:	693b      	ldr	r3, [r7, #16]
 8016e12:	88db      	ldrh	r3, [r3, #6]
 8016e14:	b29b      	uxth	r3, r3
 8016e16:	429a      	cmp	r2, r3
 8016e18:	d202      	bcs.n	8016e20 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e1e:	e0ab      	b.n	8016f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d009      	beq.n	8016e3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e28:	88db      	ldrh	r3, [r3, #6]
 8016e2a:	b29a      	uxth	r2, r3
 8016e2c:	693b      	ldr	r3, [r7, #16]
 8016e2e:	889b      	ldrh	r3, [r3, #4]
 8016e30:	b29b      	uxth	r3, r3
 8016e32:	429a      	cmp	r2, r3
 8016e34:	d001      	beq.n	8016e3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016e36:	2300      	movs	r3, #0
 8016e38:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016e3a:	693b      	ldr	r3, [r7, #16]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016e40:	693b      	ldr	r3, [r7, #16]
 8016e42:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d193      	bne.n	8016d72 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016e4a:	e000      	b.n	8016e4e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016e4c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d12d      	bne.n	8016eb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d01c      	beq.n	8016e94 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e5c:	88db      	ldrh	r3, [r3, #6]
 8016e5e:	b29a      	uxth	r2, r3
 8016e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e62:	889b      	ldrh	r3, [r3, #4]
 8016e64:	b29b      	uxth	r3, r3
 8016e66:	429a      	cmp	r2, r3
 8016e68:	d906      	bls.n	8016e78 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016e6a:	4b45      	ldr	r3, [pc, #276]	; (8016f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e6c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016e70:	4944      	ldr	r1, [pc, #272]	; (8016f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016e72:	4845      	ldr	r0, [pc, #276]	; (8016f88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016e74:	f002 fdb4 	bl	80199e0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e7a:	68ba      	ldr	r2, [r7, #8]
 8016e7c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e80:	88db      	ldrh	r3, [r3, #6]
 8016e82:	b29a      	uxth	r2, r3
 8016e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e86:	889b      	ldrh	r3, [r3, #4]
 8016e88:	b29b      	uxth	r3, r3
 8016e8a:	429a      	cmp	r2, r3
 8016e8c:	d010      	beq.n	8016eb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016e8e:	2300      	movs	r3, #0
 8016e90:	623b      	str	r3, [r7, #32]
 8016e92:	e00d      	b.n	8016eb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	685b      	ldr	r3, [r3, #4]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d006      	beq.n	8016eaa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016e9c:	4b38      	ldr	r3, [pc, #224]	; (8016f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e9e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016ea2:	493a      	ldr	r1, [pc, #232]	; (8016f8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016ea4:	4838      	ldr	r0, [pc, #224]	; (8016f88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016ea6:	f002 fd9b 	bl	80199e0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	68ba      	ldr	r2, [r7, #8]
 8016eae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d105      	bne.n	8016ec2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	7f9b      	ldrb	r3, [r3, #30]
 8016eba:	f003 0301 	and.w	r3, r3, #1
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d059      	beq.n	8016f76 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016ec2:	6a3b      	ldr	r3, [r7, #32]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d04f      	beq.n	8016f68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	685b      	ldr	r3, [r3, #4]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d006      	beq.n	8016ede <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	685b      	ldr	r3, [r3, #4]
 8016ed4:	685b      	ldr	r3, [r3, #4]
 8016ed6:	889b      	ldrh	r3, [r3, #4]
 8016ed8:	b29b      	uxth	r3, r3
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d002      	beq.n	8016ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016ede:	2300      	movs	r3, #0
 8016ee0:	623b      	str	r3, [r7, #32]
 8016ee2:	e041      	b.n	8016f68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ee6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016eee:	e012      	b.n	8016f16 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ef2:	685b      	ldr	r3, [r3, #4]
 8016ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ef8:	88db      	ldrh	r3, [r3, #6]
 8016efa:	b29a      	uxth	r2, r3
 8016efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016efe:	889b      	ldrh	r3, [r3, #4]
 8016f00:	b29b      	uxth	r3, r3
 8016f02:	429a      	cmp	r2, r3
 8016f04:	d002      	beq.n	8016f0c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016f06:	2300      	movs	r3, #0
 8016f08:	623b      	str	r3, [r7, #32]
            break;
 8016f0a:	e007      	b.n	8016f1c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f0e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d1e9      	bne.n	8016ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016f1c:	6a3b      	ldr	r3, [r7, #32]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d022      	beq.n	8016f68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	685b      	ldr	r3, [r3, #4]
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d106      	bne.n	8016f38 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016f2a:	4b15      	ldr	r3, [pc, #84]	; (8016f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016f2c:	f240 12df 	movw	r2, #479	; 0x1df
 8016f30:	4917      	ldr	r1, [pc, #92]	; (8016f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016f32:	4815      	ldr	r0, [pc, #84]	; (8016f88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016f34:	f002 fd54 	bl	80199e0 <iprintf>
          LWIP_ASSERT("sanity check",
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	685b      	ldr	r3, [r3, #4]
 8016f3c:	685b      	ldr	r3, [r3, #4]
 8016f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f40:	429a      	cmp	r2, r3
 8016f42:	d106      	bne.n	8016f52 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016f44:	4b0e      	ldr	r3, [pc, #56]	; (8016f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016f46:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016f4a:	4911      	ldr	r1, [pc, #68]	; (8016f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016f4c:	480e      	ldr	r0, [pc, #56]	; (8016f88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016f4e:	f002 fd47 	bl	80199e0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d006      	beq.n	8016f68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016f5a:	4b09      	ldr	r3, [pc, #36]	; (8016f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016f5c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016f60:	490c      	ldr	r1, [pc, #48]	; (8016f94 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016f62:	4809      	ldr	r0, [pc, #36]	; (8016f88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016f64:	f002 fd3c 	bl	80199e0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016f68:	6a3b      	ldr	r3, [r7, #32]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	bf14      	ite	ne
 8016f6e:	2301      	movne	r3, #1
 8016f70:	2300      	moveq	r3, #0
 8016f72:	b2db      	uxtb	r3, r3
 8016f74:	e000      	b.n	8016f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016f76:	2300      	movs	r3, #0
}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	3730      	adds	r7, #48	; 0x30
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd80      	pop	{r7, pc}
 8016f80:	0801ded8 	.word	0x0801ded8
 8016f84:	0801dfbc 	.word	0x0801dfbc
 8016f88:	0801df20 	.word	0x0801df20
 8016f8c:	0801dfdc 	.word	0x0801dfdc
 8016f90:	0801e014 	.word	0x0801e014
 8016f94:	0801e024 	.word	0x0801e024

08016f98 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b08e      	sub	sp, #56	; 0x38
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	685b      	ldr	r3, [r3, #4]
 8016fa4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fa8:	781b      	ldrb	r3, [r3, #0]
 8016faa:	f003 030f 	and.w	r3, r3, #15
 8016fae:	b2db      	uxtb	r3, r3
 8016fb0:	009b      	lsls	r3, r3, #2
 8016fb2:	b2db      	uxtb	r3, r3
 8016fb4:	2b14      	cmp	r3, #20
 8016fb6:	f040 8171 	bne.w	801729c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fbc:	88db      	ldrh	r3, [r3, #6]
 8016fbe:	b29b      	uxth	r3, r3
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	f7f5 fc49 	bl	800c858 <lwip_htons>
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016fcc:	b29b      	uxth	r3, r3
 8016fce:	00db      	lsls	r3, r3, #3
 8016fd0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fd4:	885b      	ldrh	r3, [r3, #2]
 8016fd6:	b29b      	uxth	r3, r3
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f7f5 fc3d 	bl	800c858 <lwip_htons>
 8016fde:	4603      	mov	r3, r0
 8016fe0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fe4:	781b      	ldrb	r3, [r3, #0]
 8016fe6:	f003 030f 	and.w	r3, r3, #15
 8016fea:	b2db      	uxtb	r3, r3
 8016fec:	009b      	lsls	r3, r3, #2
 8016fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016ff6:	b29b      	uxth	r3, r3
 8016ff8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016ffa:	429a      	cmp	r2, r3
 8016ffc:	f0c0 8150 	bcc.w	80172a0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017000:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017004:	b29b      	uxth	r3, r3
 8017006:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017008:	1ad3      	subs	r3, r2, r3
 801700a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801700c:	6878      	ldr	r0, [r7, #4]
 801700e:	f7f7 f8b3 	bl	800e178 <pbuf_clen>
 8017012:	4603      	mov	r3, r0
 8017014:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017016:	4b8c      	ldr	r3, [pc, #560]	; (8017248 <ip4_reass+0x2b0>)
 8017018:	881b      	ldrh	r3, [r3, #0]
 801701a:	461a      	mov	r2, r3
 801701c:	8c3b      	ldrh	r3, [r7, #32]
 801701e:	4413      	add	r3, r2
 8017020:	2b0a      	cmp	r3, #10
 8017022:	dd10      	ble.n	8017046 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017024:	8c3b      	ldrh	r3, [r7, #32]
 8017026:	4619      	mov	r1, r3
 8017028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801702a:	f7ff fd81 	bl	8016b30 <ip_reass_remove_oldest_datagram>
 801702e:	4603      	mov	r3, r0
 8017030:	2b00      	cmp	r3, #0
 8017032:	f000 8137 	beq.w	80172a4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017036:	4b84      	ldr	r3, [pc, #528]	; (8017248 <ip4_reass+0x2b0>)
 8017038:	881b      	ldrh	r3, [r3, #0]
 801703a:	461a      	mov	r2, r3
 801703c:	8c3b      	ldrh	r3, [r7, #32]
 801703e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017040:	2b0a      	cmp	r3, #10
 8017042:	f300 812f 	bgt.w	80172a4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017046:	4b81      	ldr	r3, [pc, #516]	; (801724c <ip4_reass+0x2b4>)
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	633b      	str	r3, [r7, #48]	; 0x30
 801704c:	e015      	b.n	801707a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017050:	695a      	ldr	r2, [r3, #20]
 8017052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017054:	68db      	ldr	r3, [r3, #12]
 8017056:	429a      	cmp	r2, r3
 8017058:	d10c      	bne.n	8017074 <ip4_reass+0xdc>
 801705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801705c:	699a      	ldr	r2, [r3, #24]
 801705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017060:	691b      	ldr	r3, [r3, #16]
 8017062:	429a      	cmp	r2, r3
 8017064:	d106      	bne.n	8017074 <ip4_reass+0xdc>
 8017066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017068:	899a      	ldrh	r2, [r3, #12]
 801706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801706c:	889b      	ldrh	r3, [r3, #4]
 801706e:	b29b      	uxth	r3, r3
 8017070:	429a      	cmp	r2, r3
 8017072:	d006      	beq.n	8017082 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	633b      	str	r3, [r7, #48]	; 0x30
 801707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801707c:	2b00      	cmp	r3, #0
 801707e:	d1e6      	bne.n	801704e <ip4_reass+0xb6>
 8017080:	e000      	b.n	8017084 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017082:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017086:	2b00      	cmp	r3, #0
 8017088:	d109      	bne.n	801709e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801708a:	8c3b      	ldrh	r3, [r7, #32]
 801708c:	4619      	mov	r1, r3
 801708e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017090:	f7ff fdb0 	bl	8016bf4 <ip_reass_enqueue_new_datagram>
 8017094:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017098:	2b00      	cmp	r3, #0
 801709a:	d11c      	bne.n	80170d6 <ip4_reass+0x13e>
      goto nullreturn;
 801709c:	e105      	b.n	80172aa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170a0:	88db      	ldrh	r3, [r3, #6]
 80170a2:	b29b      	uxth	r3, r3
 80170a4:	4618      	mov	r0, r3
 80170a6:	f7f5 fbd7 	bl	800c858 <lwip_htons>
 80170aa:	4603      	mov	r3, r0
 80170ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d110      	bne.n	80170d6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80170b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b6:	89db      	ldrh	r3, [r3, #14]
 80170b8:	4618      	mov	r0, r3
 80170ba:	f7f5 fbcd 	bl	800c858 <lwip_htons>
 80170be:	4603      	mov	r3, r0
 80170c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d006      	beq.n	80170d6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80170c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ca:	3308      	adds	r3, #8
 80170cc:	2214      	movs	r2, #20
 80170ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80170d0:	4618      	mov	r0, r3
 80170d2:	f002 fc6f 	bl	80199b4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80170d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170d8:	88db      	ldrh	r3, [r3, #6]
 80170da:	b29b      	uxth	r3, r3
 80170dc:	f003 0320 	and.w	r3, r3, #32
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	bf0c      	ite	eq
 80170e4:	2301      	moveq	r3, #1
 80170e6:	2300      	movne	r3, #0
 80170e8:	b2db      	uxtb	r3, r3
 80170ea:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80170ec:	69fb      	ldr	r3, [r7, #28]
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d00e      	beq.n	8017110 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80170f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80170f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80170f6:	4413      	add	r3, r2
 80170f8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80170fa:	8b7a      	ldrh	r2, [r7, #26]
 80170fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80170fe:	429a      	cmp	r2, r3
 8017100:	f0c0 80a0 	bcc.w	8017244 <ip4_reass+0x2ac>
 8017104:	8b7b      	ldrh	r3, [r7, #26]
 8017106:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801710a:	4293      	cmp	r3, r2
 801710c:	f200 809a 	bhi.w	8017244 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017110:	69fa      	ldr	r2, [r7, #28]
 8017112:	6879      	ldr	r1, [r7, #4]
 8017114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017116:	f7ff fdd5 	bl	8016cc4 <ip_reass_chain_frag_into_datagram_and_validate>
 801711a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801711c:	697b      	ldr	r3, [r7, #20]
 801711e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017122:	f000 809b 	beq.w	801725c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017126:	4b48      	ldr	r3, [pc, #288]	; (8017248 <ip4_reass+0x2b0>)
 8017128:	881a      	ldrh	r2, [r3, #0]
 801712a:	8c3b      	ldrh	r3, [r7, #32]
 801712c:	4413      	add	r3, r2
 801712e:	b29a      	uxth	r2, r3
 8017130:	4b45      	ldr	r3, [pc, #276]	; (8017248 <ip4_reass+0x2b0>)
 8017132:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017134:	69fb      	ldr	r3, [r7, #28]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d00d      	beq.n	8017156 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801713a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801713c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801713e:	4413      	add	r3, r2
 8017140:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017144:	8a7a      	ldrh	r2, [r7, #18]
 8017146:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801714a:	7f9b      	ldrb	r3, [r3, #30]
 801714c:	f043 0301 	orr.w	r3, r3, #1
 8017150:	b2da      	uxtb	r2, r3
 8017152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017154:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017156:	697b      	ldr	r3, [r7, #20]
 8017158:	2b01      	cmp	r3, #1
 801715a:	d171      	bne.n	8017240 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801715c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801715e:	8b9b      	ldrh	r3, [r3, #28]
 8017160:	3314      	adds	r3, #20
 8017162:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017166:	685b      	ldr	r3, [r3, #4]
 8017168:	685b      	ldr	r3, [r3, #4]
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017170:	685b      	ldr	r3, [r3, #4]
 8017172:	685b      	ldr	r3, [r3, #4]
 8017174:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017178:	3308      	adds	r3, #8
 801717a:	2214      	movs	r2, #20
 801717c:	4619      	mov	r1, r3
 801717e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017180:	f002 fc18 	bl	80199b4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017184:	8a3b      	ldrh	r3, [r7, #16]
 8017186:	4618      	mov	r0, r3
 8017188:	f7f5 fb66 	bl	800c858 <lwip_htons>
 801718c:	4603      	mov	r3, r0
 801718e:	461a      	mov	r2, r3
 8017190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017192:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017196:	2200      	movs	r2, #0
 8017198:	719a      	strb	r2, [r3, #6]
 801719a:	2200      	movs	r2, #0
 801719c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171a0:	2200      	movs	r2, #0
 80171a2:	729a      	strb	r2, [r3, #10]
 80171a4:	2200      	movs	r2, #0
 80171a6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80171a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171aa:	685b      	ldr	r3, [r3, #4]
 80171ac:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80171ae:	e00d      	b.n	80171cc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80171b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171b2:	685b      	ldr	r3, [r3, #4]
 80171b4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80171b6:	2114      	movs	r1, #20
 80171b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80171ba:	f7f6 fec9 	bl	800df50 <pbuf_remove_header>
      pbuf_cat(p, r);
 80171be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80171c0:	6878      	ldr	r0, [r7, #4]
 80171c2:	f7f7 f819 	bl	800e1f8 <pbuf_cat>
      r = iprh->next_pbuf;
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80171cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d1ee      	bne.n	80171b0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80171d2:	4b1e      	ldr	r3, [pc, #120]	; (801724c <ip4_reass+0x2b4>)
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80171d8:	429a      	cmp	r2, r3
 80171da:	d102      	bne.n	80171e2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80171dc:	2300      	movs	r3, #0
 80171de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80171e0:	e010      	b.n	8017204 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80171e2:	4b1a      	ldr	r3, [pc, #104]	; (801724c <ip4_reass+0x2b4>)
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80171e8:	e007      	b.n	80171fa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80171ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80171f0:	429a      	cmp	r2, r3
 80171f2:	d006      	beq.n	8017202 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80171f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80171fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d1f4      	bne.n	80171ea <ip4_reass+0x252>
 8017200:	e000      	b.n	8017204 <ip4_reass+0x26c>
          break;
 8017202:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017204:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017208:	f7ff fd2e 	bl	8016c68 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801720c:	6878      	ldr	r0, [r7, #4]
 801720e:	f7f6 ffb3 	bl	800e178 <pbuf_clen>
 8017212:	4603      	mov	r3, r0
 8017214:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017216:	4b0c      	ldr	r3, [pc, #48]	; (8017248 <ip4_reass+0x2b0>)
 8017218:	881b      	ldrh	r3, [r3, #0]
 801721a:	8c3a      	ldrh	r2, [r7, #32]
 801721c:	429a      	cmp	r2, r3
 801721e:	d906      	bls.n	801722e <ip4_reass+0x296>
 8017220:	4b0b      	ldr	r3, [pc, #44]	; (8017250 <ip4_reass+0x2b8>)
 8017222:	f240 229b 	movw	r2, #667	; 0x29b
 8017226:	490b      	ldr	r1, [pc, #44]	; (8017254 <ip4_reass+0x2bc>)
 8017228:	480b      	ldr	r0, [pc, #44]	; (8017258 <ip4_reass+0x2c0>)
 801722a:	f002 fbd9 	bl	80199e0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801722e:	4b06      	ldr	r3, [pc, #24]	; (8017248 <ip4_reass+0x2b0>)
 8017230:	881a      	ldrh	r2, [r3, #0]
 8017232:	8c3b      	ldrh	r3, [r7, #32]
 8017234:	1ad3      	subs	r3, r2, r3
 8017236:	b29a      	uxth	r2, r3
 8017238:	4b03      	ldr	r3, [pc, #12]	; (8017248 <ip4_reass+0x2b0>)
 801723a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	e038      	b.n	80172b2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017240:	2300      	movs	r3, #0
 8017242:	e036      	b.n	80172b2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017244:	bf00      	nop
 8017246:	e00a      	b.n	801725e <ip4_reass+0x2c6>
 8017248:	200113f8 	.word	0x200113f8
 801724c:	200113f4 	.word	0x200113f4
 8017250:	0801ded8 	.word	0x0801ded8
 8017254:	0801e048 	.word	0x0801e048
 8017258:	0801df20 	.word	0x0801df20
    goto nullreturn_ipr;
 801725c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017260:	2b00      	cmp	r3, #0
 8017262:	d106      	bne.n	8017272 <ip4_reass+0x2da>
 8017264:	4b15      	ldr	r3, [pc, #84]	; (80172bc <ip4_reass+0x324>)
 8017266:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801726a:	4915      	ldr	r1, [pc, #84]	; (80172c0 <ip4_reass+0x328>)
 801726c:	4815      	ldr	r0, [pc, #84]	; (80172c4 <ip4_reass+0x32c>)
 801726e:	f002 fbb7 	bl	80199e0 <iprintf>
  if (ipr->p == NULL) {
 8017272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017274:	685b      	ldr	r3, [r3, #4]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d116      	bne.n	80172a8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801727a:	4b13      	ldr	r3, [pc, #76]	; (80172c8 <ip4_reass+0x330>)
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017280:	429a      	cmp	r2, r3
 8017282:	d006      	beq.n	8017292 <ip4_reass+0x2fa>
 8017284:	4b0d      	ldr	r3, [pc, #52]	; (80172bc <ip4_reass+0x324>)
 8017286:	f240 22ab 	movw	r2, #683	; 0x2ab
 801728a:	4910      	ldr	r1, [pc, #64]	; (80172cc <ip4_reass+0x334>)
 801728c:	480d      	ldr	r0, [pc, #52]	; (80172c4 <ip4_reass+0x32c>)
 801728e:	f002 fba7 	bl	80199e0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017292:	2100      	movs	r1, #0
 8017294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017296:	f7ff fce7 	bl	8016c68 <ip_reass_dequeue_datagram>
 801729a:	e006      	b.n	80172aa <ip4_reass+0x312>
    goto nullreturn;
 801729c:	bf00      	nop
 801729e:	e004      	b.n	80172aa <ip4_reass+0x312>
    goto nullreturn;
 80172a0:	bf00      	nop
 80172a2:	e002      	b.n	80172aa <ip4_reass+0x312>
      goto nullreturn;
 80172a4:	bf00      	nop
 80172a6:	e000      	b.n	80172aa <ip4_reass+0x312>
  }

nullreturn:
 80172a8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80172aa:	6878      	ldr	r0, [r7, #4]
 80172ac:	f7f6 fed6 	bl	800e05c <pbuf_free>
  return NULL;
 80172b0:	2300      	movs	r3, #0
}
 80172b2:	4618      	mov	r0, r3
 80172b4:	3738      	adds	r7, #56	; 0x38
 80172b6:	46bd      	mov	sp, r7
 80172b8:	bd80      	pop	{r7, pc}
 80172ba:	bf00      	nop
 80172bc:	0801ded8 	.word	0x0801ded8
 80172c0:	0801e064 	.word	0x0801e064
 80172c4:	0801df20 	.word	0x0801df20
 80172c8:	200113f4 	.word	0x200113f4
 80172cc:	0801e070 	.word	0x0801e070

080172d0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80172d4:	2005      	movs	r0, #5
 80172d6:	f7f5 ffa7 	bl	800d228 <memp_malloc>
 80172da:	4603      	mov	r3, r0
}
 80172dc:	4618      	mov	r0, r3
 80172de:	bd80      	pop	{r7, pc}

080172e0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b082      	sub	sp, #8
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d106      	bne.n	80172fc <ip_frag_free_pbuf_custom_ref+0x1c>
 80172ee:	4b07      	ldr	r3, [pc, #28]	; (801730c <ip_frag_free_pbuf_custom_ref+0x2c>)
 80172f0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80172f4:	4906      	ldr	r1, [pc, #24]	; (8017310 <ip_frag_free_pbuf_custom_ref+0x30>)
 80172f6:	4807      	ldr	r0, [pc, #28]	; (8017314 <ip_frag_free_pbuf_custom_ref+0x34>)
 80172f8:	f002 fb72 	bl	80199e0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80172fc:	6879      	ldr	r1, [r7, #4]
 80172fe:	2005      	movs	r0, #5
 8017300:	f7f6 f808 	bl	800d314 <memp_free>
}
 8017304:	bf00      	nop
 8017306:	3708      	adds	r7, #8
 8017308:	46bd      	mov	sp, r7
 801730a:	bd80      	pop	{r7, pc}
 801730c:	0801ded8 	.word	0x0801ded8
 8017310:	0801e090 	.word	0x0801e090
 8017314:	0801df20 	.word	0x0801df20

08017318 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b084      	sub	sp, #16
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d106      	bne.n	8017338 <ipfrag_free_pbuf_custom+0x20>
 801732a:	4b11      	ldr	r3, [pc, #68]	; (8017370 <ipfrag_free_pbuf_custom+0x58>)
 801732c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017330:	4910      	ldr	r1, [pc, #64]	; (8017374 <ipfrag_free_pbuf_custom+0x5c>)
 8017332:	4811      	ldr	r0, [pc, #68]	; (8017378 <ipfrag_free_pbuf_custom+0x60>)
 8017334:	f002 fb54 	bl	80199e0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017338:	68fa      	ldr	r2, [r7, #12]
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	429a      	cmp	r2, r3
 801733e:	d006      	beq.n	801734e <ipfrag_free_pbuf_custom+0x36>
 8017340:	4b0b      	ldr	r3, [pc, #44]	; (8017370 <ipfrag_free_pbuf_custom+0x58>)
 8017342:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017346:	490d      	ldr	r1, [pc, #52]	; (801737c <ipfrag_free_pbuf_custom+0x64>)
 8017348:	480b      	ldr	r0, [pc, #44]	; (8017378 <ipfrag_free_pbuf_custom+0x60>)
 801734a:	f002 fb49 	bl	80199e0 <iprintf>
  if (pcr->original != NULL) {
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	695b      	ldr	r3, [r3, #20]
 8017352:	2b00      	cmp	r3, #0
 8017354:	d004      	beq.n	8017360 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	695b      	ldr	r3, [r3, #20]
 801735a:	4618      	mov	r0, r3
 801735c:	f7f6 fe7e 	bl	800e05c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017360:	68f8      	ldr	r0, [r7, #12]
 8017362:	f7ff ffbd 	bl	80172e0 <ip_frag_free_pbuf_custom_ref>
}
 8017366:	bf00      	nop
 8017368:	3710      	adds	r7, #16
 801736a:	46bd      	mov	sp, r7
 801736c:	bd80      	pop	{r7, pc}
 801736e:	bf00      	nop
 8017370:	0801ded8 	.word	0x0801ded8
 8017374:	0801e09c 	.word	0x0801e09c
 8017378:	0801df20 	.word	0x0801df20
 801737c:	0801e0a8 	.word	0x0801e0a8

08017380 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b094      	sub	sp, #80	; 0x50
 8017384:	af02      	add	r7, sp, #8
 8017386:	60f8      	str	r0, [r7, #12]
 8017388:	60b9      	str	r1, [r7, #8]
 801738a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801738c:	2300      	movs	r3, #0
 801738e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017392:	68bb      	ldr	r3, [r7, #8]
 8017394:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017396:	3b14      	subs	r3, #20
 8017398:	2b00      	cmp	r3, #0
 801739a:	da00      	bge.n	801739e <ip4_frag+0x1e>
 801739c:	3307      	adds	r3, #7
 801739e:	10db      	asrs	r3, r3, #3
 80173a0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80173a2:	2314      	movs	r3, #20
 80173a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	685b      	ldr	r3, [r3, #4]
 80173aa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80173ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80173b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173b2:	781b      	ldrb	r3, [r3, #0]
 80173b4:	f003 030f 	and.w	r3, r3, #15
 80173b8:	b2db      	uxtb	r3, r3
 80173ba:	009b      	lsls	r3, r3, #2
 80173bc:	b2db      	uxtb	r3, r3
 80173be:	2b14      	cmp	r3, #20
 80173c0:	d002      	beq.n	80173c8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80173c2:	f06f 0305 	mvn.w	r3, #5
 80173c6:	e110      	b.n	80175ea <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	895b      	ldrh	r3, [r3, #10]
 80173cc:	2b13      	cmp	r3, #19
 80173ce:	d809      	bhi.n	80173e4 <ip4_frag+0x64>
 80173d0:	4b88      	ldr	r3, [pc, #544]	; (80175f4 <ip4_frag+0x274>)
 80173d2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80173d6:	4988      	ldr	r1, [pc, #544]	; (80175f8 <ip4_frag+0x278>)
 80173d8:	4888      	ldr	r0, [pc, #544]	; (80175fc <ip4_frag+0x27c>)
 80173da:	f002 fb01 	bl	80199e0 <iprintf>
 80173de:	f06f 0305 	mvn.w	r3, #5
 80173e2:	e102      	b.n	80175ea <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80173e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173e6:	88db      	ldrh	r3, [r3, #6]
 80173e8:	b29b      	uxth	r3, r3
 80173ea:	4618      	mov	r0, r3
 80173ec:	f7f5 fa34 	bl	800c858 <lwip_htons>
 80173f0:	4603      	mov	r3, r0
 80173f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80173f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80173f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80173fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80173fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017404:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	891b      	ldrh	r3, [r3, #8]
 801740a:	3b14      	subs	r3, #20
 801740c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017410:	e0e1      	b.n	80175d6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017412:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017414:	00db      	lsls	r3, r3, #3
 8017416:	b29b      	uxth	r3, r3
 8017418:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801741c:	4293      	cmp	r3, r2
 801741e:	bf28      	it	cs
 8017420:	4613      	movcs	r3, r2
 8017422:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017424:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017428:	2114      	movs	r1, #20
 801742a:	200e      	movs	r0, #14
 801742c:	f7f6 fb32 	bl	800da94 <pbuf_alloc>
 8017430:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017434:	2b00      	cmp	r3, #0
 8017436:	f000 80d5 	beq.w	80175e4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801743c:	895b      	ldrh	r3, [r3, #10]
 801743e:	2b13      	cmp	r3, #19
 8017440:	d806      	bhi.n	8017450 <ip4_frag+0xd0>
 8017442:	4b6c      	ldr	r3, [pc, #432]	; (80175f4 <ip4_frag+0x274>)
 8017444:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017448:	496d      	ldr	r1, [pc, #436]	; (8017600 <ip4_frag+0x280>)
 801744a:	486c      	ldr	r0, [pc, #432]	; (80175fc <ip4_frag+0x27c>)
 801744c:	f002 fac8 	bl	80199e0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017452:	685b      	ldr	r3, [r3, #4]
 8017454:	2214      	movs	r2, #20
 8017456:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017458:	4618      	mov	r0, r3
 801745a:	f002 faab 	bl	80199b4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017460:	685b      	ldr	r3, [r3, #4]
 8017462:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017464:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017466:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801746a:	e064      	b.n	8017536 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	895a      	ldrh	r2, [r3, #10]
 8017470:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017472:	1ad3      	subs	r3, r2, r3
 8017474:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	895b      	ldrh	r3, [r3, #10]
 801747a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801747c:	429a      	cmp	r2, r3
 801747e:	d906      	bls.n	801748e <ip4_frag+0x10e>
 8017480:	4b5c      	ldr	r3, [pc, #368]	; (80175f4 <ip4_frag+0x274>)
 8017482:	f240 322d 	movw	r2, #813	; 0x32d
 8017486:	495f      	ldr	r1, [pc, #380]	; (8017604 <ip4_frag+0x284>)
 8017488:	485c      	ldr	r0, [pc, #368]	; (80175fc <ip4_frag+0x27c>)
 801748a:	f002 faa9 	bl	80199e0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801748e:	8bfa      	ldrh	r2, [r7, #30]
 8017490:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017494:	4293      	cmp	r3, r2
 8017496:	bf28      	it	cs
 8017498:	4613      	movcs	r3, r2
 801749a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801749e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d105      	bne.n	80174b2 <ip4_frag+0x132>
        poff = 0;
 80174a6:	2300      	movs	r3, #0
 80174a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	60fb      	str	r3, [r7, #12]
        continue;
 80174b0:	e041      	b.n	8017536 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80174b2:	f7ff ff0d 	bl	80172d0 <ip_frag_alloc_pbuf_custom_ref>
 80174b6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80174b8:	69bb      	ldr	r3, [r7, #24]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d103      	bne.n	80174c6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80174be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80174c0:	f7f6 fdcc 	bl	800e05c <pbuf_free>
        goto memerr;
 80174c4:	e08f      	b.n	80175e6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80174c6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80174cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80174ce:	4413      	add	r3, r2
 80174d0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80174d4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80174d8:	9201      	str	r2, [sp, #4]
 80174da:	9300      	str	r3, [sp, #0]
 80174dc:	4603      	mov	r3, r0
 80174de:	2241      	movs	r2, #65	; 0x41
 80174e0:	2000      	movs	r0, #0
 80174e2:	f7f6 fc01 	bl	800dce8 <pbuf_alloced_custom>
 80174e6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80174e8:	697b      	ldr	r3, [r7, #20]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d106      	bne.n	80174fc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80174ee:	69b8      	ldr	r0, [r7, #24]
 80174f0:	f7ff fef6 	bl	80172e0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80174f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80174f6:	f7f6 fdb1 	bl	800e05c <pbuf_free>
        goto memerr;
 80174fa:	e074      	b.n	80175e6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80174fc:	68f8      	ldr	r0, [r7, #12]
 80174fe:	f7f6 fe53 	bl	800e1a8 <pbuf_ref>
      pcr->original = p;
 8017502:	69bb      	ldr	r3, [r7, #24]
 8017504:	68fa      	ldr	r2, [r7, #12]
 8017506:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017508:	69bb      	ldr	r3, [r7, #24]
 801750a:	4a3f      	ldr	r2, [pc, #252]	; (8017608 <ip4_frag+0x288>)
 801750c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801750e:	6979      	ldr	r1, [r7, #20]
 8017510:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017512:	f7f6 fe71 	bl	800e1f8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017516:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801751a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801751e:	1ad3      	subs	r3, r2, r3
 8017520:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017524:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017528:	2b00      	cmp	r3, #0
 801752a:	d004      	beq.n	8017536 <ip4_frag+0x1b6>
        poff = 0;
 801752c:	2300      	movs	r3, #0
 801752e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017536:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801753a:	2b00      	cmp	r3, #0
 801753c:	d196      	bne.n	801746c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801753e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017540:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017544:	4413      	add	r3, r2
 8017546:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017548:	68bb      	ldr	r3, [r7, #8]
 801754a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801754c:	f1a3 0213 	sub.w	r2, r3, #19
 8017550:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017554:	429a      	cmp	r2, r3
 8017556:	bfcc      	ite	gt
 8017558:	2301      	movgt	r3, #1
 801755a:	2300      	movle	r3, #0
 801755c:	b2db      	uxtb	r3, r3
 801755e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017560:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017564:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017568:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801756a:	6a3b      	ldr	r3, [r7, #32]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d002      	beq.n	8017576 <ip4_frag+0x1f6>
 8017570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017572:	2b00      	cmp	r3, #0
 8017574:	d003      	beq.n	801757e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017576:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017578:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801757c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801757e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017580:	4618      	mov	r0, r3
 8017582:	f7f5 f969 	bl	800c858 <lwip_htons>
 8017586:	4603      	mov	r3, r0
 8017588:	461a      	mov	r2, r3
 801758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801758c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801758e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017590:	3314      	adds	r3, #20
 8017592:	b29b      	uxth	r3, r3
 8017594:	4618      	mov	r0, r3
 8017596:	f7f5 f95f 	bl	800c858 <lwip_htons>
 801759a:	4603      	mov	r3, r0
 801759c:	461a      	mov	r2, r3
 801759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175a0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80175a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175a4:	2200      	movs	r2, #0
 80175a6:	729a      	strb	r2, [r3, #10]
 80175a8:	2200      	movs	r2, #0
 80175aa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80175ac:	68bb      	ldr	r3, [r7, #8]
 80175ae:	695b      	ldr	r3, [r3, #20]
 80175b0:	687a      	ldr	r2, [r7, #4]
 80175b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80175b4:	68b8      	ldr	r0, [r7, #8]
 80175b6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80175b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80175ba:	f7f6 fd4f 	bl	800e05c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80175be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80175c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80175c4:	1ad3      	subs	r3, r2, r3
 80175c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80175ca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80175ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80175d0:	4413      	add	r3, r2
 80175d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80175d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80175da:	2b00      	cmp	r3, #0
 80175dc:	f47f af19 	bne.w	8017412 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80175e0:	2300      	movs	r3, #0
 80175e2:	e002      	b.n	80175ea <ip4_frag+0x26a>
      goto memerr;
 80175e4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80175e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80175ea:	4618      	mov	r0, r3
 80175ec:	3748      	adds	r7, #72	; 0x48
 80175ee:	46bd      	mov	sp, r7
 80175f0:	bd80      	pop	{r7, pc}
 80175f2:	bf00      	nop
 80175f4:	0801ded8 	.word	0x0801ded8
 80175f8:	0801e0b4 	.word	0x0801e0b4
 80175fc:	0801df20 	.word	0x0801df20
 8017600:	0801e0d0 	.word	0x0801e0d0
 8017604:	0801e0f0 	.word	0x0801e0f0
 8017608:	08017319 	.word	0x08017319

0801760c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801760c:	b580      	push	{r7, lr}
 801760e:	b086      	sub	sp, #24
 8017610:	af00      	add	r7, sp, #0
 8017612:	6078      	str	r0, [r7, #4]
 8017614:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017616:	230e      	movs	r3, #14
 8017618:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	895b      	ldrh	r3, [r3, #10]
 801761e:	2b0e      	cmp	r3, #14
 8017620:	d96e      	bls.n	8017700 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	7bdb      	ldrb	r3, [r3, #15]
 8017626:	2b00      	cmp	r3, #0
 8017628:	d106      	bne.n	8017638 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801762a:	683b      	ldr	r3, [r7, #0]
 801762c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017630:	3301      	adds	r3, #1
 8017632:	b2da      	uxtb	r2, r3
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	685b      	ldr	r3, [r3, #4]
 801763c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801763e:	693b      	ldr	r3, [r7, #16]
 8017640:	7b1a      	ldrb	r2, [r3, #12]
 8017642:	7b5b      	ldrb	r3, [r3, #13]
 8017644:	021b      	lsls	r3, r3, #8
 8017646:	4313      	orrs	r3, r2
 8017648:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801764a:	693b      	ldr	r3, [r7, #16]
 801764c:	781b      	ldrb	r3, [r3, #0]
 801764e:	f003 0301 	and.w	r3, r3, #1
 8017652:	2b00      	cmp	r3, #0
 8017654:	d023      	beq.n	801769e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017656:	693b      	ldr	r3, [r7, #16]
 8017658:	781b      	ldrb	r3, [r3, #0]
 801765a:	2b01      	cmp	r3, #1
 801765c:	d10f      	bne.n	801767e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801765e:	693b      	ldr	r3, [r7, #16]
 8017660:	785b      	ldrb	r3, [r3, #1]
 8017662:	2b00      	cmp	r3, #0
 8017664:	d11b      	bne.n	801769e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017666:	693b      	ldr	r3, [r7, #16]
 8017668:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801766a:	2b5e      	cmp	r3, #94	; 0x5e
 801766c:	d117      	bne.n	801769e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	7b5b      	ldrb	r3, [r3, #13]
 8017672:	f043 0310 	orr.w	r3, r3, #16
 8017676:	b2da      	uxtb	r2, r3
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	735a      	strb	r2, [r3, #13]
 801767c:	e00f      	b.n	801769e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801767e:	693b      	ldr	r3, [r7, #16]
 8017680:	2206      	movs	r2, #6
 8017682:	4928      	ldr	r1, [pc, #160]	; (8017724 <ethernet_input+0x118>)
 8017684:	4618      	mov	r0, r3
 8017686:	f002 f985 	bl	8019994 <memcmp>
 801768a:	4603      	mov	r3, r0
 801768c:	2b00      	cmp	r3, #0
 801768e:	d106      	bne.n	801769e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	7b5b      	ldrb	r3, [r3, #13]
 8017694:	f043 0308 	orr.w	r3, r3, #8
 8017698:	b2da      	uxtb	r2, r3
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801769e:	89fb      	ldrh	r3, [r7, #14]
 80176a0:	2b08      	cmp	r3, #8
 80176a2:	d003      	beq.n	80176ac <ethernet_input+0xa0>
 80176a4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80176a8:	d014      	beq.n	80176d4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80176aa:	e032      	b.n	8017712 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80176ac:	683b      	ldr	r3, [r7, #0]
 80176ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80176b2:	f003 0308 	and.w	r3, r3, #8
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d024      	beq.n	8017704 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80176ba:	8afb      	ldrh	r3, [r7, #22]
 80176bc:	4619      	mov	r1, r3
 80176be:	6878      	ldr	r0, [r7, #4]
 80176c0:	f7f6 fc46 	bl	800df50 <pbuf_remove_header>
 80176c4:	4603      	mov	r3, r0
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d11e      	bne.n	8017708 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80176ca:	6839      	ldr	r1, [r7, #0]
 80176cc:	6878      	ldr	r0, [r7, #4]
 80176ce:	f7fe fdf7 	bl	80162c0 <ip4_input>
      break;
 80176d2:	e013      	b.n	80176fc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80176d4:	683b      	ldr	r3, [r7, #0]
 80176d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80176da:	f003 0308 	and.w	r3, r3, #8
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d014      	beq.n	801770c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80176e2:	8afb      	ldrh	r3, [r7, #22]
 80176e4:	4619      	mov	r1, r3
 80176e6:	6878      	ldr	r0, [r7, #4]
 80176e8:	f7f6 fc32 	bl	800df50 <pbuf_remove_header>
 80176ec:	4603      	mov	r3, r0
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d10e      	bne.n	8017710 <ethernet_input+0x104>
        etharp_input(p, netif);
 80176f2:	6839      	ldr	r1, [r7, #0]
 80176f4:	6878      	ldr	r0, [r7, #4]
 80176f6:	f7fd ff97 	bl	8015628 <etharp_input>
      break;
 80176fa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80176fc:	2300      	movs	r3, #0
 80176fe:	e00c      	b.n	801771a <ethernet_input+0x10e>
    goto free_and_return;
 8017700:	bf00      	nop
 8017702:	e006      	b.n	8017712 <ethernet_input+0x106>
        goto free_and_return;
 8017704:	bf00      	nop
 8017706:	e004      	b.n	8017712 <ethernet_input+0x106>
        goto free_and_return;
 8017708:	bf00      	nop
 801770a:	e002      	b.n	8017712 <ethernet_input+0x106>
        goto free_and_return;
 801770c:	bf00      	nop
 801770e:	e000      	b.n	8017712 <ethernet_input+0x106>
        goto free_and_return;
 8017710:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017712:	6878      	ldr	r0, [r7, #4]
 8017714:	f7f6 fca2 	bl	800e05c <pbuf_free>
  return ERR_OK;
 8017718:	2300      	movs	r3, #0
}
 801771a:	4618      	mov	r0, r3
 801771c:	3718      	adds	r7, #24
 801771e:	46bd      	mov	sp, r7
 8017720:	bd80      	pop	{r7, pc}
 8017722:	bf00      	nop
 8017724:	0801e338 	.word	0x0801e338

08017728 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017728:	b580      	push	{r7, lr}
 801772a:	b086      	sub	sp, #24
 801772c:	af00      	add	r7, sp, #0
 801772e:	60f8      	str	r0, [r7, #12]
 8017730:	60b9      	str	r1, [r7, #8]
 8017732:	607a      	str	r2, [r7, #4]
 8017734:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017736:	8c3b      	ldrh	r3, [r7, #32]
 8017738:	4618      	mov	r0, r3
 801773a:	f7f5 f88d 	bl	800c858 <lwip_htons>
 801773e:	4603      	mov	r3, r0
 8017740:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017742:	210e      	movs	r1, #14
 8017744:	68b8      	ldr	r0, [r7, #8]
 8017746:	f7f6 fbf3 	bl	800df30 <pbuf_add_header>
 801774a:	4603      	mov	r3, r0
 801774c:	2b00      	cmp	r3, #0
 801774e:	d125      	bne.n	801779c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017750:	68bb      	ldr	r3, [r7, #8]
 8017752:	685b      	ldr	r3, [r3, #4]
 8017754:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017756:	693b      	ldr	r3, [r7, #16]
 8017758:	8afa      	ldrh	r2, [r7, #22]
 801775a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801775c:	693b      	ldr	r3, [r7, #16]
 801775e:	2206      	movs	r2, #6
 8017760:	6839      	ldr	r1, [r7, #0]
 8017762:	4618      	mov	r0, r3
 8017764:	f002 f926 	bl	80199b4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017768:	693b      	ldr	r3, [r7, #16]
 801776a:	3306      	adds	r3, #6
 801776c:	2206      	movs	r2, #6
 801776e:	6879      	ldr	r1, [r7, #4]
 8017770:	4618      	mov	r0, r3
 8017772:	f002 f91f 	bl	80199b4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801777c:	2b06      	cmp	r3, #6
 801777e:	d006      	beq.n	801778e <ethernet_output+0x66>
 8017780:	4b0a      	ldr	r3, [pc, #40]	; (80177ac <ethernet_output+0x84>)
 8017782:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017786:	490a      	ldr	r1, [pc, #40]	; (80177b0 <ethernet_output+0x88>)
 8017788:	480a      	ldr	r0, [pc, #40]	; (80177b4 <ethernet_output+0x8c>)
 801778a:	f002 f929 	bl	80199e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	699b      	ldr	r3, [r3, #24]
 8017792:	68b9      	ldr	r1, [r7, #8]
 8017794:	68f8      	ldr	r0, [r7, #12]
 8017796:	4798      	blx	r3
 8017798:	4603      	mov	r3, r0
 801779a:	e002      	b.n	80177a2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801779c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801779e:	f06f 0301 	mvn.w	r3, #1
}
 80177a2:	4618      	mov	r0, r3
 80177a4:	3718      	adds	r7, #24
 80177a6:	46bd      	mov	sp, r7
 80177a8:	bd80      	pop	{r7, pc}
 80177aa:	bf00      	nop
 80177ac:	0801e100 	.word	0x0801e100
 80177b0:	0801e138 	.word	0x0801e138
 80177b4:	0801e16c 	.word	0x0801e16c

080177b8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b086      	sub	sp, #24
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
 80177c0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80177c2:	683b      	ldr	r3, [r7, #0]
 80177c4:	60bb      	str	r3, [r7, #8]
 80177c6:	2304      	movs	r3, #4
 80177c8:	60fb      	str	r3, [r7, #12]
 80177ca:	2300      	movs	r3, #0
 80177cc:	613b      	str	r3, [r7, #16]
 80177ce:	2300      	movs	r3, #0
 80177d0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80177d2:	f107 0308 	add.w	r3, r7, #8
 80177d6:	2100      	movs	r1, #0
 80177d8:	4618      	mov	r0, r3
 80177da:	f7f0 f872 	bl	80078c2 <osMessageCreate>
 80177de:	4602      	mov	r2, r0
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d102      	bne.n	80177f2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80177ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80177f0:	e000      	b.n	80177f4 <sys_mbox_new+0x3c>

  return ERR_OK;
 80177f2:	2300      	movs	r3, #0
}
 80177f4:	4618      	mov	r0, r3
 80177f6:	3718      	adds	r7, #24
 80177f8:	46bd      	mov	sp, r7
 80177fa:	bd80      	pop	{r7, pc}

080177fc <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80177fc:	b580      	push	{r7, lr}
 80177fe:	b082      	sub	sp, #8
 8017800:	af00      	add	r7, sp, #0
 8017802:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	4618      	mov	r0, r3
 801780a:	f7f0 f937 	bl	8007a7c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	4618      	mov	r0, r3
 8017814:	f7f0 f948 	bl	8007aa8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017818:	bf00      	nop
 801781a:	3708      	adds	r7, #8
 801781c:	46bd      	mov	sp, r7
 801781e:	bd80      	pop	{r7, pc}

08017820 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017820:	b580      	push	{r7, lr}
 8017822:	b084      	sub	sp, #16
 8017824:	af00      	add	r7, sp, #0
 8017826:	6078      	str	r0, [r7, #4]
 8017828:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	6839      	ldr	r1, [r7, #0]
 8017830:	2200      	movs	r2, #0
 8017832:	4618      	mov	r0, r3
 8017834:	f7f0 f86e 	bl	8007914 <osMessagePut>
 8017838:	4603      	mov	r3, r0
 801783a:	2b00      	cmp	r3, #0
 801783c:	d102      	bne.n	8017844 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801783e:	2300      	movs	r3, #0
 8017840:	73fb      	strb	r3, [r7, #15]
 8017842:	e001      	b.n	8017848 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017844:	23ff      	movs	r3, #255	; 0xff
 8017846:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017848:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801784c:	4618      	mov	r0, r3
 801784e:	3710      	adds	r7, #16
 8017850:	46bd      	mov	sp, r7
 8017852:	bd80      	pop	{r7, pc}

08017854 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017854:	b580      	push	{r7, lr}
 8017856:	b08c      	sub	sp, #48	; 0x30
 8017858:	af00      	add	r7, sp, #0
 801785a:	61f8      	str	r0, [r7, #28]
 801785c:	61b9      	str	r1, [r7, #24]
 801785e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017860:	f7ef fe5a 	bl	8007518 <osKernelSysTick>
 8017864:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017866:	697b      	ldr	r3, [r7, #20]
 8017868:	2b00      	cmp	r3, #0
 801786a:	d017      	beq.n	801789c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801786c:	69fb      	ldr	r3, [r7, #28]
 801786e:	6819      	ldr	r1, [r3, #0]
 8017870:	f107 0320 	add.w	r3, r7, #32
 8017874:	697a      	ldr	r2, [r7, #20]
 8017876:	4618      	mov	r0, r3
 8017878:	f7f0 f88c 	bl	8007994 <osMessageGet>

    if(event.status == osEventMessage)
 801787c:	6a3b      	ldr	r3, [r7, #32]
 801787e:	2b10      	cmp	r3, #16
 8017880:	d109      	bne.n	8017896 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017884:	461a      	mov	r2, r3
 8017886:	69bb      	ldr	r3, [r7, #24]
 8017888:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801788a:	f7ef fe45 	bl	8007518 <osKernelSysTick>
 801788e:	4602      	mov	r2, r0
 8017890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017892:	1ad3      	subs	r3, r2, r3
 8017894:	e019      	b.n	80178ca <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801789a:	e016      	b.n	80178ca <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801789c:	69fb      	ldr	r3, [r7, #28]
 801789e:	6819      	ldr	r1, [r3, #0]
 80178a0:	463b      	mov	r3, r7
 80178a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80178a6:	4618      	mov	r0, r3
 80178a8:	f7f0 f874 	bl	8007994 <osMessageGet>
 80178ac:	f107 0320 	add.w	r3, r7, #32
 80178b0:	463a      	mov	r2, r7
 80178b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80178b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80178b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178ba:	461a      	mov	r2, r3
 80178bc:	69bb      	ldr	r3, [r7, #24]
 80178be:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80178c0:	f7ef fe2a 	bl	8007518 <osKernelSysTick>
 80178c4:	4602      	mov	r2, r0
 80178c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178c8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80178ca:	4618      	mov	r0, r3
 80178cc:	3730      	adds	r7, #48	; 0x30
 80178ce:	46bd      	mov	sp, r7
 80178d0:	bd80      	pop	{r7, pc}

080178d2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80178d2:	b580      	push	{r7, lr}
 80178d4:	b086      	sub	sp, #24
 80178d6:	af00      	add	r7, sp, #0
 80178d8:	6078      	str	r0, [r7, #4]
 80178da:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	6819      	ldr	r1, [r3, #0]
 80178e0:	f107 030c 	add.w	r3, r7, #12
 80178e4:	2200      	movs	r2, #0
 80178e6:	4618      	mov	r0, r3
 80178e8:	f7f0 f854 	bl	8007994 <osMessageGet>

  if(event.status == osEventMessage)
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	2b10      	cmp	r3, #16
 80178f0:	d105      	bne.n	80178fe <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80178f2:	693b      	ldr	r3, [r7, #16]
 80178f4:	461a      	mov	r2, r3
 80178f6:	683b      	ldr	r3, [r7, #0]
 80178f8:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80178fa:	2300      	movs	r3, #0
 80178fc:	e001      	b.n	8017902 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80178fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8017902:	4618      	mov	r0, r3
 8017904:	3718      	adds	r7, #24
 8017906:	46bd      	mov	sp, r7
 8017908:	bd80      	pop	{r7, pc}

0801790a <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801790a:	b480      	push	{r7}
 801790c:	b083      	sub	sp, #12
 801790e:	af00      	add	r7, sp, #0
 8017910:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	681b      	ldr	r3, [r3, #0]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d101      	bne.n	801791e <sys_mbox_valid+0x14>
    return 0;
 801791a:	2300      	movs	r3, #0
 801791c:	e000      	b.n	8017920 <sys_mbox_valid+0x16>
  else
    return 1;
 801791e:	2301      	movs	r3, #1
}
 8017920:	4618      	mov	r0, r3
 8017922:	370c      	adds	r7, #12
 8017924:	46bd      	mov	sp, r7
 8017926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801792a:	4770      	bx	lr

0801792c <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801792c:	b480      	push	{r7}
 801792e:	b083      	sub	sp, #12
 8017930:	af00      	add	r7, sp, #0
 8017932:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	2200      	movs	r2, #0
 8017938:	601a      	str	r2, [r3, #0]
}
 801793a:	bf00      	nop
 801793c:	370c      	adds	r7, #12
 801793e:	46bd      	mov	sp, r7
 8017940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017944:	4770      	bx	lr

08017946 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017946:	b580      	push	{r7, lr}
 8017948:	b084      	sub	sp, #16
 801794a:	af00      	add	r7, sp, #0
 801794c:	6078      	str	r0, [r7, #4]
 801794e:	460b      	mov	r3, r1
 8017950:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8017952:	2300      	movs	r3, #0
 8017954:	60bb      	str	r3, [r7, #8]
 8017956:	2300      	movs	r3, #0
 8017958:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801795a:	f107 0308 	add.w	r3, r7, #8
 801795e:	2101      	movs	r1, #1
 8017960:	4618      	mov	r0, r3
 8017962:	f7ef fee5 	bl	8007730 <osSemaphoreCreate>
 8017966:	4602      	mov	r2, r0
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d102      	bne.n	801797a <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017978:	e009      	b.n	801798e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801797a:	78fb      	ldrb	r3, [r7, #3]
 801797c:	2b00      	cmp	r3, #0
 801797e:	d105      	bne.n	801798c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	2100      	movs	r1, #0
 8017986:	4618      	mov	r0, r3
 8017988:	f7ef ff04 	bl	8007794 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801798c:	2300      	movs	r3, #0
}
 801798e:	4618      	mov	r0, r3
 8017990:	3710      	adds	r7, #16
 8017992:	46bd      	mov	sp, r7
 8017994:	bd80      	pop	{r7, pc}

08017996 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8017996:	b580      	push	{r7, lr}
 8017998:	b084      	sub	sp, #16
 801799a:	af00      	add	r7, sp, #0
 801799c:	6078      	str	r0, [r7, #4]
 801799e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80179a0:	f7ef fdba 	bl	8007518 <osKernelSysTick>
 80179a4:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80179a6:	683b      	ldr	r3, [r7, #0]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d011      	beq.n	80179d0 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	6839      	ldr	r1, [r7, #0]
 80179b2:	4618      	mov	r0, r3
 80179b4:	f7ef feee 	bl	8007794 <osSemaphoreWait>
 80179b8:	4603      	mov	r3, r0
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d105      	bne.n	80179ca <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80179be:	f7ef fdab 	bl	8007518 <osKernelSysTick>
 80179c2:	4602      	mov	r2, r0
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	1ad3      	subs	r3, r2, r3
 80179c8:	e012      	b.n	80179f0 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80179ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80179ce:	e00f      	b.n	80179f0 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80179d0:	bf00      	nop
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80179da:	4618      	mov	r0, r3
 80179dc:	f7ef feda 	bl	8007794 <osSemaphoreWait>
 80179e0:	4603      	mov	r3, r0
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d1f5      	bne.n	80179d2 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80179e6:	f7ef fd97 	bl	8007518 <osKernelSysTick>
 80179ea:	4602      	mov	r2, r0
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80179f0:	4618      	mov	r0, r3
 80179f2:	3710      	adds	r7, #16
 80179f4:	46bd      	mov	sp, r7
 80179f6:	bd80      	pop	{r7, pc}

080179f8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b082      	sub	sp, #8
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	4618      	mov	r0, r3
 8017a06:	f7ef ff13 	bl	8007830 <osSemaphoreRelease>
}
 8017a0a:	bf00      	nop
 8017a0c:	3708      	adds	r7, #8
 8017a0e:	46bd      	mov	sp, r7
 8017a10:	bd80      	pop	{r7, pc}

08017a12 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8017a12:	b580      	push	{r7, lr}
 8017a14:	b082      	sub	sp, #8
 8017a16:	af00      	add	r7, sp, #0
 8017a18:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	4618      	mov	r0, r3
 8017a20:	f7ef ff3c 	bl	800789c <osSemaphoreDelete>
}
 8017a24:	bf00      	nop
 8017a26:	3708      	adds	r7, #8
 8017a28:	46bd      	mov	sp, r7
 8017a2a:	bd80      	pop	{r7, pc}

08017a2c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017a2c:	b480      	push	{r7}
 8017a2e:	b083      	sub	sp, #12
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d101      	bne.n	8017a40 <sys_sem_valid+0x14>
    return 0;
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	e000      	b.n	8017a42 <sys_sem_valid+0x16>
  else
    return 1;
 8017a40:	2301      	movs	r3, #1
}
 8017a42:	4618      	mov	r0, r3
 8017a44:	370c      	adds	r7, #12
 8017a46:	46bd      	mov	sp, r7
 8017a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a4c:	4770      	bx	lr

08017a4e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017a4e:	b480      	push	{r7}
 8017a50:	b083      	sub	sp, #12
 8017a52:	af00      	add	r7, sp, #0
 8017a54:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	2200      	movs	r2, #0
 8017a5a:	601a      	str	r2, [r3, #0]
}
 8017a5c:	bf00      	nop
 8017a5e:	370c      	adds	r7, #12
 8017a60:	46bd      	mov	sp, r7
 8017a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a66:	4770      	bx	lr

08017a68 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017a68:	b580      	push	{r7, lr}
 8017a6a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017a6c:	4803      	ldr	r0, [pc, #12]	; (8017a7c <sys_init+0x14>)
 8017a6e:	f7ef fdc3 	bl	80075f8 <osMutexCreate>
 8017a72:	4603      	mov	r3, r0
 8017a74:	4a02      	ldr	r2, [pc, #8]	; (8017a80 <sys_init+0x18>)
 8017a76:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017a78:	bf00      	nop
 8017a7a:	bd80      	pop	{r7, pc}
 8017a7c:	0801e348 	.word	0x0801e348
 8017a80:	200113fc 	.word	0x200113fc

08017a84 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017a84:	b580      	push	{r7, lr}
 8017a86:	b084      	sub	sp, #16
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017a8c:	2300      	movs	r3, #0
 8017a8e:	60bb      	str	r3, [r7, #8]
 8017a90:	2300      	movs	r3, #0
 8017a92:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017a94:	f107 0308 	add.w	r3, r7, #8
 8017a98:	4618      	mov	r0, r3
 8017a9a:	f7ef fdad 	bl	80075f8 <osMutexCreate>
 8017a9e:	4602      	mov	r2, r0
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d102      	bne.n	8017ab2 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017ab0:	e000      	b.n	8017ab4 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017ab2:	2300      	movs	r3, #0
}
 8017ab4:	4618      	mov	r0, r3
 8017ab6:	3710      	adds	r7, #16
 8017ab8:	46bd      	mov	sp, r7
 8017aba:	bd80      	pop	{r7, pc}

08017abc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b082      	sub	sp, #8
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017acc:	4618      	mov	r0, r3
 8017ace:	f7ef fdab 	bl	8007628 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017ad2:	bf00      	nop
 8017ad4:	3708      	adds	r7, #8
 8017ad6:	46bd      	mov	sp, r7
 8017ad8:	bd80      	pop	{r7, pc}

08017ada <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017ada:	b580      	push	{r7, lr}
 8017adc:	b082      	sub	sp, #8
 8017ade:	af00      	add	r7, sp, #0
 8017ae0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	f7ef fdec 	bl	80076c4 <osMutexRelease>
}
 8017aec:	bf00      	nop
 8017aee:	3708      	adds	r7, #8
 8017af0:	46bd      	mov	sp, r7
 8017af2:	bd80      	pop	{r7, pc}

08017af4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017af4:	b580      	push	{r7, lr}
 8017af6:	b08c      	sub	sp, #48	; 0x30
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	60f8      	str	r0, [r7, #12]
 8017afc:	60b9      	str	r1, [r7, #8]
 8017afe:	607a      	str	r2, [r7, #4]
 8017b00:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8017b02:	f107 0314 	add.w	r3, r7, #20
 8017b06:	2200      	movs	r2, #0
 8017b08:	601a      	str	r2, [r3, #0]
 8017b0a:	605a      	str	r2, [r3, #4]
 8017b0c:	609a      	str	r2, [r3, #8]
 8017b0e:	60da      	str	r2, [r3, #12]
 8017b10:	611a      	str	r2, [r3, #16]
 8017b12:	615a      	str	r2, [r3, #20]
 8017b14:	619a      	str	r2, [r3, #24]
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	617b      	str	r3, [r7, #20]
 8017b1a:	68bb      	ldr	r3, [r7, #8]
 8017b1c:	61bb      	str	r3, [r7, #24]
 8017b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b20:	b21b      	sxth	r3, r3
 8017b22:	83bb      	strh	r3, [r7, #28]
 8017b24:	683b      	ldr	r3, [r7, #0]
 8017b26:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017b28:	f107 0314 	add.w	r3, r7, #20
 8017b2c:	6879      	ldr	r1, [r7, #4]
 8017b2e:	4618      	mov	r0, r3
 8017b30:	f7ef fd02 	bl	8007538 <osThreadCreate>
 8017b34:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8017b36:	4618      	mov	r0, r3
 8017b38:	3730      	adds	r7, #48	; 0x30
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	bd80      	pop	{r7, pc}
	...

08017b40 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017b40:	b580      	push	{r7, lr}
 8017b42:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017b44:	4b04      	ldr	r3, [pc, #16]	; (8017b58 <sys_arch_protect+0x18>)
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	f7ef fd6b 	bl	8007628 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017b52:	2301      	movs	r3, #1
}
 8017b54:	4618      	mov	r0, r3
 8017b56:	bd80      	pop	{r7, pc}
 8017b58:	200113fc 	.word	0x200113fc

08017b5c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017b5c:	b580      	push	{r7, lr}
 8017b5e:	b082      	sub	sp, #8
 8017b60:	af00      	add	r7, sp, #0
 8017b62:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017b64:	4b04      	ldr	r3, [pc, #16]	; (8017b78 <sys_arch_unprotect+0x1c>)
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	4618      	mov	r0, r3
 8017b6a:	f7ef fdab 	bl	80076c4 <osMutexRelease>
}
 8017b6e:	bf00      	nop
 8017b70:	3708      	adds	r7, #8
 8017b72:	46bd      	mov	sp, r7
 8017b74:	bd80      	pop	{r7, pc}
 8017b76:	bf00      	nop
 8017b78:	200113fc 	.word	0x200113fc

08017b7c <NewMessageData>:
#include "MQTTClient.h"

#include <stdio.h>
#include <string.h>

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8017b7c:	b480      	push	{r7}
 8017b7e:	b085      	sub	sp, #20
 8017b80:	af00      	add	r7, sp, #0
 8017b82:	60f8      	str	r0, [r7, #12]
 8017b84:	60b9      	str	r1, [r7, #8]
 8017b86:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	68ba      	ldr	r2, [r7, #8]
 8017b8c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	687a      	ldr	r2, [r7, #4]
 8017b92:	601a      	str	r2, [r3, #0]
}
 8017b94:	bf00      	nop
 8017b96:	3714      	adds	r7, #20
 8017b98:	46bd      	mov	sp, r7
 8017b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b9e:	4770      	bx	lr

08017ba0 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8017ba0:	b480      	push	{r7}
 8017ba2:	b083      	sub	sp, #12
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017bb0:	4293      	cmp	r3, r2
 8017bb2:	d003      	beq.n	8017bbc <getNextPacketId+0x1c>
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	3301      	adds	r3, #1
 8017bba:	e000      	b.n	8017bbe <getNextPacketId+0x1e>
 8017bbc:	2301      	movs	r3, #1
 8017bbe:	687a      	ldr	r2, [r7, #4]
 8017bc0:	6013      	str	r3, [r2, #0]
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	681b      	ldr	r3, [r3, #0]
}
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	370c      	adds	r7, #12
 8017bca:	46bd      	mov	sp, r7
 8017bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bd0:	4770      	bx	lr

08017bd2 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8017bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bd4:	b087      	sub	sp, #28
 8017bd6:	af00      	add	r7, sp, #0
 8017bd8:	60f8      	str	r0, [r7, #12]
 8017bda:	60b9      	str	r1, [r7, #8]
 8017bdc:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8017bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017be2:	617b      	str	r3, [r7, #20]
        sent = 0;
 8017be4:	2300      	movs	r3, #0
 8017be6:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 8017be8:	e018      	b.n	8017c1c <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017bee:	691c      	ldr	r4, [r3, #16]
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	691a      	ldr	r2, [r3, #16]
 8017bf8:	693b      	ldr	r3, [r7, #16]
 8017bfa:	18d6      	adds	r6, r2, r3
 8017bfc:	6878      	ldr	r0, [r7, #4]
 8017bfe:	f000 fecb 	bl	8018998 <TimerLeftMS>
 8017c02:	4603      	mov	r3, r0
 8017c04:	68ba      	ldr	r2, [r7, #8]
 8017c06:	4631      	mov	r1, r6
 8017c08:	4628      	mov	r0, r5
 8017c0a:	47a0      	blx	r4
 8017c0c:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8017c0e:	697b      	ldr	r3, [r7, #20]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	db0e      	blt.n	8017c32 <sendPacket+0x60>
            break;
        sent += rc;
 8017c14:	693a      	ldr	r2, [r7, #16]
 8017c16:	697b      	ldr	r3, [r7, #20]
 8017c18:	4413      	add	r3, r2
 8017c1a:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8017c1c:	693a      	ldr	r2, [r7, #16]
 8017c1e:	68bb      	ldr	r3, [r7, #8]
 8017c20:	429a      	cmp	r2, r3
 8017c22:	da07      	bge.n	8017c34 <sendPacket+0x62>
 8017c24:	6878      	ldr	r0, [r7, #4]
 8017c26:	f000 fe75 	bl	8018914 <TimerIsExpired>
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d0dc      	beq.n	8017bea <sendPacket+0x18>
 8017c30:	e000      	b.n	8017c34 <sendPacket+0x62>
            break;
 8017c32:	bf00      	nop
    }
    if (sent == length)
 8017c34:	693a      	ldr	r2, [r7, #16]
 8017c36:	68bb      	ldr	r3, [r7, #8]
 8017c38:	429a      	cmp	r2, r3
 8017c3a:	d10b      	bne.n	8017c54 <sendPacket+0x82>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	699b      	ldr	r3, [r3, #24]
 8017c46:	4619      	mov	r1, r3
 8017c48:	4610      	mov	r0, r2
 8017c4a:	f000 fe8d 	bl	8018968 <TimerCountdown>
        rc = MQTT_SUCCESS;
 8017c4e:	2300      	movs	r3, #0
 8017c50:	617b      	str	r3, [r7, #20]
 8017c52:	e002      	b.n	8017c5a <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8017c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017c58:	617b      	str	r3, [r7, #20]
    return rc;
 8017c5a:	697b      	ldr	r3, [r7, #20]
}
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	371c      	adds	r7, #28
 8017c60:	46bd      	mov	sp, r7
 8017c62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017c64 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8017c64:	b580      	push	{r7, lr}
 8017c66:	b086      	sub	sp, #24
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	60f8      	str	r0, [r7, #12]
 8017c6c:	60b9      	str	r1, [r7, #8]
 8017c6e:	607a      	str	r2, [r7, #4]
 8017c70:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	68ba      	ldr	r2, [r7, #8]
 8017c76:	655a      	str	r2, [r3, #84]	; 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8017c78:	2300      	movs	r3, #0
 8017c7a:	617b      	str	r3, [r7, #20]
 8017c7c:	e008      	b.n	8017c90 <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	697a      	ldr	r2, [r7, #20]
 8017c82:	3205      	adds	r2, #5
 8017c84:	2100      	movs	r1, #0
 8017c86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8017c8a:	697b      	ldr	r3, [r7, #20]
 8017c8c:	3301      	adds	r3, #1
 8017c8e:	617b      	str	r3, [r7, #20]
 8017c90:	697b      	ldr	r3, [r7, #20]
 8017c92:	2b04      	cmp	r3, #4
 8017c94:	ddf3      	ble.n	8017c7e <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	687a      	ldr	r2, [r7, #4]
 8017c9a:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	683a      	ldr	r2, [r7, #0]
 8017ca0:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	6a3a      	ldr	r2, [r7, #32]
 8017ca6:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017cac:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017cb2:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	2200      	movs	r2, #0
 8017cb8:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	2200      	movs	r2, #0
 8017cbe:	625a      	str	r2, [r3, #36]	; 0x24
    c->ping_outstanding = 0;
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	2200      	movs	r2, #0
 8017cc4:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	2200      	movs	r2, #0
 8017cca:	651a      	str	r2, [r3, #80]	; 0x50
	  c->next_packetid = 1;
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	2201      	movs	r2, #1
 8017cd0:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	3358      	adds	r3, #88	; 0x58
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	f000 fe74 	bl	80189c4 <TimerInit>
    TimerInit(&c->last_received);
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	3360      	adds	r3, #96	; 0x60
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	f000 fe6f 	bl	80189c4 <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 8017ce6:	bf00      	nop
 8017ce8:	3718      	adds	r7, #24
 8017cea:	46bd      	mov	sp, r7
 8017cec:	bd80      	pop	{r7, pc}

08017cee <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8017cee:	b590      	push	{r4, r7, lr}
 8017cf0:	b08b      	sub	sp, #44	; 0x2c
 8017cf2:	af00      	add	r7, sp, #0
 8017cf4:	60f8      	str	r0, [r7, #12]
 8017cf6:	60b9      	str	r1, [r7, #8]
 8017cf8:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8017cfa:	2301      	movs	r3, #1
 8017cfc:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 8017cfe:	2300      	movs	r3, #0
 8017d00:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8017d02:	2304      	movs	r3, #4
 8017d04:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8017d06:	68bb      	ldr	r3, [r7, #8]
 8017d08:	2200      	movs	r2, #0
 8017d0a:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8017d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017d10:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8017d12:	6a3b      	ldr	r3, [r7, #32]
 8017d14:	3301      	adds	r3, #1
 8017d16:	623b      	str	r3, [r7, #32]
 8017d18:	6a3a      	ldr	r2, [r7, #32]
 8017d1a:	69fb      	ldr	r3, [r7, #28]
 8017d1c:	429a      	cmp	r2, r3
 8017d1e:	dd03      	ble.n	8017d28 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8017d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017d24:	61bb      	str	r3, [r7, #24]
            goto exit;
 8017d26:	e021      	b.n	8017d6c <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017d2c:	68dc      	ldr	r4, [r3, #12]
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8017d32:	f107 0117 	add.w	r1, r7, #23
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	2201      	movs	r2, #1
 8017d3a:	47a0      	blx	r4
 8017d3c:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8017d3e:	69bb      	ldr	r3, [r7, #24]
 8017d40:	2b01      	cmp	r3, #1
 8017d42:	d112      	bne.n	8017d6a <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8017d44:	68bb      	ldr	r3, [r7, #8]
 8017d46:	681a      	ldr	r2, [r3, #0]
 8017d48:	7dfb      	ldrb	r3, [r7, #23]
 8017d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017d4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017d50:	fb01 f303 	mul.w	r3, r1, r3
 8017d54:	441a      	add	r2, r3
 8017d56:	68bb      	ldr	r3, [r7, #8]
 8017d58:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8017d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d5c:	01db      	lsls	r3, r3, #7
 8017d5e:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 8017d60:	7dfb      	ldrb	r3, [r7, #23]
 8017d62:	b25b      	sxtb	r3, r3
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	dbd1      	blt.n	8017d0c <decodePacket+0x1e>
exit:
 8017d68:	e000      	b.n	8017d6c <decodePacket+0x7e>
            goto exit;
 8017d6a:	bf00      	nop
    return len;
 8017d6c:	6a3b      	ldr	r3, [r7, #32]
}
 8017d6e:	4618      	mov	r0, r3
 8017d70:	372c      	adds	r7, #44	; 0x2c
 8017d72:	46bd      	mov	sp, r7
 8017d74:	bd90      	pop	{r4, r7, pc}

08017d76 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8017d76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d78:	b089      	sub	sp, #36	; 0x24
 8017d7a:	af00      	add	r7, sp, #0
 8017d7c:	60f8      	str	r0, [r7, #12]
 8017d7e:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 8017d80:	2300      	movs	r3, #0
 8017d82:	617b      	str	r3, [r7, #20]
    int len = 0;
 8017d84:	2300      	movs	r3, #0
 8017d86:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8017d88:	2300      	movs	r3, #0
 8017d8a:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017d90:	68dc      	ldr	r4, [r3, #12]
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8017d96:	68fb      	ldr	r3, [r7, #12]
 8017d98:	695e      	ldr	r6, [r3, #20]
 8017d9a:	68b8      	ldr	r0, [r7, #8]
 8017d9c:	f000 fdfc 	bl	8018998 <TimerLeftMS>
 8017da0:	4603      	mov	r3, r0
 8017da2:	2201      	movs	r2, #1
 8017da4:	4631      	mov	r1, r6
 8017da6:	4628      	mov	r0, r5
 8017da8:	47a0      	blx	r4
 8017daa:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 8017dac:	69fb      	ldr	r3, [r7, #28]
 8017dae:	2b01      	cmp	r3, #1
 8017db0:	d15d      	bne.n	8017e6e <readPacket+0xf8>
        goto exit;

    len = 1;
 8017db2:	2301      	movs	r3, #1
 8017db4:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8017db6:	68b8      	ldr	r0, [r7, #8]
 8017db8:	f000 fdee 	bl	8018998 <TimerLeftMS>
 8017dbc:	4602      	mov	r2, r0
 8017dbe:	f107 0310 	add.w	r3, r7, #16
 8017dc2:	4619      	mov	r1, r3
 8017dc4:	68f8      	ldr	r0, [r7, #12]
 8017dc6:	f7ff ff92 	bl	8017cee <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	695b      	ldr	r3, [r3, #20]
 8017dce:	3301      	adds	r3, #1
 8017dd0:	693a      	ldr	r2, [r7, #16]
 8017dd2:	4611      	mov	r1, r2
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	f001 f9bd 	bl	8019154 <MQTTPacket_encode>
 8017dda:	4602      	mov	r2, r0
 8017ddc:	69bb      	ldr	r3, [r7, #24]
 8017dde:	4413      	add	r3, r2
 8017de0:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	68da      	ldr	r2, [r3, #12]
 8017de6:	69bb      	ldr	r3, [r7, #24]
 8017de8:	1ad3      	subs	r3, r2, r3
 8017dea:	693a      	ldr	r2, [r7, #16]
 8017dec:	4293      	cmp	r3, r2
 8017dee:	d203      	bcs.n	8017df8 <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 8017df0:	f06f 0301 	mvn.w	r3, #1
 8017df4:	61fb      	str	r3, [r7, #28]
        goto exit;
 8017df6:	e03d      	b.n	8017e74 <readPacket+0xfe>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 8017df8:	693b      	ldr	r3, [r7, #16]
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	dd20      	ble.n	8017e40 <readPacket+0xca>
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017e02:	68dc      	ldr	r4, [r3, #12]
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	695a      	ldr	r2, [r3, #20]
 8017e0c:	69bb      	ldr	r3, [r7, #24]
 8017e0e:	18d6      	adds	r6, r2, r3
 8017e10:	693b      	ldr	r3, [r7, #16]
 8017e12:	607b      	str	r3, [r7, #4]
 8017e14:	68b8      	ldr	r0, [r7, #8]
 8017e16:	f000 fdbf 	bl	8018998 <TimerLeftMS>
 8017e1a:	4603      	mov	r3, r0
 8017e1c:	687a      	ldr	r2, [r7, #4]
 8017e1e:	4631      	mov	r1, r6
 8017e20:	4628      	mov	r0, r5
 8017e22:	47a0      	blx	r4
 8017e24:	4602      	mov	r2, r0
 8017e26:	693b      	ldr	r3, [r7, #16]
 8017e28:	429a      	cmp	r2, r3
 8017e2a:	bf14      	ite	ne
 8017e2c:	2301      	movne	r3, #1
 8017e2e:	2300      	moveq	r3, #0
 8017e30:	b2db      	uxtb	r3, r3
 8017e32:	61fb      	str	r3, [r7, #28]
 8017e34:	69fb      	ldr	r3, [r7, #28]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d002      	beq.n	8017e40 <readPacket+0xca>
        rc = 0;
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	61fb      	str	r3, [r7, #28]
        goto exit;
 8017e3e:	e019      	b.n	8017e74 <readPacket+0xfe>
    }

    header.byte = c->readbuf[0];
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	695b      	ldr	r3, [r3, #20]
 8017e44:	781b      	ldrb	r3, [r3, #0]
 8017e46:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8017e48:	7d3b      	ldrb	r3, [r7, #20]
 8017e4a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8017e4e:	b2db      	uxtb	r3, r3
 8017e50:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	699b      	ldr	r3, [r3, #24]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d00b      	beq.n	8017e72 <readPacket+0xfc>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have successfully received a packet
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	699b      	ldr	r3, [r3, #24]
 8017e64:	4619      	mov	r1, r3
 8017e66:	4610      	mov	r0, r2
 8017e68:	f000 fd7e 	bl	8018968 <TimerCountdown>
 8017e6c:	e002      	b.n	8017e74 <readPacket+0xfe>
        goto exit;
 8017e6e:	bf00      	nop
 8017e70:	e000      	b.n	8017e74 <readPacket+0xfe>
exit:
 8017e72:	bf00      	nop
    return rc;
 8017e74:	69fb      	ldr	r3, [r7, #28]
}
 8017e76:	4618      	mov	r0, r3
 8017e78:	3724      	adds	r7, #36	; 0x24
 8017e7a:	46bd      	mov	sp, r7
 8017e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017e7e <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8017e7e:	b480      	push	{r7}
 8017e80:	b087      	sub	sp, #28
 8017e82:	af00      	add	r7, sp, #0
 8017e84:	6078      	str	r0, [r7, #4]
 8017e86:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8017e8c:	683b      	ldr	r3, [r7, #0]
 8017e8e:	689b      	ldr	r3, [r3, #8]
 8017e90:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8017e92:	683b      	ldr	r3, [r7, #0]
 8017e94:	685b      	ldr	r3, [r3, #4]
 8017e96:	461a      	mov	r2, r3
 8017e98:	693b      	ldr	r3, [r7, #16]
 8017e9a:	4413      	add	r3, r2
 8017e9c:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8017e9e:	e039      	b.n	8017f14 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8017ea0:	693b      	ldr	r3, [r7, #16]
 8017ea2:	781b      	ldrb	r3, [r3, #0]
 8017ea4:	2b2f      	cmp	r3, #47	; 0x2f
 8017ea6:	d103      	bne.n	8017eb0 <isTopicMatched+0x32>
 8017ea8:	697b      	ldr	r3, [r7, #20]
 8017eaa:	781b      	ldrb	r3, [r3, #0]
 8017eac:	2b2f      	cmp	r3, #47	; 0x2f
 8017eae:	d13a      	bne.n	8017f26 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8017eb0:	697b      	ldr	r3, [r7, #20]
 8017eb2:	781b      	ldrb	r3, [r3, #0]
 8017eb4:	2b2b      	cmp	r3, #43	; 0x2b
 8017eb6:	d009      	beq.n	8017ecc <isTopicMatched+0x4e>
 8017eb8:	697b      	ldr	r3, [r7, #20]
 8017eba:	781b      	ldrb	r3, [r3, #0]
 8017ebc:	2b23      	cmp	r3, #35	; 0x23
 8017ebe:	d005      	beq.n	8017ecc <isTopicMatched+0x4e>
 8017ec0:	697b      	ldr	r3, [r7, #20]
 8017ec2:	781a      	ldrb	r2, [r3, #0]
 8017ec4:	693b      	ldr	r3, [r7, #16]
 8017ec6:	781b      	ldrb	r3, [r3, #0]
 8017ec8:	429a      	cmp	r2, r3
 8017eca:	d12e      	bne.n	8017f2a <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8017ecc:	697b      	ldr	r3, [r7, #20]
 8017ece:	781b      	ldrb	r3, [r3, #0]
 8017ed0:	2b2b      	cmp	r3, #43	; 0x2b
 8017ed2:	d112      	bne.n	8017efa <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8017ed4:	693b      	ldr	r3, [r7, #16]
 8017ed6:	3301      	adds	r3, #1
 8017ed8:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8017eda:	e005      	b.n	8017ee8 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8017edc:	693b      	ldr	r3, [r7, #16]
 8017ede:	3301      	adds	r3, #1
 8017ee0:	613b      	str	r3, [r7, #16]
 8017ee2:	693b      	ldr	r3, [r7, #16]
 8017ee4:	3301      	adds	r3, #1
 8017ee6:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8017ee8:	68fa      	ldr	r2, [r7, #12]
 8017eea:	68bb      	ldr	r3, [r7, #8]
 8017eec:	429a      	cmp	r2, r3
 8017eee:	d20b      	bcs.n	8017f08 <isTopicMatched+0x8a>
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	781b      	ldrb	r3, [r3, #0]
 8017ef4:	2b2f      	cmp	r3, #47	; 0x2f
 8017ef6:	d1f1      	bne.n	8017edc <isTopicMatched+0x5e>
 8017ef8:	e006      	b.n	8017f08 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8017efa:	697b      	ldr	r3, [r7, #20]
 8017efc:	781b      	ldrb	r3, [r3, #0]
 8017efe:	2b23      	cmp	r3, #35	; 0x23
 8017f00:	d102      	bne.n	8017f08 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8017f02:	68bb      	ldr	r3, [r7, #8]
 8017f04:	3b01      	subs	r3, #1
 8017f06:	613b      	str	r3, [r7, #16]
        curf++;
 8017f08:	697b      	ldr	r3, [r7, #20]
 8017f0a:	3301      	adds	r3, #1
 8017f0c:	617b      	str	r3, [r7, #20]
        curn++;
 8017f0e:	693b      	ldr	r3, [r7, #16]
 8017f10:	3301      	adds	r3, #1
 8017f12:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8017f14:	697b      	ldr	r3, [r7, #20]
 8017f16:	781b      	ldrb	r3, [r3, #0]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d007      	beq.n	8017f2c <isTopicMatched+0xae>
 8017f1c:	693a      	ldr	r2, [r7, #16]
 8017f1e:	68bb      	ldr	r3, [r7, #8]
 8017f20:	429a      	cmp	r2, r3
 8017f22:	d3bd      	bcc.n	8017ea0 <isTopicMatched+0x22>
 8017f24:	e002      	b.n	8017f2c <isTopicMatched+0xae>
            break;
 8017f26:	bf00      	nop
 8017f28:	e000      	b.n	8017f2c <isTopicMatched+0xae>
            break;
 8017f2a:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8017f2c:	693a      	ldr	r2, [r7, #16]
 8017f2e:	68bb      	ldr	r3, [r7, #8]
 8017f30:	429a      	cmp	r2, r3
 8017f32:	d105      	bne.n	8017f40 <isTopicMatched+0xc2>
 8017f34:	697b      	ldr	r3, [r7, #20]
 8017f36:	781b      	ldrb	r3, [r3, #0]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d101      	bne.n	8017f40 <isTopicMatched+0xc2>
 8017f3c:	2301      	movs	r3, #1
 8017f3e:	e000      	b.n	8017f42 <isTopicMatched+0xc4>
 8017f40:	2300      	movs	r3, #0
 8017f42:	b2db      	uxtb	r3, r3
}
 8017f44:	4618      	mov	r0, r3
 8017f46:	371c      	adds	r7, #28
 8017f48:	46bd      	mov	sp, r7
 8017f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f4e:	4770      	bx	lr

08017f50 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8017f50:	b580      	push	{r7, lr}
 8017f52:	b08a      	sub	sp, #40	; 0x28
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	60f8      	str	r0, [r7, #12]
 8017f58:	60b9      	str	r1, [r7, #8]
 8017f5a:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8017f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017f60:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8017f62:	2300      	movs	r3, #0
 8017f64:	627b      	str	r3, [r7, #36]	; 0x24
 8017f66:	e03c      	b.n	8017fe2 <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f6c:	3205      	adds	r2, #5
 8017f6e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d032      	beq.n	8017fdc <deliverMessage+0x8c>
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f7a:	3205      	adds	r2, #5
 8017f7c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8017f80:	4619      	mov	r1, r3
 8017f82:	68b8      	ldr	r0, [r7, #8]
 8017f84:	f001 fab6 	bl	80194f4 <MQTTPacket_equals>
 8017f88:	4603      	mov	r3, r0
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d10b      	bne.n	8017fa6 <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f92:	3205      	adds	r2, #5
 8017f94:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8017f98:	68b9      	ldr	r1, [r7, #8]
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	f7ff ff6f 	bl	8017e7e <isTopicMatched>
 8017fa0:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d01a      	beq.n	8017fdc <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 8017fa6:	68fa      	ldr	r2, [r7, #12]
 8017fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017faa:	3305      	adds	r3, #5
 8017fac:	00db      	lsls	r3, r3, #3
 8017fae:	4413      	add	r3, r2
 8017fb0:	685b      	ldr	r3, [r3, #4]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d012      	beq.n	8017fdc <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8017fb6:	f107 0318 	add.w	r3, r7, #24
 8017fba:	687a      	ldr	r2, [r7, #4]
 8017fbc:	68b9      	ldr	r1, [r7, #8]
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	f7ff fddc 	bl	8017b7c <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8017fc4:	68fa      	ldr	r2, [r7, #12]
 8017fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fc8:	3305      	adds	r3, #5
 8017fca:	00db      	lsls	r3, r3, #3
 8017fcc:	4413      	add	r3, r2
 8017fce:	685b      	ldr	r3, [r3, #4]
 8017fd0:	f107 0218 	add.w	r2, r7, #24
 8017fd4:	4610      	mov	r0, r2
 8017fd6:	4798      	blx	r3
                rc = MQTT_SUCCESS;
 8017fd8:	2300      	movs	r3, #0
 8017fda:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8017fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fde:	3301      	adds	r3, #1
 8017fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8017fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe4:	2b04      	cmp	r3, #4
 8017fe6:	ddbf      	ble.n	8017f68 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8017fe8:	6a3b      	ldr	r3, [r7, #32]
 8017fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017fee:	d112      	bne.n	8018016 <deliverMessage+0xc6>
 8017ff0:	68fb      	ldr	r3, [r7, #12]
 8017ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d00e      	beq.n	8018016 <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8017ff8:	f107 0310 	add.w	r3, r7, #16
 8017ffc:	687a      	ldr	r2, [r7, #4]
 8017ffe:	68b9      	ldr	r1, [r7, #8]
 8018000:	4618      	mov	r0, r3
 8018002:	f7ff fdbb 	bl	8017b7c <NewMessageData>
        c->defaultMessageHandler(&md);
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801800a:	f107 0210 	add.w	r2, r7, #16
 801800e:	4610      	mov	r0, r2
 8018010:	4798      	blx	r3
        rc = MQTT_SUCCESS;
 8018012:	2300      	movs	r3, #0
 8018014:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8018016:	6a3b      	ldr	r3, [r7, #32]
}
 8018018:	4618      	mov	r0, r3
 801801a:	3728      	adds	r7, #40	; 0x28
 801801c:	46bd      	mov	sp, r7
 801801e:	bd80      	pop	{r7, pc}

08018020 <keepalive>:


int keepalive(MQTTClient* c)
{
 8018020:	b580      	push	{r7, lr}
 8018022:	b086      	sub	sp, #24
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
    int rc = MQTT_SUCCESS;
 8018028:	2300      	movs	r3, #0
 801802a:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	699b      	ldr	r3, [r3, #24]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d03e      	beq.n	80180b2 <keepalive+0x92>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	3358      	adds	r3, #88	; 0x58
 8018038:	4618      	mov	r0, r3
 801803a:	f000 fc6b 	bl	8018914 <TimerIsExpired>
 801803e:	4603      	mov	r3, r0
 8018040:	2b00      	cmp	r3, #0
 8018042:	d107      	bne.n	8018054 <keepalive+0x34>
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	3360      	adds	r3, #96	; 0x60
 8018048:	4618      	mov	r0, r3
 801804a:	f000 fc63 	bl	8018914 <TimerIsExpired>
 801804e:	4603      	mov	r3, r0
 8018050:	2b00      	cmp	r3, #0
 8018052:	d030      	beq.n	80180b6 <keepalive+0x96>
    {
        if (c->ping_outstanding)
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	7f1b      	ldrb	r3, [r3, #28]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d003      	beq.n	8018064 <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 801805c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018060:	617b      	str	r3, [r7, #20]
 8018062:	e029      	b.n	80180b8 <keepalive+0x98>
        else
        {
            Timer timer;
            TimerInit(&timer);
 8018064:	f107 0308 	add.w	r3, r7, #8
 8018068:	4618      	mov	r0, r3
 801806a:	f000 fcab 	bl	80189c4 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 801806e:	f107 0308 	add.w	r3, r7, #8
 8018072:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018076:	4618      	mov	r0, r3
 8018078:	f000 fc62 	bl	8018940 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	691a      	ldr	r2, [r3, #16]
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	689b      	ldr	r3, [r3, #8]
 8018084:	4619      	mov	r1, r3
 8018086:	4610      	mov	r0, r2
 8018088:	f000 ff98 	bl	8018fbc <MQTTSerialize_pingreq>
 801808c:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTT_SUCCESS) // send the ping packet
 801808e:	693b      	ldr	r3, [r7, #16]
 8018090:	2b00      	cmp	r3, #0
 8018092:	dd11      	ble.n	80180b8 <keepalive+0x98>
 8018094:	f107 0308 	add.w	r3, r7, #8
 8018098:	461a      	mov	r2, r3
 801809a:	6939      	ldr	r1, [r7, #16]
 801809c:	6878      	ldr	r0, [r7, #4]
 801809e:	f7ff fd98 	bl	8017bd2 <sendPacket>
 80180a2:	6178      	str	r0, [r7, #20]
 80180a4:	697b      	ldr	r3, [r7, #20]
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d106      	bne.n	80180b8 <keepalive+0x98>
                c->ping_outstanding = 1;
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	2201      	movs	r2, #1
 80180ae:	771a      	strb	r2, [r3, #28]
 80180b0:	e002      	b.n	80180b8 <keepalive+0x98>
        goto exit;
 80180b2:	bf00      	nop
 80180b4:	e000      	b.n	80180b8 <keepalive+0x98>
        }
    }

exit:
 80180b6:	bf00      	nop
    return rc;
 80180b8:	697b      	ldr	r3, [r7, #20]
}
 80180ba:	4618      	mov	r0, r3
 80180bc:	3718      	adds	r7, #24
 80180be:	46bd      	mov	sp, r7
 80180c0:	bd80      	pop	{r7, pc}

080180c2 <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 80180c2:	b480      	push	{r7}
 80180c4:	b085      	sub	sp, #20
 80180c6:	af00      	add	r7, sp, #0
 80180c8:	6078      	str	r0, [r7, #4]
    int i = 0;
 80180ca:	2300      	movs	r3, #0
 80180cc:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80180ce:	2300      	movs	r3, #0
 80180d0:	60fb      	str	r3, [r7, #12]
 80180d2:	e008      	b.n	80180e6 <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	68fa      	ldr	r2, [r7, #12]
 80180d8:	3205      	adds	r2, #5
 80180da:	2100      	movs	r1, #0
 80180dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	3301      	adds	r3, #1
 80180e4:	60fb      	str	r3, [r7, #12]
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	2b04      	cmp	r3, #4
 80180ea:	ddf3      	ble.n	80180d4 <MQTTCleanSession+0x12>
}
 80180ec:	bf00      	nop
 80180ee:	bf00      	nop
 80180f0:	3714      	adds	r7, #20
 80180f2:	46bd      	mov	sp, r7
 80180f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f8:	4770      	bx	lr

080180fa <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 80180fa:	b580      	push	{r7, lr}
 80180fc:	b082      	sub	sp, #8
 80180fe:	af00      	add	r7, sp, #0
 8018100:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	2200      	movs	r2, #0
 8018106:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	2200      	movs	r2, #0
 801810c:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018112:	2b00      	cmp	r3, #0
 8018114:	d002      	beq.n	801811c <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 8018116:	6878      	ldr	r0, [r7, #4]
 8018118:	f7ff ffd3 	bl	80180c2 <MQTTCleanSession>
}
 801811c:	bf00      	nop
 801811e:	3708      	adds	r7, #8
 8018120:	46bd      	mov	sp, r7
 8018122:	bd80      	pop	{r7, pc}

08018124 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8018124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018126:	b095      	sub	sp, #84	; 0x54
 8018128:	af06      	add	r7, sp, #24
 801812a:	6078      	str	r0, [r7, #4]
 801812c:	6039      	str	r1, [r7, #0]
    int len = 0,
 801812e:	2300      	movs	r3, #0
 8018130:	637b      	str	r3, [r7, #52]	; 0x34
        rc = MQTT_SUCCESS;
 8018132:	2300      	movs	r3, #0
 8018134:	633b      	str	r3, [r7, #48]	; 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 8018136:	6839      	ldr	r1, [r7, #0]
 8018138:	6878      	ldr	r0, [r7, #4]
 801813a:	f7ff fe1c 	bl	8017d76 <readPacket>
 801813e:	62f8      	str	r0, [r7, #44]	; 0x2c

    switch (packet_type)
 8018140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018142:	2b0d      	cmp	r3, #13
 8018144:	d81e      	bhi.n	8018184 <cycle+0x60>
 8018146:	a201      	add	r2, pc, #4	; (adr r2, 801814c <cycle+0x28>)
 8018148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801814c:	080182db 	.word	0x080182db
 8018150:	08018185 	.word	0x08018185
 8018154:	080182db 	.word	0x080182db
 8018158:	0801818b 	.word	0x0801818b
 801815c:	080182db 	.word	0x080182db
 8018160:	08018257 	.word	0x08018257
 8018164:	08018257 	.word	0x08018257
 8018168:	080182db 	.word	0x080182db
 801816c:	08018185 	.word	0x08018185
 8018170:	080182db 	.word	0x080182db
 8018174:	08018185 	.word	0x08018185
 8018178:	080182db 	.word	0x080182db
 801817c:	08018185 	.word	0x08018185
 8018180:	080182d3 	.word	0x080182d3
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 8018184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018186:	633b      	str	r3, [r7, #48]	; 0x30
            goto exit;
 8018188:	e0b9      	b.n	80182fe <cycle+0x1da>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 801818a:	2300      	movs	r3, #0
 801818c:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8018192:	687a      	ldr	r2, [r7, #4]
 8018194:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8018196:	4616      	mov	r6, r2
 8018198:	f107 0210 	add.w	r2, r7, #16
 801819c:	1d15      	adds	r5, r2, #4
 801819e:	f107 0210 	add.w	r2, r7, #16
 80181a2:	1c54      	adds	r4, r2, #1
 80181a4:	f107 010c 	add.w	r1, r7, #12
 80181a8:	f107 0210 	add.w	r2, r7, #16
 80181ac:	1c90      	adds	r0, r2, #2
 80181ae:	9604      	str	r6, [sp, #16]
 80181b0:	9303      	str	r3, [sp, #12]
 80181b2:	f107 0310 	add.w	r3, r7, #16
 80181b6:	330c      	adds	r3, #12
 80181b8:	9302      	str	r3, [sp, #8]
 80181ba:	f107 0310 	add.w	r3, r7, #16
 80181be:	3308      	adds	r3, #8
 80181c0:	9301      	str	r3, [sp, #4]
 80181c2:	f107 0320 	add.w	r3, r7, #32
 80181c6:	9300      	str	r3, [sp, #0]
 80181c8:	462b      	mov	r3, r5
 80181ca:	4622      	mov	r2, r4
 80181cc:	f000 ff05 	bl	8018fda <MQTTDeserialize_publish>
 80181d0:	4603      	mov	r3, r0
 80181d2:	2b01      	cmp	r3, #1
 80181d4:	f040 8090 	bne.w	80182f8 <cycle+0x1d4>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 80181d8:	68fb      	ldr	r3, [r7, #12]
 80181da:	b2db      	uxtb	r3, r3
 80181dc:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 80181de:	f107 0210 	add.w	r2, r7, #16
 80181e2:	f107 0320 	add.w	r3, r7, #32
 80181e6:	4619      	mov	r1, r3
 80181e8:	6878      	ldr	r0, [r7, #4]
 80181ea:	f7ff feb1 	bl	8017f50 <deliverMessage>
            if (msg.qos != QOS0)
 80181ee:	7c3b      	ldrb	r3, [r7, #16]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d074      	beq.n	80182de <cycle+0x1ba>
            {
                if (msg.qos == QOS1)
 80181f4:	7c3b      	ldrb	r3, [r7, #16]
 80181f6:	2b01      	cmp	r3, #1
 80181f8:	d10c      	bne.n	8018214 <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	6918      	ldr	r0, [r3, #16]
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	689b      	ldr	r3, [r3, #8]
 8018202:	4619      	mov	r1, r3
 8018204:	8abb      	ldrh	r3, [r7, #20]
 8018206:	9300      	str	r3, [sp, #0]
 8018208:	2300      	movs	r3, #0
 801820a:	2204      	movs	r2, #4
 801820c:	f001 fa3f 	bl	801968e <MQTTSerialize_ack>
 8018210:	6378      	str	r0, [r7, #52]	; 0x34
 8018212:	e00e      	b.n	8018232 <cycle+0x10e>
                else if (msg.qos == QOS2)
 8018214:	7c3b      	ldrb	r3, [r7, #16]
 8018216:	2b02      	cmp	r3, #2
 8018218:	d10b      	bne.n	8018232 <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	6918      	ldr	r0, [r3, #16]
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	689b      	ldr	r3, [r3, #8]
 8018222:	4619      	mov	r1, r3
 8018224:	8abb      	ldrh	r3, [r7, #20]
 8018226:	9300      	str	r3, [sp, #0]
 8018228:	2300      	movs	r3, #0
 801822a:	2205      	movs	r2, #5
 801822c:	f001 fa2f 	bl	801968e <MQTTSerialize_ack>
 8018230:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 8018232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018234:	2b00      	cmp	r3, #0
 8018236:	dc03      	bgt.n	8018240 <cycle+0x11c>
                    rc = FAILURE;
 8018238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801823c:	633b      	str	r3, [r7, #48]	; 0x30
 801823e:	e005      	b.n	801824c <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 8018240:	683a      	ldr	r2, [r7, #0]
 8018242:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018244:	6878      	ldr	r0, [r7, #4]
 8018246:	f7ff fcc4 	bl	8017bd2 <sendPacket>
 801824a:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 801824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801824e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018252:	d144      	bne.n	80182de <cycle+0x1ba>
                    goto exit; // there was a problem
 8018254:	e053      	b.n	80182fe <cycle+0x1da>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	695c      	ldr	r4, [r3, #20]
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	68db      	ldr	r3, [r3, #12]
 801825e:	f107 020a 	add.w	r2, r7, #10
 8018262:	f107 0109 	add.w	r1, r7, #9
 8018266:	f107 0008 	add.w	r0, r7, #8
 801826a:	9300      	str	r3, [sp, #0]
 801826c:	4623      	mov	r3, r4
 801826e:	f000 ff26 	bl	80190be <MQTTDeserialize_ack>
 8018272:	4603      	mov	r3, r0
 8018274:	2b01      	cmp	r3, #1
 8018276:	d003      	beq.n	8018280 <cycle+0x15c>
                rc = FAILURE;
 8018278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801827c:	633b      	str	r3, [r7, #48]	; 0x30
 801827e:	e023      	b.n	80182c8 <cycle+0x1a4>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	6918      	ldr	r0, [r3, #16]
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	689b      	ldr	r3, [r3, #8]
 8018288:	4619      	mov	r1, r3
 801828a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801828c:	2b05      	cmp	r3, #5
 801828e:	d101      	bne.n	8018294 <cycle+0x170>
 8018290:	2206      	movs	r2, #6
 8018292:	e000      	b.n	8018296 <cycle+0x172>
 8018294:	2207      	movs	r2, #7
 8018296:	897b      	ldrh	r3, [r7, #10]
 8018298:	9300      	str	r3, [sp, #0]
 801829a:	2300      	movs	r3, #0
 801829c:	f001 f9f7 	bl	801968e <MQTTSerialize_ack>
 80182a0:	6378      	str	r0, [r7, #52]	; 0x34
 80182a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	dc03      	bgt.n	80182b0 <cycle+0x18c>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 80182a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80182ac:	633b      	str	r3, [r7, #48]	; 0x30
 80182ae:	e00b      	b.n	80182c8 <cycle+0x1a4>
            else if ((rc = sendPacket(c, len, timer)) != MQTT_SUCCESS) // send the PUBREL packet
 80182b0:	683a      	ldr	r2, [r7, #0]
 80182b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80182b4:	6878      	ldr	r0, [r7, #4]
 80182b6:	f7ff fc8c 	bl	8017bd2 <sendPacket>
 80182ba:	6338      	str	r0, [r7, #48]	; 0x30
 80182bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d002      	beq.n	80182c8 <cycle+0x1a4>
                rc = FAILURE; // there was a problem
 80182c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80182c6:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 80182c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80182ce:	d108      	bne.n	80182e2 <cycle+0x1be>
                goto exit; // there was a problem
 80182d0:	e015      	b.n	80182fe <cycle+0x1da>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	2200      	movs	r2, #0
 80182d6:	771a      	strb	r2, [r3, #28]
            break;
 80182d8:	e004      	b.n	80182e4 <cycle+0x1c0>
            break;
 80182da:	bf00      	nop
 80182dc:	e002      	b.n	80182e4 <cycle+0x1c0>
            break;
 80182de:	bf00      	nop
 80182e0:	e000      	b.n	80182e4 <cycle+0x1c0>
            break;
 80182e2:	bf00      	nop
    }

    if (keepalive(c) != MQTT_SUCCESS) {
 80182e4:	6878      	ldr	r0, [r7, #4]
 80182e6:	f7ff fe9b 	bl	8018020 <keepalive>
 80182ea:	4603      	mov	r3, r0
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d005      	beq.n	80182fc <cycle+0x1d8>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 80182f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80182f4:	633b      	str	r3, [r7, #48]	; 0x30
 80182f6:	e002      	b.n	80182fe <cycle+0x1da>
                goto exit;
 80182f8:	bf00      	nop
 80182fa:	e000      	b.n	80182fe <cycle+0x1da>
    }

exit:
 80182fc:	bf00      	nop
    if (rc == MQTT_SUCCESS)
 80182fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018300:	2b00      	cmp	r3, #0
 8018302:	d102      	bne.n	801830a <cycle+0x1e6>
        rc = packet_type;
 8018304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018306:	633b      	str	r3, [r7, #48]	; 0x30
 8018308:	e006      	b.n	8018318 <cycle+0x1f4>
    else if (c->isconnected)
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	6a1b      	ldr	r3, [r3, #32]
 801830e:	2b00      	cmp	r3, #0
 8018310:	d002      	beq.n	8018318 <cycle+0x1f4>
        MQTTCloseSession(c);
 8018312:	6878      	ldr	r0, [r7, #4]
 8018314:	f7ff fef1 	bl	80180fa <MQTTCloseSession>
    return rc;
 8018318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801831a:	4618      	mov	r0, r3
 801831c:	373c      	adds	r7, #60	; 0x3c
 801831e:	46bd      	mov	sp, r7
 8018320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018322:	bf00      	nop

08018324 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8018324:	b580      	push	{r7, lr}
 8018326:	b086      	sub	sp, #24
 8018328:	af00      	add	r7, sp, #0
 801832a:	6078      	str	r0, [r7, #4]
 801832c:	6039      	str	r1, [r7, #0]
    int rc = MQTT_SUCCESS;
 801832e:	2300      	movs	r3, #0
 8018330:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8018332:	f107 030c 	add.w	r3, r7, #12
 8018336:	4618      	mov	r0, r3
 8018338:	f000 fb44 	bl	80189c4 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 801833c:	683a      	ldr	r2, [r7, #0]
 801833e:	f107 030c 	add.w	r3, r7, #12
 8018342:	4611      	mov	r1, r2
 8018344:	4618      	mov	r0, r3
 8018346:	f000 fafb 	bl	8018940 <TimerCountdownMS>

	  do
    {
        if (cycle(c, &timer) < 0)
 801834a:	f107 030c 	add.w	r3, r7, #12
 801834e:	4619      	mov	r1, r3
 8018350:	6878      	ldr	r0, [r7, #4]
 8018352:	f7ff fee7 	bl	8018124 <cycle>
 8018356:	4603      	mov	r3, r0
 8018358:	2b00      	cmp	r3, #0
 801835a:	da03      	bge.n	8018364 <MQTTYield+0x40>
        {
            rc = FAILURE;
 801835c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018360:	617b      	str	r3, [r7, #20]
            break;
 8018362:	e007      	b.n	8018374 <MQTTYield+0x50>
        }
  	} while (!TimerIsExpired(&timer));
 8018364:	f107 030c 	add.w	r3, r7, #12
 8018368:	4618      	mov	r0, r3
 801836a:	f000 fad3 	bl	8018914 <TimerIsExpired>
 801836e:	4603      	mov	r3, r0
 8018370:	2b00      	cmp	r3, #0
 8018372:	d0ea      	beq.n	801834a <MQTTYield+0x26>

    return rc;
 8018374:	697b      	ldr	r3, [r7, #20]
}
 8018376:	4618      	mov	r0, r3
 8018378:	3718      	adds	r7, #24
 801837a:	46bd      	mov	sp, r7
 801837c:	bd80      	pop	{r7, pc}

0801837e <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 801837e:	b580      	push	{r7, lr}
 8018380:	b086      	sub	sp, #24
 8018382:	af00      	add	r7, sp, #0
 8018384:	60f8      	str	r0, [r7, #12]
 8018386:	60b9      	str	r1, [r7, #8]
 8018388:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801838a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801838e:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8018390:	6878      	ldr	r0, [r7, #4]
 8018392:	f000 fabf 	bl	8018914 <TimerIsExpired>
 8018396:	4603      	mov	r3, r0
 8018398:	2b00      	cmp	r3, #0
 801839a:	d10c      	bne.n	80183b6 <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 801839c:	6879      	ldr	r1, [r7, #4]
 801839e:	68f8      	ldr	r0, [r7, #12]
 80183a0:	f7ff fec0 	bl	8018124 <cycle>
 80183a4:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 80183a6:	697a      	ldr	r2, [r7, #20]
 80183a8:	68bb      	ldr	r3, [r7, #8]
 80183aa:	429a      	cmp	r2, r3
 80183ac:	d004      	beq.n	80183b8 <waitfor+0x3a>
 80183ae:	697b      	ldr	r3, [r7, #20]
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	daed      	bge.n	8018390 <waitfor+0x12>
 80183b4:	e000      	b.n	80183b8 <waitfor+0x3a>
            break; // we timed out
 80183b6:	bf00      	nop

    return rc;
 80183b8:	697b      	ldr	r3, [r7, #20]
}
 80183ba:	4618      	mov	r0, r3
 80183bc:	3718      	adds	r7, #24
 80183be:	46bd      	mov	sp, r7
 80183c0:	bd80      	pop	{r7, pc}
	...

080183c4 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 80183c4:	b580      	push	{r7, lr}
 80183c6:	b09e      	sub	sp, #120	; 0x78
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	60f8      	str	r0, [r7, #12]
 80183cc:	60b9      	str	r1, [r7, #8]
 80183ce:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 80183d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80183d4:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 80183d6:	4a43      	ldr	r2, [pc, #268]	; (80184e4 <MQTTConnectWithResults+0x120>)
 80183d8:	f107 0310 	add.w	r3, r7, #16
 80183dc:	4611      	mov	r1, r2
 80183de:	2258      	movs	r2, #88	; 0x58
 80183e0:	4618      	mov	r0, r3
 80183e2:	f001 fae7 	bl	80199b4 <memcpy>
    int len = 0;
 80183e6:	2300      	movs	r3, #0
 80183e8:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	6a1b      	ldr	r3, [r3, #32]
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d164      	bne.n	80184bc <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 80183f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80183f6:	4618      	mov	r0, r3
 80183f8:	f000 fae4 	bl	80189c4 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	685a      	ldr	r2, [r3, #4]
 8018400:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018404:	4611      	mov	r1, r2
 8018406:	4618      	mov	r0, r3
 8018408:	f000 fa9a 	bl	8018940 <TimerCountdownMS>

    if (options == 0)
 801840c:	68bb      	ldr	r3, [r7, #8]
 801840e:	2b00      	cmp	r3, #0
 8018410:	d102      	bne.n	8018418 <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 8018412:	f107 0310 	add.w	r3, r7, #16
 8018416:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 8018418:	68bb      	ldr	r3, [r7, #8]
 801841a:	8b1b      	ldrh	r3, [r3, #24]
 801841c:	461a      	mov	r2, r3
 801841e:	68fb      	ldr	r3, [r7, #12]
 8018420:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 8018422:	68bb      	ldr	r3, [r7, #8]
 8018424:	7e9b      	ldrb	r3, [r3, #26]
 8018426:	461a      	mov	r2, r3
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	625a      	str	r2, [r3, #36]	; 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8018432:	68fb      	ldr	r3, [r7, #12]
 8018434:	699b      	ldr	r3, [r3, #24]
 8018436:	4619      	mov	r1, r3
 8018438:	4610      	mov	r0, r2
 801843a:	f000 fa95 	bl	8018968 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 801843e:	68fb      	ldr	r3, [r7, #12]
 8018440:	6918      	ldr	r0, [r3, #16]
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	689b      	ldr	r3, [r3, #8]
 8018446:	68ba      	ldr	r2, [r7, #8]
 8018448:	4619      	mov	r1, r3
 801844a:	f000 fc2f 	bl	8018cac <MQTTSerialize_connect>
 801844e:	6738      	str	r0, [r7, #112]	; 0x70
 8018450:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018452:	2b00      	cmp	r3, #0
 8018454:	dd34      	ble.n	80184c0 <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTT_SUCCESS)  // send the connect packet
 8018456:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801845a:	461a      	mov	r2, r3
 801845c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801845e:	68f8      	ldr	r0, [r7, #12]
 8018460:	f7ff fbb7 	bl	8017bd2 <sendPacket>
 8018464:	6778      	str	r0, [r7, #116]	; 0x74
 8018466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018468:	2b00      	cmp	r3, #0
 801846a:	d12b      	bne.n	80184c4 <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 801846c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018470:	461a      	mov	r2, r3
 8018472:	2102      	movs	r1, #2
 8018474:	68f8      	ldr	r0, [r7, #12]
 8018476:	f7ff ff82 	bl	801837e <waitfor>
 801847a:	4603      	mov	r3, r0
 801847c:	2b02      	cmp	r3, #2
 801847e:	d119      	bne.n	80184b4 <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	2200      	movs	r2, #0
 8018484:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	2200      	movs	r2, #0
 801848a:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	1c58      	adds	r0, r3, #1
 8018490:	6879      	ldr	r1, [r7, #4]
 8018492:	68fb      	ldr	r3, [r7, #12]
 8018494:	695a      	ldr	r2, [r3, #20]
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	68db      	ldr	r3, [r3, #12]
 801849a:	f000 fcf3 	bl	8018e84 <MQTTDeserialize_connack>
 801849e:	4603      	mov	r3, r0
 80184a0:	2b01      	cmp	r3, #1
 80184a2:	d103      	bne.n	80184ac <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	781b      	ldrb	r3, [r3, #0]
 80184a8:	677b      	str	r3, [r7, #116]	; 0x74
 80184aa:	e00c      	b.n	80184c6 <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 80184ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80184b0:	677b      	str	r3, [r7, #116]	; 0x74
 80184b2:	e008      	b.n	80184c6 <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 80184b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80184b8:	677b      	str	r3, [r7, #116]	; 0x74
 80184ba:	e004      	b.n	80184c6 <MQTTConnectWithResults+0x102>
		  goto exit;
 80184bc:	bf00      	nop
 80184be:	e002      	b.n	80184c6 <MQTTConnectWithResults+0x102>
        goto exit;
 80184c0:	bf00      	nop
 80184c2:	e000      	b.n	80184c6 <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 80184c4:	bf00      	nop

exit:
    if (rc == MQTT_SUCCESS)
 80184c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d105      	bne.n	80184d8 <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	2201      	movs	r2, #1
 80184d0:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	2200      	movs	r2, #0
 80184d6:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 80184d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 80184da:	4618      	mov	r0, r3
 80184dc:	3778      	adds	r7, #120	; 0x78
 80184de:	46bd      	mov	sp, r7
 80184e0:	bd80      	pop	{r7, pc}
 80184e2:	bf00      	nop
 80184e4:	0801e194 	.word	0x0801e194

080184e8 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 80184e8:	b580      	push	{r7, lr}
 80184ea:	b084      	sub	sp, #16
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	6078      	str	r0, [r7, #4]
 80184f0:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 80184f2:	f107 030c 	add.w	r3, r7, #12
 80184f6:	461a      	mov	r2, r3
 80184f8:	6839      	ldr	r1, [r7, #0]
 80184fa:	6878      	ldr	r0, [r7, #4]
 80184fc:	f7ff ff62 	bl	80183c4 <MQTTConnectWithResults>
 8018500:	4603      	mov	r3, r0
}
 8018502:	4618      	mov	r0, r3
 8018504:	3710      	adds	r7, #16
 8018506:	46bd      	mov	sp, r7
 8018508:	bd80      	pop	{r7, pc}

0801850a <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 801850a:	b580      	push	{r7, lr}
 801850c:	b086      	sub	sp, #24
 801850e:	af00      	add	r7, sp, #0
 8018510:	60f8      	str	r0, [r7, #12]
 8018512:	60b9      	str	r1, [r7, #8]
 8018514:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8018516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801851a:	617b      	str	r3, [r7, #20]
    int i = -1;
 801851c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018520:	613b      	str	r3, [r7, #16]

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018522:	2300      	movs	r3, #0
 8018524:	613b      	str	r3, [r7, #16]
 8018526:	e028      	b.n	801857a <MQTTSetMessageHandler+0x70>
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	693a      	ldr	r2, [r7, #16]
 801852c:	3205      	adds	r2, #5
 801852e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d01e      	beq.n	8018574 <MQTTSetMessageHandler+0x6a>
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	693a      	ldr	r2, [r7, #16]
 801853a:	3205      	adds	r2, #5
 801853c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018540:	68b9      	ldr	r1, [r7, #8]
 8018542:	4618      	mov	r0, r3
 8018544:	f7e7 fe7c 	bl	8000240 <strcmp>
 8018548:	4603      	mov	r3, r0
 801854a:	2b00      	cmp	r3, #0
 801854c:	d112      	bne.n	8018574 <MQTTSetMessageHandler+0x6a>
        {
            if (messageHandler == NULL) /* remove existing */
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	2b00      	cmp	r3, #0
 8018552:	d10c      	bne.n	801856e <MQTTSetMessageHandler+0x64>
            {
                c->messageHandlers[i].topicFilter = NULL;
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	693a      	ldr	r2, [r7, #16]
 8018558:	3205      	adds	r2, #5
 801855a:	2100      	movs	r1, #0
 801855c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                c->messageHandlers[i].fp = NULL;
 8018560:	68fa      	ldr	r2, [r7, #12]
 8018562:	693b      	ldr	r3, [r7, #16]
 8018564:	3305      	adds	r3, #5
 8018566:	00db      	lsls	r3, r3, #3
 8018568:	4413      	add	r3, r2
 801856a:	2200      	movs	r2, #0
 801856c:	605a      	str	r2, [r3, #4]
            }
            rc = MQTT_SUCCESS; /* return i when adding new subscription */
 801856e:	2300      	movs	r3, #0
 8018570:	617b      	str	r3, [r7, #20]
            break;
 8018572:	e005      	b.n	8018580 <MQTTSetMessageHandler+0x76>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018574:	693b      	ldr	r3, [r7, #16]
 8018576:	3301      	adds	r3, #1
 8018578:	613b      	str	r3, [r7, #16]
 801857a:	693b      	ldr	r3, [r7, #16]
 801857c:	2b04      	cmp	r3, #4
 801857e:	ddd3      	ble.n	8018528 <MQTTSetMessageHandler+0x1e>
        }
    }
    /* if no existing, look for empty slot (unless we are removing) */
    if (messageHandler != NULL) {
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	2b00      	cmp	r3, #0
 8018584:	d026      	beq.n	80185d4 <MQTTSetMessageHandler+0xca>
        if (rc == FAILURE)
 8018586:	697b      	ldr	r3, [r7, #20]
 8018588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801858c:	d112      	bne.n	80185b4 <MQTTSetMessageHandler+0xaa>
        {
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801858e:	2300      	movs	r3, #0
 8018590:	613b      	str	r3, [r7, #16]
 8018592:	e00c      	b.n	80185ae <MQTTSetMessageHandler+0xa4>
            {
                if (c->messageHandlers[i].topicFilter == NULL)
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	693a      	ldr	r2, [r7, #16]
 8018598:	3205      	adds	r2, #5
 801859a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d102      	bne.n	80185a8 <MQTTSetMessageHandler+0x9e>
                {
                    rc = MQTT_SUCCESS;
 80185a2:	2300      	movs	r3, #0
 80185a4:	617b      	str	r3, [r7, #20]
                    break;
 80185a6:	e005      	b.n	80185b4 <MQTTSetMessageHandler+0xaa>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80185a8:	693b      	ldr	r3, [r7, #16]
 80185aa:	3301      	adds	r3, #1
 80185ac:	613b      	str	r3, [r7, #16]
 80185ae:	693b      	ldr	r3, [r7, #16]
 80185b0:	2b04      	cmp	r3, #4
 80185b2:	ddef      	ble.n	8018594 <MQTTSetMessageHandler+0x8a>
                }
            }
        }
        if (i < MAX_MESSAGE_HANDLERS)
 80185b4:	693b      	ldr	r3, [r7, #16]
 80185b6:	2b04      	cmp	r3, #4
 80185b8:	dc0c      	bgt.n	80185d4 <MQTTSetMessageHandler+0xca>
        {
            c->messageHandlers[i].topicFilter = topicFilter;
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	693a      	ldr	r2, [r7, #16]
 80185be:	3205      	adds	r2, #5
 80185c0:	68b9      	ldr	r1, [r7, #8]
 80185c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            c->messageHandlers[i].fp = messageHandler;
 80185c6:	68fa      	ldr	r2, [r7, #12]
 80185c8:	693b      	ldr	r3, [r7, #16]
 80185ca:	3305      	adds	r3, #5
 80185cc:	00db      	lsls	r3, r3, #3
 80185ce:	4413      	add	r3, r2
 80185d0:	687a      	ldr	r2, [r7, #4]
 80185d2:	605a      	str	r2, [r3, #4]
        }
    }
    return rc;
 80185d4:	697b      	ldr	r3, [r7, #20]
}
 80185d6:	4618      	mov	r0, r3
 80185d8:	3718      	adds	r7, #24
 80185da:	46bd      	mov	sp, r7
 80185dc:	bd80      	pop	{r7, pc}

080185de <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 80185de:	b5b0      	push	{r4, r5, r7, lr}
 80185e0:	b092      	sub	sp, #72	; 0x48
 80185e2:	af04      	add	r7, sp, #16
 80185e4:	60f8      	str	r0, [r7, #12]
 80185e6:	60b9      	str	r1, [r7, #8]
 80185e8:	603b      	str	r3, [r7, #0]
 80185ea:	4613      	mov	r3, r2
 80185ec:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 80185ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80185f2:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    int len = 0;
 80185f4:	2300      	movs	r3, #0
 80185f6:	633b      	str	r3, [r7, #48]	; 0x30
    MQTTString topic = MQTTString_initializer;
 80185f8:	2300      	movs	r3, #0
 80185fa:	61fb      	str	r3, [r7, #28]
 80185fc:	2300      	movs	r3, #0
 80185fe:	623b      	str	r3, [r7, #32]
 8018600:	2300      	movs	r3, #0
 8018602:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicFilter;
 8018604:	68bb      	ldr	r3, [r7, #8]
 8018606:	61fb      	str	r3, [r7, #28]

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	6a1b      	ldr	r3, [r3, #32]
 801860c:	2b00      	cmp	r3, #0
 801860e:	d062      	beq.n	80186d6 <MQTTSubscribeWithResults+0xf8>
		    goto exit;

    TimerInit(&timer);
 8018610:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018614:	4618      	mov	r0, r3
 8018616:	f000 f9d5 	bl	80189c4 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	685a      	ldr	r2, [r3, #4]
 801861e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018622:	4611      	mov	r1, r2
 8018624:	4618      	mov	r0, r3
 8018626:	f000 f98b 	bl	8018940 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic,(int*)&qos);
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	691c      	ldr	r4, [r3, #16]
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	689b      	ldr	r3, [r3, #8]
 8018632:	461d      	mov	r5, r3
 8018634:	68f8      	ldr	r0, [r7, #12]
 8018636:	f7ff fab3 	bl	8017ba0 <getNextPacketId>
 801863a:	4603      	mov	r3, r0
 801863c:	b29a      	uxth	r2, r3
 801863e:	1dfb      	adds	r3, r7, #7
 8018640:	9302      	str	r3, [sp, #8]
 8018642:	f107 031c 	add.w	r3, r7, #28
 8018646:	9301      	str	r3, [sp, #4]
 8018648:	2301      	movs	r3, #1
 801864a:	9300      	str	r3, [sp, #0]
 801864c:	4613      	mov	r3, r2
 801864e:	2200      	movs	r2, #0
 8018650:	4629      	mov	r1, r5
 8018652:	4620      	mov	r0, r4
 8018654:	f001 f897 	bl	8019786 <MQTTSerialize_subscribe>
 8018658:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 801865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801865c:	2b00      	cmp	r3, #0
 801865e:	dd3c      	ble.n	80186da <MQTTSubscribeWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 8018660:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018664:	461a      	mov	r2, r3
 8018666:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018668:	68f8      	ldr	r0, [r7, #12]
 801866a:	f7ff fab2 	bl	8017bd2 <sendPacket>
 801866e:	6378      	str	r0, [r7, #52]	; 0x34
 8018670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018672:	2b00      	cmp	r3, #0
 8018674:	d133      	bne.n	80186de <MQTTSubscribeWithResults+0x100>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 8018676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801867a:	461a      	mov	r2, r3
 801867c:	2109      	movs	r1, #9
 801867e:	68f8      	ldr	r0, [r7, #12]
 8018680:	f7ff fe7d 	bl	801837e <waitfor>
 8018684:	4603      	mov	r3, r0
 8018686:	2b09      	cmp	r3, #9
 8018688:	d121      	bne.n	80186ce <MQTTSubscribeWithResults+0xf0>
    {
        int count = 0;
 801868a:	2300      	movs	r3, #0
 801868c:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        data->grantedQoS = QOS0;
 801868e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018690:	2200      	movs	r2, #0
 8018692:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, 0, c->readbuf, c->readbuf_size) == 1)
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	695b      	ldr	r3, [r3, #20]
 8018698:	68fa      	ldr	r2, [r7, #12]
 801869a:	68d2      	ldr	r2, [r2, #12]
 801869c:	4611      	mov	r1, r2
 801869e:	f107 0218 	add.w	r2, r7, #24
 80186a2:	f107 0016 	add.w	r0, r7, #22
 80186a6:	9101      	str	r1, [sp, #4]
 80186a8:	9300      	str	r3, [sp, #0]
 80186aa:	2300      	movs	r3, #0
 80186ac:	2101      	movs	r1, #1
 80186ae:	f001 f8e6 	bl	801987e <MQTTDeserialize_suback>
 80186b2:	4603      	mov	r3, r0
 80186b4:	2b01      	cmp	r3, #1
 80186b6:	d113      	bne.n	80186e0 <MQTTSubscribeWithResults+0x102>
        {
            if (data->grantedQoS != 0x80)
 80186b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80186ba:	781b      	ldrb	r3, [r3, #0]
 80186bc:	2b80      	cmp	r3, #128	; 0x80
 80186be:	d00f      	beq.n	80186e0 <MQTTSubscribeWithResults+0x102>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 80186c0:	683a      	ldr	r2, [r7, #0]
 80186c2:	68b9      	ldr	r1, [r7, #8]
 80186c4:	68f8      	ldr	r0, [r7, #12]
 80186c6:	f7ff ff20 	bl	801850a <MQTTSetMessageHandler>
 80186ca:	6378      	str	r0, [r7, #52]	; 0x34
 80186cc:	e008      	b.n	80186e0 <MQTTSubscribeWithResults+0x102>
        }
    }
    else
        rc = FAILURE;
 80186ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80186d2:	637b      	str	r3, [r7, #52]	; 0x34
 80186d4:	e004      	b.n	80186e0 <MQTTSubscribeWithResults+0x102>
		    goto exit;
 80186d6:	bf00      	nop
 80186d8:	e002      	b.n	80186e0 <MQTTSubscribeWithResults+0x102>
        goto exit;
 80186da:	bf00      	nop
 80186dc:	e000      	b.n	80186e0 <MQTTSubscribeWithResults+0x102>
        goto exit;             // there was a problem
 80186de:	bf00      	nop

exit:
    if (rc == FAILURE)
 80186e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80186e6:	d102      	bne.n	80186ee <MQTTSubscribeWithResults+0x110>
        MQTTCloseSession(c);
 80186e8:	68f8      	ldr	r0, [r7, #12]
 80186ea:	f7ff fd06 	bl	80180fa <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 80186ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80186f0:	4618      	mov	r0, r3
 80186f2:	3738      	adds	r7, #56	; 0x38
 80186f4:	46bd      	mov	sp, r7
 80186f6:	bdb0      	pop	{r4, r5, r7, pc}

080186f8 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 80186f8:	b580      	push	{r7, lr}
 80186fa:	b088      	sub	sp, #32
 80186fc:	af02      	add	r7, sp, #8
 80186fe:	60f8      	str	r0, [r7, #12]
 8018700:	60b9      	str	r1, [r7, #8]
 8018702:	603b      	str	r3, [r7, #0]
 8018704:	4613      	mov	r3, r2
 8018706:	71fb      	strb	r3, [r7, #7]
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 8018708:	79fa      	ldrb	r2, [r7, #7]
 801870a:	f107 0314 	add.w	r3, r7, #20
 801870e:	9300      	str	r3, [sp, #0]
 8018710:	683b      	ldr	r3, [r7, #0]
 8018712:	68b9      	ldr	r1, [r7, #8]
 8018714:	68f8      	ldr	r0, [r7, #12]
 8018716:	f7ff ff62 	bl	80185de <MQTTSubscribeWithResults>
 801871a:	4603      	mov	r3, r0
}
 801871c:	4618      	mov	r0, r3
 801871e:	3718      	adds	r7, #24
 8018720:	46bd      	mov	sp, r7
 8018722:	bd80      	pop	{r7, pc}

08018724 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 8018724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018726:	b097      	sub	sp, #92	; 0x5c
 8018728:	af08      	add	r7, sp, #32
 801872a:	60f8      	str	r0, [r7, #12]
 801872c:	60b9      	str	r1, [r7, #8]
 801872e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8018730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018734:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 8018736:	2300      	movs	r3, #0
 8018738:	61fb      	str	r3, [r7, #28]
 801873a:	2300      	movs	r3, #0
 801873c:	623b      	str	r3, [r7, #32]
 801873e:	2300      	movs	r3, #0
 8018740:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 8018742:	68bb      	ldr	r3, [r7, #8]
 8018744:	61fb      	str	r3, [r7, #28]
    int len = 0;
 8018746:	2300      	movs	r3, #0
 8018748:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	6a1b      	ldr	r3, [r3, #32]
 801874e:	2b00      	cmp	r3, #0
 8018750:	f000 809b 	beq.w	801888a <MQTTPublish+0x166>
		    goto exit;

    TimerInit(&timer);
 8018754:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018758:	4618      	mov	r0, r3
 801875a:	f000 f933 	bl	80189c4 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	685a      	ldr	r2, [r3, #4]
 8018762:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018766:	4611      	mov	r1, r2
 8018768:	4618      	mov	r0, r3
 801876a:	f000 f8e9 	bl	8018940 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	781b      	ldrb	r3, [r3, #0]
 8018772:	2b01      	cmp	r3, #1
 8018774:	d003      	beq.n	801877e <MQTTPublish+0x5a>
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	781b      	ldrb	r3, [r3, #0]
 801877a:	2b02      	cmp	r3, #2
 801877c:	d106      	bne.n	801878c <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 801877e:	68f8      	ldr	r0, [r7, #12]
 8018780:	f7ff fa0e 	bl	8017ba0 <getNextPacketId>
 8018784:	4603      	mov	r3, r0
 8018786:	b29a      	uxth	r2, r3
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801878c:	68fb      	ldr	r3, [r7, #12]
 801878e:	691b      	ldr	r3, [r3, #16]
 8018790:	603b      	str	r3, [r7, #0]
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	689b      	ldr	r3, [r3, #8]
 8018796:	469c      	mov	ip, r3
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	781b      	ldrb	r3, [r3, #0]
 801879c:	469e      	mov	lr, r3
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	785d      	ldrb	r5, [r3, #1]
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	689b      	ldr	r3, [r3, #8]
 80187aa:	687a      	ldr	r2, [r7, #4]
 80187ac:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 80187ae:	9206      	str	r2, [sp, #24]
 80187b0:	9305      	str	r3, [sp, #20]
 80187b2:	ac02      	add	r4, sp, #8
 80187b4:	f107 031c 	add.w	r3, r7, #28
 80187b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80187bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80187c0:	9601      	str	r6, [sp, #4]
 80187c2:	9500      	str	r5, [sp, #0]
 80187c4:	4673      	mov	r3, lr
 80187c6:	2200      	movs	r2, #0
 80187c8:	4661      	mov	r1, ip
 80187ca:	6838      	ldr	r0, [r7, #0]
 80187cc:	f000 fee9 	bl	80195a2 <MQTTSerialize_publish>
 80187d0:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 80187d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	dd5a      	ble.n	801888e <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 80187d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80187dc:	461a      	mov	r2, r3
 80187de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80187e0:	68f8      	ldr	r0, [r7, #12]
 80187e2:	f7ff f9f6 	bl	8017bd2 <sendPacket>
 80187e6:	6378      	str	r0, [r7, #52]	; 0x34
 80187e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d151      	bne.n	8018892 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	781b      	ldrb	r3, [r3, #0]
 80187f2:	2b01      	cmp	r3, #1
 80187f4:	d122      	bne.n	801883c <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 80187f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80187fa:	461a      	mov	r2, r3
 80187fc:	2104      	movs	r1, #4
 80187fe:	68f8      	ldr	r0, [r7, #12]
 8018800:	f7ff fdbd 	bl	801837e <waitfor>
 8018804:	4603      	mov	r3, r0
 8018806:	2b04      	cmp	r3, #4
 8018808:	d114      	bne.n	8018834 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	695c      	ldr	r4, [r3, #20]
 801880e:	68fb      	ldr	r3, [r7, #12]
 8018810:	68db      	ldr	r3, [r3, #12]
 8018812:	f107 021a 	add.w	r2, r7, #26
 8018816:	f107 0119 	add.w	r1, r7, #25
 801881a:	f107 0018 	add.w	r0, r7, #24
 801881e:	9300      	str	r3, [sp, #0]
 8018820:	4623      	mov	r3, r4
 8018822:	f000 fc4c 	bl	80190be <MQTTDeserialize_ack>
 8018826:	4603      	mov	r3, r0
 8018828:	2b01      	cmp	r3, #1
 801882a:	d035      	beq.n	8018898 <MQTTPublish+0x174>
                rc = FAILURE;
 801882c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018830:	637b      	str	r3, [r7, #52]	; 0x34
 8018832:	e031      	b.n	8018898 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8018834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018838:	637b      	str	r3, [r7, #52]	; 0x34
 801883a:	e02d      	b.n	8018898 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	781b      	ldrb	r3, [r3, #0]
 8018840:	2b02      	cmp	r3, #2
 8018842:	d128      	bne.n	8018896 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 8018844:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018848:	461a      	mov	r2, r3
 801884a:	2107      	movs	r1, #7
 801884c:	68f8      	ldr	r0, [r7, #12]
 801884e:	f7ff fd96 	bl	801837e <waitfor>
 8018852:	4603      	mov	r3, r0
 8018854:	2b07      	cmp	r3, #7
 8018856:	d114      	bne.n	8018882 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8018858:	68fb      	ldr	r3, [r7, #12]
 801885a:	695c      	ldr	r4, [r3, #20]
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	68db      	ldr	r3, [r3, #12]
 8018860:	f107 0216 	add.w	r2, r7, #22
 8018864:	f107 0115 	add.w	r1, r7, #21
 8018868:	f107 0014 	add.w	r0, r7, #20
 801886c:	9300      	str	r3, [sp, #0]
 801886e:	4623      	mov	r3, r4
 8018870:	f000 fc25 	bl	80190be <MQTTDeserialize_ack>
 8018874:	4603      	mov	r3, r0
 8018876:	2b01      	cmp	r3, #1
 8018878:	d00e      	beq.n	8018898 <MQTTPublish+0x174>
                rc = FAILURE;
 801887a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801887e:	637b      	str	r3, [r7, #52]	; 0x34
 8018880:	e00a      	b.n	8018898 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8018882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018886:	637b      	str	r3, [r7, #52]	; 0x34
 8018888:	e006      	b.n	8018898 <MQTTPublish+0x174>
		    goto exit;
 801888a:	bf00      	nop
 801888c:	e004      	b.n	8018898 <MQTTPublish+0x174>
        goto exit;
 801888e:	bf00      	nop
 8018890:	e002      	b.n	8018898 <MQTTPublish+0x174>
        goto exit; // there was a problem
 8018892:	bf00      	nop
 8018894:	e000      	b.n	8018898 <MQTTPublish+0x174>
    }

exit:
 8018896:	bf00      	nop
    if (rc == FAILURE)
 8018898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801889a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801889e:	d102      	bne.n	80188a6 <MQTTPublish+0x182>
        MQTTCloseSession(c);
 80188a0:	68f8      	ldr	r0, [r7, #12]
 80188a2:	f7ff fc2a 	bl	80180fa <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 80188a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80188a8:	4618      	mov	r0, r3
 80188aa:	373c      	adds	r7, #60	; 0x3c
 80188ac:	46bd      	mov	sp, r7
 80188ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080188b0 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b086      	sub	sp, #24
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 80188b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80188bc:	617b      	str	r3, [r7, #20]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
 80188be:	2300      	movs	r3, #0
 80188c0:	613b      	str	r3, [r7, #16]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 80188c2:	f107 0308 	add.w	r3, r7, #8
 80188c6:	4618      	mov	r0, r3
 80188c8:	f000 f87c 	bl	80189c4 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	685a      	ldr	r2, [r3, #4]
 80188d0:	f107 0308 	add.w	r3, r7, #8
 80188d4:	4611      	mov	r1, r2
 80188d6:	4618      	mov	r0, r3
 80188d8:	f000 f832 	bl	8018940 <TimerCountdownMS>

	  len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	691a      	ldr	r2, [r3, #16]
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	689b      	ldr	r3, [r3, #8]
 80188e4:	4619      	mov	r1, r3
 80188e6:	4610      	mov	r0, r2
 80188e8:	f000 fb59 	bl	8018f9e <MQTTSerialize_disconnect>
 80188ec:	6138      	str	r0, [r7, #16]
    if (len > 0)
 80188ee:	693b      	ldr	r3, [r7, #16]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	dd07      	ble.n	8018904 <MQTTDisconnect+0x54>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 80188f4:	f107 0308 	add.w	r3, r7, #8
 80188f8:	461a      	mov	r2, r3
 80188fa:	6939      	ldr	r1, [r7, #16]
 80188fc:	6878      	ldr	r0, [r7, #4]
 80188fe:	f7ff f968 	bl	8017bd2 <sendPacket>
 8018902:	6178      	str	r0, [r7, #20]
    MQTTCloseSession(c);
 8018904:	6878      	ldr	r0, [r7, #4]
 8018906:	f7ff fbf8 	bl	80180fa <MQTTCloseSession>

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 801890a:	697b      	ldr	r3, [r7, #20]
}
 801890c:	4618      	mov	r0, r3
 801890e:	3718      	adds	r7, #24
 8018910:	46bd      	mov	sp, r7
 8018912:	bd80      	pop	{r7, pc}

08018914 <TimerIsExpired>:
//#define SERVER_IP4	84

uint32_t MilliTimer;

//Timer functions
char TimerIsExpired(Timer *timer) {
 8018914:	b480      	push	{r7}
 8018916:	b085      	sub	sp, #20
 8018918:	af00      	add	r7, sp, #0
 801891a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	685a      	ldr	r2, [r3, #4]
 8018920:	4b06      	ldr	r3, [pc, #24]	; (801893c <TimerIsExpired+0x28>)
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	1ad3      	subs	r3, r2, r3
 8018926:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8018928:	68fb      	ldr	r3, [r7, #12]
 801892a:	0fdb      	lsrs	r3, r3, #31
 801892c:	b2db      	uxtb	r3, r3
}
 801892e:	4618      	mov	r0, r3
 8018930:	3714      	adds	r7, #20
 8018932:	46bd      	mov	sp, r7
 8018934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018938:	4770      	bx	lr
 801893a:	bf00      	nop
 801893c:	20011400 	.word	0x20011400

08018940 <TimerCountdownMS>:

void TimerCountdownMS(Timer *timer, unsigned int timeout) {
 8018940:	b480      	push	{r7}
 8018942:	b083      	sub	sp, #12
 8018944:	af00      	add	r7, sp, #0
 8018946:	6078      	str	r0, [r7, #4]
 8018948:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 801894a:	4b06      	ldr	r3, [pc, #24]	; (8018964 <TimerCountdownMS+0x24>)
 801894c:	681a      	ldr	r2, [r3, #0]
 801894e:	683b      	ldr	r3, [r7, #0]
 8018950:	441a      	add	r2, r3
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	605a      	str	r2, [r3, #4]
}
 8018956:	bf00      	nop
 8018958:	370c      	adds	r7, #12
 801895a:	46bd      	mov	sp, r7
 801895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018960:	4770      	bx	lr
 8018962:	bf00      	nop
 8018964:	20011400 	.word	0x20011400

08018968 <TimerCountdown>:

void TimerCountdown(Timer *timer, unsigned int timeout) {
 8018968:	b480      	push	{r7}
 801896a:	b083      	sub	sp, #12
 801896c:	af00      	add	r7, sp, #0
 801896e:	6078      	str	r0, [r7, #4]
 8018970:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8018972:	683b      	ldr	r3, [r7, #0]
 8018974:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018978:	fb03 f202 	mul.w	r2, r3, r2
 801897c:	4b05      	ldr	r3, [pc, #20]	; (8018994 <TimerCountdown+0x2c>)
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	441a      	add	r2, r3
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	605a      	str	r2, [r3, #4]
}
 8018986:	bf00      	nop
 8018988:	370c      	adds	r7, #12
 801898a:	46bd      	mov	sp, r7
 801898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018990:	4770      	bx	lr
 8018992:	bf00      	nop
 8018994:	20011400 	.word	0x20011400

08018998 <TimerLeftMS>:

int TimerLeftMS(Timer *timer) {
 8018998:	b480      	push	{r7}
 801899a:	b085      	sub	sp, #20
 801899c:	af00      	add	r7, sp, #0
 801899e:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	685a      	ldr	r2, [r3, #4]
 80189a4:	4b06      	ldr	r3, [pc, #24]	; (80189c0 <TimerLeftMS+0x28>)
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	1ad3      	subs	r3, r2, r3
 80189aa:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 80189b2:	4618      	mov	r0, r3
 80189b4:	3714      	adds	r7, #20
 80189b6:	46bd      	mov	sp, r7
 80189b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189bc:	4770      	bx	lr
 80189be:	bf00      	nop
 80189c0:	20011400 	.word	0x20011400

080189c4 <TimerInit>:

void TimerInit(Timer *timer) {
 80189c4:	b480      	push	{r7}
 80189c6:	b083      	sub	sp, #12
 80189c8:	af00      	add	r7, sp, #0
 80189ca:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	2200      	movs	r2, #0
 80189d0:	605a      	str	r2, [r3, #4]
}
 80189d2:	bf00      	nop
 80189d4:	370c      	adds	r7, #12
 80189d6:	46bd      	mov	sp, r7
 80189d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189dc:	4770      	bx	lr
	...

080189e0 <NewNetwork>:
	close(n->socket);
	n->socket = 0;
}

#elif defined(MQTT_LWIP_NETCONN)
void NewNetwork(Network *n) {
 80189e0:	b480      	push	{r7}
 80189e2:	b083      	sub	sp, #12
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	6078      	str	r0, [r7, #4]
	n->conn = NULL;
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	2200      	movs	r2, #0
 80189ec:	601a      	str	r2, [r3, #0]
	n->buf = NULL;
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	2200      	movs	r2, #0
 80189f2:	605a      	str	r2, [r3, #4]
	n->offset = 0;
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	2200      	movs	r2, #0
 80189f8:	609a      	str	r2, [r3, #8]

	n->mqttread = net_read;
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	4a06      	ldr	r2, [pc, #24]	; (8018a18 <NewNetwork+0x38>)
 80189fe:	60da      	str	r2, [r3, #12]
	n->mqttwrite = net_write;
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	4a06      	ldr	r2, [pc, #24]	; (8018a1c <NewNetwork+0x3c>)
 8018a04:	611a      	str	r2, [r3, #16]
	n->disconnect = net_disconnect;
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	4a05      	ldr	r2, [pc, #20]	; (8018a20 <NewNetwork+0x40>)
 8018a0a:	615a      	str	r2, [r3, #20]
}
 8018a0c:	bf00      	nop
 8018a0e:	370c      	adds	r7, #12
 8018a10:	46bd      	mov	sp, r7
 8018a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a16:	4770      	bx	lr
 8018a18:	08018a8d 	.word	0x08018a8d
 8018a1c:	08018b87 	.word	0x08018b87
 8018a20:	08018bc1 	.word	0x08018bc1

08018a24 <ConnectNetwork>:

int ConnectNetwork(Network *n, char *ip, int port) {
 8018a24:	b580      	push	{r7, lr}
 8018a26:	b086      	sub	sp, #24
 8018a28:	af00      	add	r7, sp, #0
 8018a2a:	60f8      	str	r0, [r7, #12]
 8018a2c:	60b9      	str	r1, [r7, #8]
 8018a2e:	607a      	str	r2, [r7, #4]
	err_t err;
	ip_addr_t server_ip;

	ipaddr_aton(ip, &server_ip);
 8018a30:	f107 0310 	add.w	r3, r7, #16
 8018a34:	4619      	mov	r1, r3
 8018a36:	68b8      	ldr	r0, [r7, #8]
 8018a38:	f7fd fe80 	bl	801673c <ip4addr_aton>

	n->conn = netconn_new(NETCONN_TCP);
 8018a3c:	2200      	movs	r2, #0
 8018a3e:	2100      	movs	r1, #0
 8018a40:	2010      	movs	r0, #16
 8018a42:	f7f1 fd89 	bl	800a558 <netconn_new_with_proto_and_callback>
 8018a46:	4602      	mov	r2, r0
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	601a      	str	r2, [r3, #0]
	if (n->conn != NULL) {
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d016      	beq.n	8018a82 <ConnectNetwork+0x5e>
		err = netconn_connect(n->conn, &server_ip, port);
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	687a      	ldr	r2, [r7, #4]
 8018a5a:	b292      	uxth	r2, r2
 8018a5c:	f107 0110 	add.w	r1, r7, #16
 8018a60:	4618      	mov	r0, r3
 8018a62:	f7f1 fe33 	bl	800a6cc <netconn_connect>
 8018a66:	4603      	mov	r3, r0
 8018a68:	75fb      	strb	r3, [r7, #23]

		if (err != ERR_OK) {
 8018a6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d007      	beq.n	8018a82 <ConnectNetwork+0x5e>
			netconn_delete(n->conn); //free memory
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	4618      	mov	r0, r3
 8018a78:	f7f1 fe0c 	bl	800a694 <netconn_delete>
			return -1;
 8018a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018a80:	e000      	b.n	8018a84 <ConnectNetwork+0x60>
		}
	}

	return 0;
 8018a82:	2300      	movs	r3, #0
}
 8018a84:	4618      	mov	r0, r3
 8018a86:	3718      	adds	r7, #24
 8018a88:	46bd      	mov	sp, r7
 8018a8a:	bd80      	pop	{r7, pc}

08018a8c <net_read>:

int net_read(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 8018a8c:	b580      	push	{r7, lr}
 8018a8e:	b08a      	sub	sp, #40	; 0x28
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	60f8      	str	r0, [r7, #12]
 8018a94:	60b9      	str	r1, [r7, #8]
 8018a96:	607a      	str	r2, [r7, #4]
 8018a98:	603b      	str	r3, [r7, #0]
	int rc;
	struct netbuf *inbuf;
	int offset = 0;
 8018a9a:	2300      	movs	r3, #0
 8018a9c:	623b      	str	r3, [r7, #32]
	int bytes = 0;
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	61fb      	str	r3, [r7, #28]

	while(bytes < len) {
 8018aa2:	e065      	b.n	8018b70 <net_read+0xe4>
		if(n->buf != NULL) {
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	685b      	ldr	r3, [r3, #4]
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d008      	beq.n	8018abe <net_read+0x32>
			inbuf = n->buf;
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	685b      	ldr	r3, [r3, #4]
 8018ab0:	617b      	str	r3, [r7, #20]
			offset = n->offset;
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	689b      	ldr	r3, [r3, #8]
 8018ab6:	623b      	str	r3, [r7, #32]
			rc = ERR_OK;
 8018ab8:	2300      	movs	r3, #0
 8018aba:	627b      	str	r3, [r7, #36]	; 0x24
 8018abc:	e00b      	b.n	8018ad6 <net_read+0x4a>
		} else {
			rc = netconn_recv(n->conn, &inbuf);
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	f107 0214 	add.w	r2, r7, #20
 8018ac6:	4611      	mov	r1, r2
 8018ac8:	4618      	mov	r0, r3
 8018aca:	f7f1 ffb3 	bl	800aa34 <netconn_recv>
 8018ace:	4603      	mov	r3, r0
 8018ad0:	627b      	str	r3, [r7, #36]	; 0x24
			offset = 0;
 8018ad2:	2300      	movs	r3, #0
 8018ad4:	623b      	str	r3, [r7, #32]
		}

		if(rc != ERR_OK) {
 8018ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d007      	beq.n	8018aec <net_read+0x60>
			if(rc != ERR_TIMEOUT) {
 8018adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ade:	f113 0f03 	cmn.w	r3, #3
 8018ae2:	d04a      	beq.n	8018b7a <net_read+0xee>
				bytes = -1;
 8018ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ae8:	61fb      	str	r3, [r7, #28]
			}
			break;
 8018aea:	e046      	b.n	8018b7a <net_read+0xee>
		} else {
			int nblen = netbuf_len(inbuf) - offset;
 8018aec:	697b      	ldr	r3, [r7, #20]
 8018aee:	681b      	ldr	r3, [r3, #0]
 8018af0:	891b      	ldrh	r3, [r3, #8]
 8018af2:	461a      	mov	r2, r3
 8018af4:	6a3b      	ldr	r3, [r7, #32]
 8018af6:	1ad3      	subs	r3, r2, r3
 8018af8:	61bb      	str	r3, [r7, #24]
			if((bytes+nblen) > len) {
 8018afa:	69fa      	ldr	r2, [r7, #28]
 8018afc:	69bb      	ldr	r3, [r7, #24]
 8018afe:	4413      	add	r3, r2
 8018b00:	687a      	ldr	r2, [r7, #4]
 8018b02:	429a      	cmp	r2, r3
 8018b04:	da1b      	bge.n	8018b3e <net_read+0xb2>
				netbuf_copy_partial(inbuf, buffer+bytes, len-bytes,offset);
 8018b06:	697b      	ldr	r3, [r7, #20]
 8018b08:	6818      	ldr	r0, [r3, #0]
 8018b0a:	69fb      	ldr	r3, [r7, #28]
 8018b0c:	68ba      	ldr	r2, [r7, #8]
 8018b0e:	18d1      	adds	r1, r2, r3
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	b29a      	uxth	r2, r3
 8018b14:	69fb      	ldr	r3, [r7, #28]
 8018b16:	b29b      	uxth	r3, r3
 8018b18:	1ad3      	subs	r3, r2, r3
 8018b1a:	b29a      	uxth	r2, r3
 8018b1c:	6a3b      	ldr	r3, [r7, #32]
 8018b1e:	b29b      	uxth	r3, r3
 8018b20:	f7f5 fc92 	bl	800e448 <pbuf_copy_partial>
				n->buf = inbuf;
 8018b24:	697a      	ldr	r2, [r7, #20]
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	605a      	str	r2, [r3, #4]
				n->offset = offset + len - bytes;
 8018b2a:	6a3a      	ldr	r2, [r7, #32]
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	441a      	add	r2, r3
 8018b30:	69fb      	ldr	r3, [r7, #28]
 8018b32:	1ad2      	subs	r2, r2, r3
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	609a      	str	r2, [r3, #8]
				bytes = len;
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	61fb      	str	r3, [r7, #28]
 8018b3c:	e018      	b.n	8018b70 <net_read+0xe4>
			} else {
				netbuf_copy_partial(inbuf, buffer+bytes, nblen, offset);
 8018b3e:	697b      	ldr	r3, [r7, #20]
 8018b40:	6818      	ldr	r0, [r3, #0]
 8018b42:	69fb      	ldr	r3, [r7, #28]
 8018b44:	68ba      	ldr	r2, [r7, #8]
 8018b46:	18d1      	adds	r1, r2, r3
 8018b48:	69bb      	ldr	r3, [r7, #24]
 8018b4a:	b29a      	uxth	r2, r3
 8018b4c:	6a3b      	ldr	r3, [r7, #32]
 8018b4e:	b29b      	uxth	r3, r3
 8018b50:	f7f5 fc7a 	bl	800e448 <pbuf_copy_partial>
				bytes += nblen;
 8018b54:	69fa      	ldr	r2, [r7, #28]
 8018b56:	69bb      	ldr	r3, [r7, #24]
 8018b58:	4413      	add	r3, r2
 8018b5a:	61fb      	str	r3, [r7, #28]
				netbuf_delete(inbuf);
 8018b5c:	697b      	ldr	r3, [r7, #20]
 8018b5e:	4618      	mov	r0, r3
 8018b60:	f7f3 fca2 	bl	800c4a8 <netbuf_delete>
				n->buf = NULL;
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	2200      	movs	r2, #0
 8018b68:	605a      	str	r2, [r3, #4]
				n->offset = 0;
 8018b6a:	68fb      	ldr	r3, [r7, #12]
 8018b6c:	2200      	movs	r2, #0
 8018b6e:	609a      	str	r2, [r3, #8]
	while(bytes < len) {
 8018b70:	69fa      	ldr	r2, [r7, #28]
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	429a      	cmp	r2, r3
 8018b76:	db95      	blt.n	8018aa4 <net_read+0x18>
 8018b78:	e000      	b.n	8018b7c <net_read+0xf0>
			break;
 8018b7a:	bf00      	nop
			}
		}
	}
	return bytes;
 8018b7c:	69fb      	ldr	r3, [r7, #28]
}
 8018b7e:	4618      	mov	r0, r3
 8018b80:	3728      	adds	r7, #40	; 0x28
 8018b82:	46bd      	mov	sp, r7
 8018b84:	bd80      	pop	{r7, pc}

08018b86 <net_write>:

int net_write(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 8018b86:	b580      	push	{r7, lr}
 8018b88:	b088      	sub	sp, #32
 8018b8a:	af02      	add	r7, sp, #8
 8018b8c:	60f8      	str	r0, [r7, #12]
 8018b8e:	60b9      	str	r1, [r7, #8]
 8018b90:	607a      	str	r2, [r7, #4]
 8018b92:	603b      	str	r3, [r7, #0]
	int rc = netconn_write(n->conn, buffer, len, NETCONN_NOCOPY);
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	6818      	ldr	r0, [r3, #0]
 8018b98:	687a      	ldr	r2, [r7, #4]
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	9300      	str	r3, [sp, #0]
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	68b9      	ldr	r1, [r7, #8]
 8018ba2:	f7f1 ffc1 	bl	800ab28 <netconn_write_partly>
 8018ba6:	4603      	mov	r3, r0
 8018ba8:	617b      	str	r3, [r7, #20]
	if(rc != ERR_OK) return -1;
 8018baa:	697b      	ldr	r3, [r7, #20]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d002      	beq.n	8018bb6 <net_write+0x30>
 8018bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018bb4:	e000      	b.n	8018bb8 <net_write+0x32>
	return len;
 8018bb6:	687b      	ldr	r3, [r7, #4]
}
 8018bb8:	4618      	mov	r0, r3
 8018bba:	3718      	adds	r7, #24
 8018bbc:	46bd      	mov	sp, r7
 8018bbe:	bd80      	pop	{r7, pc}

08018bc0 <net_disconnect>:

void net_disconnect(Network *n) {
 8018bc0:	b580      	push	{r7, lr}
 8018bc2:	b082      	sub	sp, #8
 8018bc4:	af00      	add	r7, sp, #0
 8018bc6:	6078      	str	r0, [r7, #4]
	netconn_close(n->conn); //close session
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	681b      	ldr	r3, [r3, #0]
 8018bcc:	4618      	mov	r0, r3
 8018bce:	f7f2 f8ad 	bl	800ad2c <netconn_close>
	netconn_delete(n->conn); //free memory
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	4618      	mov	r0, r3
 8018bd8:	f7f1 fd5c 	bl	800a694 <netconn_delete>
	n->conn = NULL;
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	2200      	movs	r2, #0
 8018be0:	601a      	str	r2, [r3, #0]
}
 8018be2:	bf00      	nop
 8018be4:	3708      	adds	r7, #8
 8018be6:	46bd      	mov	sp, r7
 8018be8:	bd80      	pop	{r7, pc}

08018bea <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8018bea:	b590      	push	{r4, r7, lr}
 8018bec:	b085      	sub	sp, #20
 8018bee:	af00      	add	r7, sp, #0
 8018bf0:	6078      	str	r0, [r7, #4]
	int len = 0;
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	7a1b      	ldrb	r3, [r3, #8]
 8018bfa:	2b03      	cmp	r3, #3
 8018bfc:	d102      	bne.n	8018c04 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8018bfe:	230c      	movs	r3, #12
 8018c00:	60fb      	str	r3, [r7, #12]
 8018c02:	e005      	b.n	8018c10 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	7a1b      	ldrb	r3, [r3, #8]
 8018c08:	2b04      	cmp	r3, #4
 8018c0a:	d101      	bne.n	8018c10 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8018c0c:	230a      	movs	r3, #10
 8018c0e:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	330c      	adds	r3, #12
 8018c14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018c18:	f000 fc53 	bl	80194c2 <MQTTstrlen>
 8018c1c:	4603      	mov	r3, r0
 8018c1e:	3302      	adds	r3, #2
 8018c20:	68fa      	ldr	r2, [r7, #12]
 8018c22:	4413      	add	r3, r2
 8018c24:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	7edb      	ldrb	r3, [r3, #27]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d013      	beq.n	8018c56 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	3324      	adds	r3, #36	; 0x24
 8018c32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018c36:	f000 fc44 	bl	80194c2 <MQTTstrlen>
 8018c3a:	4603      	mov	r3, r0
 8018c3c:	1c9c      	adds	r4, r3, #2
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	3330      	adds	r3, #48	; 0x30
 8018c42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018c46:	f000 fc3c 	bl	80194c2 <MQTTstrlen>
 8018c4a:	4603      	mov	r3, r0
 8018c4c:	4423      	add	r3, r4
 8018c4e:	3302      	adds	r3, #2
 8018c50:	68fa      	ldr	r2, [r7, #12]
 8018c52:	4413      	add	r3, r2
 8018c54:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d103      	bne.n	8018c66 <MQTTSerialize_connectLength+0x7c>
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d00a      	beq.n	8018c7c <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	3340      	adds	r3, #64	; 0x40
 8018c6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018c6e:	f000 fc28 	bl	80194c2 <MQTTstrlen>
 8018c72:	4603      	mov	r3, r0
 8018c74:	3302      	adds	r3, #2
 8018c76:	68fa      	ldr	r2, [r7, #12]
 8018c78:	4413      	add	r3, r2
 8018c7a:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d103      	bne.n	8018c8c <MQTTSerialize_connectLength+0xa2>
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d00a      	beq.n	8018ca2 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	334c      	adds	r3, #76	; 0x4c
 8018c90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018c94:	f000 fc15 	bl	80194c2 <MQTTstrlen>
 8018c98:	4603      	mov	r3, r0
 8018c9a:	3302      	adds	r3, #2
 8018c9c:	68fa      	ldr	r2, [r7, #12]
 8018c9e:	4413      	add	r3, r2
 8018ca0:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8018ca2:	68fb      	ldr	r3, [r7, #12]
}
 8018ca4:	4618      	mov	r0, r3
 8018ca6:	3714      	adds	r7, #20
 8018ca8:	46bd      	mov	sp, r7
 8018caa:	bd90      	pop	{r4, r7, pc}

08018cac <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8018cac:	b580      	push	{r7, lr}
 8018cae:	b08a      	sub	sp, #40	; 0x28
 8018cb0:	af00      	add	r7, sp, #0
 8018cb2:	60f8      	str	r0, [r7, #12]
 8018cb4:	60b9      	str	r1, [r7, #8]
 8018cb6:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8018cb8:	68fb      	ldr	r3, [r7, #12]
 8018cba:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8018cbc:	2300      	movs	r3, #0
 8018cbe:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8018cc0:	2300      	movs	r3, #0
 8018cc2:	617b      	str	r3, [r7, #20]
	int len = 0;
 8018cc4:	2300      	movs	r3, #0
 8018cc6:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8018cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ccc:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8018cce:	6878      	ldr	r0, [r7, #4]
 8018cd0:	f7ff ff8b 	bl	8018bea <MQTTSerialize_connectLength>
 8018cd4:	6238      	str	r0, [r7, #32]
 8018cd6:	6a38      	ldr	r0, [r7, #32]
 8018cd8:	f000 faa8 	bl	801922c <MQTTPacket_len>
 8018cdc:	4602      	mov	r2, r0
 8018cde:	68bb      	ldr	r3, [r7, #8]
 8018ce0:	4293      	cmp	r3, r2
 8018ce2:	da03      	bge.n	8018cec <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8018ce4:	f06f 0301 	mvn.w	r3, #1
 8018ce8:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8018cea:	e0c2      	b.n	8018e72 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8018cec:	2300      	movs	r3, #0
 8018cee:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8018cf0:	7e3b      	ldrb	r3, [r7, #24]
 8018cf2:	2201      	movs	r2, #1
 8018cf4:	f362 1307 	bfi	r3, r2, #4, #4
 8018cf8:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8018cfa:	7e3a      	ldrb	r2, [r7, #24]
 8018cfc:	f107 031c 	add.w	r3, r7, #28
 8018d00:	4611      	mov	r1, r2
 8018d02:	4618      	mov	r0, r3
 8018d04:	f000 fb21 	bl	801934a <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8018d08:	69fb      	ldr	r3, [r7, #28]
 8018d0a:	6a39      	ldr	r1, [r7, #32]
 8018d0c:	4618      	mov	r0, r3
 8018d0e:	f000 fa21 	bl	8019154 <MQTTPacket_encode>
 8018d12:	4602      	mov	r2, r0
 8018d14:	69fb      	ldr	r3, [r7, #28]
 8018d16:	4413      	add	r3, r2
 8018d18:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	7a1b      	ldrb	r3, [r3, #8]
 8018d1e:	2b04      	cmp	r3, #4
 8018d20:	d10c      	bne.n	8018d3c <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8018d22:	f107 031c 	add.w	r3, r7, #28
 8018d26:	4955      	ldr	r1, [pc, #340]	; (8018e7c <MQTTSerialize_connect+0x1d0>)
 8018d28:	4618      	mov	r0, r3
 8018d2a:	f000 fb4c 	bl	80193c6 <writeCString>
		writeChar(&ptr, (char) 4);
 8018d2e:	f107 031c 	add.w	r3, r7, #28
 8018d32:	2104      	movs	r1, #4
 8018d34:	4618      	mov	r0, r3
 8018d36:	f000 fb08 	bl	801934a <writeChar>
 8018d3a:	e00b      	b.n	8018d54 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8018d3c:	f107 031c 	add.w	r3, r7, #28
 8018d40:	494f      	ldr	r1, [pc, #316]	; (8018e80 <MQTTSerialize_connect+0x1d4>)
 8018d42:	4618      	mov	r0, r3
 8018d44:	f000 fb3f 	bl	80193c6 <writeCString>
		writeChar(&ptr, (char) 3);
 8018d48:	f107 031c 	add.w	r3, r7, #28
 8018d4c:	2103      	movs	r1, #3
 8018d4e:	4618      	mov	r0, r3
 8018d50:	f000 fafb 	bl	801934a <writeChar>
	}

	flags.all = 0;
 8018d54:	2300      	movs	r3, #0
 8018d56:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	7e9b      	ldrb	r3, [r3, #26]
 8018d5c:	f003 0301 	and.w	r3, r3, #1
 8018d60:	b2da      	uxtb	r2, r3
 8018d62:	7d3b      	ldrb	r3, [r7, #20]
 8018d64:	f362 0341 	bfi	r3, r2, #1, #1
 8018d68:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	7edb      	ldrb	r3, [r3, #27]
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	bf14      	ite	ne
 8018d72:	2301      	movne	r3, #1
 8018d74:	2300      	moveq	r3, #0
 8018d76:	b2da      	uxtb	r2, r3
 8018d78:	7d3b      	ldrb	r3, [r7, #20]
 8018d7a:	f362 0382 	bfi	r3, r2, #2, #1
 8018d7e:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8018d80:	7d3b      	ldrb	r3, [r7, #20]
 8018d82:	f003 0304 	and.w	r3, r3, #4
 8018d86:	b2db      	uxtb	r3, r3
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d013      	beq.n	8018db4 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018d92:	f003 0303 	and.w	r3, r3, #3
 8018d96:	b2da      	uxtb	r2, r3
 8018d98:	7d3b      	ldrb	r3, [r7, #20]
 8018d9a:	f362 03c4 	bfi	r3, r2, #3, #2
 8018d9e:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018da6:	f003 0301 	and.w	r3, r3, #1
 8018daa:	b2da      	uxtb	r2, r3
 8018dac:	7d3b      	ldrb	r3, [r7, #20]
 8018dae:	f362 1345 	bfi	r3, r2, #5, #1
 8018db2:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d103      	bne.n	8018dc4 <MQTTSerialize_connect+0x118>
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d003      	beq.n	8018dcc <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8018dc4:	7d3b      	ldrb	r3, [r7, #20]
 8018dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018dca:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d103      	bne.n	8018ddc <MQTTSerialize_connect+0x130>
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d003      	beq.n	8018de4 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8018ddc:	7d3b      	ldrb	r3, [r7, #20]
 8018dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018de2:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8018de4:	7d3a      	ldrb	r2, [r7, #20]
 8018de6:	f107 031c 	add.w	r3, r7, #28
 8018dea:	4611      	mov	r1, r2
 8018dec:	4618      	mov	r0, r3
 8018dee:	f000 faac 	bl	801934a <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	8b1b      	ldrh	r3, [r3, #24]
 8018df6:	461a      	mov	r2, r3
 8018df8:	f107 031c 	add.w	r3, r7, #28
 8018dfc:	4611      	mov	r1, r2
 8018dfe:	4618      	mov	r0, r3
 8018e00:	f000 fab8 	bl	8019374 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	f107 001c 	add.w	r0, r7, #28
 8018e0a:	330c      	adds	r3, #12
 8018e0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018e0e:	f000 faf9 	bl	8019404 <writeMQTTString>
	if (options->willFlag)
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	7edb      	ldrb	r3, [r3, #27]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d00d      	beq.n	8018e36 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	f107 001c 	add.w	r0, r7, #28
 8018e20:	3324      	adds	r3, #36	; 0x24
 8018e22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018e24:	f000 faee 	bl	8019404 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	f107 001c 	add.w	r0, r7, #28
 8018e2e:	3330      	adds	r3, #48	; 0x30
 8018e30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018e32:	f000 fae7 	bl	8019404 <writeMQTTString>
	}
	if (flags.bits.username)
 8018e36:	7d3b      	ldrb	r3, [r7, #20]
 8018e38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018e3c:	b2db      	uxtb	r3, r3
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d006      	beq.n	8018e50 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	f107 001c 	add.w	r0, r7, #28
 8018e48:	3340      	adds	r3, #64	; 0x40
 8018e4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018e4c:	f000 fada 	bl	8019404 <writeMQTTString>
	if (flags.bits.password)
 8018e50:	7d3b      	ldrb	r3, [r7, #20]
 8018e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018e56:	b2db      	uxtb	r3, r3
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d006      	beq.n	8018e6a <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	f107 001c 	add.w	r0, r7, #28
 8018e62:	334c      	adds	r3, #76	; 0x4c
 8018e64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018e66:	f000 facd 	bl	8019404 <writeMQTTString>

	rc = ptr - buf;
 8018e6a:	69fa      	ldr	r2, [r7, #28]
 8018e6c:	68fb      	ldr	r3, [r7, #12]
 8018e6e:	1ad3      	subs	r3, r2, r3
 8018e70:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8018e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018e74:	4618      	mov	r0, r3
 8018e76:	3728      	adds	r7, #40	; 0x28
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	bd80      	pop	{r7, pc}
 8018e7c:	0801e1ec 	.word	0x0801e1ec
 8018e80:	0801e1f4 	.word	0x0801e1f4

08018e84 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8018e84:	b580      	push	{r7, lr}
 8018e86:	b08a      	sub	sp, #40	; 0x28
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	60f8      	str	r0, [r7, #12]
 8018e8c:	60b9      	str	r1, [r7, #8]
 8018e8e:	607a      	str	r2, [r7, #4]
 8018e90:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8018e92:	2300      	movs	r3, #0
 8018e94:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8018e9a:	2300      	movs	r3, #0
 8018e9c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8018e9e:	2300      	movs	r3, #0
 8018ea0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8018ea6:	f107 0318 	add.w	r3, r7, #24
 8018eaa:	4618      	mov	r0, r3
 8018eac:	f000 fa39 	bl	8019322 <readChar>
 8018eb0:	4603      	mov	r3, r0
 8018eb2:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8018eb4:	7f3b      	ldrb	r3, [r7, #28]
 8018eb6:	f023 030f 	bic.w	r3, r3, #15
 8018eba:	b2db      	uxtb	r3, r3
 8018ebc:	2b20      	cmp	r3, #32
 8018ebe:	d12e      	bne.n	8018f1e <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8018ec0:	69bb      	ldr	r3, [r7, #24]
 8018ec2:	f107 0214 	add.w	r2, r7, #20
 8018ec6:	4611      	mov	r1, r2
 8018ec8:	4618      	mov	r0, r3
 8018eca:	f000 f9f9 	bl	80192c0 <MQTTPacket_decodeBuf>
 8018ece:	6278      	str	r0, [r7, #36]	; 0x24
 8018ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ed2:	69bb      	ldr	r3, [r7, #24]
 8018ed4:	4413      	add	r3, r2
 8018ed6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8018ed8:	69bb      	ldr	r3, [r7, #24]
 8018eda:	697a      	ldr	r2, [r7, #20]
 8018edc:	4413      	add	r3, r2
 8018ede:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8018ee0:	69bb      	ldr	r3, [r7, #24]
 8018ee2:	6a3a      	ldr	r2, [r7, #32]
 8018ee4:	1ad3      	subs	r3, r2, r3
 8018ee6:	2b01      	cmp	r3, #1
 8018ee8:	dd1b      	ble.n	8018f22 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 8018eea:	f107 0318 	add.w	r3, r7, #24
 8018eee:	4618      	mov	r0, r3
 8018ef0:	f000 fa17 	bl	8019322 <readChar>
 8018ef4:	4603      	mov	r3, r0
 8018ef6:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8018ef8:	7c3b      	ldrb	r3, [r7, #16]
 8018efa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018efe:	b2db      	uxtb	r3, r3
 8018f00:	461a      	mov	r2, r3
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8018f06:	f107 0318 	add.w	r3, r7, #24
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	f000 fa09 	bl	8019322 <readChar>
 8018f10:	4603      	mov	r3, r0
 8018f12:	461a      	mov	r2, r3
 8018f14:	68bb      	ldr	r3, [r7, #8]
 8018f16:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8018f18:	2301      	movs	r3, #1
 8018f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8018f1c:	e002      	b.n	8018f24 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8018f1e:	bf00      	nop
 8018f20:	e000      	b.n	8018f24 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8018f22:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8018f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018f26:	4618      	mov	r0, r3
 8018f28:	3728      	adds	r7, #40	; 0x28
 8018f2a:	46bd      	mov	sp, r7
 8018f2c:	bd80      	pop	{r7, pc}

08018f2e <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8018f2e:	b580      	push	{r7, lr}
 8018f30:	b088      	sub	sp, #32
 8018f32:	af00      	add	r7, sp, #0
 8018f34:	60f8      	str	r0, [r7, #12]
 8018f36:	60b9      	str	r1, [r7, #8]
 8018f38:	4613      	mov	r3, r2
 8018f3a:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8018f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018f44:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8018f4a:	68bb      	ldr	r3, [r7, #8]
 8018f4c:	2b01      	cmp	r3, #1
 8018f4e:	dc03      	bgt.n	8018f58 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8018f50:	f06f 0301 	mvn.w	r3, #1
 8018f54:	61fb      	str	r3, [r7, #28]
		goto exit;
 8018f56:	e01d      	b.n	8018f94 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 8018f58:	2300      	movs	r3, #0
 8018f5a:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8018f5c:	79fb      	ldrb	r3, [r7, #7]
 8018f5e:	f003 030f 	and.w	r3, r3, #15
 8018f62:	b2da      	uxtb	r2, r3
 8018f64:	7e3b      	ldrb	r3, [r7, #24]
 8018f66:	f362 1307 	bfi	r3, r2, #4, #4
 8018f6a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8018f6c:	7e3a      	ldrb	r2, [r7, #24]
 8018f6e:	f107 0314 	add.w	r3, r7, #20
 8018f72:	4611      	mov	r1, r2
 8018f74:	4618      	mov	r0, r3
 8018f76:	f000 f9e8 	bl	801934a <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8018f7a:	697b      	ldr	r3, [r7, #20]
 8018f7c:	2100      	movs	r1, #0
 8018f7e:	4618      	mov	r0, r3
 8018f80:	f000 f8e8 	bl	8019154 <MQTTPacket_encode>
 8018f84:	4602      	mov	r2, r0
 8018f86:	697b      	ldr	r3, [r7, #20]
 8018f88:	4413      	add	r3, r2
 8018f8a:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8018f8c:	697a      	ldr	r2, [r7, #20]
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	1ad3      	subs	r3, r2, r3
 8018f92:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8018f94:	69fb      	ldr	r3, [r7, #28]
}
 8018f96:	4618      	mov	r0, r3
 8018f98:	3720      	adds	r7, #32
 8018f9a:	46bd      	mov	sp, r7
 8018f9c:	bd80      	pop	{r7, pc}

08018f9e <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 8018f9e:	b580      	push	{r7, lr}
 8018fa0:	b082      	sub	sp, #8
 8018fa2:	af00      	add	r7, sp, #0
 8018fa4:	6078      	str	r0, [r7, #4]
 8018fa6:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 8018fa8:	220e      	movs	r2, #14
 8018faa:	6839      	ldr	r1, [r7, #0]
 8018fac:	6878      	ldr	r0, [r7, #4]
 8018fae:	f7ff ffbe 	bl	8018f2e <MQTTSerialize_zero>
 8018fb2:	4603      	mov	r3, r0
}
 8018fb4:	4618      	mov	r0, r3
 8018fb6:	3708      	adds	r7, #8
 8018fb8:	46bd      	mov	sp, r7
 8018fba:	bd80      	pop	{r7, pc}

08018fbc <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8018fbc:	b580      	push	{r7, lr}
 8018fbe:	b082      	sub	sp, #8
 8018fc0:	af00      	add	r7, sp, #0
 8018fc2:	6078      	str	r0, [r7, #4]
 8018fc4:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8018fc6:	220c      	movs	r2, #12
 8018fc8:	6839      	ldr	r1, [r7, #0]
 8018fca:	6878      	ldr	r0, [r7, #4]
 8018fcc:	f7ff ffaf 	bl	8018f2e <MQTTSerialize_zero>
 8018fd0:	4603      	mov	r3, r0
}
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	3708      	adds	r7, #8
 8018fd6:	46bd      	mov	sp, r7
 8018fd8:	bd80      	pop	{r7, pc}

08018fda <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8018fda:	b580      	push	{r7, lr}
 8018fdc:	b08a      	sub	sp, #40	; 0x28
 8018fde:	af00      	add	r7, sp, #0
 8018fe0:	60f8      	str	r0, [r7, #12]
 8018fe2:	60b9      	str	r1, [r7, #8]
 8018fe4:	607a      	str	r2, [r7, #4]
 8018fe6:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8018fe8:	2300      	movs	r3, #0
 8018fea:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8018fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018fee:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8018ff0:	2300      	movs	r3, #0
 8018ff2:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8018ff4:	2300      	movs	r3, #0
 8018ff6:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8018ff8:	2300      	movs	r3, #0
 8018ffa:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8018ffc:	f107 0318 	add.w	r3, r7, #24
 8019000:	4618      	mov	r0, r3
 8019002:	f000 f98e 	bl	8019322 <readChar>
 8019006:	4603      	mov	r3, r0
 8019008:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 801900a:	7f3b      	ldrb	r3, [r7, #28]
 801900c:	f023 030f 	bic.w	r3, r3, #15
 8019010:	b2db      	uxtb	r3, r3
 8019012:	2b30      	cmp	r3, #48	; 0x30
 8019014:	d14b      	bne.n	80190ae <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8019016:	7f3b      	ldrb	r3, [r7, #28]
 8019018:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801901c:	b2db      	uxtb	r3, r3
 801901e:	461a      	mov	r2, r3
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8019024:	7f3b      	ldrb	r3, [r7, #28]
 8019026:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801902a:	b2db      	uxtb	r3, r3
 801902c:	461a      	mov	r2, r3
 801902e:	68bb      	ldr	r3, [r7, #8]
 8019030:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8019032:	7f3b      	ldrb	r3, [r7, #28]
 8019034:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019038:	b2db      	uxtb	r3, r3
 801903a:	461a      	mov	r2, r3
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8019040:	69bb      	ldr	r3, [r7, #24]
 8019042:	f107 0214 	add.w	r2, r7, #20
 8019046:	4611      	mov	r1, r2
 8019048:	4618      	mov	r0, r3
 801904a:	f000 f939 	bl	80192c0 <MQTTPacket_decodeBuf>
 801904e:	6278      	str	r0, [r7, #36]	; 0x24
 8019050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019052:	69bb      	ldr	r3, [r7, #24]
 8019054:	4413      	add	r3, r2
 8019056:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8019058:	69bb      	ldr	r3, [r7, #24]
 801905a:	697a      	ldr	r2, [r7, #20]
 801905c:	4413      	add	r3, r2
 801905e:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8019060:	f107 0318 	add.w	r3, r7, #24
 8019064:	6a3a      	ldr	r2, [r7, #32]
 8019066:	4619      	mov	r1, r3
 8019068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801906a:	f000 f9f9 	bl	8019460 <readMQTTLenString>
 801906e:	4603      	mov	r3, r0
 8019070:	2b00      	cmp	r3, #0
 8019072:	d01e      	beq.n	80190b2 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8019074:	69bb      	ldr	r3, [r7, #24]
 8019076:	6a3a      	ldr	r2, [r7, #32]
 8019078:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801907a:	2b00      	cmp	r3, #0
 801907c:	db19      	blt.n	80190b2 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 801907e:	68bb      	ldr	r3, [r7, #8]
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	2b00      	cmp	r3, #0
 8019084:	dd08      	ble.n	8019098 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8019086:	f107 0318 	add.w	r3, r7, #24
 801908a:	4618      	mov	r0, r3
 801908c:	f000 f92e 	bl	80192ec <readInt>
 8019090:	4603      	mov	r3, r0
 8019092:	b29a      	uxth	r2, r3
 8019094:	683b      	ldr	r3, [r7, #0]
 8019096:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8019098:	69bb      	ldr	r3, [r7, #24]
 801909a:	6a3a      	ldr	r2, [r7, #32]
 801909c:	1ad2      	subs	r2, r2, r3
 801909e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190a0:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 80190a2:	69ba      	ldr	r2, [r7, #24]
 80190a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190a6:	601a      	str	r2, [r3, #0]
	rc = 1;
 80190a8:	2301      	movs	r3, #1
 80190aa:	627b      	str	r3, [r7, #36]	; 0x24
 80190ac:	e002      	b.n	80190b4 <MQTTDeserialize_publish+0xda>
		goto exit;
 80190ae:	bf00      	nop
 80190b0:	e000      	b.n	80190b4 <MQTTDeserialize_publish+0xda>
		goto exit;
 80190b2:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80190b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80190b6:	4618      	mov	r0, r3
 80190b8:	3728      	adds	r7, #40	; 0x28
 80190ba:	46bd      	mov	sp, r7
 80190bc:	bd80      	pop	{r7, pc}

080190be <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 80190be:	b580      	push	{r7, lr}
 80190c0:	b08a      	sub	sp, #40	; 0x28
 80190c2:	af00      	add	r7, sp, #0
 80190c4:	60f8      	str	r0, [r7, #12]
 80190c6:	60b9      	str	r1, [r7, #8]
 80190c8:	607a      	str	r2, [r7, #4]
 80190ca:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80190cc:	2300      	movs	r3, #0
 80190ce:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80190d0:	683b      	ldr	r3, [r7, #0]
 80190d2:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80190d4:	2300      	movs	r3, #0
 80190d6:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80190d8:	2300      	movs	r3, #0
 80190da:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80190dc:	f107 0318 	add.w	r3, r7, #24
 80190e0:	4618      	mov	r0, r3
 80190e2:	f000 f91e 	bl	8019322 <readChar>
 80190e6:	4603      	mov	r3, r0
 80190e8:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 80190ea:	7f3b      	ldrb	r3, [r7, #28]
 80190ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80190f0:	b2db      	uxtb	r3, r3
 80190f2:	461a      	mov	r2, r3
 80190f4:	68bb      	ldr	r3, [r7, #8]
 80190f6:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 80190f8:	7f3b      	ldrb	r3, [r7, #28]
 80190fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80190fe:	b2db      	uxtb	r3, r3
 8019100:	461a      	mov	r2, r3
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8019106:	69bb      	ldr	r3, [r7, #24]
 8019108:	f107 0214 	add.w	r2, r7, #20
 801910c:	4611      	mov	r1, r2
 801910e:	4618      	mov	r0, r3
 8019110:	f000 f8d6 	bl	80192c0 <MQTTPacket_decodeBuf>
 8019114:	6278      	str	r0, [r7, #36]	; 0x24
 8019116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019118:	69bb      	ldr	r3, [r7, #24]
 801911a:	4413      	add	r3, r2
 801911c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801911e:	69bb      	ldr	r3, [r7, #24]
 8019120:	697a      	ldr	r2, [r7, #20]
 8019122:	4413      	add	r3, r2
 8019124:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8019126:	69bb      	ldr	r3, [r7, #24]
 8019128:	6a3a      	ldr	r2, [r7, #32]
 801912a:	1ad3      	subs	r3, r2, r3
 801912c:	2b01      	cmp	r3, #1
 801912e:	dd0b      	ble.n	8019148 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8019130:	f107 0318 	add.w	r3, r7, #24
 8019134:	4618      	mov	r0, r3
 8019136:	f000 f8d9 	bl	80192ec <readInt>
 801913a:	4603      	mov	r3, r0
 801913c:	b29a      	uxth	r2, r3
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8019142:	2301      	movs	r3, #1
 8019144:	627b      	str	r3, [r7, #36]	; 0x24
 8019146:	e000      	b.n	801914a <MQTTDeserialize_ack+0x8c>
		goto exit;
 8019148:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801914c:	4618      	mov	r0, r3
 801914e:	3728      	adds	r7, #40	; 0x28
 8019150:	46bd      	mov	sp, r7
 8019152:	bd80      	pop	{r7, pc}

08019154 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8019154:	b480      	push	{r7}
 8019156:	b085      	sub	sp, #20
 8019158:	af00      	add	r7, sp, #0
 801915a:	6078      	str	r0, [r7, #4]
 801915c:	6039      	str	r1, [r7, #0]
	int rc = 0;
 801915e:	2300      	movs	r3, #0
 8019160:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8019162:	683b      	ldr	r3, [r7, #0]
 8019164:	425a      	negs	r2, r3
 8019166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801916a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801916e:	bf58      	it	pl
 8019170:	4253      	negpl	r3, r2
 8019172:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8019174:	683b      	ldr	r3, [r7, #0]
 8019176:	2b00      	cmp	r3, #0
 8019178:	da00      	bge.n	801917c <MQTTPacket_encode+0x28>
 801917a:	337f      	adds	r3, #127	; 0x7f
 801917c:	11db      	asrs	r3, r3, #7
 801917e:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8019180:	683b      	ldr	r3, [r7, #0]
 8019182:	2b00      	cmp	r3, #0
 8019184:	dd03      	ble.n	801918e <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8019186:	7afb      	ldrb	r3, [r7, #11]
 8019188:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801918c:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	1c5a      	adds	r2, r3, #1
 8019192:	60fa      	str	r2, [r7, #12]
 8019194:	461a      	mov	r2, r3
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	4413      	add	r3, r2
 801919a:	7afa      	ldrb	r2, [r7, #11]
 801919c:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 801919e:	683b      	ldr	r3, [r7, #0]
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	dcde      	bgt.n	8019162 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 80191a4:	68fb      	ldr	r3, [r7, #12]
}
 80191a6:	4618      	mov	r0, r3
 80191a8:	3714      	adds	r7, #20
 80191aa:	46bd      	mov	sp, r7
 80191ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b0:	4770      	bx	lr

080191b2 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 80191b2:	b580      	push	{r7, lr}
 80191b4:	b086      	sub	sp, #24
 80191b6:	af00      	add	r7, sp, #0
 80191b8:	6078      	str	r0, [r7, #4]
 80191ba:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 80191bc:	2301      	movs	r3, #1
 80191be:	617b      	str	r3, [r7, #20]
	int len = 0;
 80191c0:	2300      	movs	r3, #0
 80191c2:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 80191c4:	683b      	ldr	r3, [r7, #0]
 80191c6:	2200      	movs	r2, #0
 80191c8:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 80191ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80191ce:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80191d0:	693b      	ldr	r3, [r7, #16]
 80191d2:	3301      	adds	r3, #1
 80191d4:	613b      	str	r3, [r7, #16]
 80191d6:	693b      	ldr	r3, [r7, #16]
 80191d8:	2b04      	cmp	r3, #4
 80191da:	dd03      	ble.n	80191e4 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 80191dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80191e0:	60fb      	str	r3, [r7, #12]
			goto exit;
 80191e2:	e01d      	b.n	8019220 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 80191e4:	f107 020b 	add.w	r2, r7, #11
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	2101      	movs	r1, #1
 80191ec:	4610      	mov	r0, r2
 80191ee:	4798      	blx	r3
 80191f0:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	2b01      	cmp	r3, #1
 80191f6:	d112      	bne.n	801921e <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 80191f8:	683b      	ldr	r3, [r7, #0]
 80191fa:	681a      	ldr	r2, [r3, #0]
 80191fc:	7afb      	ldrb	r3, [r7, #11]
 80191fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019202:	6979      	ldr	r1, [r7, #20]
 8019204:	fb01 f303 	mul.w	r3, r1, r3
 8019208:	441a      	add	r2, r3
 801920a:	683b      	ldr	r3, [r7, #0]
 801920c:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 801920e:	697b      	ldr	r3, [r7, #20]
 8019210:	01db      	lsls	r3, r3, #7
 8019212:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8019214:	7afb      	ldrb	r3, [r7, #11]
 8019216:	b25b      	sxtb	r3, r3
 8019218:	2b00      	cmp	r3, #0
 801921a:	dbd6      	blt.n	80191ca <MQTTPacket_decode+0x18>
exit:
 801921c:	e000      	b.n	8019220 <MQTTPacket_decode+0x6e>
			goto exit;
 801921e:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8019220:	693b      	ldr	r3, [r7, #16]
}
 8019222:	4618      	mov	r0, r3
 8019224:	3718      	adds	r7, #24
 8019226:	46bd      	mov	sp, r7
 8019228:	bd80      	pop	{r7, pc}
	...

0801922c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 801922c:	b480      	push	{r7}
 801922e:	b083      	sub	sp, #12
 8019230:	af00      	add	r7, sp, #0
 8019232:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	3301      	adds	r3, #1
 8019238:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	2b7f      	cmp	r3, #127	; 0x7f
 801923e:	dc03      	bgt.n	8019248 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	3301      	adds	r3, #1
 8019244:	607b      	str	r3, [r7, #4]
 8019246:	e012      	b.n	801926e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801924e:	da03      	bge.n	8019258 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	3302      	adds	r3, #2
 8019254:	607b      	str	r3, [r7, #4]
 8019256:	e00a      	b.n	801926e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	4a08      	ldr	r2, [pc, #32]	; (801927c <MQTTPacket_len+0x50>)
 801925c:	4293      	cmp	r3, r2
 801925e:	dc03      	bgt.n	8019268 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	3303      	adds	r3, #3
 8019264:	607b      	str	r3, [r7, #4]
 8019266:	e002      	b.n	801926e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	3304      	adds	r3, #4
 801926c:	607b      	str	r3, [r7, #4]
	return rem_len;
 801926e:	687b      	ldr	r3, [r7, #4]
}
 8019270:	4618      	mov	r0, r3
 8019272:	370c      	adds	r7, #12
 8019274:	46bd      	mov	sp, r7
 8019276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801927a:	4770      	bx	lr
 801927c:	001ffffe 	.word	0x001ffffe

08019280 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8019280:	b480      	push	{r7}
 8019282:	b085      	sub	sp, #20
 8019284:	af00      	add	r7, sp, #0
 8019286:	6078      	str	r0, [r7, #4]
 8019288:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 801928a:	2300      	movs	r3, #0
 801928c:	60fb      	str	r3, [r7, #12]
 801928e:	e00a      	b.n	80192a6 <bufchar+0x26>
		*c = *bufptr++;
 8019290:	4b0a      	ldr	r3, [pc, #40]	; (80192bc <bufchar+0x3c>)
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	1c5a      	adds	r2, r3, #1
 8019296:	4909      	ldr	r1, [pc, #36]	; (80192bc <bufchar+0x3c>)
 8019298:	600a      	str	r2, [r1, #0]
 801929a:	781a      	ldrb	r2, [r3, #0]
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 80192a0:	68fb      	ldr	r3, [r7, #12]
 80192a2:	3301      	adds	r3, #1
 80192a4:	60fb      	str	r3, [r7, #12]
 80192a6:	68fa      	ldr	r2, [r7, #12]
 80192a8:	683b      	ldr	r3, [r7, #0]
 80192aa:	429a      	cmp	r2, r3
 80192ac:	dbf0      	blt.n	8019290 <bufchar+0x10>
	return count;
 80192ae:	683b      	ldr	r3, [r7, #0]
}
 80192b0:	4618      	mov	r0, r3
 80192b2:	3714      	adds	r7, #20
 80192b4:	46bd      	mov	sp, r7
 80192b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ba:	4770      	bx	lr
 80192bc:	20011404 	.word	0x20011404

080192c0 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 80192c0:	b580      	push	{r7, lr}
 80192c2:	b082      	sub	sp, #8
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	6078      	str	r0, [r7, #4]
 80192c8:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 80192ca:	4a06      	ldr	r2, [pc, #24]	; (80192e4 <MQTTPacket_decodeBuf+0x24>)
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 80192d0:	6839      	ldr	r1, [r7, #0]
 80192d2:	4805      	ldr	r0, [pc, #20]	; (80192e8 <MQTTPacket_decodeBuf+0x28>)
 80192d4:	f7ff ff6d 	bl	80191b2 <MQTTPacket_decode>
 80192d8:	4603      	mov	r3, r0
}
 80192da:	4618      	mov	r0, r3
 80192dc:	3708      	adds	r7, #8
 80192de:	46bd      	mov	sp, r7
 80192e0:	bd80      	pop	{r7, pc}
 80192e2:	bf00      	nop
 80192e4:	20011404 	.word	0x20011404
 80192e8:	08019281 	.word	0x08019281

080192ec <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 80192ec:	b480      	push	{r7}
 80192ee:	b085      	sub	sp, #20
 80192f0:	af00      	add	r7, sp, #0
 80192f2:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	781b      	ldrb	r3, [r3, #0]
 80192fe:	021b      	lsls	r3, r3, #8
 8019300:	68fa      	ldr	r2, [r7, #12]
 8019302:	3201      	adds	r2, #1
 8019304:	7812      	ldrb	r2, [r2, #0]
 8019306:	4413      	add	r3, r2
 8019308:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	1c9a      	adds	r2, r3, #2
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	601a      	str	r2, [r3, #0]
	return len;
 8019314:	68bb      	ldr	r3, [r7, #8]
}
 8019316:	4618      	mov	r0, r3
 8019318:	3714      	adds	r7, #20
 801931a:	46bd      	mov	sp, r7
 801931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019320:	4770      	bx	lr

08019322 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8019322:	b480      	push	{r7}
 8019324:	b085      	sub	sp, #20
 8019326:	af00      	add	r7, sp, #0
 8019328:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	781b      	ldrb	r3, [r3, #0]
 8019330:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	1c5a      	adds	r2, r3, #1
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	601a      	str	r2, [r3, #0]
	return c;
 801933c:	7bfb      	ldrb	r3, [r7, #15]
}
 801933e:	4618      	mov	r0, r3
 8019340:	3714      	adds	r7, #20
 8019342:	46bd      	mov	sp, r7
 8019344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019348:	4770      	bx	lr

0801934a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 801934a:	b480      	push	{r7}
 801934c:	b083      	sub	sp, #12
 801934e:	af00      	add	r7, sp, #0
 8019350:	6078      	str	r0, [r7, #4]
 8019352:	460b      	mov	r3, r1
 8019354:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	78fa      	ldrb	r2, [r7, #3]
 801935c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	1c5a      	adds	r2, r3, #1
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	601a      	str	r2, [r3, #0]
}
 8019368:	bf00      	nop
 801936a:	370c      	adds	r7, #12
 801936c:	46bd      	mov	sp, r7
 801936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019372:	4770      	bx	lr

08019374 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8019374:	b480      	push	{r7}
 8019376:	b083      	sub	sp, #12
 8019378:	af00      	add	r7, sp, #0
 801937a:	6078      	str	r0, [r7, #4]
 801937c:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 801937e:	683b      	ldr	r3, [r7, #0]
 8019380:	2b00      	cmp	r3, #0
 8019382:	da00      	bge.n	8019386 <writeInt+0x12>
 8019384:	33ff      	adds	r3, #255	; 0xff
 8019386:	121b      	asrs	r3, r3, #8
 8019388:	461a      	mov	r2, r3
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	b2d2      	uxtb	r2, r2
 8019390:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	1c5a      	adds	r2, r3, #1
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 801939c:	683b      	ldr	r3, [r7, #0]
 801939e:	425a      	negs	r2, r3
 80193a0:	b2db      	uxtb	r3, r3
 80193a2:	b2d2      	uxtb	r2, r2
 80193a4:	bf58      	it	pl
 80193a6:	4253      	negpl	r3, r2
 80193a8:	687a      	ldr	r2, [r7, #4]
 80193aa:	6812      	ldr	r2, [r2, #0]
 80193ac:	b2db      	uxtb	r3, r3
 80193ae:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	1c5a      	adds	r2, r3, #1
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	601a      	str	r2, [r3, #0]
}
 80193ba:	bf00      	nop
 80193bc:	370c      	adds	r7, #12
 80193be:	46bd      	mov	sp, r7
 80193c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c4:	4770      	bx	lr

080193c6 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 80193c6:	b580      	push	{r7, lr}
 80193c8:	b084      	sub	sp, #16
 80193ca:	af00      	add	r7, sp, #0
 80193cc:	6078      	str	r0, [r7, #4]
 80193ce:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 80193d0:	6838      	ldr	r0, [r7, #0]
 80193d2:	f7e6 ff3f 	bl	8000254 <strlen>
 80193d6:	4603      	mov	r3, r0
 80193d8:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 80193da:	68f9      	ldr	r1, [r7, #12]
 80193dc:	6878      	ldr	r0, [r7, #4]
 80193de:	f7ff ffc9 	bl	8019374 <writeInt>
	memcpy(*pptr, string, len);
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	68fa      	ldr	r2, [r7, #12]
 80193e8:	6839      	ldr	r1, [r7, #0]
 80193ea:	4618      	mov	r0, r3
 80193ec:	f000 fae2 	bl	80199b4 <memcpy>
	*pptr += len;
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	681a      	ldr	r2, [r3, #0]
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	441a      	add	r2, r3
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	601a      	str	r2, [r3, #0]
}
 80193fc:	bf00      	nop
 80193fe:	3710      	adds	r7, #16
 8019400:	46bd      	mov	sp, r7
 8019402:	bd80      	pop	{r7, pc}

08019404 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8019404:	b580      	push	{r7, lr}
 8019406:	b084      	sub	sp, #16
 8019408:	af00      	add	r7, sp, #0
 801940a:	60f8      	str	r0, [r7, #12]
 801940c:	4638      	mov	r0, r7
 801940e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	2b00      	cmp	r3, #0
 8019416:	dd12      	ble.n	801943e <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	4619      	mov	r1, r3
 801941c:	68f8      	ldr	r0, [r7, #12]
 801941e:	f7ff ffa9 	bl	8019374 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	68b9      	ldr	r1, [r7, #8]
 8019428:	687a      	ldr	r2, [r7, #4]
 801942a:	4618      	mov	r0, r3
 801942c:	f000 fac2 	bl	80199b4 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	687a      	ldr	r2, [r7, #4]
 8019436:	441a      	add	r2, r3
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 801943c:	e00c      	b.n	8019458 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 801943e:	683b      	ldr	r3, [r7, #0]
 8019440:	2b00      	cmp	r3, #0
 8019442:	d005      	beq.n	8019450 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8019444:	683b      	ldr	r3, [r7, #0]
 8019446:	4619      	mov	r1, r3
 8019448:	68f8      	ldr	r0, [r7, #12]
 801944a:	f7ff ffbc 	bl	80193c6 <writeCString>
}
 801944e:	e003      	b.n	8019458 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8019450:	2100      	movs	r1, #0
 8019452:	68f8      	ldr	r0, [r7, #12]
 8019454:	f7ff ff8e 	bl	8019374 <writeInt>
}
 8019458:	bf00      	nop
 801945a:	3710      	adds	r7, #16
 801945c:	46bd      	mov	sp, r7
 801945e:	bd80      	pop	{r7, pc}

08019460 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8019460:	b580      	push	{r7, lr}
 8019462:	b086      	sub	sp, #24
 8019464:	af00      	add	r7, sp, #0
 8019466:	60f8      	str	r0, [r7, #12]
 8019468:	60b9      	str	r1, [r7, #8]
 801946a:	607a      	str	r2, [r7, #4]
	int rc = 0;
 801946c:	2300      	movs	r3, #0
 801946e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8019470:	68bb      	ldr	r3, [r7, #8]
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	687a      	ldr	r2, [r7, #4]
 8019476:	1ad3      	subs	r3, r2, r3
 8019478:	2b01      	cmp	r3, #1
 801947a:	dd1a      	ble.n	80194b2 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 801947c:	68b8      	ldr	r0, [r7, #8]
 801947e:	f7ff ff35 	bl	80192ec <readInt>
 8019482:	4602      	mov	r2, r0
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8019488:	68bb      	ldr	r3, [r7, #8]
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	68fa      	ldr	r2, [r7, #12]
 801948e:	6852      	ldr	r2, [r2, #4]
 8019490:	4413      	add	r3, r2
 8019492:	687a      	ldr	r2, [r7, #4]
 8019494:	429a      	cmp	r2, r3
 8019496:	d30c      	bcc.n	80194b2 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8019498:	68bb      	ldr	r3, [r7, #8]
 801949a:	681a      	ldr	r2, [r3, #0]
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 80194a0:	68bb      	ldr	r3, [r7, #8]
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	68fa      	ldr	r2, [r7, #12]
 80194a6:	6852      	ldr	r2, [r2, #4]
 80194a8:	441a      	add	r2, r3
 80194aa:	68bb      	ldr	r3, [r7, #8]
 80194ac:	601a      	str	r2, [r3, #0]
			rc = 1;
 80194ae:	2301      	movs	r3, #1
 80194b0:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 80194b2:	68fb      	ldr	r3, [r7, #12]
 80194b4:	2200      	movs	r2, #0
 80194b6:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 80194b8:	697b      	ldr	r3, [r7, #20]
}
 80194ba:	4618      	mov	r0, r3
 80194bc:	3718      	adds	r7, #24
 80194be:	46bd      	mov	sp, r7
 80194c0:	bd80      	pop	{r7, pc}

080194c2 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 80194c2:	b580      	push	{r7, lr}
 80194c4:	b086      	sub	sp, #24
 80194c6:	af00      	add	r7, sp, #0
 80194c8:	1d3b      	adds	r3, r7, #4
 80194ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 80194ce:	2300      	movs	r3, #0
 80194d0:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d006      	beq.n	80194e6 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	4618      	mov	r0, r3
 80194dc:	f7e6 feba 	bl	8000254 <strlen>
 80194e0:	4603      	mov	r3, r0
 80194e2:	617b      	str	r3, [r7, #20]
 80194e4:	e001      	b.n	80194ea <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 80194e6:	68bb      	ldr	r3, [r7, #8]
 80194e8:	617b      	str	r3, [r7, #20]
	return rc;
 80194ea:	697b      	ldr	r3, [r7, #20]
}
 80194ec:	4618      	mov	r0, r3
 80194ee:	3718      	adds	r7, #24
 80194f0:	46bd      	mov	sp, r7
 80194f2:	bd80      	pop	{r7, pc}

080194f4 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 80194f4:	b580      	push	{r7, lr}
 80194f6:	b086      	sub	sp, #24
 80194f8:	af00      	add	r7, sp, #0
 80194fa:	6078      	str	r0, [r7, #4]
 80194fc:	6039      	str	r1, [r7, #0]
	int alen = 0,
 80194fe:	2300      	movs	r3, #0
 8019500:	617b      	str	r3, [r7, #20]
		blen = 0;
 8019502:	2300      	movs	r3, #0
 8019504:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	2b00      	cmp	r3, #0
 801950c:	d00a      	beq.n	8019524 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	4618      	mov	r0, r3
 801951a:	f7e6 fe9b 	bl	8000254 <strlen>
 801951e:	4603      	mov	r3, r0
 8019520:	617b      	str	r3, [r7, #20]
 8019522:	e005      	b.n	8019530 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	689b      	ldr	r3, [r3, #8]
 8019528:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	685b      	ldr	r3, [r3, #4]
 801952e:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8019530:	6838      	ldr	r0, [r7, #0]
 8019532:	f7e6 fe8f 	bl	8000254 <strlen>
 8019536:	4603      	mov	r3, r0
 8019538:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 801953a:	697a      	ldr	r2, [r7, #20]
 801953c:	68fb      	ldr	r3, [r7, #12]
 801953e:	429a      	cmp	r2, r3
 8019540:	d10a      	bne.n	8019558 <MQTTPacket_equals+0x64>
 8019542:	697b      	ldr	r3, [r7, #20]
 8019544:	461a      	mov	r2, r3
 8019546:	6839      	ldr	r1, [r7, #0]
 8019548:	6938      	ldr	r0, [r7, #16]
 801954a:	f000 fb15 	bl	8019b78 <strncmp>
 801954e:	4603      	mov	r3, r0
 8019550:	2b00      	cmp	r3, #0
 8019552:	d101      	bne.n	8019558 <MQTTPacket_equals+0x64>
 8019554:	2301      	movs	r3, #1
 8019556:	e000      	b.n	801955a <MQTTPacket_equals+0x66>
 8019558:	2300      	movs	r3, #0
}
 801955a:	4618      	mov	r0, r3
 801955c:	3718      	adds	r7, #24
 801955e:	46bd      	mov	sp, r7
 8019560:	bd80      	pop	{r7, pc}

08019562 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8019562:	b580      	push	{r7, lr}
 8019564:	b086      	sub	sp, #24
 8019566:	af00      	add	r7, sp, #0
 8019568:	60f8      	str	r0, [r7, #12]
 801956a:	4638      	mov	r0, r7
 801956c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8019570:	2300      	movs	r3, #0
 8019572:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8019574:	463b      	mov	r3, r7
 8019576:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801957a:	f7ff ffa2 	bl	80194c2 <MQTTstrlen>
 801957e:	4603      	mov	r3, r0
 8019580:	1c9a      	adds	r2, r3, #2
 8019582:	6a3b      	ldr	r3, [r7, #32]
 8019584:	4413      	add	r3, r2
 8019586:	697a      	ldr	r2, [r7, #20]
 8019588:	4413      	add	r3, r2
 801958a:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	2b00      	cmp	r3, #0
 8019590:	dd02      	ble.n	8019598 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8019592:	697b      	ldr	r3, [r7, #20]
 8019594:	3302      	adds	r3, #2
 8019596:	617b      	str	r3, [r7, #20]
	return len;
 8019598:	697b      	ldr	r3, [r7, #20]
}
 801959a:	4618      	mov	r0, r3
 801959c:	3718      	adds	r7, #24
 801959e:	46bd      	mov	sp, r7
 80195a0:	bd80      	pop	{r7, pc}

080195a2 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 80195a2:	b580      	push	{r7, lr}
 80195a4:	b08a      	sub	sp, #40	; 0x28
 80195a6:	af02      	add	r7, sp, #8
 80195a8:	60f8      	str	r0, [r7, #12]
 80195aa:	60b9      	str	r1, [r7, #8]
 80195ac:	603b      	str	r3, [r7, #0]
 80195ae:	4613      	mov	r3, r2
 80195b0:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 80195b6:	2300      	movs	r3, #0
 80195b8:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 80195ba:	2300      	movs	r3, #0
 80195bc:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80195be:	2300      	movs	r3, #0
 80195c0:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 80195c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80195c4:	9300      	str	r3, [sp, #0]
 80195c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80195ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80195cc:	6838      	ldr	r0, [r7, #0]
 80195ce:	f7ff ffc8 	bl	8019562 <MQTTSerialize_publishLength>
 80195d2:	61b8      	str	r0, [r7, #24]
 80195d4:	69b8      	ldr	r0, [r7, #24]
 80195d6:	f7ff fe29 	bl	801922c <MQTTPacket_len>
 80195da:	4602      	mov	r2, r0
 80195dc:	68bb      	ldr	r3, [r7, #8]
 80195de:	4293      	cmp	r3, r2
 80195e0:	da03      	bge.n	80195ea <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80195e2:	f06f 0301 	mvn.w	r3, #1
 80195e6:	61fb      	str	r3, [r7, #28]
		goto exit;
 80195e8:	e04c      	b.n	8019684 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 80195ea:	7c3b      	ldrb	r3, [r7, #16]
 80195ec:	2203      	movs	r2, #3
 80195ee:	f362 1307 	bfi	r3, r2, #4, #4
 80195f2:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 80195f4:	79fb      	ldrb	r3, [r7, #7]
 80195f6:	f003 0301 	and.w	r3, r3, #1
 80195fa:	b2da      	uxtb	r2, r3
 80195fc:	7c3b      	ldrb	r3, [r7, #16]
 80195fe:	f362 03c3 	bfi	r3, r2, #3, #1
 8019602:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8019604:	683b      	ldr	r3, [r7, #0]
 8019606:	f003 0303 	and.w	r3, r3, #3
 801960a:	b2da      	uxtb	r2, r3
 801960c:	7c3b      	ldrb	r3, [r7, #16]
 801960e:	f362 0342 	bfi	r3, r2, #1, #2
 8019612:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8019614:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019618:	f003 0301 	and.w	r3, r3, #1
 801961c:	b2da      	uxtb	r2, r3
 801961e:	7c3b      	ldrb	r3, [r7, #16]
 8019620:	f362 0300 	bfi	r3, r2, #0, #1
 8019624:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8019626:	7c3a      	ldrb	r2, [r7, #16]
 8019628:	f107 0314 	add.w	r3, r7, #20
 801962c:	4611      	mov	r1, r2
 801962e:	4618      	mov	r0, r3
 8019630:	f7ff fe8b 	bl	801934a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8019634:	697b      	ldr	r3, [r7, #20]
 8019636:	69b9      	ldr	r1, [r7, #24]
 8019638:	4618      	mov	r0, r3
 801963a:	f7ff fd8b 	bl	8019154 <MQTTPacket_encode>
 801963e:	4602      	mov	r2, r0
 8019640:	697b      	ldr	r3, [r7, #20]
 8019642:	4413      	add	r3, r2
 8019644:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8019646:	f107 0014 	add.w	r0, r7, #20
 801964a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801964e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019650:	f7ff fed8 	bl	8019404 <writeMQTTString>

	if (qos > 0)
 8019654:	683b      	ldr	r3, [r7, #0]
 8019656:	2b00      	cmp	r3, #0
 8019658:	dd06      	ble.n	8019668 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 801965a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801965c:	f107 0314 	add.w	r3, r7, #20
 8019660:	4611      	mov	r1, r2
 8019662:	4618      	mov	r0, r3
 8019664:	f7ff fe86 	bl	8019374 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8019668:	697b      	ldr	r3, [r7, #20]
 801966a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801966c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801966e:	4618      	mov	r0, r3
 8019670:	f000 f9a0 	bl	80199b4 <memcpy>
	ptr += payloadlen;
 8019674:	697a      	ldr	r2, [r7, #20]
 8019676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019678:	4413      	add	r3, r2
 801967a:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 801967c:	697a      	ldr	r2, [r7, #20]
 801967e:	68fb      	ldr	r3, [r7, #12]
 8019680:	1ad3      	subs	r3, r2, r3
 8019682:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019684:	69fb      	ldr	r3, [r7, #28]
}
 8019686:	4618      	mov	r0, r3
 8019688:	3720      	adds	r7, #32
 801968a:	46bd      	mov	sp, r7
 801968c:	bd80      	pop	{r7, pc}

0801968e <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 801968e:	b580      	push	{r7, lr}
 8019690:	b088      	sub	sp, #32
 8019692:	af00      	add	r7, sp, #0
 8019694:	60f8      	str	r0, [r7, #12]
 8019696:	60b9      	str	r1, [r7, #8]
 8019698:	4611      	mov	r1, r2
 801969a:	461a      	mov	r2, r3
 801969c:	460b      	mov	r3, r1
 801969e:	71fb      	strb	r3, [r7, #7]
 80196a0:	4613      	mov	r3, r2
 80196a2:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 80196a4:	2300      	movs	r3, #0
 80196a6:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80196a8:	2300      	movs	r3, #0
 80196aa:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80196ac:	68fb      	ldr	r3, [r7, #12]
 80196ae:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 80196b0:	68bb      	ldr	r3, [r7, #8]
 80196b2:	2b03      	cmp	r3, #3
 80196b4:	dc03      	bgt.n	80196be <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80196b6:	f06f 0301 	mvn.w	r3, #1
 80196ba:	61fb      	str	r3, [r7, #28]
		goto exit;
 80196bc:	e037      	b.n	801972e <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 80196be:	79fb      	ldrb	r3, [r7, #7]
 80196c0:	f003 030f 	and.w	r3, r3, #15
 80196c4:	b2da      	uxtb	r2, r3
 80196c6:	7e3b      	ldrb	r3, [r7, #24]
 80196c8:	f362 1307 	bfi	r3, r2, #4, #4
 80196cc:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 80196ce:	79bb      	ldrb	r3, [r7, #6]
 80196d0:	f003 0301 	and.w	r3, r3, #1
 80196d4:	b2da      	uxtb	r2, r3
 80196d6:	7e3b      	ldrb	r3, [r7, #24]
 80196d8:	f362 03c3 	bfi	r3, r2, #3, #1
 80196dc:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 80196de:	79fb      	ldrb	r3, [r7, #7]
 80196e0:	2b06      	cmp	r3, #6
 80196e2:	bf0c      	ite	eq
 80196e4:	2301      	moveq	r3, #1
 80196e6:	2300      	movne	r3, #0
 80196e8:	b2db      	uxtb	r3, r3
 80196ea:	f003 0303 	and.w	r3, r3, #3
 80196ee:	b2da      	uxtb	r2, r3
 80196f0:	7e3b      	ldrb	r3, [r7, #24]
 80196f2:	f362 0342 	bfi	r3, r2, #1, #2
 80196f6:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80196f8:	7e3a      	ldrb	r2, [r7, #24]
 80196fa:	f107 0314 	add.w	r3, r7, #20
 80196fe:	4611      	mov	r1, r2
 8019700:	4618      	mov	r0, r3
 8019702:	f7ff fe22 	bl	801934a <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 8019706:	697b      	ldr	r3, [r7, #20]
 8019708:	2102      	movs	r1, #2
 801970a:	4618      	mov	r0, r3
 801970c:	f7ff fd22 	bl	8019154 <MQTTPacket_encode>
 8019710:	4602      	mov	r2, r0
 8019712:	697b      	ldr	r3, [r7, #20]
 8019714:	4413      	add	r3, r2
 8019716:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8019718:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801971a:	f107 0314 	add.w	r3, r7, #20
 801971e:	4611      	mov	r1, r2
 8019720:	4618      	mov	r0, r3
 8019722:	f7ff fe27 	bl	8019374 <writeInt>
	rc = ptr - buf;
 8019726:	697a      	ldr	r2, [r7, #20]
 8019728:	68fb      	ldr	r3, [r7, #12]
 801972a:	1ad3      	subs	r3, r2, r3
 801972c:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801972e:	69fb      	ldr	r3, [r7, #28]
}
 8019730:	4618      	mov	r0, r3
 8019732:	3720      	adds	r7, #32
 8019734:	46bd      	mov	sp, r7
 8019736:	bd80      	pop	{r7, pc}

08019738 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8019738:	b580      	push	{r7, lr}
 801973a:	b084      	sub	sp, #16
 801973c:	af00      	add	r7, sp, #0
 801973e:	6078      	str	r0, [r7, #4]
 8019740:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8019742:	2302      	movs	r3, #2
 8019744:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8019746:	2300      	movs	r3, #0
 8019748:	60fb      	str	r3, [r7, #12]
 801974a:	e013      	b.n	8019774 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 801974c:	68fa      	ldr	r2, [r7, #12]
 801974e:	4613      	mov	r3, r2
 8019750:	005b      	lsls	r3, r3, #1
 8019752:	4413      	add	r3, r2
 8019754:	009b      	lsls	r3, r3, #2
 8019756:	461a      	mov	r2, r3
 8019758:	683b      	ldr	r3, [r7, #0]
 801975a:	4413      	add	r3, r2
 801975c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019760:	f7ff feaf 	bl	80194c2 <MQTTstrlen>
 8019764:	4603      	mov	r3, r0
 8019766:	3303      	adds	r3, #3
 8019768:	68ba      	ldr	r2, [r7, #8]
 801976a:	4413      	add	r3, r2
 801976c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 801976e:	68fb      	ldr	r3, [r7, #12]
 8019770:	3301      	adds	r3, #1
 8019772:	60fb      	str	r3, [r7, #12]
 8019774:	68fa      	ldr	r2, [r7, #12]
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	429a      	cmp	r2, r3
 801977a:	dbe7      	blt.n	801974c <MQTTSerialize_subscribeLength+0x14>
	return len;
 801977c:	68bb      	ldr	r3, [r7, #8]
}
 801977e:	4618      	mov	r0, r3
 8019780:	3710      	adds	r7, #16
 8019782:	46bd      	mov	sp, r7
 8019784:	bd80      	pop	{r7, pc}

08019786 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 8019786:	b580      	push	{r7, lr}
 8019788:	b08a      	sub	sp, #40	; 0x28
 801978a:	af00      	add	r7, sp, #0
 801978c:	60f8      	str	r0, [r7, #12]
 801978e:	60b9      	str	r1, [r7, #8]
 8019790:	4611      	mov	r1, r2
 8019792:	461a      	mov	r2, r3
 8019794:	460b      	mov	r3, r1
 8019796:	71fb      	strb	r3, [r7, #7]
 8019798:	4613      	mov	r3, r2
 801979a:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 80197a0:	2300      	movs	r3, #0
 80197a2:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 80197a4:	2300      	movs	r3, #0
 80197a6:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 80197a8:	2300      	movs	r3, #0
 80197aa:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 80197ac:	2300      	movs	r3, #0
 80197ae:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 80197b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80197b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80197b4:	f7ff ffc0 	bl	8019738 <MQTTSerialize_subscribeLength>
 80197b8:	61f8      	str	r0, [r7, #28]
 80197ba:	69f8      	ldr	r0, [r7, #28]
 80197bc:	f7ff fd36 	bl	801922c <MQTTPacket_len>
 80197c0:	4602      	mov	r2, r0
 80197c2:	68bb      	ldr	r3, [r7, #8]
 80197c4:	4293      	cmp	r3, r2
 80197c6:	da03      	bge.n	80197d0 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80197c8:	f06f 0301 	mvn.w	r3, #1
 80197cc:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 80197ce:	e051      	b.n	8019874 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 80197d0:	2300      	movs	r3, #0
 80197d2:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 80197d4:	7d3b      	ldrb	r3, [r7, #20]
 80197d6:	2208      	movs	r2, #8
 80197d8:	f362 1307 	bfi	r3, r2, #4, #4
 80197dc:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 80197de:	79fb      	ldrb	r3, [r7, #7]
 80197e0:	f003 0301 	and.w	r3, r3, #1
 80197e4:	b2da      	uxtb	r2, r3
 80197e6:	7d3b      	ldrb	r3, [r7, #20]
 80197e8:	f362 03c3 	bfi	r3, r2, #3, #1
 80197ec:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 80197ee:	7d3b      	ldrb	r3, [r7, #20]
 80197f0:	2201      	movs	r2, #1
 80197f2:	f362 0342 	bfi	r3, r2, #1, #2
 80197f6:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 80197f8:	7d3a      	ldrb	r2, [r7, #20]
 80197fa:	f107 0318 	add.w	r3, r7, #24
 80197fe:	4611      	mov	r1, r2
 8019800:	4618      	mov	r0, r3
 8019802:	f7ff fda2 	bl	801934a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8019806:	69bb      	ldr	r3, [r7, #24]
 8019808:	69f9      	ldr	r1, [r7, #28]
 801980a:	4618      	mov	r0, r3
 801980c:	f7ff fca2 	bl	8019154 <MQTTPacket_encode>
 8019810:	4602      	mov	r2, r0
 8019812:	69bb      	ldr	r3, [r7, #24]
 8019814:	4413      	add	r3, r2
 8019816:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 8019818:	88ba      	ldrh	r2, [r7, #4]
 801981a:	f107 0318 	add.w	r3, r7, #24
 801981e:	4611      	mov	r1, r2
 8019820:	4618      	mov	r0, r3
 8019822:	f7ff fda7 	bl	8019374 <writeInt>

	for (i = 0; i < count; ++i)
 8019826:	2300      	movs	r3, #0
 8019828:	623b      	str	r3, [r7, #32]
 801982a:	e01b      	b.n	8019864 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 801982c:	6a3a      	ldr	r2, [r7, #32]
 801982e:	4613      	mov	r3, r2
 8019830:	005b      	lsls	r3, r3, #1
 8019832:	4413      	add	r3, r2
 8019834:	009b      	lsls	r3, r3, #2
 8019836:	461a      	mov	r2, r3
 8019838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801983a:	4413      	add	r3, r2
 801983c:	f107 0018 	add.w	r0, r7, #24
 8019840:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019842:	f7ff fddf 	bl	8019404 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 8019846:	6a3b      	ldr	r3, [r7, #32]
 8019848:	009b      	lsls	r3, r3, #2
 801984a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801984c:	4413      	add	r3, r2
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	b2da      	uxtb	r2, r3
 8019852:	f107 0318 	add.w	r3, r7, #24
 8019856:	4611      	mov	r1, r2
 8019858:	4618      	mov	r0, r3
 801985a:	f7ff fd76 	bl	801934a <writeChar>
	for (i = 0; i < count; ++i)
 801985e:	6a3b      	ldr	r3, [r7, #32]
 8019860:	3301      	adds	r3, #1
 8019862:	623b      	str	r3, [r7, #32]
 8019864:	6a3a      	ldr	r2, [r7, #32]
 8019866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019868:	429a      	cmp	r2, r3
 801986a:	dbdf      	blt.n	801982c <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 801986c:	69ba      	ldr	r2, [r7, #24]
 801986e:	68fb      	ldr	r3, [r7, #12]
 8019870:	1ad3      	subs	r3, r2, r3
 8019872:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019876:	4618      	mov	r0, r3
 8019878:	3728      	adds	r7, #40	; 0x28
 801987a:	46bd      	mov	sp, r7
 801987c:	bd80      	pop	{r7, pc}

0801987e <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 801987e:	b580      	push	{r7, lr}
 8019880:	b08a      	sub	sp, #40	; 0x28
 8019882:	af00      	add	r7, sp, #0
 8019884:	60f8      	str	r0, [r7, #12]
 8019886:	60b9      	str	r1, [r7, #8]
 8019888:	607a      	str	r2, [r7, #4]
 801988a:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801988c:	2300      	movs	r3, #0
 801988e:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8019890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019892:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8019894:	2300      	movs	r3, #0
 8019896:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8019898:	2300      	movs	r3, #0
 801989a:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801989c:	f107 0318 	add.w	r3, r7, #24
 80198a0:	4618      	mov	r0, r3
 80198a2:	f7ff fd3e 	bl	8019322 <readChar>
 80198a6:	4603      	mov	r3, r0
 80198a8:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 80198aa:	7f3b      	ldrb	r3, [r7, #28]
 80198ac:	f023 030f 	bic.w	r3, r3, #15
 80198b0:	b2db      	uxtb	r3, r3
 80198b2:	2b90      	cmp	r3, #144	; 0x90
 80198b4:	d142      	bne.n	801993c <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80198b6:	69bb      	ldr	r3, [r7, #24]
 80198b8:	f107 0214 	add.w	r2, r7, #20
 80198bc:	4611      	mov	r1, r2
 80198be:	4618      	mov	r0, r3
 80198c0:	f7ff fcfe 	bl	80192c0 <MQTTPacket_decodeBuf>
 80198c4:	6278      	str	r0, [r7, #36]	; 0x24
 80198c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198c8:	69bb      	ldr	r3, [r7, #24]
 80198ca:	4413      	add	r3, r2
 80198cc:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80198ce:	69bb      	ldr	r3, [r7, #24]
 80198d0:	697a      	ldr	r2, [r7, #20]
 80198d2:	4413      	add	r3, r2
 80198d4:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 80198d6:	69bb      	ldr	r3, [r7, #24]
 80198d8:	6a3a      	ldr	r2, [r7, #32]
 80198da:	1ad3      	subs	r3, r2, r3
 80198dc:	2b01      	cmp	r3, #1
 80198de:	dd2f      	ble.n	8019940 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 80198e0:	f107 0318 	add.w	r3, r7, #24
 80198e4:	4618      	mov	r0, r3
 80198e6:	f7ff fd01 	bl	80192ec <readInt>
 80198ea:	4603      	mov	r3, r0
 80198ec:	b29a      	uxth	r2, r3
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	801a      	strh	r2, [r3, #0]

	*count = 0;
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	2200      	movs	r2, #0
 80198f6:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 80198f8:	e019      	b.n	801992e <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	68ba      	ldr	r2, [r7, #8]
 8019900:	429a      	cmp	r2, r3
 8019902:	da03      	bge.n	801990c <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 8019904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019908:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 801990a:	e01a      	b.n	8019942 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 801990c:	f107 0318 	add.w	r3, r7, #24
 8019910:	4618      	mov	r0, r3
 8019912:	f7ff fd06 	bl	8019322 <readChar>
 8019916:	4603      	mov	r3, r0
 8019918:	4618      	mov	r0, r3
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	1c59      	adds	r1, r3, #1
 8019920:	687a      	ldr	r2, [r7, #4]
 8019922:	6011      	str	r1, [r2, #0]
 8019924:	009b      	lsls	r3, r3, #2
 8019926:	683a      	ldr	r2, [r7, #0]
 8019928:	4413      	add	r3, r2
 801992a:	4602      	mov	r2, r0
 801992c:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 801992e:	69bb      	ldr	r3, [r7, #24]
 8019930:	6a3a      	ldr	r2, [r7, #32]
 8019932:	429a      	cmp	r2, r3
 8019934:	d8e1      	bhi.n	80198fa <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 8019936:	2301      	movs	r3, #1
 8019938:	627b      	str	r3, [r7, #36]	; 0x24
 801993a:	e002      	b.n	8019942 <MQTTDeserialize_suback+0xc4>
		goto exit;
 801993c:	bf00      	nop
 801993e:	e000      	b.n	8019942 <MQTTDeserialize_suback+0xc4>
		goto exit;
 8019940:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019944:	4618      	mov	r0, r3
 8019946:	3728      	adds	r7, #40	; 0x28
 8019948:	46bd      	mov	sp, r7
 801994a:	bd80      	pop	{r7, pc}

0801994c <__libc_init_array>:
 801994c:	b570      	push	{r4, r5, r6, lr}
 801994e:	4d0d      	ldr	r5, [pc, #52]	; (8019984 <__libc_init_array+0x38>)
 8019950:	4c0d      	ldr	r4, [pc, #52]	; (8019988 <__libc_init_array+0x3c>)
 8019952:	1b64      	subs	r4, r4, r5
 8019954:	10a4      	asrs	r4, r4, #2
 8019956:	2600      	movs	r6, #0
 8019958:	42a6      	cmp	r6, r4
 801995a:	d109      	bne.n	8019970 <__libc_init_array+0x24>
 801995c:	4d0b      	ldr	r5, [pc, #44]	; (801998c <__libc_init_array+0x40>)
 801995e:	4c0c      	ldr	r4, [pc, #48]	; (8019990 <__libc_init_array+0x44>)
 8019960:	f001 f918 	bl	801ab94 <_init>
 8019964:	1b64      	subs	r4, r4, r5
 8019966:	10a4      	asrs	r4, r4, #2
 8019968:	2600      	movs	r6, #0
 801996a:	42a6      	cmp	r6, r4
 801996c:	d105      	bne.n	801997a <__libc_init_array+0x2e>
 801996e:	bd70      	pop	{r4, r5, r6, pc}
 8019970:	f855 3b04 	ldr.w	r3, [r5], #4
 8019974:	4798      	blx	r3
 8019976:	3601      	adds	r6, #1
 8019978:	e7ee      	b.n	8019958 <__libc_init_array+0xc>
 801997a:	f855 3b04 	ldr.w	r3, [r5], #4
 801997e:	4798      	blx	r3
 8019980:	3601      	adds	r6, #1
 8019982:	e7f2      	b.n	801996a <__libc_init_array+0x1e>
 8019984:	0801e5a4 	.word	0x0801e5a4
 8019988:	0801e5a4 	.word	0x0801e5a4
 801998c:	0801e5a4 	.word	0x0801e5a4
 8019990:	0801e5a8 	.word	0x0801e5a8

08019994 <memcmp>:
 8019994:	b510      	push	{r4, lr}
 8019996:	3901      	subs	r1, #1
 8019998:	4402      	add	r2, r0
 801999a:	4290      	cmp	r0, r2
 801999c:	d101      	bne.n	80199a2 <memcmp+0xe>
 801999e:	2000      	movs	r0, #0
 80199a0:	e005      	b.n	80199ae <memcmp+0x1a>
 80199a2:	7803      	ldrb	r3, [r0, #0]
 80199a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80199a8:	42a3      	cmp	r3, r4
 80199aa:	d001      	beq.n	80199b0 <memcmp+0x1c>
 80199ac:	1b18      	subs	r0, r3, r4
 80199ae:	bd10      	pop	{r4, pc}
 80199b0:	3001      	adds	r0, #1
 80199b2:	e7f2      	b.n	801999a <memcmp+0x6>

080199b4 <memcpy>:
 80199b4:	440a      	add	r2, r1
 80199b6:	4291      	cmp	r1, r2
 80199b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80199bc:	d100      	bne.n	80199c0 <memcpy+0xc>
 80199be:	4770      	bx	lr
 80199c0:	b510      	push	{r4, lr}
 80199c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80199c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80199ca:	4291      	cmp	r1, r2
 80199cc:	d1f9      	bne.n	80199c2 <memcpy+0xe>
 80199ce:	bd10      	pop	{r4, pc}

080199d0 <memset>:
 80199d0:	4402      	add	r2, r0
 80199d2:	4603      	mov	r3, r0
 80199d4:	4293      	cmp	r3, r2
 80199d6:	d100      	bne.n	80199da <memset+0xa>
 80199d8:	4770      	bx	lr
 80199da:	f803 1b01 	strb.w	r1, [r3], #1
 80199de:	e7f9      	b.n	80199d4 <memset+0x4>

080199e0 <iprintf>:
 80199e0:	b40f      	push	{r0, r1, r2, r3}
 80199e2:	4b0a      	ldr	r3, [pc, #40]	; (8019a0c <iprintf+0x2c>)
 80199e4:	b513      	push	{r0, r1, r4, lr}
 80199e6:	681c      	ldr	r4, [r3, #0]
 80199e8:	b124      	cbz	r4, 80199f4 <iprintf+0x14>
 80199ea:	69a3      	ldr	r3, [r4, #24]
 80199ec:	b913      	cbnz	r3, 80199f4 <iprintf+0x14>
 80199ee:	4620      	mov	r0, r4
 80199f0:	f000 face 	bl	8019f90 <__sinit>
 80199f4:	ab05      	add	r3, sp, #20
 80199f6:	9a04      	ldr	r2, [sp, #16]
 80199f8:	68a1      	ldr	r1, [r4, #8]
 80199fa:	9301      	str	r3, [sp, #4]
 80199fc:	4620      	mov	r0, r4
 80199fe:	f000 fcf1 	bl	801a3e4 <_vfiprintf_r>
 8019a02:	b002      	add	sp, #8
 8019a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a08:	b004      	add	sp, #16
 8019a0a:	4770      	bx	lr
 8019a0c:	20000034 	.word	0x20000034

08019a10 <_puts_r>:
 8019a10:	b570      	push	{r4, r5, r6, lr}
 8019a12:	460e      	mov	r6, r1
 8019a14:	4605      	mov	r5, r0
 8019a16:	b118      	cbz	r0, 8019a20 <_puts_r+0x10>
 8019a18:	6983      	ldr	r3, [r0, #24]
 8019a1a:	b90b      	cbnz	r3, 8019a20 <_puts_r+0x10>
 8019a1c:	f000 fab8 	bl	8019f90 <__sinit>
 8019a20:	69ab      	ldr	r3, [r5, #24]
 8019a22:	68ac      	ldr	r4, [r5, #8]
 8019a24:	b913      	cbnz	r3, 8019a2c <_puts_r+0x1c>
 8019a26:	4628      	mov	r0, r5
 8019a28:	f000 fab2 	bl	8019f90 <__sinit>
 8019a2c:	4b2c      	ldr	r3, [pc, #176]	; (8019ae0 <_puts_r+0xd0>)
 8019a2e:	429c      	cmp	r4, r3
 8019a30:	d120      	bne.n	8019a74 <_puts_r+0x64>
 8019a32:	686c      	ldr	r4, [r5, #4]
 8019a34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019a36:	07db      	lsls	r3, r3, #31
 8019a38:	d405      	bmi.n	8019a46 <_puts_r+0x36>
 8019a3a:	89a3      	ldrh	r3, [r4, #12]
 8019a3c:	0598      	lsls	r0, r3, #22
 8019a3e:	d402      	bmi.n	8019a46 <_puts_r+0x36>
 8019a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019a42:	f000 fb55 	bl	801a0f0 <__retarget_lock_acquire_recursive>
 8019a46:	89a3      	ldrh	r3, [r4, #12]
 8019a48:	0719      	lsls	r1, r3, #28
 8019a4a:	d51d      	bpl.n	8019a88 <_puts_r+0x78>
 8019a4c:	6923      	ldr	r3, [r4, #16]
 8019a4e:	b1db      	cbz	r3, 8019a88 <_puts_r+0x78>
 8019a50:	3e01      	subs	r6, #1
 8019a52:	68a3      	ldr	r3, [r4, #8]
 8019a54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019a58:	3b01      	subs	r3, #1
 8019a5a:	60a3      	str	r3, [r4, #8]
 8019a5c:	bb39      	cbnz	r1, 8019aae <_puts_r+0x9e>
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	da38      	bge.n	8019ad4 <_puts_r+0xc4>
 8019a62:	4622      	mov	r2, r4
 8019a64:	210a      	movs	r1, #10
 8019a66:	4628      	mov	r0, r5
 8019a68:	f000 f89a 	bl	8019ba0 <__swbuf_r>
 8019a6c:	3001      	adds	r0, #1
 8019a6e:	d011      	beq.n	8019a94 <_puts_r+0x84>
 8019a70:	250a      	movs	r5, #10
 8019a72:	e011      	b.n	8019a98 <_puts_r+0x88>
 8019a74:	4b1b      	ldr	r3, [pc, #108]	; (8019ae4 <_puts_r+0xd4>)
 8019a76:	429c      	cmp	r4, r3
 8019a78:	d101      	bne.n	8019a7e <_puts_r+0x6e>
 8019a7a:	68ac      	ldr	r4, [r5, #8]
 8019a7c:	e7da      	b.n	8019a34 <_puts_r+0x24>
 8019a7e:	4b1a      	ldr	r3, [pc, #104]	; (8019ae8 <_puts_r+0xd8>)
 8019a80:	429c      	cmp	r4, r3
 8019a82:	bf08      	it	eq
 8019a84:	68ec      	ldreq	r4, [r5, #12]
 8019a86:	e7d5      	b.n	8019a34 <_puts_r+0x24>
 8019a88:	4621      	mov	r1, r4
 8019a8a:	4628      	mov	r0, r5
 8019a8c:	f000 f8da 	bl	8019c44 <__swsetup_r>
 8019a90:	2800      	cmp	r0, #0
 8019a92:	d0dd      	beq.n	8019a50 <_puts_r+0x40>
 8019a94:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8019a98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019a9a:	07da      	lsls	r2, r3, #31
 8019a9c:	d405      	bmi.n	8019aaa <_puts_r+0x9a>
 8019a9e:	89a3      	ldrh	r3, [r4, #12]
 8019aa0:	059b      	lsls	r3, r3, #22
 8019aa2:	d402      	bmi.n	8019aaa <_puts_r+0x9a>
 8019aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019aa6:	f000 fb24 	bl	801a0f2 <__retarget_lock_release_recursive>
 8019aaa:	4628      	mov	r0, r5
 8019aac:	bd70      	pop	{r4, r5, r6, pc}
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	da04      	bge.n	8019abc <_puts_r+0xac>
 8019ab2:	69a2      	ldr	r2, [r4, #24]
 8019ab4:	429a      	cmp	r2, r3
 8019ab6:	dc06      	bgt.n	8019ac6 <_puts_r+0xb6>
 8019ab8:	290a      	cmp	r1, #10
 8019aba:	d004      	beq.n	8019ac6 <_puts_r+0xb6>
 8019abc:	6823      	ldr	r3, [r4, #0]
 8019abe:	1c5a      	adds	r2, r3, #1
 8019ac0:	6022      	str	r2, [r4, #0]
 8019ac2:	7019      	strb	r1, [r3, #0]
 8019ac4:	e7c5      	b.n	8019a52 <_puts_r+0x42>
 8019ac6:	4622      	mov	r2, r4
 8019ac8:	4628      	mov	r0, r5
 8019aca:	f000 f869 	bl	8019ba0 <__swbuf_r>
 8019ace:	3001      	adds	r0, #1
 8019ad0:	d1bf      	bne.n	8019a52 <_puts_r+0x42>
 8019ad2:	e7df      	b.n	8019a94 <_puts_r+0x84>
 8019ad4:	6823      	ldr	r3, [r4, #0]
 8019ad6:	250a      	movs	r5, #10
 8019ad8:	1c5a      	adds	r2, r3, #1
 8019ada:	6022      	str	r2, [r4, #0]
 8019adc:	701d      	strb	r5, [r3, #0]
 8019ade:	e7db      	b.n	8019a98 <_puts_r+0x88>
 8019ae0:	0801e528 	.word	0x0801e528
 8019ae4:	0801e548 	.word	0x0801e548
 8019ae8:	0801e508 	.word	0x0801e508

08019aec <puts>:
 8019aec:	4b02      	ldr	r3, [pc, #8]	; (8019af8 <puts+0xc>)
 8019aee:	4601      	mov	r1, r0
 8019af0:	6818      	ldr	r0, [r3, #0]
 8019af2:	f7ff bf8d 	b.w	8019a10 <_puts_r>
 8019af6:	bf00      	nop
 8019af8:	20000034 	.word	0x20000034

08019afc <rand>:
 8019afc:	4b16      	ldr	r3, [pc, #88]	; (8019b58 <rand+0x5c>)
 8019afe:	b510      	push	{r4, lr}
 8019b00:	681c      	ldr	r4, [r3, #0]
 8019b02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019b04:	b9b3      	cbnz	r3, 8019b34 <rand+0x38>
 8019b06:	2018      	movs	r0, #24
 8019b08:	f000 fb5a 	bl	801a1c0 <malloc>
 8019b0c:	63a0      	str	r0, [r4, #56]	; 0x38
 8019b0e:	b928      	cbnz	r0, 8019b1c <rand+0x20>
 8019b10:	4602      	mov	r2, r0
 8019b12:	4b12      	ldr	r3, [pc, #72]	; (8019b5c <rand+0x60>)
 8019b14:	4812      	ldr	r0, [pc, #72]	; (8019b60 <rand+0x64>)
 8019b16:	214e      	movs	r1, #78	; 0x4e
 8019b18:	f000 f902 	bl	8019d20 <__assert_func>
 8019b1c:	4a11      	ldr	r2, [pc, #68]	; (8019b64 <rand+0x68>)
 8019b1e:	4b12      	ldr	r3, [pc, #72]	; (8019b68 <rand+0x6c>)
 8019b20:	e9c0 2300 	strd	r2, r3, [r0]
 8019b24:	4b11      	ldr	r3, [pc, #68]	; (8019b6c <rand+0x70>)
 8019b26:	6083      	str	r3, [r0, #8]
 8019b28:	230b      	movs	r3, #11
 8019b2a:	8183      	strh	r3, [r0, #12]
 8019b2c:	2201      	movs	r2, #1
 8019b2e:	2300      	movs	r3, #0
 8019b30:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8019b34:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8019b36:	4a0e      	ldr	r2, [pc, #56]	; (8019b70 <rand+0x74>)
 8019b38:	6920      	ldr	r0, [r4, #16]
 8019b3a:	6963      	ldr	r3, [r4, #20]
 8019b3c:	490d      	ldr	r1, [pc, #52]	; (8019b74 <rand+0x78>)
 8019b3e:	4342      	muls	r2, r0
 8019b40:	fb01 2203 	mla	r2, r1, r3, r2
 8019b44:	fba0 0101 	umull	r0, r1, r0, r1
 8019b48:	1c43      	adds	r3, r0, #1
 8019b4a:	eb42 0001 	adc.w	r0, r2, r1
 8019b4e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8019b52:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019b56:	bd10      	pop	{r4, pc}
 8019b58:	20000034 	.word	0x20000034
 8019b5c:	0801e458 	.word	0x0801e458
 8019b60:	0801e46f 	.word	0x0801e46f
 8019b64:	abcd330e 	.word	0xabcd330e
 8019b68:	e66d1234 	.word	0xe66d1234
 8019b6c:	0005deec 	.word	0x0005deec
 8019b70:	5851f42d 	.word	0x5851f42d
 8019b74:	4c957f2d 	.word	0x4c957f2d

08019b78 <strncmp>:
 8019b78:	b510      	push	{r4, lr}
 8019b7a:	b17a      	cbz	r2, 8019b9c <strncmp+0x24>
 8019b7c:	4603      	mov	r3, r0
 8019b7e:	3901      	subs	r1, #1
 8019b80:	1884      	adds	r4, r0, r2
 8019b82:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019b86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019b8a:	4290      	cmp	r0, r2
 8019b8c:	d101      	bne.n	8019b92 <strncmp+0x1a>
 8019b8e:	42a3      	cmp	r3, r4
 8019b90:	d101      	bne.n	8019b96 <strncmp+0x1e>
 8019b92:	1a80      	subs	r0, r0, r2
 8019b94:	bd10      	pop	{r4, pc}
 8019b96:	2800      	cmp	r0, #0
 8019b98:	d1f3      	bne.n	8019b82 <strncmp+0xa>
 8019b9a:	e7fa      	b.n	8019b92 <strncmp+0x1a>
 8019b9c:	4610      	mov	r0, r2
 8019b9e:	e7f9      	b.n	8019b94 <strncmp+0x1c>

08019ba0 <__swbuf_r>:
 8019ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ba2:	460e      	mov	r6, r1
 8019ba4:	4614      	mov	r4, r2
 8019ba6:	4605      	mov	r5, r0
 8019ba8:	b118      	cbz	r0, 8019bb2 <__swbuf_r+0x12>
 8019baa:	6983      	ldr	r3, [r0, #24]
 8019bac:	b90b      	cbnz	r3, 8019bb2 <__swbuf_r+0x12>
 8019bae:	f000 f9ef 	bl	8019f90 <__sinit>
 8019bb2:	4b21      	ldr	r3, [pc, #132]	; (8019c38 <__swbuf_r+0x98>)
 8019bb4:	429c      	cmp	r4, r3
 8019bb6:	d12b      	bne.n	8019c10 <__swbuf_r+0x70>
 8019bb8:	686c      	ldr	r4, [r5, #4]
 8019bba:	69a3      	ldr	r3, [r4, #24]
 8019bbc:	60a3      	str	r3, [r4, #8]
 8019bbe:	89a3      	ldrh	r3, [r4, #12]
 8019bc0:	071a      	lsls	r2, r3, #28
 8019bc2:	d52f      	bpl.n	8019c24 <__swbuf_r+0x84>
 8019bc4:	6923      	ldr	r3, [r4, #16]
 8019bc6:	b36b      	cbz	r3, 8019c24 <__swbuf_r+0x84>
 8019bc8:	6923      	ldr	r3, [r4, #16]
 8019bca:	6820      	ldr	r0, [r4, #0]
 8019bcc:	1ac0      	subs	r0, r0, r3
 8019bce:	6963      	ldr	r3, [r4, #20]
 8019bd0:	b2f6      	uxtb	r6, r6
 8019bd2:	4283      	cmp	r3, r0
 8019bd4:	4637      	mov	r7, r6
 8019bd6:	dc04      	bgt.n	8019be2 <__swbuf_r+0x42>
 8019bd8:	4621      	mov	r1, r4
 8019bda:	4628      	mov	r0, r5
 8019bdc:	f000 f944 	bl	8019e68 <_fflush_r>
 8019be0:	bb30      	cbnz	r0, 8019c30 <__swbuf_r+0x90>
 8019be2:	68a3      	ldr	r3, [r4, #8]
 8019be4:	3b01      	subs	r3, #1
 8019be6:	60a3      	str	r3, [r4, #8]
 8019be8:	6823      	ldr	r3, [r4, #0]
 8019bea:	1c5a      	adds	r2, r3, #1
 8019bec:	6022      	str	r2, [r4, #0]
 8019bee:	701e      	strb	r6, [r3, #0]
 8019bf0:	6963      	ldr	r3, [r4, #20]
 8019bf2:	3001      	adds	r0, #1
 8019bf4:	4283      	cmp	r3, r0
 8019bf6:	d004      	beq.n	8019c02 <__swbuf_r+0x62>
 8019bf8:	89a3      	ldrh	r3, [r4, #12]
 8019bfa:	07db      	lsls	r3, r3, #31
 8019bfc:	d506      	bpl.n	8019c0c <__swbuf_r+0x6c>
 8019bfe:	2e0a      	cmp	r6, #10
 8019c00:	d104      	bne.n	8019c0c <__swbuf_r+0x6c>
 8019c02:	4621      	mov	r1, r4
 8019c04:	4628      	mov	r0, r5
 8019c06:	f000 f92f 	bl	8019e68 <_fflush_r>
 8019c0a:	b988      	cbnz	r0, 8019c30 <__swbuf_r+0x90>
 8019c0c:	4638      	mov	r0, r7
 8019c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c10:	4b0a      	ldr	r3, [pc, #40]	; (8019c3c <__swbuf_r+0x9c>)
 8019c12:	429c      	cmp	r4, r3
 8019c14:	d101      	bne.n	8019c1a <__swbuf_r+0x7a>
 8019c16:	68ac      	ldr	r4, [r5, #8]
 8019c18:	e7cf      	b.n	8019bba <__swbuf_r+0x1a>
 8019c1a:	4b09      	ldr	r3, [pc, #36]	; (8019c40 <__swbuf_r+0xa0>)
 8019c1c:	429c      	cmp	r4, r3
 8019c1e:	bf08      	it	eq
 8019c20:	68ec      	ldreq	r4, [r5, #12]
 8019c22:	e7ca      	b.n	8019bba <__swbuf_r+0x1a>
 8019c24:	4621      	mov	r1, r4
 8019c26:	4628      	mov	r0, r5
 8019c28:	f000 f80c 	bl	8019c44 <__swsetup_r>
 8019c2c:	2800      	cmp	r0, #0
 8019c2e:	d0cb      	beq.n	8019bc8 <__swbuf_r+0x28>
 8019c30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019c34:	e7ea      	b.n	8019c0c <__swbuf_r+0x6c>
 8019c36:	bf00      	nop
 8019c38:	0801e528 	.word	0x0801e528
 8019c3c:	0801e548 	.word	0x0801e548
 8019c40:	0801e508 	.word	0x0801e508

08019c44 <__swsetup_r>:
 8019c44:	4b32      	ldr	r3, [pc, #200]	; (8019d10 <__swsetup_r+0xcc>)
 8019c46:	b570      	push	{r4, r5, r6, lr}
 8019c48:	681d      	ldr	r5, [r3, #0]
 8019c4a:	4606      	mov	r6, r0
 8019c4c:	460c      	mov	r4, r1
 8019c4e:	b125      	cbz	r5, 8019c5a <__swsetup_r+0x16>
 8019c50:	69ab      	ldr	r3, [r5, #24]
 8019c52:	b913      	cbnz	r3, 8019c5a <__swsetup_r+0x16>
 8019c54:	4628      	mov	r0, r5
 8019c56:	f000 f99b 	bl	8019f90 <__sinit>
 8019c5a:	4b2e      	ldr	r3, [pc, #184]	; (8019d14 <__swsetup_r+0xd0>)
 8019c5c:	429c      	cmp	r4, r3
 8019c5e:	d10f      	bne.n	8019c80 <__swsetup_r+0x3c>
 8019c60:	686c      	ldr	r4, [r5, #4]
 8019c62:	89a3      	ldrh	r3, [r4, #12]
 8019c64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019c68:	0719      	lsls	r1, r3, #28
 8019c6a:	d42c      	bmi.n	8019cc6 <__swsetup_r+0x82>
 8019c6c:	06dd      	lsls	r5, r3, #27
 8019c6e:	d411      	bmi.n	8019c94 <__swsetup_r+0x50>
 8019c70:	2309      	movs	r3, #9
 8019c72:	6033      	str	r3, [r6, #0]
 8019c74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019c78:	81a3      	strh	r3, [r4, #12]
 8019c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019c7e:	e03e      	b.n	8019cfe <__swsetup_r+0xba>
 8019c80:	4b25      	ldr	r3, [pc, #148]	; (8019d18 <__swsetup_r+0xd4>)
 8019c82:	429c      	cmp	r4, r3
 8019c84:	d101      	bne.n	8019c8a <__swsetup_r+0x46>
 8019c86:	68ac      	ldr	r4, [r5, #8]
 8019c88:	e7eb      	b.n	8019c62 <__swsetup_r+0x1e>
 8019c8a:	4b24      	ldr	r3, [pc, #144]	; (8019d1c <__swsetup_r+0xd8>)
 8019c8c:	429c      	cmp	r4, r3
 8019c8e:	bf08      	it	eq
 8019c90:	68ec      	ldreq	r4, [r5, #12]
 8019c92:	e7e6      	b.n	8019c62 <__swsetup_r+0x1e>
 8019c94:	0758      	lsls	r0, r3, #29
 8019c96:	d512      	bpl.n	8019cbe <__swsetup_r+0x7a>
 8019c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019c9a:	b141      	cbz	r1, 8019cae <__swsetup_r+0x6a>
 8019c9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ca0:	4299      	cmp	r1, r3
 8019ca2:	d002      	beq.n	8019caa <__swsetup_r+0x66>
 8019ca4:	4630      	mov	r0, r6
 8019ca6:	f000 fa93 	bl	801a1d0 <_free_r>
 8019caa:	2300      	movs	r3, #0
 8019cac:	6363      	str	r3, [r4, #52]	; 0x34
 8019cae:	89a3      	ldrh	r3, [r4, #12]
 8019cb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019cb4:	81a3      	strh	r3, [r4, #12]
 8019cb6:	2300      	movs	r3, #0
 8019cb8:	6063      	str	r3, [r4, #4]
 8019cba:	6923      	ldr	r3, [r4, #16]
 8019cbc:	6023      	str	r3, [r4, #0]
 8019cbe:	89a3      	ldrh	r3, [r4, #12]
 8019cc0:	f043 0308 	orr.w	r3, r3, #8
 8019cc4:	81a3      	strh	r3, [r4, #12]
 8019cc6:	6923      	ldr	r3, [r4, #16]
 8019cc8:	b94b      	cbnz	r3, 8019cde <__swsetup_r+0x9a>
 8019cca:	89a3      	ldrh	r3, [r4, #12]
 8019ccc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019cd4:	d003      	beq.n	8019cde <__swsetup_r+0x9a>
 8019cd6:	4621      	mov	r1, r4
 8019cd8:	4630      	mov	r0, r6
 8019cda:	f000 fa31 	bl	801a140 <__smakebuf_r>
 8019cde:	89a0      	ldrh	r0, [r4, #12]
 8019ce0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019ce4:	f010 0301 	ands.w	r3, r0, #1
 8019ce8:	d00a      	beq.n	8019d00 <__swsetup_r+0xbc>
 8019cea:	2300      	movs	r3, #0
 8019cec:	60a3      	str	r3, [r4, #8]
 8019cee:	6963      	ldr	r3, [r4, #20]
 8019cf0:	425b      	negs	r3, r3
 8019cf2:	61a3      	str	r3, [r4, #24]
 8019cf4:	6923      	ldr	r3, [r4, #16]
 8019cf6:	b943      	cbnz	r3, 8019d0a <__swsetup_r+0xc6>
 8019cf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019cfc:	d1ba      	bne.n	8019c74 <__swsetup_r+0x30>
 8019cfe:	bd70      	pop	{r4, r5, r6, pc}
 8019d00:	0781      	lsls	r1, r0, #30
 8019d02:	bf58      	it	pl
 8019d04:	6963      	ldrpl	r3, [r4, #20]
 8019d06:	60a3      	str	r3, [r4, #8]
 8019d08:	e7f4      	b.n	8019cf4 <__swsetup_r+0xb0>
 8019d0a:	2000      	movs	r0, #0
 8019d0c:	e7f7      	b.n	8019cfe <__swsetup_r+0xba>
 8019d0e:	bf00      	nop
 8019d10:	20000034 	.word	0x20000034
 8019d14:	0801e528 	.word	0x0801e528
 8019d18:	0801e548 	.word	0x0801e548
 8019d1c:	0801e508 	.word	0x0801e508

08019d20 <__assert_func>:
 8019d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019d22:	4614      	mov	r4, r2
 8019d24:	461a      	mov	r2, r3
 8019d26:	4b09      	ldr	r3, [pc, #36]	; (8019d4c <__assert_func+0x2c>)
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	4605      	mov	r5, r0
 8019d2c:	68d8      	ldr	r0, [r3, #12]
 8019d2e:	b14c      	cbz	r4, 8019d44 <__assert_func+0x24>
 8019d30:	4b07      	ldr	r3, [pc, #28]	; (8019d50 <__assert_func+0x30>)
 8019d32:	9100      	str	r1, [sp, #0]
 8019d34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019d38:	4906      	ldr	r1, [pc, #24]	; (8019d54 <__assert_func+0x34>)
 8019d3a:	462b      	mov	r3, r5
 8019d3c:	f000 f9a6 	bl	801a08c <fiprintf>
 8019d40:	f000 fe7a 	bl	801aa38 <abort>
 8019d44:	4b04      	ldr	r3, [pc, #16]	; (8019d58 <__assert_func+0x38>)
 8019d46:	461c      	mov	r4, r3
 8019d48:	e7f3      	b.n	8019d32 <__assert_func+0x12>
 8019d4a:	bf00      	nop
 8019d4c:	20000034 	.word	0x20000034
 8019d50:	0801e4ca 	.word	0x0801e4ca
 8019d54:	0801e4d7 	.word	0x0801e4d7
 8019d58:	0801e505 	.word	0x0801e505

08019d5c <__sflush_r>:
 8019d5c:	898a      	ldrh	r2, [r1, #12]
 8019d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d62:	4605      	mov	r5, r0
 8019d64:	0710      	lsls	r0, r2, #28
 8019d66:	460c      	mov	r4, r1
 8019d68:	d458      	bmi.n	8019e1c <__sflush_r+0xc0>
 8019d6a:	684b      	ldr	r3, [r1, #4]
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	dc05      	bgt.n	8019d7c <__sflush_r+0x20>
 8019d70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	dc02      	bgt.n	8019d7c <__sflush_r+0x20>
 8019d76:	2000      	movs	r0, #0
 8019d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019d7e:	2e00      	cmp	r6, #0
 8019d80:	d0f9      	beq.n	8019d76 <__sflush_r+0x1a>
 8019d82:	2300      	movs	r3, #0
 8019d84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019d88:	682f      	ldr	r7, [r5, #0]
 8019d8a:	602b      	str	r3, [r5, #0]
 8019d8c:	d032      	beq.n	8019df4 <__sflush_r+0x98>
 8019d8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019d90:	89a3      	ldrh	r3, [r4, #12]
 8019d92:	075a      	lsls	r2, r3, #29
 8019d94:	d505      	bpl.n	8019da2 <__sflush_r+0x46>
 8019d96:	6863      	ldr	r3, [r4, #4]
 8019d98:	1ac0      	subs	r0, r0, r3
 8019d9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019d9c:	b10b      	cbz	r3, 8019da2 <__sflush_r+0x46>
 8019d9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019da0:	1ac0      	subs	r0, r0, r3
 8019da2:	2300      	movs	r3, #0
 8019da4:	4602      	mov	r2, r0
 8019da6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019da8:	6a21      	ldr	r1, [r4, #32]
 8019daa:	4628      	mov	r0, r5
 8019dac:	47b0      	blx	r6
 8019dae:	1c43      	adds	r3, r0, #1
 8019db0:	89a3      	ldrh	r3, [r4, #12]
 8019db2:	d106      	bne.n	8019dc2 <__sflush_r+0x66>
 8019db4:	6829      	ldr	r1, [r5, #0]
 8019db6:	291d      	cmp	r1, #29
 8019db8:	d82c      	bhi.n	8019e14 <__sflush_r+0xb8>
 8019dba:	4a2a      	ldr	r2, [pc, #168]	; (8019e64 <__sflush_r+0x108>)
 8019dbc:	40ca      	lsrs	r2, r1
 8019dbe:	07d6      	lsls	r6, r2, #31
 8019dc0:	d528      	bpl.n	8019e14 <__sflush_r+0xb8>
 8019dc2:	2200      	movs	r2, #0
 8019dc4:	6062      	str	r2, [r4, #4]
 8019dc6:	04d9      	lsls	r1, r3, #19
 8019dc8:	6922      	ldr	r2, [r4, #16]
 8019dca:	6022      	str	r2, [r4, #0]
 8019dcc:	d504      	bpl.n	8019dd8 <__sflush_r+0x7c>
 8019dce:	1c42      	adds	r2, r0, #1
 8019dd0:	d101      	bne.n	8019dd6 <__sflush_r+0x7a>
 8019dd2:	682b      	ldr	r3, [r5, #0]
 8019dd4:	b903      	cbnz	r3, 8019dd8 <__sflush_r+0x7c>
 8019dd6:	6560      	str	r0, [r4, #84]	; 0x54
 8019dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019dda:	602f      	str	r7, [r5, #0]
 8019ddc:	2900      	cmp	r1, #0
 8019dde:	d0ca      	beq.n	8019d76 <__sflush_r+0x1a>
 8019de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019de4:	4299      	cmp	r1, r3
 8019de6:	d002      	beq.n	8019dee <__sflush_r+0x92>
 8019de8:	4628      	mov	r0, r5
 8019dea:	f000 f9f1 	bl	801a1d0 <_free_r>
 8019dee:	2000      	movs	r0, #0
 8019df0:	6360      	str	r0, [r4, #52]	; 0x34
 8019df2:	e7c1      	b.n	8019d78 <__sflush_r+0x1c>
 8019df4:	6a21      	ldr	r1, [r4, #32]
 8019df6:	2301      	movs	r3, #1
 8019df8:	4628      	mov	r0, r5
 8019dfa:	47b0      	blx	r6
 8019dfc:	1c41      	adds	r1, r0, #1
 8019dfe:	d1c7      	bne.n	8019d90 <__sflush_r+0x34>
 8019e00:	682b      	ldr	r3, [r5, #0]
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d0c4      	beq.n	8019d90 <__sflush_r+0x34>
 8019e06:	2b1d      	cmp	r3, #29
 8019e08:	d001      	beq.n	8019e0e <__sflush_r+0xb2>
 8019e0a:	2b16      	cmp	r3, #22
 8019e0c:	d101      	bne.n	8019e12 <__sflush_r+0xb6>
 8019e0e:	602f      	str	r7, [r5, #0]
 8019e10:	e7b1      	b.n	8019d76 <__sflush_r+0x1a>
 8019e12:	89a3      	ldrh	r3, [r4, #12]
 8019e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e18:	81a3      	strh	r3, [r4, #12]
 8019e1a:	e7ad      	b.n	8019d78 <__sflush_r+0x1c>
 8019e1c:	690f      	ldr	r7, [r1, #16]
 8019e1e:	2f00      	cmp	r7, #0
 8019e20:	d0a9      	beq.n	8019d76 <__sflush_r+0x1a>
 8019e22:	0793      	lsls	r3, r2, #30
 8019e24:	680e      	ldr	r6, [r1, #0]
 8019e26:	bf08      	it	eq
 8019e28:	694b      	ldreq	r3, [r1, #20]
 8019e2a:	600f      	str	r7, [r1, #0]
 8019e2c:	bf18      	it	ne
 8019e2e:	2300      	movne	r3, #0
 8019e30:	eba6 0807 	sub.w	r8, r6, r7
 8019e34:	608b      	str	r3, [r1, #8]
 8019e36:	f1b8 0f00 	cmp.w	r8, #0
 8019e3a:	dd9c      	ble.n	8019d76 <__sflush_r+0x1a>
 8019e3c:	6a21      	ldr	r1, [r4, #32]
 8019e3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019e40:	4643      	mov	r3, r8
 8019e42:	463a      	mov	r2, r7
 8019e44:	4628      	mov	r0, r5
 8019e46:	47b0      	blx	r6
 8019e48:	2800      	cmp	r0, #0
 8019e4a:	dc06      	bgt.n	8019e5a <__sflush_r+0xfe>
 8019e4c:	89a3      	ldrh	r3, [r4, #12]
 8019e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e52:	81a3      	strh	r3, [r4, #12]
 8019e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019e58:	e78e      	b.n	8019d78 <__sflush_r+0x1c>
 8019e5a:	4407      	add	r7, r0
 8019e5c:	eba8 0800 	sub.w	r8, r8, r0
 8019e60:	e7e9      	b.n	8019e36 <__sflush_r+0xda>
 8019e62:	bf00      	nop
 8019e64:	20400001 	.word	0x20400001

08019e68 <_fflush_r>:
 8019e68:	b538      	push	{r3, r4, r5, lr}
 8019e6a:	690b      	ldr	r3, [r1, #16]
 8019e6c:	4605      	mov	r5, r0
 8019e6e:	460c      	mov	r4, r1
 8019e70:	b913      	cbnz	r3, 8019e78 <_fflush_r+0x10>
 8019e72:	2500      	movs	r5, #0
 8019e74:	4628      	mov	r0, r5
 8019e76:	bd38      	pop	{r3, r4, r5, pc}
 8019e78:	b118      	cbz	r0, 8019e82 <_fflush_r+0x1a>
 8019e7a:	6983      	ldr	r3, [r0, #24]
 8019e7c:	b90b      	cbnz	r3, 8019e82 <_fflush_r+0x1a>
 8019e7e:	f000 f887 	bl	8019f90 <__sinit>
 8019e82:	4b14      	ldr	r3, [pc, #80]	; (8019ed4 <_fflush_r+0x6c>)
 8019e84:	429c      	cmp	r4, r3
 8019e86:	d11b      	bne.n	8019ec0 <_fflush_r+0x58>
 8019e88:	686c      	ldr	r4, [r5, #4]
 8019e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d0ef      	beq.n	8019e72 <_fflush_r+0xa>
 8019e92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019e94:	07d0      	lsls	r0, r2, #31
 8019e96:	d404      	bmi.n	8019ea2 <_fflush_r+0x3a>
 8019e98:	0599      	lsls	r1, r3, #22
 8019e9a:	d402      	bmi.n	8019ea2 <_fflush_r+0x3a>
 8019e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019e9e:	f000 f927 	bl	801a0f0 <__retarget_lock_acquire_recursive>
 8019ea2:	4628      	mov	r0, r5
 8019ea4:	4621      	mov	r1, r4
 8019ea6:	f7ff ff59 	bl	8019d5c <__sflush_r>
 8019eaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019eac:	07da      	lsls	r2, r3, #31
 8019eae:	4605      	mov	r5, r0
 8019eb0:	d4e0      	bmi.n	8019e74 <_fflush_r+0xc>
 8019eb2:	89a3      	ldrh	r3, [r4, #12]
 8019eb4:	059b      	lsls	r3, r3, #22
 8019eb6:	d4dd      	bmi.n	8019e74 <_fflush_r+0xc>
 8019eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019eba:	f000 f91a 	bl	801a0f2 <__retarget_lock_release_recursive>
 8019ebe:	e7d9      	b.n	8019e74 <_fflush_r+0xc>
 8019ec0:	4b05      	ldr	r3, [pc, #20]	; (8019ed8 <_fflush_r+0x70>)
 8019ec2:	429c      	cmp	r4, r3
 8019ec4:	d101      	bne.n	8019eca <_fflush_r+0x62>
 8019ec6:	68ac      	ldr	r4, [r5, #8]
 8019ec8:	e7df      	b.n	8019e8a <_fflush_r+0x22>
 8019eca:	4b04      	ldr	r3, [pc, #16]	; (8019edc <_fflush_r+0x74>)
 8019ecc:	429c      	cmp	r4, r3
 8019ece:	bf08      	it	eq
 8019ed0:	68ec      	ldreq	r4, [r5, #12]
 8019ed2:	e7da      	b.n	8019e8a <_fflush_r+0x22>
 8019ed4:	0801e528 	.word	0x0801e528
 8019ed8:	0801e548 	.word	0x0801e548
 8019edc:	0801e508 	.word	0x0801e508

08019ee0 <std>:
 8019ee0:	2300      	movs	r3, #0
 8019ee2:	b510      	push	{r4, lr}
 8019ee4:	4604      	mov	r4, r0
 8019ee6:	e9c0 3300 	strd	r3, r3, [r0]
 8019eea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019eee:	6083      	str	r3, [r0, #8]
 8019ef0:	8181      	strh	r1, [r0, #12]
 8019ef2:	6643      	str	r3, [r0, #100]	; 0x64
 8019ef4:	81c2      	strh	r2, [r0, #14]
 8019ef6:	6183      	str	r3, [r0, #24]
 8019ef8:	4619      	mov	r1, r3
 8019efa:	2208      	movs	r2, #8
 8019efc:	305c      	adds	r0, #92	; 0x5c
 8019efe:	f7ff fd67 	bl	80199d0 <memset>
 8019f02:	4b05      	ldr	r3, [pc, #20]	; (8019f18 <std+0x38>)
 8019f04:	6263      	str	r3, [r4, #36]	; 0x24
 8019f06:	4b05      	ldr	r3, [pc, #20]	; (8019f1c <std+0x3c>)
 8019f08:	62a3      	str	r3, [r4, #40]	; 0x28
 8019f0a:	4b05      	ldr	r3, [pc, #20]	; (8019f20 <std+0x40>)
 8019f0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019f0e:	4b05      	ldr	r3, [pc, #20]	; (8019f24 <std+0x44>)
 8019f10:	6224      	str	r4, [r4, #32]
 8019f12:	6323      	str	r3, [r4, #48]	; 0x30
 8019f14:	bd10      	pop	{r4, pc}
 8019f16:	bf00      	nop
 8019f18:	0801a98d 	.word	0x0801a98d
 8019f1c:	0801a9af 	.word	0x0801a9af
 8019f20:	0801a9e7 	.word	0x0801a9e7
 8019f24:	0801aa0b 	.word	0x0801aa0b

08019f28 <_cleanup_r>:
 8019f28:	4901      	ldr	r1, [pc, #4]	; (8019f30 <_cleanup_r+0x8>)
 8019f2a:	f000 b8c1 	b.w	801a0b0 <_fwalk_reent>
 8019f2e:	bf00      	nop
 8019f30:	08019e69 	.word	0x08019e69

08019f34 <__sfmoreglue>:
 8019f34:	b570      	push	{r4, r5, r6, lr}
 8019f36:	2268      	movs	r2, #104	; 0x68
 8019f38:	1e4d      	subs	r5, r1, #1
 8019f3a:	4355      	muls	r5, r2
 8019f3c:	460e      	mov	r6, r1
 8019f3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019f42:	f000 f9b1 	bl	801a2a8 <_malloc_r>
 8019f46:	4604      	mov	r4, r0
 8019f48:	b140      	cbz	r0, 8019f5c <__sfmoreglue+0x28>
 8019f4a:	2100      	movs	r1, #0
 8019f4c:	e9c0 1600 	strd	r1, r6, [r0]
 8019f50:	300c      	adds	r0, #12
 8019f52:	60a0      	str	r0, [r4, #8]
 8019f54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019f58:	f7ff fd3a 	bl	80199d0 <memset>
 8019f5c:	4620      	mov	r0, r4
 8019f5e:	bd70      	pop	{r4, r5, r6, pc}

08019f60 <__sfp_lock_acquire>:
 8019f60:	4801      	ldr	r0, [pc, #4]	; (8019f68 <__sfp_lock_acquire+0x8>)
 8019f62:	f000 b8c5 	b.w	801a0f0 <__retarget_lock_acquire_recursive>
 8019f66:	bf00      	nop
 8019f68:	2001140d 	.word	0x2001140d

08019f6c <__sfp_lock_release>:
 8019f6c:	4801      	ldr	r0, [pc, #4]	; (8019f74 <__sfp_lock_release+0x8>)
 8019f6e:	f000 b8c0 	b.w	801a0f2 <__retarget_lock_release_recursive>
 8019f72:	bf00      	nop
 8019f74:	2001140d 	.word	0x2001140d

08019f78 <__sinit_lock_acquire>:
 8019f78:	4801      	ldr	r0, [pc, #4]	; (8019f80 <__sinit_lock_acquire+0x8>)
 8019f7a:	f000 b8b9 	b.w	801a0f0 <__retarget_lock_acquire_recursive>
 8019f7e:	bf00      	nop
 8019f80:	2001140e 	.word	0x2001140e

08019f84 <__sinit_lock_release>:
 8019f84:	4801      	ldr	r0, [pc, #4]	; (8019f8c <__sinit_lock_release+0x8>)
 8019f86:	f000 b8b4 	b.w	801a0f2 <__retarget_lock_release_recursive>
 8019f8a:	bf00      	nop
 8019f8c:	2001140e 	.word	0x2001140e

08019f90 <__sinit>:
 8019f90:	b510      	push	{r4, lr}
 8019f92:	4604      	mov	r4, r0
 8019f94:	f7ff fff0 	bl	8019f78 <__sinit_lock_acquire>
 8019f98:	69a3      	ldr	r3, [r4, #24]
 8019f9a:	b11b      	cbz	r3, 8019fa4 <__sinit+0x14>
 8019f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019fa0:	f7ff bff0 	b.w	8019f84 <__sinit_lock_release>
 8019fa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019fa8:	6523      	str	r3, [r4, #80]	; 0x50
 8019faa:	4b13      	ldr	r3, [pc, #76]	; (8019ff8 <__sinit+0x68>)
 8019fac:	4a13      	ldr	r2, [pc, #76]	; (8019ffc <__sinit+0x6c>)
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8019fb2:	42a3      	cmp	r3, r4
 8019fb4:	bf04      	itt	eq
 8019fb6:	2301      	moveq	r3, #1
 8019fb8:	61a3      	streq	r3, [r4, #24]
 8019fba:	4620      	mov	r0, r4
 8019fbc:	f000 f820 	bl	801a000 <__sfp>
 8019fc0:	6060      	str	r0, [r4, #4]
 8019fc2:	4620      	mov	r0, r4
 8019fc4:	f000 f81c 	bl	801a000 <__sfp>
 8019fc8:	60a0      	str	r0, [r4, #8]
 8019fca:	4620      	mov	r0, r4
 8019fcc:	f000 f818 	bl	801a000 <__sfp>
 8019fd0:	2200      	movs	r2, #0
 8019fd2:	60e0      	str	r0, [r4, #12]
 8019fd4:	2104      	movs	r1, #4
 8019fd6:	6860      	ldr	r0, [r4, #4]
 8019fd8:	f7ff ff82 	bl	8019ee0 <std>
 8019fdc:	68a0      	ldr	r0, [r4, #8]
 8019fde:	2201      	movs	r2, #1
 8019fe0:	2109      	movs	r1, #9
 8019fe2:	f7ff ff7d 	bl	8019ee0 <std>
 8019fe6:	68e0      	ldr	r0, [r4, #12]
 8019fe8:	2202      	movs	r2, #2
 8019fea:	2112      	movs	r1, #18
 8019fec:	f7ff ff78 	bl	8019ee0 <std>
 8019ff0:	2301      	movs	r3, #1
 8019ff2:	61a3      	str	r3, [r4, #24]
 8019ff4:	e7d2      	b.n	8019f9c <__sinit+0xc>
 8019ff6:	bf00      	nop
 8019ff8:	0801e454 	.word	0x0801e454
 8019ffc:	08019f29 	.word	0x08019f29

0801a000 <__sfp>:
 801a000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a002:	4607      	mov	r7, r0
 801a004:	f7ff ffac 	bl	8019f60 <__sfp_lock_acquire>
 801a008:	4b1e      	ldr	r3, [pc, #120]	; (801a084 <__sfp+0x84>)
 801a00a:	681e      	ldr	r6, [r3, #0]
 801a00c:	69b3      	ldr	r3, [r6, #24]
 801a00e:	b913      	cbnz	r3, 801a016 <__sfp+0x16>
 801a010:	4630      	mov	r0, r6
 801a012:	f7ff ffbd 	bl	8019f90 <__sinit>
 801a016:	3648      	adds	r6, #72	; 0x48
 801a018:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a01c:	3b01      	subs	r3, #1
 801a01e:	d503      	bpl.n	801a028 <__sfp+0x28>
 801a020:	6833      	ldr	r3, [r6, #0]
 801a022:	b30b      	cbz	r3, 801a068 <__sfp+0x68>
 801a024:	6836      	ldr	r6, [r6, #0]
 801a026:	e7f7      	b.n	801a018 <__sfp+0x18>
 801a028:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a02c:	b9d5      	cbnz	r5, 801a064 <__sfp+0x64>
 801a02e:	4b16      	ldr	r3, [pc, #88]	; (801a088 <__sfp+0x88>)
 801a030:	60e3      	str	r3, [r4, #12]
 801a032:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a036:	6665      	str	r5, [r4, #100]	; 0x64
 801a038:	f000 f859 	bl	801a0ee <__retarget_lock_init_recursive>
 801a03c:	f7ff ff96 	bl	8019f6c <__sfp_lock_release>
 801a040:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a044:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a048:	6025      	str	r5, [r4, #0]
 801a04a:	61a5      	str	r5, [r4, #24]
 801a04c:	2208      	movs	r2, #8
 801a04e:	4629      	mov	r1, r5
 801a050:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a054:	f7ff fcbc 	bl	80199d0 <memset>
 801a058:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a05c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a060:	4620      	mov	r0, r4
 801a062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a064:	3468      	adds	r4, #104	; 0x68
 801a066:	e7d9      	b.n	801a01c <__sfp+0x1c>
 801a068:	2104      	movs	r1, #4
 801a06a:	4638      	mov	r0, r7
 801a06c:	f7ff ff62 	bl	8019f34 <__sfmoreglue>
 801a070:	4604      	mov	r4, r0
 801a072:	6030      	str	r0, [r6, #0]
 801a074:	2800      	cmp	r0, #0
 801a076:	d1d5      	bne.n	801a024 <__sfp+0x24>
 801a078:	f7ff ff78 	bl	8019f6c <__sfp_lock_release>
 801a07c:	230c      	movs	r3, #12
 801a07e:	603b      	str	r3, [r7, #0]
 801a080:	e7ee      	b.n	801a060 <__sfp+0x60>
 801a082:	bf00      	nop
 801a084:	0801e454 	.word	0x0801e454
 801a088:	ffff0001 	.word	0xffff0001

0801a08c <fiprintf>:
 801a08c:	b40e      	push	{r1, r2, r3}
 801a08e:	b503      	push	{r0, r1, lr}
 801a090:	4601      	mov	r1, r0
 801a092:	ab03      	add	r3, sp, #12
 801a094:	4805      	ldr	r0, [pc, #20]	; (801a0ac <fiprintf+0x20>)
 801a096:	f853 2b04 	ldr.w	r2, [r3], #4
 801a09a:	6800      	ldr	r0, [r0, #0]
 801a09c:	9301      	str	r3, [sp, #4]
 801a09e:	f000 f9a1 	bl	801a3e4 <_vfiprintf_r>
 801a0a2:	b002      	add	sp, #8
 801a0a4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a0a8:	b003      	add	sp, #12
 801a0aa:	4770      	bx	lr
 801a0ac:	20000034 	.word	0x20000034

0801a0b0 <_fwalk_reent>:
 801a0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a0b4:	4606      	mov	r6, r0
 801a0b6:	4688      	mov	r8, r1
 801a0b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a0bc:	2700      	movs	r7, #0
 801a0be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a0c2:	f1b9 0901 	subs.w	r9, r9, #1
 801a0c6:	d505      	bpl.n	801a0d4 <_fwalk_reent+0x24>
 801a0c8:	6824      	ldr	r4, [r4, #0]
 801a0ca:	2c00      	cmp	r4, #0
 801a0cc:	d1f7      	bne.n	801a0be <_fwalk_reent+0xe>
 801a0ce:	4638      	mov	r0, r7
 801a0d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0d4:	89ab      	ldrh	r3, [r5, #12]
 801a0d6:	2b01      	cmp	r3, #1
 801a0d8:	d907      	bls.n	801a0ea <_fwalk_reent+0x3a>
 801a0da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a0de:	3301      	adds	r3, #1
 801a0e0:	d003      	beq.n	801a0ea <_fwalk_reent+0x3a>
 801a0e2:	4629      	mov	r1, r5
 801a0e4:	4630      	mov	r0, r6
 801a0e6:	47c0      	blx	r8
 801a0e8:	4307      	orrs	r7, r0
 801a0ea:	3568      	adds	r5, #104	; 0x68
 801a0ec:	e7e9      	b.n	801a0c2 <_fwalk_reent+0x12>

0801a0ee <__retarget_lock_init_recursive>:
 801a0ee:	4770      	bx	lr

0801a0f0 <__retarget_lock_acquire_recursive>:
 801a0f0:	4770      	bx	lr

0801a0f2 <__retarget_lock_release_recursive>:
 801a0f2:	4770      	bx	lr

0801a0f4 <__swhatbuf_r>:
 801a0f4:	b570      	push	{r4, r5, r6, lr}
 801a0f6:	460e      	mov	r6, r1
 801a0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0fc:	2900      	cmp	r1, #0
 801a0fe:	b096      	sub	sp, #88	; 0x58
 801a100:	4614      	mov	r4, r2
 801a102:	461d      	mov	r5, r3
 801a104:	da08      	bge.n	801a118 <__swhatbuf_r+0x24>
 801a106:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a10a:	2200      	movs	r2, #0
 801a10c:	602a      	str	r2, [r5, #0]
 801a10e:	061a      	lsls	r2, r3, #24
 801a110:	d410      	bmi.n	801a134 <__swhatbuf_r+0x40>
 801a112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a116:	e00e      	b.n	801a136 <__swhatbuf_r+0x42>
 801a118:	466a      	mov	r2, sp
 801a11a:	f000 fca5 	bl	801aa68 <_fstat_r>
 801a11e:	2800      	cmp	r0, #0
 801a120:	dbf1      	blt.n	801a106 <__swhatbuf_r+0x12>
 801a122:	9a01      	ldr	r2, [sp, #4]
 801a124:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a128:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a12c:	425a      	negs	r2, r3
 801a12e:	415a      	adcs	r2, r3
 801a130:	602a      	str	r2, [r5, #0]
 801a132:	e7ee      	b.n	801a112 <__swhatbuf_r+0x1e>
 801a134:	2340      	movs	r3, #64	; 0x40
 801a136:	2000      	movs	r0, #0
 801a138:	6023      	str	r3, [r4, #0]
 801a13a:	b016      	add	sp, #88	; 0x58
 801a13c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a140 <__smakebuf_r>:
 801a140:	898b      	ldrh	r3, [r1, #12]
 801a142:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a144:	079d      	lsls	r5, r3, #30
 801a146:	4606      	mov	r6, r0
 801a148:	460c      	mov	r4, r1
 801a14a:	d507      	bpl.n	801a15c <__smakebuf_r+0x1c>
 801a14c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a150:	6023      	str	r3, [r4, #0]
 801a152:	6123      	str	r3, [r4, #16]
 801a154:	2301      	movs	r3, #1
 801a156:	6163      	str	r3, [r4, #20]
 801a158:	b002      	add	sp, #8
 801a15a:	bd70      	pop	{r4, r5, r6, pc}
 801a15c:	ab01      	add	r3, sp, #4
 801a15e:	466a      	mov	r2, sp
 801a160:	f7ff ffc8 	bl	801a0f4 <__swhatbuf_r>
 801a164:	9900      	ldr	r1, [sp, #0]
 801a166:	4605      	mov	r5, r0
 801a168:	4630      	mov	r0, r6
 801a16a:	f000 f89d 	bl	801a2a8 <_malloc_r>
 801a16e:	b948      	cbnz	r0, 801a184 <__smakebuf_r+0x44>
 801a170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a174:	059a      	lsls	r2, r3, #22
 801a176:	d4ef      	bmi.n	801a158 <__smakebuf_r+0x18>
 801a178:	f023 0303 	bic.w	r3, r3, #3
 801a17c:	f043 0302 	orr.w	r3, r3, #2
 801a180:	81a3      	strh	r3, [r4, #12]
 801a182:	e7e3      	b.n	801a14c <__smakebuf_r+0xc>
 801a184:	4b0d      	ldr	r3, [pc, #52]	; (801a1bc <__smakebuf_r+0x7c>)
 801a186:	62b3      	str	r3, [r6, #40]	; 0x28
 801a188:	89a3      	ldrh	r3, [r4, #12]
 801a18a:	6020      	str	r0, [r4, #0]
 801a18c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a190:	81a3      	strh	r3, [r4, #12]
 801a192:	9b00      	ldr	r3, [sp, #0]
 801a194:	6163      	str	r3, [r4, #20]
 801a196:	9b01      	ldr	r3, [sp, #4]
 801a198:	6120      	str	r0, [r4, #16]
 801a19a:	b15b      	cbz	r3, 801a1b4 <__smakebuf_r+0x74>
 801a19c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a1a0:	4630      	mov	r0, r6
 801a1a2:	f000 fc73 	bl	801aa8c <_isatty_r>
 801a1a6:	b128      	cbz	r0, 801a1b4 <__smakebuf_r+0x74>
 801a1a8:	89a3      	ldrh	r3, [r4, #12]
 801a1aa:	f023 0303 	bic.w	r3, r3, #3
 801a1ae:	f043 0301 	orr.w	r3, r3, #1
 801a1b2:	81a3      	strh	r3, [r4, #12]
 801a1b4:	89a0      	ldrh	r0, [r4, #12]
 801a1b6:	4305      	orrs	r5, r0
 801a1b8:	81a5      	strh	r5, [r4, #12]
 801a1ba:	e7cd      	b.n	801a158 <__smakebuf_r+0x18>
 801a1bc:	08019f29 	.word	0x08019f29

0801a1c0 <malloc>:
 801a1c0:	4b02      	ldr	r3, [pc, #8]	; (801a1cc <malloc+0xc>)
 801a1c2:	4601      	mov	r1, r0
 801a1c4:	6818      	ldr	r0, [r3, #0]
 801a1c6:	f000 b86f 	b.w	801a2a8 <_malloc_r>
 801a1ca:	bf00      	nop
 801a1cc:	20000034 	.word	0x20000034

0801a1d0 <_free_r>:
 801a1d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a1d2:	2900      	cmp	r1, #0
 801a1d4:	d044      	beq.n	801a260 <_free_r+0x90>
 801a1d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a1da:	9001      	str	r0, [sp, #4]
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	f1a1 0404 	sub.w	r4, r1, #4
 801a1e2:	bfb8      	it	lt
 801a1e4:	18e4      	addlt	r4, r4, r3
 801a1e6:	f000 fc73 	bl	801aad0 <__malloc_lock>
 801a1ea:	4a1e      	ldr	r2, [pc, #120]	; (801a264 <_free_r+0x94>)
 801a1ec:	9801      	ldr	r0, [sp, #4]
 801a1ee:	6813      	ldr	r3, [r2, #0]
 801a1f0:	b933      	cbnz	r3, 801a200 <_free_r+0x30>
 801a1f2:	6063      	str	r3, [r4, #4]
 801a1f4:	6014      	str	r4, [r2, #0]
 801a1f6:	b003      	add	sp, #12
 801a1f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a1fc:	f000 bc6e 	b.w	801aadc <__malloc_unlock>
 801a200:	42a3      	cmp	r3, r4
 801a202:	d908      	bls.n	801a216 <_free_r+0x46>
 801a204:	6825      	ldr	r5, [r4, #0]
 801a206:	1961      	adds	r1, r4, r5
 801a208:	428b      	cmp	r3, r1
 801a20a:	bf01      	itttt	eq
 801a20c:	6819      	ldreq	r1, [r3, #0]
 801a20e:	685b      	ldreq	r3, [r3, #4]
 801a210:	1949      	addeq	r1, r1, r5
 801a212:	6021      	streq	r1, [r4, #0]
 801a214:	e7ed      	b.n	801a1f2 <_free_r+0x22>
 801a216:	461a      	mov	r2, r3
 801a218:	685b      	ldr	r3, [r3, #4]
 801a21a:	b10b      	cbz	r3, 801a220 <_free_r+0x50>
 801a21c:	42a3      	cmp	r3, r4
 801a21e:	d9fa      	bls.n	801a216 <_free_r+0x46>
 801a220:	6811      	ldr	r1, [r2, #0]
 801a222:	1855      	adds	r5, r2, r1
 801a224:	42a5      	cmp	r5, r4
 801a226:	d10b      	bne.n	801a240 <_free_r+0x70>
 801a228:	6824      	ldr	r4, [r4, #0]
 801a22a:	4421      	add	r1, r4
 801a22c:	1854      	adds	r4, r2, r1
 801a22e:	42a3      	cmp	r3, r4
 801a230:	6011      	str	r1, [r2, #0]
 801a232:	d1e0      	bne.n	801a1f6 <_free_r+0x26>
 801a234:	681c      	ldr	r4, [r3, #0]
 801a236:	685b      	ldr	r3, [r3, #4]
 801a238:	6053      	str	r3, [r2, #4]
 801a23a:	4421      	add	r1, r4
 801a23c:	6011      	str	r1, [r2, #0]
 801a23e:	e7da      	b.n	801a1f6 <_free_r+0x26>
 801a240:	d902      	bls.n	801a248 <_free_r+0x78>
 801a242:	230c      	movs	r3, #12
 801a244:	6003      	str	r3, [r0, #0]
 801a246:	e7d6      	b.n	801a1f6 <_free_r+0x26>
 801a248:	6825      	ldr	r5, [r4, #0]
 801a24a:	1961      	adds	r1, r4, r5
 801a24c:	428b      	cmp	r3, r1
 801a24e:	bf04      	itt	eq
 801a250:	6819      	ldreq	r1, [r3, #0]
 801a252:	685b      	ldreq	r3, [r3, #4]
 801a254:	6063      	str	r3, [r4, #4]
 801a256:	bf04      	itt	eq
 801a258:	1949      	addeq	r1, r1, r5
 801a25a:	6021      	streq	r1, [r4, #0]
 801a25c:	6054      	str	r4, [r2, #4]
 801a25e:	e7ca      	b.n	801a1f6 <_free_r+0x26>
 801a260:	b003      	add	sp, #12
 801a262:	bd30      	pop	{r4, r5, pc}
 801a264:	20011410 	.word	0x20011410

0801a268 <sbrk_aligned>:
 801a268:	b570      	push	{r4, r5, r6, lr}
 801a26a:	4e0e      	ldr	r6, [pc, #56]	; (801a2a4 <sbrk_aligned+0x3c>)
 801a26c:	460c      	mov	r4, r1
 801a26e:	6831      	ldr	r1, [r6, #0]
 801a270:	4605      	mov	r5, r0
 801a272:	b911      	cbnz	r1, 801a27a <sbrk_aligned+0x12>
 801a274:	f000 fb7a 	bl	801a96c <_sbrk_r>
 801a278:	6030      	str	r0, [r6, #0]
 801a27a:	4621      	mov	r1, r4
 801a27c:	4628      	mov	r0, r5
 801a27e:	f000 fb75 	bl	801a96c <_sbrk_r>
 801a282:	1c43      	adds	r3, r0, #1
 801a284:	d00a      	beq.n	801a29c <sbrk_aligned+0x34>
 801a286:	1cc4      	adds	r4, r0, #3
 801a288:	f024 0403 	bic.w	r4, r4, #3
 801a28c:	42a0      	cmp	r0, r4
 801a28e:	d007      	beq.n	801a2a0 <sbrk_aligned+0x38>
 801a290:	1a21      	subs	r1, r4, r0
 801a292:	4628      	mov	r0, r5
 801a294:	f000 fb6a 	bl	801a96c <_sbrk_r>
 801a298:	3001      	adds	r0, #1
 801a29a:	d101      	bne.n	801a2a0 <sbrk_aligned+0x38>
 801a29c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a2a0:	4620      	mov	r0, r4
 801a2a2:	bd70      	pop	{r4, r5, r6, pc}
 801a2a4:	20011414 	.word	0x20011414

0801a2a8 <_malloc_r>:
 801a2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2ac:	1ccd      	adds	r5, r1, #3
 801a2ae:	f025 0503 	bic.w	r5, r5, #3
 801a2b2:	3508      	adds	r5, #8
 801a2b4:	2d0c      	cmp	r5, #12
 801a2b6:	bf38      	it	cc
 801a2b8:	250c      	movcc	r5, #12
 801a2ba:	2d00      	cmp	r5, #0
 801a2bc:	4607      	mov	r7, r0
 801a2be:	db01      	blt.n	801a2c4 <_malloc_r+0x1c>
 801a2c0:	42a9      	cmp	r1, r5
 801a2c2:	d905      	bls.n	801a2d0 <_malloc_r+0x28>
 801a2c4:	230c      	movs	r3, #12
 801a2c6:	603b      	str	r3, [r7, #0]
 801a2c8:	2600      	movs	r6, #0
 801a2ca:	4630      	mov	r0, r6
 801a2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2d0:	4e2e      	ldr	r6, [pc, #184]	; (801a38c <_malloc_r+0xe4>)
 801a2d2:	f000 fbfd 	bl	801aad0 <__malloc_lock>
 801a2d6:	6833      	ldr	r3, [r6, #0]
 801a2d8:	461c      	mov	r4, r3
 801a2da:	bb34      	cbnz	r4, 801a32a <_malloc_r+0x82>
 801a2dc:	4629      	mov	r1, r5
 801a2de:	4638      	mov	r0, r7
 801a2e0:	f7ff ffc2 	bl	801a268 <sbrk_aligned>
 801a2e4:	1c43      	adds	r3, r0, #1
 801a2e6:	4604      	mov	r4, r0
 801a2e8:	d14d      	bne.n	801a386 <_malloc_r+0xde>
 801a2ea:	6834      	ldr	r4, [r6, #0]
 801a2ec:	4626      	mov	r6, r4
 801a2ee:	2e00      	cmp	r6, #0
 801a2f0:	d140      	bne.n	801a374 <_malloc_r+0xcc>
 801a2f2:	6823      	ldr	r3, [r4, #0]
 801a2f4:	4631      	mov	r1, r6
 801a2f6:	4638      	mov	r0, r7
 801a2f8:	eb04 0803 	add.w	r8, r4, r3
 801a2fc:	f000 fb36 	bl	801a96c <_sbrk_r>
 801a300:	4580      	cmp	r8, r0
 801a302:	d13a      	bne.n	801a37a <_malloc_r+0xd2>
 801a304:	6821      	ldr	r1, [r4, #0]
 801a306:	3503      	adds	r5, #3
 801a308:	1a6d      	subs	r5, r5, r1
 801a30a:	f025 0503 	bic.w	r5, r5, #3
 801a30e:	3508      	adds	r5, #8
 801a310:	2d0c      	cmp	r5, #12
 801a312:	bf38      	it	cc
 801a314:	250c      	movcc	r5, #12
 801a316:	4629      	mov	r1, r5
 801a318:	4638      	mov	r0, r7
 801a31a:	f7ff ffa5 	bl	801a268 <sbrk_aligned>
 801a31e:	3001      	adds	r0, #1
 801a320:	d02b      	beq.n	801a37a <_malloc_r+0xd2>
 801a322:	6823      	ldr	r3, [r4, #0]
 801a324:	442b      	add	r3, r5
 801a326:	6023      	str	r3, [r4, #0]
 801a328:	e00e      	b.n	801a348 <_malloc_r+0xa0>
 801a32a:	6822      	ldr	r2, [r4, #0]
 801a32c:	1b52      	subs	r2, r2, r5
 801a32e:	d41e      	bmi.n	801a36e <_malloc_r+0xc6>
 801a330:	2a0b      	cmp	r2, #11
 801a332:	d916      	bls.n	801a362 <_malloc_r+0xba>
 801a334:	1961      	adds	r1, r4, r5
 801a336:	42a3      	cmp	r3, r4
 801a338:	6025      	str	r5, [r4, #0]
 801a33a:	bf18      	it	ne
 801a33c:	6059      	strne	r1, [r3, #4]
 801a33e:	6863      	ldr	r3, [r4, #4]
 801a340:	bf08      	it	eq
 801a342:	6031      	streq	r1, [r6, #0]
 801a344:	5162      	str	r2, [r4, r5]
 801a346:	604b      	str	r3, [r1, #4]
 801a348:	4638      	mov	r0, r7
 801a34a:	f104 060b 	add.w	r6, r4, #11
 801a34e:	f000 fbc5 	bl	801aadc <__malloc_unlock>
 801a352:	f026 0607 	bic.w	r6, r6, #7
 801a356:	1d23      	adds	r3, r4, #4
 801a358:	1af2      	subs	r2, r6, r3
 801a35a:	d0b6      	beq.n	801a2ca <_malloc_r+0x22>
 801a35c:	1b9b      	subs	r3, r3, r6
 801a35e:	50a3      	str	r3, [r4, r2]
 801a360:	e7b3      	b.n	801a2ca <_malloc_r+0x22>
 801a362:	6862      	ldr	r2, [r4, #4]
 801a364:	42a3      	cmp	r3, r4
 801a366:	bf0c      	ite	eq
 801a368:	6032      	streq	r2, [r6, #0]
 801a36a:	605a      	strne	r2, [r3, #4]
 801a36c:	e7ec      	b.n	801a348 <_malloc_r+0xa0>
 801a36e:	4623      	mov	r3, r4
 801a370:	6864      	ldr	r4, [r4, #4]
 801a372:	e7b2      	b.n	801a2da <_malloc_r+0x32>
 801a374:	4634      	mov	r4, r6
 801a376:	6876      	ldr	r6, [r6, #4]
 801a378:	e7b9      	b.n	801a2ee <_malloc_r+0x46>
 801a37a:	230c      	movs	r3, #12
 801a37c:	603b      	str	r3, [r7, #0]
 801a37e:	4638      	mov	r0, r7
 801a380:	f000 fbac 	bl	801aadc <__malloc_unlock>
 801a384:	e7a1      	b.n	801a2ca <_malloc_r+0x22>
 801a386:	6025      	str	r5, [r4, #0]
 801a388:	e7de      	b.n	801a348 <_malloc_r+0xa0>
 801a38a:	bf00      	nop
 801a38c:	20011410 	.word	0x20011410

0801a390 <__sfputc_r>:
 801a390:	6893      	ldr	r3, [r2, #8]
 801a392:	3b01      	subs	r3, #1
 801a394:	2b00      	cmp	r3, #0
 801a396:	b410      	push	{r4}
 801a398:	6093      	str	r3, [r2, #8]
 801a39a:	da08      	bge.n	801a3ae <__sfputc_r+0x1e>
 801a39c:	6994      	ldr	r4, [r2, #24]
 801a39e:	42a3      	cmp	r3, r4
 801a3a0:	db01      	blt.n	801a3a6 <__sfputc_r+0x16>
 801a3a2:	290a      	cmp	r1, #10
 801a3a4:	d103      	bne.n	801a3ae <__sfputc_r+0x1e>
 801a3a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3aa:	f7ff bbf9 	b.w	8019ba0 <__swbuf_r>
 801a3ae:	6813      	ldr	r3, [r2, #0]
 801a3b0:	1c58      	adds	r0, r3, #1
 801a3b2:	6010      	str	r0, [r2, #0]
 801a3b4:	7019      	strb	r1, [r3, #0]
 801a3b6:	4608      	mov	r0, r1
 801a3b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3bc:	4770      	bx	lr

0801a3be <__sfputs_r>:
 801a3be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3c0:	4606      	mov	r6, r0
 801a3c2:	460f      	mov	r7, r1
 801a3c4:	4614      	mov	r4, r2
 801a3c6:	18d5      	adds	r5, r2, r3
 801a3c8:	42ac      	cmp	r4, r5
 801a3ca:	d101      	bne.n	801a3d0 <__sfputs_r+0x12>
 801a3cc:	2000      	movs	r0, #0
 801a3ce:	e007      	b.n	801a3e0 <__sfputs_r+0x22>
 801a3d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3d4:	463a      	mov	r2, r7
 801a3d6:	4630      	mov	r0, r6
 801a3d8:	f7ff ffda 	bl	801a390 <__sfputc_r>
 801a3dc:	1c43      	adds	r3, r0, #1
 801a3de:	d1f3      	bne.n	801a3c8 <__sfputs_r+0xa>
 801a3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a3e4 <_vfiprintf_r>:
 801a3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3e8:	460d      	mov	r5, r1
 801a3ea:	b09d      	sub	sp, #116	; 0x74
 801a3ec:	4614      	mov	r4, r2
 801a3ee:	4698      	mov	r8, r3
 801a3f0:	4606      	mov	r6, r0
 801a3f2:	b118      	cbz	r0, 801a3fc <_vfiprintf_r+0x18>
 801a3f4:	6983      	ldr	r3, [r0, #24]
 801a3f6:	b90b      	cbnz	r3, 801a3fc <_vfiprintf_r+0x18>
 801a3f8:	f7ff fdca 	bl	8019f90 <__sinit>
 801a3fc:	4b89      	ldr	r3, [pc, #548]	; (801a624 <_vfiprintf_r+0x240>)
 801a3fe:	429d      	cmp	r5, r3
 801a400:	d11b      	bne.n	801a43a <_vfiprintf_r+0x56>
 801a402:	6875      	ldr	r5, [r6, #4]
 801a404:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a406:	07d9      	lsls	r1, r3, #31
 801a408:	d405      	bmi.n	801a416 <_vfiprintf_r+0x32>
 801a40a:	89ab      	ldrh	r3, [r5, #12]
 801a40c:	059a      	lsls	r2, r3, #22
 801a40e:	d402      	bmi.n	801a416 <_vfiprintf_r+0x32>
 801a410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a412:	f7ff fe6d 	bl	801a0f0 <__retarget_lock_acquire_recursive>
 801a416:	89ab      	ldrh	r3, [r5, #12]
 801a418:	071b      	lsls	r3, r3, #28
 801a41a:	d501      	bpl.n	801a420 <_vfiprintf_r+0x3c>
 801a41c:	692b      	ldr	r3, [r5, #16]
 801a41e:	b9eb      	cbnz	r3, 801a45c <_vfiprintf_r+0x78>
 801a420:	4629      	mov	r1, r5
 801a422:	4630      	mov	r0, r6
 801a424:	f7ff fc0e 	bl	8019c44 <__swsetup_r>
 801a428:	b1c0      	cbz	r0, 801a45c <_vfiprintf_r+0x78>
 801a42a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a42c:	07dc      	lsls	r4, r3, #31
 801a42e:	d50e      	bpl.n	801a44e <_vfiprintf_r+0x6a>
 801a430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a434:	b01d      	add	sp, #116	; 0x74
 801a436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a43a:	4b7b      	ldr	r3, [pc, #492]	; (801a628 <_vfiprintf_r+0x244>)
 801a43c:	429d      	cmp	r5, r3
 801a43e:	d101      	bne.n	801a444 <_vfiprintf_r+0x60>
 801a440:	68b5      	ldr	r5, [r6, #8]
 801a442:	e7df      	b.n	801a404 <_vfiprintf_r+0x20>
 801a444:	4b79      	ldr	r3, [pc, #484]	; (801a62c <_vfiprintf_r+0x248>)
 801a446:	429d      	cmp	r5, r3
 801a448:	bf08      	it	eq
 801a44a:	68f5      	ldreq	r5, [r6, #12]
 801a44c:	e7da      	b.n	801a404 <_vfiprintf_r+0x20>
 801a44e:	89ab      	ldrh	r3, [r5, #12]
 801a450:	0598      	lsls	r0, r3, #22
 801a452:	d4ed      	bmi.n	801a430 <_vfiprintf_r+0x4c>
 801a454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a456:	f7ff fe4c 	bl	801a0f2 <__retarget_lock_release_recursive>
 801a45a:	e7e9      	b.n	801a430 <_vfiprintf_r+0x4c>
 801a45c:	2300      	movs	r3, #0
 801a45e:	9309      	str	r3, [sp, #36]	; 0x24
 801a460:	2320      	movs	r3, #32
 801a462:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a466:	f8cd 800c 	str.w	r8, [sp, #12]
 801a46a:	2330      	movs	r3, #48	; 0x30
 801a46c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a630 <_vfiprintf_r+0x24c>
 801a470:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a474:	f04f 0901 	mov.w	r9, #1
 801a478:	4623      	mov	r3, r4
 801a47a:	469a      	mov	sl, r3
 801a47c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a480:	b10a      	cbz	r2, 801a486 <_vfiprintf_r+0xa2>
 801a482:	2a25      	cmp	r2, #37	; 0x25
 801a484:	d1f9      	bne.n	801a47a <_vfiprintf_r+0x96>
 801a486:	ebba 0b04 	subs.w	fp, sl, r4
 801a48a:	d00b      	beq.n	801a4a4 <_vfiprintf_r+0xc0>
 801a48c:	465b      	mov	r3, fp
 801a48e:	4622      	mov	r2, r4
 801a490:	4629      	mov	r1, r5
 801a492:	4630      	mov	r0, r6
 801a494:	f7ff ff93 	bl	801a3be <__sfputs_r>
 801a498:	3001      	adds	r0, #1
 801a49a:	f000 80aa 	beq.w	801a5f2 <_vfiprintf_r+0x20e>
 801a49e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a4a0:	445a      	add	r2, fp
 801a4a2:	9209      	str	r2, [sp, #36]	; 0x24
 801a4a4:	f89a 3000 	ldrb.w	r3, [sl]
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	f000 80a2 	beq.w	801a5f2 <_vfiprintf_r+0x20e>
 801a4ae:	2300      	movs	r3, #0
 801a4b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a4b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a4b8:	f10a 0a01 	add.w	sl, sl, #1
 801a4bc:	9304      	str	r3, [sp, #16]
 801a4be:	9307      	str	r3, [sp, #28]
 801a4c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a4c4:	931a      	str	r3, [sp, #104]	; 0x68
 801a4c6:	4654      	mov	r4, sl
 801a4c8:	2205      	movs	r2, #5
 801a4ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a4ce:	4858      	ldr	r0, [pc, #352]	; (801a630 <_vfiprintf_r+0x24c>)
 801a4d0:	f7e5 fece 	bl	8000270 <memchr>
 801a4d4:	9a04      	ldr	r2, [sp, #16]
 801a4d6:	b9d8      	cbnz	r0, 801a510 <_vfiprintf_r+0x12c>
 801a4d8:	06d1      	lsls	r1, r2, #27
 801a4da:	bf44      	itt	mi
 801a4dc:	2320      	movmi	r3, #32
 801a4de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a4e2:	0713      	lsls	r3, r2, #28
 801a4e4:	bf44      	itt	mi
 801a4e6:	232b      	movmi	r3, #43	; 0x2b
 801a4e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a4ec:	f89a 3000 	ldrb.w	r3, [sl]
 801a4f0:	2b2a      	cmp	r3, #42	; 0x2a
 801a4f2:	d015      	beq.n	801a520 <_vfiprintf_r+0x13c>
 801a4f4:	9a07      	ldr	r2, [sp, #28]
 801a4f6:	4654      	mov	r4, sl
 801a4f8:	2000      	movs	r0, #0
 801a4fa:	f04f 0c0a 	mov.w	ip, #10
 801a4fe:	4621      	mov	r1, r4
 801a500:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a504:	3b30      	subs	r3, #48	; 0x30
 801a506:	2b09      	cmp	r3, #9
 801a508:	d94e      	bls.n	801a5a8 <_vfiprintf_r+0x1c4>
 801a50a:	b1b0      	cbz	r0, 801a53a <_vfiprintf_r+0x156>
 801a50c:	9207      	str	r2, [sp, #28]
 801a50e:	e014      	b.n	801a53a <_vfiprintf_r+0x156>
 801a510:	eba0 0308 	sub.w	r3, r0, r8
 801a514:	fa09 f303 	lsl.w	r3, r9, r3
 801a518:	4313      	orrs	r3, r2
 801a51a:	9304      	str	r3, [sp, #16]
 801a51c:	46a2      	mov	sl, r4
 801a51e:	e7d2      	b.n	801a4c6 <_vfiprintf_r+0xe2>
 801a520:	9b03      	ldr	r3, [sp, #12]
 801a522:	1d19      	adds	r1, r3, #4
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	9103      	str	r1, [sp, #12]
 801a528:	2b00      	cmp	r3, #0
 801a52a:	bfbb      	ittet	lt
 801a52c:	425b      	neglt	r3, r3
 801a52e:	f042 0202 	orrlt.w	r2, r2, #2
 801a532:	9307      	strge	r3, [sp, #28]
 801a534:	9307      	strlt	r3, [sp, #28]
 801a536:	bfb8      	it	lt
 801a538:	9204      	strlt	r2, [sp, #16]
 801a53a:	7823      	ldrb	r3, [r4, #0]
 801a53c:	2b2e      	cmp	r3, #46	; 0x2e
 801a53e:	d10c      	bne.n	801a55a <_vfiprintf_r+0x176>
 801a540:	7863      	ldrb	r3, [r4, #1]
 801a542:	2b2a      	cmp	r3, #42	; 0x2a
 801a544:	d135      	bne.n	801a5b2 <_vfiprintf_r+0x1ce>
 801a546:	9b03      	ldr	r3, [sp, #12]
 801a548:	1d1a      	adds	r2, r3, #4
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	9203      	str	r2, [sp, #12]
 801a54e:	2b00      	cmp	r3, #0
 801a550:	bfb8      	it	lt
 801a552:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a556:	3402      	adds	r4, #2
 801a558:	9305      	str	r3, [sp, #20]
 801a55a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a640 <_vfiprintf_r+0x25c>
 801a55e:	7821      	ldrb	r1, [r4, #0]
 801a560:	2203      	movs	r2, #3
 801a562:	4650      	mov	r0, sl
 801a564:	f7e5 fe84 	bl	8000270 <memchr>
 801a568:	b140      	cbz	r0, 801a57c <_vfiprintf_r+0x198>
 801a56a:	2340      	movs	r3, #64	; 0x40
 801a56c:	eba0 000a 	sub.w	r0, r0, sl
 801a570:	fa03 f000 	lsl.w	r0, r3, r0
 801a574:	9b04      	ldr	r3, [sp, #16]
 801a576:	4303      	orrs	r3, r0
 801a578:	3401      	adds	r4, #1
 801a57a:	9304      	str	r3, [sp, #16]
 801a57c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a580:	482c      	ldr	r0, [pc, #176]	; (801a634 <_vfiprintf_r+0x250>)
 801a582:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a586:	2206      	movs	r2, #6
 801a588:	f7e5 fe72 	bl	8000270 <memchr>
 801a58c:	2800      	cmp	r0, #0
 801a58e:	d03f      	beq.n	801a610 <_vfiprintf_r+0x22c>
 801a590:	4b29      	ldr	r3, [pc, #164]	; (801a638 <_vfiprintf_r+0x254>)
 801a592:	bb1b      	cbnz	r3, 801a5dc <_vfiprintf_r+0x1f8>
 801a594:	9b03      	ldr	r3, [sp, #12]
 801a596:	3307      	adds	r3, #7
 801a598:	f023 0307 	bic.w	r3, r3, #7
 801a59c:	3308      	adds	r3, #8
 801a59e:	9303      	str	r3, [sp, #12]
 801a5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5a2:	443b      	add	r3, r7
 801a5a4:	9309      	str	r3, [sp, #36]	; 0x24
 801a5a6:	e767      	b.n	801a478 <_vfiprintf_r+0x94>
 801a5a8:	fb0c 3202 	mla	r2, ip, r2, r3
 801a5ac:	460c      	mov	r4, r1
 801a5ae:	2001      	movs	r0, #1
 801a5b0:	e7a5      	b.n	801a4fe <_vfiprintf_r+0x11a>
 801a5b2:	2300      	movs	r3, #0
 801a5b4:	3401      	adds	r4, #1
 801a5b6:	9305      	str	r3, [sp, #20]
 801a5b8:	4619      	mov	r1, r3
 801a5ba:	f04f 0c0a 	mov.w	ip, #10
 801a5be:	4620      	mov	r0, r4
 801a5c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a5c4:	3a30      	subs	r2, #48	; 0x30
 801a5c6:	2a09      	cmp	r2, #9
 801a5c8:	d903      	bls.n	801a5d2 <_vfiprintf_r+0x1ee>
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d0c5      	beq.n	801a55a <_vfiprintf_r+0x176>
 801a5ce:	9105      	str	r1, [sp, #20]
 801a5d0:	e7c3      	b.n	801a55a <_vfiprintf_r+0x176>
 801a5d2:	fb0c 2101 	mla	r1, ip, r1, r2
 801a5d6:	4604      	mov	r4, r0
 801a5d8:	2301      	movs	r3, #1
 801a5da:	e7f0      	b.n	801a5be <_vfiprintf_r+0x1da>
 801a5dc:	ab03      	add	r3, sp, #12
 801a5de:	9300      	str	r3, [sp, #0]
 801a5e0:	462a      	mov	r2, r5
 801a5e2:	4b16      	ldr	r3, [pc, #88]	; (801a63c <_vfiprintf_r+0x258>)
 801a5e4:	a904      	add	r1, sp, #16
 801a5e6:	4630      	mov	r0, r6
 801a5e8:	f3af 8000 	nop.w
 801a5ec:	4607      	mov	r7, r0
 801a5ee:	1c78      	adds	r0, r7, #1
 801a5f0:	d1d6      	bne.n	801a5a0 <_vfiprintf_r+0x1bc>
 801a5f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a5f4:	07d9      	lsls	r1, r3, #31
 801a5f6:	d405      	bmi.n	801a604 <_vfiprintf_r+0x220>
 801a5f8:	89ab      	ldrh	r3, [r5, #12]
 801a5fa:	059a      	lsls	r2, r3, #22
 801a5fc:	d402      	bmi.n	801a604 <_vfiprintf_r+0x220>
 801a5fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a600:	f7ff fd77 	bl	801a0f2 <__retarget_lock_release_recursive>
 801a604:	89ab      	ldrh	r3, [r5, #12]
 801a606:	065b      	lsls	r3, r3, #25
 801a608:	f53f af12 	bmi.w	801a430 <_vfiprintf_r+0x4c>
 801a60c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a60e:	e711      	b.n	801a434 <_vfiprintf_r+0x50>
 801a610:	ab03      	add	r3, sp, #12
 801a612:	9300      	str	r3, [sp, #0]
 801a614:	462a      	mov	r2, r5
 801a616:	4b09      	ldr	r3, [pc, #36]	; (801a63c <_vfiprintf_r+0x258>)
 801a618:	a904      	add	r1, sp, #16
 801a61a:	4630      	mov	r0, r6
 801a61c:	f000 f880 	bl	801a720 <_printf_i>
 801a620:	e7e4      	b.n	801a5ec <_vfiprintf_r+0x208>
 801a622:	bf00      	nop
 801a624:	0801e528 	.word	0x0801e528
 801a628:	0801e548 	.word	0x0801e548
 801a62c:	0801e508 	.word	0x0801e508
 801a630:	0801e568 	.word	0x0801e568
 801a634:	0801e572 	.word	0x0801e572
 801a638:	00000000 	.word	0x00000000
 801a63c:	0801a3bf 	.word	0x0801a3bf
 801a640:	0801e56e 	.word	0x0801e56e

0801a644 <_printf_common>:
 801a644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a648:	4616      	mov	r6, r2
 801a64a:	4699      	mov	r9, r3
 801a64c:	688a      	ldr	r2, [r1, #8]
 801a64e:	690b      	ldr	r3, [r1, #16]
 801a650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a654:	4293      	cmp	r3, r2
 801a656:	bfb8      	it	lt
 801a658:	4613      	movlt	r3, r2
 801a65a:	6033      	str	r3, [r6, #0]
 801a65c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a660:	4607      	mov	r7, r0
 801a662:	460c      	mov	r4, r1
 801a664:	b10a      	cbz	r2, 801a66a <_printf_common+0x26>
 801a666:	3301      	adds	r3, #1
 801a668:	6033      	str	r3, [r6, #0]
 801a66a:	6823      	ldr	r3, [r4, #0]
 801a66c:	0699      	lsls	r1, r3, #26
 801a66e:	bf42      	ittt	mi
 801a670:	6833      	ldrmi	r3, [r6, #0]
 801a672:	3302      	addmi	r3, #2
 801a674:	6033      	strmi	r3, [r6, #0]
 801a676:	6825      	ldr	r5, [r4, #0]
 801a678:	f015 0506 	ands.w	r5, r5, #6
 801a67c:	d106      	bne.n	801a68c <_printf_common+0x48>
 801a67e:	f104 0a19 	add.w	sl, r4, #25
 801a682:	68e3      	ldr	r3, [r4, #12]
 801a684:	6832      	ldr	r2, [r6, #0]
 801a686:	1a9b      	subs	r3, r3, r2
 801a688:	42ab      	cmp	r3, r5
 801a68a:	dc26      	bgt.n	801a6da <_printf_common+0x96>
 801a68c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a690:	1e13      	subs	r3, r2, #0
 801a692:	6822      	ldr	r2, [r4, #0]
 801a694:	bf18      	it	ne
 801a696:	2301      	movne	r3, #1
 801a698:	0692      	lsls	r2, r2, #26
 801a69a:	d42b      	bmi.n	801a6f4 <_printf_common+0xb0>
 801a69c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a6a0:	4649      	mov	r1, r9
 801a6a2:	4638      	mov	r0, r7
 801a6a4:	47c0      	blx	r8
 801a6a6:	3001      	adds	r0, #1
 801a6a8:	d01e      	beq.n	801a6e8 <_printf_common+0xa4>
 801a6aa:	6823      	ldr	r3, [r4, #0]
 801a6ac:	68e5      	ldr	r5, [r4, #12]
 801a6ae:	6832      	ldr	r2, [r6, #0]
 801a6b0:	f003 0306 	and.w	r3, r3, #6
 801a6b4:	2b04      	cmp	r3, #4
 801a6b6:	bf08      	it	eq
 801a6b8:	1aad      	subeq	r5, r5, r2
 801a6ba:	68a3      	ldr	r3, [r4, #8]
 801a6bc:	6922      	ldr	r2, [r4, #16]
 801a6be:	bf0c      	ite	eq
 801a6c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a6c4:	2500      	movne	r5, #0
 801a6c6:	4293      	cmp	r3, r2
 801a6c8:	bfc4      	itt	gt
 801a6ca:	1a9b      	subgt	r3, r3, r2
 801a6cc:	18ed      	addgt	r5, r5, r3
 801a6ce:	2600      	movs	r6, #0
 801a6d0:	341a      	adds	r4, #26
 801a6d2:	42b5      	cmp	r5, r6
 801a6d4:	d11a      	bne.n	801a70c <_printf_common+0xc8>
 801a6d6:	2000      	movs	r0, #0
 801a6d8:	e008      	b.n	801a6ec <_printf_common+0xa8>
 801a6da:	2301      	movs	r3, #1
 801a6dc:	4652      	mov	r2, sl
 801a6de:	4649      	mov	r1, r9
 801a6e0:	4638      	mov	r0, r7
 801a6e2:	47c0      	blx	r8
 801a6e4:	3001      	adds	r0, #1
 801a6e6:	d103      	bne.n	801a6f0 <_printf_common+0xac>
 801a6e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6f0:	3501      	adds	r5, #1
 801a6f2:	e7c6      	b.n	801a682 <_printf_common+0x3e>
 801a6f4:	18e1      	adds	r1, r4, r3
 801a6f6:	1c5a      	adds	r2, r3, #1
 801a6f8:	2030      	movs	r0, #48	; 0x30
 801a6fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a6fe:	4422      	add	r2, r4
 801a700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a704:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a708:	3302      	adds	r3, #2
 801a70a:	e7c7      	b.n	801a69c <_printf_common+0x58>
 801a70c:	2301      	movs	r3, #1
 801a70e:	4622      	mov	r2, r4
 801a710:	4649      	mov	r1, r9
 801a712:	4638      	mov	r0, r7
 801a714:	47c0      	blx	r8
 801a716:	3001      	adds	r0, #1
 801a718:	d0e6      	beq.n	801a6e8 <_printf_common+0xa4>
 801a71a:	3601      	adds	r6, #1
 801a71c:	e7d9      	b.n	801a6d2 <_printf_common+0x8e>
	...

0801a720 <_printf_i>:
 801a720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a724:	7e0f      	ldrb	r7, [r1, #24]
 801a726:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a728:	2f78      	cmp	r7, #120	; 0x78
 801a72a:	4691      	mov	r9, r2
 801a72c:	4680      	mov	r8, r0
 801a72e:	460c      	mov	r4, r1
 801a730:	469a      	mov	sl, r3
 801a732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a736:	d807      	bhi.n	801a748 <_printf_i+0x28>
 801a738:	2f62      	cmp	r7, #98	; 0x62
 801a73a:	d80a      	bhi.n	801a752 <_printf_i+0x32>
 801a73c:	2f00      	cmp	r7, #0
 801a73e:	f000 80d8 	beq.w	801a8f2 <_printf_i+0x1d2>
 801a742:	2f58      	cmp	r7, #88	; 0x58
 801a744:	f000 80a3 	beq.w	801a88e <_printf_i+0x16e>
 801a748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a74c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a750:	e03a      	b.n	801a7c8 <_printf_i+0xa8>
 801a752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a756:	2b15      	cmp	r3, #21
 801a758:	d8f6      	bhi.n	801a748 <_printf_i+0x28>
 801a75a:	a101      	add	r1, pc, #4	; (adr r1, 801a760 <_printf_i+0x40>)
 801a75c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a760:	0801a7b9 	.word	0x0801a7b9
 801a764:	0801a7cd 	.word	0x0801a7cd
 801a768:	0801a749 	.word	0x0801a749
 801a76c:	0801a749 	.word	0x0801a749
 801a770:	0801a749 	.word	0x0801a749
 801a774:	0801a749 	.word	0x0801a749
 801a778:	0801a7cd 	.word	0x0801a7cd
 801a77c:	0801a749 	.word	0x0801a749
 801a780:	0801a749 	.word	0x0801a749
 801a784:	0801a749 	.word	0x0801a749
 801a788:	0801a749 	.word	0x0801a749
 801a78c:	0801a8d9 	.word	0x0801a8d9
 801a790:	0801a7fd 	.word	0x0801a7fd
 801a794:	0801a8bb 	.word	0x0801a8bb
 801a798:	0801a749 	.word	0x0801a749
 801a79c:	0801a749 	.word	0x0801a749
 801a7a0:	0801a8fb 	.word	0x0801a8fb
 801a7a4:	0801a749 	.word	0x0801a749
 801a7a8:	0801a7fd 	.word	0x0801a7fd
 801a7ac:	0801a749 	.word	0x0801a749
 801a7b0:	0801a749 	.word	0x0801a749
 801a7b4:	0801a8c3 	.word	0x0801a8c3
 801a7b8:	682b      	ldr	r3, [r5, #0]
 801a7ba:	1d1a      	adds	r2, r3, #4
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	602a      	str	r2, [r5, #0]
 801a7c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a7c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a7c8:	2301      	movs	r3, #1
 801a7ca:	e0a3      	b.n	801a914 <_printf_i+0x1f4>
 801a7cc:	6820      	ldr	r0, [r4, #0]
 801a7ce:	6829      	ldr	r1, [r5, #0]
 801a7d0:	0606      	lsls	r6, r0, #24
 801a7d2:	f101 0304 	add.w	r3, r1, #4
 801a7d6:	d50a      	bpl.n	801a7ee <_printf_i+0xce>
 801a7d8:	680e      	ldr	r6, [r1, #0]
 801a7da:	602b      	str	r3, [r5, #0]
 801a7dc:	2e00      	cmp	r6, #0
 801a7de:	da03      	bge.n	801a7e8 <_printf_i+0xc8>
 801a7e0:	232d      	movs	r3, #45	; 0x2d
 801a7e2:	4276      	negs	r6, r6
 801a7e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a7e8:	485e      	ldr	r0, [pc, #376]	; (801a964 <_printf_i+0x244>)
 801a7ea:	230a      	movs	r3, #10
 801a7ec:	e019      	b.n	801a822 <_printf_i+0x102>
 801a7ee:	680e      	ldr	r6, [r1, #0]
 801a7f0:	602b      	str	r3, [r5, #0]
 801a7f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a7f6:	bf18      	it	ne
 801a7f8:	b236      	sxthne	r6, r6
 801a7fa:	e7ef      	b.n	801a7dc <_printf_i+0xbc>
 801a7fc:	682b      	ldr	r3, [r5, #0]
 801a7fe:	6820      	ldr	r0, [r4, #0]
 801a800:	1d19      	adds	r1, r3, #4
 801a802:	6029      	str	r1, [r5, #0]
 801a804:	0601      	lsls	r1, r0, #24
 801a806:	d501      	bpl.n	801a80c <_printf_i+0xec>
 801a808:	681e      	ldr	r6, [r3, #0]
 801a80a:	e002      	b.n	801a812 <_printf_i+0xf2>
 801a80c:	0646      	lsls	r6, r0, #25
 801a80e:	d5fb      	bpl.n	801a808 <_printf_i+0xe8>
 801a810:	881e      	ldrh	r6, [r3, #0]
 801a812:	4854      	ldr	r0, [pc, #336]	; (801a964 <_printf_i+0x244>)
 801a814:	2f6f      	cmp	r7, #111	; 0x6f
 801a816:	bf0c      	ite	eq
 801a818:	2308      	moveq	r3, #8
 801a81a:	230a      	movne	r3, #10
 801a81c:	2100      	movs	r1, #0
 801a81e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a822:	6865      	ldr	r5, [r4, #4]
 801a824:	60a5      	str	r5, [r4, #8]
 801a826:	2d00      	cmp	r5, #0
 801a828:	bfa2      	ittt	ge
 801a82a:	6821      	ldrge	r1, [r4, #0]
 801a82c:	f021 0104 	bicge.w	r1, r1, #4
 801a830:	6021      	strge	r1, [r4, #0]
 801a832:	b90e      	cbnz	r6, 801a838 <_printf_i+0x118>
 801a834:	2d00      	cmp	r5, #0
 801a836:	d04d      	beq.n	801a8d4 <_printf_i+0x1b4>
 801a838:	4615      	mov	r5, r2
 801a83a:	fbb6 f1f3 	udiv	r1, r6, r3
 801a83e:	fb03 6711 	mls	r7, r3, r1, r6
 801a842:	5dc7      	ldrb	r7, [r0, r7]
 801a844:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a848:	4637      	mov	r7, r6
 801a84a:	42bb      	cmp	r3, r7
 801a84c:	460e      	mov	r6, r1
 801a84e:	d9f4      	bls.n	801a83a <_printf_i+0x11a>
 801a850:	2b08      	cmp	r3, #8
 801a852:	d10b      	bne.n	801a86c <_printf_i+0x14c>
 801a854:	6823      	ldr	r3, [r4, #0]
 801a856:	07de      	lsls	r6, r3, #31
 801a858:	d508      	bpl.n	801a86c <_printf_i+0x14c>
 801a85a:	6923      	ldr	r3, [r4, #16]
 801a85c:	6861      	ldr	r1, [r4, #4]
 801a85e:	4299      	cmp	r1, r3
 801a860:	bfde      	ittt	le
 801a862:	2330      	movle	r3, #48	; 0x30
 801a864:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a868:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801a86c:	1b52      	subs	r2, r2, r5
 801a86e:	6122      	str	r2, [r4, #16]
 801a870:	f8cd a000 	str.w	sl, [sp]
 801a874:	464b      	mov	r3, r9
 801a876:	aa03      	add	r2, sp, #12
 801a878:	4621      	mov	r1, r4
 801a87a:	4640      	mov	r0, r8
 801a87c:	f7ff fee2 	bl	801a644 <_printf_common>
 801a880:	3001      	adds	r0, #1
 801a882:	d14c      	bne.n	801a91e <_printf_i+0x1fe>
 801a884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a888:	b004      	add	sp, #16
 801a88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a88e:	4835      	ldr	r0, [pc, #212]	; (801a964 <_printf_i+0x244>)
 801a890:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a894:	6829      	ldr	r1, [r5, #0]
 801a896:	6823      	ldr	r3, [r4, #0]
 801a898:	f851 6b04 	ldr.w	r6, [r1], #4
 801a89c:	6029      	str	r1, [r5, #0]
 801a89e:	061d      	lsls	r5, r3, #24
 801a8a0:	d514      	bpl.n	801a8cc <_printf_i+0x1ac>
 801a8a2:	07df      	lsls	r7, r3, #31
 801a8a4:	bf44      	itt	mi
 801a8a6:	f043 0320 	orrmi.w	r3, r3, #32
 801a8aa:	6023      	strmi	r3, [r4, #0]
 801a8ac:	b91e      	cbnz	r6, 801a8b6 <_printf_i+0x196>
 801a8ae:	6823      	ldr	r3, [r4, #0]
 801a8b0:	f023 0320 	bic.w	r3, r3, #32
 801a8b4:	6023      	str	r3, [r4, #0]
 801a8b6:	2310      	movs	r3, #16
 801a8b8:	e7b0      	b.n	801a81c <_printf_i+0xfc>
 801a8ba:	6823      	ldr	r3, [r4, #0]
 801a8bc:	f043 0320 	orr.w	r3, r3, #32
 801a8c0:	6023      	str	r3, [r4, #0]
 801a8c2:	2378      	movs	r3, #120	; 0x78
 801a8c4:	4828      	ldr	r0, [pc, #160]	; (801a968 <_printf_i+0x248>)
 801a8c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a8ca:	e7e3      	b.n	801a894 <_printf_i+0x174>
 801a8cc:	0659      	lsls	r1, r3, #25
 801a8ce:	bf48      	it	mi
 801a8d0:	b2b6      	uxthmi	r6, r6
 801a8d2:	e7e6      	b.n	801a8a2 <_printf_i+0x182>
 801a8d4:	4615      	mov	r5, r2
 801a8d6:	e7bb      	b.n	801a850 <_printf_i+0x130>
 801a8d8:	682b      	ldr	r3, [r5, #0]
 801a8da:	6826      	ldr	r6, [r4, #0]
 801a8dc:	6961      	ldr	r1, [r4, #20]
 801a8de:	1d18      	adds	r0, r3, #4
 801a8e0:	6028      	str	r0, [r5, #0]
 801a8e2:	0635      	lsls	r5, r6, #24
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	d501      	bpl.n	801a8ec <_printf_i+0x1cc>
 801a8e8:	6019      	str	r1, [r3, #0]
 801a8ea:	e002      	b.n	801a8f2 <_printf_i+0x1d2>
 801a8ec:	0670      	lsls	r0, r6, #25
 801a8ee:	d5fb      	bpl.n	801a8e8 <_printf_i+0x1c8>
 801a8f0:	8019      	strh	r1, [r3, #0]
 801a8f2:	2300      	movs	r3, #0
 801a8f4:	6123      	str	r3, [r4, #16]
 801a8f6:	4615      	mov	r5, r2
 801a8f8:	e7ba      	b.n	801a870 <_printf_i+0x150>
 801a8fa:	682b      	ldr	r3, [r5, #0]
 801a8fc:	1d1a      	adds	r2, r3, #4
 801a8fe:	602a      	str	r2, [r5, #0]
 801a900:	681d      	ldr	r5, [r3, #0]
 801a902:	6862      	ldr	r2, [r4, #4]
 801a904:	2100      	movs	r1, #0
 801a906:	4628      	mov	r0, r5
 801a908:	f7e5 fcb2 	bl	8000270 <memchr>
 801a90c:	b108      	cbz	r0, 801a912 <_printf_i+0x1f2>
 801a90e:	1b40      	subs	r0, r0, r5
 801a910:	6060      	str	r0, [r4, #4]
 801a912:	6863      	ldr	r3, [r4, #4]
 801a914:	6123      	str	r3, [r4, #16]
 801a916:	2300      	movs	r3, #0
 801a918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a91c:	e7a8      	b.n	801a870 <_printf_i+0x150>
 801a91e:	6923      	ldr	r3, [r4, #16]
 801a920:	462a      	mov	r2, r5
 801a922:	4649      	mov	r1, r9
 801a924:	4640      	mov	r0, r8
 801a926:	47d0      	blx	sl
 801a928:	3001      	adds	r0, #1
 801a92a:	d0ab      	beq.n	801a884 <_printf_i+0x164>
 801a92c:	6823      	ldr	r3, [r4, #0]
 801a92e:	079b      	lsls	r3, r3, #30
 801a930:	d413      	bmi.n	801a95a <_printf_i+0x23a>
 801a932:	68e0      	ldr	r0, [r4, #12]
 801a934:	9b03      	ldr	r3, [sp, #12]
 801a936:	4298      	cmp	r0, r3
 801a938:	bfb8      	it	lt
 801a93a:	4618      	movlt	r0, r3
 801a93c:	e7a4      	b.n	801a888 <_printf_i+0x168>
 801a93e:	2301      	movs	r3, #1
 801a940:	4632      	mov	r2, r6
 801a942:	4649      	mov	r1, r9
 801a944:	4640      	mov	r0, r8
 801a946:	47d0      	blx	sl
 801a948:	3001      	adds	r0, #1
 801a94a:	d09b      	beq.n	801a884 <_printf_i+0x164>
 801a94c:	3501      	adds	r5, #1
 801a94e:	68e3      	ldr	r3, [r4, #12]
 801a950:	9903      	ldr	r1, [sp, #12]
 801a952:	1a5b      	subs	r3, r3, r1
 801a954:	42ab      	cmp	r3, r5
 801a956:	dcf2      	bgt.n	801a93e <_printf_i+0x21e>
 801a958:	e7eb      	b.n	801a932 <_printf_i+0x212>
 801a95a:	2500      	movs	r5, #0
 801a95c:	f104 0619 	add.w	r6, r4, #25
 801a960:	e7f5      	b.n	801a94e <_printf_i+0x22e>
 801a962:	bf00      	nop
 801a964:	0801e579 	.word	0x0801e579
 801a968:	0801e58a 	.word	0x0801e58a

0801a96c <_sbrk_r>:
 801a96c:	b538      	push	{r3, r4, r5, lr}
 801a96e:	4d06      	ldr	r5, [pc, #24]	; (801a988 <_sbrk_r+0x1c>)
 801a970:	2300      	movs	r3, #0
 801a972:	4604      	mov	r4, r0
 801a974:	4608      	mov	r0, r1
 801a976:	602b      	str	r3, [r5, #0]
 801a978:	f7e6 fd2c 	bl	80013d4 <_sbrk>
 801a97c:	1c43      	adds	r3, r0, #1
 801a97e:	d102      	bne.n	801a986 <_sbrk_r+0x1a>
 801a980:	682b      	ldr	r3, [r5, #0]
 801a982:	b103      	cbz	r3, 801a986 <_sbrk_r+0x1a>
 801a984:	6023      	str	r3, [r4, #0]
 801a986:	bd38      	pop	{r3, r4, r5, pc}
 801a988:	20011408 	.word	0x20011408

0801a98c <__sread>:
 801a98c:	b510      	push	{r4, lr}
 801a98e:	460c      	mov	r4, r1
 801a990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a994:	f000 f8a8 	bl	801aae8 <_read_r>
 801a998:	2800      	cmp	r0, #0
 801a99a:	bfab      	itete	ge
 801a99c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a99e:	89a3      	ldrhlt	r3, [r4, #12]
 801a9a0:	181b      	addge	r3, r3, r0
 801a9a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a9a6:	bfac      	ite	ge
 801a9a8:	6563      	strge	r3, [r4, #84]	; 0x54
 801a9aa:	81a3      	strhlt	r3, [r4, #12]
 801a9ac:	bd10      	pop	{r4, pc}

0801a9ae <__swrite>:
 801a9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9b2:	461f      	mov	r7, r3
 801a9b4:	898b      	ldrh	r3, [r1, #12]
 801a9b6:	05db      	lsls	r3, r3, #23
 801a9b8:	4605      	mov	r5, r0
 801a9ba:	460c      	mov	r4, r1
 801a9bc:	4616      	mov	r6, r2
 801a9be:	d505      	bpl.n	801a9cc <__swrite+0x1e>
 801a9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a9c4:	2302      	movs	r3, #2
 801a9c6:	2200      	movs	r2, #0
 801a9c8:	f000 f870 	bl	801aaac <_lseek_r>
 801a9cc:	89a3      	ldrh	r3, [r4, #12]
 801a9ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a9d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a9d6:	81a3      	strh	r3, [r4, #12]
 801a9d8:	4632      	mov	r2, r6
 801a9da:	463b      	mov	r3, r7
 801a9dc:	4628      	mov	r0, r5
 801a9de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a9e2:	f000 b817 	b.w	801aa14 <_write_r>

0801a9e6 <__sseek>:
 801a9e6:	b510      	push	{r4, lr}
 801a9e8:	460c      	mov	r4, r1
 801a9ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a9ee:	f000 f85d 	bl	801aaac <_lseek_r>
 801a9f2:	1c43      	adds	r3, r0, #1
 801a9f4:	89a3      	ldrh	r3, [r4, #12]
 801a9f6:	bf15      	itete	ne
 801a9f8:	6560      	strne	r0, [r4, #84]	; 0x54
 801a9fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a9fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801aa02:	81a3      	strheq	r3, [r4, #12]
 801aa04:	bf18      	it	ne
 801aa06:	81a3      	strhne	r3, [r4, #12]
 801aa08:	bd10      	pop	{r4, pc}

0801aa0a <__sclose>:
 801aa0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa0e:	f000 b81b 	b.w	801aa48 <_close_r>
	...

0801aa14 <_write_r>:
 801aa14:	b538      	push	{r3, r4, r5, lr}
 801aa16:	4d07      	ldr	r5, [pc, #28]	; (801aa34 <_write_r+0x20>)
 801aa18:	4604      	mov	r4, r0
 801aa1a:	4608      	mov	r0, r1
 801aa1c:	4611      	mov	r1, r2
 801aa1e:	2200      	movs	r2, #0
 801aa20:	602a      	str	r2, [r5, #0]
 801aa22:	461a      	mov	r2, r3
 801aa24:	f7e6 fc85 	bl	8001332 <_write>
 801aa28:	1c43      	adds	r3, r0, #1
 801aa2a:	d102      	bne.n	801aa32 <_write_r+0x1e>
 801aa2c:	682b      	ldr	r3, [r5, #0]
 801aa2e:	b103      	cbz	r3, 801aa32 <_write_r+0x1e>
 801aa30:	6023      	str	r3, [r4, #0]
 801aa32:	bd38      	pop	{r3, r4, r5, pc}
 801aa34:	20011408 	.word	0x20011408

0801aa38 <abort>:
 801aa38:	b508      	push	{r3, lr}
 801aa3a:	2006      	movs	r0, #6
 801aa3c:	f000 f88e 	bl	801ab5c <raise>
 801aa40:	2001      	movs	r0, #1
 801aa42:	f7e6 fc4f 	bl	80012e4 <_exit>
	...

0801aa48 <_close_r>:
 801aa48:	b538      	push	{r3, r4, r5, lr}
 801aa4a:	4d06      	ldr	r5, [pc, #24]	; (801aa64 <_close_r+0x1c>)
 801aa4c:	2300      	movs	r3, #0
 801aa4e:	4604      	mov	r4, r0
 801aa50:	4608      	mov	r0, r1
 801aa52:	602b      	str	r3, [r5, #0]
 801aa54:	f7e6 fc89 	bl	800136a <_close>
 801aa58:	1c43      	adds	r3, r0, #1
 801aa5a:	d102      	bne.n	801aa62 <_close_r+0x1a>
 801aa5c:	682b      	ldr	r3, [r5, #0]
 801aa5e:	b103      	cbz	r3, 801aa62 <_close_r+0x1a>
 801aa60:	6023      	str	r3, [r4, #0]
 801aa62:	bd38      	pop	{r3, r4, r5, pc}
 801aa64:	20011408 	.word	0x20011408

0801aa68 <_fstat_r>:
 801aa68:	b538      	push	{r3, r4, r5, lr}
 801aa6a:	4d07      	ldr	r5, [pc, #28]	; (801aa88 <_fstat_r+0x20>)
 801aa6c:	2300      	movs	r3, #0
 801aa6e:	4604      	mov	r4, r0
 801aa70:	4608      	mov	r0, r1
 801aa72:	4611      	mov	r1, r2
 801aa74:	602b      	str	r3, [r5, #0]
 801aa76:	f7e6 fc84 	bl	8001382 <_fstat>
 801aa7a:	1c43      	adds	r3, r0, #1
 801aa7c:	d102      	bne.n	801aa84 <_fstat_r+0x1c>
 801aa7e:	682b      	ldr	r3, [r5, #0]
 801aa80:	b103      	cbz	r3, 801aa84 <_fstat_r+0x1c>
 801aa82:	6023      	str	r3, [r4, #0]
 801aa84:	bd38      	pop	{r3, r4, r5, pc}
 801aa86:	bf00      	nop
 801aa88:	20011408 	.word	0x20011408

0801aa8c <_isatty_r>:
 801aa8c:	b538      	push	{r3, r4, r5, lr}
 801aa8e:	4d06      	ldr	r5, [pc, #24]	; (801aaa8 <_isatty_r+0x1c>)
 801aa90:	2300      	movs	r3, #0
 801aa92:	4604      	mov	r4, r0
 801aa94:	4608      	mov	r0, r1
 801aa96:	602b      	str	r3, [r5, #0]
 801aa98:	f7e6 fc83 	bl	80013a2 <_isatty>
 801aa9c:	1c43      	adds	r3, r0, #1
 801aa9e:	d102      	bne.n	801aaa6 <_isatty_r+0x1a>
 801aaa0:	682b      	ldr	r3, [r5, #0]
 801aaa2:	b103      	cbz	r3, 801aaa6 <_isatty_r+0x1a>
 801aaa4:	6023      	str	r3, [r4, #0]
 801aaa6:	bd38      	pop	{r3, r4, r5, pc}
 801aaa8:	20011408 	.word	0x20011408

0801aaac <_lseek_r>:
 801aaac:	b538      	push	{r3, r4, r5, lr}
 801aaae:	4d07      	ldr	r5, [pc, #28]	; (801aacc <_lseek_r+0x20>)
 801aab0:	4604      	mov	r4, r0
 801aab2:	4608      	mov	r0, r1
 801aab4:	4611      	mov	r1, r2
 801aab6:	2200      	movs	r2, #0
 801aab8:	602a      	str	r2, [r5, #0]
 801aaba:	461a      	mov	r2, r3
 801aabc:	f7e6 fc7c 	bl	80013b8 <_lseek>
 801aac0:	1c43      	adds	r3, r0, #1
 801aac2:	d102      	bne.n	801aaca <_lseek_r+0x1e>
 801aac4:	682b      	ldr	r3, [r5, #0]
 801aac6:	b103      	cbz	r3, 801aaca <_lseek_r+0x1e>
 801aac8:	6023      	str	r3, [r4, #0]
 801aaca:	bd38      	pop	{r3, r4, r5, pc}
 801aacc:	20011408 	.word	0x20011408

0801aad0 <__malloc_lock>:
 801aad0:	4801      	ldr	r0, [pc, #4]	; (801aad8 <__malloc_lock+0x8>)
 801aad2:	f7ff bb0d 	b.w	801a0f0 <__retarget_lock_acquire_recursive>
 801aad6:	bf00      	nop
 801aad8:	2001140c 	.word	0x2001140c

0801aadc <__malloc_unlock>:
 801aadc:	4801      	ldr	r0, [pc, #4]	; (801aae4 <__malloc_unlock+0x8>)
 801aade:	f7ff bb08 	b.w	801a0f2 <__retarget_lock_release_recursive>
 801aae2:	bf00      	nop
 801aae4:	2001140c 	.word	0x2001140c

0801aae8 <_read_r>:
 801aae8:	b538      	push	{r3, r4, r5, lr}
 801aaea:	4d07      	ldr	r5, [pc, #28]	; (801ab08 <_read_r+0x20>)
 801aaec:	4604      	mov	r4, r0
 801aaee:	4608      	mov	r0, r1
 801aaf0:	4611      	mov	r1, r2
 801aaf2:	2200      	movs	r2, #0
 801aaf4:	602a      	str	r2, [r5, #0]
 801aaf6:	461a      	mov	r2, r3
 801aaf8:	f7e6 fbfe 	bl	80012f8 <_read>
 801aafc:	1c43      	adds	r3, r0, #1
 801aafe:	d102      	bne.n	801ab06 <_read_r+0x1e>
 801ab00:	682b      	ldr	r3, [r5, #0]
 801ab02:	b103      	cbz	r3, 801ab06 <_read_r+0x1e>
 801ab04:	6023      	str	r3, [r4, #0]
 801ab06:	bd38      	pop	{r3, r4, r5, pc}
 801ab08:	20011408 	.word	0x20011408

0801ab0c <_raise_r>:
 801ab0c:	291f      	cmp	r1, #31
 801ab0e:	b538      	push	{r3, r4, r5, lr}
 801ab10:	4604      	mov	r4, r0
 801ab12:	460d      	mov	r5, r1
 801ab14:	d904      	bls.n	801ab20 <_raise_r+0x14>
 801ab16:	2316      	movs	r3, #22
 801ab18:	6003      	str	r3, [r0, #0]
 801ab1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ab1e:	bd38      	pop	{r3, r4, r5, pc}
 801ab20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ab22:	b112      	cbz	r2, 801ab2a <_raise_r+0x1e>
 801ab24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ab28:	b94b      	cbnz	r3, 801ab3e <_raise_r+0x32>
 801ab2a:	4620      	mov	r0, r4
 801ab2c:	f000 f830 	bl	801ab90 <_getpid_r>
 801ab30:	462a      	mov	r2, r5
 801ab32:	4601      	mov	r1, r0
 801ab34:	4620      	mov	r0, r4
 801ab36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ab3a:	f000 b817 	b.w	801ab6c <_kill_r>
 801ab3e:	2b01      	cmp	r3, #1
 801ab40:	d00a      	beq.n	801ab58 <_raise_r+0x4c>
 801ab42:	1c59      	adds	r1, r3, #1
 801ab44:	d103      	bne.n	801ab4e <_raise_r+0x42>
 801ab46:	2316      	movs	r3, #22
 801ab48:	6003      	str	r3, [r0, #0]
 801ab4a:	2001      	movs	r0, #1
 801ab4c:	e7e7      	b.n	801ab1e <_raise_r+0x12>
 801ab4e:	2400      	movs	r4, #0
 801ab50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ab54:	4628      	mov	r0, r5
 801ab56:	4798      	blx	r3
 801ab58:	2000      	movs	r0, #0
 801ab5a:	e7e0      	b.n	801ab1e <_raise_r+0x12>

0801ab5c <raise>:
 801ab5c:	4b02      	ldr	r3, [pc, #8]	; (801ab68 <raise+0xc>)
 801ab5e:	4601      	mov	r1, r0
 801ab60:	6818      	ldr	r0, [r3, #0]
 801ab62:	f7ff bfd3 	b.w	801ab0c <_raise_r>
 801ab66:	bf00      	nop
 801ab68:	20000034 	.word	0x20000034

0801ab6c <_kill_r>:
 801ab6c:	b538      	push	{r3, r4, r5, lr}
 801ab6e:	4d07      	ldr	r5, [pc, #28]	; (801ab8c <_kill_r+0x20>)
 801ab70:	2300      	movs	r3, #0
 801ab72:	4604      	mov	r4, r0
 801ab74:	4608      	mov	r0, r1
 801ab76:	4611      	mov	r1, r2
 801ab78:	602b      	str	r3, [r5, #0]
 801ab7a:	f7e6 fba1 	bl	80012c0 <_kill>
 801ab7e:	1c43      	adds	r3, r0, #1
 801ab80:	d102      	bne.n	801ab88 <_kill_r+0x1c>
 801ab82:	682b      	ldr	r3, [r5, #0]
 801ab84:	b103      	cbz	r3, 801ab88 <_kill_r+0x1c>
 801ab86:	6023      	str	r3, [r4, #0]
 801ab88:	bd38      	pop	{r3, r4, r5, pc}
 801ab8a:	bf00      	nop
 801ab8c:	20011408 	.word	0x20011408

0801ab90 <_getpid_r>:
 801ab90:	f7e6 bb8e 	b.w	80012b0 <_getpid>

0801ab94 <_init>:
 801ab94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab96:	bf00      	nop
 801ab98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab9a:	bc08      	pop	{r3}
 801ab9c:	469e      	mov	lr, r3
 801ab9e:	4770      	bx	lr

0801aba0 <_fini>:
 801aba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aba2:	bf00      	nop
 801aba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aba6:	bc08      	pop	{r3}
 801aba8:	469e      	mov	lr, r3
 801abaa:	4770      	bx	lr
