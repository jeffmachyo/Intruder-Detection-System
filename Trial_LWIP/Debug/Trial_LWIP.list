
Trial_LWIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e5fc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003cdc  0801e7fc  0801e7fc  0002e7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080224d8  080224d8  000401d4  2**0
                  CONTENTS
  4 .ARM          00000008  080224d8  080224d8  000324d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080224e0  080224e0  000401d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080224e0  080224e0  000324e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080224e4  080224e4  000324e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080224e8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  0802257c  00040094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  0802261c  00040134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001135c  200001d4  080226bc  000401d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20011530  080226bc  00041530  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000401d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004328d  00000000  00000000  00040202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a507  00000000  00000000  0008348f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000030d8  00000000  00000000  0008d998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002ef8  00000000  00000000  00090a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003e789  00000000  00000000  00093968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004a52d  00000000  00000000  000d20f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012cbbd  00000000  00000000  0011c61e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002491db  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d360  00000000  00000000  0024922c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	0801e7e4 	.word	0x0801e7e4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	0801e7e4 	.word	0x0801e7e4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4a07      	ldr	r2, [pc, #28]	; (8000640 <vApplicationGetIdleTaskMemory+0x2c>)
 8000624:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <vApplicationGetIdleTaskMemory+0x30>)
 800062a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000632:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	20000ec0 	.word	0x20000ec0
 8000644:	20000f14 	.word	0x20000f14

08000648 <MqttClientSubTask>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void MqttClientSubTask(void const *argument)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//waiting for valid ip address
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MqttClientSubTask+0x64>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d007      	beq.n	8000668 <MqttClientSubTask+0x20>
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MqttClientSubTask+0x64>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d003      	beq.n	8000668 <MqttClientSubTask+0x20>
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MqttClientSubTask+0x64>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d104      	bne.n	8000672 <MqttClientSubTask+0x2a>
		{
			osDelay(1000);
 8000668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066c:	f007 fc16 	bl	8007e9c <osDelay>
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 8000670:	e7ee      	b.n	8000650 <MqttClientSubTask+0x8>
			continue;
		}
		else
		{
			printf("DHCP/Static IP O.K.\n");
 8000672:	480f      	ldr	r0, [pc, #60]	; (80006b0 <MqttClientSubTask+0x68>)
 8000674:	f01d f85a 	bl	801d72c <puts>
			break;
 8000678:	bf00      	nop
//	MqttConnectBroker();
//				osDelay(1000);

	while(1)
	{
		if(!mqttClient.isconnected)
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MqttClientSubTask+0x6c>)
 800067c:	6a1b      	ldr	r3, [r3, #32]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d109      	bne.n	8000696 <MqttClientSubTask+0x4e>
		{
			//try to connect to the broker
			MQTTDisconnect(&mqttClient);
 8000682:	480c      	ldr	r0, [pc, #48]	; (80006b4 <MqttClientSubTask+0x6c>)
 8000684:	f018 fd7c 	bl	8019180 <MQTTDisconnect>
			MqttConnectBroker();
 8000688:	f000 f85a 	bl	8000740 <MqttConnectBroker>
//			osDelay(1000);
			vTaskDelay(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000690:	f009 f8e2 	bl	8009858 <vTaskDelay>
 8000694:	e7f1      	b.n	800067a <MqttClientSubTask+0x32>
		}
		else
		{
//			EngagePin1();
			MQTTYield(&mqttClient, 1000); //handle timer
 8000696:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <MqttClientSubTask+0x6c>)
 800069c:	f018 faaa 	bl	8018bf4 <MQTTYield>
//			osDelay(100);
			vTaskDelay(1000);
 80006a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a4:	f009 f8d8 	bl	8009858 <vTaskDelay>
		if(!mqttClient.isconnected)
 80006a8:	e7e7      	b.n	800067a <MqttClientSubTask+0x32>
 80006aa:	bf00      	nop
 80006ac:	20001a38 	.word	0x20001a38
 80006b0:	0801e7fc 	.word	0x0801e7fc
 80006b4:	20000210 	.word	0x20000210

080006b8 <MqttClientPubTask>:
		}
	}
}

void MqttClientPubTask(void const *argument)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b0a2      	sub	sp, #136	; 0x88
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	uint8_t obuffer[pb_SensorData_size];
	sensorData sd = sensorDataBuf.front(&sensorDataBuf);
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MqttClientPubTask+0x78>)
 80006c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80006c6:	f107 0218 	add.w	r2, r7, #24
 80006ca:	4919      	ldr	r1, [pc, #100]	; (8000730 <MqttClientPubTask+0x78>)
 80006cc:	4610      	mov	r0, r2
 80006ce:	4798      	blx	r3

	copy_(&sd, &sd3);
 80006d0:	f107 0318 	add.w	r3, r7, #24
 80006d4:	4917      	ldr	r1, [pc, #92]	; (8000734 <MqttClientPubTask+0x7c>)
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fcb4 	bl	8001044 <copy_>
//	copy_(&sd, &sd1);
	bool res=sensor_data_to_pbuf(&sd,obuffer,sizeof(obuffer));
 80006dc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80006e0:	f107 0318 	add.w	r3, r7, #24
 80006e4:	224a      	movs	r2, #74	; 0x4a
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fc10 	bl	8000f0c <sensor_data_to_pbuf>
 80006ec:	4603      	mov	r3, r0
 80006ee:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
//	const char* str = "MQTT message from STM32";
	MQTTMessage message;

	while(1)
	{
		if(mqttClient.isconnected)
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MqttClientPubTask+0x80>)
 80006f4:	6a1b      	ldr	r3, [r3, #32]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d014      	beq.n	8000724 <MqttClientPubTask+0x6c>
		{
			if (res) {
 80006fa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d010      	beq.n	8000724 <MqttClientPubTask+0x6c>
				if (strlen((const char*)sd.sensorName)) {
 8000702:	f107 0318 	add.w	r3, r7, #24
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d004      	beq.n	8000716 <MqttClientPubTask+0x5e>
					message.payload = (void*)obuffer;
 800070c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000710:	613b      	str	r3, [r7, #16]
					message.payloadlen = sizeof(obuffer);
 8000712:	234a      	movs	r3, #74	; 0x4a
 8000714:	617b      	str	r3, [r7, #20]
				}
	//			message.payload = (void*)str;
	//			message.payloadlen = strlen(str);

				MQTTPublish(&mqttClient, "test", &message); //publish a message
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	461a      	mov	r2, r3
 800071c:	4907      	ldr	r1, [pc, #28]	; (800073c <MqttClientPubTask+0x84>)
 800071e:	4806      	ldr	r0, [pc, #24]	; (8000738 <MqttClientPubTask+0x80>)
 8000720:	f018 fc68 	bl	8018ff4 <MQTTPublish>
			}
		}

//		osDelay(1000);
		vTaskDelay(1000);
 8000724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000728:	f009 f896 	bl	8009858 <vTaskDelay>
		if(mqttClient.isconnected)
 800072c:	e7e1      	b.n	80006f2 <MqttClientPubTask+0x3a>
 800072e:	bf00      	nop
 8000730:	20001930 	.word	0x20001930
 8000734:	20000e9c 	.word	0x20000e9c
 8000738:	20000210 	.word	0x20000210
 800073c:	0801e810 	.word	0x0801e810

08000740 <MqttConnectBroker>:
	}
}

int MqttConnectBroker()
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b09c      	sub	sp, #112	; 0x70
 8000744:	af04      	add	r7, sp, #16
	int ret;

	NewNetwork(&net);
 8000746:	4832      	ldr	r0, [pc, #200]	; (8000810 <MqttConnectBroker+0xd0>)
 8000748:	f018 fdb2 	bl	80192b0 <NewNetwork>
	ret = ConnectNetwork(&net, BROKER_IP, MQTT_PORT);
 800074c:	f240 725b 	movw	r2, #1883	; 0x75b
 8000750:	4930      	ldr	r1, [pc, #192]	; (8000814 <MqttConnectBroker+0xd4>)
 8000752:	482f      	ldr	r0, [pc, #188]	; (8000810 <MqttConnectBroker+0xd0>)
 8000754:	f018 fdce 	bl	80192f4 <ConnectNetwork>
 8000758:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 800075a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800075c:	2b00      	cmp	r3, #0
 800075e:	d005      	beq.n	800076c <MqttConnectBroker+0x2c>
	{
		printf("ConnectNetwork failed.\n");
 8000760:	482d      	ldr	r0, [pc, #180]	; (8000818 <MqttConnectBroker+0xd8>)
 8000762:	f01c ffe3 	bl	801d72c <puts>
		return -1;
 8000766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800076a:	e04c      	b.n	8000806 <MqttConnectBroker+0xc6>
	}

	MQTTClientInit(&mqttClient, &net, 1000, sndBuffer, sizeof(sndBuffer), rcvBuffer, sizeof(rcvBuffer));
 800076c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000770:	9302      	str	r3, [sp, #8]
 8000772:	4b2a      	ldr	r3, [pc, #168]	; (800081c <MqttConnectBroker+0xdc>)
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	4b28      	ldr	r3, [pc, #160]	; (8000820 <MqttConnectBroker+0xe0>)
 800077e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000782:	4923      	ldr	r1, [pc, #140]	; (8000810 <MqttConnectBroker+0xd0>)
 8000784:	4827      	ldr	r0, [pc, #156]	; (8000824 <MqttConnectBroker+0xe4>)
 8000786:	f017 fed5 	bl	8018534 <MQTTClientInit>

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 800078a:	4a27      	ldr	r2, [pc, #156]	; (8000828 <MqttConnectBroker+0xe8>)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4611      	mov	r1, r2
 8000790:	2258      	movs	r2, #88	; 0x58
 8000792:	4618      	mov	r0, r3
 8000794:	f01c ff2e 	bl	801d5f4 <memcpy>
	data.willFlag = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	77fb      	strb	r3, [r7, #31]
	data.MQTTVersion = 3;
 800079c:	2303      	movs	r3, #3
 800079e:	733b      	strb	r3, [r7, #12]
	data.clientID.cstring = "STM32F4";
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <MqttConnectBroker+0xec>)
 80007a2:	613b      	str	r3, [r7, #16]
	data.username.cstring = "STM32F4";
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <MqttConnectBroker+0xec>)
 80007a6:	647b      	str	r3, [r7, #68]	; 0x44
	data.password.cstring = "";
 80007a8:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MqttConnectBroker+0xf0>)
 80007aa:	653b      	str	r3, [r7, #80]	; 0x50
	data.keepAliveInterval = 60;
 80007ac:	233c      	movs	r3, #60	; 0x3c
 80007ae:	83bb      	strh	r3, [r7, #28]
	data.cleansession = 1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	77bb      	strb	r3, [r7, #30]

	ret = MQTTConnect(&mqttClient, &data);
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	4619      	mov	r1, r3
 80007b8:	481a      	ldr	r0, [pc, #104]	; (8000824 <MqttConnectBroker+0xe4>)
 80007ba:	f018 fafd 	bl	8018db8 <MQTTConnect>
 80007be:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 80007c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d004      	beq.n	80007d0 <MqttConnectBroker+0x90>
	{
		printf("MQTTConnect failed.\n");
 80007c6:	481b      	ldr	r0, [pc, #108]	; (8000834 <MqttConnectBroker+0xf4>)
 80007c8:	f01c ffb0 	bl	801d72c <puts>
		return ret;
 80007cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007ce:	e01a      	b.n	8000806 <MqttConnectBroker+0xc6>
	}
	osDelay(500);
 80007d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007d4:	f007 fb62 	bl	8007e9c <osDelay>

	ret = MQTTSubscribe(&mqttClient, "test", QOS0, MqttMessageArrived);
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MqttConnectBroker+0xf8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	4917      	ldr	r1, [pc, #92]	; (800083c <MqttConnectBroker+0xfc>)
 80007de:	4811      	ldr	r0, [pc, #68]	; (8000824 <MqttConnectBroker+0xe4>)
 80007e0:	f018 fbf2 	bl	8018fc8 <MQTTSubscribe>
 80007e4:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 80007e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d004      	beq.n	80007f6 <MqttConnectBroker+0xb6>
	{
		printf("MQTTSubscribe failed.\n");
 80007ec:	4814      	ldr	r0, [pc, #80]	; (8000840 <MqttConnectBroker+0x100>)
 80007ee:	f01c ff9d 	bl	801d72c <puts>
		return ret;
 80007f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007f4:	e007      	b.n	8000806 <MqttConnectBroker+0xc6>
	}
	osDelay(500);
 80007f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007fa:	f007 fb4f 	bl	8007e9c <osDelay>

	printf("MQTT_ConnectBroker O.K.\n");
 80007fe:	4811      	ldr	r0, [pc, #68]	; (8000844 <MqttConnectBroker+0x104>)
 8000800:	f01c ff94 	bl	801d72c <puts>
	return MQTT_SUCCESS;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3760      	adds	r7, #96	; 0x60
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200001f8 	.word	0x200001f8
 8000814:	0801e818 	.word	0x0801e818
 8000818:	0801e824 	.word	0x0801e824
 800081c:	20000678 	.word	0x20000678
 8000820:	20000278 	.word	0x20000278
 8000824:	20000210 	.word	0x20000210
 8000828:	0801e88c 	.word	0x0801e88c
 800082c:	0801e83c 	.word	0x0801e83c
 8000830:	0801e844 	.word	0x0801e844
 8000834:	0801e848 	.word	0x0801e848
 8000838:	08000849 	.word	0x08000849
 800083c:	0801e810 	.word	0x0801e810
 8000840:	0801e85c 	.word	0x0801e85c
 8000844:	0801e874 	.word	0x0801e874

08000848 <MqttMessageArrived>:

void MqttMessageArrived(MessageData* msg)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b09a      	sub	sp, #104	; 0x68
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin); //toggle pin when new message arrived
 8000850:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000854:	482b      	ldr	r0, [pc, #172]	; (8000904 <MqttMessageArrived+0xbc>)
 8000856:	f003 f9b4 	bl	8003bc2 <HAL_GPIO_TogglePin>

	MQTTMessage* message = msg->message;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	667b      	str	r3, [r7, #100]	; 0x64
	memset(msgBuffer, 0, sizeof(msgBuffer));
 8000860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000864:	2100      	movs	r1, #0
 8000866:	4828      	ldr	r0, [pc, #160]	; (8000908 <MqttMessageArrived+0xc0>)
 8000868:	f01c fed2 	bl	801d610 <memset>
	memcpy(msgBuffer, message->payload,message->payloadlen);
 800086c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800086e:	6899      	ldr	r1, [r3, #8]
 8000870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	461a      	mov	r2, r3
 8000876:	4824      	ldr	r0, [pc, #144]	; (8000908 <MqttMessageArrived+0xc0>)
 8000878:	f01c febc 	bl	801d5f4 <memcpy>

	pb_SensorData pb_recv_obj= pb_SensorData_init_zero;
 800087c:	2300      	movs	r3, #0
 800087e:	633b      	str	r3, [r7, #48]	; 0x30
 8000880:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000884:	2224      	movs	r2, #36	; 0x24
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f01c fec1 	bl	801d610 <memset>
 800088e:	2300      	movs	r3, #0
 8000890:	65bb      	str	r3, [r7, #88]	; 0x58
 8000892:	2300      	movs	r3, #0
 8000894:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000896:	2300      	movs	r3, #0
 8000898:	663b      	str	r3, [r7, #96]	; 0x60
	sensorData sd2 = {.sensorID=0,.sensorName="",.sensorVal=0,.timeStamp=0};
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
 80008ae:	751a      	strb	r2, [r3, #20]
 80008b0:	2300      	movs	r3, #0
 80008b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80008ba:	2300      	movs	r3, #0
 80008bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	message_to_pb_obj(&pb_recv_obj,msgBuffer,sizeof(msgBuffer));
 80008c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008c8:	490f      	ldr	r1, [pc, #60]	; (8000908 <MqttMessageArrived+0xc0>)
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fb6e 	bl	8000fac <message_to_pb_obj>
	pbuf_to_sensor_data(&pb_recv_obj,&sd2);
 80008d0:	f107 020c 	add.w	r2, r7, #12
 80008d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fb8e 	bl	8000ffc <pbuf_to_sensor_data>
	copy_(&sd2, &sd1);
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	4909      	ldr	r1, [pc, #36]	; (800090c <MqttMessageArrived+0xc4>)
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fbac 	bl	8001044 <copy_>

	printf("MQTT MSG[%d]:%s\n", (int)message->payloadlen, msgBuffer);
 80008ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	4a05      	ldr	r2, [pc, #20]	; (8000908 <MqttMessageArrived+0xc0>)
 80008f2:	4619      	mov	r1, r3
 80008f4:	4806      	ldr	r0, [pc, #24]	; (8000910 <MqttMessageArrived+0xc8>)
 80008f6:	f01c fe93 	bl	801d620 <iprintf>
}
 80008fa:	bf00      	nop
 80008fc:	3768      	adds	r7, #104	; 0x68
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40020400 	.word	0x40020400
 8000908:	20000a78 	.word	0x20000a78
 800090c:	20000e78 	.word	0x20000e78
 8000910:	0801e8e4 	.word	0x0801e8e4

08000914 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000918:	f3bf 8f4f 	dsb	sy
}
 800091c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800091e:	f3bf 8f6f 	isb	sy
}
 8000922:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <SCB_EnableICache+0x48>)
 8000926:	2200      	movs	r2, #0
 8000928:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800092c:	f3bf 8f4f 	dsb	sy
}
 8000930:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000932:	f3bf 8f6f 	isb	sy
}
 8000936:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <SCB_EnableICache+0x48>)
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <SCB_EnableICache+0x48>)
 800093e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000942:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000944:	f3bf 8f4f 	dsb	sy
}
 8000948:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800094a:	f3bf 8f6f 	isb	sy
}
 800094e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000966:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <SCB_EnableDCache+0x84>)
 8000968:	2200      	movs	r2, #0
 800096a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800096e:	f3bf 8f4f 	dsb	sy
}
 8000972:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <SCB_EnableDCache+0x84>)
 8000976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800097a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	0b5b      	lsrs	r3, r3, #13
 8000980:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000984:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	08db      	lsrs	r3, r3, #3
 800098a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800098e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	015a      	lsls	r2, r3, #5
 8000994:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000998:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800099e:	4911      	ldr	r1, [pc, #68]	; (80009e4 <SCB_EnableDCache+0x84>)
 80009a0:	4313      	orrs	r3, r2
 80009a2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	1e5a      	subs	r2, r3, #1
 80009aa:	60ba      	str	r2, [r7, #8]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1ef      	bne.n	8000990 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	1e5a      	subs	r2, r3, #1
 80009b4:	60fa      	str	r2, [r7, #12]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1e5      	bne.n	8000986 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80009ba:	f3bf 8f4f 	dsb	sy
}
 80009be:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <SCB_EnableDCache+0x84>)
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <SCB_EnableDCache+0x84>)
 80009c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009ca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009cc:	f3bf 8f4f 	dsb	sy
}
 80009d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009d2:	f3bf 8f6f 	isb	sy
}
 80009d6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b5b0      	push	{r4, r5, r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009ee:	f000 fa23 	bl	8000e38 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80009f2:	f7ff ff8f 	bl	8000914 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80009f6:	f7ff ffb3 	bl	8000960 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fa:	f001 f9bf 	bl	8001d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fe:	f000 f82b 	bl	8000a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a02:	f000 f935 	bl	8000c70 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a06:	f000 f8d5 	bl	8000bb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a0a:	f000 f903 	bl	8000c14 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000a0e:	f000 f893 	bl	8000b38 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  init_spi(&spi_obj);
 8000a12:	480d      	ldr	r0, [pc, #52]	; (8000a48 <main+0x60>)
 8000a14:	f000 fc76 	bl	8001304 <init_spi>
  init_sensor_buffer_obj(&sensorDataBuf);
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <main+0x64>)
 8000a1a:	f000 fb55 	bl	80010c8 <init_sensor_buffer_obj>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <main+0x68>)
 8000a20:	1d3c      	adds	r4, r7, #4
 8000a22:	461d      	mov	r5, r3
 8000a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f007 f9e5 	bl	8007e04 <osThreadCreate>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <main+0x6c>)
 8000a3e:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a40:	f007 f9c9 	bl	8007dd6 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <main+0x5c>
 8000a46:	bf00      	nop
 8000a48:	200019d8 	.word	0x200019d8
 8000a4c:	20001930 	.word	0x20001930
 8000a50:	0801e92c 	.word	0x0801e92c
 8000a54:	20001908 	.word	0x20001908

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b094      	sub	sp, #80	; 0x50
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	2234      	movs	r2, #52	; 0x34
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f01c fdd2 	bl	801d610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a7c:	f003 fa04 	bl	8003e88 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a80:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <SystemClock_Config+0xd8>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	4a2a      	ldr	r2, [pc, #168]	; (8000b30 <SystemClock_Config+0xd8>)
 8000a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8c:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <SystemClock_Config+0xd8>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a98:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <SystemClock_Config+0xdc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a25      	ldr	r2, [pc, #148]	; (8000b34 <SystemClock_Config+0xdc>)
 8000a9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <SystemClock_Config+0xdc>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ab4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ab8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aba:	2302      	movs	r3, #2
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000abe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000ac8:	23d8      	movs	r3, #216	; 0xd8
 8000aca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ad0:	2309      	movs	r3, #9
 8000ad2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4618      	mov	r0, r3
 8000ade:	f003 fa33 	bl	8003f48 <HAL_RCC_OscConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ae8:	f000 fa0a 	bl	8000f00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000aec:	f003 f9dc 	bl	8003ea8 <HAL_PWREx_EnableOverDrive>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000af6:	f000 fa03 	bl	8000f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	230f      	movs	r3, #15
 8000afc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afe:	2302      	movs	r3, #2
 8000b00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b10:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	2107      	movs	r1, #7
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f003 fcc3 	bl	80044a4 <HAL_RCC_ClockConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b24:	f000 f9ec 	bl	8000f00 <Error_Handler>
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3750      	adds	r7, #80	; 0x50
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40007000 	.word	0x40007000

08000b38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b3e:	4a1c      	ldr	r2, [pc, #112]	; (8000bb0 <MX_SPI1_Init+0x78>)
 8000b40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b42:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b6e:	2238      	movs	r2, #56	; 0x38
 8000b70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b86:	2207      	movs	r2, #7
 8000b88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b92:	2208      	movs	r2, #8
 8000b94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b98:	f004 fb04 	bl	80051a4 <HAL_SPI_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ba2:	f000 f9ad 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20001314 	.word	0x20001314
 8000bb0:	40013000 	.word	0x40013000

08000bb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bba:	4a15      	ldr	r2, [pc, #84]	; (8000c10 <MX_USART3_UART_Init+0x5c>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <MX_USART3_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_USART3_UART_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bf8:	f005 fb36 	bl	8006268 <HAL_UART_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c02:	f000 f97d 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20001378 	.word	0x20001378
 8000c10:	40004800 	.word	0x40004800

08000c14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c22:	2206      	movs	r2, #6
 8000c24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c28:	2202      	movs	r2, #2
 8000c2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c34:	2202      	movs	r2, #2
 8000c36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c58:	f002 ffcd 	bl	8003bf6 <HAL_PCD_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c62:	f000 f94d 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20001400 	.word	0x20001400

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08c      	sub	sp, #48	; 0x30
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	4b47      	ldr	r3, [pc, #284]	; (8000da4 <MX_GPIO_Init+0x134>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a46      	ldr	r2, [pc, #280]	; (8000da4 <MX_GPIO_Init+0x134>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b44      	ldr	r3, [pc, #272]	; (8000da4 <MX_GPIO_Init+0x134>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	61bb      	str	r3, [r7, #24]
 8000c9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9e:	4b41      	ldr	r3, [pc, #260]	; (8000da4 <MX_GPIO_Init+0x134>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a40      	ldr	r2, [pc, #256]	; (8000da4 <MX_GPIO_Init+0x134>)
 8000ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b3e      	ldr	r3, [pc, #248]	; (8000da4 <MX_GPIO_Init+0x134>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	4b3b      	ldr	r3, [pc, #236]	; (8000da4 <MX_GPIO_Init+0x134>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a3a      	ldr	r2, [pc, #232]	; (8000da4 <MX_GPIO_Init+0x134>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <MX_GPIO_Init+0x134>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <MX_GPIO_Init+0x134>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a34      	ldr	r2, [pc, #208]	; (8000da4 <MX_GPIO_Init+0x134>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <MX_GPIO_Init+0x134>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <MX_GPIO_Init+0x134>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a2e      	ldr	r2, [pc, #184]	; (8000da4 <MX_GPIO_Init+0x134>)
 8000cec:	f043 0308 	orr.w	r3, r3, #8
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <MX_GPIO_Init+0x134>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cfe:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <MX_GPIO_Init+0x134>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a28      	ldr	r2, [pc, #160]	; (8000da4 <MX_GPIO_Init+0x134>)
 8000d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <MX_GPIO_Init+0x134>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d1c:	4822      	ldr	r0, [pc, #136]	; (8000da8 <MX_GPIO_Init+0x138>)
 8000d1e:	f002 ff37 	bl	8003b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2140      	movs	r1, #64	; 0x40
 8000d26:	4821      	ldr	r0, [pc, #132]	; (8000dac <MX_GPIO_Init+0x13c>)
 8000d28:	f002 ff32 	bl	8003b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	481b      	ldr	r0, [pc, #108]	; (8000db0 <MX_GPIO_Init+0x140>)
 8000d44:	f002 fc6c 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d48:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4811      	ldr	r0, [pc, #68]	; (8000da8 <MX_GPIO_Init+0x138>)
 8000d62:	f002 fc5d 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d66:	2340      	movs	r3, #64	; 0x40
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <MX_GPIO_Init+0x13c>)
 8000d7e:	f002 fc4f 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_GPIO_Init+0x13c>)
 8000d96:	f002 fc43 	bl	8003620 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3730      	adds	r7, #48	; 0x30
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40021800 	.word	0x40021800
 8000db0:	40020800 	.word	0x40020800

08000db4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000db4:	b5b0      	push	{r4, r5, r7, lr}
 8000db6:	b090      	sub	sp, #64	; 0x40
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000dbc:	f006 f9b0 	bl	8007120 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  osThreadDef(mqttClientSubTask, MqttClientSubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2); //subscribe task
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <StartDefaultTask+0x6c>)
 8000dc2:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000dc6:	461d      	mov	r5, r3
 8000dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	osThreadDef(mqttClientPubTask, MqttClientPubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2); //publish task
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <StartDefaultTask+0x70>)
 8000dd6:	f107 0408 	add.w	r4, r7, #8
 8000dda:	461d      	mov	r5, r3
 8000ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000de4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	mqttClientSubTaskHandle = osThreadCreate(osThread(mqttClientSubTask), NULL);
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f007 f808 	bl	8007e04 <osThreadCreate>
 8000df4:	4603      	mov	r3, r0
 8000df6:	4a0c      	ldr	r2, [pc, #48]	; (8000e28 <StartDefaultTask+0x74>)
 8000df8:	6013      	str	r3, [r2, #0]
  	mqttClientPubTaskHandle = osThreadCreate(osThread(mqttClientPubTask), NULL);
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f006 ffff 	bl	8007e04 <osThreadCreate>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <StartDefaultTask+0x78>)
 8000e0a:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
//	  IRSENSOR1
//	  spi_obj.spi_read(buffer_tx[0],buffer_rx,&hspi1);
	  spi_obj.spi_read(IRSENSOR1,spi_obj.rx_buf,&hspi1);
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <StartDefaultTask+0x7c>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <StartDefaultTask+0x80>)
 8000e12:	4907      	ldr	r1, [pc, #28]	; (8000e30 <StartDefaultTask+0x7c>)
 8000e14:	2002      	movs	r0, #2
 8000e16:	4798      	blx	r3

    osDelay(20);
 8000e18:	2014      	movs	r0, #20
 8000e1a:	f007 f83f 	bl	8007e9c <osDelay>
	  spi_obj.spi_read(IRSENSOR1,spi_obj.rx_buf,&hspi1);
 8000e1e:	e7f5      	b.n	8000e0c <StartDefaultTask+0x58>
 8000e20:	0801e948 	.word	0x0801e948
 8000e24:	0801e964 	.word	0x0801e964
 8000e28:	200001f0 	.word	0x200001f0
 8000e2c:	200001f4 	.word	0x200001f4
 8000e30:	200019d8 	.word	0x200019d8
 8000e34:	20001314 	.word	0x20001314

08000e38 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e3e:	463b      	mov	r3, r7
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e4a:	f001 f8fd 	bl	8002048 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e5a:	231f      	movs	r3, #31
 8000e5c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e5e:	2387      	movs	r3, #135	; 0x87
 8000e60:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e66:	2300      	movs	r3, #0
 8000e68:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 f91b 	bl	80020b8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000e82:	2301      	movs	r3, #1
 8000e84:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000e86:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000e8a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f001 f908 	bl	80020b8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24020000;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <MPU_Config+0xa0>)
 8000eae:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000eb0:	2308      	movs	r3, #8
 8000eb2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 f8f8 	bl	80020b8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ec8:	2004      	movs	r0, #4
 8000eca:	f001 f8d5 	bl	8002078 <HAL_MPU_Enable>

}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	24020000 	.word	0x24020000

08000edc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d101      	bne.n	8000ef2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eee:	f000 ff53 	bl	8001d98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40001000 	.word	0x40001000

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
}
 8000f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <Error_Handler+0x8>
	...

08000f0c <sensor_data_to_pbuf>:

//static bool decode_timestamp(pb_istream_t *stream, const pb_field_t *field, void **arg);
//static bool encode_timestamp(pb_ostream_t *stream, const pb_field_t *field, void * const *arg);

//pb_SensorData sensor_data_to_pbuf(sensorData* sd,uint8_t *msg_buf,uint32_t* len) {
bool sensor_data_to_pbuf(sensorData* sd,uint8_t *msg_buf,uint32_t len) {
 8000f0c:	b5b0      	push	{r4, r5, r7, lr}
 8000f0e:	b09e      	sub	sp, #120	; 0x78
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6278      	str	r0, [r7, #36]	; 0x24
 8000f14:	6239      	str	r1, [r7, #32]
 8000f16:	61fa      	str	r2, [r7, #28]
	copy_(sd, &sd1);
 8000f18:	4922      	ldr	r1, [pc, #136]	; (8000fa4 <sensor_data_to_pbuf+0x98>)
 8000f1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f1c:	f000 f892 	bl	8001044 <copy_>
//	pb_SensorData_fields
	pb_SensorData pb_obj= pb_SensorData_init_zero;
 8000f20:	2300      	movs	r3, #0
 8000f22:	643b      	str	r3, [r7, #64]	; 0x40
 8000f24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f28:	2224      	movs	r2, #36	; 0x24
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f01c fb6f 	bl	801d610 <memset>
 8000f32:	2300      	movs	r3, #0
 8000f34:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f36:	2300      	movs	r3, #0
 8000f38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	673b      	str	r3, [r7, #112]	; 0x70
	pb_ostream_t ostream_sname;

//	uint8_t sensor_name_buf[strlen(((const char*)sd->sensorName)+1)];
	strcpy(pb_obj.sensorName,(const char*)sd->sensorName);
 8000f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f01c fc36 	bl	801d7b8 <strcpy>
//	pb_obj.sensorName.funcs.encode = &encode_sensorName;

	pb_obj.sensorID = sd->sensorID;
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	7e5b      	ldrb	r3, [r3, #25]
 8000f50:	66bb      	str	r3, [r7, #104]	; 0x68
	pb_obj.timeStamp = sd->timeStamp;
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	66fb      	str	r3, [r7, #108]	; 0x6c

	pb_obj.sensorValue = sd->sensorVal;
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f5e:	673b      	str	r3, [r7, #112]	; 0x70


//	ostream_sname = pb_ostream_from_buffer(sensor_name_buf, sizeof(sensor_name_buf));
	ostream_sname = pb_ostream_from_buffer(msg_buf, len);
 8000f60:	463b      	mov	r3, r7
 8000f62:	69fa      	ldr	r2, [r7, #28]
 8000f64:	6a39      	ldr	r1, [r7, #32]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f01b fa4c 	bl	801c404 <pb_ostream_from_buffer>
 8000f6c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000f70:	463d      	mov	r5, r7
 8000f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f76:	682b      	ldr	r3, [r5, #0]
 8000f78:	6023      	str	r3, [r4, #0]
	bool res=0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	res=pb_encode(&ostream_sname, pb_SensorData_fields, &pb_obj);
 8000f80:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f88:	4907      	ldr	r1, [pc, #28]	; (8000fa8 <sensor_data_to_pbuf+0x9c>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f01b fea7 	bl	801ccde <pb_encode>
 8000f90:	4603      	mov	r3, r0
 8000f92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	return res;
 8000f96:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3778      	adds	r7, #120	; 0x78
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000190c 	.word	0x2000190c
 8000fa8:	08022274 	.word	0x08022274

08000fac <message_to_pb_obj>:
//	sd.sensorVal = pb_data->sensorValue;
//
//
//	return sd;
//}
bool message_to_pb_obj(pb_SensorData* pb_data,uint8_t *msg_buf,uint32_t len) {
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b08d      	sub	sp, #52	; 0x34
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	61f8      	str	r0, [r7, #28]
 8000fb4:	61b9      	str	r1, [r7, #24]
 8000fb6:	617a      	str	r2, [r7, #20]
	pb_istream_t stream;

	stream = pb_istream_from_buffer(msg_buf, len);
 8000fb8:	463b      	mov	r3, r7
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	69b9      	ldr	r1, [r7, #24]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f019 fd14 	bl	801a9ec <pb_istream_from_buffer>
 8000fc4:	f107 0420 	add.w	r4, r7, #32
 8000fc8:	463b      	mov	r3, r7
 8000fca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (!pb_decode(&stream, pb_SensorData_fields, pb_data)) {
 8000fd0:	f107 0320 	add.w	r3, r7, #32
 8000fd4:	69fa      	ldr	r2, [r7, #28]
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <message_to_pb_obj+0x4c>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f01a fe41 	bl	801bc60 <pb_decode>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	f083 0301 	eor.w	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <message_to_pb_obj+0x42>
		return false;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <message_to_pb_obj+0x44>
	}

	return true;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3734      	adds	r7, #52	; 0x34
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd90      	pop	{r4, r7, pc}
 8000ff8:	08022274 	.word	0x08022274

08000ffc <pbuf_to_sensor_data>:
bool pbuf_to_sensor_data(pb_SensorData* pb_data,sensorData* sd) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
	if (strlen((const char*)pb_data->sensorName)) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d005      	beq.n	800101a <pbuf_to_sensor_data+0x1e>
		strcpy((char*)sd->sensorName,pb_data->sensorName);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f01c fbcf 	bl	801d7b8 <strcpy>
	}
	sd->sensorID = pb_data->sensorID;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101e:	b2da      	uxtb	r2, r3
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	765a      	strb	r2, [r3, #25]
	sd->sensorVal = pb_data->sensorValue;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	b2da      	uxtb	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f883 2020 	strb.w	r2, [r3, #32]
	sd->timeStamp = pb_data->timeStamp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001034:	461a      	mov	r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	61da      	str	r2, [r3, #28]
	return true;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <copy_>:
sensorData sensor_buffer_front(sensorData_buf* sb);

sensorData sensorDataObj;
volatile sensorData_buf sensorDataBuf;

bool copy_(sensorData* from,sensorData* to) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
	strcpy((char*)to->sensorName,(const char*)from->sensorName);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f01c fbaf 	bl	801d7b8 <strcpy>
	to->sensorID = from->sensorID;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7e5a      	ldrb	r2, [r3, #25]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	765a      	strb	r2, [r3, #25]
	to->timeStamp = from ->timeStamp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69da      	ldr	r2, [r3, #28]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	61da      	str	r2, [r3, #28]
	to->sensorVal = from->sensorVal;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	f883 2020 	strb.w	r2, [r3, #32]


	return true;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <init_sensor_data_obj>:

void update_timestamp(sensorData* sd) {
	sd->timeStamp = HAL_GetTick();
}

void init_sensor_data_obj(uint8_t* sname,uint8_t sensorID,uint8_t sensorVal,sensorData* sd) {
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	72fb      	strb	r3, [r7, #11]
 800108e:	4613      	mov	r3, r2
 8001090:	72bb      	strb	r3, [r7, #10]
	memcpy(sd->sensorName,sname,strlen((const char*)sname)+1);
 8001092:	687c      	ldr	r4, [r7, #4]
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f7ff f8dd 	bl	8000254 <strlen>
 800109a:	4603      	mov	r3, r0
 800109c:	3301      	adds	r3, #1
 800109e:	461a      	mov	r2, r3
 80010a0:	68f9      	ldr	r1, [r7, #12]
 80010a2:	4620      	mov	r0, r4
 80010a4:	f01c faa6 	bl	801d5f4 <memcpy>
	sd->sensorID=sensorID;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7afa      	ldrb	r2, [r7, #11]
 80010ac:	765a      	strb	r2, [r3, #25]
	sd->timeStamp = HAL_GetTick();
 80010ae:	f000 fe87 	bl	8001dc0 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	61da      	str	r2, [r3, #28]
	sd->sensorVal = sensorVal;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7aba      	ldrb	r2, [r7, #10]
 80010bc:	f883 2020 	strb.w	r2, [r3, #32]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd90      	pop	{r4, r7, pc}

080010c8 <init_sensor_buffer_obj>:


void init_sensor_buffer_obj(sensorData_buf* sb) {
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	sb->count=0;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	sb->first=0;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	sb->last=0;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	sb->front = sensor_buffer_front;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a06      	ldr	r2, [pc, #24]	; (8001104 <init_sensor_buffer_obj+0x3c>)
 80010ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	sb->update = update_sensor_buffer;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <init_sensor_buffer_obj+0x40>)
 80010f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	08001215 	.word	0x08001215
 8001108:	0800110d 	.word	0x0800110d

0800110c <update_sensor_buffer>:

void update_sensor_buffer(sensorData_buf* sb,sensorData sd) {
 800110c:	b084      	sub	sp, #16
 800110e:	b4b0      	push	{r4, r5, r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	f107 001c 	add.w	r0, r7, #28
 800111a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
//	}
//	else if (sb->last>4) {
//		sb->last %=3;
//	}
//	sb->last %=3;
	if (sb->first==4) {
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001124:	2b04      	cmp	r3, #4
 8001126:	d104      	bne.n	8001132 <update_sensor_buffer+0x26>
		sb->first =0;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001130:	e012      	b.n	8001158 <update_sensor_buffer+0x4c>
	}
	else if (sb->first>4) {
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001138:	2b04      	cmp	r3, #4
 800113a:	d90d      	bls.n	8001158 <update_sensor_buffer+0x4c>
		sb->first %=3;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8001142:	4b33      	ldr	r3, [pc, #204]	; (8001210 <update_sensor_buffer+0x104>)
 8001144:	fba3 2301 	umull	r2, r3, r3, r1
 8001148:	085a      	lsrs	r2, r3, #1
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	1aca      	subs	r2, r1, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
//	sb->first %=3;
	sb->sensor_buffer[sb->last++] = sd;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800115e:	1c51      	adds	r1, r2, #1
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	4413      	add	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	461d      	mov	r5, r3
 8001174:	f107 041c 	add.w	r4, r7, #28
 8001178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800117a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800117c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800117e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001180:	6823      	ldr	r3, [r4, #0]
 8001182:	602b      	str	r3, [r5, #0]
	if (sb->last==4) {
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800118a:	2b04      	cmp	r3, #4
 800118c:	d104      	bne.n	8001198 <update_sensor_buffer+0x8c>
		sb->last =0;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001196:	e012      	b.n	80011be <update_sensor_buffer+0xb2>
	}
	else if (sb->last>4) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d90d      	bls.n	80011be <update_sensor_buffer+0xb2>
		sb->last %=3;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <update_sensor_buffer+0x104>)
 80011aa:	fba3 2301 	umull	r2, r3, r3, r1
 80011ae:	085a      	lsrs	r2, r3, #1
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	1aca      	subs	r2, r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	}
//	sb->count = (sb->count<(uint32_t)SENSORBUFFERSIZE) ? sb->count+1 : sb->count;
	if (sb->count<4) {
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d806      	bhi.n	80011d6 <update_sensor_buffer+0xca>
		sb->count++;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
//	if (sb->count==4 && sb->last!=3) {
//
//		sb->first++;
//	}

	if (sb->count==4 ) {
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d110      	bne.n	8001202 <update_sensor_buffer+0xf6>
		if (sb->last==3) {
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d104      	bne.n	80011f4 <update_sensor_buffer+0xe8>
			sb->first=0;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
//			sb->last=0;
//		}
//	}

//	sb->first = (sb->count==4 && sb->last!=4) ? sb->first+1 : sb->first;
}
 80011f2:	e006      	b.n	8001202 <update_sensor_buffer+0xf6>
			sb->first++;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bcb0      	pop	{r4, r5, r7}
 800120a:	b004      	add	sp, #16
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	aaaaaaab 	.word	0xaaaaaaab

08001214 <sensor_buffer_front>:


sensorData sensor_buffer_front(sensorData_buf* sb) {
 8001214:	b5b0      	push	{r4, r5, r7, lr}
 8001216:	b08c      	sub	sp, #48	; 0x30
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
	if (sb->count--) {
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001224:	1e59      	subs	r1, r3, #1
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
 800122c:	2b00      	cmp	r3, #0
 800122e:	d024      	beq.n	800127a <sensor_buffer_front+0x66>
		sb->first%=3;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <sensor_buffer_front+0xac>)
 8001238:	fba3 2301 	umull	r2, r3, r3, r1
 800123c:	085a      	lsrs	r2, r3, #1
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	1aca      	subs	r2, r1, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		return sb->sensor_buffer[sb->first++];
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001252:	1c51      	adds	r1, r2, #1
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	6839      	ldr	r1, [r7, #0]
 800125e:	4613      	mov	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	4413      	add	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	440b      	add	r3, r1
 8001268:	4604      	mov	r4, r0
 800126a:	461d      	mov	r5, r3
 800126c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800126e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001274:	682b      	ldr	r3, [r5, #0]
 8001276:	6023      	str	r3, [r4, #0]
 8001278:	e01e      	b.n	80012b8 <sensor_buffer_front+0xa4>
	}
	sensorData obj = {.sensorName="",.sensorID=0,.timeStamp=HAL_GetTick(),.sensorVal=0};
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]
 800128e:	751a      	strb	r2, [r3, #20]
 8001290:	2300      	movs	r3, #0
 8001292:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001296:	f000 fd93 	bl	8001dc0 <HAL_GetTick>
 800129a:	4603      	mov	r3, r0
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
 800129e:	2300      	movs	r3, #0
 80012a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	    return obj;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	461d      	mov	r5, r3
 80012a8:	f107 040c 	add.w	r4, r7, #12
 80012ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	602b      	str	r3, [r5, #0]
}
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	3730      	adds	r7, #48	; 0x30
 80012bc:	46bd      	mov	sp, r7
 80012be:	bdb0      	pop	{r4, r5, r7, pc}
 80012c0:	aaaaaaab 	.word	0xaaaaaaab

080012c4 <extract_sensor_address>:

uint8_t extract_sensor_address(uint8_t sensor_msg) {
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]

    return sensor_msg>>4;
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	b2db      	uxtb	r3, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <extract_sensor_value>:

uint8_t extract_sensor_value(uint8_t sensor_msg) {
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
    uint8_t mask = (1<<4)-1;
 80012ea:	230f      	movs	r3, #15
 80012ec:	73fb      	strb	r3, [r7, #15]
    return sensor_msg&mask;
 80012ee:	79fa      	ldrb	r2, [r7, #7]
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	4013      	ands	r3, r2
 80012f4:	b2db      	uxtb	r3, r3
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <init_spi>:
extern sensorData sensorDataObj;
extern volatile sensorData_buf sensorDataBuf;
extern uint8_t extract_sensor_address(uint8_t sensor_msg);
extern uint8_t extract_sensor_value(uint8_t sensor_msg);

void init_spi(spi_* s) {
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	s->reset=resetSPI;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a07      	ldr	r2, [pc, #28]	; (800132c <init_spi+0x28>)
 8001310:	609a      	str	r2, [r3, #8]
	s->spi_read=ReadPeripheral;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a06      	ldr	r2, [pc, #24]	; (8001330 <init_spi+0x2c>)
 8001316:	605a      	str	r2, [r3, #4]
	s->rx_buf[0] = 0;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]

}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	0800136f 	.word	0x0800136f
 8001330:	08001335 	.word	0x08001335

08001334 <ReadPeripheral>:




HAL_StatusTypeDef ReadPeripheral(uint8_t addr, uint8_t *buffer_rx,SPI_HandleTypeDef* hspi1) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef hal_status;
	uint8_t buffer_tx[1] = {addr};
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	753b      	strb	r3, [r7, #20]

	hal_status = HAL_SPI_TransmitReceive_IT(hspi1, buffer_tx, buffer_rx, 1);
 8001346:	f107 0114 	add.w	r1, r7, #20
 800134a:	2301      	movs	r3, #1
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f003 fffc 	bl	800534c <HAL_SPI_TransmitReceive_IT>
 8001354:	4603      	mov	r3, r0
 8001356:	75fb      	strb	r3, [r7, #23]

	if (hal_status!=HAL_OK) {
 8001358:	7dfb      	ldrb	r3, [r7, #23]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d002      	beq.n	8001364 <ReadPeripheral+0x30>
		resetSPI(hspi1);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f805 	bl	800136e <resetSPI>
	}

	return hal_status;
 8001364:	7dfb      	ldrb	r3, [r7, #23]

}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <resetSPI>:



void resetSPI(SPI_HandleTypeDef* ht_spi) {
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
	HAL_SPI_DeInit(ht_spi);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f003 ffbf 	bl	80052fa <HAL_SPI_DeInit>
	HAL_SPI_Init(ht_spi);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f003 ff11 	bl	80051a4 <HAL_SPI_Init>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 800138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138e:	b093      	sub	sp, #76	; 0x4c
 8001390:	af06      	add	r7, sp, #24
 8001392:	6078      	str	r0, [r7, #4]
	success=1;
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <HAL_SPI_TxRxCpltCallback+0x90>)
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]

	uint8_t sensor_val =  extract_sensor_value(spi_obj.rx_buf[0]);
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <HAL_SPI_TxRxCpltCallback+0x94>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff9e 	bl	80012e0 <extract_sensor_value>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t sensor_addr = extract_sensor_address(spi_obj.rx_buf[0]);
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <HAL_SPI_TxRxCpltCallback+0x94>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff88 	bl	80012c4 <extract_sensor_address>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e


	if (sensor_addr==IRSENSOR1) {
 80013ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d119      	bne.n	80013f6 <HAL_SPI_TxRxCpltCallback+0x6a>
//		const char* sensor_name = IRSENSOR1NAME;
		sensorData sensorDataObj1;
		init_sensor_data_obj((uint8_t*)IRSENSOR1NAME, sensor_addr, sensor_val, &sensorDataObj1);
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80013ca:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80013ce:	4815      	ldr	r0, [pc, #84]	; (8001424 <HAL_SPI_TxRxCpltCallback+0x98>)
 80013d0:	f7ff fe56 	bl	8001080 <init_sensor_data_obj>
		sensorDataBuf.update(&sensorDataBuf, sensorDataObj1);
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_SPI_TxRxCpltCallback+0x9c>)
 80013d6:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80013da:	466d      	mov	r5, sp
 80013dc:	f107 0414 	add.w	r4, r7, #20
 80013e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013f2:	480d      	ldr	r0, [pc, #52]	; (8001428 <HAL_SPI_TxRxCpltCallback+0x9c>)
 80013f4:	47b0      	blx	r6
//		osDelay(5);
	}



	if (sensor_val==1) {
 80013f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d105      	bne.n	800140a <HAL_SPI_TxRxCpltCallback+0x7e>
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 80013fe:	2201      	movs	r2, #1
 8001400:	2101      	movs	r1, #1
 8001402:	480a      	ldr	r0, [pc, #40]	; (800142c <HAL_SPI_TxRxCpltCallback+0xa0>)
 8001404:	f002 fbc4 	bl	8003b90 <HAL_GPIO_WritePin>

	else {
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	}

}
 8001408:	e004      	b.n	8001414 <HAL_SPI_TxRxCpltCallback+0x88>
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	2101      	movs	r1, #1
 800140e:	4807      	ldr	r0, [pc, #28]	; (800142c <HAL_SPI_TxRxCpltCallback+0xa0>)
 8001410:	f002 fbbe 	bl	8003b90 <HAL_GPIO_WritePin>
}
 8001414:	bf00      	nop
 8001416:	3734      	adds	r7, #52	; 0x34
 8001418:	46bd      	mov	sp, r7
 800141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141c:	200019d4 	.word	0x200019d4
 8001420:	200019d8 	.word	0x200019d8
 8001424:	0801e980 	.word	0x0801e980
 8001428:	20001930 	.word	0x20001930
 800142c:	40020400 	.word	0x40020400

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_MspInit+0x4c>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a10      	ldr	r2, [pc, #64]	; (800147c <HAL_MspInit+0x4c>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_MspInit+0x4c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_MspInit+0x4c>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a0a      	ldr	r2, [pc, #40]	; (800147c <HAL_MspInit+0x4c>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_MspInit+0x4c>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	210f      	movs	r1, #15
 800146a:	f06f 0001 	mvn.w	r0, #1
 800146e:	f000 fdb3 	bl	8001fd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800

08001480 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a29      	ldr	r2, [pc, #164]	; (8001544 <HAL_SPI_MspInit+0xc4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d14b      	bne.n	800153a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014a2:	4b29      	ldr	r3, [pc, #164]	; (8001548 <HAL_SPI_MspInit+0xc8>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	4a28      	ldr	r2, [pc, #160]	; (8001548 <HAL_SPI_MspInit+0xc8>)
 80014a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014ac:	6453      	str	r3, [r2, #68]	; 0x44
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <HAL_SPI_MspInit+0xc8>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	4b23      	ldr	r3, [pc, #140]	; (8001548 <HAL_SPI_MspInit+0xc8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a22      	ldr	r2, [pc, #136]	; (8001548 <HAL_SPI_MspInit+0xc8>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_SPI_MspInit+0xc8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d2:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <HAL_SPI_MspInit+0xc8>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <HAL_SPI_MspInit+0xc8>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <HAL_SPI_MspInit+0xc8>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014ea:	2360      	movs	r3, #96	; 0x60
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014fa:	2305      	movs	r3, #5
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	4811      	ldr	r0, [pc, #68]	; (800154c <HAL_SPI_MspInit+0xcc>)
 8001506:	f002 f88b 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800151a:	2305      	movs	r3, #5
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	480a      	ldr	r0, [pc, #40]	; (8001550 <HAL_SPI_MspInit+0xd0>)
 8001526:	f002 f87b 	bl	8003620 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2105      	movs	r1, #5
 800152e:	2023      	movs	r0, #35	; 0x23
 8001530:	f000 fd52 	bl	8001fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001534:	2023      	movs	r0, #35	; 0x23
 8001536:	f000 fd6b 	bl	8002010 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	; 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40013000 	.word	0x40013000
 8001548:	40023800 	.word	0x40023800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020c00 	.word	0x40020c00

08001554 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <HAL_SPI_MspDeInit+0x3c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d110      	bne.n	8001588 <HAL_SPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_SPI_MspDeInit+0x40>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <HAL_SPI_MspDeInit+0x40>)
 800156c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001570:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6);
 8001572:	2160      	movs	r1, #96	; 0x60
 8001574:	4808      	ldr	r0, [pc, #32]	; (8001598 <HAL_SPI_MspDeInit+0x44>)
 8001576:	f002 f9ff 	bl	8003978 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_7);
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	4807      	ldr	r0, [pc, #28]	; (800159c <HAL_SPI_MspDeInit+0x48>)
 800157e:	f002 f9fb 	bl	8003978 <HAL_GPIO_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8001582:	2023      	movs	r0, #35	; 0x23
 8001584:	f000 fd52 	bl	800202c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40013000 	.word	0x40013000
 8001594:	40023800 	.word	0x40023800
 8001598:	40020000 	.word	0x40020000
 800159c:	40020c00 	.word	0x40020c00

080015a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0ae      	sub	sp, #184	; 0xb8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2290      	movs	r2, #144	; 0x90
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f01c f825 	bl	801d610 <memset>
  if(huart->Instance==USART3)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a22      	ldr	r2, [pc, #136]	; (8001654 <HAL_UART_MspInit+0xb4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d13c      	bne.n	800164a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 f9b8 	bl	8004954 <HAL_RCCEx_PeriphCLKConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015ea:	f7ff fc89 	bl	8000f00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <HAL_UART_MspInit+0xb8>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a19      	ldr	r2, [pc, #100]	; (8001658 <HAL_UART_MspInit+0xb8>)
 80015f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_UART_MspInit+0xb8>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <HAL_UART_MspInit+0xb8>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a13      	ldr	r2, [pc, #76]	; (8001658 <HAL_UART_MspInit+0xb8>)
 800160c:	f043 0308 	orr.w	r3, r3, #8
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <HAL_UART_MspInit+0xb8>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800161e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001638:	2307      	movs	r3, #7
 800163a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <HAL_UART_MspInit+0xbc>)
 8001646:	f001 ffeb 	bl	8003620 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800164a:	bf00      	nop
 800164c:	37b8      	adds	r7, #184	; 0xb8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40004800 	.word	0x40004800
 8001658:	40023800 	.word	0x40023800
 800165c:	40020c00 	.word	0x40020c00

08001660 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b0ae      	sub	sp, #184	; 0xb8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2290      	movs	r2, #144	; 0x90
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f01b ffc5 	bl	801d610 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800168e:	d159      	bne.n	8001744 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001690:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001694:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4618      	mov	r0, r3
 80016a2:	f003 f957 	bl	8004954 <HAL_RCCEx_PeriphCLKConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80016ac:	f7ff fc28 	bl	8000f00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	4b26      	ldr	r3, [pc, #152]	; (800174c <HAL_PCD_MspInit+0xec>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	4a25      	ldr	r2, [pc, #148]	; (800174c <HAL_PCD_MspInit+0xec>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6313      	str	r3, [r2, #48]	; 0x30
 80016bc:	4b23      	ldr	r3, [pc, #140]	; (800174c <HAL_PCD_MspInit+0xec>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016c8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80016cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016e2:	230a      	movs	r3, #10
 80016e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016ec:	4619      	mov	r1, r3
 80016ee:	4818      	ldr	r0, [pc, #96]	; (8001750 <HAL_PCD_MspInit+0xf0>)
 80016f0:	f001 ff96 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800170c:	4619      	mov	r1, r3
 800170e:	4810      	ldr	r0, [pc, #64]	; (8001750 <HAL_PCD_MspInit+0xf0>)
 8001710:	f001 ff86 	bl	8003620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_PCD_MspInit+0xec>)
 8001716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001718:	4a0c      	ldr	r2, [pc, #48]	; (800174c <HAL_PCD_MspInit+0xec>)
 800171a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800171e:	6353      	str	r3, [r2, #52]	; 0x34
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_PCD_MspInit+0xec>)
 8001722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <HAL_PCD_MspInit+0xec>)
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	4a06      	ldr	r2, [pc, #24]	; (800174c <HAL_PCD_MspInit+0xec>)
 8001732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001736:	6453      	str	r3, [r2, #68]	; 0x44
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <HAL_PCD_MspInit+0xec>)
 800173a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001744:	bf00      	nop
 8001746:	37b8      	adds	r7, #184	; 0xb8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40023800 	.word	0x40023800
 8001750:	40020000 	.word	0x40020000

08001754 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08e      	sub	sp, #56	; 0x38
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001764:	4b33      	ldr	r3, [pc, #204]	; (8001834 <HAL_InitTick+0xe0>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	4a32      	ldr	r2, [pc, #200]	; (8001834 <HAL_InitTick+0xe0>)
 800176a:	f043 0310 	orr.w	r3, r3, #16
 800176e:	6413      	str	r3, [r2, #64]	; 0x40
 8001770:	4b30      	ldr	r3, [pc, #192]	; (8001834 <HAL_InitTick+0xe0>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800177c:	f107 0210 	add.w	r2, r7, #16
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f003 f8b2 	bl	80048f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001792:	2b00      	cmp	r3, #0
 8001794:	d103      	bne.n	800179e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001796:	f003 f883 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 800179a:	6378      	str	r0, [r7, #52]	; 0x34
 800179c:	e004      	b.n	80017a8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800179e:	f003 f87f 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 80017a2:	4603      	mov	r3, r0
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017aa:	4a23      	ldr	r2, [pc, #140]	; (8001838 <HAL_InitTick+0xe4>)
 80017ac:	fba2 2303 	umull	r2, r3, r2, r3
 80017b0:	0c9b      	lsrs	r3, r3, #18
 80017b2:	3b01      	subs	r3, #1
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017b6:	4b21      	ldr	r3, [pc, #132]	; (800183c <HAL_InitTick+0xe8>)
 80017b8:	4a21      	ldr	r2, [pc, #132]	; (8001840 <HAL_InitTick+0xec>)
 80017ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <HAL_InitTick+0xe8>)
 80017be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017c4:	4a1d      	ldr	r2, [pc, #116]	; (800183c <HAL_InitTick+0xe8>)
 80017c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <HAL_InitTick+0xe8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d0:	4b1a      	ldr	r3, [pc, #104]	; (800183c <HAL_InitTick+0xe8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <HAL_InitTick+0xe8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80017dc:	4817      	ldr	r0, [pc, #92]	; (800183c <HAL_InitTick+0xe8>)
 80017de:	f004 fa63 	bl	8005ca8 <HAL_TIM_Base_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80017e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d11b      	bne.n	8001828 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017f0:	4812      	ldr	r0, [pc, #72]	; (800183c <HAL_InitTick+0xe8>)
 80017f2:	f004 fabb 	bl	8005d6c <HAL_TIM_Base_Start_IT>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80017fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001800:	2b00      	cmp	r3, #0
 8001802:	d111      	bne.n	8001828 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001804:	2036      	movs	r0, #54	; 0x36
 8001806:	f000 fc03 	bl	8002010 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b0f      	cmp	r3, #15
 800180e:	d808      	bhi.n	8001822 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001810:	2200      	movs	r2, #0
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	2036      	movs	r0, #54	; 0x36
 8001816:	f000 fbdf 	bl	8001fd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <HAL_InitTick+0xf0>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	e002      	b.n	8001828 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001828:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800182c:	4618      	mov	r0, r3
 800182e:	3738      	adds	r7, #56	; 0x38
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40023800 	.word	0x40023800
 8001838:	431bde83 	.word	0x431bde83
 800183c:	200019e4 	.word	0x200019e4
 8001840:	40001000 	.word	0x40001000
 8001844:	20000004 	.word	0x20000004

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800184c:	e7fe      	b.n	800184c <NMI_Handler+0x4>

0800184e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <HardFault_Handler+0x4>

08001854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <MemManage_Handler+0x4>

0800185a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <BusFault_Handler+0x4>

08001860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <UsageFault_Handler+0x4>

08001866 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <SPI1_IRQHandler+0x10>)
 800187a:	f003 fe17 	bl	80054ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20001314 	.word	0x20001314

08001888 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <TIM6_DAC_IRQHandler+0x10>)
 800188e:	f004 fae5 	bl	8005e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200019e4 	.word	0x200019e4

0800189c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <ETH_IRQHandler+0x10>)
 80018a2:	f000 ffe9 	bl	8002878 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20006418 	.word	0x20006418

080018b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return 1;
 80018b4:	2301      	movs	r3, #1
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_kill>:

int _kill(int pid, int sig)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <_kill+0x20>)
 80018cc:	2216      	movs	r2, #22
 80018ce:	601a      	str	r2, [r3, #0]
  return -1;
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	20011520 	.word	0x20011520

080018e4 <_exit>:

void _exit (int status)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ffe5 	bl	80018c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018f6:	e7fe      	b.n	80018f6 <_exit+0x12>

080018f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e00a      	b.n	8001920 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800190a:	f3af 8000 	nop.w
 800190e:	4601      	mov	r1, r0
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	60ba      	str	r2, [r7, #8]
 8001916:	b2ca      	uxtb	r2, r1
 8001918:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3301      	adds	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	429a      	cmp	r2, r3
 8001926:	dbf0      	blt.n	800190a <_read+0x12>
  }

  return len;
 8001928:	687b      	ldr	r3, [r7, #4]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e009      	b.n	8001958 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	60ba      	str	r2, [r7, #8]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	dbf1      	blt.n	8001944 <_write+0x12>
  }
  return len;
 8001960:	687b      	ldr	r3, [r7, #4]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_close>:

int _close(int file)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001992:	605a      	str	r2, [r3, #4]
  return 0;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <_isatty>:

int _isatty(int file)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019aa:	2301      	movs	r3, #1
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019dc:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <_sbrk+0x5c>)
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <_sbrk+0x60>)
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <_sbrk+0x64>)
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <_sbrk+0x68>)
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d205      	bcs.n	8001a10 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <_sbrk+0x6c>)
 8001a06:	220c      	movs	r2, #12
 8001a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a0e:	e009      	b.n	8001a24 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a06      	ldr	r2, [pc, #24]	; (8001a38 <_sbrk+0x64>)
 8001a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	371c      	adds	r7, #28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	20080000 	.word	0x20080000
 8001a34:	00000400 	.word	0x00000400
 8001a38:	20001a30 	.word	0x20001a30
 8001a3c:	20011530 	.word	0x20011530
 8001a40:	20011520 	.word	0x20011520

08001a44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <SystemInit+0x20>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <SystemInit+0x20>)
 8001a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a6c:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a6e:	490e      	ldr	r1, [pc, #56]	; (8001aa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a70:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a74:	e002      	b.n	8001a7c <LoopCopyDataInit>

08001a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7a:	3304      	adds	r3, #4

08001a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a80:	d3f9      	bcc.n	8001a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a82:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a84:	4c0b      	ldr	r4, [pc, #44]	; (8001ab4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a88:	e001      	b.n	8001a8e <LoopFillZerobss>

08001a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a8c:	3204      	adds	r2, #4

08001a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a90:	d3fb      	bcc.n	8001a8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a92:	f7ff ffd7 	bl	8001a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a96:	f01b fd79 	bl	801d58c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9a:	f7fe ffa5 	bl	80009e8 <main>
  bx  lr    
 8001a9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001aa0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001aac:	080224e8 	.word	0x080224e8
  ldr r2, =_sbss
 8001ab0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ab4:	20011530 	.word	0x20011530

08001ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab8:	e7fe      	b.n	8001ab8 <ADC_IRQHandler>

08001aba <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00b      	beq.n	8001ae2 <LAN8742_RegisterBusIO+0x28>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <LAN8742_RegisterBusIO+0x28>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <LAN8742_RegisterBusIO+0x28>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d102      	bne.n	8001ae8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ae6:	e014      	b.n	8001b12 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d17c      	bne.n	8001c38 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e01c      	b.n	8001b92 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	f107 0208 	add.w	r2, r7, #8
 8001b60:	2112      	movs	r1, #18
 8001b62:	6978      	ldr	r0, [r7, #20]
 8001b64:	4798      	blx	r3
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	da03      	bge.n	8001b74 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001b6c:	f06f 0304 	mvn.w	r3, #4
 8001b70:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001b72:	e00b      	b.n	8001b8c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 031f 	and.w	r3, r3, #31
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d105      	bne.n	8001b8c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
         break;
 8001b8a:	e005      	b.n	8001b98 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	2b1f      	cmp	r3, #31
 8001b96:	d9df      	bls.n	8001b58 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b1f      	cmp	r3, #31
 8001b9e:	d902      	bls.n	8001ba6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001ba0:	f06f 0302 	mvn.w	r3, #2
 8001ba4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d145      	bne.n	8001c38 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6810      	ldr	r0, [r2, #0]
 8001bb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4798      	blx	r3
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	db37      	blt.n	8001c32 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6810      	ldr	r0, [r2, #0]
 8001bca:	f107 0208 	add.w	r2, r7, #8
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4798      	blx	r3
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db28      	blt.n	8001c2a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4798      	blx	r3
 8001bde:	4603      	mov	r3, r0
 8001be0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001be2:	e01c      	b.n	8001c1e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4798      	blx	r3
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bf6:	d80e      	bhi.n	8001c16 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6810      	ldr	r0, [r2, #0]
 8001c00:	f107 0208 	add.w	r2, r7, #8
 8001c04:	2100      	movs	r1, #0
 8001c06:	4798      	blx	r3
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	da07      	bge.n	8001c1e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001c0e:	f06f 0304 	mvn.w	r3, #4
 8001c12:	613b      	str	r3, [r7, #16]
                 break;
 8001c14:	e010      	b.n	8001c38 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001c16:	f06f 0301 	mvn.w	r3, #1
 8001c1a:	613b      	str	r3, [r7, #16]
               break;
 8001c1c:	e00c      	b.n	8001c38 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1dd      	bne.n	8001be4 <LAN8742_Init+0xc6>
 8001c28:	e006      	b.n	8001c38 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001c2a:	f06f 0304 	mvn.w	r3, #4
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	e002      	b.n	8001c38 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001c32:	f06f 0303 	mvn.w	r3, #3
 8001c36:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d112      	bne.n	8001c64 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	4798      	blx	r3
 8001c44:	4603      	mov	r3, r0
 8001c46:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001c48:	bf00      	nop
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	4798      	blx	r3
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c5c:	d9f5      	bls.n	8001c4a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001c64:	693b      	ldr	r3, [r7, #16]
 }
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6810      	ldr	r0, [r2, #0]
 8001c82:	f107 020c 	add.w	r2, r7, #12
 8001c86:	2101      	movs	r1, #1
 8001c88:	4798      	blx	r3
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da02      	bge.n	8001c96 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c90:	f06f 0304 	mvn.w	r3, #4
 8001c94:	e06e      	b.n	8001d74 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6810      	ldr	r0, [r2, #0]
 8001c9e:	f107 020c 	add.w	r2, r7, #12
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	4798      	blx	r3
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	da02      	bge.n	8001cb2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001cac:	f06f 0304 	mvn.w	r3, #4
 8001cb0:	e060      	b.n	8001d74 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e059      	b.n	8001d74 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6810      	ldr	r0, [r2, #0]
 8001cc8:	f107 020c 	add.w	r2, r7, #12
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4798      	blx	r3
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	da02      	bge.n	8001cdc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001cd6:	f06f 0304 	mvn.w	r3, #4
 8001cda:	e04b      	b.n	8001d74 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d11b      	bne.n	8001d1e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d006      	beq.n	8001cfe <LAN8742_GetLinkState+0x90>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e03a      	b.n	8001d74 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e033      	b.n	8001d74 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001d16:	2304      	movs	r3, #4
 8001d18:	e02c      	b.n	8001d74 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001d1a:	2305      	movs	r3, #5
 8001d1c:	e02a      	b.n	8001d74 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6810      	ldr	r0, [r2, #0]
 8001d26:	f107 020c 	add.w	r2, r7, #12
 8001d2a:	211f      	movs	r1, #31
 8001d2c:	4798      	blx	r3
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	da02      	bge.n	8001d3a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001d34:	f06f 0304 	mvn.w	r3, #4
 8001d38:	e01c      	b.n	8001d74 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001d44:	2306      	movs	r3, #6
 8001d46:	e015      	b.n	8001d74 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 031c 	and.w	r3, r3, #28
 8001d4e:	2b18      	cmp	r3, #24
 8001d50:	d101      	bne.n	8001d56 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001d52:	2302      	movs	r3, #2
 8001d54:	e00e      	b.n	8001d74 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f003 031c 	and.w	r3, r3, #28
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d101      	bne.n	8001d64 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e007      	b.n	8001d74 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 031c 	and.w	r3, r3, #28
 8001d6a:	2b14      	cmp	r3, #20
 8001d6c:	d101      	bne.n	8001d72 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001d6e:	2304      	movs	r3, #4
 8001d70:	e000      	b.n	8001d74 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001d72:	2305      	movs	r3, #5
    }				
  }
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d80:	2003      	movs	r0, #3
 8001d82:	f000 f91e 	bl	8001fc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d86:	200f      	movs	r0, #15
 8001d88:	f7ff fce4 	bl	8001754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d8c:	f7ff fb50 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_IncTick+0x20>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_IncTick+0x24>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <HAL_IncTick+0x24>)
 8001daa:	6013      	str	r3, [r2, #0]
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000008 	.word	0x20000008
 8001dbc:	20001a34 	.word	0x20001a34

08001dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <HAL_GetTick+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20001a34 	.word	0x20001a34

08001dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff ffee 	bl	8001dc0 <HAL_GetTick>
 8001de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001df0:	d005      	beq.n	8001dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <HAL_Delay+0x44>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dfe:	bf00      	nop
 8001e00:	f7ff ffde 	bl	8001dc0 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d8f7      	bhi.n	8001e00 <HAL_Delay+0x28>
  {
  }
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000008 	.word	0x20000008

08001e20 <__NVIC_SetPriorityGrouping>:
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <__NVIC_SetPriorityGrouping+0x40>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <__NVIC_SetPriorityGrouping+0x40>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00
 8001e64:	05fa0000 	.word	0x05fa0000

08001e68 <__NVIC_GetPriorityGrouping>:
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4907      	ldr	r1, [pc, #28]	; (8001ebc <__NVIC_EnableIRQ+0x38>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_DisableIRQ>:
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	db12      	blt.n	8001ef8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	f003 021f 	and.w	r2, r3, #31
 8001ed8:	490a      	ldr	r1, [pc, #40]	; (8001f04 <__NVIC_DisableIRQ+0x44>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	095b      	lsrs	r3, r3, #5
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ee6:	3320      	adds	r3, #32
 8001ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	bf00      	nop
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000e100 	.word	0xe000e100

08001f08 <__NVIC_SetPriority>:
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	6039      	str	r1, [r7, #0]
 8001f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	db0a      	blt.n	8001f32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	490c      	ldr	r1, [pc, #48]	; (8001f54 <__NVIC_SetPriority+0x4c>)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	0112      	lsls	r2, r2, #4
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f30:	e00a      	b.n	8001f48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4908      	ldr	r1, [pc, #32]	; (8001f58 <__NVIC_SetPriority+0x50>)
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	3b04      	subs	r3, #4
 8001f40:	0112      	lsls	r2, r2, #4
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	440b      	add	r3, r1
 8001f46:	761a      	strb	r2, [r3, #24]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000e100 	.word	0xe000e100
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <NVIC_EncodePriority>:
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b089      	sub	sp, #36	; 0x24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f1c3 0307 	rsb	r3, r3, #7
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	bf28      	it	cs
 8001f7a:	2304      	movcs	r3, #4
 8001f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3304      	adds	r3, #4
 8001f82:	2b06      	cmp	r3, #6
 8001f84:	d902      	bls.n	8001f8c <NVIC_EncodePriority+0x30>
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3b03      	subs	r3, #3
 8001f8a:	e000      	b.n	8001f8e <NVIC_EncodePriority+0x32>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43da      	mvns	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	43d9      	mvns	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	4313      	orrs	r3, r2
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3724      	adds	r7, #36	; 0x24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ff28 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fea:	f7ff ff3d 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	68b9      	ldr	r1, [r7, #8]
 8001ff4:	6978      	ldr	r0, [r7, #20]
 8001ff6:	f7ff ffb1 	bl	8001f5c <NVIC_EncodePriority>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff80 	bl	8001f08 <__NVIC_SetPriority>
}
 8002008:	bf00      	nop
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff ff30 	bl	8001e84 <__NVIC_EnableIRQ>
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff40 	bl	8001ec0 <__NVIC_DisableIRQ>
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800204c:	f3bf 8f5f 	dmb	sy
}
 8002050:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002052:	4b07      	ldr	r3, [pc, #28]	; (8002070 <HAL_MPU_Disable+0x28>)
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	4a06      	ldr	r2, [pc, #24]	; (8002070 <HAL_MPU_Disable+0x28>)
 8002058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_MPU_Disable+0x2c>)
 8002060:	2200      	movs	r2, #0
 8002062:	605a      	str	r2, [r3, #4]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000ed00 	.word	0xe000ed00
 8002074:	e000ed90 	.word	0xe000ed90

08002078 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002080:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <HAL_MPU_Enable+0x38>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_MPU_Enable+0x3c>)
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	4a09      	ldr	r2, [pc, #36]	; (80020b4 <HAL_MPU_Enable+0x3c>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002094:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002096:	f3bf 8f4f 	dsb	sy
}
 800209a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800209c:	f3bf 8f6f 	isb	sy
}
 80020a0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000ed90 	.word	0xe000ed90
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	785a      	ldrb	r2, [r3, #1]
 80020c4:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_MPU_ConfigRegion+0x84>)
 80020c6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d029      	beq.n	8002124 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80020d0:	4a1a      	ldr	r2, [pc, #104]	; (800213c <HAL_MPU_ConfigRegion+0x84>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	7b1b      	ldrb	r3, [r3, #12]
 80020dc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7adb      	ldrb	r3, [r3, #11]
 80020e2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7a9b      	ldrb	r3, [r3, #10]
 80020ea:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80020ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	7b5b      	ldrb	r3, [r3, #13]
 80020f2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80020f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7b9b      	ldrb	r3, [r3, #14]
 80020fa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80020fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	7bdb      	ldrb	r3, [r3, #15]
 8002102:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002104:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	7a5b      	ldrb	r3, [r3, #9]
 800210a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800210c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7a1b      	ldrb	r3, [r3, #8]
 8002112:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002114:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	7812      	ldrb	r2, [r2, #0]
 800211a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800211c:	4a07      	ldr	r2, [pc, #28]	; (800213c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800211e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002120:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002122:	e005      	b.n	8002130 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <HAL_MPU_ConfigRegion+0x84>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800212a:	4b04      	ldr	r3, [pc, #16]	; (800213c <HAL_MPU_ConfigRegion+0x84>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000ed90 	.word	0xe000ed90

08002140 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d004      	beq.n	800215e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2280      	movs	r2, #128	; 0x80
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e00c      	b.n	8002178 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2205      	movs	r2, #5
 8002162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0201 	bic.w	r2, r2, #1
 8002174:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e06a      	b.n	800226c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800219c:	2b00      	cmp	r3, #0
 800219e:	d106      	bne.n	80021ae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2223      	movs	r2, #35	; 0x23
 80021a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f005 fbd1 	bl	8007950 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ae:	4b31      	ldr	r3, [pc, #196]	; (8002274 <HAL_ETH_Init+0xf0>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	4a30      	ldr	r2, [pc, #192]	; (8002274 <HAL_ETH_Init+0xf0>)
 80021b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ba:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <HAL_ETH_Init+0xf0>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80021c6:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <HAL_ETH_Init+0xf4>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4a2b      	ldr	r2, [pc, #172]	; (8002278 <HAL_ETH_Init+0xf4>)
 80021cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021d0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80021d2:	4b29      	ldr	r3, [pc, #164]	; (8002278 <HAL_ETH_Init+0xf4>)
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	4927      	ldr	r1, [pc, #156]	; (8002278 <HAL_ETH_Init+0xf4>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <HAL_ETH_Init+0xf4>)
 80021e2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021fc:	f7ff fde0 	bl	8001dc0 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002202:	e011      	b.n	8002228 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002204:	f7ff fddc 	bl	8001dc0 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002212:	d909      	bls.n	8002228 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2204      	movs	r2, #4
 8002218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	22e0      	movs	r2, #224	; 0xe0
 8002220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e021      	b.n	800226c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1e4      	bne.n	8002204 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 ff4c 	bl	80030d8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fff3 	bl	800322c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f001 f849 	bl	80032de <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	461a      	mov	r2, r3
 8002252:	2100      	movs	r1, #0
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 ffb1 	bl	80031bc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2210      	movs	r2, #16
 8002266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40023800 	.word	0x40023800
 8002278:	40013800 	.word	0x40013800

0800227c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800228a:	2b10      	cmp	r3, #16
 800228c:	d17b      	bne.n	8002386 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2223      	movs	r2, #35	; 0x23
 8002292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80022aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b35      	ldr	r3, [pc, #212]	; (8002390 <HAL_ETH_Start_IT+0x114>)
 80022ba:	430b      	orrs	r3, r1
 80022bc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80022d0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2204      	movs	r2, #4
 80022d8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f9fc 	bl	80026d8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0208 	orr.w	r2, r2, #8
 80022ee:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f8:	2001      	movs	r0, #1
 80022fa:	f7ff fd6d 	bl	8001dd8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 0204 	orr.w	r2, r2, #4
 8002314:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800231e:	2001      	movs	r0, #1
 8002320:	f7ff fd5a 	bl	8001dd8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fd74 	bl	8002e1a <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002344:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002348:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002360:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800236a:	69d9      	ldr	r1, [r3, #28]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <HAL_ETH_Start_IT+0x118>)
 8002372:	430b      	orrs	r3, r1
 8002374:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002378:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2223      	movs	r2, #35	; 0x23
 800237e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	e000      	b.n	8002388 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
  }
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	00020060 	.word	0x00020060
 8002394:	0001a0c1 	.word	0x0001a0c1

08002398 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023a6:	2b23      	cmp	r3, #35	; 0x23
 80023a8:	d16e      	bne.n	8002488 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2223      	movs	r2, #35	; 0x23
 80023ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ba:	69d9      	ldr	r1, [r3, #28]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4b34      	ldr	r3, [pc, #208]	; (8002494 <HAL_ETH_Stop_IT+0xfc>)
 80023c2:	400b      	ands	r3, r1
 80023c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023c8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023e0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	f023 0302 	bic.w	r3, r3, #2
 80023f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023f8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0204 	bic.w	r2, r2, #4
 8002408:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002412:	2001      	movs	r0, #1
 8002414:	f7ff fce0 	bl	8001dd8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fcfa 	bl	8002e1a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0208 	bic.w	r2, r2, #8
 8002434:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800243e:	2001      	movs	r0, #1
 8002440:	f7ff fcca 	bl	8001dd8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	e00e      	b.n	8002470 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	3212      	adds	r2, #18
 8002458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	3301      	adds	r3, #1
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2b03      	cmp	r3, #3
 8002474:	d9ed      	bls.n	8002452 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2210      	movs	r2, #16
 8002480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	e000      	b.n	800248a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
  }
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	fffe5f3e 	.word	0xfffe5f3e

08002498 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d109      	bne.n	80024bc <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f043 0201 	orr.w	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e045      	b.n	8002548 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c2:	2b23      	cmp	r3, #35	; 0x23
 80024c4:	d13f      	bne.n	8002546 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80024ce:	2201      	movs	r2, #1
 80024d0:	6839      	ldr	r1, [r7, #0]
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 ff70 	bl	80033b8 <ETH_Prepare_Tx_Descriptors>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d009      	beq.n	80024f2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e4:	f043 0202 	orr.w	r2, r3, #2
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e02a      	b.n	8002548 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80024f2:	f3bf 8f4f 	dsb	sy
}
 80024f6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	629a      	str	r2, [r3, #40]	; 0x28
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002506:	2b03      	cmp	r3, #3
 8002508:	d904      	bls.n	8002514 <HAL_ETH_Transmit_IT+0x7c>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	1f1a      	subs	r2, r3, #4
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00d      	beq.n	8002542 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800252e:	461a      	mov	r2, r3
 8002530:	2304      	movs	r3, #4
 8002532:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800253c:	461a      	mov	r2, r3
 800253e:	2300      	movs	r3, #0
 8002540:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
  }
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	f043 0201 	orr.w	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0a8      	b.n	80026ce <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002582:	2b23      	cmp	r3, #35	; 0x23
 8002584:	d001      	beq.n	800258a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e0a1      	b.n	80026ce <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	3212      	adds	r2, #18
 8002596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a0:	f1c3 0304 	rsb	r3, r3, #4
 80025a4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80025a6:	e06a      	b.n	800267e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d007      	beq.n	80025c4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	699a      	ldr	r2, [r3, #24]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d103      	bne.n	80025d8 <HAL_ETH_ReadData+0x88>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d040      	beq.n	800265a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00c      	beq.n	800261c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	0c1b      	lsrs	r3, r3, #16
 8002608:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800260c:	3b04      	subs	r3, #4
 800260e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002634:	461a      	mov	r2, r3
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	b29b      	uxth	r3, r3
 800263a:	f005 fb55 	bl	8007ce8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	441a      	add	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2200      	movs	r2, #0
 8002658:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3301      	adds	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	2b03      	cmp	r3, #3
 8002664:	d902      	bls.n	800266c <HAL_ETH_ReadData+0x11c>
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3b04      	subs	r3, #4
 800266a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	3212      	adds	r2, #18
 8002672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002676:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3301      	adds	r3, #1
 800267c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	db06      	blt.n	8002694 <HAL_ETH_ReadData+0x144>
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	429a      	cmp	r2, r3
 800268c:	d202      	bcs.n	8002694 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d089      	beq.n	80025a8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	441a      	add	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f815 	bl	80026d8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d108      	bne.n	80026cc <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80026e4:	2301      	movs	r3, #1
 80026e6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ec:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	3212      	adds	r2, #18
 80026f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026fe:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002700:	e040      	b.n	8002784 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d112      	bne.n	8002730 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800270a:	f107 030c 	add.w	r3, r7, #12
 800270e:	4618      	mov	r0, r3
 8002710:	f005 faba 	bl	8007c88 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d102      	bne.n	8002720 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	74fb      	strb	r3, [r7, #19]
 800271e:	e007      	b.n	8002730 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	461a      	mov	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	461a      	mov	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d026      	beq.n	8002784 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	2b00      	cmp	r3, #0
 800273c:	d103      	bne.n	8002746 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <ETH_UpdateDescriptor+0xe4>)
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	e003      	b.n	800274e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800274c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 800274e:	f3bf 8f5f 	dmb	sy
}
 8002752:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	3301      	adds	r3, #1
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d902      	bls.n	8002772 <ETH_UpdateDescriptor+0x9a>
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	3b04      	subs	r3, #4
 8002770:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	3212      	adds	r2, #18
 8002778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277c:	617b      	str	r3, [r7, #20]
      desccount--;
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	3b01      	subs	r3, #1
 8002782:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <ETH_UpdateDescriptor+0xb8>
 800278a:	7cfb      	ldrb	r3, [r7, #19]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1b8      	bne.n	8002702 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	429a      	cmp	r2, r3
 8002798:	d00c      	beq.n	80027b4 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a2:	461a      	mov	r2, r3
 80027a4:	2300      	movs	r3, #0
 80027a6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80027b4:	bf00      	nop
 80027b6:	3720      	adds	r7, #32
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	80004600 	.word	0x80004600

080027c0 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3318      	adds	r3, #24
 80027cc:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80027de:	e03f      	b.n	8002860 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	3304      	adds	r3, #4
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	3301      	adds	r3, #1
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002808:	7bbb      	ldrb	r3, [r7, #14]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d028      	beq.n	8002860 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68d9      	ldr	r1, [r3, #12]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	db1b      	blt.n	800285c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	3304      	adds	r3, #4
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4618      	mov	r0, r3
 8002832:	f005 fa9b 	bl	8007d6c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	3304      	adds	r3, #4
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	2200      	movs	r2, #0
 8002842:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	3301      	adds	r3, #1
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	62da      	str	r2, [r3, #44]	; 0x2c
 800285a:	e001      	b.n	8002860 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_ETH_ReleaseTxPacket+0xac>
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1b9      	bne.n	80027e0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288e:	2b40      	cmp	r3, #64	; 0x40
 8002890:	d112      	bne.n	80028b8 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a0:	2b40      	cmp	r3, #64	; 0x40
 80028a2:	d109      	bne.n	80028b8 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b50      	ldr	r3, [pc, #320]	; (80029f0 <HAL_ETH_IRQHandler+0x178>)
 80028b0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f004 fdb0 	bl	8007418 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d113      	bne.n	80028f2 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d10a      	bne.n	80028f2 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e4:	461a      	mov	r2, r3
 80028e6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80028ea:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f004 fda3 	bl	8007438 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002904:	d14c      	bne.n	80029a0 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002918:	d142      	bne.n	80029a0 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002920:	f043 0208 	orr.w	r2, r3, #8
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800293c:	d11a      	bne.n	8002974 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	4b2a      	ldr	r3, [pc, #168]	; (80029f4 <HAL_ETH_IRQHandler+0x17c>)
 800294a:	4013      	ands	r3, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002964:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002968:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	22e0      	movs	r2, #224	; 0xe0
 800296e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002972:	e012      	b.n	800299a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	f248 6380 	movw	r3, #34432	; 0x8680
 8002982:	4013      	ands	r3, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002992:	461a      	mov	r2, r3
 8002994:	f248 6380 	movw	r3, #34432	; 0x8680
 8002998:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f004 fd5c 	bl	8007458 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d10e      	bne.n	80029cc <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f81c 	bl	80029fc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_ETH_IRQHandler+0x180>)
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d006      	beq.n	80029e6 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80029d8:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <HAL_ETH_IRQHandler+0x180>)
 80029da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80029de:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f815 	bl	8002a10 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	00010040 	.word	0x00010040
 80029f4:	007e2000 	.word	0x007e2000
 80029f8:	40013c00 	.word	0x40013c00

080029fc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f003 031c 	and.w	r3, r3, #28
 8002a40:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	02db      	lsls	r3, r3, #11
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	019b      	lsls	r3, r3, #6
 8002a52:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f023 0302 	bic.w	r3, r3, #2
 8002a62:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002a74:	f7ff f9a4 	bl	8001dc0 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a7a:	e00d      	b.n	8002a98 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002a7c:	f7ff f9a0 	bl	8001dc0 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8a:	d301      	bcc.n	8002a90 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e010      	b.n	8002ab2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1ec      	bne.n	8002a7c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f003 031c 	and.w	r3, r3, #28
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	02db      	lsls	r3, r3, #11
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	019b      	lsls	r3, r3, #6
 8002ae8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f043 0302 	orr.w	r3, r3, #2
 8002af8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b14:	f7ff f954 	bl	8001dc0 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b1a:	e00d      	b.n	8002b38 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002b1c:	f7ff f950 	bl	8001dc0 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2a:	d301      	bcc.n	8002b30 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e009      	b.n	8002b44 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1ec      	bne.n	8002b1c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0d9      	b.n	8002d14 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bf14      	ite	ne
 8002b6e:	2301      	movne	r3, #1
 8002b70:	2300      	moveq	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	bf0c      	ite	eq
 8002c1e:	2301      	moveq	r3, #1
 8002c20:	2300      	movne	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	461a      	mov	r2, r3
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	bf14      	ite	ne
 8002c52:	2301      	movne	r3, #1
 8002c54:	2300      	moveq	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	bf14      	ite	ne
 8002c7a:	2301      	movne	r3, #1
 8002c7c:	2300      	moveq	r3, #0
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	461a      	mov	r2, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf14      	ite	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	2300      	moveq	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bf0c      	ite	eq
 8002cb0:	2301      	moveq	r3, #1
 8002cb2:	2300      	movne	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	0c1b      	lsrs	r3, r3, #16
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bf14      	ite	ne
 8002ce8:	2301      	movne	r3, #1
 8002cea:	2300      	moveq	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e00b      	b.n	8002d4c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d3a:	2b10      	cmp	r3, #16
 8002d3c:	d105      	bne.n	8002d4a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002d3e:	6839      	ldr	r1, [r7, #0]
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f88f 	bl	8002e64 <ETH_SetMACConfig>

    return HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e000      	b.n	8002d4c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
  }
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 031c 	bic.w	r3, r3, #28
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d6c:	f001 fd8c 	bl	8004888 <HAL_RCC_GetHCLKFreq>
 8002d70:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	4a1d      	ldr	r2, [pc, #116]	; (8002dec <HAL_ETH_SetMDIOClockRange+0x98>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d908      	bls.n	8002d8c <HAL_ETH_SetMDIOClockRange+0x38>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4a1c      	ldr	r2, [pc, #112]	; (8002df0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d804      	bhi.n	8002d8c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f043 0308 	orr.w	r3, r3, #8
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	e027      	b.n	8002ddc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4a18      	ldr	r2, [pc, #96]	; (8002df0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d908      	bls.n	8002da6 <HAL_ETH_SetMDIOClockRange+0x52>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4a17      	ldr	r2, [pc, #92]	; (8002df4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d204      	bcs.n	8002da6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f043 030c 	orr.w	r3, r3, #12
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	e01a      	b.n	8002ddc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d303      	bcc.n	8002db6 <HAL_ETH_SetMDIOClockRange+0x62>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	4a11      	ldr	r2, [pc, #68]	; (8002df8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d911      	bls.n	8002dda <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	4a0f      	ldr	r2, [pc, #60]	; (8002df8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d908      	bls.n	8002dd0 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	4a0e      	ldr	r2, [pc, #56]	; (8002dfc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d804      	bhi.n	8002dd0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f043 0304 	orr.w	r3, r3, #4
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	e005      	b.n	8002ddc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f043 0310 	orr.w	r3, r3, #16
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e000      	b.n	8002ddc <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002dda:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	611a      	str	r2, [r3, #16]
}
 8002de4:	bf00      	nop
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	01312cff 	.word	0x01312cff
 8002df0:	02160ebf 	.word	0x02160ebf
 8002df4:	03938700 	.word	0x03938700
 8002df8:	05f5e0ff 	.word	0x05f5e0ff
 8002dfc:	08f0d17f 	.word	0x08f0d17f

08002e00 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e3c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	f7fe ffc4 	bl	8001dd8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e5a:	6193      	str	r3, [r2, #24]
}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4b51      	ldr	r3, [pc, #324]	; (8002fc0 <ETH_SetMACConfig+0x15c>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	7c1b      	ldrb	r3, [r3, #16]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <ETH_SetMACConfig+0x28>
 8002e86:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002e8a:	e000      	b.n	8002e8e <ETH_SetMACConfig+0x2a>
 8002e8c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	7c5b      	ldrb	r3, [r3, #17]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d102      	bne.n	8002e9c <ETH_SetMACConfig+0x38>
 8002e96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e9a:	e000      	b.n	8002e9e <ETH_SetMACConfig+0x3a>
 8002e9c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e9e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ea4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	7fdb      	ldrb	r3, [r3, #31]
 8002eaa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002eac:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002eb2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	7f92      	ldrb	r2, [r2, #30]
 8002eb8:	2a00      	cmp	r2, #0
 8002eba:	d102      	bne.n	8002ec2 <ETH_SetMACConfig+0x5e>
 8002ebc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ec0:	e000      	b.n	8002ec4 <ETH_SetMACConfig+0x60>
 8002ec2:	2200      	movs	r2, #0
                        macconf->Speed |
 8002ec4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	7f1b      	ldrb	r3, [r3, #28]
 8002eca:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ecc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ed2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	791b      	ldrb	r3, [r3, #4]
 8002ed8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002eda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ee2:	2a00      	cmp	r2, #0
 8002ee4:	d102      	bne.n	8002eec <ETH_SetMACConfig+0x88>
 8002ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eea:	e000      	b.n	8002eee <ETH_SetMACConfig+0x8a>
 8002eec:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002eee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	7bdb      	ldrb	r3, [r3, #15]
 8002ef4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ef6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002efc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f04:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f06:	4313      	orrs	r3, r2
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f1e:	2001      	movs	r0, #1
 8002f20:	f7fe ff5a 	bl	8001dd8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f42:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002f4a:	2a00      	cmp	r2, #0
 8002f4c:	d101      	bne.n	8002f52 <ETH_SetMACConfig+0xee>
 8002f4e:	2280      	movs	r2, #128	; 0x80
 8002f50:	e000      	b.n	8002f54 <ETH_SetMACConfig+0xf0>
 8002f52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f54:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002f62:	2a01      	cmp	r2, #1
 8002f64:	d101      	bne.n	8002f6a <ETH_SetMACConfig+0x106>
 8002f66:	2208      	movs	r2, #8
 8002f68:	e000      	b.n	8002f6c <ETH_SetMACConfig+0x108>
 8002f6a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002f6c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002f74:	2a01      	cmp	r2, #1
 8002f76:	d101      	bne.n	8002f7c <ETH_SetMACConfig+0x118>
 8002f78:	2204      	movs	r2, #4
 8002f7a:	e000      	b.n	8002f7e <ETH_SetMACConfig+0x11a>
 8002f7c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002f86:	2a01      	cmp	r2, #1
 8002f88:	d101      	bne.n	8002f8e <ETH_SetMACConfig+0x12a>
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	e000      	b.n	8002f90 <ETH_SetMACConfig+0x12c>
 8002f8e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f90:	4313      	orrs	r3, r2
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fa8:	2001      	movs	r0, #1
 8002faa:	f7fe ff15 	bl	8001dd8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	619a      	str	r2, [r3, #24]
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	ff20810f 	.word	0xff20810f

08002fc4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4b3d      	ldr	r3, [pc, #244]	; (80030d4 <ETH_SetDMAConfig+0x110>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	7b1b      	ldrb	r3, [r3, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d102      	bne.n	8002ff0 <ETH_SetDMAConfig+0x2c>
 8002fea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fee:	e000      	b.n	8002ff2 <ETH_SetDMAConfig+0x2e>
 8002ff0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	7b5b      	ldrb	r3, [r3, #13]
 8002ff6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ff8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	7f52      	ldrb	r2, [r2, #29]
 8002ffe:	2a00      	cmp	r2, #0
 8003000:	d102      	bne.n	8003008 <ETH_SetDMAConfig+0x44>
 8003002:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003006:	e000      	b.n	800300a <ETH_SetDMAConfig+0x46>
 8003008:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800300a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	7b9b      	ldrb	r3, [r3, #14]
 8003010:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003012:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003018:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	7f1b      	ldrb	r3, [r3, #28]
 800301e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003020:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	7f9b      	ldrb	r3, [r3, #30]
 8003026:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003028:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800302e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003036:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003038:	4313      	orrs	r3, r2
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003048:	461a      	mov	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800305a:	2001      	movs	r0, #1
 800305c:	f7fe febc 	bl	8001dd8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003068:	461a      	mov	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	791b      	ldrb	r3, [r3, #4]
 8003072:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003078:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800307e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003084:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800308c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800308e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003096:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800309c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030aa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030b8:	2001      	movs	r0, #1
 80030ba:	f7fe fe8d 	bl	8001dd8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030c6:	461a      	mov	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6013      	str	r3, [r2, #0]
}
 80030cc:	bf00      	nop
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	f8de3f23 	.word	0xf8de3f23

080030d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b0a6      	sub	sp, #152	; 0x98
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80030e0:	2301      	movs	r3, #1
 80030e2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80030ec:	2300      	movs	r3, #0
 80030ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80030f0:	2300      	movs	r3, #0
 80030f2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003102:	2301      	movs	r3, #1
 8003104:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003108:	2300      	movs	r3, #0
 800310a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800310e:	2300      	movs	r3, #0
 8003110:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003114:	2300      	movs	r3, #0
 8003116:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003118:	2300      	movs	r3, #0
 800311a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800311e:	2300      	movs	r3, #0
 8003120:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003122:	2300      	movs	r3, #0
 8003124:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003128:	2300      	movs	r3, #0
 800312a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800312e:	2300      	movs	r3, #0
 8003130:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003134:	2300      	movs	r3, #0
 8003136:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800313a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800313e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003140:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003144:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003146:	2300      	movs	r3, #0
 8003148:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800314c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003150:	4619      	mov	r1, r3
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff fe86 	bl	8002e64 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003158:	2301      	movs	r3, #1
 800315a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800315c:	2301      	movs	r3, #1
 800315e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003160:	2301      	movs	r3, #1
 8003162:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003166:	2301      	movs	r3, #1
 8003168:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800316e:	2300      	movs	r3, #0
 8003170:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003174:	2300      	movs	r3, #0
 8003176:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800317a:	2300      	movs	r3, #0
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800317e:	2301      	movs	r3, #1
 8003180:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003184:	2301      	movs	r3, #1
 8003186:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800318c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800318e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003192:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003198:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800319a:	2301      	movs	r3, #1
 800319c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80031a8:	f107 0308 	add.w	r3, r7, #8
 80031ac:	4619      	mov	r1, r3
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff ff08 	bl	8002fc4 <ETH_SetDMAConfig>
}
 80031b4:	bf00      	nop
 80031b6:	3798      	adds	r7, #152	; 0x98
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3305      	adds	r3, #5
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	3204      	adds	r2, #4
 80031d4:	7812      	ldrb	r2, [r2, #0]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	4b11      	ldr	r3, [pc, #68]	; (8003224 <ETH_MACAddressConfig+0x68>)
 80031de:	4413      	add	r3, r2
 80031e0:	461a      	mov	r2, r3
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3303      	adds	r3, #3
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	061a      	lsls	r2, r3, #24
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3302      	adds	r3, #2
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	041b      	lsls	r3, r3, #16
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3301      	adds	r3, #1
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	021b      	lsls	r3, r3, #8
 8003200:	4313      	orrs	r3, r2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	7812      	ldrb	r2, [r2, #0]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <ETH_MACAddressConfig+0x6c>)
 800320e:	4413      	add	r3, r2
 8003210:	461a      	mov	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	6013      	str	r3, [r2, #0]
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40028040 	.word	0x40028040
 8003228:	40028044 	.word	0x40028044

0800322c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	e03e      	b.n	80032b8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68d9      	ldr	r1, [r3, #12]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2200      	movs	r2, #0
 8003256:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2200      	movs	r2, #0
 800325c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2200      	movs	r2, #0
 8003262:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	3206      	adds	r2, #6
 800326c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d80c      	bhi.n	800329c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68d9      	ldr	r1, [r3, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	440b      	add	r3, r1
 8003294:	461a      	mov	r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	e004      	b.n	80032a6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	461a      	mov	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3301      	adds	r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d9bd      	bls.n	800323a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032d0:	611a      	str	r2, [r3, #16]
}
 80032d2:	bf00      	nop
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80032de:	b480      	push	{r7}
 80032e0:	b085      	sub	sp, #20
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e046      	b.n	800337a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6919      	ldr	r1, [r3, #16]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	440b      	add	r3, r1
 80032fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2200      	movs	r2, #0
 8003308:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2200      	movs	r2, #0
 800330e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2200      	movs	r2, #0
 8003314:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2200      	movs	r2, #0
 800331a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2200      	movs	r2, #0
 8003320:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003328:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8003330:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800333e:	68b9      	ldr	r1, [r7, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	3212      	adds	r2, #18
 8003346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d80c      	bhi.n	800336a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6919      	ldr	r1, [r3, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	440b      	add	r3, r1
 8003362:	461a      	mov	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	60da      	str	r2, [r3, #12]
 8003368:	e004      	b.n	8003374 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	461a      	mov	r2, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3301      	adds	r3, #1
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b03      	cmp	r3, #3
 800337e:	d9b5      	bls.n	80032ec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691a      	ldr	r2, [r3, #16]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033aa:	60da      	str	r2, [r3, #12]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b08d      	sub	sp, #52	; 0x34
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3318      	adds	r3, #24
 80033c8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033fa:	d007      	beq.n	800340c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003400:	3304      	adds	r3, #4
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800340c:	2302      	movs	r3, #2
 800340e:	e0ff      	b.n	8003610 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	3301      	adds	r3, #1
 8003414:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	4b7d      	ldr	r3, [pc, #500]	; (800361c <ETH_Prepare_Tx_Descriptors+0x264>)
 8003426:	4013      	ands	r3, r2
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	6852      	ldr	r2, [r2, #4]
 800342c:	431a      	orrs	r2, r3
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d008      	beq.n	8003450 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	431a      	orrs	r2, r3
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	431a      	orrs	r2, r3
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003492:	f3bf 8f5f 	dmb	sy
}
 8003496:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80034a4:	e082      	b.n	80035ac <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d006      	beq.n	80034c6 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	e005      	b.n	80034d2 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80034d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d4:	3301      	adds	r3, #1
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d902      	bls.n	80034e4 <ETH_Prepare_Tx_Descriptors+0x12c>
 80034de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e0:	3b04      	subs	r3, #4
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ec:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003506:	d007      	beq.n	8003518 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350c:	3304      	adds	r3, #4
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d029      	beq.n	800356c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003524:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003526:	2300      	movs	r3, #0
 8003528:	62bb      	str	r3, [r7, #40]	; 0x28
 800352a:	e019      	b.n	8003560 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 800352c:	f3bf 8f5f 	dmb	sy
}
 8003530:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	3301      	adds	r3, #1
 8003542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	2b03      	cmp	r3, #3
 8003548:	d902      	bls.n	8003550 <ETH_Prepare_Tx_Descriptors+0x198>
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354c:	3b04      	subs	r3, #4
 800354e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003558:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	3301      	adds	r3, #1
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	429a      	cmp	r2, r3
 8003566:	d3e1      	bcc.n	800352c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8003568:	2302      	movs	r3, #2
 800356a:	e051      	b.n	8003610 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	3301      	adds	r3, #1
 8003570:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	4b25      	ldr	r3, [pc, #148]	; (800361c <ETH_Prepare_Tx_Descriptors+0x264>)
 8003588:	4013      	ands	r3, r2
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	6852      	ldr	r2, [r2, #4]
 800358e:	431a      	orrs	r2, r3
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	3301      	adds	r3, #1
 8003598:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800359a:	f3bf 8f5f 	dmb	sy
}
 800359e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f47f af78 	bne.w	80034a6 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d006      	beq.n	80035ca <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e005      	b.n	80035d6 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035e6:	6979      	ldr	r1, [r7, #20]
 80035e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ea:	3304      	adds	r3, #4
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80035f8:	b672      	cpsid	i
}
 80035fa:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	4413      	add	r3, r2
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800360a:	b662      	cpsie	i
}
 800360c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3734      	adds	r7, #52	; 0x34
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	ffffe000 	.word	0xffffe000

08003620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003620:	b480      	push	{r7}
 8003622:	b089      	sub	sp, #36	; 0x24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003632:	2300      	movs	r3, #0
 8003634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003636:	2300      	movs	r3, #0
 8003638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	e175      	b.n	800392c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003640:	2201      	movs	r2, #1
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4013      	ands	r3, r2
 8003652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	429a      	cmp	r2, r3
 800365a:	f040 8164 	bne.w	8003926 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b01      	cmp	r3, #1
 8003668:	d005      	beq.n	8003676 <HAL_GPIO_Init+0x56>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d130      	bne.n	80036d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	2203      	movs	r2, #3
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4013      	ands	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036ac:	2201      	movs	r2, #1
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 0201 	and.w	r2, r3, #1
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d017      	beq.n	8003714 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	2203      	movs	r2, #3
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d123      	bne.n	8003768 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	08da      	lsrs	r2, r3, #3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3208      	adds	r2, #8
 8003728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800372c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	220f      	movs	r2, #15
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	08da      	lsrs	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3208      	adds	r2, #8
 8003762:	69b9      	ldr	r1, [r7, #24]
 8003764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	2203      	movs	r2, #3
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 0203 	and.w	r2, r3, #3
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80be 	beq.w	8003926 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037aa:	4b66      	ldr	r3, [pc, #408]	; (8003944 <HAL_GPIO_Init+0x324>)
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	4a65      	ldr	r2, [pc, #404]	; (8003944 <HAL_GPIO_Init+0x324>)
 80037b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037b4:	6453      	str	r3, [r2, #68]	; 0x44
 80037b6:	4b63      	ldr	r3, [pc, #396]	; (8003944 <HAL_GPIO_Init+0x324>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037c2:	4a61      	ldr	r2, [pc, #388]	; (8003948 <HAL_GPIO_Init+0x328>)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	3302      	adds	r3, #2
 80037ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	220f      	movs	r2, #15
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4013      	ands	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a58      	ldr	r2, [pc, #352]	; (800394c <HAL_GPIO_Init+0x32c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d037      	beq.n	800385e <HAL_GPIO_Init+0x23e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a57      	ldr	r2, [pc, #348]	; (8003950 <HAL_GPIO_Init+0x330>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d031      	beq.n	800385a <HAL_GPIO_Init+0x23a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a56      	ldr	r2, [pc, #344]	; (8003954 <HAL_GPIO_Init+0x334>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d02b      	beq.n	8003856 <HAL_GPIO_Init+0x236>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a55      	ldr	r2, [pc, #340]	; (8003958 <HAL_GPIO_Init+0x338>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d025      	beq.n	8003852 <HAL_GPIO_Init+0x232>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a54      	ldr	r2, [pc, #336]	; (800395c <HAL_GPIO_Init+0x33c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d01f      	beq.n	800384e <HAL_GPIO_Init+0x22e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a53      	ldr	r2, [pc, #332]	; (8003960 <HAL_GPIO_Init+0x340>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d019      	beq.n	800384a <HAL_GPIO_Init+0x22a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a52      	ldr	r2, [pc, #328]	; (8003964 <HAL_GPIO_Init+0x344>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d013      	beq.n	8003846 <HAL_GPIO_Init+0x226>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a51      	ldr	r2, [pc, #324]	; (8003968 <HAL_GPIO_Init+0x348>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00d      	beq.n	8003842 <HAL_GPIO_Init+0x222>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a50      	ldr	r2, [pc, #320]	; (800396c <HAL_GPIO_Init+0x34c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d007      	beq.n	800383e <HAL_GPIO_Init+0x21e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a4f      	ldr	r2, [pc, #316]	; (8003970 <HAL_GPIO_Init+0x350>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d101      	bne.n	800383a <HAL_GPIO_Init+0x21a>
 8003836:	2309      	movs	r3, #9
 8003838:	e012      	b.n	8003860 <HAL_GPIO_Init+0x240>
 800383a:	230a      	movs	r3, #10
 800383c:	e010      	b.n	8003860 <HAL_GPIO_Init+0x240>
 800383e:	2308      	movs	r3, #8
 8003840:	e00e      	b.n	8003860 <HAL_GPIO_Init+0x240>
 8003842:	2307      	movs	r3, #7
 8003844:	e00c      	b.n	8003860 <HAL_GPIO_Init+0x240>
 8003846:	2306      	movs	r3, #6
 8003848:	e00a      	b.n	8003860 <HAL_GPIO_Init+0x240>
 800384a:	2305      	movs	r3, #5
 800384c:	e008      	b.n	8003860 <HAL_GPIO_Init+0x240>
 800384e:	2304      	movs	r3, #4
 8003850:	e006      	b.n	8003860 <HAL_GPIO_Init+0x240>
 8003852:	2303      	movs	r3, #3
 8003854:	e004      	b.n	8003860 <HAL_GPIO_Init+0x240>
 8003856:	2302      	movs	r3, #2
 8003858:	e002      	b.n	8003860 <HAL_GPIO_Init+0x240>
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <HAL_GPIO_Init+0x240>
 800385e:	2300      	movs	r3, #0
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	f002 0203 	and.w	r2, r2, #3
 8003866:	0092      	lsls	r2, r2, #2
 8003868:	4093      	lsls	r3, r2
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003870:	4935      	ldr	r1, [pc, #212]	; (8003948 <HAL_GPIO_Init+0x328>)
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	089b      	lsrs	r3, r3, #2
 8003876:	3302      	adds	r3, #2
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800387e:	4b3d      	ldr	r3, [pc, #244]	; (8003974 <HAL_GPIO_Init+0x354>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	43db      	mvns	r3, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4013      	ands	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038a2:	4a34      	ldr	r2, [pc, #208]	; (8003974 <HAL_GPIO_Init+0x354>)
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038a8:	4b32      	ldr	r3, [pc, #200]	; (8003974 <HAL_GPIO_Init+0x354>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038cc:	4a29      	ldr	r2, [pc, #164]	; (8003974 <HAL_GPIO_Init+0x354>)
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038d2:	4b28      	ldr	r3, [pc, #160]	; (8003974 <HAL_GPIO_Init+0x354>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	43db      	mvns	r3, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038f6:	4a1f      	ldr	r2, [pc, #124]	; (8003974 <HAL_GPIO_Init+0x354>)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038fc:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <HAL_GPIO_Init+0x354>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003920:	4a14      	ldr	r2, [pc, #80]	; (8003974 <HAL_GPIO_Init+0x354>)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	3301      	adds	r3, #1
 800392a:	61fb      	str	r3, [r7, #28]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	2b0f      	cmp	r3, #15
 8003930:	f67f ae86 	bls.w	8003640 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	3724      	adds	r7, #36	; 0x24
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800
 8003948:	40013800 	.word	0x40013800
 800394c:	40020000 	.word	0x40020000
 8003950:	40020400 	.word	0x40020400
 8003954:	40020800 	.word	0x40020800
 8003958:	40020c00 	.word	0x40020c00
 800395c:	40021000 	.word	0x40021000
 8003960:	40021400 	.word	0x40021400
 8003964:	40021800 	.word	0x40021800
 8003968:	40021c00 	.word	0x40021c00
 800396c:	40022000 	.word	0x40022000
 8003970:	40022400 	.word	0x40022400
 8003974:	40013c00 	.word	0x40013c00

08003978 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	e0d9      	b.n	8003b48 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003994:	2201      	movs	r2, #1
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4013      	ands	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	f040 80c9 	bne.w	8003b42 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80039b0:	4a6b      	ldr	r2, [pc, #428]	; (8003b60 <HAL_GPIO_DeInit+0x1e8>)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	089b      	lsrs	r3, r3, #2
 80039b6:	3302      	adds	r3, #2
 80039b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039bc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	220f      	movs	r2, #15
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	4013      	ands	r3, r2
 80039d0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a63      	ldr	r2, [pc, #396]	; (8003b64 <HAL_GPIO_DeInit+0x1ec>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d037      	beq.n	8003a4a <HAL_GPIO_DeInit+0xd2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a62      	ldr	r2, [pc, #392]	; (8003b68 <HAL_GPIO_DeInit+0x1f0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d031      	beq.n	8003a46 <HAL_GPIO_DeInit+0xce>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a61      	ldr	r2, [pc, #388]	; (8003b6c <HAL_GPIO_DeInit+0x1f4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d02b      	beq.n	8003a42 <HAL_GPIO_DeInit+0xca>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a60      	ldr	r2, [pc, #384]	; (8003b70 <HAL_GPIO_DeInit+0x1f8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d025      	beq.n	8003a3e <HAL_GPIO_DeInit+0xc6>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a5f      	ldr	r2, [pc, #380]	; (8003b74 <HAL_GPIO_DeInit+0x1fc>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d01f      	beq.n	8003a3a <HAL_GPIO_DeInit+0xc2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a5e      	ldr	r2, [pc, #376]	; (8003b78 <HAL_GPIO_DeInit+0x200>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d019      	beq.n	8003a36 <HAL_GPIO_DeInit+0xbe>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a5d      	ldr	r2, [pc, #372]	; (8003b7c <HAL_GPIO_DeInit+0x204>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d013      	beq.n	8003a32 <HAL_GPIO_DeInit+0xba>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a5c      	ldr	r2, [pc, #368]	; (8003b80 <HAL_GPIO_DeInit+0x208>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00d      	beq.n	8003a2e <HAL_GPIO_DeInit+0xb6>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a5b      	ldr	r2, [pc, #364]	; (8003b84 <HAL_GPIO_DeInit+0x20c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d007      	beq.n	8003a2a <HAL_GPIO_DeInit+0xb2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a5a      	ldr	r2, [pc, #360]	; (8003b88 <HAL_GPIO_DeInit+0x210>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d101      	bne.n	8003a26 <HAL_GPIO_DeInit+0xae>
 8003a22:	2309      	movs	r3, #9
 8003a24:	e012      	b.n	8003a4c <HAL_GPIO_DeInit+0xd4>
 8003a26:	230a      	movs	r3, #10
 8003a28:	e010      	b.n	8003a4c <HAL_GPIO_DeInit+0xd4>
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	e00e      	b.n	8003a4c <HAL_GPIO_DeInit+0xd4>
 8003a2e:	2307      	movs	r3, #7
 8003a30:	e00c      	b.n	8003a4c <HAL_GPIO_DeInit+0xd4>
 8003a32:	2306      	movs	r3, #6
 8003a34:	e00a      	b.n	8003a4c <HAL_GPIO_DeInit+0xd4>
 8003a36:	2305      	movs	r3, #5
 8003a38:	e008      	b.n	8003a4c <HAL_GPIO_DeInit+0xd4>
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	e006      	b.n	8003a4c <HAL_GPIO_DeInit+0xd4>
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e004      	b.n	8003a4c <HAL_GPIO_DeInit+0xd4>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e002      	b.n	8003a4c <HAL_GPIO_DeInit+0xd4>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <HAL_GPIO_DeInit+0xd4>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	f002 0203 	and.w	r2, r2, #3
 8003a52:	0092      	lsls	r2, r2, #2
 8003a54:	4093      	lsls	r3, r2
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d132      	bne.n	8003ac2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003a5c:	4b4b      	ldr	r3, [pc, #300]	; (8003b8c <HAL_GPIO_DeInit+0x214>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	43db      	mvns	r3, r3
 8003a64:	4949      	ldr	r1, [pc, #292]	; (8003b8c <HAL_GPIO_DeInit+0x214>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003a6a:	4b48      	ldr	r3, [pc, #288]	; (8003b8c <HAL_GPIO_DeInit+0x214>)
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	4946      	ldr	r1, [pc, #280]	; (8003b8c <HAL_GPIO_DeInit+0x214>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003a78:	4b44      	ldr	r3, [pc, #272]	; (8003b8c <HAL_GPIO_DeInit+0x214>)
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	4942      	ldr	r1, [pc, #264]	; (8003b8c <HAL_GPIO_DeInit+0x214>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003a86:	4b41      	ldr	r3, [pc, #260]	; (8003b8c <HAL_GPIO_DeInit+0x214>)
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	493f      	ldr	r1, [pc, #252]	; (8003b8c <HAL_GPIO_DeInit+0x214>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	220f      	movs	r2, #15
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003aa4:	4a2e      	ldr	r2, [pc, #184]	; (8003b60 <HAL_GPIO_DeInit+0x1e8>)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	089b      	lsrs	r3, r3, #2
 8003aaa:	3302      	adds	r3, #2
 8003aac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	43da      	mvns	r2, r3
 8003ab4:	482a      	ldr	r0, [pc, #168]	; (8003b60 <HAL_GPIO_DeInit+0x1e8>)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	089b      	lsrs	r3, r3, #2
 8003aba:	400a      	ands	r2, r1
 8003abc:	3302      	adds	r3, #2
 8003abe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	2103      	movs	r1, #3
 8003acc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	08da      	lsrs	r2, r3, #3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3208      	adds	r2, #8
 8003ae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	220f      	movs	r2, #15
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	08d2      	lsrs	r2, r2, #3
 8003af8:	4019      	ands	r1, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3208      	adds	r2, #8
 8003afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	2103      	movs	r1, #3
 8003b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	401a      	ands	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	fa01 f303 	lsl.w	r3, r1, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	401a      	ands	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	2103      	movs	r1, #3
 8003b36:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	401a      	ands	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	3301      	adds	r3, #1
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2b0f      	cmp	r3, #15
 8003b4c:	f67f af22 	bls.w	8003994 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40013800 	.word	0x40013800
 8003b64:	40020000 	.word	0x40020000
 8003b68:	40020400 	.word	0x40020400
 8003b6c:	40020800 	.word	0x40020800
 8003b70:	40020c00 	.word	0x40020c00
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40021400 	.word	0x40021400
 8003b7c:	40021800 	.word	0x40021800
 8003b80:	40021c00 	.word	0x40021c00
 8003b84:	40022000 	.word	0x40022000
 8003b88:	40022400 	.word	0x40022400
 8003b8c:	40013c00 	.word	0x40013c00

08003b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	807b      	strh	r3, [r7, #2]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba0:	787b      	ldrb	r3, [r7, #1]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ba6:	887a      	ldrh	r2, [r7, #2]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003bac:	e003      	b.n	8003bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003bae:	887b      	ldrh	r3, [r7, #2]
 8003bb0:	041a      	lsls	r2, r3, #16
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	619a      	str	r2, [r3, #24]
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b085      	sub	sp, #20
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bd4:	887a      	ldrh	r2, [r7, #2]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	041a      	lsls	r2, r3, #16
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	43d9      	mvns	r1, r3
 8003be0:	887b      	ldrh	r3, [r7, #2]
 8003be2:	400b      	ands	r3, r1
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	619a      	str	r2, [r3, #24]
}
 8003bea:	bf00      	nop
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf8:	b08f      	sub	sp, #60	; 0x3c
 8003bfa:	af0a      	add	r7, sp, #40	; 0x28
 8003bfc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e116      	b.n	8003e36 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fd fd1c 	bl	8001660 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d102      	bne.n	8003c42 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f002 ffce 	bl	8006be8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	603b      	str	r3, [r7, #0]
 8003c52:	687e      	ldr	r6, [r7, #4]
 8003c54:	466d      	mov	r5, sp
 8003c56:	f106 0410 	add.w	r4, r6, #16
 8003c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c66:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c6a:	1d33      	adds	r3, r6, #4
 8003c6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c6e:	6838      	ldr	r0, [r7, #0]
 8003c70:	f002 ff62 	bl	8006b38 <USB_CoreInit>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e0d7      	b.n	8003e36 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f002 ffbc 	bl	8006c0a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c92:	2300      	movs	r3, #0
 8003c94:	73fb      	strb	r3, [r7, #15]
 8003c96:	e04a      	b.n	8003d2e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c98:	7bfa      	ldrb	r2, [r7, #15]
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	333d      	adds	r3, #61	; 0x3d
 8003ca8:	2201      	movs	r2, #1
 8003caa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cac:	7bfa      	ldrb	r2, [r7, #15]
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	333c      	adds	r3, #60	; 0x3c
 8003cbc:	7bfa      	ldrb	r2, [r7, #15]
 8003cbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cc0:	7bfa      	ldrb	r2, [r7, #15]
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	b298      	uxth	r0, r3
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3344      	adds	r3, #68	; 0x44
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cd8:	7bfa      	ldrb	r2, [r7, #15]
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	3340      	adds	r3, #64	; 0x40
 8003ce8:	2200      	movs	r2, #0
 8003cea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cec:	7bfa      	ldrb	r2, [r7, #15]
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	3348      	adds	r3, #72	; 0x48
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d00:	7bfa      	ldrb	r2, [r7, #15]
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	334c      	adds	r3, #76	; 0x4c
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d14:	7bfa      	ldrb	r2, [r7, #15]
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	3354      	adds	r3, #84	; 0x54
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	73fb      	strb	r3, [r7, #15]
 8003d2e:	7bfa      	ldrb	r2, [r7, #15]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d3af      	bcc.n	8003c98 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	73fb      	strb	r3, [r7, #15]
 8003d3c:	e044      	b.n	8003dc8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d3e:	7bfa      	ldrb	r2, [r7, #15]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d54:	7bfa      	ldrb	r2, [r7, #15]
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003d66:	7bfa      	ldrb	r2, [r7, #15]
 8003d68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d6a:	7bfa      	ldrb	r2, [r7, #15]
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d80:	7bfa      	ldrb	r2, [r7, #15]
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	4413      	add	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d96:	7bfa      	ldrb	r2, [r7, #15]
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003dac:	7bfa      	ldrb	r2, [r7, #15]
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	4613      	mov	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
 8003dc8:	7bfa      	ldrb	r2, [r7, #15]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d3b5      	bcc.n	8003d3e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	687e      	ldr	r6, [r7, #4]
 8003dda:	466d      	mov	r5, sp
 8003ddc:	f106 0410 	add.w	r4, r6, #16
 8003de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003de6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003de8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dec:	e885 0003 	stmia.w	r5, {r0, r1}
 8003df0:	1d33      	adds	r3, r6, #4
 8003df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003df4:	6838      	ldr	r0, [r7, #0]
 8003df6:	f002 ff55 	bl	8006ca4 <USB_DevInit>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e014      	b.n	8003e36 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d102      	bne.n	8003e2a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f80b 	bl	8003e40 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f003 f913 	bl	800705a <USB_DevDisconnect>

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003e40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e6e:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_PCDEx_ActivateLPM+0x44>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	10000003 	.word	0x10000003

08003e88 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a04      	ldr	r2, [pc, #16]	; (8003ea4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e96:	6013      	str	r3, [r2, #0]
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40007000 	.word	0x40007000

08003ea8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003eb2:	4b23      	ldr	r3, [pc, #140]	; (8003f40 <HAL_PWREx_EnableOverDrive+0x98>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	4a22      	ldr	r2, [pc, #136]	; (8003f40 <HAL_PWREx_EnableOverDrive+0x98>)
 8003eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ebe:	4b20      	ldr	r3, [pc, #128]	; (8003f40 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003eca:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ed6:	f7fd ff73 	bl	8001dc0 <HAL_GetTick>
 8003eda:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003edc:	e009      	b.n	8003ef2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ede:	f7fd ff6f 	bl	8001dc0 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eec:	d901      	bls.n	8003ef2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e022      	b.n	8003f38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ef2:	4b14      	ldr	r3, [pc, #80]	; (8003f44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efe:	d1ee      	bne.n	8003ede <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f00:	4b10      	ldr	r3, [pc, #64]	; (8003f44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a0f      	ldr	r2, [pc, #60]	; (8003f44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f0c:	f7fd ff58 	bl	8001dc0 <HAL_GetTick>
 8003f10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f12:	e009      	b.n	8003f28 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f14:	f7fd ff54 	bl	8001dc0 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f22:	d901      	bls.n	8003f28 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e007      	b.n	8003f38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f28:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f34:	d1ee      	bne.n	8003f14 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40023800 	.word	0x40023800
 8003f44:	40007000 	.word	0x40007000

08003f48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f50:	2300      	movs	r3, #0
 8003f52:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e29b      	b.n	8004496 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 8087 	beq.w	800407a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f6c:	4b96      	ldr	r3, [pc, #600]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 030c 	and.w	r3, r3, #12
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d00c      	beq.n	8003f92 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f78:	4b93      	ldr	r3, [pc, #588]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d112      	bne.n	8003faa <HAL_RCC_OscConfig+0x62>
 8003f84:	4b90      	ldr	r3, [pc, #576]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f90:	d10b      	bne.n	8003faa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f92:	4b8d      	ldr	r3, [pc, #564]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d06c      	beq.n	8004078 <HAL_RCC_OscConfig+0x130>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d168      	bne.n	8004078 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e275      	b.n	8004496 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb2:	d106      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x7a>
 8003fb4:	4b84      	ldr	r3, [pc, #528]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a83      	ldr	r2, [pc, #524]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	e02e      	b.n	8004020 <HAL_RCC_OscConfig+0xd8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x9c>
 8003fca:	4b7f      	ldr	r3, [pc, #508]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a7e      	ldr	r2, [pc, #504]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b7c      	ldr	r3, [pc, #496]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a7b      	ldr	r2, [pc, #492]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003fdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e01d      	b.n	8004020 <HAL_RCC_OscConfig+0xd8>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fec:	d10c      	bne.n	8004008 <HAL_RCC_OscConfig+0xc0>
 8003fee:	4b76      	ldr	r3, [pc, #472]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a75      	ldr	r2, [pc, #468]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	4b73      	ldr	r3, [pc, #460]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a72      	ldr	r2, [pc, #456]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e00b      	b.n	8004020 <HAL_RCC_OscConfig+0xd8>
 8004008:	4b6f      	ldr	r3, [pc, #444]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a6e      	ldr	r2, [pc, #440]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 800400e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	4b6c      	ldr	r3, [pc, #432]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a6b      	ldr	r2, [pc, #428]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 800401a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d013      	beq.n	8004050 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fd feca 	bl	8001dc0 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004030:	f7fd fec6 	bl	8001dc0 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	; 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e229      	b.n	8004496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	4b61      	ldr	r3, [pc, #388]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0xe8>
 800404e:	e014      	b.n	800407a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fd feb6 	bl	8001dc0 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004058:	f7fd feb2 	bl	8001dc0 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b64      	cmp	r3, #100	; 0x64
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e215      	b.n	8004496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406a:	4b57      	ldr	r3, [pc, #348]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x110>
 8004076:	e000      	b.n	800407a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d069      	beq.n	800415a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004086:	4b50      	ldr	r3, [pc, #320]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00b      	beq.n	80040aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004092:	4b4d      	ldr	r3, [pc, #308]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 030c 	and.w	r3, r3, #12
 800409a:	2b08      	cmp	r3, #8
 800409c:	d11c      	bne.n	80040d8 <HAL_RCC_OscConfig+0x190>
 800409e:	4b4a      	ldr	r3, [pc, #296]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d116      	bne.n	80040d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040aa:	4b47      	ldr	r3, [pc, #284]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d005      	beq.n	80040c2 <HAL_RCC_OscConfig+0x17a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d001      	beq.n	80040c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e1e9      	b.n	8004496 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c2:	4b41      	ldr	r3, [pc, #260]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	493d      	ldr	r1, [pc, #244]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d6:	e040      	b.n	800415a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d023      	beq.n	8004128 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e0:	4b39      	ldr	r3, [pc, #228]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a38      	ldr	r2, [pc, #224]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 80040e6:	f043 0301 	orr.w	r3, r3, #1
 80040ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fd fe68 	bl	8001dc0 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f4:	f7fd fe64 	bl	8001dc0 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e1c7      	b.n	8004496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004106:	4b30      	ldr	r3, [pc, #192]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004112:	4b2d      	ldr	r3, [pc, #180]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4929      	ldr	r1, [pc, #164]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004122:	4313      	orrs	r3, r2
 8004124:	600b      	str	r3, [r1, #0]
 8004126:	e018      	b.n	800415a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004128:	4b27      	ldr	r3, [pc, #156]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 800412e:	f023 0301 	bic.w	r3, r3, #1
 8004132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fd fe44 	bl	8001dc0 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800413c:	f7fd fe40 	bl	8001dc0 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e1a3      	b.n	8004496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414e:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d038      	beq.n	80041d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d019      	beq.n	80041a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800416e:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004172:	4a15      	ldr	r2, [pc, #84]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417a:	f7fd fe21 	bl	8001dc0 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004182:	f7fd fe1d 	bl	8001dc0 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e180      	b.n	8004496 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0f0      	beq.n	8004182 <HAL_RCC_OscConfig+0x23a>
 80041a0:	e01a      	b.n	80041d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a2:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 80041a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a6:	4a08      	ldr	r2, [pc, #32]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 80041a8:	f023 0301 	bic.w	r3, r3, #1
 80041ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ae:	f7fd fe07 	bl	8001dc0 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b4:	e00a      	b.n	80041cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b6:	f7fd fe03 	bl	8001dc0 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d903      	bls.n	80041cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e166      	b.n	8004496 <HAL_RCC_OscConfig+0x54e>
 80041c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041cc:	4b92      	ldr	r3, [pc, #584]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 80041ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1ee      	bne.n	80041b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80a4 	beq.w	800432e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e6:	4b8c      	ldr	r3, [pc, #560]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10d      	bne.n	800420e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f2:	4b89      	ldr	r3, [pc, #548]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	4a88      	ldr	r2, [pc, #544]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 80041f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041fc:	6413      	str	r3, [r2, #64]	; 0x40
 80041fe:	4b86      	ldr	r3, [pc, #536]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004206:	60bb      	str	r3, [r7, #8]
 8004208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800420a:	2301      	movs	r3, #1
 800420c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800420e:	4b83      	ldr	r3, [pc, #524]	; (800441c <HAL_RCC_OscConfig+0x4d4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004216:	2b00      	cmp	r3, #0
 8004218:	d118      	bne.n	800424c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800421a:	4b80      	ldr	r3, [pc, #512]	; (800441c <HAL_RCC_OscConfig+0x4d4>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a7f      	ldr	r2, [pc, #508]	; (800441c <HAL_RCC_OscConfig+0x4d4>)
 8004220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004226:	f7fd fdcb 	bl	8001dc0 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422e:	f7fd fdc7 	bl	8001dc0 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b64      	cmp	r3, #100	; 0x64
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e12a      	b.n	8004496 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004240:	4b76      	ldr	r3, [pc, #472]	; (800441c <HAL_RCC_OscConfig+0x4d4>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0f0      	beq.n	800422e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d106      	bne.n	8004262 <HAL_RCC_OscConfig+0x31a>
 8004254:	4b70      	ldr	r3, [pc, #448]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 8004256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004258:	4a6f      	ldr	r2, [pc, #444]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	6713      	str	r3, [r2, #112]	; 0x70
 8004260:	e02d      	b.n	80042be <HAL_RCC_OscConfig+0x376>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10c      	bne.n	8004284 <HAL_RCC_OscConfig+0x33c>
 800426a:	4b6b      	ldr	r3, [pc, #428]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	4a6a      	ldr	r2, [pc, #424]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	6713      	str	r3, [r2, #112]	; 0x70
 8004276:	4b68      	ldr	r3, [pc, #416]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	4a67      	ldr	r2, [pc, #412]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 800427c:	f023 0304 	bic.w	r3, r3, #4
 8004280:	6713      	str	r3, [r2, #112]	; 0x70
 8004282:	e01c      	b.n	80042be <HAL_RCC_OscConfig+0x376>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b05      	cmp	r3, #5
 800428a:	d10c      	bne.n	80042a6 <HAL_RCC_OscConfig+0x35e>
 800428c:	4b62      	ldr	r3, [pc, #392]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	4a61      	ldr	r2, [pc, #388]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 8004292:	f043 0304 	orr.w	r3, r3, #4
 8004296:	6713      	str	r3, [r2, #112]	; 0x70
 8004298:	4b5f      	ldr	r3, [pc, #380]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	4a5e      	ldr	r2, [pc, #376]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6713      	str	r3, [r2, #112]	; 0x70
 80042a4:	e00b      	b.n	80042be <HAL_RCC_OscConfig+0x376>
 80042a6:	4b5c      	ldr	r3, [pc, #368]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	4a5b      	ldr	r2, [pc, #364]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	6713      	str	r3, [r2, #112]	; 0x70
 80042b2:	4b59      	ldr	r3, [pc, #356]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	4a58      	ldr	r2, [pc, #352]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 80042b8:	f023 0304 	bic.w	r3, r3, #4
 80042bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d015      	beq.n	80042f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c6:	f7fd fd7b 	bl	8001dc0 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042cc:	e00a      	b.n	80042e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ce:	f7fd fd77 	bl	8001dc0 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e0d8      	b.n	8004496 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e4:	4b4c      	ldr	r3, [pc, #304]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 80042e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0ee      	beq.n	80042ce <HAL_RCC_OscConfig+0x386>
 80042f0:	e014      	b.n	800431c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f2:	f7fd fd65 	bl	8001dc0 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f8:	e00a      	b.n	8004310 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fa:	f7fd fd61 	bl	8001dc0 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f241 3288 	movw	r2, #5000	; 0x1388
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e0c2      	b.n	8004496 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004310:	4b41      	ldr	r3, [pc, #260]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1ee      	bne.n	80042fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800431c:	7dfb      	ldrb	r3, [r7, #23]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d105      	bne.n	800432e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004322:	4b3d      	ldr	r3, [pc, #244]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	4a3c      	ldr	r2, [pc, #240]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 8004328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800432c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 80ae 	beq.w	8004494 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004338:	4b37      	ldr	r3, [pc, #220]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 030c 	and.w	r3, r3, #12
 8004340:	2b08      	cmp	r3, #8
 8004342:	d06d      	beq.n	8004420 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d14b      	bne.n	80043e4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434c:	4b32      	ldr	r3, [pc, #200]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a31      	ldr	r2, [pc, #196]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 8004352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fd fd32 	bl	8001dc0 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004360:	f7fd fd2e 	bl	8001dc0 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e091      	b.n	8004496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004372:	4b29      	ldr	r3, [pc, #164]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69da      	ldr	r2, [r3, #28]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	019b      	lsls	r3, r3, #6
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	085b      	lsrs	r3, r3, #1
 8004396:	3b01      	subs	r3, #1
 8004398:	041b      	lsls	r3, r3, #16
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	061b      	lsls	r3, r3, #24
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	071b      	lsls	r3, r3, #28
 80043aa:	491b      	ldr	r1, [pc, #108]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b0:	4b19      	ldr	r3, [pc, #100]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a18      	ldr	r2, [pc, #96]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 80043b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fd fd00 	bl	8001dc0 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c4:	f7fd fcfc 	bl	8001dc0 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e05f      	b.n	8004496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d6:	4b10      	ldr	r3, [pc, #64]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0x47c>
 80043e2:	e057      	b.n	8004494 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e4:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a0b      	ldr	r2, [pc, #44]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 80043ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fd fce6 	bl	8001dc0 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f8:	f7fd fce2 	bl	8001dc0 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e045      	b.n	8004496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440a:	4b03      	ldr	r3, [pc, #12]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x4b0>
 8004416:	e03d      	b.n	8004494 <HAL_RCC_OscConfig+0x54c>
 8004418:	40023800 	.word	0x40023800
 800441c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004420:	4b1f      	ldr	r3, [pc, #124]	; (80044a0 <HAL_RCC_OscConfig+0x558>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d030      	beq.n	8004490 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004438:	429a      	cmp	r2, r3
 800443a:	d129      	bne.n	8004490 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004446:	429a      	cmp	r2, r3
 8004448:	d122      	bne.n	8004490 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004450:	4013      	ands	r3, r2
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004456:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004458:	4293      	cmp	r3, r2
 800445a:	d119      	bne.n	8004490 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	085b      	lsrs	r3, r3, #1
 8004468:	3b01      	subs	r3, #1
 800446a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800446c:	429a      	cmp	r2, r3
 800446e:	d10f      	bne.n	8004490 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800447c:	429a      	cmp	r2, r3
 800447e:	d107      	bne.n	8004490 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d001      	beq.n	8004494 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40023800 	.word	0x40023800

080044a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e0d0      	b.n	800465e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044bc:	4b6a      	ldr	r3, [pc, #424]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 030f 	and.w	r3, r3, #15
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d910      	bls.n	80044ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ca:	4b67      	ldr	r3, [pc, #412]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f023 020f 	bic.w	r2, r3, #15
 80044d2:	4965      	ldr	r1, [pc, #404]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044da:	4b63      	ldr	r3, [pc, #396]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d001      	beq.n	80044ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0b8      	b.n	800465e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d020      	beq.n	800453a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004504:	4b59      	ldr	r3, [pc, #356]	; (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	4a58      	ldr	r2, [pc, #352]	; (800466c <HAL_RCC_ClockConfig+0x1c8>)
 800450a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800450e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800451c:	4b53      	ldr	r3, [pc, #332]	; (800466c <HAL_RCC_ClockConfig+0x1c8>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	4a52      	ldr	r2, [pc, #328]	; (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004522:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004526:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004528:	4b50      	ldr	r3, [pc, #320]	; (800466c <HAL_RCC_ClockConfig+0x1c8>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	494d      	ldr	r1, [pc, #308]	; (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004536:	4313      	orrs	r3, r2
 8004538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d040      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d107      	bne.n	800455e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454e:	4b47      	ldr	r3, [pc, #284]	; (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d115      	bne.n	8004586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e07f      	b.n	800465e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d107      	bne.n	8004576 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004566:	4b41      	ldr	r3, [pc, #260]	; (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e073      	b.n	800465e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004576:	4b3d      	ldr	r3, [pc, #244]	; (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e06b      	b.n	800465e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004586:	4b39      	ldr	r3, [pc, #228]	; (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f023 0203 	bic.w	r2, r3, #3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	4936      	ldr	r1, [pc, #216]	; (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004594:	4313      	orrs	r3, r2
 8004596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004598:	f7fd fc12 	bl	8001dc0 <HAL_GetTick>
 800459c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459e:	e00a      	b.n	80045b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a0:	f7fd fc0e 	bl	8001dc0 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e053      	b.n	800465e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b6:	4b2d      	ldr	r3, [pc, #180]	; (800466c <HAL_RCC_ClockConfig+0x1c8>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 020c 	and.w	r2, r3, #12
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d1eb      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045c8:	4b27      	ldr	r3, [pc, #156]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d210      	bcs.n	80045f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d6:	4b24      	ldr	r3, [pc, #144]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f023 020f 	bic.w	r2, r3, #15
 80045de:	4922      	ldr	r1, [pc, #136]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e6:	4b20      	ldr	r3, [pc, #128]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e032      	b.n	800465e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004604:	4b19      	ldr	r3, [pc, #100]	; (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4916      	ldr	r1, [pc, #88]	; (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004612:	4313      	orrs	r3, r2
 8004614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d009      	beq.n	8004636 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004622:	4b12      	ldr	r3, [pc, #72]	; (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	490e      	ldr	r1, [pc, #56]	; (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004632:	4313      	orrs	r3, r2
 8004634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004636:	f000 f821 	bl	800467c <HAL_RCC_GetSysClockFreq>
 800463a:	4602      	mov	r2, r0
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <HAL_RCC_ClockConfig+0x1c8>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	091b      	lsrs	r3, r3, #4
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	490a      	ldr	r1, [pc, #40]	; (8004670 <HAL_RCC_ClockConfig+0x1cc>)
 8004648:	5ccb      	ldrb	r3, [r1, r3]
 800464a:	fa22 f303 	lsr.w	r3, r2, r3
 800464e:	4a09      	ldr	r2, [pc, #36]	; (8004674 <HAL_RCC_ClockConfig+0x1d0>)
 8004650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004652:	4b09      	ldr	r3, [pc, #36]	; (8004678 <HAL_RCC_ClockConfig+0x1d4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7fd f87c 	bl	8001754 <HAL_InitTick>

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40023c00 	.word	0x40023c00
 800466c:	40023800 	.word	0x40023800
 8004670:	08022104 	.word	0x08022104
 8004674:	20000000 	.word	0x20000000
 8004678:	20000004 	.word	0x20000004

0800467c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800467c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004680:	b094      	sub	sp, #80	; 0x50
 8004682:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004684:	2300      	movs	r3, #0
 8004686:	647b      	str	r3, [r7, #68]	; 0x44
 8004688:	2300      	movs	r3, #0
 800468a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800468c:	2300      	movs	r3, #0
 800468e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004694:	4b79      	ldr	r3, [pc, #484]	; (800487c <HAL_RCC_GetSysClockFreq+0x200>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 030c 	and.w	r3, r3, #12
 800469c:	2b08      	cmp	r3, #8
 800469e:	d00d      	beq.n	80046bc <HAL_RCC_GetSysClockFreq+0x40>
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	f200 80e1 	bhi.w	8004868 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_RCC_GetSysClockFreq+0x34>
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d003      	beq.n	80046b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80046ae:	e0db      	b.n	8004868 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046b0:	4b73      	ldr	r3, [pc, #460]	; (8004880 <HAL_RCC_GetSysClockFreq+0x204>)
 80046b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046b4:	e0db      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046b6:	4b73      	ldr	r3, [pc, #460]	; (8004884 <HAL_RCC_GetSysClockFreq+0x208>)
 80046b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046ba:	e0d8      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046bc:	4b6f      	ldr	r3, [pc, #444]	; (800487c <HAL_RCC_GetSysClockFreq+0x200>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046c6:	4b6d      	ldr	r3, [pc, #436]	; (800487c <HAL_RCC_GetSysClockFreq+0x200>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d063      	beq.n	800479a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046d2:	4b6a      	ldr	r3, [pc, #424]	; (800487c <HAL_RCC_GetSysClockFreq+0x200>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	099b      	lsrs	r3, r3, #6
 80046d8:	2200      	movs	r2, #0
 80046da:	63bb      	str	r3, [r7, #56]	; 0x38
 80046dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80046de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e4:	633b      	str	r3, [r7, #48]	; 0x30
 80046e6:	2300      	movs	r3, #0
 80046e8:	637b      	str	r3, [r7, #52]	; 0x34
 80046ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046ee:	4622      	mov	r2, r4
 80046f0:	462b      	mov	r3, r5
 80046f2:	f04f 0000 	mov.w	r0, #0
 80046f6:	f04f 0100 	mov.w	r1, #0
 80046fa:	0159      	lsls	r1, r3, #5
 80046fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004700:	0150      	lsls	r0, r2, #5
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4621      	mov	r1, r4
 8004708:	1a51      	subs	r1, r2, r1
 800470a:	6139      	str	r1, [r7, #16]
 800470c:	4629      	mov	r1, r5
 800470e:	eb63 0301 	sbc.w	r3, r3, r1
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004720:	4659      	mov	r1, fp
 8004722:	018b      	lsls	r3, r1, #6
 8004724:	4651      	mov	r1, sl
 8004726:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800472a:	4651      	mov	r1, sl
 800472c:	018a      	lsls	r2, r1, #6
 800472e:	4651      	mov	r1, sl
 8004730:	ebb2 0801 	subs.w	r8, r2, r1
 8004734:	4659      	mov	r1, fp
 8004736:	eb63 0901 	sbc.w	r9, r3, r1
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800474a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800474e:	4690      	mov	r8, r2
 8004750:	4699      	mov	r9, r3
 8004752:	4623      	mov	r3, r4
 8004754:	eb18 0303 	adds.w	r3, r8, r3
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	462b      	mov	r3, r5
 800475c:	eb49 0303 	adc.w	r3, r9, r3
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800476e:	4629      	mov	r1, r5
 8004770:	024b      	lsls	r3, r1, #9
 8004772:	4621      	mov	r1, r4
 8004774:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004778:	4621      	mov	r1, r4
 800477a:	024a      	lsls	r2, r1, #9
 800477c:	4610      	mov	r0, r2
 800477e:	4619      	mov	r1, r3
 8004780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004782:	2200      	movs	r2, #0
 8004784:	62bb      	str	r3, [r7, #40]	; 0x28
 8004786:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004788:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800478c:	f7fb fdc0 	bl	8000310 <__aeabi_uldivmod>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4613      	mov	r3, r2
 8004796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004798:	e058      	b.n	800484c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800479a:	4b38      	ldr	r3, [pc, #224]	; (800487c <HAL_RCC_GetSysClockFreq+0x200>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	099b      	lsrs	r3, r3, #6
 80047a0:	2200      	movs	r2, #0
 80047a2:	4618      	mov	r0, r3
 80047a4:	4611      	mov	r1, r2
 80047a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047aa:	623b      	str	r3, [r7, #32]
 80047ac:	2300      	movs	r3, #0
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
 80047b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047b4:	4642      	mov	r2, r8
 80047b6:	464b      	mov	r3, r9
 80047b8:	f04f 0000 	mov.w	r0, #0
 80047bc:	f04f 0100 	mov.w	r1, #0
 80047c0:	0159      	lsls	r1, r3, #5
 80047c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c6:	0150      	lsls	r0, r2, #5
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4641      	mov	r1, r8
 80047ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80047d2:	4649      	mov	r1, r9
 80047d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047ec:	ebb2 040a 	subs.w	r4, r2, sl
 80047f0:	eb63 050b 	sbc.w	r5, r3, fp
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	00eb      	lsls	r3, r5, #3
 80047fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004802:	00e2      	lsls	r2, r4, #3
 8004804:	4614      	mov	r4, r2
 8004806:	461d      	mov	r5, r3
 8004808:	4643      	mov	r3, r8
 800480a:	18e3      	adds	r3, r4, r3
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	464b      	mov	r3, r9
 8004810:	eb45 0303 	adc.w	r3, r5, r3
 8004814:	607b      	str	r3, [r7, #4]
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004822:	4629      	mov	r1, r5
 8004824:	028b      	lsls	r3, r1, #10
 8004826:	4621      	mov	r1, r4
 8004828:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800482c:	4621      	mov	r1, r4
 800482e:	028a      	lsls	r2, r1, #10
 8004830:	4610      	mov	r0, r2
 8004832:	4619      	mov	r1, r3
 8004834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004836:	2200      	movs	r2, #0
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	61fa      	str	r2, [r7, #28]
 800483c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004840:	f7fb fd66 	bl	8000310 <__aeabi_uldivmod>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4613      	mov	r3, r2
 800484a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800484c:	4b0b      	ldr	r3, [pc, #44]	; (800487c <HAL_RCC_GetSysClockFreq+0x200>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	0c1b      	lsrs	r3, r3, #16
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	3301      	adds	r3, #1
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800485c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800485e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004866:	e002      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <HAL_RCC_GetSysClockFreq+0x204>)
 800486a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800486c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800486e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004870:	4618      	mov	r0, r3
 8004872:	3750      	adds	r7, #80	; 0x50
 8004874:	46bd      	mov	sp, r7
 8004876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800487a:	bf00      	nop
 800487c:	40023800 	.word	0x40023800
 8004880:	00f42400 	.word	0x00f42400
 8004884:	007a1200 	.word	0x007a1200

08004888 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800488c:	4b03      	ldr	r3, [pc, #12]	; (800489c <HAL_RCC_GetHCLKFreq+0x14>)
 800488e:	681b      	ldr	r3, [r3, #0]
}
 8004890:	4618      	mov	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	20000000 	.word	0x20000000

080048a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048a4:	f7ff fff0 	bl	8004888 <HAL_RCC_GetHCLKFreq>
 80048a8:	4602      	mov	r2, r0
 80048aa:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	0a9b      	lsrs	r3, r3, #10
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	4903      	ldr	r1, [pc, #12]	; (80048c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048b6:	5ccb      	ldrb	r3, [r1, r3]
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40023800 	.word	0x40023800
 80048c4:	08022114 	.word	0x08022114

080048c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048cc:	f7ff ffdc 	bl	8004888 <HAL_RCC_GetHCLKFreq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	0b5b      	lsrs	r3, r3, #13
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	4903      	ldr	r1, [pc, #12]	; (80048ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80048de:	5ccb      	ldrb	r3, [r1, r3]
 80048e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40023800 	.word	0x40023800
 80048ec:	08022114 	.word	0x08022114

080048f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	220f      	movs	r2, #15
 80048fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004900:	4b12      	ldr	r3, [pc, #72]	; (800494c <HAL_RCC_GetClockConfig+0x5c>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 0203 	and.w	r2, r3, #3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800490c:	4b0f      	ldr	r3, [pc, #60]	; (800494c <HAL_RCC_GetClockConfig+0x5c>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004918:	4b0c      	ldr	r3, [pc, #48]	; (800494c <HAL_RCC_GetClockConfig+0x5c>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004924:	4b09      	ldr	r3, [pc, #36]	; (800494c <HAL_RCC_GetClockConfig+0x5c>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	08db      	lsrs	r3, r3, #3
 800492a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004932:	4b07      	ldr	r3, [pc, #28]	; (8004950 <HAL_RCC_GetClockConfig+0x60>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 020f 	and.w	r2, r3, #15
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	601a      	str	r2, [r3, #0]
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40023800 	.word	0x40023800
 8004950:	40023c00 	.word	0x40023c00

08004954 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d012      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800497c:	4b69      	ldr	r3, [pc, #420]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4a68      	ldr	r2, [pc, #416]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004982:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004986:	6093      	str	r3, [r2, #8]
 8004988:	4b66      	ldr	r3, [pc, #408]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004990:	4964      	ldr	r1, [pc, #400]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800499e:	2301      	movs	r3, #1
 80049a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d017      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049ae:	4b5d      	ldr	r3, [pc, #372]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049bc:	4959      	ldr	r1, [pc, #356]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049cc:	d101      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80049ce:	2301      	movs	r3, #1
 80049d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80049da:	2301      	movs	r3, #1
 80049dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d017      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049ea:	4b4e      	ldr	r3, [pc, #312]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	494a      	ldr	r1, [pc, #296]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a08:	d101      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a16:	2301      	movs	r3, #1
 8004a18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a26:	2301      	movs	r3, #1
 8004a28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 808b 	beq.w	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a38:	4b3a      	ldr	r3, [pc, #232]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	4a39      	ldr	r2, [pc, #228]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a42:	6413      	str	r3, [r2, #64]	; 0x40
 8004a44:	4b37      	ldr	r3, [pc, #220]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a50:	4b35      	ldr	r3, [pc, #212]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a34      	ldr	r2, [pc, #208]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a5c:	f7fd f9b0 	bl	8001dc0 <HAL_GetTick>
 8004a60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a64:	f7fd f9ac 	bl	8001dc0 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b64      	cmp	r3, #100	; 0x64
 8004a70:	d901      	bls.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e38f      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a76:	4b2c      	ldr	r3, [pc, #176]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f0      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a82:	4b28      	ldr	r3, [pc, #160]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d035      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d02e      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004aa0:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aaa:	4b1e      	ldr	r3, [pc, #120]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aae:	4a1d      	ldr	r2, [pc, #116]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ab6:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aba:	4a1a      	ldr	r2, [pc, #104]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ac0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004ac2:	4a18      	ldr	r2, [pc, #96]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ac8:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d114      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7fd f974 	bl	8001dc0 <HAL_GetTick>
 8004ad8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ada:	e00a      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004adc:	f7fd f970 	bl	8001dc0 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e351      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af2:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0ee      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b0a:	d111      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b18:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b1a:	400b      	ands	r3, r1
 8004b1c:	4901      	ldr	r1, [pc, #4]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	608b      	str	r3, [r1, #8]
 8004b22:	e00b      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b24:	40023800 	.word	0x40023800
 8004b28:	40007000 	.word	0x40007000
 8004b2c:	0ffffcff 	.word	0x0ffffcff
 8004b30:	4bac      	ldr	r3, [pc, #688]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	4aab      	ldr	r2, [pc, #684]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b3a:	6093      	str	r3, [r2, #8]
 8004b3c:	4ba9      	ldr	r3, [pc, #676]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b48:	49a6      	ldr	r1, [pc, #664]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0310 	and.w	r3, r3, #16
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d010      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b5a:	4ba2      	ldr	r3, [pc, #648]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b60:	4aa0      	ldr	r2, [pc, #640]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b6a:	4b9e      	ldr	r3, [pc, #632]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	499b      	ldr	r1, [pc, #620]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00a      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b88:	4b96      	ldr	r3, [pc, #600]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b96:	4993      	ldr	r1, [pc, #588]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004baa:	4b8e      	ldr	r3, [pc, #568]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bb8:	498a      	ldr	r1, [pc, #552]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00a      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bcc:	4b85      	ldr	r3, [pc, #532]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bda:	4982      	ldr	r1, [pc, #520]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bee:	4b7d      	ldr	r3, [pc, #500]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfc:	4979      	ldr	r1, [pc, #484]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c10:	4b74      	ldr	r3, [pc, #464]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c16:	f023 0203 	bic.w	r2, r3, #3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1e:	4971      	ldr	r1, [pc, #452]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c32:	4b6c      	ldr	r3, [pc, #432]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c38:	f023 020c 	bic.w	r2, r3, #12
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c40:	4968      	ldr	r1, [pc, #416]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c54:	4b63      	ldr	r3, [pc, #396]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c62:	4960      	ldr	r1, [pc, #384]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c76:	4b5b      	ldr	r3, [pc, #364]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c84:	4957      	ldr	r1, [pc, #348]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c98:	4b52      	ldr	r3, [pc, #328]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca6:	494f      	ldr	r1, [pc, #316]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004cba:	4b4a      	ldr	r3, [pc, #296]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc8:	4946      	ldr	r1, [pc, #280]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004cdc:	4b41      	ldr	r3, [pc, #260]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cea:	493e      	ldr	r1, [pc, #248]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004cfe:	4b39      	ldr	r3, [pc, #228]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0c:	4935      	ldr	r1, [pc, #212]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d20:	4b30      	ldr	r3, [pc, #192]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d2e:	492d      	ldr	r1, [pc, #180]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d011      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d42:	4b28      	ldr	r3, [pc, #160]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d48:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d50:	4924      	ldr	r1, [pc, #144]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d60:	d101      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d62:	2301      	movs	r3, #1
 8004d64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d72:	2301      	movs	r3, #1
 8004d74:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d82:	4b18      	ldr	r3, [pc, #96]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d90:	4914      	ldr	r1, [pc, #80]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00b      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004da4:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004daa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004db4:	490b      	ldr	r1, [pc, #44]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00f      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004dc8:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd8:	4902      	ldr	r1, [pc, #8]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004de0:	e002      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00b      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004df4:	4b8a      	ldr	r3, [pc, #552]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dfa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e04:	4986      	ldr	r1, [pc, #536]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00b      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e18:	4b81      	ldr	r3, [pc, #516]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e28:	497d      	ldr	r1, [pc, #500]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d006      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 80d6 	beq.w	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e44:	4b76      	ldr	r3, [pc, #472]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a75      	ldr	r2, [pc, #468]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e50:	f7fc ffb6 	bl	8001dc0 <HAL_GetTick>
 8004e54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e58:	f7fc ffb2 	bl	8001dc0 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b64      	cmp	r3, #100	; 0x64
 8004e64:	d901      	bls.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e195      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e6a:	4b6d      	ldr	r3, [pc, #436]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d021      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d11d      	bne.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e8a:	4b65      	ldr	r3, [pc, #404]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e90:	0c1b      	lsrs	r3, r3, #16
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e98:	4b61      	ldr	r3, [pc, #388]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e9e:	0e1b      	lsrs	r3, r3, #24
 8004ea0:	f003 030f 	and.w	r3, r3, #15
 8004ea4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	019a      	lsls	r2, r3, #6
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	041b      	lsls	r3, r3, #16
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	061b      	lsls	r3, r3, #24
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	071b      	lsls	r3, r3, #28
 8004ebe:	4958      	ldr	r1, [pc, #352]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d004      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eda:	d00a      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d02e      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ef0:	d129      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ef2:	4b4b      	ldr	r3, [pc, #300]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef8:	0c1b      	lsrs	r3, r3, #16
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f00:	4b47      	ldr	r3, [pc, #284]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f06:	0f1b      	lsrs	r3, r3, #28
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	019a      	lsls	r2, r3, #6
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	041b      	lsls	r3, r3, #16
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	061b      	lsls	r3, r3, #24
 8004f20:	431a      	orrs	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	071b      	lsls	r3, r3, #28
 8004f26:	493e      	ldr	r1, [pc, #248]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f2e:	4b3c      	ldr	r3, [pc, #240]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f34:	f023 021f 	bic.w	r2, r3, #31
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	4938      	ldr	r1, [pc, #224]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d01d      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f52:	4b33      	ldr	r3, [pc, #204]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f58:	0e1b      	lsrs	r3, r3, #24
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f60:	4b2f      	ldr	r3, [pc, #188]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f66:	0f1b      	lsrs	r3, r3, #28
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	019a      	lsls	r2, r3, #6
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	041b      	lsls	r3, r3, #16
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	061b      	lsls	r3, r3, #24
 8004f80:	431a      	orrs	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	071b      	lsls	r3, r3, #28
 8004f86:	4926      	ldr	r1, [pc, #152]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d011      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	019a      	lsls	r2, r3, #6
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	041b      	lsls	r3, r3, #16
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	061b      	lsls	r3, r3, #24
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	071b      	lsls	r3, r3, #28
 8004fb6:	491a      	ldr	r1, [pc, #104]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fbe:	4b18      	ldr	r3, [pc, #96]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a17      	ldr	r2, [pc, #92]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fca:	f7fc fef9 	bl	8001dc0 <HAL_GetTick>
 8004fce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fd2:	f7fc fef5 	bl	8001dc0 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b64      	cmp	r3, #100	; 0x64
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e0d8      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fe4:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	f040 80ce 	bne.w	8005194 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ff8:	4b09      	ldr	r3, [pc, #36]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a08      	ldr	r2, [pc, #32]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005002:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005004:	f7fc fedc 	bl	8001dc0 <HAL_GetTick>
 8005008:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800500a:	e00b      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800500c:	f7fc fed8 	bl	8001dc0 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b64      	cmp	r3, #100	; 0x64
 8005018:	d904      	bls.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e0bb      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800501e:	bf00      	nop
 8005020:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005024:	4b5e      	ldr	r3, [pc, #376]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800502c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005030:	d0ec      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005042:	2b00      	cmp	r3, #0
 8005044:	d009      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800504e:	2b00      	cmp	r3, #0
 8005050:	d02e      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d12a      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800505a:	4b51      	ldr	r3, [pc, #324]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005060:	0c1b      	lsrs	r3, r3, #16
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005068:	4b4d      	ldr	r3, [pc, #308]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506e:	0f1b      	lsrs	r3, r3, #28
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	019a      	lsls	r2, r3, #6
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	041b      	lsls	r3, r3, #16
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	061b      	lsls	r3, r3, #24
 8005088:	431a      	orrs	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	071b      	lsls	r3, r3, #28
 800508e:	4944      	ldr	r1, [pc, #272]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005096:	4b42      	ldr	r3, [pc, #264]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800509c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	3b01      	subs	r3, #1
 80050a6:	021b      	lsls	r3, r3, #8
 80050a8:	493d      	ldr	r1, [pc, #244]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d022      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050c4:	d11d      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050c6:	4b36      	ldr	r3, [pc, #216]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050cc:	0e1b      	lsrs	r3, r3, #24
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050d4:	4b32      	ldr	r3, [pc, #200]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050da:	0f1b      	lsrs	r3, r3, #28
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	019a      	lsls	r2, r3, #6
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	041b      	lsls	r3, r3, #16
 80050ee:	431a      	orrs	r2, r3
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	061b      	lsls	r3, r3, #24
 80050f4:	431a      	orrs	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	071b      	lsls	r3, r3, #28
 80050fa:	4929      	ldr	r1, [pc, #164]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b00      	cmp	r3, #0
 800510c:	d028      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800510e:	4b24      	ldr	r3, [pc, #144]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005114:	0e1b      	lsrs	r3, r3, #24
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800511c:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800511e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005122:	0c1b      	lsrs	r3, r3, #16
 8005124:	f003 0303 	and.w	r3, r3, #3
 8005128:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	019a      	lsls	r2, r3, #6
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	041b      	lsls	r3, r3, #16
 8005134:	431a      	orrs	r2, r3
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	061b      	lsls	r3, r3, #24
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	071b      	lsls	r3, r3, #28
 8005142:	4917      	ldr	r1, [pc, #92]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800514a:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800514c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005150:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	4911      	ldr	r1, [pc, #68]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005160:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a0e      	ldr	r2, [pc, #56]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800516c:	f7fc fe28 	bl	8001dc0 <HAL_GetTick>
 8005170:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005172:	e008      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005174:	f7fc fe24 	bl	8001dc0 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b64      	cmp	r3, #100	; 0x64
 8005180:	d901      	bls.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e007      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005186:	4b06      	ldr	r3, [pc, #24]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800518e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005192:	d1ef      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3720      	adds	r7, #32
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40023800 	.word	0x40023800

080051a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e09d      	b.n	80052f2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d108      	bne.n	80051d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051c6:	d009      	beq.n	80051dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	61da      	str	r2, [r3, #28]
 80051ce:	e005      	b.n	80051dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7fc f942 	bl	8001480 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005212:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800521c:	d902      	bls.n	8005224 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	e002      	b.n	800522a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005228:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005232:	d007      	beq.n	8005244 <HAL_SPI_Init+0xa0>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800523c:	d002      	beq.n	8005244 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005286:	ea42 0103 	orr.w	r1, r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	0c1b      	lsrs	r3, r3, #16
 80052a0:	f003 0204 	and.w	r2, r3, #4
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	f003 0310 	and.w	r3, r3, #16
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80052c0:	ea42 0103 	orr.w	r1, r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e01a      	b.n	8005342 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005322:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7fc f915 	bl	8001554 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_SPI_TransmitReceive_IT+0x20>
 8005368:	2302      	movs	r3, #2
 800536a:	e091      	b.n	8005490 <HAL_SPI_TransmitReceive_IT+0x144>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800537a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005382:	7dbb      	ldrb	r3, [r7, #22]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d00d      	beq.n	80053a4 <HAL_SPI_TransmitReceive_IT+0x58>
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800538e:	d106      	bne.n	800539e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d102      	bne.n	800539e <HAL_SPI_TransmitReceive_IT+0x52>
 8005398:	7dbb      	ldrb	r3, [r7, #22]
 800539a:	2b04      	cmp	r3, #4
 800539c:	d002      	beq.n	80053a4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800539e:	2302      	movs	r3, #2
 80053a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80053a2:	e070      	b.n	8005486 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d005      	beq.n	80053b6 <HAL_SPI_TransmitReceive_IT+0x6a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <HAL_SPI_TransmitReceive_IT+0x6a>
 80053b0:	887b      	ldrh	r3, [r7, #2]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d102      	bne.n	80053bc <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80053ba:	e064      	b.n	8005486 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d003      	beq.n	80053d0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2205      	movs	r2, #5
 80053cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	887a      	ldrh	r2, [r7, #2]
 80053e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	887a      	ldrh	r2, [r7, #2]
 80053e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	887a      	ldrh	r2, [r7, #2]
 80053f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	887a      	ldrh	r2, [r7, #2]
 80053fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005406:	d906      	bls.n	8005416 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4a24      	ldr	r2, [pc, #144]	; (800549c <HAL_SPI_TransmitReceive_IT+0x150>)
 800540c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4a23      	ldr	r2, [pc, #140]	; (80054a0 <HAL_SPI_TransmitReceive_IT+0x154>)
 8005412:	651a      	str	r2, [r3, #80]	; 0x50
 8005414:	e005      	b.n	8005422 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4a22      	ldr	r2, [pc, #136]	; (80054a4 <HAL_SPI_TransmitReceive_IT+0x158>)
 800541a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4a22      	ldr	r2, [pc, #136]	; (80054a8 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8005420:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800542a:	d802      	bhi.n	8005432 <HAL_SPI_TransmitReceive_IT+0xe6>
 800542c:	887b      	ldrh	r3, [r7, #2]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d908      	bls.n	8005444 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005440:	605a      	str	r2, [r3, #4]
 8005442:	e007      	b.n	8005454 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005452:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8005462:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546e:	2b40      	cmp	r3, #64	; 0x40
 8005470:	d008      	beq.n	8005484 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	e000      	b.n	8005486 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8005484:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800548e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005490:	4618      	mov	r0, r3
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	0800584f 	.word	0x0800584f
 80054a0:	080058b5 	.word	0x080058b5
 80054a4:	080056ff 	.word	0x080056ff
 80054a8:	080057bd 	.word	0x080057bd

080054ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	099b      	lsrs	r3, r3, #6
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10f      	bne.n	80054f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	099b      	lsrs	r3, r3, #6
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d004      	beq.n	80054f0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	4798      	blx	r3
    return;
 80054ee:	e0d7      	b.n	80056a0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	085b      	lsrs	r3, r3, #1
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <HAL_SPI_IRQHandler+0x66>
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	09db      	lsrs	r3, r3, #7
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d004      	beq.n	8005512 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	4798      	blx	r3
    return;
 8005510:	e0c6      	b.n	80056a0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	095b      	lsrs	r3, r3, #5
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10c      	bne.n	8005538 <HAL_SPI_IRQHandler+0x8c>
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	099b      	lsrs	r3, r3, #6
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	0a1b      	lsrs	r3, r3, #8
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 80b4 	beq.w	80056a0 <HAL_SPI_IRQHandler+0x1f4>
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	095b      	lsrs	r3, r3, #5
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 80ad 	beq.w	80056a0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	099b      	lsrs	r3, r3, #6
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d023      	beq.n	800559a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b03      	cmp	r3, #3
 800555c:	d011      	beq.n	8005582 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005562:	f043 0204 	orr.w	r2, r3, #4
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800556a:	2300      	movs	r3, #0
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	e00b      	b.n	800559a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005582:	2300      	movs	r3, #0
 8005584:	613b      	str	r3, [r7, #16]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	613b      	str	r3, [r7, #16]
 8005596:	693b      	ldr	r3, [r7, #16]
        return;
 8005598:	e082      	b.n	80056a0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d014      	beq.n	80055d0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055aa:	f043 0201 	orr.w	r2, r3, #1
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80055b2:	2300      	movs	r3, #0
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	0a1b      	lsrs	r3, r3, #8
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00c      	beq.n	80055f6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e0:	f043 0208 	orr.w	r2, r3, #8
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80055e8:	2300      	movs	r3, #0
 80055ea:	60bb      	str	r3, [r7, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	60bb      	str	r3, [r7, #8]
 80055f4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d04f      	beq.n	800569e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800560c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d104      	bne.n	800562a <HAL_SPI_IRQHandler+0x17e>
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d034      	beq.n	8005694 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0203 	bic.w	r2, r2, #3
 8005638:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563e:	2b00      	cmp	r3, #0
 8005640:	d011      	beq.n	8005666 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005646:	4a18      	ldr	r2, [pc, #96]	; (80056a8 <HAL_SPI_IRQHandler+0x1fc>)
 8005648:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564e:	4618      	mov	r0, r3
 8005650:	f7fc fd76 	bl	8002140 <HAL_DMA_Abort_IT>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d005      	beq.n	8005666 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566a:	2b00      	cmp	r3, #0
 800566c:	d016      	beq.n	800569c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005672:	4a0d      	ldr	r2, [pc, #52]	; (80056a8 <HAL_SPI_IRQHandler+0x1fc>)
 8005674:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567a:	4618      	mov	r0, r3
 800567c:	f7fc fd60 	bl	8002140 <HAL_DMA_Abort_IT>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800568a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005692:	e003      	b.n	800569c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f813 	bl	80056c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800569a:	e000      	b.n	800569e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800569c:	bf00      	nop
    return;
 800569e:	bf00      	nop
  }
}
 80056a0:	3720      	adds	r7, #32
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	080056d5 	.word	0x080056d5

080056ac <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f7ff ffe5 	bl	80056c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056f6:	bf00      	nop
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b082      	sub	sp, #8
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b01      	cmp	r3, #1
 8005710:	d923      	bls.n	800575a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68da      	ldr	r2, [r3, #12]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	b292      	uxth	r2, r2
 800571e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	1c9a      	adds	r2, r3, #2
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b02      	subs	r3, #2
 8005734:	b29a      	uxth	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	d11f      	bne.n	8005788 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005756:	605a      	str	r2, [r3, #4]
 8005758:	e016      	b.n	8005788 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f103 020c 	add.w	r2, r3, #12
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	7812      	ldrb	r2, [r2, #0]
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800577c:	b29b      	uxth	r3, r3
 800577e:	3b01      	subs	r3, #1
 8005780:	b29a      	uxth	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10f      	bne.n	80057b4 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80057a2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d102      	bne.n	80057b4 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fa38 	bl	8005c24 <SPI_CloseRxTx_ISR>
    }
  }
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d912      	bls.n	80057f4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	881a      	ldrh	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057de:	1c9a      	adds	r2, r3, #2
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b02      	subs	r3, #2
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057f2:	e012      	b.n	800581a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	330c      	adds	r3, #12
 80057fe:	7812      	ldrb	r2, [r2, #0]
 8005800:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800581e:	b29b      	uxth	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	d110      	bne.n	8005846 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005832:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d102      	bne.n	8005846 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f9ef 	bl	8005c24 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005846:	bf00      	nop
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b082      	sub	sp, #8
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	b292      	uxth	r2, r2
 8005862:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	1c9a      	adds	r2, r3, #2
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005886:	b29b      	uxth	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10f      	bne.n	80058ac <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800589a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d102      	bne.n	80058ac <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f9bc 	bl	8005c24 <SPI_CloseRxTx_ISR>
    }
  }
}
 80058ac:	bf00      	nop
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c0:	881a      	ldrh	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	1c9a      	adds	r2, r3, #2
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d110      	bne.n	800590c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058f8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d102      	bne.n	800590c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f98c 	bl	8005c24 <SPI_CloseRxTx_ISR>
    }
  }
}
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b088      	sub	sp, #32
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	603b      	str	r3, [r7, #0]
 8005920:	4613      	mov	r3, r2
 8005922:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005924:	f7fc fa4c 	bl	8001dc0 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592c:	1a9b      	subs	r3, r3, r2
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	4413      	add	r3, r2
 8005932:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005934:	f7fc fa44 	bl	8001dc0 <HAL_GetTick>
 8005938:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800593a:	4b39      	ldr	r3, [pc, #228]	; (8005a20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	015b      	lsls	r3, r3, #5
 8005940:	0d1b      	lsrs	r3, r3, #20
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	fb02 f303 	mul.w	r3, r2, r3
 8005948:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800594a:	e054      	b.n	80059f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005952:	d050      	beq.n	80059f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005954:	f7fc fa34 	bl	8001dc0 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	69fa      	ldr	r2, [r7, #28]
 8005960:	429a      	cmp	r2, r3
 8005962:	d902      	bls.n	800596a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d13d      	bne.n	80059e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005978:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005982:	d111      	bne.n	80059a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800598c:	d004      	beq.n	8005998 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005996:	d107      	bne.n	80059a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059b0:	d10f      	bne.n	80059d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e017      	b.n	8005a16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4013      	ands	r3, r2
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	bf0c      	ite	eq
 8005a06:	2301      	moveq	r3, #1
 8005a08:	2300      	movne	r3, #0
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d19b      	bne.n	800594c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3720      	adds	r7, #32
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000000 	.word	0x20000000

08005a24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08a      	sub	sp, #40	; 0x28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005a32:	2300      	movs	r3, #0
 8005a34:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a36:	f7fc f9c3 	bl	8001dc0 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	1a9b      	subs	r3, r3, r2
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	4413      	add	r3, r2
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005a46:	f7fc f9bb 	bl	8001dc0 <HAL_GetTick>
 8005a4a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	330c      	adds	r3, #12
 8005a52:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a54:	4b3d      	ldr	r3, [pc, #244]	; (8005b4c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	00da      	lsls	r2, r3, #3
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	0d1b      	lsrs	r3, r3, #20
 8005a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a66:	fb02 f303 	mul.w	r3, r2, r3
 8005a6a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a6c:	e060      	b.n	8005b30 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a74:	d107      	bne.n	8005a86 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d104      	bne.n	8005a86 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a8c:	d050      	beq.n	8005b30 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a8e:	f7fc f997 	bl	8001dc0 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d902      	bls.n	8005aa4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d13d      	bne.n	8005b20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ab2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005abc:	d111      	bne.n	8005ae2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac6:	d004      	beq.n	8005ad2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad0:	d107      	bne.n	8005ae2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aea:	d10f      	bne.n	8005b0c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e010      	b.n	8005b42 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d196      	bne.n	8005a6e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3728      	adds	r7, #40	; 0x28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000000 	.word	0x20000000

08005b50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af02      	add	r7, sp, #8
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f7ff ff5b 	bl	8005a24 <SPI_WaitFifoStateUntilTimeout>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d007      	beq.n	8005b84 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b78:	f043 0220 	orr.w	r2, r3, #32
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e046      	b.n	8005c12 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b84:	4b25      	ldr	r3, [pc, #148]	; (8005c1c <SPI_EndRxTxTransaction+0xcc>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a25      	ldr	r2, [pc, #148]	; (8005c20 <SPI_EndRxTxTransaction+0xd0>)
 8005b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8e:	0d5b      	lsrs	r3, r3, #21
 8005b90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b94:	fb02 f303 	mul.w	r3, r2, r3
 8005b98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ba2:	d112      	bne.n	8005bca <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2200      	movs	r2, #0
 8005bac:	2180      	movs	r1, #128	; 0x80
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff feb0 	bl	8005914 <SPI_WaitFlagStateUntilTimeout>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d016      	beq.n	8005be8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bbe:	f043 0220 	orr.w	r2, r3, #32
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e023      	b.n	8005c12 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00a      	beq.n	8005be6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be0:	2b80      	cmp	r3, #128	; 0x80
 8005be2:	d0f2      	beq.n	8005bca <SPI_EndRxTxTransaction+0x7a>
 8005be4:	e000      	b.n	8005be8 <SPI_EndRxTxTransaction+0x98>
        break;
 8005be6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f7ff ff15 	bl	8005a24 <SPI_WaitFifoStateUntilTimeout>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d007      	beq.n	8005c10 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c04:	f043 0220 	orr.w	r2, r3, #32
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e000      	b.n	8005c12 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000000 	.word	0x20000000
 8005c20:	165e9f81 	.word	0x165e9f81

08005c24 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c2c:	f7fc f8c8 	bl	8001dc0 <HAL_GetTick>
 8005c30:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0220 	bic.w	r2, r2, #32
 8005c40:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	2164      	movs	r1, #100	; 0x64
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7ff ff82 	bl	8005b50 <SPI_EndRxTxTransaction>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c56:	f043 0220 	orr.w	r2, r3, #32
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d115      	bne.n	8005c92 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	d107      	bne.n	8005c82 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7ff fd16 	bl	80056ac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005c80:	e00e      	b.n	8005ca0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fb fb7e 	bl	800138c <HAL_SPI_TxRxCpltCallback>
}
 8005c90:	e006      	b.n	8005ca0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7ff fd10 	bl	80056c0 <HAL_SPI_ErrorCallback>
}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e049      	b.n	8005d4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d106      	bne.n	8005cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f841 	bl	8005d56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	f000 fa00 	bl	80060ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
	...

08005d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d001      	beq.n	8005d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e054      	b.n	8005e2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0201 	orr.w	r2, r2, #1
 8005d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a26      	ldr	r2, [pc, #152]	; (8005e3c <HAL_TIM_Base_Start_IT+0xd0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d022      	beq.n	8005dec <HAL_TIM_Base_Start_IT+0x80>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dae:	d01d      	beq.n	8005dec <HAL_TIM_Base_Start_IT+0x80>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a22      	ldr	r2, [pc, #136]	; (8005e40 <HAL_TIM_Base_Start_IT+0xd4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d018      	beq.n	8005dec <HAL_TIM_Base_Start_IT+0x80>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a21      	ldr	r2, [pc, #132]	; (8005e44 <HAL_TIM_Base_Start_IT+0xd8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d013      	beq.n	8005dec <HAL_TIM_Base_Start_IT+0x80>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a1f      	ldr	r2, [pc, #124]	; (8005e48 <HAL_TIM_Base_Start_IT+0xdc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00e      	beq.n	8005dec <HAL_TIM_Base_Start_IT+0x80>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a1e      	ldr	r2, [pc, #120]	; (8005e4c <HAL_TIM_Base_Start_IT+0xe0>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d009      	beq.n	8005dec <HAL_TIM_Base_Start_IT+0x80>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a1c      	ldr	r2, [pc, #112]	; (8005e50 <HAL_TIM_Base_Start_IT+0xe4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d004      	beq.n	8005dec <HAL_TIM_Base_Start_IT+0x80>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1b      	ldr	r2, [pc, #108]	; (8005e54 <HAL_TIM_Base_Start_IT+0xe8>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d115      	bne.n	8005e18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689a      	ldr	r2, [r3, #8]
 8005df2:	4b19      	ldr	r3, [pc, #100]	; (8005e58 <HAL_TIM_Base_Start_IT+0xec>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2b06      	cmp	r3, #6
 8005dfc:	d015      	beq.n	8005e2a <HAL_TIM_Base_Start_IT+0xbe>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e04:	d011      	beq.n	8005e2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0201 	orr.w	r2, r2, #1
 8005e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e16:	e008      	b.n	8005e2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	e000      	b.n	8005e2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40010000 	.word	0x40010000
 8005e40:	40000400 	.word	0x40000400
 8005e44:	40000800 	.word	0x40000800
 8005e48:	40000c00 	.word	0x40000c00
 8005e4c:	40010400 	.word	0x40010400
 8005e50:	40014000 	.word	0x40014000
 8005e54:	40001800 	.word	0x40001800
 8005e58:	00010007 	.word	0x00010007

08005e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d122      	bne.n	8005eb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d11b      	bne.n	8005eb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f06f 0202 	mvn.w	r2, #2
 8005e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f905 	bl	80060ae <HAL_TIM_IC_CaptureCallback>
 8005ea4:	e005      	b.n	8005eb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f8f7 	bl	800609a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f908 	bl	80060c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	f003 0304 	and.w	r3, r3, #4
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d122      	bne.n	8005f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d11b      	bne.n	8005f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f06f 0204 	mvn.w	r2, #4
 8005edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f8db 	bl	80060ae <HAL_TIM_IC_CaptureCallback>
 8005ef8:	e005      	b.n	8005f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f8cd 	bl	800609a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f8de 	bl	80060c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	f003 0308 	and.w	r3, r3, #8
 8005f16:	2b08      	cmp	r3, #8
 8005f18:	d122      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d11b      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f06f 0208 	mvn.w	r2, #8
 8005f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2204      	movs	r2, #4
 8005f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f8b1 	bl	80060ae <HAL_TIM_IC_CaptureCallback>
 8005f4c:	e005      	b.n	8005f5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f8a3 	bl	800609a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f8b4 	bl	80060c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f003 0310 	and.w	r3, r3, #16
 8005f6a:	2b10      	cmp	r3, #16
 8005f6c:	d122      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	2b10      	cmp	r3, #16
 8005f7a:	d11b      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0210 	mvn.w	r2, #16
 8005f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2208      	movs	r2, #8
 8005f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f887 	bl	80060ae <HAL_TIM_IC_CaptureCallback>
 8005fa0:	e005      	b.n	8005fae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f879 	bl	800609a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f88a 	bl	80060c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d10e      	bne.n	8005fe0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d107      	bne.n	8005fe0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0201 	mvn.w	r2, #1
 8005fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fa ff7e 	bl	8000edc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fea:	2b80      	cmp	r3, #128	; 0x80
 8005fec:	d10e      	bne.n	800600c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff8:	2b80      	cmp	r3, #128	; 0x80
 8005ffa:	d107      	bne.n	800600c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f91a 	bl	8006240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800601a:	d10e      	bne.n	800603a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006026:	2b80      	cmp	r3, #128	; 0x80
 8006028:	d107      	bne.n	800603a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f90d 	bl	8006254 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006044:	2b40      	cmp	r3, #64	; 0x40
 8006046:	d10e      	bne.n	8006066 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	d107      	bne.n	8006066 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800605e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f838 	bl	80060d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	f003 0320 	and.w	r3, r3, #32
 8006070:	2b20      	cmp	r3, #32
 8006072:	d10e      	bne.n	8006092 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b20      	cmp	r3, #32
 8006080:	d107      	bne.n	8006092 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f06f 0220 	mvn.w	r2, #32
 800608a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f8cd 	bl	800622c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006092:	bf00      	nop
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
	...

080060ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a40      	ldr	r2, [pc, #256]	; (8006200 <TIM_Base_SetConfig+0x114>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d013      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610a:	d00f      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a3d      	ldr	r2, [pc, #244]	; (8006204 <TIM_Base_SetConfig+0x118>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00b      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a3c      	ldr	r2, [pc, #240]	; (8006208 <TIM_Base_SetConfig+0x11c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d007      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a3b      	ldr	r2, [pc, #236]	; (800620c <TIM_Base_SetConfig+0x120>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d003      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a3a      	ldr	r2, [pc, #232]	; (8006210 <TIM_Base_SetConfig+0x124>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d108      	bne.n	800613e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a2f      	ldr	r2, [pc, #188]	; (8006200 <TIM_Base_SetConfig+0x114>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d02b      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614c:	d027      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a2c      	ldr	r2, [pc, #176]	; (8006204 <TIM_Base_SetConfig+0x118>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d023      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a2b      	ldr	r2, [pc, #172]	; (8006208 <TIM_Base_SetConfig+0x11c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d01f      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a2a      	ldr	r2, [pc, #168]	; (800620c <TIM_Base_SetConfig+0x120>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d01b      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a29      	ldr	r2, [pc, #164]	; (8006210 <TIM_Base_SetConfig+0x124>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d017      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a28      	ldr	r2, [pc, #160]	; (8006214 <TIM_Base_SetConfig+0x128>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d013      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a27      	ldr	r2, [pc, #156]	; (8006218 <TIM_Base_SetConfig+0x12c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00f      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a26      	ldr	r2, [pc, #152]	; (800621c <TIM_Base_SetConfig+0x130>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00b      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a25      	ldr	r2, [pc, #148]	; (8006220 <TIM_Base_SetConfig+0x134>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d007      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a24      	ldr	r2, [pc, #144]	; (8006224 <TIM_Base_SetConfig+0x138>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d003      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a23      	ldr	r2, [pc, #140]	; (8006228 <TIM_Base_SetConfig+0x13c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d108      	bne.n	80061b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a0a      	ldr	r2, [pc, #40]	; (8006200 <TIM_Base_SetConfig+0x114>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d003      	beq.n	80061e4 <TIM_Base_SetConfig+0xf8>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a0c      	ldr	r2, [pc, #48]	; (8006210 <TIM_Base_SetConfig+0x124>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d103      	bne.n	80061ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	615a      	str	r2, [r3, #20]
}
 80061f2:	bf00      	nop
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40010000 	.word	0x40010000
 8006204:	40000400 	.word	0x40000400
 8006208:	40000800 	.word	0x40000800
 800620c:	40000c00 	.word	0x40000c00
 8006210:	40010400 	.word	0x40010400
 8006214:	40014000 	.word	0x40014000
 8006218:	40014400 	.word	0x40014400
 800621c:	40014800 	.word	0x40014800
 8006220:	40001800 	.word	0x40001800
 8006224:	40001c00 	.word	0x40001c00
 8006228:	40002000 	.word	0x40002000

0800622c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e040      	b.n	80062fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d106      	bne.n	8006290 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7fb f988 	bl	80015a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2224      	movs	r2, #36	; 0x24
 8006294:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0201 	bic.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f82c 	bl	8006304 <UART_SetConfig>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e022      	b.n	80062fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d002      	beq.n	80062c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fa84 	bl	80067cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fb0b 	bl	8006910 <UART_CheckIdleState>
 80062fa:	4603      	mov	r3, r0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b088      	sub	sp, #32
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	431a      	orrs	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	4ba6      	ldr	r3, [pc, #664]	; (80065c8 <UART_SetConfig+0x2c4>)
 8006330:	4013      	ands	r3, r2
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6812      	ldr	r2, [r2, #0]
 8006336:	6979      	ldr	r1, [r7, #20]
 8006338:	430b      	orrs	r3, r1
 800633a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	4313      	orrs	r3, r2
 8006360:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	430a      	orrs	r2, r1
 8006374:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a94      	ldr	r2, [pc, #592]	; (80065cc <UART_SetConfig+0x2c8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d120      	bne.n	80063c2 <UART_SetConfig+0xbe>
 8006380:	4b93      	ldr	r3, [pc, #588]	; (80065d0 <UART_SetConfig+0x2cc>)
 8006382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	2b03      	cmp	r3, #3
 800638c:	d816      	bhi.n	80063bc <UART_SetConfig+0xb8>
 800638e:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <UART_SetConfig+0x90>)
 8006390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006394:	080063a5 	.word	0x080063a5
 8006398:	080063b1 	.word	0x080063b1
 800639c:	080063ab 	.word	0x080063ab
 80063a0:	080063b7 	.word	0x080063b7
 80063a4:	2301      	movs	r3, #1
 80063a6:	77fb      	strb	r3, [r7, #31]
 80063a8:	e150      	b.n	800664c <UART_SetConfig+0x348>
 80063aa:	2302      	movs	r3, #2
 80063ac:	77fb      	strb	r3, [r7, #31]
 80063ae:	e14d      	b.n	800664c <UART_SetConfig+0x348>
 80063b0:	2304      	movs	r3, #4
 80063b2:	77fb      	strb	r3, [r7, #31]
 80063b4:	e14a      	b.n	800664c <UART_SetConfig+0x348>
 80063b6:	2308      	movs	r3, #8
 80063b8:	77fb      	strb	r3, [r7, #31]
 80063ba:	e147      	b.n	800664c <UART_SetConfig+0x348>
 80063bc:	2310      	movs	r3, #16
 80063be:	77fb      	strb	r3, [r7, #31]
 80063c0:	e144      	b.n	800664c <UART_SetConfig+0x348>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a83      	ldr	r2, [pc, #524]	; (80065d4 <UART_SetConfig+0x2d0>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d132      	bne.n	8006432 <UART_SetConfig+0x12e>
 80063cc:	4b80      	ldr	r3, [pc, #512]	; (80065d0 <UART_SetConfig+0x2cc>)
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d2:	f003 030c 	and.w	r3, r3, #12
 80063d6:	2b0c      	cmp	r3, #12
 80063d8:	d828      	bhi.n	800642c <UART_SetConfig+0x128>
 80063da:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <UART_SetConfig+0xdc>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	08006415 	.word	0x08006415
 80063e4:	0800642d 	.word	0x0800642d
 80063e8:	0800642d 	.word	0x0800642d
 80063ec:	0800642d 	.word	0x0800642d
 80063f0:	08006421 	.word	0x08006421
 80063f4:	0800642d 	.word	0x0800642d
 80063f8:	0800642d 	.word	0x0800642d
 80063fc:	0800642d 	.word	0x0800642d
 8006400:	0800641b 	.word	0x0800641b
 8006404:	0800642d 	.word	0x0800642d
 8006408:	0800642d 	.word	0x0800642d
 800640c:	0800642d 	.word	0x0800642d
 8006410:	08006427 	.word	0x08006427
 8006414:	2300      	movs	r3, #0
 8006416:	77fb      	strb	r3, [r7, #31]
 8006418:	e118      	b.n	800664c <UART_SetConfig+0x348>
 800641a:	2302      	movs	r3, #2
 800641c:	77fb      	strb	r3, [r7, #31]
 800641e:	e115      	b.n	800664c <UART_SetConfig+0x348>
 8006420:	2304      	movs	r3, #4
 8006422:	77fb      	strb	r3, [r7, #31]
 8006424:	e112      	b.n	800664c <UART_SetConfig+0x348>
 8006426:	2308      	movs	r3, #8
 8006428:	77fb      	strb	r3, [r7, #31]
 800642a:	e10f      	b.n	800664c <UART_SetConfig+0x348>
 800642c:	2310      	movs	r3, #16
 800642e:	77fb      	strb	r3, [r7, #31]
 8006430:	e10c      	b.n	800664c <UART_SetConfig+0x348>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a68      	ldr	r2, [pc, #416]	; (80065d8 <UART_SetConfig+0x2d4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d120      	bne.n	800647e <UART_SetConfig+0x17a>
 800643c:	4b64      	ldr	r3, [pc, #400]	; (80065d0 <UART_SetConfig+0x2cc>)
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006442:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006446:	2b30      	cmp	r3, #48	; 0x30
 8006448:	d013      	beq.n	8006472 <UART_SetConfig+0x16e>
 800644a:	2b30      	cmp	r3, #48	; 0x30
 800644c:	d814      	bhi.n	8006478 <UART_SetConfig+0x174>
 800644e:	2b20      	cmp	r3, #32
 8006450:	d009      	beq.n	8006466 <UART_SetConfig+0x162>
 8006452:	2b20      	cmp	r3, #32
 8006454:	d810      	bhi.n	8006478 <UART_SetConfig+0x174>
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <UART_SetConfig+0x15c>
 800645a:	2b10      	cmp	r3, #16
 800645c:	d006      	beq.n	800646c <UART_SetConfig+0x168>
 800645e:	e00b      	b.n	8006478 <UART_SetConfig+0x174>
 8006460:	2300      	movs	r3, #0
 8006462:	77fb      	strb	r3, [r7, #31]
 8006464:	e0f2      	b.n	800664c <UART_SetConfig+0x348>
 8006466:	2302      	movs	r3, #2
 8006468:	77fb      	strb	r3, [r7, #31]
 800646a:	e0ef      	b.n	800664c <UART_SetConfig+0x348>
 800646c:	2304      	movs	r3, #4
 800646e:	77fb      	strb	r3, [r7, #31]
 8006470:	e0ec      	b.n	800664c <UART_SetConfig+0x348>
 8006472:	2308      	movs	r3, #8
 8006474:	77fb      	strb	r3, [r7, #31]
 8006476:	e0e9      	b.n	800664c <UART_SetConfig+0x348>
 8006478:	2310      	movs	r3, #16
 800647a:	77fb      	strb	r3, [r7, #31]
 800647c:	e0e6      	b.n	800664c <UART_SetConfig+0x348>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a56      	ldr	r2, [pc, #344]	; (80065dc <UART_SetConfig+0x2d8>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d120      	bne.n	80064ca <UART_SetConfig+0x1c6>
 8006488:	4b51      	ldr	r3, [pc, #324]	; (80065d0 <UART_SetConfig+0x2cc>)
 800648a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006492:	2bc0      	cmp	r3, #192	; 0xc0
 8006494:	d013      	beq.n	80064be <UART_SetConfig+0x1ba>
 8006496:	2bc0      	cmp	r3, #192	; 0xc0
 8006498:	d814      	bhi.n	80064c4 <UART_SetConfig+0x1c0>
 800649a:	2b80      	cmp	r3, #128	; 0x80
 800649c:	d009      	beq.n	80064b2 <UART_SetConfig+0x1ae>
 800649e:	2b80      	cmp	r3, #128	; 0x80
 80064a0:	d810      	bhi.n	80064c4 <UART_SetConfig+0x1c0>
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <UART_SetConfig+0x1a8>
 80064a6:	2b40      	cmp	r3, #64	; 0x40
 80064a8:	d006      	beq.n	80064b8 <UART_SetConfig+0x1b4>
 80064aa:	e00b      	b.n	80064c4 <UART_SetConfig+0x1c0>
 80064ac:	2300      	movs	r3, #0
 80064ae:	77fb      	strb	r3, [r7, #31]
 80064b0:	e0cc      	b.n	800664c <UART_SetConfig+0x348>
 80064b2:	2302      	movs	r3, #2
 80064b4:	77fb      	strb	r3, [r7, #31]
 80064b6:	e0c9      	b.n	800664c <UART_SetConfig+0x348>
 80064b8:	2304      	movs	r3, #4
 80064ba:	77fb      	strb	r3, [r7, #31]
 80064bc:	e0c6      	b.n	800664c <UART_SetConfig+0x348>
 80064be:	2308      	movs	r3, #8
 80064c0:	77fb      	strb	r3, [r7, #31]
 80064c2:	e0c3      	b.n	800664c <UART_SetConfig+0x348>
 80064c4:	2310      	movs	r3, #16
 80064c6:	77fb      	strb	r3, [r7, #31]
 80064c8:	e0c0      	b.n	800664c <UART_SetConfig+0x348>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a44      	ldr	r2, [pc, #272]	; (80065e0 <UART_SetConfig+0x2dc>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d125      	bne.n	8006520 <UART_SetConfig+0x21c>
 80064d4:	4b3e      	ldr	r3, [pc, #248]	; (80065d0 <UART_SetConfig+0x2cc>)
 80064d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064e2:	d017      	beq.n	8006514 <UART_SetConfig+0x210>
 80064e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064e8:	d817      	bhi.n	800651a <UART_SetConfig+0x216>
 80064ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ee:	d00b      	beq.n	8006508 <UART_SetConfig+0x204>
 80064f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f4:	d811      	bhi.n	800651a <UART_SetConfig+0x216>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <UART_SetConfig+0x1fe>
 80064fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064fe:	d006      	beq.n	800650e <UART_SetConfig+0x20a>
 8006500:	e00b      	b.n	800651a <UART_SetConfig+0x216>
 8006502:	2300      	movs	r3, #0
 8006504:	77fb      	strb	r3, [r7, #31]
 8006506:	e0a1      	b.n	800664c <UART_SetConfig+0x348>
 8006508:	2302      	movs	r3, #2
 800650a:	77fb      	strb	r3, [r7, #31]
 800650c:	e09e      	b.n	800664c <UART_SetConfig+0x348>
 800650e:	2304      	movs	r3, #4
 8006510:	77fb      	strb	r3, [r7, #31]
 8006512:	e09b      	b.n	800664c <UART_SetConfig+0x348>
 8006514:	2308      	movs	r3, #8
 8006516:	77fb      	strb	r3, [r7, #31]
 8006518:	e098      	b.n	800664c <UART_SetConfig+0x348>
 800651a:	2310      	movs	r3, #16
 800651c:	77fb      	strb	r3, [r7, #31]
 800651e:	e095      	b.n	800664c <UART_SetConfig+0x348>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a2f      	ldr	r2, [pc, #188]	; (80065e4 <UART_SetConfig+0x2e0>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d125      	bne.n	8006576 <UART_SetConfig+0x272>
 800652a:	4b29      	ldr	r3, [pc, #164]	; (80065d0 <UART_SetConfig+0x2cc>)
 800652c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006530:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006534:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006538:	d017      	beq.n	800656a <UART_SetConfig+0x266>
 800653a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800653e:	d817      	bhi.n	8006570 <UART_SetConfig+0x26c>
 8006540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006544:	d00b      	beq.n	800655e <UART_SetConfig+0x25a>
 8006546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800654a:	d811      	bhi.n	8006570 <UART_SetConfig+0x26c>
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <UART_SetConfig+0x254>
 8006550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006554:	d006      	beq.n	8006564 <UART_SetConfig+0x260>
 8006556:	e00b      	b.n	8006570 <UART_SetConfig+0x26c>
 8006558:	2301      	movs	r3, #1
 800655a:	77fb      	strb	r3, [r7, #31]
 800655c:	e076      	b.n	800664c <UART_SetConfig+0x348>
 800655e:	2302      	movs	r3, #2
 8006560:	77fb      	strb	r3, [r7, #31]
 8006562:	e073      	b.n	800664c <UART_SetConfig+0x348>
 8006564:	2304      	movs	r3, #4
 8006566:	77fb      	strb	r3, [r7, #31]
 8006568:	e070      	b.n	800664c <UART_SetConfig+0x348>
 800656a:	2308      	movs	r3, #8
 800656c:	77fb      	strb	r3, [r7, #31]
 800656e:	e06d      	b.n	800664c <UART_SetConfig+0x348>
 8006570:	2310      	movs	r3, #16
 8006572:	77fb      	strb	r3, [r7, #31]
 8006574:	e06a      	b.n	800664c <UART_SetConfig+0x348>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a1b      	ldr	r2, [pc, #108]	; (80065e8 <UART_SetConfig+0x2e4>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d138      	bne.n	80065f2 <UART_SetConfig+0x2ee>
 8006580:	4b13      	ldr	r3, [pc, #76]	; (80065d0 <UART_SetConfig+0x2cc>)
 8006582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006586:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800658a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800658e:	d017      	beq.n	80065c0 <UART_SetConfig+0x2bc>
 8006590:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006594:	d82a      	bhi.n	80065ec <UART_SetConfig+0x2e8>
 8006596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800659a:	d00b      	beq.n	80065b4 <UART_SetConfig+0x2b0>
 800659c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a0:	d824      	bhi.n	80065ec <UART_SetConfig+0x2e8>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <UART_SetConfig+0x2aa>
 80065a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065aa:	d006      	beq.n	80065ba <UART_SetConfig+0x2b6>
 80065ac:	e01e      	b.n	80065ec <UART_SetConfig+0x2e8>
 80065ae:	2300      	movs	r3, #0
 80065b0:	77fb      	strb	r3, [r7, #31]
 80065b2:	e04b      	b.n	800664c <UART_SetConfig+0x348>
 80065b4:	2302      	movs	r3, #2
 80065b6:	77fb      	strb	r3, [r7, #31]
 80065b8:	e048      	b.n	800664c <UART_SetConfig+0x348>
 80065ba:	2304      	movs	r3, #4
 80065bc:	77fb      	strb	r3, [r7, #31]
 80065be:	e045      	b.n	800664c <UART_SetConfig+0x348>
 80065c0:	2308      	movs	r3, #8
 80065c2:	77fb      	strb	r3, [r7, #31]
 80065c4:	e042      	b.n	800664c <UART_SetConfig+0x348>
 80065c6:	bf00      	nop
 80065c8:	efff69f3 	.word	0xefff69f3
 80065cc:	40011000 	.word	0x40011000
 80065d0:	40023800 	.word	0x40023800
 80065d4:	40004400 	.word	0x40004400
 80065d8:	40004800 	.word	0x40004800
 80065dc:	40004c00 	.word	0x40004c00
 80065e0:	40005000 	.word	0x40005000
 80065e4:	40011400 	.word	0x40011400
 80065e8:	40007800 	.word	0x40007800
 80065ec:	2310      	movs	r3, #16
 80065ee:	77fb      	strb	r3, [r7, #31]
 80065f0:	e02c      	b.n	800664c <UART_SetConfig+0x348>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a72      	ldr	r2, [pc, #456]	; (80067c0 <UART_SetConfig+0x4bc>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d125      	bne.n	8006648 <UART_SetConfig+0x344>
 80065fc:	4b71      	ldr	r3, [pc, #452]	; (80067c4 <UART_SetConfig+0x4c0>)
 80065fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006602:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006606:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800660a:	d017      	beq.n	800663c <UART_SetConfig+0x338>
 800660c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006610:	d817      	bhi.n	8006642 <UART_SetConfig+0x33e>
 8006612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006616:	d00b      	beq.n	8006630 <UART_SetConfig+0x32c>
 8006618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800661c:	d811      	bhi.n	8006642 <UART_SetConfig+0x33e>
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <UART_SetConfig+0x326>
 8006622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006626:	d006      	beq.n	8006636 <UART_SetConfig+0x332>
 8006628:	e00b      	b.n	8006642 <UART_SetConfig+0x33e>
 800662a:	2300      	movs	r3, #0
 800662c:	77fb      	strb	r3, [r7, #31]
 800662e:	e00d      	b.n	800664c <UART_SetConfig+0x348>
 8006630:	2302      	movs	r3, #2
 8006632:	77fb      	strb	r3, [r7, #31]
 8006634:	e00a      	b.n	800664c <UART_SetConfig+0x348>
 8006636:	2304      	movs	r3, #4
 8006638:	77fb      	strb	r3, [r7, #31]
 800663a:	e007      	b.n	800664c <UART_SetConfig+0x348>
 800663c:	2308      	movs	r3, #8
 800663e:	77fb      	strb	r3, [r7, #31]
 8006640:	e004      	b.n	800664c <UART_SetConfig+0x348>
 8006642:	2310      	movs	r3, #16
 8006644:	77fb      	strb	r3, [r7, #31]
 8006646:	e001      	b.n	800664c <UART_SetConfig+0x348>
 8006648:	2310      	movs	r3, #16
 800664a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006654:	d15b      	bne.n	800670e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006656:	7ffb      	ldrb	r3, [r7, #31]
 8006658:	2b08      	cmp	r3, #8
 800665a:	d828      	bhi.n	80066ae <UART_SetConfig+0x3aa>
 800665c:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <UART_SetConfig+0x360>)
 800665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006662:	bf00      	nop
 8006664:	08006689 	.word	0x08006689
 8006668:	08006691 	.word	0x08006691
 800666c:	08006699 	.word	0x08006699
 8006670:	080066af 	.word	0x080066af
 8006674:	0800669f 	.word	0x0800669f
 8006678:	080066af 	.word	0x080066af
 800667c:	080066af 	.word	0x080066af
 8006680:	080066af 	.word	0x080066af
 8006684:	080066a7 	.word	0x080066a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006688:	f7fe f90a 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 800668c:	61b8      	str	r0, [r7, #24]
        break;
 800668e:	e013      	b.n	80066b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006690:	f7fe f91a 	bl	80048c8 <HAL_RCC_GetPCLK2Freq>
 8006694:	61b8      	str	r0, [r7, #24]
        break;
 8006696:	e00f      	b.n	80066b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006698:	4b4b      	ldr	r3, [pc, #300]	; (80067c8 <UART_SetConfig+0x4c4>)
 800669a:	61bb      	str	r3, [r7, #24]
        break;
 800669c:	e00c      	b.n	80066b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800669e:	f7fd ffed 	bl	800467c <HAL_RCC_GetSysClockFreq>
 80066a2:	61b8      	str	r0, [r7, #24]
        break;
 80066a4:	e008      	b.n	80066b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066aa:	61bb      	str	r3, [r7, #24]
        break;
 80066ac:	e004      	b.n	80066b8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	77bb      	strb	r3, [r7, #30]
        break;
 80066b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d074      	beq.n	80067a8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	005a      	lsls	r2, r3, #1
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	085b      	lsrs	r3, r3, #1
 80066c8:	441a      	add	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	2b0f      	cmp	r3, #15
 80066d8:	d916      	bls.n	8006708 <UART_SetConfig+0x404>
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e0:	d212      	bcs.n	8006708 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	f023 030f 	bic.w	r3, r3, #15
 80066ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	085b      	lsrs	r3, r3, #1
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	89fb      	ldrh	r3, [r7, #14]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	89fa      	ldrh	r2, [r7, #14]
 8006704:	60da      	str	r2, [r3, #12]
 8006706:	e04f      	b.n	80067a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	77bb      	strb	r3, [r7, #30]
 800670c:	e04c      	b.n	80067a8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800670e:	7ffb      	ldrb	r3, [r7, #31]
 8006710:	2b08      	cmp	r3, #8
 8006712:	d828      	bhi.n	8006766 <UART_SetConfig+0x462>
 8006714:	a201      	add	r2, pc, #4	; (adr r2, 800671c <UART_SetConfig+0x418>)
 8006716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671a:	bf00      	nop
 800671c:	08006741 	.word	0x08006741
 8006720:	08006749 	.word	0x08006749
 8006724:	08006751 	.word	0x08006751
 8006728:	08006767 	.word	0x08006767
 800672c:	08006757 	.word	0x08006757
 8006730:	08006767 	.word	0x08006767
 8006734:	08006767 	.word	0x08006767
 8006738:	08006767 	.word	0x08006767
 800673c:	0800675f 	.word	0x0800675f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006740:	f7fe f8ae 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 8006744:	61b8      	str	r0, [r7, #24]
        break;
 8006746:	e013      	b.n	8006770 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006748:	f7fe f8be 	bl	80048c8 <HAL_RCC_GetPCLK2Freq>
 800674c:	61b8      	str	r0, [r7, #24]
        break;
 800674e:	e00f      	b.n	8006770 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006750:	4b1d      	ldr	r3, [pc, #116]	; (80067c8 <UART_SetConfig+0x4c4>)
 8006752:	61bb      	str	r3, [r7, #24]
        break;
 8006754:	e00c      	b.n	8006770 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006756:	f7fd ff91 	bl	800467c <HAL_RCC_GetSysClockFreq>
 800675a:	61b8      	str	r0, [r7, #24]
        break;
 800675c:	e008      	b.n	8006770 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800675e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006762:	61bb      	str	r3, [r7, #24]
        break;
 8006764:	e004      	b.n	8006770 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	77bb      	strb	r3, [r7, #30]
        break;
 800676e:	bf00      	nop
    }

    if (pclk != 0U)
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d018      	beq.n	80067a8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	085a      	lsrs	r2, r3, #1
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	441a      	add	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	fbb2 f3f3 	udiv	r3, r2, r3
 8006788:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	2b0f      	cmp	r3, #15
 800678e:	d909      	bls.n	80067a4 <UART_SetConfig+0x4a0>
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006796:	d205      	bcs.n	80067a4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	b29a      	uxth	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	60da      	str	r2, [r3, #12]
 80067a2:	e001      	b.n	80067a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80067b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3720      	adds	r7, #32
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	40007c00 	.word	0x40007c00
 80067c4:	40023800 	.word	0x40023800
 80067c8:	00f42400 	.word	0x00f42400

080067cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00a      	beq.n	80067f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00a      	beq.n	8006818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00a      	beq.n	800683a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00a      	beq.n	800685c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	f003 0310 	and.w	r3, r3, #16
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00a      	beq.n	800687e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006882:	f003 0320 	and.w	r3, r3, #32
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00a      	beq.n	80068a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01a      	beq.n	80068e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068ca:	d10a      	bne.n	80068e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	605a      	str	r2, [r3, #4]
  }
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af02      	add	r7, sp, #8
 8006916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006920:	f7fb fa4e 	bl	8001dc0 <HAL_GetTick>
 8006924:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0308 	and.w	r3, r3, #8
 8006930:	2b08      	cmp	r3, #8
 8006932:	d10e      	bne.n	8006952 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006934:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f831 	bl	80069aa <UART_WaitOnFlagUntilTimeout>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e027      	b.n	80069a2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b04      	cmp	r3, #4
 800695e:	d10e      	bne.n	800697e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006960:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f81b 	bl	80069aa <UART_WaitOnFlagUntilTimeout>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e011      	b.n	80069a2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2220      	movs	r2, #32
 8006988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b09c      	sub	sp, #112	; 0x70
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	603b      	str	r3, [r7, #0]
 80069b6:	4613      	mov	r3, r2
 80069b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ba:	e0a7      	b.n	8006b0c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069c2:	f000 80a3 	beq.w	8006b0c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c6:	f7fb f9fb 	bl	8001dc0 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d302      	bcc.n	80069dc <UART_WaitOnFlagUntilTimeout+0x32>
 80069d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d13f      	bne.n	8006a5c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80069ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069f0:	667b      	str	r3, [r7, #100]	; 0x64
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e6      	bne.n	80069dc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3308      	adds	r3, #8
 8006a14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a20:	f023 0301 	bic.w	r3, r3, #1
 8006a24:	663b      	str	r3, [r7, #96]	; 0x60
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3308      	adds	r3, #8
 8006a2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e5      	bne.n	8006a0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2220      	movs	r2, #32
 8006a46:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e068      	b.n	8006b2e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d050      	beq.n	8006b0c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a78:	d148      	bne.n	8006b0c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a82:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e6      	bne.n	8006a84 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3308      	adds	r3, #8
 8006abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f023 0301 	bic.w	r3, r3, #1
 8006acc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3308      	adds	r3, #8
 8006ad4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ad6:	623a      	str	r2, [r7, #32]
 8006ad8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	69f9      	ldr	r1, [r7, #28]
 8006adc:	6a3a      	ldr	r2, [r7, #32]
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e5      	bne.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2220      	movs	r2, #32
 8006aee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e010      	b.n	8006b2e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	69da      	ldr	r2, [r3, #28]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	4013      	ands	r3, r2
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	bf0c      	ite	eq
 8006b1c:	2301      	moveq	r3, #1
 8006b1e:	2300      	movne	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	461a      	mov	r2, r3
 8006b24:	79fb      	ldrb	r3, [r7, #7]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	f43f af48 	beq.w	80069bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3770      	adds	r7, #112	; 0x70
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b38:	b084      	sub	sp, #16
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	f107 001c 	add.w	r0, r7, #28
 8006b46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d120      	bne.n	8006b92 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68da      	ldr	r2, [r3, #12]
 8006b60:	4b20      	ldr	r3, [pc, #128]	; (8006be4 <USB_CoreInit+0xac>)
 8006b62:	4013      	ands	r3, r2
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d105      	bne.n	8006b86 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fa96 	bl	80070b8 <USB_CoreReset>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	73fb      	strb	r3, [r7, #15]
 8006b90:	e010      	b.n	8006bb4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fa8a 	bl	80070b8 <USB_CoreReset>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d10b      	bne.n	8006bd2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f043 0206 	orr.w	r2, r3, #6
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f043 0220 	orr.w	r2, r3, #32
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bde:	b004      	add	sp, #16
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	ffbdffbf 	.word	0xffbdffbf

08006be8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f023 0201 	bic.w	r2, r3, #1
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b084      	sub	sp, #16
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	460b      	mov	r3, r1
 8006c14:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c26:	78fb      	ldrb	r3, [r7, #3]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d115      	bne.n	8006c58 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c38:	2001      	movs	r0, #1
 8006c3a:	f7fb f8cd 	bl	8001dd8 <HAL_Delay>
      ms++;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3301      	adds	r3, #1
 8006c42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fa29 	bl	800709c <USB_GetMode>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d01e      	beq.n	8006c8e <USB_SetCurrentMode+0x84>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b31      	cmp	r3, #49	; 0x31
 8006c54:	d9f0      	bls.n	8006c38 <USB_SetCurrentMode+0x2e>
 8006c56:	e01a      	b.n	8006c8e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c58:	78fb      	ldrb	r3, [r7, #3]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d115      	bne.n	8006c8a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c6a:	2001      	movs	r0, #1
 8006c6c:	f7fb f8b4 	bl	8001dd8 <HAL_Delay>
      ms++;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	3301      	adds	r3, #1
 8006c74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fa10 	bl	800709c <USB_GetMode>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d005      	beq.n	8006c8e <USB_SetCurrentMode+0x84>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2b31      	cmp	r3, #49	; 0x31
 8006c86:	d9f0      	bls.n	8006c6a <USB_SetCurrentMode+0x60>
 8006c88:	e001      	b.n	8006c8e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e005      	b.n	8006c9a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b32      	cmp	r3, #50	; 0x32
 8006c92:	d101      	bne.n	8006c98 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e000      	b.n	8006c9a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
	...

08006ca4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b086      	sub	sp, #24
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	613b      	str	r3, [r7, #16]
 8006cc2:	e009      	b.n	8006cd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	3340      	adds	r3, #64	; 0x40
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	2200      	movs	r2, #0
 8006cd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	2b0e      	cmp	r3, #14
 8006cdc:	d9f2      	bls.n	8006cc4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d11c      	bne.n	8006d1e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cf2:	f043 0302 	orr.w	r3, r3, #2
 8006cf6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	e005      	b.n	8006d2a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d30:	461a      	mov	r2, r3
 8006d32:	2300      	movs	r3, #0
 8006d34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d44:	461a      	mov	r2, r3
 8006d46:	680b      	ldr	r3, [r1, #0]
 8006d48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d10c      	bne.n	8006d6a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d104      	bne.n	8006d60 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d56:	2100      	movs	r1, #0
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f965 	bl	8007028 <USB_SetDevSpeed>
 8006d5e:	e008      	b.n	8006d72 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d60:	2101      	movs	r1, #1
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f960 	bl	8007028 <USB_SetDevSpeed>
 8006d68:	e003      	b.n	8006d72 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d6a:	2103      	movs	r1, #3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f95b 	bl	8007028 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d72:	2110      	movs	r1, #16
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f8f3 	bl	8006f60 <USB_FlushTxFifo>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f91f 	bl	8006fc8 <USB_FlushRxFifo>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da6:	461a      	mov	r2, r3
 8006da8:	2300      	movs	r3, #0
 8006daa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db2:	461a      	mov	r2, r3
 8006db4:	2300      	movs	r3, #0
 8006db6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006db8:	2300      	movs	r3, #0
 8006dba:	613b      	str	r3, [r7, #16]
 8006dbc:	e043      	b.n	8006e46 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dd4:	d118      	bne.n	8006e08 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10a      	bne.n	8006df2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de8:	461a      	mov	r2, r3
 8006dea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	e013      	b.n	8006e1a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	e008      	b.n	8006e1a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e14:	461a      	mov	r2, r3
 8006e16:	2300      	movs	r3, #0
 8006e18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e26:	461a      	mov	r2, r3
 8006e28:	2300      	movs	r3, #0
 8006e2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e38:	461a      	mov	r2, r3
 8006e3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	3301      	adds	r3, #1
 8006e44:	613b      	str	r3, [r7, #16]
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d3b7      	bcc.n	8006dbe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e4e:	2300      	movs	r3, #0
 8006e50:	613b      	str	r3, [r7, #16]
 8006e52:	e043      	b.n	8006edc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e6a:	d118      	bne.n	8006e9e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10a      	bne.n	8006e88 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e84:	6013      	str	r3, [r2, #0]
 8006e86:	e013      	b.n	8006eb0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e94:	461a      	mov	r2, r3
 8006e96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	e008      	b.n	8006eb0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eaa:	461a      	mov	r2, r3
 8006eac:	2300      	movs	r3, #0
 8006eae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ece:	461a      	mov	r2, r3
 8006ed0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ed4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	613b      	str	r3, [r7, #16]
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d3b7      	bcc.n	8006e54 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ef2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ef6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d105      	bne.n	8006f18 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	f043 0210 	orr.w	r2, r3, #16
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	699a      	ldr	r2, [r3, #24]
 8006f1c:	4b0e      	ldr	r3, [pc, #56]	; (8006f58 <USB_DevInit+0x2b4>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d005      	beq.n	8006f36 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	f043 0208 	orr.w	r2, r3, #8
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d105      	bne.n	8006f48 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	699a      	ldr	r2, [r3, #24]
 8006f40:	4b06      	ldr	r3, [pc, #24]	; (8006f5c <USB_DevInit+0x2b8>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f54:	b004      	add	sp, #16
 8006f56:	4770      	bx	lr
 8006f58:	803c3800 	.word	0x803c3800
 8006f5c:	40000004 	.word	0x40000004

08006f60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3301      	adds	r3, #1
 8006f72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	4a13      	ldr	r2, [pc, #76]	; (8006fc4 <USB_FlushTxFifo+0x64>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d901      	bls.n	8006f80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e01b      	b.n	8006fb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	daf2      	bge.n	8006f6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	019b      	lsls	r3, r3, #6
 8006f90:	f043 0220 	orr.w	r2, r3, #32
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4a08      	ldr	r2, [pc, #32]	; (8006fc4 <USB_FlushTxFifo+0x64>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d901      	bls.n	8006faa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e006      	b.n	8006fb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	d0f0      	beq.n	8006f98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	00030d40 	.word	0x00030d40

08006fc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	4a11      	ldr	r2, [pc, #68]	; (8007024 <USB_FlushRxFifo+0x5c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d901      	bls.n	8006fe6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e018      	b.n	8007018 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	daf2      	bge.n	8006fd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2210      	movs	r2, #16
 8006ff6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4a08      	ldr	r2, [pc, #32]	; (8007024 <USB_FlushRxFifo+0x5c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d901      	bls.n	800700a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e006      	b.n	8007018 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f003 0310 	and.w	r3, r3, #16
 8007012:	2b10      	cmp	r3, #16
 8007014:	d0f0      	beq.n	8006ff8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	00030d40 	.word	0x00030d40

08007028 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	68f9      	ldr	r1, [r7, #12]
 8007044:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007048:	4313      	orrs	r3, r2
 800704a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800705a:	b480      	push	{r7}
 800705c:	b085      	sub	sp, #20
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007074:	f023 0303 	bic.w	r3, r3, #3
 8007078:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007088:	f043 0302 	orr.w	r3, r3, #2
 800708c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	f003 0301 	and.w	r3, r3, #1
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3301      	adds	r3, #1
 80070c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4a13      	ldr	r2, [pc, #76]	; (800711c <USB_CoreReset+0x64>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d901      	bls.n	80070d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e01b      	b.n	800710e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	daf2      	bge.n	80070c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	f043 0201 	orr.w	r2, r3, #1
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3301      	adds	r3, #1
 80070f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4a09      	ldr	r2, [pc, #36]	; (800711c <USB_CoreReset+0x64>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d901      	bls.n	8007100 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e006      	b.n	800710e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b01      	cmp	r3, #1
 800710a:	d0f0      	beq.n	80070ee <USB_CoreReset+0x36>

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	00030d40 	.word	0x00030d40

08007120 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007120:	b5b0      	push	{r4, r5, r7, lr}
 8007122:	b08c      	sub	sp, #48	; 0x30
 8007124:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8007126:	4b96      	ldr	r3, [pc, #600]	; (8007380 <MX_LWIP_Init+0x260>)
 8007128:	220a      	movs	r2, #10
 800712a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 42;
 800712c:	4b94      	ldr	r3, [pc, #592]	; (8007380 <MX_LWIP_Init+0x260>)
 800712e:	222a      	movs	r2, #42	; 0x2a
 8007130:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8007132:	4b93      	ldr	r3, [pc, #588]	; (8007380 <MX_LWIP_Init+0x260>)
 8007134:	2200      	movs	r2, #0
 8007136:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 15;
 8007138:	4b91      	ldr	r3, [pc, #580]	; (8007380 <MX_LWIP_Init+0x260>)
 800713a:	220f      	movs	r2, #15
 800713c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800713e:	4b91      	ldr	r3, [pc, #580]	; (8007384 <MX_LWIP_Init+0x264>)
 8007140:	22ff      	movs	r2, #255	; 0xff
 8007142:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007144:	4b8f      	ldr	r3, [pc, #572]	; (8007384 <MX_LWIP_Init+0x264>)
 8007146:	22ff      	movs	r2, #255	; 0xff
 8007148:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800714a:	4b8e      	ldr	r3, [pc, #568]	; (8007384 <MX_LWIP_Init+0x264>)
 800714c:	22ff      	movs	r2, #255	; 0xff
 800714e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007150:	4b8c      	ldr	r3, [pc, #560]	; (8007384 <MX_LWIP_Init+0x264>)
 8007152:	2200      	movs	r2, #0
 8007154:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8007156:	4b8c      	ldr	r3, [pc, #560]	; (8007388 <MX_LWIP_Init+0x268>)
 8007158:	220a      	movs	r2, #10
 800715a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 42;
 800715c:	4b8a      	ldr	r3, [pc, #552]	; (8007388 <MX_LWIP_Init+0x268>)
 800715e:	222a      	movs	r2, #42	; 0x2a
 8007160:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8007162:	4b89      	ldr	r3, [pc, #548]	; (8007388 <MX_LWIP_Init+0x268>)
 8007164:	2200      	movs	r2, #0
 8007166:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007168:	4b87      	ldr	r3, [pc, #540]	; (8007388 <MX_LWIP_Init+0x268>)
 800716a:	2201      	movs	r2, #1
 800716c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800716e:	2100      	movs	r1, #0
 8007170:	2000      	movs	r0, #0
 8007172:	f005 ff8f 	bl	800d094 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007176:	4b82      	ldr	r3, [pc, #520]	; (8007380 <MX_LWIP_Init+0x260>)
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	061a      	lsls	r2, r3, #24
 800717c:	4b80      	ldr	r3, [pc, #512]	; (8007380 <MX_LWIP_Init+0x260>)
 800717e:	785b      	ldrb	r3, [r3, #1]
 8007180:	041b      	lsls	r3, r3, #16
 8007182:	431a      	orrs	r2, r3
 8007184:	4b7e      	ldr	r3, [pc, #504]	; (8007380 <MX_LWIP_Init+0x260>)
 8007186:	789b      	ldrb	r3, [r3, #2]
 8007188:	021b      	lsls	r3, r3, #8
 800718a:	4313      	orrs	r3, r2
 800718c:	4a7c      	ldr	r2, [pc, #496]	; (8007380 <MX_LWIP_Init+0x260>)
 800718e:	78d2      	ldrb	r2, [r2, #3]
 8007190:	4313      	orrs	r3, r2
 8007192:	061a      	lsls	r2, r3, #24
 8007194:	4b7a      	ldr	r3, [pc, #488]	; (8007380 <MX_LWIP_Init+0x260>)
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	0619      	lsls	r1, r3, #24
 800719a:	4b79      	ldr	r3, [pc, #484]	; (8007380 <MX_LWIP_Init+0x260>)
 800719c:	785b      	ldrb	r3, [r3, #1]
 800719e:	041b      	lsls	r3, r3, #16
 80071a0:	4319      	orrs	r1, r3
 80071a2:	4b77      	ldr	r3, [pc, #476]	; (8007380 <MX_LWIP_Init+0x260>)
 80071a4:	789b      	ldrb	r3, [r3, #2]
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	430b      	orrs	r3, r1
 80071aa:	4975      	ldr	r1, [pc, #468]	; (8007380 <MX_LWIP_Init+0x260>)
 80071ac:	78c9      	ldrb	r1, [r1, #3]
 80071ae:	430b      	orrs	r3, r1
 80071b0:	021b      	lsls	r3, r3, #8
 80071b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071b6:	431a      	orrs	r2, r3
 80071b8:	4b71      	ldr	r3, [pc, #452]	; (8007380 <MX_LWIP_Init+0x260>)
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	0619      	lsls	r1, r3, #24
 80071be:	4b70      	ldr	r3, [pc, #448]	; (8007380 <MX_LWIP_Init+0x260>)
 80071c0:	785b      	ldrb	r3, [r3, #1]
 80071c2:	041b      	lsls	r3, r3, #16
 80071c4:	4319      	orrs	r1, r3
 80071c6:	4b6e      	ldr	r3, [pc, #440]	; (8007380 <MX_LWIP_Init+0x260>)
 80071c8:	789b      	ldrb	r3, [r3, #2]
 80071ca:	021b      	lsls	r3, r3, #8
 80071cc:	430b      	orrs	r3, r1
 80071ce:	496c      	ldr	r1, [pc, #432]	; (8007380 <MX_LWIP_Init+0x260>)
 80071d0:	78c9      	ldrb	r1, [r1, #3]
 80071d2:	430b      	orrs	r3, r1
 80071d4:	0a1b      	lsrs	r3, r3, #8
 80071d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80071da:	431a      	orrs	r2, r3
 80071dc:	4b68      	ldr	r3, [pc, #416]	; (8007380 <MX_LWIP_Init+0x260>)
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	0619      	lsls	r1, r3, #24
 80071e2:	4b67      	ldr	r3, [pc, #412]	; (8007380 <MX_LWIP_Init+0x260>)
 80071e4:	785b      	ldrb	r3, [r3, #1]
 80071e6:	041b      	lsls	r3, r3, #16
 80071e8:	4319      	orrs	r1, r3
 80071ea:	4b65      	ldr	r3, [pc, #404]	; (8007380 <MX_LWIP_Init+0x260>)
 80071ec:	789b      	ldrb	r3, [r3, #2]
 80071ee:	021b      	lsls	r3, r3, #8
 80071f0:	430b      	orrs	r3, r1
 80071f2:	4963      	ldr	r1, [pc, #396]	; (8007380 <MX_LWIP_Init+0x260>)
 80071f4:	78c9      	ldrb	r1, [r1, #3]
 80071f6:	430b      	orrs	r3, r1
 80071f8:	0e1b      	lsrs	r3, r3, #24
 80071fa:	4313      	orrs	r3, r2
 80071fc:	4a63      	ldr	r2, [pc, #396]	; (800738c <MX_LWIP_Init+0x26c>)
 80071fe:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007200:	4b60      	ldr	r3, [pc, #384]	; (8007384 <MX_LWIP_Init+0x264>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	061a      	lsls	r2, r3, #24
 8007206:	4b5f      	ldr	r3, [pc, #380]	; (8007384 <MX_LWIP_Init+0x264>)
 8007208:	785b      	ldrb	r3, [r3, #1]
 800720a:	041b      	lsls	r3, r3, #16
 800720c:	431a      	orrs	r2, r3
 800720e:	4b5d      	ldr	r3, [pc, #372]	; (8007384 <MX_LWIP_Init+0x264>)
 8007210:	789b      	ldrb	r3, [r3, #2]
 8007212:	021b      	lsls	r3, r3, #8
 8007214:	4313      	orrs	r3, r2
 8007216:	4a5b      	ldr	r2, [pc, #364]	; (8007384 <MX_LWIP_Init+0x264>)
 8007218:	78d2      	ldrb	r2, [r2, #3]
 800721a:	4313      	orrs	r3, r2
 800721c:	061a      	lsls	r2, r3, #24
 800721e:	4b59      	ldr	r3, [pc, #356]	; (8007384 <MX_LWIP_Init+0x264>)
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	0619      	lsls	r1, r3, #24
 8007224:	4b57      	ldr	r3, [pc, #348]	; (8007384 <MX_LWIP_Init+0x264>)
 8007226:	785b      	ldrb	r3, [r3, #1]
 8007228:	041b      	lsls	r3, r3, #16
 800722a:	4319      	orrs	r1, r3
 800722c:	4b55      	ldr	r3, [pc, #340]	; (8007384 <MX_LWIP_Init+0x264>)
 800722e:	789b      	ldrb	r3, [r3, #2]
 8007230:	021b      	lsls	r3, r3, #8
 8007232:	430b      	orrs	r3, r1
 8007234:	4953      	ldr	r1, [pc, #332]	; (8007384 <MX_LWIP_Init+0x264>)
 8007236:	78c9      	ldrb	r1, [r1, #3]
 8007238:	430b      	orrs	r3, r1
 800723a:	021b      	lsls	r3, r3, #8
 800723c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007240:	431a      	orrs	r2, r3
 8007242:	4b50      	ldr	r3, [pc, #320]	; (8007384 <MX_LWIP_Init+0x264>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	0619      	lsls	r1, r3, #24
 8007248:	4b4e      	ldr	r3, [pc, #312]	; (8007384 <MX_LWIP_Init+0x264>)
 800724a:	785b      	ldrb	r3, [r3, #1]
 800724c:	041b      	lsls	r3, r3, #16
 800724e:	4319      	orrs	r1, r3
 8007250:	4b4c      	ldr	r3, [pc, #304]	; (8007384 <MX_LWIP_Init+0x264>)
 8007252:	789b      	ldrb	r3, [r3, #2]
 8007254:	021b      	lsls	r3, r3, #8
 8007256:	430b      	orrs	r3, r1
 8007258:	494a      	ldr	r1, [pc, #296]	; (8007384 <MX_LWIP_Init+0x264>)
 800725a:	78c9      	ldrb	r1, [r1, #3]
 800725c:	430b      	orrs	r3, r1
 800725e:	0a1b      	lsrs	r3, r3, #8
 8007260:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007264:	431a      	orrs	r2, r3
 8007266:	4b47      	ldr	r3, [pc, #284]	; (8007384 <MX_LWIP_Init+0x264>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	0619      	lsls	r1, r3, #24
 800726c:	4b45      	ldr	r3, [pc, #276]	; (8007384 <MX_LWIP_Init+0x264>)
 800726e:	785b      	ldrb	r3, [r3, #1]
 8007270:	041b      	lsls	r3, r3, #16
 8007272:	4319      	orrs	r1, r3
 8007274:	4b43      	ldr	r3, [pc, #268]	; (8007384 <MX_LWIP_Init+0x264>)
 8007276:	789b      	ldrb	r3, [r3, #2]
 8007278:	021b      	lsls	r3, r3, #8
 800727a:	430b      	orrs	r3, r1
 800727c:	4941      	ldr	r1, [pc, #260]	; (8007384 <MX_LWIP_Init+0x264>)
 800727e:	78c9      	ldrb	r1, [r1, #3]
 8007280:	430b      	orrs	r3, r1
 8007282:	0e1b      	lsrs	r3, r3, #24
 8007284:	4313      	orrs	r3, r2
 8007286:	4a42      	ldr	r2, [pc, #264]	; (8007390 <MX_LWIP_Init+0x270>)
 8007288:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800728a:	4b3f      	ldr	r3, [pc, #252]	; (8007388 <MX_LWIP_Init+0x268>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	061a      	lsls	r2, r3, #24
 8007290:	4b3d      	ldr	r3, [pc, #244]	; (8007388 <MX_LWIP_Init+0x268>)
 8007292:	785b      	ldrb	r3, [r3, #1]
 8007294:	041b      	lsls	r3, r3, #16
 8007296:	431a      	orrs	r2, r3
 8007298:	4b3b      	ldr	r3, [pc, #236]	; (8007388 <MX_LWIP_Init+0x268>)
 800729a:	789b      	ldrb	r3, [r3, #2]
 800729c:	021b      	lsls	r3, r3, #8
 800729e:	4313      	orrs	r3, r2
 80072a0:	4a39      	ldr	r2, [pc, #228]	; (8007388 <MX_LWIP_Init+0x268>)
 80072a2:	78d2      	ldrb	r2, [r2, #3]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	061a      	lsls	r2, r3, #24
 80072a8:	4b37      	ldr	r3, [pc, #220]	; (8007388 <MX_LWIP_Init+0x268>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	0619      	lsls	r1, r3, #24
 80072ae:	4b36      	ldr	r3, [pc, #216]	; (8007388 <MX_LWIP_Init+0x268>)
 80072b0:	785b      	ldrb	r3, [r3, #1]
 80072b2:	041b      	lsls	r3, r3, #16
 80072b4:	4319      	orrs	r1, r3
 80072b6:	4b34      	ldr	r3, [pc, #208]	; (8007388 <MX_LWIP_Init+0x268>)
 80072b8:	789b      	ldrb	r3, [r3, #2]
 80072ba:	021b      	lsls	r3, r3, #8
 80072bc:	430b      	orrs	r3, r1
 80072be:	4932      	ldr	r1, [pc, #200]	; (8007388 <MX_LWIP_Init+0x268>)
 80072c0:	78c9      	ldrb	r1, [r1, #3]
 80072c2:	430b      	orrs	r3, r1
 80072c4:	021b      	lsls	r3, r3, #8
 80072c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072ca:	431a      	orrs	r2, r3
 80072cc:	4b2e      	ldr	r3, [pc, #184]	; (8007388 <MX_LWIP_Init+0x268>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	0619      	lsls	r1, r3, #24
 80072d2:	4b2d      	ldr	r3, [pc, #180]	; (8007388 <MX_LWIP_Init+0x268>)
 80072d4:	785b      	ldrb	r3, [r3, #1]
 80072d6:	041b      	lsls	r3, r3, #16
 80072d8:	4319      	orrs	r1, r3
 80072da:	4b2b      	ldr	r3, [pc, #172]	; (8007388 <MX_LWIP_Init+0x268>)
 80072dc:	789b      	ldrb	r3, [r3, #2]
 80072de:	021b      	lsls	r3, r3, #8
 80072e0:	430b      	orrs	r3, r1
 80072e2:	4929      	ldr	r1, [pc, #164]	; (8007388 <MX_LWIP_Init+0x268>)
 80072e4:	78c9      	ldrb	r1, [r1, #3]
 80072e6:	430b      	orrs	r3, r1
 80072e8:	0a1b      	lsrs	r3, r3, #8
 80072ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80072ee:	431a      	orrs	r2, r3
 80072f0:	4b25      	ldr	r3, [pc, #148]	; (8007388 <MX_LWIP_Init+0x268>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	0619      	lsls	r1, r3, #24
 80072f6:	4b24      	ldr	r3, [pc, #144]	; (8007388 <MX_LWIP_Init+0x268>)
 80072f8:	785b      	ldrb	r3, [r3, #1]
 80072fa:	041b      	lsls	r3, r3, #16
 80072fc:	4319      	orrs	r1, r3
 80072fe:	4b22      	ldr	r3, [pc, #136]	; (8007388 <MX_LWIP_Init+0x268>)
 8007300:	789b      	ldrb	r3, [r3, #2]
 8007302:	021b      	lsls	r3, r3, #8
 8007304:	430b      	orrs	r3, r1
 8007306:	4920      	ldr	r1, [pc, #128]	; (8007388 <MX_LWIP_Init+0x268>)
 8007308:	78c9      	ldrb	r1, [r1, #3]
 800730a:	430b      	orrs	r3, r1
 800730c:	0e1b      	lsrs	r3, r3, #24
 800730e:	4313      	orrs	r3, r2
 8007310:	4a20      	ldr	r2, [pc, #128]	; (8007394 <MX_LWIP_Init+0x274>)
 8007312:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007314:	4b20      	ldr	r3, [pc, #128]	; (8007398 <MX_LWIP_Init+0x278>)
 8007316:	9302      	str	r3, [sp, #8]
 8007318:	4b20      	ldr	r3, [pc, #128]	; (800739c <MX_LWIP_Init+0x27c>)
 800731a:	9301      	str	r3, [sp, #4]
 800731c:	2300      	movs	r3, #0
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	4b1c      	ldr	r3, [pc, #112]	; (8007394 <MX_LWIP_Init+0x274>)
 8007322:	4a1b      	ldr	r2, [pc, #108]	; (8007390 <MX_LWIP_Init+0x270>)
 8007324:	4919      	ldr	r1, [pc, #100]	; (800738c <MX_LWIP_Init+0x26c>)
 8007326:	481e      	ldr	r0, [pc, #120]	; (80073a0 <MX_LWIP_Init+0x280>)
 8007328:	f006 fc8e 	bl	800dc48 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800732c:	481c      	ldr	r0, [pc, #112]	; (80073a0 <MX_LWIP_Init+0x280>)
 800732e:	f006 fe3d 	bl	800dfac <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007332:	4b1b      	ldr	r3, [pc, #108]	; (80073a0 <MX_LWIP_Init+0x280>)
 8007334:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007338:	089b      	lsrs	r3, r3, #2
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b00      	cmp	r3, #0
 8007342:	d003      	beq.n	800734c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007344:	4816      	ldr	r0, [pc, #88]	; (80073a0 <MX_LWIP_Init+0x280>)
 8007346:	f006 fe41 	bl	800dfcc <netif_set_up>
 800734a:	e002      	b.n	8007352 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800734c:	4814      	ldr	r0, [pc, #80]	; (80073a0 <MX_LWIP_Init+0x280>)
 800734e:	f006 fea9 	bl	800e0a4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007352:	4914      	ldr	r1, [pc, #80]	; (80073a4 <MX_LWIP_Init+0x284>)
 8007354:	4812      	ldr	r0, [pc, #72]	; (80073a0 <MX_LWIP_Init+0x280>)
 8007356:	f006 ff3b 	bl	800e1d0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800735a:	4b13      	ldr	r3, [pc, #76]	; (80073a8 <MX_LWIP_Init+0x288>)
 800735c:	1d3c      	adds	r4, r7, #4
 800735e:	461d      	mov	r5, r3
 8007360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007364:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800736c:	1d3b      	adds	r3, r7, #4
 800736e:	490c      	ldr	r1, [pc, #48]	; (80073a0 <MX_LWIP_Init+0x280>)
 8007370:	4618      	mov	r0, r3
 8007372:	f000 fd47 	bl	8007e04 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007376:	bf00      	nop
 8007378:	3720      	adds	r7, #32
 800737a:	46bd      	mov	sp, r7
 800737c:	bdb0      	pop	{r4, r5, r7, pc}
 800737e:	bf00      	nop
 8007380:	20001a78 	.word	0x20001a78
 8007384:	20001a7c 	.word	0x20001a7c
 8007388:	20001a80 	.word	0x20001a80
 800738c:	20001a6c 	.word	0x20001a6c
 8007390:	20001a70 	.word	0x20001a70
 8007394:	20001a74 	.word	0x20001a74
 8007398:	0800cfa5 	.word	0x0800cfa5
 800739c:	080078a5 	.word	0x080078a5
 80073a0:	20001a38 	.word	0x20001a38
 80073a4:	080073ad 	.word	0x080073ad
 80073a8:	0801e994 	.word	0x0801e994

080073ac <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80073d2:	2320      	movs	r3, #32
 80073d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80073d6:	f3bf 8f4f 	dsb	sy
}
 80073da:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 80073dc:	e00b      	b.n	80073f6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80073de:	4a0d      	ldr	r2, [pc, #52]	; (8007414 <SCB_InvalidateDCache_by_Addr+0x54>)
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	4413      	add	r3, r2
 80073ec:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	dcf0      	bgt.n	80073de <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80073fc:	f3bf 8f4f 	dsb	sy
}
 8007400:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007402:	f3bf 8f6f 	isb	sy
}
 8007406:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8007408:	bf00      	nop
 800740a:	371c      	adds	r7, #28
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	e000ed00 	.word	0xe000ed00

08007418 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007420:	4b04      	ldr	r3, [pc, #16]	; (8007434 <HAL_ETH_RxCpltCallback+0x1c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4618      	mov	r0, r3
 8007426:	f000 fe69 	bl	80080fc <osSemaphoreRelease>
}
 800742a:	bf00      	nop
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20006410 	.word	0x20006410

08007438 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007440:	4b04      	ldr	r3, [pc, #16]	; (8007454 <HAL_ETH_TxCpltCallback+0x1c>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fe59 	bl	80080fc <osSemaphoreRelease>
}
 800744a:	bf00      	nop
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	20006414 	.word	0x20006414

08007458 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7fb fccd 	bl	8002e00 <HAL_ETH_GetDMAError>
 8007466:	4603      	mov	r3, r0
 8007468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800746c:	2b80      	cmp	r3, #128	; 0x80
 800746e:	d104      	bne.n	800747a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007470:	4b04      	ldr	r3, [pc, #16]	; (8007484 <HAL_ETH_ErrorCallback+0x2c>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4618      	mov	r0, r3
 8007476:	f000 fe41 	bl	80080fc <osSemaphoreRelease>
  }
}
 800747a:	bf00      	nop
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	20006410 	.word	0x20006410

08007488 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007488:	b5b0      	push	{r4, r5, r7, lr}
 800748a:	b0a8      	sub	sp, #160	; 0xa0
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 800749c:	2300      	movs	r3, #0
 800749e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 80074a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80074a6:	2264      	movs	r2, #100	; 0x64
 80074a8:	2100      	movs	r1, #0
 80074aa:	4618      	mov	r0, r3
 80074ac:	f016 f8b0 	bl	801d610 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80074b0:	4b85      	ldr	r3, [pc, #532]	; (80076c8 <low_level_init+0x240>)
 80074b2:	4a86      	ldr	r2, [pc, #536]	; (80076cc <low_level_init+0x244>)
 80074b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80074b6:	2300      	movs	r3, #0
 80074b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 80074bc:	2380      	movs	r3, #128	; 0x80
 80074be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 80074c2:	23e1      	movs	r3, #225	; 0xe1
 80074c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 80074c8:	2300      	movs	r3, #0
 80074ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 80074ce:	2300      	movs	r3, #0
 80074d0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 80074d4:	2300      	movs	r3, #0
 80074d6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 80074da:	4a7b      	ldr	r2, [pc, #492]	; (80076c8 <low_level_init+0x240>)
 80074dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074e0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80074e2:	4b79      	ldr	r3, [pc, #484]	; (80076c8 <low_level_init+0x240>)
 80074e4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80074e8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80074ea:	4b77      	ldr	r3, [pc, #476]	; (80076c8 <low_level_init+0x240>)
 80074ec:	4a78      	ldr	r2, [pc, #480]	; (80076d0 <low_level_init+0x248>)
 80074ee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80074f0:	4b75      	ldr	r3, [pc, #468]	; (80076c8 <low_level_init+0x240>)
 80074f2:	4a78      	ldr	r2, [pc, #480]	; (80076d4 <low_level_init+0x24c>)
 80074f4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80074f6:	4b74      	ldr	r3, [pc, #464]	; (80076c8 <low_level_init+0x240>)
 80074f8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80074fc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80074fe:	4872      	ldr	r0, [pc, #456]	; (80076c8 <low_level_init+0x240>)
 8007500:	f7fa fe40 	bl	8002184 <HAL_ETH_Init>
 8007504:	4603      	mov	r3, r0
 8007506:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800750a:	2238      	movs	r2, #56	; 0x38
 800750c:	2100      	movs	r1, #0
 800750e:	4872      	ldr	r0, [pc, #456]	; (80076d8 <low_level_init+0x250>)
 8007510:	f016 f87e 	bl	801d610 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007514:	4b70      	ldr	r3, [pc, #448]	; (80076d8 <low_level_init+0x250>)
 8007516:	2221      	movs	r2, #33	; 0x21
 8007518:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800751a:	4b6f      	ldr	r3, [pc, #444]	; (80076d8 <low_level_init+0x250>)
 800751c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8007520:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007522:	4b6d      	ldr	r3, [pc, #436]	; (80076d8 <low_level_init+0x250>)
 8007524:	2200      	movs	r2, #0
 8007526:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007528:	486c      	ldr	r0, [pc, #432]	; (80076dc <low_level_init+0x254>)
 800752a:	f006 fa47 	bl	800d9bc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2206      	movs	r2, #6
 8007532:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007536:	4b64      	ldr	r3, [pc, #400]	; (80076c8 <low_level_init+0x240>)
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	781a      	ldrb	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007542:	4b61      	ldr	r3, [pc, #388]	; (80076c8 <low_level_init+0x240>)
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	785a      	ldrb	r2, [r3, #1]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800754e:	4b5e      	ldr	r3, [pc, #376]	; (80076c8 <low_level_init+0x240>)
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	789a      	ldrb	r2, [r3, #2]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800755a:	4b5b      	ldr	r3, [pc, #364]	; (80076c8 <low_level_init+0x240>)
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	78da      	ldrb	r2, [r3, #3]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007566:	4b58      	ldr	r3, [pc, #352]	; (80076c8 <low_level_init+0x240>)
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	791a      	ldrb	r2, [r3, #4]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007572:	4b55      	ldr	r3, [pc, #340]	; (80076c8 <low_level_init+0x240>)
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	795a      	ldrb	r2, [r3, #5]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007584:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800758c:	f043 030a 	orr.w	r3, r3, #10
 8007590:	b2da      	uxtb	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8007598:	2203      	movs	r2, #3
 800759a:	2100      	movs	r1, #0
 800759c:	2001      	movs	r0, #1
 800759e:	f001 f89d 	bl	80086dc <xQueueGenericCreate>
 80075a2:	4603      	mov	r3, r0
 80075a4:	4a4e      	ldr	r2, [pc, #312]	; (80076e0 <low_level_init+0x258>)
 80075a6:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 80075a8:	2203      	movs	r2, #3
 80075aa:	2100      	movs	r1, #0
 80075ac:	2001      	movs	r0, #1
 80075ae:	f001 f895 	bl	80086dc <xQueueGenericCreate>
 80075b2:	4603      	mov	r3, r0
 80075b4:	4a4b      	ldr	r2, [pc, #300]	; (80076e4 <low_level_init+0x25c>)
 80075b6:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80075b8:	4b4b      	ldr	r3, [pc, #300]	; (80076e8 <low_level_init+0x260>)
 80075ba:	f107 0408 	add.w	r4, r7, #8
 80075be:	461d      	mov	r5, r3
 80075c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80075c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80075cc:	f107 0308 	add.w	r3, r7, #8
 80075d0:	6879      	ldr	r1, [r7, #4]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 fc16 	bl	8007e04 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80075d8:	4944      	ldr	r1, [pc, #272]	; (80076ec <low_level_init+0x264>)
 80075da:	4845      	ldr	r0, [pc, #276]	; (80076f0 <low_level_init+0x268>)
 80075dc:	f7fa fa6d 	bl	8001aba <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80075e0:	4843      	ldr	r0, [pc, #268]	; (80076f0 <low_level_init+0x268>)
 80075e2:	f7fa fa9c 	bl	8001b1e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80075e6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d165      	bne.n	80076ba <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80075ee:	4840      	ldr	r0, [pc, #256]	; (80076f0 <low_level_init+0x268>)
 80075f0:	f7fa fb3d 	bl	8001c6e <LAN8742_GetLinkState>
 80075f4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80075f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	dc06      	bgt.n	800760e <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f006 fdb5 	bl	800e170 <netif_set_link_down>
      netif_set_down(netif);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f006 fd4c 	bl	800e0a4 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800760c:	e057      	b.n	80076be <low_level_init+0x236>
      switch (PHYLinkState)
 800760e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007612:	3b02      	subs	r3, #2
 8007614:	2b03      	cmp	r3, #3
 8007616:	d82b      	bhi.n	8007670 <low_level_init+0x1e8>
 8007618:	a201      	add	r2, pc, #4	; (adr r2, 8007620 <low_level_init+0x198>)
 800761a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761e:	bf00      	nop
 8007620:	08007631 	.word	0x08007631
 8007624:	08007643 	.word	0x08007643
 8007628:	08007653 	.word	0x08007653
 800762c:	08007663 	.word	0x08007663
        duplex = ETH_FULLDUPLEX_MODE;
 8007630:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8007638:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800763c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007640:	e01f      	b.n	8007682 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8007642:	2300      	movs	r3, #0
 8007644:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8007648:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800764c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007650:	e017      	b.n	8007682 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8007652:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007656:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800765a:	2300      	movs	r3, #0
 800765c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007660:	e00f      	b.n	8007682 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8007662:	2300      	movs	r3, #0
 8007664:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8007668:	2300      	movs	r3, #0
 800766a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800766e:	e008      	b.n	8007682 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8007670:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007674:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8007678:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800767c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007680:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007682:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007686:	4619      	mov	r1, r3
 8007688:	480f      	ldr	r0, [pc, #60]	; (80076c8 <low_level_init+0x240>)
 800768a:	f7fb fa5f 	bl	8002b4c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800768e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007692:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8007694:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007698:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800769a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800769e:	4619      	mov	r1, r3
 80076a0:	4809      	ldr	r0, [pc, #36]	; (80076c8 <low_level_init+0x240>)
 80076a2:	f7fb fb3d 	bl	8002d20 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80076a6:	4808      	ldr	r0, [pc, #32]	; (80076c8 <low_level_init+0x240>)
 80076a8:	f7fa fde8 	bl	800227c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f006 fc8d 	bl	800dfcc <netif_set_up>
    netif_set_link_up(netif);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f006 fd28 	bl	800e108 <netif_set_link_up>
}
 80076b8:	e001      	b.n	80076be <low_level_init+0x236>
    Error_Handler();
 80076ba:	f7f9 fc21 	bl	8000f00 <Error_Handler>
}
 80076be:	bf00      	nop
 80076c0:	37a0      	adds	r7, #160	; 0xa0
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bdb0      	pop	{r4, r5, r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20006418 	.word	0x20006418
 80076cc:	40028000 	.word	0x40028000
 80076d0:	20000134 	.word	0x20000134
 80076d4:	20000094 	.word	0x20000094
 80076d8:	200064c8 	.word	0x200064c8
 80076dc:	0802211c 	.word	0x0802211c
 80076e0:	20006410 	.word	0x20006410
 80076e4:	20006414 	.word	0x20006414
 80076e8:	0801e9b8 	.word	0x0801e9b8
 80076ec:	2000000c 	.word	0x2000000c
 80076f0:	20006500 	.word	0x20006500

080076f4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b092      	sub	sp, #72	; 0x48
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8007702:	2300      	movs	r3, #0
 8007704:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800770c:	f107 030c 	add.w	r3, r7, #12
 8007710:	2230      	movs	r2, #48	; 0x30
 8007712:	2100      	movs	r1, #0
 8007714:	4618      	mov	r0, r3
 8007716:	f015 ff7b 	bl	801d610 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800771a:	f107 030c 	add.w	r3, r7, #12
 800771e:	2230      	movs	r2, #48	; 0x30
 8007720:	2100      	movs	r1, #0
 8007722:	4618      	mov	r0, r3
 8007724:	f015 ff74 	bl	801d610 <memset>

  for(q = p; q != NULL; q = q->next)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	643b      	str	r3, [r7, #64]	; 0x40
 800772c:	e045      	b.n	80077ba <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800772e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007730:	2b03      	cmp	r3, #3
 8007732:	d902      	bls.n	800773a <low_level_output+0x46>
      return ERR_IF;
 8007734:	f06f 030b 	mvn.w	r3, #11
 8007738:	e065      	b.n	8007806 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800773a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800773c:	6859      	ldr	r1, [r3, #4]
 800773e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007740:	4613      	mov	r3, r2
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	4413      	add	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	3348      	adds	r3, #72	; 0x48
 800774a:	443b      	add	r3, r7
 800774c:	3b3c      	subs	r3, #60	; 0x3c
 800774e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007752:	895b      	ldrh	r3, [r3, #10]
 8007754:	4619      	mov	r1, r3
 8007756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007758:	4613      	mov	r3, r2
 800775a:	005b      	lsls	r3, r3, #1
 800775c:	4413      	add	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	3348      	adds	r3, #72	; 0x48
 8007762:	443b      	add	r3, r7
 8007764:	3b38      	subs	r3, #56	; 0x38
 8007766:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800776a:	2b00      	cmp	r3, #0
 800776c:	d011      	beq.n	8007792 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800776e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007770:	1e5a      	subs	r2, r3, #1
 8007772:	f107 000c 	add.w	r0, r7, #12
 8007776:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007778:	460b      	mov	r3, r1
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	440b      	add	r3, r1
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	18c1      	adds	r1, r0, r3
 8007782:	4613      	mov	r3, r2
 8007784:	005b      	lsls	r3, r3, #1
 8007786:	4413      	add	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	3348      	adds	r3, #72	; 0x48
 800778c:	443b      	add	r3, r7
 800778e:	3b34      	subs	r3, #52	; 0x34
 8007790:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d109      	bne.n	80077ae <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800779a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800779c:	4613      	mov	r3, r2
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	4413      	add	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	3348      	adds	r3, #72	; 0x48
 80077a6:	443b      	add	r3, r7
 80077a8:	3b34      	subs	r3, #52	; 0x34
 80077aa:	2200      	movs	r2, #0
 80077ac:	601a      	str	r2, [r3, #0]
    }

    i++;
 80077ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077b0:	3301      	adds	r3, #1
 80077b2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80077b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	643b      	str	r3, [r7, #64]	; 0x40
 80077ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1b6      	bne.n	800772e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	891b      	ldrh	r3, [r3, #8]
 80077c4:	461a      	mov	r2, r3
 80077c6:	4b12      	ldr	r3, [pc, #72]	; (8007810 <low_level_output+0x11c>)
 80077c8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80077ca:	4a11      	ldr	r2, [pc, #68]	; (8007810 <low_level_output+0x11c>)
 80077cc:	f107 030c 	add.w	r3, r7, #12
 80077d0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80077d2:	4a0f      	ldr	r2, [pc, #60]	; (8007810 <low_level_output+0x11c>)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80077d8:	6838      	ldr	r0, [r7, #0]
 80077da:	f007 f94d 	bl	800ea78 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80077de:	490c      	ldr	r1, [pc, #48]	; (8007810 <low_level_output+0x11c>)
 80077e0:	480c      	ldr	r0, [pc, #48]	; (8007814 <low_level_output+0x120>)
 80077e2:	f7fa fe59 	bl	8002498 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80077e6:	bf00      	nop
 80077e8:	4b0b      	ldr	r3, [pc, #44]	; (8007818 <low_level_output+0x124>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 fc35 	bl	8008060 <osSemaphoreWait>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1f5      	bne.n	80077e8 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80077fc:	4805      	ldr	r0, [pc, #20]	; (8007814 <low_level_output+0x120>)
 80077fe:	f7fa ffdf 	bl	80027c0 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8007802:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007806:	4618      	mov	r0, r3
 8007808:	3748      	adds	r7, #72	; 0x48
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	200064c8 	.word	0x200064c8
 8007814:	20006418 	.word	0x20006418
 8007818:	20006414 	.word	0x20006414

0800781c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8007828:	4b07      	ldr	r3, [pc, #28]	; (8007848 <low_level_input+0x2c>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d105      	bne.n	800783c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007830:	f107 030c 	add.w	r3, r7, #12
 8007834:	4619      	mov	r1, r3
 8007836:	4805      	ldr	r0, [pc, #20]	; (800784c <low_level_input+0x30>)
 8007838:	f7fa fe8a 	bl	8002550 <HAL_ETH_ReadData>
  }

  return p;
 800783c:	68fb      	ldr	r3, [r7, #12]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	2000640c 	.word	0x2000640c
 800784c:	20006418 	.word	0x20006418

08007850 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007858:	2300      	movs	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007860:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <ethernetif_input+0x50>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fbf9 	bl	8008060 <osSemaphoreWait>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1f5      	bne.n	8007860 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8007874:	68b8      	ldr	r0, [r7, #8]
 8007876:	f7ff ffd1 	bl	800781c <low_level_input>
 800787a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00a      	beq.n	8007898 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	68b9      	ldr	r1, [r7, #8]
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	4798      	blx	r3
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d002      	beq.n	8007898 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f007 f84a 	bl	800e92c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1ea      	bne.n	8007874 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800789e:	e7df      	b.n	8007860 <ethernetif_input+0x10>
 80078a0:	20006410 	.word	0x20006410

080078a4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d106      	bne.n	80078c0 <ethernetif_init+0x1c>
 80078b2:	4b0e      	ldr	r3, [pc, #56]	; (80078ec <ethernetif_init+0x48>)
 80078b4:	f240 12ef 	movw	r2, #495	; 0x1ef
 80078b8:	490d      	ldr	r1, [pc, #52]	; (80078f0 <ethernetif_init+0x4c>)
 80078ba:	480e      	ldr	r0, [pc, #56]	; (80078f4 <ethernetif_init+0x50>)
 80078bc:	f015 feb0 	bl	801d620 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2273      	movs	r2, #115	; 0x73
 80078c4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2274      	movs	r2, #116	; 0x74
 80078cc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a09      	ldr	r2, [pc, #36]	; (80078f8 <ethernetif_init+0x54>)
 80078d4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a08      	ldr	r2, [pc, #32]	; (80078fc <ethernetif_init+0x58>)
 80078da:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff fdd3 	bl	8007488 <low_level_init>

  return ERR_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	0801e9d4 	.word	0x0801e9d4
 80078f0:	0801e9f0 	.word	0x0801e9f0
 80078f4:	0801ea00 	.word	0x0801ea00
 80078f8:	08016141 	.word	0x08016141
 80078fc:	080076f5 	.word	0x080076f5

08007900 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800790c:	68f9      	ldr	r1, [r7, #12]
 800790e:	4809      	ldr	r0, [pc, #36]	; (8007934 <pbuf_free_custom+0x34>)
 8007910:	f006 f944 	bl	800db9c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007914:	4b08      	ldr	r3, [pc, #32]	; (8007938 <pbuf_free_custom+0x38>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d107      	bne.n	800792c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800791c:	4b06      	ldr	r3, [pc, #24]	; (8007938 <pbuf_free_custom+0x38>)
 800791e:	2200      	movs	r2, #0
 8007920:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8007922:	4b06      	ldr	r3, [pc, #24]	; (800793c <pbuf_free_custom+0x3c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4618      	mov	r0, r3
 8007928:	f000 fbe8 	bl	80080fc <osSemaphoreRelease>
  }
}
 800792c:	bf00      	nop
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	0802211c 	.word	0x0802211c
 8007938:	2000640c 	.word	0x2000640c
 800793c:	20006410 	.word	0x20006410

08007940 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007944:	f7fa fa3c 	bl	8001dc0 <HAL_GetTick>
 8007948:	4603      	mov	r3, r0
}
 800794a:	4618      	mov	r0, r3
 800794c:	bd80      	pop	{r7, pc}
	...

08007950 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08e      	sub	sp, #56	; 0x38
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800795c:	2200      	movs	r2, #0
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	605a      	str	r2, [r3, #4]
 8007962:	609a      	str	r2, [r3, #8]
 8007964:	60da      	str	r2, [r3, #12]
 8007966:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a52      	ldr	r2, [pc, #328]	; (8007ab8 <HAL_ETH_MspInit+0x168>)
 800796e:	4293      	cmp	r3, r2
 8007970:	f040 809e 	bne.w	8007ab0 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007974:	4b51      	ldr	r3, [pc, #324]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 8007976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007978:	4a50      	ldr	r2, [pc, #320]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 800797a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800797e:	6313      	str	r3, [r2, #48]	; 0x30
 8007980:	4b4e      	ldr	r3, [pc, #312]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 8007982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007988:	623b      	str	r3, [r7, #32]
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	4b4b      	ldr	r3, [pc, #300]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 800798e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007990:	4a4a      	ldr	r2, [pc, #296]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 8007992:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007996:	6313      	str	r3, [r2, #48]	; 0x30
 8007998:	4b48      	ldr	r3, [pc, #288]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 800799a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079a0:	61fb      	str	r3, [r7, #28]
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	4b45      	ldr	r3, [pc, #276]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 80079a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a8:	4a44      	ldr	r2, [pc, #272]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 80079aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80079ae:	6313      	str	r3, [r2, #48]	; 0x30
 80079b0:	4b42      	ldr	r3, [pc, #264]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 80079b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079b8:	61bb      	str	r3, [r7, #24]
 80079ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80079bc:	4b3f      	ldr	r3, [pc, #252]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 80079be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c0:	4a3e      	ldr	r2, [pc, #248]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 80079c2:	f043 0304 	orr.w	r3, r3, #4
 80079c6:	6313      	str	r3, [r2, #48]	; 0x30
 80079c8:	4b3c      	ldr	r3, [pc, #240]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 80079ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	617b      	str	r3, [r7, #20]
 80079d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079d4:	4b39      	ldr	r3, [pc, #228]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 80079d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d8:	4a38      	ldr	r2, [pc, #224]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 80079da:	f043 0301 	orr.w	r3, r3, #1
 80079de:	6313      	str	r3, [r2, #48]	; 0x30
 80079e0:	4b36      	ldr	r3, [pc, #216]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 80079e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e4:	f003 0301 	and.w	r3, r3, #1
 80079e8:	613b      	str	r3, [r7, #16]
 80079ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079ec:	4b33      	ldr	r3, [pc, #204]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 80079ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f0:	4a32      	ldr	r2, [pc, #200]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 80079f2:	f043 0302 	orr.w	r3, r3, #2
 80079f6:	6313      	str	r3, [r2, #48]	; 0x30
 80079f8:	4b30      	ldr	r3, [pc, #192]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 80079fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	60fb      	str	r3, [r7, #12]
 8007a02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007a04:	4b2d      	ldr	r3, [pc, #180]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 8007a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a08:	4a2c      	ldr	r2, [pc, #176]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 8007a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8007a10:	4b2a      	ldr	r3, [pc, #168]	; (8007abc <HAL_ETH_MspInit+0x16c>)
 8007a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a18:	60bb      	str	r3, [r7, #8]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007a1c:	2332      	movs	r3, #50	; 0x32
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a20:	2302      	movs	r3, #2
 8007a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a24:	2300      	movs	r3, #0
 8007a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a2c:	230b      	movs	r3, #11
 8007a2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a34:	4619      	mov	r1, r3
 8007a36:	4822      	ldr	r0, [pc, #136]	; (8007ac0 <HAL_ETH_MspInit+0x170>)
 8007a38:	f7fb fdf2 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007a3c:	2386      	movs	r3, #134	; 0x86
 8007a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a40:	2302      	movs	r3, #2
 8007a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a44:	2300      	movs	r3, #0
 8007a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a4c:	230b      	movs	r3, #11
 8007a4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a54:	4619      	mov	r1, r3
 8007a56:	481b      	ldr	r0, [pc, #108]	; (8007ac4 <HAL_ETH_MspInit+0x174>)
 8007a58:	f7fb fde2 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a62:	2302      	movs	r3, #2
 8007a64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a6e:	230b      	movs	r3, #11
 8007a70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a76:	4619      	mov	r1, r3
 8007a78:	4813      	ldr	r0, [pc, #76]	; (8007ac8 <HAL_ETH_MspInit+0x178>)
 8007a7a:	f7fb fdd1 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007a7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007a82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a84:	2302      	movs	r3, #2
 8007a86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a90:	230b      	movs	r3, #11
 8007a92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a98:	4619      	mov	r1, r3
 8007a9a:	480c      	ldr	r0, [pc, #48]	; (8007acc <HAL_ETH_MspInit+0x17c>)
 8007a9c:	f7fb fdc0 	bl	8003620 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	2105      	movs	r1, #5
 8007aa4:	203d      	movs	r0, #61	; 0x3d
 8007aa6:	f7fa fa97 	bl	8001fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007aaa:	203d      	movs	r0, #61	; 0x3d
 8007aac:	f7fa fab0 	bl	8002010 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007ab0:	bf00      	nop
 8007ab2:	3738      	adds	r7, #56	; 0x38
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	40028000 	.word	0x40028000
 8007abc:	40023800 	.word	0x40023800
 8007ac0:	40020800 	.word	0x40020800
 8007ac4:	40020000 	.word	0x40020000
 8007ac8:	40020400 	.word	0x40020400
 8007acc:	40021800 	.word	0x40021800

08007ad0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007ad4:	4802      	ldr	r0, [pc, #8]	; (8007ae0 <ETH_PHY_IO_Init+0x10>)
 8007ad6:	f7fb f93d 	bl	8002d54 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	20006418 	.word	0x20006418

08007ae4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	af00      	add	r7, sp, #0
  return 0;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	68f9      	ldr	r1, [r7, #12]
 8007b06:	4807      	ldr	r0, [pc, #28]	; (8007b24 <ETH_PHY_IO_ReadReg+0x30>)
 8007b08:	f7fa ff8c 	bl	8002a24 <HAL_ETH_ReadPHYRegister>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d002      	beq.n	8007b18 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8007b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b16:	e000      	b.n	8007b1a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20006418 	.word	0x20006418

08007b28 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	68f9      	ldr	r1, [r7, #12]
 8007b3a:	4807      	ldr	r0, [pc, #28]	; (8007b58 <ETH_PHY_IO_WriteReg+0x30>)
 8007b3c:	f7fa ffbd 	bl	8002aba <HAL_ETH_WritePHYRegister>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d002      	beq.n	8007b4c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b4a:	e000      	b.n	8007b4e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20006418 	.word	0x20006418

08007b5c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007b60:	f7fa f92e 	bl	8001dc0 <HAL_GetTick>
 8007b64:	4603      	mov	r3, r0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	bd80      	pop	{r7, pc}
	...

08007b6c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b0a0      	sub	sp, #128	; 0x80
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007b74:	f107 0308 	add.w	r3, r7, #8
 8007b78:	2264      	movs	r2, #100	; 0x64
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f015 fd47 	bl	801d610 <memset>
  int32_t PHYLinkState = 0;
 8007b82:	2300      	movs	r3, #0
 8007b84:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b8e:	2300      	movs	r3, #0
 8007b90:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007b96:	483a      	ldr	r0, [pc, #232]	; (8007c80 <ethernet_link_thread+0x114>)
 8007b98:	f7fa f869 	bl	8001c6e <LAN8742_GetLinkState>
 8007b9c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007ba4:	089b      	lsrs	r3, r3, #2
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00c      	beq.n	8007bca <ethernet_link_thread+0x5e>
 8007bb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	dc09      	bgt.n	8007bca <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8007bb6:	4833      	ldr	r0, [pc, #204]	; (8007c84 <ethernet_link_thread+0x118>)
 8007bb8:	f7fa fbee 	bl	8002398 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8007bbc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007bbe:	f006 fa71 	bl	800e0a4 <netif_set_down>
    netif_set_link_down(netif);
 8007bc2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007bc4:	f006 fad4 	bl	800e170 <netif_set_link_down>
 8007bc8:	e055      	b.n	8007c76 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007bd0:	f003 0304 	and.w	r3, r3, #4
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d14e      	bne.n	8007c76 <ethernet_link_thread+0x10a>
 8007bd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	dd4b      	ble.n	8007c76 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8007bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007be0:	3b02      	subs	r3, #2
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	d82a      	bhi.n	8007c3c <ethernet_link_thread+0xd0>
 8007be6:	a201      	add	r2, pc, #4	; (adr r2, 8007bec <ethernet_link_thread+0x80>)
 8007be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bec:	08007bfd 	.word	0x08007bfd
 8007bf0:	08007c0f 	.word	0x08007c0f
 8007bf4:	08007c1f 	.word	0x08007c1f
 8007bf8:	08007c2f 	.word	0x08007c2f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007bfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c00:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007c02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c06:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007c0c:	e017      	b.n	8007c3e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007c12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c16:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007c1c:	e00f      	b.n	8007c3e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007c1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c22:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007c24:	2300      	movs	r3, #0
 8007c26:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007c2c:	e007      	b.n	8007c3e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007c32:	2300      	movs	r3, #0
 8007c34:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007c36:	2301      	movs	r3, #1
 8007c38:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007c3a:	e000      	b.n	8007c3e <ethernet_link_thread+0xd2>
    default:
      break;
 8007c3c:	bf00      	nop
    }

    if(linkchanged)
 8007c3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d018      	beq.n	8007c76 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007c44:	f107 0308 	add.w	r3, r7, #8
 8007c48:	4619      	mov	r1, r3
 8007c4a:	480e      	ldr	r0, [pc, #56]	; (8007c84 <ethernet_link_thread+0x118>)
 8007c4c:	f7fa ff7e 	bl	8002b4c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c52:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8007c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c56:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007c58:	f107 0308 	add.w	r3, r7, #8
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4809      	ldr	r0, [pc, #36]	; (8007c84 <ethernet_link_thread+0x118>)
 8007c60:	f7fb f85e 	bl	8002d20 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8007c64:	4807      	ldr	r0, [pc, #28]	; (8007c84 <ethernet_link_thread+0x118>)
 8007c66:	f7fa fb09 	bl	800227c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8007c6a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c6c:	f006 f9ae 	bl	800dfcc <netif_set_up>
      netif_set_link_up(netif);
 8007c70:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c72:	f006 fa49 	bl	800e108 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8007c76:	2064      	movs	r0, #100	; 0x64
 8007c78:	f000 f910 	bl	8007e9c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007c7c:	e78b      	b.n	8007b96 <ethernet_link_thread+0x2a>
 8007c7e:	bf00      	nop
 8007c80:	20006500 	.word	0x20006500
 8007c84:	20006418 	.word	0x20006418

08007c88 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af02      	add	r7, sp, #8
 8007c8e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007c90:	4812      	ldr	r0, [pc, #72]	; (8007cdc <HAL_ETH_RxAllocateCallback+0x54>)
 8007c92:	f005 ff0f 	bl	800dab4 <memp_malloc_pool>
 8007c96:	60f8      	str	r0, [r7, #12]
  if (p)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d014      	beq.n	8007cc8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f103 0220 	add.w	r2, r3, #32
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4a0d      	ldr	r2, [pc, #52]	; (8007ce0 <HAL_ETH_RxAllocateCallback+0x58>)
 8007cac:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007cb6:	9201      	str	r2, [sp, #4]
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2241      	movs	r2, #65	; 0x41
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	f006 fc79 	bl	800e5b8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007cc6:	e005      	b.n	8007cd4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007cc8:	4b06      	ldr	r3, [pc, #24]	; (8007ce4 <HAL_ETH_RxAllocateCallback+0x5c>)
 8007cca:	2201      	movs	r2, #1
 8007ccc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	601a      	str	r2, [r3, #0]
}
 8007cd4:	bf00      	nop
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	0802211c 	.word	0x0802211c
 8007ce0:	08007901 	.word	0x08007901
 8007ce4:	2000640c 	.word	0x2000640c

08007ce8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b088      	sub	sp, #32
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
 8007cf4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	3b20      	subs	r3, #32
 8007d06:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	2200      	movs	r2, #0
 8007d12:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	887a      	ldrh	r2, [r7, #2]
 8007d18:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d103      	bne.n	8007d2a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	69fa      	ldr	r2, [r7, #28]
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	e003      	b.n	8007d32 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	69fa      	ldr	r2, [r7, #28]
 8007d30:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	69fa      	ldr	r2, [r7, #28]
 8007d36:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	61fb      	str	r3, [r7, #28]
 8007d3e:	e009      	b.n	8007d54 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	891a      	ldrh	r2, [r3, #8]
 8007d44:	887b      	ldrh	r3, [r7, #2]
 8007d46:	4413      	add	r3, r2
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	61fb      	str	r3, [r7, #28]
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1f2      	bne.n	8007d40 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8007d5a:	887b      	ldrh	r3, [r7, #2]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff fb2e 	bl	80073c0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007d64:	bf00      	nop
 8007d66:	3720      	adds	r7, #32
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f006 fdd9 	bl	800e92c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8007d7a:	bf00      	nop
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b085      	sub	sp, #20
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	4603      	mov	r3, r0
 8007d8a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007d90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d94:	2b84      	cmp	r3, #132	; 0x84
 8007d96:	d005      	beq.n	8007da4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007d98:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	4413      	add	r3, r2
 8007da0:	3303      	adds	r3, #3
 8007da2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007da4:	68fb      	ldr	r3, [r7, #12]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007db8:	f3ef 8305 	mrs	r3, IPSR
 8007dbc:	607b      	str	r3, [r7, #4]
  return(result);
 8007dbe:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	bf14      	ite	ne
 8007dc4:	2301      	movne	r3, #1
 8007dc6:	2300      	moveq	r3, #0
 8007dc8:	b2db      	uxtb	r3, r3
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007dda:	f001 fd73 	bl	80098c4 <vTaskStartScheduler>
  
  return osOK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007de8:	f7ff ffe3 	bl	8007db2 <inHandlerMode>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007df2:	f001 fe87 	bl	8009b04 <xTaskGetTickCountFromISR>
 8007df6:	4603      	mov	r3, r0
 8007df8:	e002      	b.n	8007e00 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007dfa:	f001 fe73 	bl	8009ae4 <xTaskGetTickCount>
 8007dfe:	4603      	mov	r3, r0
  }
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e06:	b089      	sub	sp, #36	; 0x24
 8007e08:	af04      	add	r7, sp, #16
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d020      	beq.n	8007e58 <osThreadCreate+0x54>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d01c      	beq.n	8007e58 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685c      	ldr	r4, [r3, #4]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681d      	ldr	r5, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691e      	ldr	r6, [r3, #16]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7ff ffa6 	bl	8007d82 <makeFreeRtosPriority>
 8007e36:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e40:	9202      	str	r2, [sp, #8]
 8007e42:	9301      	str	r3, [sp, #4]
 8007e44:	9100      	str	r1, [sp, #0]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	4632      	mov	r2, r6
 8007e4a:	4629      	mov	r1, r5
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f001 fb67 	bl	8009520 <xTaskCreateStatic>
 8007e52:	4603      	mov	r3, r0
 8007e54:	60fb      	str	r3, [r7, #12]
 8007e56:	e01c      	b.n	8007e92 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685c      	ldr	r4, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e64:	b29e      	uxth	r6, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7ff ff88 	bl	8007d82 <makeFreeRtosPriority>
 8007e72:	4602      	mov	r2, r0
 8007e74:	f107 030c 	add.w	r3, r7, #12
 8007e78:	9301      	str	r3, [sp, #4]
 8007e7a:	9200      	str	r2, [sp, #0]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	4632      	mov	r2, r6
 8007e80:	4629      	mov	r1, r5
 8007e82:	4620      	mov	r0, r4
 8007e84:	f001 fbaf 	bl	80095e6 <xTaskCreate>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d001      	beq.n	8007e92 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	e000      	b.n	8007e94 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007e92:	68fb      	ldr	r3, [r7, #12]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e9c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <osDelay+0x16>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	e000      	b.n	8007eb4 <osDelay+0x18>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f001 fccf 	bl	8009858 <vTaskDelay>
  
  return osOK;
 8007eba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d007      	beq.n	8007ee4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	2001      	movs	r0, #1
 8007edc:	f000 fc91 	bl	8008802 <xQueueCreateMutexStatic>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	e003      	b.n	8007eec <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007ee4:	2001      	movs	r0, #1
 8007ee6:	f000 fc74 	bl	80087d2 <xQueueCreateMutex>
 8007eea:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007efe:	2300      	movs	r3, #0
 8007f00:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <osMutexWait+0x18>
    return osErrorParameter;
 8007f08:	2380      	movs	r3, #128	; 0x80
 8007f0a:	e03a      	b.n	8007f82 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f16:	d103      	bne.n	8007f20 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f1c:	60fb      	str	r3, [r7, #12]
 8007f1e:	e009      	b.n	8007f34 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d006      	beq.n	8007f34 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <osMutexWait+0x40>
      ticks = 1;
 8007f30:	2301      	movs	r3, #1
 8007f32:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007f34:	f7ff ff3d 	bl	8007db2 <inHandlerMode>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d017      	beq.n	8007f6e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007f3e:	f107 0308 	add.w	r3, r7, #8
 8007f42:	461a      	mov	r2, r3
 8007f44:	2100      	movs	r1, #0
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 f8ac 	bl	80090a4 <xQueueReceiveFromISR>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d001      	beq.n	8007f56 <osMutexWait+0x62>
      return osErrorOS;
 8007f52:	23ff      	movs	r3, #255	; 0xff
 8007f54:	e015      	b.n	8007f82 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d011      	beq.n	8007f80 <osMutexWait+0x8c>
 8007f5c:	4b0b      	ldr	r3, [pc, #44]	; (8007f8c <osMutexWait+0x98>)
 8007f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	e008      	b.n	8007f80 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007f6e:	68f9      	ldr	r1, [r7, #12]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 ff83 	bl	8008e7c <xQueueSemaphoreTake>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d001      	beq.n	8007f80 <osMutexWait+0x8c>
    return osErrorOS;
 8007f7c:	23ff      	movs	r3, #255	; 0xff
 8007f7e:	e000      	b.n	8007f82 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	e000ed04 	.word	0xe000ed04

08007f90 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007fa0:	f7ff ff07 	bl	8007db2 <inHandlerMode>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d016      	beq.n	8007fd8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007faa:	f107 0308 	add.w	r3, r7, #8
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fde7 	bl	8008b84 <xQueueGiveFromISR>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d001      	beq.n	8007fc0 <osMutexRelease+0x30>
      return osErrorOS;
 8007fbc:	23ff      	movs	r3, #255	; 0xff
 8007fbe:	e017      	b.n	8007ff0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d013      	beq.n	8007fee <osMutexRelease+0x5e>
 8007fc6:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <osMutexRelease+0x68>)
 8007fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	e00a      	b.n	8007fee <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007fd8:	2300      	movs	r3, #0
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2100      	movs	r1, #0
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fc2a 	bl	8008838 <xQueueGenericSend>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d001      	beq.n	8007fee <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007fea:	23ff      	movs	r3, #255	; 0xff
 8007fec:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007fee:	68fb      	ldr	r3, [r7, #12]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	e000ed04 	.word	0xe000ed04

08007ffc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af02      	add	r7, sp, #8
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00f      	beq.n	800802e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d10a      	bne.n	800802a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	2203      	movs	r2, #3
 800801a:	9200      	str	r2, [sp, #0]
 800801c:	2200      	movs	r2, #0
 800801e:	2100      	movs	r1, #0
 8008020:	2001      	movs	r0, #1
 8008022:	f000 fad9 	bl	80085d8 <xQueueGenericCreateStatic>
 8008026:	4603      	mov	r3, r0
 8008028:	e016      	b.n	8008058 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800802a:	2300      	movs	r3, #0
 800802c:	e014      	b.n	8008058 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d110      	bne.n	8008056 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008034:	2203      	movs	r2, #3
 8008036:	2100      	movs	r1, #0
 8008038:	2001      	movs	r0, #1
 800803a:	f000 fb4f 	bl	80086dc <xQueueGenericCreate>
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d005      	beq.n	8008052 <osSemaphoreCreate+0x56>
 8008046:	2300      	movs	r3, #0
 8008048:	2200      	movs	r2, #0
 800804a:	2100      	movs	r1, #0
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 fbf3 	bl	8008838 <xQueueGenericSend>
      return sema;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	e000      	b.n	8008058 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008056:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800806a:	2300      	movs	r3, #0
 800806c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008074:	2380      	movs	r3, #128	; 0x80
 8008076:	e03a      	b.n	80080ee <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008078:	2300      	movs	r3, #0
 800807a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008082:	d103      	bne.n	800808c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008088:	60fb      	str	r3, [r7, #12]
 800808a:	e009      	b.n	80080a0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d006      	beq.n	80080a0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d101      	bne.n	80080a0 <osSemaphoreWait+0x40>
      ticks = 1;
 800809c:	2301      	movs	r3, #1
 800809e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80080a0:	f7ff fe87 	bl	8007db2 <inHandlerMode>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d017      	beq.n	80080da <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80080aa:	f107 0308 	add.w	r3, r7, #8
 80080ae:	461a      	mov	r2, r3
 80080b0:	2100      	movs	r1, #0
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fff6 	bl	80090a4 <xQueueReceiveFromISR>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d001      	beq.n	80080c2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80080be:	23ff      	movs	r3, #255	; 0xff
 80080c0:	e015      	b.n	80080ee <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d011      	beq.n	80080ec <osSemaphoreWait+0x8c>
 80080c8:	4b0b      	ldr	r3, [pc, #44]	; (80080f8 <osSemaphoreWait+0x98>)
 80080ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	e008      	b.n	80080ec <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80080da:	68f9      	ldr	r1, [r7, #12]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fecd 	bl	8008e7c <xQueueSemaphoreTake>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d001      	beq.n	80080ec <osSemaphoreWait+0x8c>
    return osErrorOS;
 80080e8:	23ff      	movs	r3, #255	; 0xff
 80080ea:	e000      	b.n	80080ee <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	e000ed04 	.word	0xe000ed04

080080fc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008104:	2300      	movs	r3, #0
 8008106:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008108:	2300      	movs	r3, #0
 800810a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800810c:	f7ff fe51 	bl	8007db2 <inHandlerMode>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d016      	beq.n	8008144 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008116:	f107 0308 	add.w	r3, r7, #8
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fd31 	bl	8008b84 <xQueueGiveFromISR>
 8008122:	4603      	mov	r3, r0
 8008124:	2b01      	cmp	r3, #1
 8008126:	d001      	beq.n	800812c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008128:	23ff      	movs	r3, #255	; 0xff
 800812a:	e017      	b.n	800815c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d013      	beq.n	800815a <osSemaphoreRelease+0x5e>
 8008132:	4b0c      	ldr	r3, [pc, #48]	; (8008164 <osSemaphoreRelease+0x68>)
 8008134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	e00a      	b.n	800815a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008144:	2300      	movs	r3, #0
 8008146:	2200      	movs	r2, #0
 8008148:	2100      	movs	r1, #0
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fb74 	bl	8008838 <xQueueGenericSend>
 8008150:	4603      	mov	r3, r0
 8008152:	2b01      	cmp	r3, #1
 8008154:	d001      	beq.n	800815a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008156:	23ff      	movs	r3, #255	; 0xff
 8008158:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800815a:	68fb      	ldr	r3, [r7, #12]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	e000ed04 	.word	0xe000ed04

08008168 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008170:	f7ff fe1f 	bl	8007db2 <inHandlerMode>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800817a:	2382      	movs	r3, #130	; 0x82
 800817c:	e003      	b.n	8008186 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f001 f856 	bl	8009230 <vQueueDelete>

  return osOK; 
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800818e:	b590      	push	{r4, r7, lr}
 8008190:	b085      	sub	sp, #20
 8008192:	af02      	add	r7, sp, #8
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d011      	beq.n	80081c4 <osMessageCreate+0x36>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00d      	beq.n	80081c4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6818      	ldr	r0, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6859      	ldr	r1, [r3, #4]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689a      	ldr	r2, [r3, #8]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	2400      	movs	r4, #0
 80081ba:	9400      	str	r4, [sp, #0]
 80081bc:	f000 fa0c 	bl	80085d8 <xQueueGenericCreateStatic>
 80081c0:	4603      	mov	r3, r0
 80081c2:	e008      	b.n	80081d6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6818      	ldr	r0, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	4619      	mov	r1, r3
 80081d0:	f000 fa84 	bl	80086dc <xQueueGenericCreate>
 80081d4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd90      	pop	{r4, r7, pc}
	...

080081e0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80081ec:	2300      	movs	r3, #0
 80081ee:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <osMessagePut+0x1e>
    ticks = 1;
 80081fa:	2301      	movs	r3, #1
 80081fc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80081fe:	f7ff fdd8 	bl	8007db2 <inHandlerMode>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d018      	beq.n	800823a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008208:	f107 0210 	add.w	r2, r7, #16
 800820c:	f107 0108 	add.w	r1, r7, #8
 8008210:	2300      	movs	r3, #0
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f000 fc16 	bl	8008a44 <xQueueGenericSendFromISR>
 8008218:	4603      	mov	r3, r0
 800821a:	2b01      	cmp	r3, #1
 800821c:	d001      	beq.n	8008222 <osMessagePut+0x42>
      return osErrorOS;
 800821e:	23ff      	movs	r3, #255	; 0xff
 8008220:	e018      	b.n	8008254 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d014      	beq.n	8008252 <osMessagePut+0x72>
 8008228:	4b0c      	ldr	r3, [pc, #48]	; (800825c <osMessagePut+0x7c>)
 800822a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800822e:	601a      	str	r2, [r3, #0]
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	e00b      	b.n	8008252 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800823a:	f107 0108 	add.w	r1, r7, #8
 800823e:	2300      	movs	r3, #0
 8008240:	697a      	ldr	r2, [r7, #20]
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f000 faf8 	bl	8008838 <xQueueGenericSend>
 8008248:	4603      	mov	r3, r0
 800824a:	2b01      	cmp	r3, #1
 800824c:	d001      	beq.n	8008252 <osMessagePut+0x72>
      return osErrorOS;
 800824e:	23ff      	movs	r3, #255	; 0xff
 8008250:	e000      	b.n	8008254 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3718      	adds	r7, #24
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	e000ed04 	.word	0xe000ed04

08008260 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008260:	b590      	push	{r4, r7, lr}
 8008262:	b08b      	sub	sp, #44	; 0x2c
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d10a      	bne.n	8008290 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800827a:	2380      	movs	r3, #128	; 0x80
 800827c:	617b      	str	r3, [r7, #20]
    return event;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	461c      	mov	r4, r3
 8008282:	f107 0314 	add.w	r3, r7, #20
 8008286:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800828a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800828e:	e054      	b.n	800833a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008290:	2300      	movs	r3, #0
 8008292:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008294:	2300      	movs	r3, #0
 8008296:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800829e:	d103      	bne.n	80082a8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80082a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082a4:	627b      	str	r3, [r7, #36]	; 0x24
 80082a6:	e009      	b.n	80082bc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d006      	beq.n	80082bc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <osMessageGet+0x5c>
      ticks = 1;
 80082b8:	2301      	movs	r3, #1
 80082ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80082bc:	f7ff fd79 	bl	8007db2 <inHandlerMode>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d01c      	beq.n	8008300 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80082c6:	f107 0220 	add.w	r2, r7, #32
 80082ca:	f107 0314 	add.w	r3, r7, #20
 80082ce:	3304      	adds	r3, #4
 80082d0:	4619      	mov	r1, r3
 80082d2:	68b8      	ldr	r0, [r7, #8]
 80082d4:	f000 fee6 	bl	80090a4 <xQueueReceiveFromISR>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d102      	bne.n	80082e4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80082de:	2310      	movs	r3, #16
 80082e0:	617b      	str	r3, [r7, #20]
 80082e2:	e001      	b.n	80082e8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80082e8:	6a3b      	ldr	r3, [r7, #32]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d01d      	beq.n	800832a <osMessageGet+0xca>
 80082ee:	4b15      	ldr	r3, [pc, #84]	; (8008344 <osMessageGet+0xe4>)
 80082f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082f4:	601a      	str	r2, [r3, #0]
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	e014      	b.n	800832a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008300:	f107 0314 	add.w	r3, r7, #20
 8008304:	3304      	adds	r3, #4
 8008306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008308:	4619      	mov	r1, r3
 800830a:	68b8      	ldr	r0, [r7, #8]
 800830c:	f000 fcd0 	bl	8008cb0 <xQueueReceive>
 8008310:	4603      	mov	r3, r0
 8008312:	2b01      	cmp	r3, #1
 8008314:	d102      	bne.n	800831c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008316:	2310      	movs	r3, #16
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	e006      	b.n	800832a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <osMessageGet+0xc6>
 8008322:	2300      	movs	r3, #0
 8008324:	e000      	b.n	8008328 <osMessageGet+0xc8>
 8008326:	2340      	movs	r3, #64	; 0x40
 8008328:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	461c      	mov	r4, r3
 800832e:	f107 0314 	add.w	r3, r7, #20
 8008332:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008336:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	372c      	adds	r7, #44	; 0x2c
 800833e:	46bd      	mov	sp, r7
 8008340:	bd90      	pop	{r4, r7, pc}
 8008342:	bf00      	nop
 8008344:	e000ed04 	.word	0xe000ed04

08008348 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008350:	f7ff fd2f 	bl	8007db2 <inHandlerMode>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d004      	beq.n	8008364 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 ff48 	bl	80091f0 <uxQueueMessagesWaitingFromISR>
 8008360:	4603      	mov	r3, r0
 8008362:	e003      	b.n	800836c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 ff23 	bl	80091b0 <uxQueueMessagesWaiting>
 800836a:	4603      	mov	r3, r0
  }
}
 800836c:	4618      	mov	r0, r3
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800837c:	f7ff fd19 	bl	8007db2 <inHandlerMode>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <osMessageDelete+0x16>
    return osErrorISR;
 8008386:	2382      	movs	r3, #130	; 0x82
 8008388:	e003      	b.n	8008392 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 ff50 	bl	8009230 <vQueueDelete>

  return osOK; 
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800839a:	b480      	push	{r7}
 800839c:	b083      	sub	sp, #12
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f103 0208 	add.w	r2, r3, #8
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083b2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f103 0208 	add.w	r2, r3, #8
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f103 0208 	add.w	r2, r3, #8
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80083ce:	bf00      	nop
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	689a      	ldr	r2, [r3, #8]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	601a      	str	r2, [r3, #0]
}
 8008430:	bf00      	nop
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008452:	d103      	bne.n	800845c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	60fb      	str	r3, [r7, #12]
 800845a:	e00c      	b.n	8008476 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	3308      	adds	r3, #8
 8008460:	60fb      	str	r3, [r7, #12]
 8008462:	e002      	b.n	800846a <vListInsert+0x2e>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	60fb      	str	r3, [r7, #12]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	429a      	cmp	r2, r3
 8008474:	d2f6      	bcs.n	8008464 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	1c5a      	adds	r2, r3, #1
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	601a      	str	r2, [r3, #0]
}
 80084a2:	bf00      	nop
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80084ae:	b480      	push	{r7}
 80084b0:	b085      	sub	sp, #20
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	6892      	ldr	r2, [r2, #8]
 80084c4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	6852      	ldr	r2, [r2, #4]
 80084ce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d103      	bne.n	80084e2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	689a      	ldr	r2, [r3, #8]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	1e5a      	subs	r2, r3, #1
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
	...

08008504 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10c      	bne.n	8008532 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851c:	b672      	cpsid	i
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	b662      	cpsie	i
 800852c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800852e:	bf00      	nop
 8008530:	e7fe      	b.n	8008530 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008532:	f002 f94b 	bl	800a7cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800853e:	68f9      	ldr	r1, [r7, #12]
 8008540:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008542:	fb01 f303 	mul.w	r3, r1, r3
 8008546:	441a      	add	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008562:	3b01      	subs	r3, #1
 8008564:	68f9      	ldr	r1, [r7, #12]
 8008566:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008568:	fb01 f303 	mul.w	r3, r1, r3
 800856c:	441a      	add	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	22ff      	movs	r2, #255	; 0xff
 8008576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	22ff      	movs	r2, #255	; 0xff
 800857e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d114      	bne.n	80085b2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d01a      	beq.n	80085c6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	3310      	adds	r3, #16
 8008594:	4618      	mov	r0, r3
 8008596:	f001 fc05 	bl	8009da4 <xTaskRemoveFromEventList>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d012      	beq.n	80085c6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80085a0:	4b0c      	ldr	r3, [pc, #48]	; (80085d4 <xQueueGenericReset+0xd0>)
 80085a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	e009      	b.n	80085c6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3310      	adds	r3, #16
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7ff feef 	bl	800839a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3324      	adds	r3, #36	; 0x24
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7ff feea 	bl	800839a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80085c6:	f002 f935 	bl	800a834 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80085ca:	2301      	movs	r3, #1
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	e000ed04 	.word	0xe000ed04

080085d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b08e      	sub	sp, #56	; 0x38
 80085dc:	af02      	add	r7, sp, #8
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
 80085e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10c      	bne.n	8008606 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	b672      	cpsid	i
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	b662      	cpsie	i
 8008600:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008602:	bf00      	nop
 8008604:	e7fe      	b.n	8008604 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10c      	bne.n	8008626 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800860c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008610:	b672      	cpsid	i
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	b662      	cpsie	i
 8008620:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d002      	beq.n	8008632 <xQueueGenericCreateStatic+0x5a>
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <xQueueGenericCreateStatic+0x5e>
 8008632:	2301      	movs	r3, #1
 8008634:	e000      	b.n	8008638 <xQueueGenericCreateStatic+0x60>
 8008636:	2300      	movs	r3, #0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10c      	bne.n	8008656 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800863c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008640:	b672      	cpsid	i
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	b662      	cpsie	i
 8008650:	623b      	str	r3, [r7, #32]
}
 8008652:	bf00      	nop
 8008654:	e7fe      	b.n	8008654 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d102      	bne.n	8008662 <xQueueGenericCreateStatic+0x8a>
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d101      	bne.n	8008666 <xQueueGenericCreateStatic+0x8e>
 8008662:	2301      	movs	r3, #1
 8008664:	e000      	b.n	8008668 <xQueueGenericCreateStatic+0x90>
 8008666:	2300      	movs	r3, #0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10c      	bne.n	8008686 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008670:	b672      	cpsid	i
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	b662      	cpsie	i
 8008680:	61fb      	str	r3, [r7, #28]
}
 8008682:	bf00      	nop
 8008684:	e7fe      	b.n	8008684 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008686:	2348      	movs	r3, #72	; 0x48
 8008688:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2b48      	cmp	r3, #72	; 0x48
 800868e:	d00c      	beq.n	80086aa <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8008690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008694:	b672      	cpsid	i
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	b662      	cpsie	i
 80086a4:	61bb      	str	r3, [r7, #24]
}
 80086a6:	bf00      	nop
 80086a8:	e7fe      	b.n	80086a8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80086aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80086b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00d      	beq.n	80086d2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80086c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	4613      	mov	r3, r2
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	68b9      	ldr	r1, [r7, #8]
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 f847 	bl	8008760 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3730      	adds	r7, #48	; 0x30
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08a      	sub	sp, #40	; 0x28
 80086e0:	af02      	add	r7, sp, #8
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	4613      	mov	r3, r2
 80086e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10c      	bne.n	800870a <xQueueGenericCreate+0x2e>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	b672      	cpsid	i
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	b662      	cpsie	i
 8008704:	613b      	str	r3, [r7, #16]
}
 8008706:	bf00      	nop
 8008708:	e7fe      	b.n	8008708 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d102      	bne.n	8008716 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008710:	2300      	movs	r3, #0
 8008712:	61fb      	str	r3, [r7, #28]
 8008714:	e004      	b.n	8008720 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	fb02 f303 	mul.w	r3, r2, r3
 800871e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	3348      	adds	r3, #72	; 0x48
 8008724:	4618      	mov	r0, r3
 8008726:	f002 f97d 	bl	800aa24 <pvPortMalloc>
 800872a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d011      	beq.n	8008756 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	3348      	adds	r3, #72	; 0x48
 800873a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008744:	79fa      	ldrb	r2, [r7, #7]
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	4613      	mov	r3, r2
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	68b9      	ldr	r1, [r7, #8]
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f000 f805 	bl	8008760 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008756:	69bb      	ldr	r3, [r7, #24]
	}
 8008758:	4618      	mov	r0, r3
 800875a:	3720      	adds	r7, #32
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d103      	bne.n	800877c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	69ba      	ldr	r2, [r7, #24]
 8008778:	601a      	str	r2, [r3, #0]
 800877a:	e002      	b.n	8008782 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800878e:	2101      	movs	r1, #1
 8008790:	69b8      	ldr	r0, [r7, #24]
 8008792:	f7ff feb7 	bl	8008504 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008796:	bf00      	nop
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b082      	sub	sp, #8
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00e      	beq.n	80087ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80087be:	2300      	movs	r3, #0
 80087c0:	2200      	movs	r2, #0
 80087c2:	2100      	movs	r1, #0
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f837 	bl	8008838 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80087ca:	bf00      	nop
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b086      	sub	sp, #24
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	4603      	mov	r3, r0
 80087da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80087dc:	2301      	movs	r3, #1
 80087de:	617b      	str	r3, [r7, #20]
 80087e0:	2300      	movs	r3, #0
 80087e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80087e4:	79fb      	ldrb	r3, [r7, #7]
 80087e6:	461a      	mov	r2, r3
 80087e8:	6939      	ldr	r1, [r7, #16]
 80087ea:	6978      	ldr	r0, [r7, #20]
 80087ec:	f7ff ff76 	bl	80086dc <xQueueGenericCreate>
 80087f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f7ff ffd3 	bl	800879e <prvInitialiseMutex>

		return xNewQueue;
 80087f8:	68fb      	ldr	r3, [r7, #12]
	}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3718      	adds	r7, #24
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008802:	b580      	push	{r7, lr}
 8008804:	b088      	sub	sp, #32
 8008806:	af02      	add	r7, sp, #8
 8008808:	4603      	mov	r3, r0
 800880a:	6039      	str	r1, [r7, #0]
 800880c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800880e:	2301      	movs	r3, #1
 8008810:	617b      	str	r3, [r7, #20]
 8008812:	2300      	movs	r3, #0
 8008814:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008816:	79fb      	ldrb	r3, [r7, #7]
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2200      	movs	r2, #0
 800881e:	6939      	ldr	r1, [r7, #16]
 8008820:	6978      	ldr	r0, [r7, #20]
 8008822:	f7ff fed9 	bl	80085d8 <xQueueGenericCreateStatic>
 8008826:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f7ff ffb8 	bl	800879e <prvInitialiseMutex>

		return xNewQueue;
 800882e:	68fb      	ldr	r3, [r7, #12]
	}
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b08e      	sub	sp, #56	; 0x38
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008846:	2300      	movs	r3, #0
 8008848:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800884e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10c      	bne.n	800886e <xQueueGenericSend+0x36>
	__asm volatile
 8008854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008858:	b672      	cpsid	i
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	b662      	cpsie	i
 8008868:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800886a:	bf00      	nop
 800886c:	e7fe      	b.n	800886c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d103      	bne.n	800887c <xQueueGenericSend+0x44>
 8008874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <xQueueGenericSend+0x48>
 800887c:	2301      	movs	r3, #1
 800887e:	e000      	b.n	8008882 <xQueueGenericSend+0x4a>
 8008880:	2300      	movs	r3, #0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10c      	bne.n	80088a0 <xQueueGenericSend+0x68>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	b672      	cpsid	i
 800888c:	f383 8811 	msr	BASEPRI, r3
 8008890:	f3bf 8f6f 	isb	sy
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	b662      	cpsie	i
 800889a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800889c:	bf00      	nop
 800889e:	e7fe      	b.n	800889e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d103      	bne.n	80088ae <xQueueGenericSend+0x76>
 80088a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d101      	bne.n	80088b2 <xQueueGenericSend+0x7a>
 80088ae:	2301      	movs	r3, #1
 80088b0:	e000      	b.n	80088b4 <xQueueGenericSend+0x7c>
 80088b2:	2300      	movs	r3, #0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10c      	bne.n	80088d2 <xQueueGenericSend+0x9a>
	__asm volatile
 80088b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088bc:	b672      	cpsid	i
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	b662      	cpsie	i
 80088cc:	623b      	str	r3, [r7, #32]
}
 80088ce:	bf00      	nop
 80088d0:	e7fe      	b.n	80088d0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088d2:	f001 fc2b 	bl	800a12c <xTaskGetSchedulerState>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d102      	bne.n	80088e2 <xQueueGenericSend+0xaa>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d101      	bne.n	80088e6 <xQueueGenericSend+0xae>
 80088e2:	2301      	movs	r3, #1
 80088e4:	e000      	b.n	80088e8 <xQueueGenericSend+0xb0>
 80088e6:	2300      	movs	r3, #0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10c      	bne.n	8008906 <xQueueGenericSend+0xce>
	__asm volatile
 80088ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f0:	b672      	cpsid	i
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	b662      	cpsie	i
 8008900:	61fb      	str	r3, [r7, #28]
}
 8008902:	bf00      	nop
 8008904:	e7fe      	b.n	8008904 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008906:	f001 ff61 	bl	800a7cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800890a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008912:	429a      	cmp	r2, r3
 8008914:	d302      	bcc.n	800891c <xQueueGenericSend+0xe4>
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	2b02      	cmp	r3, #2
 800891a:	d129      	bne.n	8008970 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800891c:	683a      	ldr	r2, [r7, #0]
 800891e:	68b9      	ldr	r1, [r7, #8]
 8008920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008922:	f000 fcc2 	bl	80092aa <prvCopyDataToQueue>
 8008926:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	2b00      	cmp	r3, #0
 800892e:	d010      	beq.n	8008952 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008932:	3324      	adds	r3, #36	; 0x24
 8008934:	4618      	mov	r0, r3
 8008936:	f001 fa35 	bl	8009da4 <xTaskRemoveFromEventList>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d013      	beq.n	8008968 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008940:	4b3f      	ldr	r3, [pc, #252]	; (8008a40 <xQueueGenericSend+0x208>)
 8008942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	e00a      	b.n	8008968 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008954:	2b00      	cmp	r3, #0
 8008956:	d007      	beq.n	8008968 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008958:	4b39      	ldr	r3, [pc, #228]	; (8008a40 <xQueueGenericSend+0x208>)
 800895a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800895e:	601a      	str	r2, [r3, #0]
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008968:	f001 ff64 	bl	800a834 <vPortExitCritical>
				return pdPASS;
 800896c:	2301      	movs	r3, #1
 800896e:	e063      	b.n	8008a38 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d103      	bne.n	800897e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008976:	f001 ff5d 	bl	800a834 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800897a:	2300      	movs	r3, #0
 800897c:	e05c      	b.n	8008a38 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800897e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008980:	2b00      	cmp	r3, #0
 8008982:	d106      	bne.n	8008992 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008984:	f107 0314 	add.w	r3, r7, #20
 8008988:	4618      	mov	r0, r3
 800898a:	f001 fa6f 	bl	8009e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800898e:	2301      	movs	r3, #1
 8008990:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008992:	f001 ff4f 	bl	800a834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008996:	f000 fff9 	bl	800998c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800899a:	f001 ff17 	bl	800a7cc <vPortEnterCritical>
 800899e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089a4:	b25b      	sxtb	r3, r3
 80089a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089aa:	d103      	bne.n	80089b4 <xQueueGenericSend+0x17c>
 80089ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089ba:	b25b      	sxtb	r3, r3
 80089bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089c0:	d103      	bne.n	80089ca <xQueueGenericSend+0x192>
 80089c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089ca:	f001 ff33 	bl	800a834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089ce:	1d3a      	adds	r2, r7, #4
 80089d0:	f107 0314 	add.w	r3, r7, #20
 80089d4:	4611      	mov	r1, r2
 80089d6:	4618      	mov	r0, r3
 80089d8:	f001 fa5e 	bl	8009e98 <xTaskCheckForTimeOut>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d124      	bne.n	8008a2c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80089e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089e4:	f000 fd59 	bl	800949a <prvIsQueueFull>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d018      	beq.n	8008a20 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f0:	3310      	adds	r3, #16
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	4611      	mov	r1, r2
 80089f6:	4618      	mov	r0, r3
 80089f8:	f001 f9ae 	bl	8009d58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80089fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089fe:	f000 fce4 	bl	80093ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a02:	f000 ffd1 	bl	80099a8 <xTaskResumeAll>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f47f af7c 	bne.w	8008906 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008a0e:	4b0c      	ldr	r3, [pc, #48]	; (8008a40 <xQueueGenericSend+0x208>)
 8008a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a14:	601a      	str	r2, [r3, #0]
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	f3bf 8f6f 	isb	sy
 8008a1e:	e772      	b.n	8008906 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a22:	f000 fcd2 	bl	80093ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a26:	f000 ffbf 	bl	80099a8 <xTaskResumeAll>
 8008a2a:	e76c      	b.n	8008906 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a2e:	f000 fccc 	bl	80093ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a32:	f000 ffb9 	bl	80099a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3738      	adds	r7, #56	; 0x38
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	e000ed04 	.word	0xe000ed04

08008a44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b08e      	sub	sp, #56	; 0x38
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10c      	bne.n	8008a76 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	b672      	cpsid	i
 8008a62:	f383 8811 	msr	BASEPRI, r3
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	b662      	cpsie	i
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a72:	bf00      	nop
 8008a74:	e7fe      	b.n	8008a74 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d103      	bne.n	8008a84 <xQueueGenericSendFromISR+0x40>
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d101      	bne.n	8008a88 <xQueueGenericSendFromISR+0x44>
 8008a84:	2301      	movs	r3, #1
 8008a86:	e000      	b.n	8008a8a <xQueueGenericSendFromISR+0x46>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10c      	bne.n	8008aa8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	b672      	cpsid	i
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	b662      	cpsie	i
 8008aa2:	623b      	str	r3, [r7, #32]
}
 8008aa4:	bf00      	nop
 8008aa6:	e7fe      	b.n	8008aa6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d103      	bne.n	8008ab6 <xQueueGenericSendFromISR+0x72>
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d101      	bne.n	8008aba <xQueueGenericSendFromISR+0x76>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e000      	b.n	8008abc <xQueueGenericSendFromISR+0x78>
 8008aba:	2300      	movs	r3, #0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10c      	bne.n	8008ada <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac4:	b672      	cpsid	i
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	b662      	cpsie	i
 8008ad4:	61fb      	str	r3, [r7, #28]
}
 8008ad6:	bf00      	nop
 8008ad8:	e7fe      	b.n	8008ad8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ada:	f001 ff5f 	bl	800a99c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ade:	f3ef 8211 	mrs	r2, BASEPRI
 8008ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae6:	b672      	cpsid	i
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	b662      	cpsie	i
 8008af6:	61ba      	str	r2, [r7, #24]
 8008af8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008afa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008afc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d302      	bcc.n	8008b10 <xQueueGenericSendFromISR+0xcc>
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d12c      	bne.n	8008b6a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	68b9      	ldr	r1, [r7, #8]
 8008b1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b20:	f000 fbc3 	bl	80092aa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b24:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b2c:	d112      	bne.n	8008b54 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d016      	beq.n	8008b64 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b38:	3324      	adds	r3, #36	; 0x24
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f001 f932 	bl	8009da4 <xTaskRemoveFromEventList>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00e      	beq.n	8008b64 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00b      	beq.n	8008b64 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	e007      	b.n	8008b64 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b58:	3301      	adds	r3, #1
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	b25a      	sxtb	r2, r3
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b64:	2301      	movs	r3, #1
 8008b66:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008b68:	e001      	b.n	8008b6e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b70:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3738      	adds	r7, #56	; 0x38
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b08e      	sub	sp, #56	; 0x38
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d10c      	bne.n	8008bb2 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8008b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9c:	b672      	cpsid	i
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	b662      	cpsie	i
 8008bac:	623b      	str	r3, [r7, #32]
}
 8008bae:	bf00      	nop
 8008bb0:	e7fe      	b.n	8008bb0 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00c      	beq.n	8008bd4 <xQueueGiveFromISR+0x50>
	__asm volatile
 8008bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbe:	b672      	cpsid	i
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	b662      	cpsie	i
 8008bce:	61fb      	str	r3, [r7, #28]
}
 8008bd0:	bf00      	nop
 8008bd2:	e7fe      	b.n	8008bd2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d103      	bne.n	8008be4 <xQueueGiveFromISR+0x60>
 8008bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <xQueueGiveFromISR+0x64>
 8008be4:	2301      	movs	r3, #1
 8008be6:	e000      	b.n	8008bea <xQueueGiveFromISR+0x66>
 8008be8:	2300      	movs	r3, #0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10c      	bne.n	8008c08 <xQueueGiveFromISR+0x84>
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	b672      	cpsid	i
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	b662      	cpsie	i
 8008c02:	61bb      	str	r3, [r7, #24]
}
 8008c04:	bf00      	nop
 8008c06:	e7fe      	b.n	8008c06 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c08:	f001 fec8 	bl	800a99c <vPortValidateInterruptPriority>
	__asm volatile
 8008c0c:	f3ef 8211 	mrs	r2, BASEPRI
 8008c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c14:	b672      	cpsid	i
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	b662      	cpsie	i
 8008c24:	617a      	str	r2, [r7, #20]
 8008c26:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008c28:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c30:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d22b      	bcs.n	8008c94 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c56:	d112      	bne.n	8008c7e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d016      	beq.n	8008c8e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c62:	3324      	adds	r3, #36	; 0x24
 8008c64:	4618      	mov	r0, r3
 8008c66:	f001 f89d 	bl	8009da4 <xTaskRemoveFromEventList>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00e      	beq.n	8008c8e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00b      	beq.n	8008c8e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	601a      	str	r2, [r3, #0]
 8008c7c:	e007      	b.n	8008c8e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c82:	3301      	adds	r3, #1
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	b25a      	sxtb	r2, r3
 8008c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	637b      	str	r3, [r7, #52]	; 0x34
 8008c92:	e001      	b.n	8008c98 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c94:	2300      	movs	r3, #0
 8008c96:	637b      	str	r3, [r7, #52]	; 0x34
 8008c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f383 8811 	msr	BASEPRI, r3
}
 8008ca2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3738      	adds	r7, #56	; 0x38
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
	...

08008cb0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b08c      	sub	sp, #48	; 0x30
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10c      	bne.n	8008ce4 <xQueueReceive+0x34>
	__asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cce:	b672      	cpsid	i
 8008cd0:	f383 8811 	msr	BASEPRI, r3
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	b662      	cpsie	i
 8008cde:	623b      	str	r3, [r7, #32]
}
 8008ce0:	bf00      	nop
 8008ce2:	e7fe      	b.n	8008ce2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d103      	bne.n	8008cf2 <xQueueReceive+0x42>
 8008cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <xQueueReceive+0x46>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e000      	b.n	8008cf8 <xQueueReceive+0x48>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10c      	bne.n	8008d16 <xQueueReceive+0x66>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d00:	b672      	cpsid	i
 8008d02:	f383 8811 	msr	BASEPRI, r3
 8008d06:	f3bf 8f6f 	isb	sy
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	b662      	cpsie	i
 8008d10:	61fb      	str	r3, [r7, #28]
}
 8008d12:	bf00      	nop
 8008d14:	e7fe      	b.n	8008d14 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d16:	f001 fa09 	bl	800a12c <xTaskGetSchedulerState>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d102      	bne.n	8008d26 <xQueueReceive+0x76>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <xQueueReceive+0x7a>
 8008d26:	2301      	movs	r3, #1
 8008d28:	e000      	b.n	8008d2c <xQueueReceive+0x7c>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10c      	bne.n	8008d4a <xQueueReceive+0x9a>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d34:	b672      	cpsid	i
 8008d36:	f383 8811 	msr	BASEPRI, r3
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	b662      	cpsie	i
 8008d44:	61bb      	str	r3, [r7, #24]
}
 8008d46:	bf00      	nop
 8008d48:	e7fe      	b.n	8008d48 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d4a:	f001 fd3f 	bl	800a7cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d01f      	beq.n	8008d9a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d5a:	68b9      	ldr	r1, [r7, #8]
 8008d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d5e:	f000 fb0e 	bl	800937e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d64:	1e5a      	subs	r2, r3, #1
 8008d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00f      	beq.n	8008d92 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d74:	3310      	adds	r3, #16
 8008d76:	4618      	mov	r0, r3
 8008d78:	f001 f814 	bl	8009da4 <xTaskRemoveFromEventList>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d007      	beq.n	8008d92 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d82:	4b3d      	ldr	r3, [pc, #244]	; (8008e78 <xQueueReceive+0x1c8>)
 8008d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d88:	601a      	str	r2, [r3, #0]
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d92:	f001 fd4f 	bl	800a834 <vPortExitCritical>
				return pdPASS;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e069      	b.n	8008e6e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d103      	bne.n	8008da8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008da0:	f001 fd48 	bl	800a834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008da4:	2300      	movs	r3, #0
 8008da6:	e062      	b.n	8008e6e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d106      	bne.n	8008dbc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dae:	f107 0310 	add.w	r3, r7, #16
 8008db2:	4618      	mov	r0, r3
 8008db4:	f001 f85a 	bl	8009e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008db8:	2301      	movs	r3, #1
 8008dba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dbc:	f001 fd3a 	bl	800a834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dc0:	f000 fde4 	bl	800998c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dc4:	f001 fd02 	bl	800a7cc <vPortEnterCritical>
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dce:	b25b      	sxtb	r3, r3
 8008dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dd4:	d103      	bne.n	8008dde <xQueueReceive+0x12e>
 8008dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008de4:	b25b      	sxtb	r3, r3
 8008de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dea:	d103      	bne.n	8008df4 <xQueueReceive+0x144>
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008df4:	f001 fd1e 	bl	800a834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008df8:	1d3a      	adds	r2, r7, #4
 8008dfa:	f107 0310 	add.w	r3, r7, #16
 8008dfe:	4611      	mov	r1, r2
 8008e00:	4618      	mov	r0, r3
 8008e02:	f001 f849 	bl	8009e98 <xTaskCheckForTimeOut>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d123      	bne.n	8008e54 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e0e:	f000 fb2e 	bl	800946e <prvIsQueueEmpty>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d017      	beq.n	8008e48 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1a:	3324      	adds	r3, #36	; 0x24
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	4611      	mov	r1, r2
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 ff99 	bl	8009d58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e28:	f000 facf 	bl	80093ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e2c:	f000 fdbc 	bl	80099a8 <xTaskResumeAll>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d189      	bne.n	8008d4a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008e36:	4b10      	ldr	r3, [pc, #64]	; (8008e78 <xQueueReceive+0x1c8>)
 8008e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	e780      	b.n	8008d4a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e4a:	f000 fabe 	bl	80093ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e4e:	f000 fdab 	bl	80099a8 <xTaskResumeAll>
 8008e52:	e77a      	b.n	8008d4a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e56:	f000 fab8 	bl	80093ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e5a:	f000 fda5 	bl	80099a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e60:	f000 fb05 	bl	800946e <prvIsQueueEmpty>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f43f af6f 	beq.w	8008d4a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3730      	adds	r7, #48	; 0x30
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	e000ed04 	.word	0xe000ed04

08008e7c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b08e      	sub	sp, #56	; 0x38
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e86:	2300      	movs	r3, #0
 8008e88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10c      	bne.n	8008eb2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8008e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9c:	b672      	cpsid	i
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	b662      	cpsie	i
 8008eac:	623b      	str	r3, [r7, #32]
}
 8008eae:	bf00      	nop
 8008eb0:	e7fe      	b.n	8008eb0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00c      	beq.n	8008ed4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8008eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebe:	b672      	cpsid	i
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	b662      	cpsie	i
 8008ece:	61fb      	str	r3, [r7, #28]
}
 8008ed0:	bf00      	nop
 8008ed2:	e7fe      	b.n	8008ed2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ed4:	f001 f92a 	bl	800a12c <xTaskGetSchedulerState>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d102      	bne.n	8008ee4 <xQueueSemaphoreTake+0x68>
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <xQueueSemaphoreTake+0x6c>
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e000      	b.n	8008eea <xQueueSemaphoreTake+0x6e>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10c      	bne.n	8008f08 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8008eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef2:	b672      	cpsid	i
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	b662      	cpsie	i
 8008f02:	61bb      	str	r3, [r7, #24]
}
 8008f04:	bf00      	nop
 8008f06:	e7fe      	b.n	8008f06 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f08:	f001 fc60 	bl	800a7cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f10:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d024      	beq.n	8008f62 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1a:	1e5a      	subs	r2, r3, #1
 8008f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d104      	bne.n	8008f32 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008f28:	f001 fac6 	bl	800a4b8 <pvTaskIncrementMutexHeldCount>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00f      	beq.n	8008f5a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3c:	3310      	adds	r3, #16
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 ff30 	bl	8009da4 <xTaskRemoveFromEventList>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d007      	beq.n	8008f5a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f4a:	4b55      	ldr	r3, [pc, #340]	; (80090a0 <xQueueSemaphoreTake+0x224>)
 8008f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f50:	601a      	str	r2, [r3, #0]
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f5a:	f001 fc6b 	bl	800a834 <vPortExitCritical>
				return pdPASS;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e099      	b.n	8009096 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d113      	bne.n	8008f90 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00c      	beq.n	8008f88 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	b672      	cpsid	i
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	b662      	cpsie	i
 8008f82:	617b      	str	r3, [r7, #20]
}
 8008f84:	bf00      	nop
 8008f86:	e7fe      	b.n	8008f86 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008f88:	f001 fc54 	bl	800a834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	e082      	b.n	8009096 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d106      	bne.n	8008fa4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f96:	f107 030c 	add.w	r3, r7, #12
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 ff66 	bl	8009e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fa4:	f001 fc46 	bl	800a834 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fa8:	f000 fcf0 	bl	800998c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fac:	f001 fc0e 	bl	800a7cc <vPortEnterCritical>
 8008fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fb6:	b25b      	sxtb	r3, r3
 8008fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fbc:	d103      	bne.n	8008fc6 <xQueueSemaphoreTake+0x14a>
 8008fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fcc:	b25b      	sxtb	r3, r3
 8008fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fd2:	d103      	bne.n	8008fdc <xQueueSemaphoreTake+0x160>
 8008fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fdc:	f001 fc2a 	bl	800a834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fe0:	463a      	mov	r2, r7
 8008fe2:	f107 030c 	add.w	r3, r7, #12
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 ff55 	bl	8009e98 <xTaskCheckForTimeOut>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d132      	bne.n	800905a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ff4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ff6:	f000 fa3a 	bl	800946e <prvIsQueueEmpty>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d026      	beq.n	800904e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d109      	bne.n	800901c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8009008:	f001 fbe0 	bl	800a7cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800900c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	4618      	mov	r0, r3
 8009012:	f001 f8a9 	bl	800a168 <xTaskPriorityInherit>
 8009016:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009018:	f001 fc0c 	bl	800a834 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800901c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901e:	3324      	adds	r3, #36	; 0x24
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	4611      	mov	r1, r2
 8009024:	4618      	mov	r0, r3
 8009026:	f000 fe97 	bl	8009d58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800902a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800902c:	f000 f9cd 	bl	80093ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009030:	f000 fcba 	bl	80099a8 <xTaskResumeAll>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	f47f af66 	bne.w	8008f08 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800903c:	4b18      	ldr	r3, [pc, #96]	; (80090a0 <xQueueSemaphoreTake+0x224>)
 800903e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009042:	601a      	str	r2, [r3, #0]
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	e75c      	b.n	8008f08 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800904e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009050:	f000 f9bb 	bl	80093ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009054:	f000 fca8 	bl	80099a8 <xTaskResumeAll>
 8009058:	e756      	b.n	8008f08 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800905a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800905c:	f000 f9b5 	bl	80093ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009060:	f000 fca2 	bl	80099a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009064:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009066:	f000 fa02 	bl	800946e <prvIsQueueEmpty>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	f43f af4b 	beq.w	8008f08 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00d      	beq.n	8009094 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8009078:	f001 fba8 	bl	800a7cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800907c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800907e:	f000 f8fc 	bl	800927a <prvGetDisinheritPriorityAfterTimeout>
 8009082:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800908a:	4618      	mov	r0, r3
 800908c:	f001 f976 	bl	800a37c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009090:	f001 fbd0 	bl	800a834 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009094:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009096:	4618      	mov	r0, r3
 8009098:	3738      	adds	r7, #56	; 0x38
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	e000ed04 	.word	0xe000ed04

080090a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b08e      	sub	sp, #56	; 0x38
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10c      	bne.n	80090d4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	b672      	cpsid	i
 80090c0:	f383 8811 	msr	BASEPRI, r3
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	b662      	cpsie	i
 80090ce:	623b      	str	r3, [r7, #32]
}
 80090d0:	bf00      	nop
 80090d2:	e7fe      	b.n	80090d2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d103      	bne.n	80090e2 <xQueueReceiveFromISR+0x3e>
 80090da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <xQueueReceiveFromISR+0x42>
 80090e2:	2301      	movs	r3, #1
 80090e4:	e000      	b.n	80090e8 <xQueueReceiveFromISR+0x44>
 80090e6:	2300      	movs	r3, #0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10c      	bne.n	8009106 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80090ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f0:	b672      	cpsid	i
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	b662      	cpsie	i
 8009100:	61fb      	str	r3, [r7, #28]
}
 8009102:	bf00      	nop
 8009104:	e7fe      	b.n	8009104 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009106:	f001 fc49 	bl	800a99c <vPortValidateInterruptPriority>
	__asm volatile
 800910a:	f3ef 8211 	mrs	r2, BASEPRI
 800910e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009112:	b672      	cpsid	i
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	b662      	cpsie	i
 8009122:	61ba      	str	r2, [r7, #24]
 8009124:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009126:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009128:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009132:	2b00      	cmp	r3, #0
 8009134:	d02f      	beq.n	8009196 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800913c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009140:	68b9      	ldr	r1, [r7, #8]
 8009142:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009144:	f000 f91b 	bl	800937e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	1e5a      	subs	r2, r3, #1
 800914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009150:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009158:	d112      	bne.n	8009180 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d016      	beq.n	8009190 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009164:	3310      	adds	r3, #16
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fe1c 	bl	8009da4 <xTaskRemoveFromEventList>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00e      	beq.n	8009190 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00b      	beq.n	8009190 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	601a      	str	r2, [r3, #0]
 800917e:	e007      	b.n	8009190 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009184:	3301      	adds	r3, #1
 8009186:	b2db      	uxtb	r3, r3
 8009188:	b25a      	sxtb	r2, r3
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009190:	2301      	movs	r3, #1
 8009192:	637b      	str	r3, [r7, #52]	; 0x34
 8009194:	e001      	b.n	800919a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8009196:	2300      	movs	r3, #0
 8009198:	637b      	str	r3, [r7, #52]	; 0x34
 800919a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	f383 8811 	msr	BASEPRI, r3
}
 80091a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3738      	adds	r7, #56	; 0x38
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10c      	bne.n	80091d8 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	b672      	cpsid	i
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	b662      	cpsie	i
 80091d2:	60bb      	str	r3, [r7, #8]
}
 80091d4:	bf00      	nop
 80091d6:	e7fe      	b.n	80091d6 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80091d8:	f001 faf8 	bl	800a7cc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80091e2:	f001 fb27 	bl	800a834 <vPortExitCritical>

	return uxReturn;
 80091e6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80091f0:	b480      	push	{r7}
 80091f2:	b087      	sub	sp, #28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10c      	bne.n	800921c <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8009202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009206:	b672      	cpsid	i
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	b662      	cpsie	i
 8009216:	60fb      	str	r3, [r7, #12]
}
 8009218:	bf00      	nop
 800921a:	e7fe      	b.n	800921a <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009220:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8009222:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009224:	4618      	mov	r0, r3
 8009226:	371c      	adds	r7, #28
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10c      	bne.n	800925c <vQueueDelete+0x2c>
	__asm volatile
 8009242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009246:	b672      	cpsid	i
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	b662      	cpsie	i
 8009256:	60bb      	str	r3, [r7, #8]
}
 8009258:	bf00      	nop
 800925a:	e7fe      	b.n	800925a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 f935 	bl	80094cc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009268:	2b00      	cmp	r3, #0
 800926a:	d102      	bne.n	8009272 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f001 fca3 	bl	800abb8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009272:	bf00      	nop
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800927a:	b480      	push	{r7}
 800927c:	b085      	sub	sp, #20
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	2b00      	cmp	r3, #0
 8009288:	d006      	beq.n	8009298 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f1c3 0307 	rsb	r3, r3, #7
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	e001      	b.n	800929c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800929c:	68fb      	ldr	r3, [r7, #12]
	}
 800929e:	4618      	mov	r0, r3
 80092a0:	3714      	adds	r7, #20
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b086      	sub	sp, #24
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	60f8      	str	r0, [r7, #12]
 80092b2:	60b9      	str	r1, [r7, #8]
 80092b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80092b6:	2300      	movs	r3, #0
 80092b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10d      	bne.n	80092e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d14d      	bne.n	800936c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 ffc7 	bl	800a268 <xTaskPriorityDisinherit>
 80092da:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	609a      	str	r2, [r3, #8]
 80092e2:	e043      	b.n	800936c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d119      	bne.n	800931e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6858      	ldr	r0, [r3, #4]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f2:	461a      	mov	r2, r3
 80092f4:	68b9      	ldr	r1, [r7, #8]
 80092f6:	f014 f97d 	bl	801d5f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	685a      	ldr	r2, [r3, #4]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009302:	441a      	add	r2, r3
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	429a      	cmp	r2, r3
 8009312:	d32b      	bcc.n	800936c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	605a      	str	r2, [r3, #4]
 800931c:	e026      	b.n	800936c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	68d8      	ldr	r0, [r3, #12]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009326:	461a      	mov	r2, r3
 8009328:	68b9      	ldr	r1, [r7, #8]
 800932a:	f014 f963 	bl	801d5f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	68da      	ldr	r2, [r3, #12]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009336:	425b      	negs	r3, r3
 8009338:	441a      	add	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	429a      	cmp	r2, r3
 8009348:	d207      	bcs.n	800935a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	689a      	ldr	r2, [r3, #8]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009352:	425b      	negs	r3, r3
 8009354:	441a      	add	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b02      	cmp	r3, #2
 800935e:	d105      	bne.n	800936c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d002      	beq.n	800936c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	3b01      	subs	r3, #1
 800936a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	1c5a      	adds	r2, r3, #1
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009374:	697b      	ldr	r3, [r7, #20]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b082      	sub	sp, #8
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938c:	2b00      	cmp	r3, #0
 800938e:	d018      	beq.n	80093c2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68da      	ldr	r2, [r3, #12]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009398:	441a      	add	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	68da      	ldr	r2, [r3, #12]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d303      	bcc.n	80093b2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	68d9      	ldr	r1, [r3, #12]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ba:	461a      	mov	r2, r3
 80093bc:	6838      	ldr	r0, [r7, #0]
 80093be:	f014 f919 	bl	801d5f4 <memcpy>
	}
}
 80093c2:	bf00      	nop
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b084      	sub	sp, #16
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80093d2:	f001 f9fb 	bl	800a7cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093dc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093de:	e011      	b.n	8009404 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d012      	beq.n	800940e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	3324      	adds	r3, #36	; 0x24
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 fcd9 	bl	8009da4 <xTaskRemoveFromEventList>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d001      	beq.n	80093fc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80093f8:	f000 fdb4 	bl	8009f64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
 80093fe:	3b01      	subs	r3, #1
 8009400:	b2db      	uxtb	r3, r3
 8009402:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009408:	2b00      	cmp	r3, #0
 800940a:	dce9      	bgt.n	80093e0 <prvUnlockQueue+0x16>
 800940c:	e000      	b.n	8009410 <prvUnlockQueue+0x46>
					break;
 800940e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	22ff      	movs	r2, #255	; 0xff
 8009414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009418:	f001 fa0c 	bl	800a834 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800941c:	f001 f9d6 	bl	800a7cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009426:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009428:	e011      	b.n	800944e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d012      	beq.n	8009458 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	3310      	adds	r3, #16
 8009436:	4618      	mov	r0, r3
 8009438:	f000 fcb4 	bl	8009da4 <xTaskRemoveFromEventList>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d001      	beq.n	8009446 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009442:	f000 fd8f 	bl	8009f64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009446:	7bbb      	ldrb	r3, [r7, #14]
 8009448:	3b01      	subs	r3, #1
 800944a:	b2db      	uxtb	r3, r3
 800944c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800944e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009452:	2b00      	cmp	r3, #0
 8009454:	dce9      	bgt.n	800942a <prvUnlockQueue+0x60>
 8009456:	e000      	b.n	800945a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009458:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	22ff      	movs	r2, #255	; 0xff
 800945e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009462:	f001 f9e7 	bl	800a834 <vPortExitCritical>
}
 8009466:	bf00      	nop
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b084      	sub	sp, #16
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009476:	f001 f9a9 	bl	800a7cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947e:	2b00      	cmp	r3, #0
 8009480:	d102      	bne.n	8009488 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009482:	2301      	movs	r3, #1
 8009484:	60fb      	str	r3, [r7, #12]
 8009486:	e001      	b.n	800948c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009488:	2300      	movs	r3, #0
 800948a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800948c:	f001 f9d2 	bl	800a834 <vPortExitCritical>

	return xReturn;
 8009490:	68fb      	ldr	r3, [r7, #12]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b084      	sub	sp, #16
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094a2:	f001 f993 	bl	800a7cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d102      	bne.n	80094b8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80094b2:	2301      	movs	r3, #1
 80094b4:	60fb      	str	r3, [r7, #12]
 80094b6:	e001      	b.n	80094bc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80094b8:	2300      	movs	r3, #0
 80094ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094bc:	f001 f9ba 	bl	800a834 <vPortExitCritical>

	return xReturn;
 80094c0:	68fb      	ldr	r3, [r7, #12]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
	...

080094cc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094d4:	2300      	movs	r3, #0
 80094d6:	60fb      	str	r3, [r7, #12]
 80094d8:	e016      	b.n	8009508 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80094da:	4a10      	ldr	r2, [pc, #64]	; (800951c <vQueueUnregisterQueue+0x50>)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	00db      	lsls	r3, r3, #3
 80094e0:	4413      	add	r3, r2
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d10b      	bne.n	8009502 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80094ea:	4a0c      	ldr	r2, [pc, #48]	; (800951c <vQueueUnregisterQueue+0x50>)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2100      	movs	r1, #0
 80094f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80094f4:	4a09      	ldr	r2, [pc, #36]	; (800951c <vQueueUnregisterQueue+0x50>)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	00db      	lsls	r3, r3, #3
 80094fa:	4413      	add	r3, r2
 80094fc:	2200      	movs	r2, #0
 80094fe:	605a      	str	r2, [r3, #4]
				break;
 8009500:	e006      	b.n	8009510 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	3301      	adds	r3, #1
 8009506:	60fb      	str	r3, [r7, #12]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2b07      	cmp	r3, #7
 800950c:	d9e5      	bls.n	80094da <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800950e:	bf00      	nop
 8009510:	bf00      	nop
 8009512:	3714      	adds	r7, #20
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	20006520 	.word	0x20006520

08009520 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009520:	b580      	push	{r7, lr}
 8009522:	b08e      	sub	sp, #56	; 0x38
 8009524:	af04      	add	r7, sp, #16
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	607a      	str	r2, [r7, #4]
 800952c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800952e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10c      	bne.n	800954e <xTaskCreateStatic+0x2e>
	__asm volatile
 8009534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009538:	b672      	cpsid	i
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	b662      	cpsie	i
 8009548:	623b      	str	r3, [r7, #32]
}
 800954a:	bf00      	nop
 800954c:	e7fe      	b.n	800954c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800954e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10c      	bne.n	800956e <xTaskCreateStatic+0x4e>
	__asm volatile
 8009554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009558:	b672      	cpsid	i
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	b662      	cpsie	i
 8009568:	61fb      	str	r3, [r7, #28]
}
 800956a:	bf00      	nop
 800956c:	e7fe      	b.n	800956c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800956e:	2354      	movs	r3, #84	; 0x54
 8009570:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	2b54      	cmp	r3, #84	; 0x54
 8009576:	d00c      	beq.n	8009592 <xTaskCreateStatic+0x72>
	__asm volatile
 8009578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957c:	b672      	cpsid	i
 800957e:	f383 8811 	msr	BASEPRI, r3
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	b662      	cpsie	i
 800958c:	61bb      	str	r3, [r7, #24]
}
 800958e:	bf00      	nop
 8009590:	e7fe      	b.n	8009590 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009592:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009596:	2b00      	cmp	r3, #0
 8009598:	d01e      	beq.n	80095d8 <xTaskCreateStatic+0xb8>
 800959a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800959c:	2b00      	cmp	r3, #0
 800959e:	d01b      	beq.n	80095d8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ac:	2202      	movs	r2, #2
 80095ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095b2:	2300      	movs	r3, #0
 80095b4:	9303      	str	r3, [sp, #12]
 80095b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b8:	9302      	str	r3, [sp, #8]
 80095ba:	f107 0314 	add.w	r3, r7, #20
 80095be:	9301      	str	r3, [sp, #4]
 80095c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c2:	9300      	str	r3, [sp, #0]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	68b9      	ldr	r1, [r7, #8]
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f000 f850 	bl	8009670 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095d2:	f000 f8d7 	bl	8009784 <prvAddNewTaskToReadyList>
 80095d6:	e001      	b.n	80095dc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80095d8:	2300      	movs	r3, #0
 80095da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80095dc:	697b      	ldr	r3, [r7, #20]
	}
 80095de:	4618      	mov	r0, r3
 80095e0:	3728      	adds	r7, #40	; 0x28
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b08c      	sub	sp, #48	; 0x30
 80095ea:	af04      	add	r7, sp, #16
 80095ec:	60f8      	str	r0, [r7, #12]
 80095ee:	60b9      	str	r1, [r7, #8]
 80095f0:	603b      	str	r3, [r7, #0]
 80095f2:	4613      	mov	r3, r2
 80095f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80095f6:	88fb      	ldrh	r3, [r7, #6]
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4618      	mov	r0, r3
 80095fc:	f001 fa12 	bl	800aa24 <pvPortMalloc>
 8009600:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00e      	beq.n	8009626 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009608:	2054      	movs	r0, #84	; 0x54
 800960a:	f001 fa0b 	bl	800aa24 <pvPortMalloc>
 800960e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d003      	beq.n	800961e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	631a      	str	r2, [r3, #48]	; 0x30
 800961c:	e005      	b.n	800962a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800961e:	6978      	ldr	r0, [r7, #20]
 8009620:	f001 faca 	bl	800abb8 <vPortFree>
 8009624:	e001      	b.n	800962a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009626:	2300      	movs	r3, #0
 8009628:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800962a:	69fb      	ldr	r3, [r7, #28]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d017      	beq.n	8009660 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009638:	88fa      	ldrh	r2, [r7, #6]
 800963a:	2300      	movs	r3, #0
 800963c:	9303      	str	r3, [sp, #12]
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	9302      	str	r3, [sp, #8]
 8009642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009644:	9301      	str	r3, [sp, #4]
 8009646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	68b9      	ldr	r1, [r7, #8]
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f000 f80e 	bl	8009670 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009654:	69f8      	ldr	r0, [r7, #28]
 8009656:	f000 f895 	bl	8009784 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800965a:	2301      	movs	r3, #1
 800965c:	61bb      	str	r3, [r7, #24]
 800965e:	e002      	b.n	8009666 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009664:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009666:	69bb      	ldr	r3, [r7, #24]
	}
 8009668:	4618      	mov	r0, r3
 800966a:	3720      	adds	r7, #32
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b088      	sub	sp, #32
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800967e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009682:	6879      	ldr	r1, [r7, #4]
 8009684:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009688:	440b      	add	r3, r1
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	f023 0307 	bic.w	r3, r3, #7
 8009696:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	f003 0307 	and.w	r3, r3, #7
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00c      	beq.n	80096bc <prvInitialiseNewTask+0x4c>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	b672      	cpsid	i
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	b662      	cpsie	i
 80096b6:	617b      	str	r3, [r7, #20]
}
 80096b8:	bf00      	nop
 80096ba:	e7fe      	b.n	80096ba <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d01f      	beq.n	8009702 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096c2:	2300      	movs	r3, #0
 80096c4:	61fb      	str	r3, [r7, #28]
 80096c6:	e012      	b.n	80096ee <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	4413      	add	r3, r2
 80096ce:	7819      	ldrb	r1, [r3, #0]
 80096d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	4413      	add	r3, r2
 80096d6:	3334      	adds	r3, #52	; 0x34
 80096d8:	460a      	mov	r2, r1
 80096da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80096dc:	68ba      	ldr	r2, [r7, #8]
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	4413      	add	r3, r2
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d006      	beq.n	80096f6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	3301      	adds	r3, #1
 80096ec:	61fb      	str	r3, [r7, #28]
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	2b0f      	cmp	r3, #15
 80096f2:	d9e9      	bls.n	80096c8 <prvInitialiseNewTask+0x58>
 80096f4:	e000      	b.n	80096f8 <prvInitialiseNewTask+0x88>
			{
				break;
 80096f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80096f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009700:	e003      	b.n	800970a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009704:	2200      	movs	r2, #0
 8009706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800970a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970c:	2b06      	cmp	r3, #6
 800970e:	d901      	bls.n	8009714 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009710:	2306      	movs	r3, #6
 8009712:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009718:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800971a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800971e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009722:	2200      	movs	r2, #0
 8009724:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009728:	3304      	adds	r3, #4
 800972a:	4618      	mov	r0, r3
 800972c:	f7fe fe55 	bl	80083da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009732:	3318      	adds	r3, #24
 8009734:	4618      	mov	r0, r3
 8009736:	f7fe fe50 	bl	80083da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800973a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800973e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009742:	f1c3 0207 	rsb	r2, r3, #7
 8009746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009748:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800974a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800974e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009752:	2200      	movs	r2, #0
 8009754:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009758:	2200      	movs	r2, #0
 800975a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	68f9      	ldr	r1, [r7, #12]
 8009762:	69b8      	ldr	r0, [r7, #24]
 8009764:	f000 ff22 	bl	800a5ac <pxPortInitialiseStack>
 8009768:	4602      	mov	r2, r0
 800976a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800976e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009770:	2b00      	cmp	r3, #0
 8009772:	d002      	beq.n	800977a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009778:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800977a:	bf00      	nop
 800977c:	3720      	adds	r7, #32
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
	...

08009784 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800978c:	f001 f81e 	bl	800a7cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009790:	4b2a      	ldr	r3, [pc, #168]	; (800983c <prvAddNewTaskToReadyList+0xb8>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	3301      	adds	r3, #1
 8009796:	4a29      	ldr	r2, [pc, #164]	; (800983c <prvAddNewTaskToReadyList+0xb8>)
 8009798:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800979a:	4b29      	ldr	r3, [pc, #164]	; (8009840 <prvAddNewTaskToReadyList+0xbc>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d109      	bne.n	80097b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80097a2:	4a27      	ldr	r2, [pc, #156]	; (8009840 <prvAddNewTaskToReadyList+0xbc>)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80097a8:	4b24      	ldr	r3, [pc, #144]	; (800983c <prvAddNewTaskToReadyList+0xb8>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d110      	bne.n	80097d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80097b0:	f000 fbfc 	bl	8009fac <prvInitialiseTaskLists>
 80097b4:	e00d      	b.n	80097d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80097b6:	4b23      	ldr	r3, [pc, #140]	; (8009844 <prvAddNewTaskToReadyList+0xc0>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d109      	bne.n	80097d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80097be:	4b20      	ldr	r3, [pc, #128]	; (8009840 <prvAddNewTaskToReadyList+0xbc>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d802      	bhi.n	80097d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80097cc:	4a1c      	ldr	r2, [pc, #112]	; (8009840 <prvAddNewTaskToReadyList+0xbc>)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80097d2:	4b1d      	ldr	r3, [pc, #116]	; (8009848 <prvAddNewTaskToReadyList+0xc4>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	3301      	adds	r3, #1
 80097d8:	4a1b      	ldr	r2, [pc, #108]	; (8009848 <prvAddNewTaskToReadyList+0xc4>)
 80097da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e0:	2201      	movs	r2, #1
 80097e2:	409a      	lsls	r2, r3
 80097e4:	4b19      	ldr	r3, [pc, #100]	; (800984c <prvAddNewTaskToReadyList+0xc8>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	4a18      	ldr	r2, [pc, #96]	; (800984c <prvAddNewTaskToReadyList+0xc8>)
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f2:	4613      	mov	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4a15      	ldr	r2, [pc, #84]	; (8009850 <prvAddNewTaskToReadyList+0xcc>)
 80097fc:	441a      	add	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	3304      	adds	r3, #4
 8009802:	4619      	mov	r1, r3
 8009804:	4610      	mov	r0, r2
 8009806:	f7fe fdf5 	bl	80083f4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800980a:	f001 f813 	bl	800a834 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800980e:	4b0d      	ldr	r3, [pc, #52]	; (8009844 <prvAddNewTaskToReadyList+0xc0>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00e      	beq.n	8009834 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009816:	4b0a      	ldr	r3, [pc, #40]	; (8009840 <prvAddNewTaskToReadyList+0xbc>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009820:	429a      	cmp	r2, r3
 8009822:	d207      	bcs.n	8009834 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009824:	4b0b      	ldr	r3, [pc, #44]	; (8009854 <prvAddNewTaskToReadyList+0xd0>)
 8009826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800982a:	601a      	str	r2, [r3, #0]
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	20006660 	.word	0x20006660
 8009840:	20006560 	.word	0x20006560
 8009844:	2000666c 	.word	0x2000666c
 8009848:	2000667c 	.word	0x2000667c
 800984c:	20006668 	.word	0x20006668
 8009850:	20006564 	.word	0x20006564
 8009854:	e000ed04 	.word	0xe000ed04

08009858 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009860:	2300      	movs	r3, #0
 8009862:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d019      	beq.n	800989e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800986a:	4b14      	ldr	r3, [pc, #80]	; (80098bc <vTaskDelay+0x64>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00c      	beq.n	800988c <vTaskDelay+0x34>
	__asm volatile
 8009872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009876:	b672      	cpsid	i
 8009878:	f383 8811 	msr	BASEPRI, r3
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	b662      	cpsie	i
 8009886:	60bb      	str	r3, [r7, #8]
}
 8009888:	bf00      	nop
 800988a:	e7fe      	b.n	800988a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800988c:	f000 f87e 	bl	800998c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009890:	2100      	movs	r1, #0
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fe24 	bl	800a4e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009898:	f000 f886 	bl	80099a8 <xTaskResumeAll>
 800989c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d107      	bne.n	80098b4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80098a4:	4b06      	ldr	r3, [pc, #24]	; (80098c0 <vTaskDelay+0x68>)
 80098a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098aa:	601a      	str	r2, [r3, #0]
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098b4:	bf00      	nop
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	20006688 	.word	0x20006688
 80098c0:	e000ed04 	.word	0xe000ed04

080098c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b08a      	sub	sp, #40	; 0x28
 80098c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80098ca:	2300      	movs	r3, #0
 80098cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80098ce:	2300      	movs	r3, #0
 80098d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80098d2:	463a      	mov	r2, r7
 80098d4:	1d39      	adds	r1, r7, #4
 80098d6:	f107 0308 	add.w	r3, r7, #8
 80098da:	4618      	mov	r0, r3
 80098dc:	f7f6 fe9a 	bl	8000614 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	9202      	str	r2, [sp, #8]
 80098e8:	9301      	str	r3, [sp, #4]
 80098ea:	2300      	movs	r3, #0
 80098ec:	9300      	str	r3, [sp, #0]
 80098ee:	2300      	movs	r3, #0
 80098f0:	460a      	mov	r2, r1
 80098f2:	4920      	ldr	r1, [pc, #128]	; (8009974 <vTaskStartScheduler+0xb0>)
 80098f4:	4820      	ldr	r0, [pc, #128]	; (8009978 <vTaskStartScheduler+0xb4>)
 80098f6:	f7ff fe13 	bl	8009520 <xTaskCreateStatic>
 80098fa:	4603      	mov	r3, r0
 80098fc:	4a1f      	ldr	r2, [pc, #124]	; (800997c <vTaskStartScheduler+0xb8>)
 80098fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009900:	4b1e      	ldr	r3, [pc, #120]	; (800997c <vTaskStartScheduler+0xb8>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d002      	beq.n	800990e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009908:	2301      	movs	r3, #1
 800990a:	617b      	str	r3, [r7, #20]
 800990c:	e001      	b.n	8009912 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800990e:	2300      	movs	r3, #0
 8009910:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d118      	bne.n	800994a <vTaskStartScheduler+0x86>
	__asm volatile
 8009918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991c:	b672      	cpsid	i
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	b662      	cpsie	i
 800992c:	613b      	str	r3, [r7, #16]
}
 800992e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009930:	4b13      	ldr	r3, [pc, #76]	; (8009980 <vTaskStartScheduler+0xbc>)
 8009932:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009936:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009938:	4b12      	ldr	r3, [pc, #72]	; (8009984 <vTaskStartScheduler+0xc0>)
 800993a:	2201      	movs	r2, #1
 800993c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800993e:	4b12      	ldr	r3, [pc, #72]	; (8009988 <vTaskStartScheduler+0xc4>)
 8009940:	2200      	movs	r2, #0
 8009942:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009944:	f000 fec4 	bl	800a6d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009948:	e010      	b.n	800996c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009950:	d10c      	bne.n	800996c <vTaskStartScheduler+0xa8>
	__asm volatile
 8009952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009956:	b672      	cpsid	i
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	b662      	cpsie	i
 8009966:	60fb      	str	r3, [r7, #12]
}
 8009968:	bf00      	nop
 800996a:	e7fe      	b.n	800996a <vTaskStartScheduler+0xa6>
}
 800996c:	bf00      	nop
 800996e:	3718      	adds	r7, #24
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	0801ea28 	.word	0x0801ea28
 8009978:	08009f7d 	.word	0x08009f7d
 800997c:	20006684 	.word	0x20006684
 8009980:	20006680 	.word	0x20006680
 8009984:	2000666c 	.word	0x2000666c
 8009988:	20006664 	.word	0x20006664

0800998c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800998c:	b480      	push	{r7}
 800998e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009990:	4b04      	ldr	r3, [pc, #16]	; (80099a4 <vTaskSuspendAll+0x18>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	3301      	adds	r3, #1
 8009996:	4a03      	ldr	r2, [pc, #12]	; (80099a4 <vTaskSuspendAll+0x18>)
 8009998:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800999a:	bf00      	nop
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr
 80099a4:	20006688 	.word	0x20006688

080099a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80099ae:	2300      	movs	r3, #0
 80099b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80099b2:	2300      	movs	r3, #0
 80099b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80099b6:	4b42      	ldr	r3, [pc, #264]	; (8009ac0 <xTaskResumeAll+0x118>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10c      	bne.n	80099d8 <xTaskResumeAll+0x30>
	__asm volatile
 80099be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c2:	b672      	cpsid	i
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	b662      	cpsie	i
 80099d2:	603b      	str	r3, [r7, #0]
}
 80099d4:	bf00      	nop
 80099d6:	e7fe      	b.n	80099d6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80099d8:	f000 fef8 	bl	800a7cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80099dc:	4b38      	ldr	r3, [pc, #224]	; (8009ac0 <xTaskResumeAll+0x118>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	4a37      	ldr	r2, [pc, #220]	; (8009ac0 <xTaskResumeAll+0x118>)
 80099e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099e6:	4b36      	ldr	r3, [pc, #216]	; (8009ac0 <xTaskResumeAll+0x118>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d161      	bne.n	8009ab2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80099ee:	4b35      	ldr	r3, [pc, #212]	; (8009ac4 <xTaskResumeAll+0x11c>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d05d      	beq.n	8009ab2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099f6:	e02e      	b.n	8009a56 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099f8:	4b33      	ldr	r3, [pc, #204]	; (8009ac8 <xTaskResumeAll+0x120>)
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	3318      	adds	r3, #24
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fe fd52 	bl	80084ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	3304      	adds	r3, #4
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fe fd4d 	bl	80084ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a18:	2201      	movs	r2, #1
 8009a1a:	409a      	lsls	r2, r3
 8009a1c:	4b2b      	ldr	r3, [pc, #172]	; (8009acc <xTaskResumeAll+0x124>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	4a2a      	ldr	r2, [pc, #168]	; (8009acc <xTaskResumeAll+0x124>)
 8009a24:	6013      	str	r3, [r2, #0]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	4413      	add	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4a27      	ldr	r2, [pc, #156]	; (8009ad0 <xTaskResumeAll+0x128>)
 8009a34:	441a      	add	r2, r3
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	3304      	adds	r3, #4
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	f7fe fcd9 	bl	80083f4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a46:	4b23      	ldr	r3, [pc, #140]	; (8009ad4 <xTaskResumeAll+0x12c>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d302      	bcc.n	8009a56 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009a50:	4b21      	ldr	r3, [pc, #132]	; (8009ad8 <xTaskResumeAll+0x130>)
 8009a52:	2201      	movs	r2, #1
 8009a54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a56:	4b1c      	ldr	r3, [pc, #112]	; (8009ac8 <xTaskResumeAll+0x120>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1cc      	bne.n	80099f8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d001      	beq.n	8009a68 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a64:	f000 fb42 	bl	800a0ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009a68:	4b1c      	ldr	r3, [pc, #112]	; (8009adc <xTaskResumeAll+0x134>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d010      	beq.n	8009a96 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a74:	f000 f858 	bl	8009b28 <xTaskIncrementTick>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d002      	beq.n	8009a84 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009a7e:	4b16      	ldr	r3, [pc, #88]	; (8009ad8 <xTaskResumeAll+0x130>)
 8009a80:	2201      	movs	r2, #1
 8009a82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	3b01      	subs	r3, #1
 8009a88:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1f1      	bne.n	8009a74 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009a90:	4b12      	ldr	r3, [pc, #72]	; (8009adc <xTaskResumeAll+0x134>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a96:	4b10      	ldr	r3, [pc, #64]	; (8009ad8 <xTaskResumeAll+0x130>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d009      	beq.n	8009ab2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009aa2:	4b0f      	ldr	r3, [pc, #60]	; (8009ae0 <xTaskResumeAll+0x138>)
 8009aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aa8:	601a      	str	r2, [r3, #0]
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ab2:	f000 febf 	bl	800a834 <vPortExitCritical>

	return xAlreadyYielded;
 8009ab6:	68bb      	ldr	r3, [r7, #8]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3710      	adds	r7, #16
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	20006688 	.word	0x20006688
 8009ac4:	20006660 	.word	0x20006660
 8009ac8:	20006620 	.word	0x20006620
 8009acc:	20006668 	.word	0x20006668
 8009ad0:	20006564 	.word	0x20006564
 8009ad4:	20006560 	.word	0x20006560
 8009ad8:	20006674 	.word	0x20006674
 8009adc:	20006670 	.word	0x20006670
 8009ae0:	e000ed04 	.word	0xe000ed04

08009ae4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009aea:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <xTaskGetTickCount+0x1c>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009af0:	687b      	ldr	r3, [r7, #4]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	20006664 	.word	0x20006664

08009b04 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b0a:	f000 ff47 	bl	800a99c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009b0e:	2300      	movs	r3, #0
 8009b10:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009b12:	4b04      	ldr	r3, [pc, #16]	; (8009b24 <xTaskGetTickCountFromISR+0x20>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b18:	683b      	ldr	r3, [r7, #0]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	20006664 	.word	0x20006664

08009b28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b086      	sub	sp, #24
 8009b2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b32:	4b4f      	ldr	r3, [pc, #316]	; (8009c70 <xTaskIncrementTick+0x148>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	f040 808a 	bne.w	8009c50 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b3c:	4b4d      	ldr	r3, [pc, #308]	; (8009c74 <xTaskIncrementTick+0x14c>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	3301      	adds	r3, #1
 8009b42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b44:	4a4b      	ldr	r2, [pc, #300]	; (8009c74 <xTaskIncrementTick+0x14c>)
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d122      	bne.n	8009b96 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b50:	4b49      	ldr	r3, [pc, #292]	; (8009c78 <xTaskIncrementTick+0x150>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00c      	beq.n	8009b74 <xTaskIncrementTick+0x4c>
	__asm volatile
 8009b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5e:	b672      	cpsid	i
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	b662      	cpsie	i
 8009b6e:	603b      	str	r3, [r7, #0]
}
 8009b70:	bf00      	nop
 8009b72:	e7fe      	b.n	8009b72 <xTaskIncrementTick+0x4a>
 8009b74:	4b40      	ldr	r3, [pc, #256]	; (8009c78 <xTaskIncrementTick+0x150>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	60fb      	str	r3, [r7, #12]
 8009b7a:	4b40      	ldr	r3, [pc, #256]	; (8009c7c <xTaskIncrementTick+0x154>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a3e      	ldr	r2, [pc, #248]	; (8009c78 <xTaskIncrementTick+0x150>)
 8009b80:	6013      	str	r3, [r2, #0]
 8009b82:	4a3e      	ldr	r2, [pc, #248]	; (8009c7c <xTaskIncrementTick+0x154>)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6013      	str	r3, [r2, #0]
 8009b88:	4b3d      	ldr	r3, [pc, #244]	; (8009c80 <xTaskIncrementTick+0x158>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	4a3c      	ldr	r2, [pc, #240]	; (8009c80 <xTaskIncrementTick+0x158>)
 8009b90:	6013      	str	r3, [r2, #0]
 8009b92:	f000 faab 	bl	800a0ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b96:	4b3b      	ldr	r3, [pc, #236]	; (8009c84 <xTaskIncrementTick+0x15c>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d348      	bcc.n	8009c32 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ba0:	4b35      	ldr	r3, [pc, #212]	; (8009c78 <xTaskIncrementTick+0x150>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d104      	bne.n	8009bb4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009baa:	4b36      	ldr	r3, [pc, #216]	; (8009c84 <xTaskIncrementTick+0x15c>)
 8009bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bb0:	601a      	str	r2, [r3, #0]
					break;
 8009bb2:	e03e      	b.n	8009c32 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bb4:	4b30      	ldr	r3, [pc, #192]	; (8009c78 <xTaskIncrementTick+0x150>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009bc4:	693a      	ldr	r2, [r7, #16]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d203      	bcs.n	8009bd4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009bcc:	4a2d      	ldr	r2, [pc, #180]	; (8009c84 <xTaskIncrementTick+0x15c>)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009bd2:	e02e      	b.n	8009c32 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fe fc68 	bl	80084ae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d004      	beq.n	8009bf0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	3318      	adds	r3, #24
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fe fc5f 	bl	80084ae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	409a      	lsls	r2, r3
 8009bf8:	4b23      	ldr	r3, [pc, #140]	; (8009c88 <xTaskIncrementTick+0x160>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	4a22      	ldr	r2, [pc, #136]	; (8009c88 <xTaskIncrementTick+0x160>)
 8009c00:	6013      	str	r3, [r2, #0]
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c06:	4613      	mov	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4a1f      	ldr	r2, [pc, #124]	; (8009c8c <xTaskIncrementTick+0x164>)
 8009c10:	441a      	add	r2, r3
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	3304      	adds	r3, #4
 8009c16:	4619      	mov	r1, r3
 8009c18:	4610      	mov	r0, r2
 8009c1a:	f7fe fbeb 	bl	80083f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c22:	4b1b      	ldr	r3, [pc, #108]	; (8009c90 <xTaskIncrementTick+0x168>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d3b9      	bcc.n	8009ba0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c30:	e7b6      	b.n	8009ba0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c32:	4b17      	ldr	r3, [pc, #92]	; (8009c90 <xTaskIncrementTick+0x168>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c38:	4914      	ldr	r1, [pc, #80]	; (8009c8c <xTaskIncrementTick+0x164>)
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	4413      	add	r3, r2
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	440b      	add	r3, r1
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d907      	bls.n	8009c5a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	617b      	str	r3, [r7, #20]
 8009c4e:	e004      	b.n	8009c5a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009c50:	4b10      	ldr	r3, [pc, #64]	; (8009c94 <xTaskIncrementTick+0x16c>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3301      	adds	r3, #1
 8009c56:	4a0f      	ldr	r2, [pc, #60]	; (8009c94 <xTaskIncrementTick+0x16c>)
 8009c58:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009c5a:	4b0f      	ldr	r3, [pc, #60]	; (8009c98 <xTaskIncrementTick+0x170>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d001      	beq.n	8009c66 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8009c62:	2301      	movs	r3, #1
 8009c64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009c66:	697b      	ldr	r3, [r7, #20]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3718      	adds	r7, #24
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	20006688 	.word	0x20006688
 8009c74:	20006664 	.word	0x20006664
 8009c78:	20006618 	.word	0x20006618
 8009c7c:	2000661c 	.word	0x2000661c
 8009c80:	20006678 	.word	0x20006678
 8009c84:	20006680 	.word	0x20006680
 8009c88:	20006668 	.word	0x20006668
 8009c8c:	20006564 	.word	0x20006564
 8009c90:	20006560 	.word	0x20006560
 8009c94:	20006670 	.word	0x20006670
 8009c98:	20006674 	.word	0x20006674

08009c9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b087      	sub	sp, #28
 8009ca0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ca2:	4b28      	ldr	r3, [pc, #160]	; (8009d44 <vTaskSwitchContext+0xa8>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d003      	beq.n	8009cb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009caa:	4b27      	ldr	r3, [pc, #156]	; (8009d48 <vTaskSwitchContext+0xac>)
 8009cac:	2201      	movs	r2, #1
 8009cae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009cb0:	e041      	b.n	8009d36 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009cb2:	4b25      	ldr	r3, [pc, #148]	; (8009d48 <vTaskSwitchContext+0xac>)
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cb8:	4b24      	ldr	r3, [pc, #144]	; (8009d4c <vTaskSwitchContext+0xb0>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	fab3 f383 	clz	r3, r3
 8009cc4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009cc6:	7afb      	ldrb	r3, [r7, #11]
 8009cc8:	f1c3 031f 	rsb	r3, r3, #31
 8009ccc:	617b      	str	r3, [r7, #20]
 8009cce:	4920      	ldr	r1, [pc, #128]	; (8009d50 <vTaskSwitchContext+0xb4>)
 8009cd0:	697a      	ldr	r2, [r7, #20]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4413      	add	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	440b      	add	r3, r1
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10c      	bne.n	8009cfc <vTaskSwitchContext+0x60>
	__asm volatile
 8009ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce6:	b672      	cpsid	i
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	b662      	cpsie	i
 8009cf6:	607b      	str	r3, [r7, #4]
}
 8009cf8:	bf00      	nop
 8009cfa:	e7fe      	b.n	8009cfa <vTaskSwitchContext+0x5e>
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4413      	add	r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	4a12      	ldr	r2, [pc, #72]	; (8009d50 <vTaskSwitchContext+0xb4>)
 8009d08:	4413      	add	r3, r2
 8009d0a:	613b      	str	r3, [r7, #16]
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	685a      	ldr	r2, [r3, #4]
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	605a      	str	r2, [r3, #4]
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	685a      	ldr	r2, [r3, #4]
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	3308      	adds	r3, #8
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d104      	bne.n	8009d2c <vTaskSwitchContext+0x90>
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	605a      	str	r2, [r3, #4]
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	4a08      	ldr	r2, [pc, #32]	; (8009d54 <vTaskSwitchContext+0xb8>)
 8009d34:	6013      	str	r3, [r2, #0]
}
 8009d36:	bf00      	nop
 8009d38:	371c      	adds	r7, #28
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	20006688 	.word	0x20006688
 8009d48:	20006674 	.word	0x20006674
 8009d4c:	20006668 	.word	0x20006668
 8009d50:	20006564 	.word	0x20006564
 8009d54:	20006560 	.word	0x20006560

08009d58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d10c      	bne.n	8009d82 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6c:	b672      	cpsid	i
 8009d6e:	f383 8811 	msr	BASEPRI, r3
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	f3bf 8f4f 	dsb	sy
 8009d7a:	b662      	cpsie	i
 8009d7c:	60fb      	str	r3, [r7, #12]
}
 8009d7e:	bf00      	nop
 8009d80:	e7fe      	b.n	8009d80 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d82:	4b07      	ldr	r3, [pc, #28]	; (8009da0 <vTaskPlaceOnEventList+0x48>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	3318      	adds	r3, #24
 8009d88:	4619      	mov	r1, r3
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7fe fb56 	bl	800843c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d90:	2101      	movs	r1, #1
 8009d92:	6838      	ldr	r0, [r7, #0]
 8009d94:	f000 fba4 	bl	800a4e0 <prvAddCurrentTaskToDelayedList>
}
 8009d98:	bf00      	nop
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	20006560 	.word	0x20006560

08009da4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10c      	bne.n	8009dd4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbe:	b672      	cpsid	i
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	b662      	cpsie	i
 8009dce:	60fb      	str	r3, [r7, #12]
}
 8009dd0:	bf00      	nop
 8009dd2:	e7fe      	b.n	8009dd2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	3318      	adds	r3, #24
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7fe fb68 	bl	80084ae <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dde:	4b1d      	ldr	r3, [pc, #116]	; (8009e54 <xTaskRemoveFromEventList+0xb0>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d11c      	bne.n	8009e20 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	3304      	adds	r3, #4
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fe fb5f 	bl	80084ae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df4:	2201      	movs	r2, #1
 8009df6:	409a      	lsls	r2, r3
 8009df8:	4b17      	ldr	r3, [pc, #92]	; (8009e58 <xTaskRemoveFromEventList+0xb4>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	4a16      	ldr	r2, [pc, #88]	; (8009e58 <xTaskRemoveFromEventList+0xb4>)
 8009e00:	6013      	str	r3, [r2, #0]
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e06:	4613      	mov	r3, r2
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	4413      	add	r3, r2
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	4a13      	ldr	r2, [pc, #76]	; (8009e5c <xTaskRemoveFromEventList+0xb8>)
 8009e10:	441a      	add	r2, r3
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	3304      	adds	r3, #4
 8009e16:	4619      	mov	r1, r3
 8009e18:	4610      	mov	r0, r2
 8009e1a:	f7fe faeb 	bl	80083f4 <vListInsertEnd>
 8009e1e:	e005      	b.n	8009e2c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	3318      	adds	r3, #24
 8009e24:	4619      	mov	r1, r3
 8009e26:	480e      	ldr	r0, [pc, #56]	; (8009e60 <xTaskRemoveFromEventList+0xbc>)
 8009e28:	f7fe fae4 	bl	80083f4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e30:	4b0c      	ldr	r3, [pc, #48]	; (8009e64 <xTaskRemoveFromEventList+0xc0>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d905      	bls.n	8009e46 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e3e:	4b0a      	ldr	r3, [pc, #40]	; (8009e68 <xTaskRemoveFromEventList+0xc4>)
 8009e40:	2201      	movs	r2, #1
 8009e42:	601a      	str	r2, [r3, #0]
 8009e44:	e001      	b.n	8009e4a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009e46:	2300      	movs	r3, #0
 8009e48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009e4a:	697b      	ldr	r3, [r7, #20]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3718      	adds	r7, #24
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	20006688 	.word	0x20006688
 8009e58:	20006668 	.word	0x20006668
 8009e5c:	20006564 	.word	0x20006564
 8009e60:	20006620 	.word	0x20006620
 8009e64:	20006560 	.word	0x20006560
 8009e68:	20006674 	.word	0x20006674

08009e6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e74:	4b06      	ldr	r3, [pc, #24]	; (8009e90 <vTaskInternalSetTimeOutState+0x24>)
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e7c:	4b05      	ldr	r3, [pc, #20]	; (8009e94 <vTaskInternalSetTimeOutState+0x28>)
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	605a      	str	r2, [r3, #4]
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr
 8009e90:	20006678 	.word	0x20006678
 8009e94:	20006664 	.word	0x20006664

08009e98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b088      	sub	sp, #32
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10c      	bne.n	8009ec2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eac:	b672      	cpsid	i
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	b662      	cpsie	i
 8009ebc:	613b      	str	r3, [r7, #16]
}
 8009ebe:	bf00      	nop
 8009ec0:	e7fe      	b.n	8009ec0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10c      	bne.n	8009ee2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ecc:	b672      	cpsid	i
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	b662      	cpsie	i
 8009edc:	60fb      	str	r3, [r7, #12]
}
 8009ede:	bf00      	nop
 8009ee0:	e7fe      	b.n	8009ee0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009ee2:	f000 fc73 	bl	800a7cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ee6:	4b1d      	ldr	r3, [pc, #116]	; (8009f5c <xTaskCheckForTimeOut+0xc4>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	69ba      	ldr	r2, [r7, #24]
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009efe:	d102      	bne.n	8009f06 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009f00:	2300      	movs	r3, #0
 8009f02:	61fb      	str	r3, [r7, #28]
 8009f04:	e023      	b.n	8009f4e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	4b15      	ldr	r3, [pc, #84]	; (8009f60 <xTaskCheckForTimeOut+0xc8>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d007      	beq.n	8009f22 <xTaskCheckForTimeOut+0x8a>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	69ba      	ldr	r2, [r7, #24]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d302      	bcc.n	8009f22 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	61fb      	str	r3, [r7, #28]
 8009f20:	e015      	b.n	8009f4e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d20b      	bcs.n	8009f44 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	1ad2      	subs	r2, r2, r3
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f7ff ff97 	bl	8009e6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	61fb      	str	r3, [r7, #28]
 8009f42:	e004      	b.n	8009f4e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	2200      	movs	r2, #0
 8009f48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f4e:	f000 fc71 	bl	800a834 <vPortExitCritical>

	return xReturn;
 8009f52:	69fb      	ldr	r3, [r7, #28]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3720      	adds	r7, #32
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	20006664 	.word	0x20006664
 8009f60:	20006678 	.word	0x20006678

08009f64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f64:	b480      	push	{r7}
 8009f66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f68:	4b03      	ldr	r3, [pc, #12]	; (8009f78 <vTaskMissedYield+0x14>)
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	601a      	str	r2, [r3, #0]
}
 8009f6e:	bf00      	nop
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr
 8009f78:	20006674 	.word	0x20006674

08009f7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f84:	f000 f852 	bl	800a02c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f88:	4b06      	ldr	r3, [pc, #24]	; (8009fa4 <prvIdleTask+0x28>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d9f9      	bls.n	8009f84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009f90:	4b05      	ldr	r3, [pc, #20]	; (8009fa8 <prvIdleTask+0x2c>)
 8009f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f96:	601a      	str	r2, [r3, #0]
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009fa0:	e7f0      	b.n	8009f84 <prvIdleTask+0x8>
 8009fa2:	bf00      	nop
 8009fa4:	20006564 	.word	0x20006564
 8009fa8:	e000ed04 	.word	0xe000ed04

08009fac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	607b      	str	r3, [r7, #4]
 8009fb6:	e00c      	b.n	8009fd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4413      	add	r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4a12      	ldr	r2, [pc, #72]	; (800a00c <prvInitialiseTaskLists+0x60>)
 8009fc4:	4413      	add	r3, r2
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fe f9e7 	bl	800839a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	607b      	str	r3, [r7, #4]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b06      	cmp	r3, #6
 8009fd6:	d9ef      	bls.n	8009fb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009fd8:	480d      	ldr	r0, [pc, #52]	; (800a010 <prvInitialiseTaskLists+0x64>)
 8009fda:	f7fe f9de 	bl	800839a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009fde:	480d      	ldr	r0, [pc, #52]	; (800a014 <prvInitialiseTaskLists+0x68>)
 8009fe0:	f7fe f9db 	bl	800839a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009fe4:	480c      	ldr	r0, [pc, #48]	; (800a018 <prvInitialiseTaskLists+0x6c>)
 8009fe6:	f7fe f9d8 	bl	800839a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009fea:	480c      	ldr	r0, [pc, #48]	; (800a01c <prvInitialiseTaskLists+0x70>)
 8009fec:	f7fe f9d5 	bl	800839a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ff0:	480b      	ldr	r0, [pc, #44]	; (800a020 <prvInitialiseTaskLists+0x74>)
 8009ff2:	f7fe f9d2 	bl	800839a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009ff6:	4b0b      	ldr	r3, [pc, #44]	; (800a024 <prvInitialiseTaskLists+0x78>)
 8009ff8:	4a05      	ldr	r2, [pc, #20]	; (800a010 <prvInitialiseTaskLists+0x64>)
 8009ffa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ffc:	4b0a      	ldr	r3, [pc, #40]	; (800a028 <prvInitialiseTaskLists+0x7c>)
 8009ffe:	4a05      	ldr	r2, [pc, #20]	; (800a014 <prvInitialiseTaskLists+0x68>)
 800a000:	601a      	str	r2, [r3, #0]
}
 800a002:	bf00      	nop
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	20006564 	.word	0x20006564
 800a010:	200065f0 	.word	0x200065f0
 800a014:	20006604 	.word	0x20006604
 800a018:	20006620 	.word	0x20006620
 800a01c:	20006634 	.word	0x20006634
 800a020:	2000664c 	.word	0x2000664c
 800a024:	20006618 	.word	0x20006618
 800a028:	2000661c 	.word	0x2000661c

0800a02c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a032:	e019      	b.n	800a068 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a034:	f000 fbca 	bl	800a7cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a038:	4b10      	ldr	r3, [pc, #64]	; (800a07c <prvCheckTasksWaitingTermination+0x50>)
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	3304      	adds	r3, #4
 800a044:	4618      	mov	r0, r3
 800a046:	f7fe fa32 	bl	80084ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a04a:	4b0d      	ldr	r3, [pc, #52]	; (800a080 <prvCheckTasksWaitingTermination+0x54>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3b01      	subs	r3, #1
 800a050:	4a0b      	ldr	r2, [pc, #44]	; (800a080 <prvCheckTasksWaitingTermination+0x54>)
 800a052:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a054:	4b0b      	ldr	r3, [pc, #44]	; (800a084 <prvCheckTasksWaitingTermination+0x58>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	3b01      	subs	r3, #1
 800a05a:	4a0a      	ldr	r2, [pc, #40]	; (800a084 <prvCheckTasksWaitingTermination+0x58>)
 800a05c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a05e:	f000 fbe9 	bl	800a834 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f810 	bl	800a088 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a068:	4b06      	ldr	r3, [pc, #24]	; (800a084 <prvCheckTasksWaitingTermination+0x58>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1e1      	bne.n	800a034 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a070:	bf00      	nop
 800a072:	bf00      	nop
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	20006634 	.word	0x20006634
 800a080:	20006660 	.word	0x20006660
 800a084:	20006648 	.word	0x20006648

0800a088 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a096:	2b00      	cmp	r3, #0
 800a098:	d108      	bne.n	800a0ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 fd8a 	bl	800abb8 <vPortFree>
				vPortFree( pxTCB );
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fd87 	bl	800abb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a0aa:	e01a      	b.n	800a0e2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d103      	bne.n	800a0be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 fd7e 	bl	800abb8 <vPortFree>
	}
 800a0bc:	e011      	b.n	800a0e2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d00c      	beq.n	800a0e2 <prvDeleteTCB+0x5a>
	__asm volatile
 800a0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0cc:	b672      	cpsid	i
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	b662      	cpsie	i
 800a0dc:	60fb      	str	r3, [r7, #12]
}
 800a0de:	bf00      	nop
 800a0e0:	e7fe      	b.n	800a0e0 <prvDeleteTCB+0x58>
	}
 800a0e2:	bf00      	nop
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
	...

0800a0ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0f2:	4b0c      	ldr	r3, [pc, #48]	; (800a124 <prvResetNextTaskUnblockTime+0x38>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d104      	bne.n	800a106 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a0fc:	4b0a      	ldr	r3, [pc, #40]	; (800a128 <prvResetNextTaskUnblockTime+0x3c>)
 800a0fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a102:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a104:	e008      	b.n	800a118 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a106:	4b07      	ldr	r3, [pc, #28]	; (800a124 <prvResetNextTaskUnblockTime+0x38>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	4a04      	ldr	r2, [pc, #16]	; (800a128 <prvResetNextTaskUnblockTime+0x3c>)
 800a116:	6013      	str	r3, [r2, #0]
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr
 800a124:	20006618 	.word	0x20006618
 800a128:	20006680 	.word	0x20006680

0800a12c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a132:	4b0b      	ldr	r3, [pc, #44]	; (800a160 <xTaskGetSchedulerState+0x34>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d102      	bne.n	800a140 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a13a:	2301      	movs	r3, #1
 800a13c:	607b      	str	r3, [r7, #4]
 800a13e:	e008      	b.n	800a152 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a140:	4b08      	ldr	r3, [pc, #32]	; (800a164 <xTaskGetSchedulerState+0x38>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d102      	bne.n	800a14e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a148:	2302      	movs	r3, #2
 800a14a:	607b      	str	r3, [r7, #4]
 800a14c:	e001      	b.n	800a152 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a14e:	2300      	movs	r3, #0
 800a150:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a152:	687b      	ldr	r3, [r7, #4]
	}
 800a154:	4618      	mov	r0, r3
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr
 800a160:	2000666c 	.word	0x2000666c
 800a164:	20006688 	.word	0x20006688

0800a168 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a174:	2300      	movs	r3, #0
 800a176:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d069      	beq.n	800a252 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a182:	4b36      	ldr	r3, [pc, #216]	; (800a25c <xTaskPriorityInherit+0xf4>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a188:	429a      	cmp	r2, r3
 800a18a:	d259      	bcs.n	800a240 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	2b00      	cmp	r3, #0
 800a192:	db06      	blt.n	800a1a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a194:	4b31      	ldr	r3, [pc, #196]	; (800a25c <xTaskPriorityInherit+0xf4>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19a:	f1c3 0207 	rsb	r2, r3, #7
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	6959      	ldr	r1, [r3, #20]
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4413      	add	r3, r2
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4a2b      	ldr	r2, [pc, #172]	; (800a260 <xTaskPriorityInherit+0xf8>)
 800a1b4:	4413      	add	r3, r2
 800a1b6:	4299      	cmp	r1, r3
 800a1b8:	d13a      	bne.n	800a230 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	3304      	adds	r3, #4
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7fe f975 	bl	80084ae <uxListRemove>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d115      	bne.n	800a1f6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ce:	4924      	ldr	r1, [pc, #144]	; (800a260 <xTaskPriorityInherit+0xf8>)
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4413      	add	r3, r2
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	440b      	add	r3, r1
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10a      	bne.n	800a1f6 <xTaskPriorityInherit+0x8e>
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ea:	43da      	mvns	r2, r3
 800a1ec:	4b1d      	ldr	r3, [pc, #116]	; (800a264 <xTaskPriorityInherit+0xfc>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	4a1c      	ldr	r2, [pc, #112]	; (800a264 <xTaskPriorityInherit+0xfc>)
 800a1f4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a1f6:	4b19      	ldr	r3, [pc, #100]	; (800a25c <xTaskPriorityInherit+0xf4>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a204:	2201      	movs	r2, #1
 800a206:	409a      	lsls	r2, r3
 800a208:	4b16      	ldr	r3, [pc, #88]	; (800a264 <xTaskPriorityInherit+0xfc>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	4a15      	ldr	r2, [pc, #84]	; (800a264 <xTaskPriorityInherit+0xfc>)
 800a210:	6013      	str	r3, [r2, #0]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a216:	4613      	mov	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	4a10      	ldr	r2, [pc, #64]	; (800a260 <xTaskPriorityInherit+0xf8>)
 800a220:	441a      	add	r2, r3
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	3304      	adds	r3, #4
 800a226:	4619      	mov	r1, r3
 800a228:	4610      	mov	r0, r2
 800a22a:	f7fe f8e3 	bl	80083f4 <vListInsertEnd>
 800a22e:	e004      	b.n	800a23a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a230:	4b0a      	ldr	r3, [pc, #40]	; (800a25c <xTaskPriorityInherit+0xf4>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a23a:	2301      	movs	r3, #1
 800a23c:	60fb      	str	r3, [r7, #12]
 800a23e:	e008      	b.n	800a252 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a244:	4b05      	ldr	r3, [pc, #20]	; (800a25c <xTaskPriorityInherit+0xf4>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d201      	bcs.n	800a252 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a24e:	2301      	movs	r3, #1
 800a250:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a252:	68fb      	ldr	r3, [r7, #12]
	}
 800a254:	4618      	mov	r0, r3
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	20006560 	.word	0x20006560
 800a260:	20006564 	.word	0x20006564
 800a264:	20006668 	.word	0x20006668

0800a268 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a274:	2300      	movs	r3, #0
 800a276:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d072      	beq.n	800a364 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a27e:	4b3c      	ldr	r3, [pc, #240]	; (800a370 <xTaskPriorityDisinherit+0x108>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	693a      	ldr	r2, [r7, #16]
 800a284:	429a      	cmp	r2, r3
 800a286:	d00c      	beq.n	800a2a2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28c:	b672      	cpsid	i
 800a28e:	f383 8811 	msr	BASEPRI, r3
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	b662      	cpsie	i
 800a29c:	60fb      	str	r3, [r7, #12]
}
 800a29e:	bf00      	nop
 800a2a0:	e7fe      	b.n	800a2a0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d10c      	bne.n	800a2c4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ae:	b672      	cpsid	i
 800a2b0:	f383 8811 	msr	BASEPRI, r3
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	b662      	cpsie	i
 800a2be:	60bb      	str	r3, [r7, #8]
}
 800a2c0:	bf00      	nop
 800a2c2:	e7fe      	b.n	800a2c2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2c8:	1e5a      	subs	r2, r3, #1
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d044      	beq.n	800a364 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d140      	bne.n	800a364 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	3304      	adds	r3, #4
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7fe f8e1 	bl	80084ae <uxListRemove>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d115      	bne.n	800a31e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f6:	491f      	ldr	r1, [pc, #124]	; (800a374 <xTaskPriorityDisinherit+0x10c>)
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4413      	add	r3, r2
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	440b      	add	r3, r1
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10a      	bne.n	800a31e <xTaskPriorityDisinherit+0xb6>
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30c:	2201      	movs	r2, #1
 800a30e:	fa02 f303 	lsl.w	r3, r2, r3
 800a312:	43da      	mvns	r2, r3
 800a314:	4b18      	ldr	r3, [pc, #96]	; (800a378 <xTaskPriorityDisinherit+0x110>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4013      	ands	r3, r2
 800a31a:	4a17      	ldr	r2, [pc, #92]	; (800a378 <xTaskPriorityDisinherit+0x110>)
 800a31c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32a:	f1c3 0207 	rsb	r2, r3, #7
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a336:	2201      	movs	r2, #1
 800a338:	409a      	lsls	r2, r3
 800a33a:	4b0f      	ldr	r3, [pc, #60]	; (800a378 <xTaskPriorityDisinherit+0x110>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4313      	orrs	r3, r2
 800a340:	4a0d      	ldr	r2, [pc, #52]	; (800a378 <xTaskPriorityDisinherit+0x110>)
 800a342:	6013      	str	r3, [r2, #0]
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a348:	4613      	mov	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4413      	add	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4a08      	ldr	r2, [pc, #32]	; (800a374 <xTaskPriorityDisinherit+0x10c>)
 800a352:	441a      	add	r2, r3
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	3304      	adds	r3, #4
 800a358:	4619      	mov	r1, r3
 800a35a:	4610      	mov	r0, r2
 800a35c:	f7fe f84a 	bl	80083f4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a360:	2301      	movs	r3, #1
 800a362:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a364:	697b      	ldr	r3, [r7, #20]
	}
 800a366:	4618      	mov	r0, r3
 800a368:	3718      	adds	r7, #24
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	20006560 	.word	0x20006560
 800a374:	20006564 	.word	0x20006564
 800a378:	20006668 	.word	0x20006668

0800a37c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b088      	sub	sp, #32
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a38a:	2301      	movs	r3, #1
 800a38c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2b00      	cmp	r3, #0
 800a392:	f000 8087 	beq.w	800a4a4 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d10c      	bne.n	800a3b8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a2:	b672      	cpsid	i
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	b662      	cpsie	i
 800a3b2:	60fb      	str	r3, [r7, #12]
}
 800a3b4:	bf00      	nop
 800a3b6:	e7fe      	b.n	800a3b6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3bc:	683a      	ldr	r2, [r7, #0]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d902      	bls.n	800a3c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	61fb      	str	r3, [r7, #28]
 800a3c6:	e002      	b.n	800a3ce <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3cc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d2:	69fa      	ldr	r2, [r7, #28]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d065      	beq.n	800a4a4 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3dc:	697a      	ldr	r2, [r7, #20]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d160      	bne.n	800a4a4 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a3e2:	4b32      	ldr	r3, [pc, #200]	; (800a4ac <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	69ba      	ldr	r2, [r7, #24]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d10c      	bne.n	800a406 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800a3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f0:	b672      	cpsid	i
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	b662      	cpsie	i
 800a400:	60bb      	str	r3, [r7, #8]
}
 800a402:	bf00      	nop
 800a404:	e7fe      	b.n	800a404 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	69fa      	ldr	r2, [r7, #28]
 800a410:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	699b      	ldr	r3, [r3, #24]
 800a416:	2b00      	cmp	r3, #0
 800a418:	db04      	blt.n	800a424 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	f1c3 0207 	rsb	r2, r3, #7
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	6959      	ldr	r1, [r3, #20]
 800a428:	693a      	ldr	r2, [r7, #16]
 800a42a:	4613      	mov	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4413      	add	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	4a1f      	ldr	r2, [pc, #124]	; (800a4b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a434:	4413      	add	r3, r2
 800a436:	4299      	cmp	r1, r3
 800a438:	d134      	bne.n	800a4a4 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	3304      	adds	r3, #4
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fe f835 	bl	80084ae <uxListRemove>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d115      	bne.n	800a476 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a44e:	4918      	ldr	r1, [pc, #96]	; (800a4b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a450:	4613      	mov	r3, r2
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	4413      	add	r3, r2
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	440b      	add	r3, r1
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10a      	bne.n	800a476 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a464:	2201      	movs	r2, #1
 800a466:	fa02 f303 	lsl.w	r3, r2, r3
 800a46a:	43da      	mvns	r2, r3
 800a46c:	4b11      	ldr	r3, [pc, #68]	; (800a4b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4013      	ands	r3, r2
 800a472:	4a10      	ldr	r2, [pc, #64]	; (800a4b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a474:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47a:	2201      	movs	r2, #1
 800a47c:	409a      	lsls	r2, r3
 800a47e:	4b0d      	ldr	r3, [pc, #52]	; (800a4b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4313      	orrs	r3, r2
 800a484:	4a0b      	ldr	r2, [pc, #44]	; (800a4b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a486:	6013      	str	r3, [r2, #0]
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a48c:	4613      	mov	r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4413      	add	r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4a06      	ldr	r2, [pc, #24]	; (800a4b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a496:	441a      	add	r2, r3
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	3304      	adds	r3, #4
 800a49c:	4619      	mov	r1, r3
 800a49e:	4610      	mov	r0, r2
 800a4a0:	f7fd ffa8 	bl	80083f4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4a4:	bf00      	nop
 800a4a6:	3720      	adds	r7, #32
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	20006560 	.word	0x20006560
 800a4b0:	20006564 	.word	0x20006564
 800a4b4:	20006668 	.word	0x20006668

0800a4b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a4b8:	b480      	push	{r7}
 800a4ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a4bc:	4b07      	ldr	r3, [pc, #28]	; (800a4dc <pvTaskIncrementMutexHeldCount+0x24>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d004      	beq.n	800a4ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a4c4:	4b05      	ldr	r3, [pc, #20]	; (800a4dc <pvTaskIncrementMutexHeldCount+0x24>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4ca:	3201      	adds	r2, #1
 800a4cc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a4ce:	4b03      	ldr	r3, [pc, #12]	; (800a4dc <pvTaskIncrementMutexHeldCount+0x24>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
	}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	20006560 	.word	0x20006560

0800a4e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a4ea:	4b29      	ldr	r3, [pc, #164]	; (800a590 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4f0:	4b28      	ldr	r3, [pc, #160]	; (800a594 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fd ffd9 	bl	80084ae <uxListRemove>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10b      	bne.n	800a51a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a502:	4b24      	ldr	r3, [pc, #144]	; (800a594 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a508:	2201      	movs	r2, #1
 800a50a:	fa02 f303 	lsl.w	r3, r2, r3
 800a50e:	43da      	mvns	r2, r3
 800a510:	4b21      	ldr	r3, [pc, #132]	; (800a598 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4013      	ands	r3, r2
 800a516:	4a20      	ldr	r2, [pc, #128]	; (800a598 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a518:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a520:	d10a      	bne.n	800a538 <prvAddCurrentTaskToDelayedList+0x58>
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d007      	beq.n	800a538 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a528:	4b1a      	ldr	r3, [pc, #104]	; (800a594 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	3304      	adds	r3, #4
 800a52e:	4619      	mov	r1, r3
 800a530:	481a      	ldr	r0, [pc, #104]	; (800a59c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a532:	f7fd ff5f 	bl	80083f4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a536:	e026      	b.n	800a586 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4413      	add	r3, r2
 800a53e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a540:	4b14      	ldr	r3, [pc, #80]	; (800a594 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68ba      	ldr	r2, [r7, #8]
 800a546:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d209      	bcs.n	800a564 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a550:	4b13      	ldr	r3, [pc, #76]	; (800a5a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	4b0f      	ldr	r3, [pc, #60]	; (800a594 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3304      	adds	r3, #4
 800a55a:	4619      	mov	r1, r3
 800a55c:	4610      	mov	r0, r2
 800a55e:	f7fd ff6d 	bl	800843c <vListInsert>
}
 800a562:	e010      	b.n	800a586 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a564:	4b0f      	ldr	r3, [pc, #60]	; (800a5a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	4b0a      	ldr	r3, [pc, #40]	; (800a594 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	3304      	adds	r3, #4
 800a56e:	4619      	mov	r1, r3
 800a570:	4610      	mov	r0, r2
 800a572:	f7fd ff63 	bl	800843c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a576:	4b0c      	ldr	r3, [pc, #48]	; (800a5a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d202      	bcs.n	800a586 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a580:	4a09      	ldr	r2, [pc, #36]	; (800a5a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	6013      	str	r3, [r2, #0]
}
 800a586:	bf00      	nop
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	20006664 	.word	0x20006664
 800a594:	20006560 	.word	0x20006560
 800a598:	20006668 	.word	0x20006668
 800a59c:	2000664c 	.word	0x2000664c
 800a5a0:	2000661c 	.word	0x2000661c
 800a5a4:	20006618 	.word	0x20006618
 800a5a8:	20006680 	.word	0x20006680

0800a5ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	3b04      	subs	r3, #4
 800a5bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	3b04      	subs	r3, #4
 800a5ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	f023 0201 	bic.w	r2, r3, #1
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	3b04      	subs	r3, #4
 800a5da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5dc:	4a0c      	ldr	r2, [pc, #48]	; (800a610 <pxPortInitialiseStack+0x64>)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	3b14      	subs	r3, #20
 800a5e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	3b04      	subs	r3, #4
 800a5f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f06f 0202 	mvn.w	r2, #2
 800a5fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	3b20      	subs	r3, #32
 800a600:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a602:	68fb      	ldr	r3, [r7, #12]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3714      	adds	r7, #20
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr
 800a610:	0800a615 	.word	0x0800a615

0800a614 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a61a:	2300      	movs	r3, #0
 800a61c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a61e:	4b14      	ldr	r3, [pc, #80]	; (800a670 <prvTaskExitError+0x5c>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a626:	d00c      	beq.n	800a642 <prvTaskExitError+0x2e>
	__asm volatile
 800a628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62c:	b672      	cpsid	i
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	b662      	cpsie	i
 800a63c:	60fb      	str	r3, [r7, #12]
}
 800a63e:	bf00      	nop
 800a640:	e7fe      	b.n	800a640 <prvTaskExitError+0x2c>
	__asm volatile
 800a642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a646:	b672      	cpsid	i
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	b662      	cpsie	i
 800a656:	60bb      	str	r3, [r7, #8]
}
 800a658:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a65a:	bf00      	nop
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d0fc      	beq.n	800a65c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a662:	bf00      	nop
 800a664:	bf00      	nop
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr
 800a670:	20000020 	.word	0x20000020
	...

0800a680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a680:	4b07      	ldr	r3, [pc, #28]	; (800a6a0 <pxCurrentTCBConst2>)
 800a682:	6819      	ldr	r1, [r3, #0]
 800a684:	6808      	ldr	r0, [r1, #0]
 800a686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68a:	f380 8809 	msr	PSP, r0
 800a68e:	f3bf 8f6f 	isb	sy
 800a692:	f04f 0000 	mov.w	r0, #0
 800a696:	f380 8811 	msr	BASEPRI, r0
 800a69a:	4770      	bx	lr
 800a69c:	f3af 8000 	nop.w

0800a6a0 <pxCurrentTCBConst2>:
 800a6a0:	20006560 	.word	0x20006560
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a6a4:	bf00      	nop
 800a6a6:	bf00      	nop

0800a6a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a6a8:	4808      	ldr	r0, [pc, #32]	; (800a6cc <prvPortStartFirstTask+0x24>)
 800a6aa:	6800      	ldr	r0, [r0, #0]
 800a6ac:	6800      	ldr	r0, [r0, #0]
 800a6ae:	f380 8808 	msr	MSP, r0
 800a6b2:	f04f 0000 	mov.w	r0, #0
 800a6b6:	f380 8814 	msr	CONTROL, r0
 800a6ba:	b662      	cpsie	i
 800a6bc:	b661      	cpsie	f
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	df00      	svc	0
 800a6c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a6ca:	bf00      	nop
 800a6cc:	e000ed08 	.word	0xe000ed08

0800a6d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a6d6:	4b37      	ldr	r3, [pc, #220]	; (800a7b4 <xPortStartScheduler+0xe4>)
 800a6d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	22ff      	movs	r2, #255	; 0xff
 800a6e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6f0:	78fb      	ldrb	r3, [r7, #3]
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a6f8:	b2da      	uxtb	r2, r3
 800a6fa:	4b2f      	ldr	r3, [pc, #188]	; (800a7b8 <xPortStartScheduler+0xe8>)
 800a6fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6fe:	4b2f      	ldr	r3, [pc, #188]	; (800a7bc <xPortStartScheduler+0xec>)
 800a700:	2207      	movs	r2, #7
 800a702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a704:	e009      	b.n	800a71a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a706:	4b2d      	ldr	r3, [pc, #180]	; (800a7bc <xPortStartScheduler+0xec>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	3b01      	subs	r3, #1
 800a70c:	4a2b      	ldr	r2, [pc, #172]	; (800a7bc <xPortStartScheduler+0xec>)
 800a70e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a710:	78fb      	ldrb	r3, [r7, #3]
 800a712:	b2db      	uxtb	r3, r3
 800a714:	005b      	lsls	r3, r3, #1
 800a716:	b2db      	uxtb	r3, r3
 800a718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a71a:	78fb      	ldrb	r3, [r7, #3]
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a722:	2b80      	cmp	r3, #128	; 0x80
 800a724:	d0ef      	beq.n	800a706 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a726:	4b25      	ldr	r3, [pc, #148]	; (800a7bc <xPortStartScheduler+0xec>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f1c3 0307 	rsb	r3, r3, #7
 800a72e:	2b04      	cmp	r3, #4
 800a730:	d00c      	beq.n	800a74c <xPortStartScheduler+0x7c>
	__asm volatile
 800a732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a736:	b672      	cpsid	i
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	b662      	cpsie	i
 800a746:	60bb      	str	r3, [r7, #8]
}
 800a748:	bf00      	nop
 800a74a:	e7fe      	b.n	800a74a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a74c:	4b1b      	ldr	r3, [pc, #108]	; (800a7bc <xPortStartScheduler+0xec>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	021b      	lsls	r3, r3, #8
 800a752:	4a1a      	ldr	r2, [pc, #104]	; (800a7bc <xPortStartScheduler+0xec>)
 800a754:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a756:	4b19      	ldr	r3, [pc, #100]	; (800a7bc <xPortStartScheduler+0xec>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a75e:	4a17      	ldr	r2, [pc, #92]	; (800a7bc <xPortStartScheduler+0xec>)
 800a760:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	b2da      	uxtb	r2, r3
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a76a:	4b15      	ldr	r3, [pc, #84]	; (800a7c0 <xPortStartScheduler+0xf0>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a14      	ldr	r2, [pc, #80]	; (800a7c0 <xPortStartScheduler+0xf0>)
 800a770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a774:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a776:	4b12      	ldr	r3, [pc, #72]	; (800a7c0 <xPortStartScheduler+0xf0>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a11      	ldr	r2, [pc, #68]	; (800a7c0 <xPortStartScheduler+0xf0>)
 800a77c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a780:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a782:	f000 f8dd 	bl	800a940 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a786:	4b0f      	ldr	r3, [pc, #60]	; (800a7c4 <xPortStartScheduler+0xf4>)
 800a788:	2200      	movs	r2, #0
 800a78a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a78c:	f000 f8fc 	bl	800a988 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a790:	4b0d      	ldr	r3, [pc, #52]	; (800a7c8 <xPortStartScheduler+0xf8>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a0c      	ldr	r2, [pc, #48]	; (800a7c8 <xPortStartScheduler+0xf8>)
 800a796:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a79a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a79c:	f7ff ff84 	bl	800a6a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a7a0:	f7ff fa7c 	bl	8009c9c <vTaskSwitchContext>
	prvTaskExitError();
 800a7a4:	f7ff ff36 	bl	800a614 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	e000e400 	.word	0xe000e400
 800a7b8:	2000668c 	.word	0x2000668c
 800a7bc:	20006690 	.word	0x20006690
 800a7c0:	e000ed20 	.word	0xe000ed20
 800a7c4:	20000020 	.word	0x20000020
 800a7c8:	e000ef34 	.word	0xe000ef34

0800a7cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
	__asm volatile
 800a7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d6:	b672      	cpsid	i
 800a7d8:	f383 8811 	msr	BASEPRI, r3
 800a7dc:	f3bf 8f6f 	isb	sy
 800a7e0:	f3bf 8f4f 	dsb	sy
 800a7e4:	b662      	cpsie	i
 800a7e6:	607b      	str	r3, [r7, #4]
}
 800a7e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7ea:	4b10      	ldr	r3, [pc, #64]	; (800a82c <vPortEnterCritical+0x60>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	4a0e      	ldr	r2, [pc, #56]	; (800a82c <vPortEnterCritical+0x60>)
 800a7f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a7f4:	4b0d      	ldr	r3, [pc, #52]	; (800a82c <vPortEnterCritical+0x60>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d111      	bne.n	800a820 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a7fc:	4b0c      	ldr	r3, [pc, #48]	; (800a830 <vPortEnterCritical+0x64>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	b2db      	uxtb	r3, r3
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00c      	beq.n	800a820 <vPortEnterCritical+0x54>
	__asm volatile
 800a806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80a:	b672      	cpsid	i
 800a80c:	f383 8811 	msr	BASEPRI, r3
 800a810:	f3bf 8f6f 	isb	sy
 800a814:	f3bf 8f4f 	dsb	sy
 800a818:	b662      	cpsie	i
 800a81a:	603b      	str	r3, [r7, #0]
}
 800a81c:	bf00      	nop
 800a81e:	e7fe      	b.n	800a81e <vPortEnterCritical+0x52>
	}
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr
 800a82c:	20000020 	.word	0x20000020
 800a830:	e000ed04 	.word	0xe000ed04

0800a834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a83a:	4b13      	ldr	r3, [pc, #76]	; (800a888 <vPortExitCritical+0x54>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10c      	bne.n	800a85c <vPortExitCritical+0x28>
	__asm volatile
 800a842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a846:	b672      	cpsid	i
 800a848:	f383 8811 	msr	BASEPRI, r3
 800a84c:	f3bf 8f6f 	isb	sy
 800a850:	f3bf 8f4f 	dsb	sy
 800a854:	b662      	cpsie	i
 800a856:	607b      	str	r3, [r7, #4]
}
 800a858:	bf00      	nop
 800a85a:	e7fe      	b.n	800a85a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a85c:	4b0a      	ldr	r3, [pc, #40]	; (800a888 <vPortExitCritical+0x54>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	3b01      	subs	r3, #1
 800a862:	4a09      	ldr	r2, [pc, #36]	; (800a888 <vPortExitCritical+0x54>)
 800a864:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a866:	4b08      	ldr	r3, [pc, #32]	; (800a888 <vPortExitCritical+0x54>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d105      	bne.n	800a87a <vPortExitCritical+0x46>
 800a86e:	2300      	movs	r3, #0
 800a870:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	f383 8811 	msr	BASEPRI, r3
}
 800a878:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a87a:	bf00      	nop
 800a87c:	370c      	adds	r7, #12
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop
 800a888:	20000020 	.word	0x20000020
 800a88c:	00000000 	.word	0x00000000

0800a890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a890:	f3ef 8009 	mrs	r0, PSP
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	4b15      	ldr	r3, [pc, #84]	; (800a8f0 <pxCurrentTCBConst>)
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	f01e 0f10 	tst.w	lr, #16
 800a8a0:	bf08      	it	eq
 800a8a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8aa:	6010      	str	r0, [r2, #0]
 800a8ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a8b4:	b672      	cpsid	i
 800a8b6:	f380 8811 	msr	BASEPRI, r0
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	b662      	cpsie	i
 800a8c4:	f7ff f9ea 	bl	8009c9c <vTaskSwitchContext>
 800a8c8:	f04f 0000 	mov.w	r0, #0
 800a8cc:	f380 8811 	msr	BASEPRI, r0
 800a8d0:	bc09      	pop	{r0, r3}
 800a8d2:	6819      	ldr	r1, [r3, #0]
 800a8d4:	6808      	ldr	r0, [r1, #0]
 800a8d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8da:	f01e 0f10 	tst.w	lr, #16
 800a8de:	bf08      	it	eq
 800a8e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8e4:	f380 8809 	msr	PSP, r0
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop

0800a8f0 <pxCurrentTCBConst>:
 800a8f0:	20006560 	.word	0x20006560
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a8f4:	bf00      	nop
 800a8f6:	bf00      	nop

0800a8f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a902:	b672      	cpsid	i
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	b662      	cpsie	i
 800a912:	607b      	str	r3, [r7, #4]
}
 800a914:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a916:	f7ff f907 	bl	8009b28 <xTaskIncrementTick>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d003      	beq.n	800a928 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a920:	4b06      	ldr	r3, [pc, #24]	; (800a93c <SysTick_Handler+0x44>)
 800a922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a926:	601a      	str	r2, [r3, #0]
 800a928:	2300      	movs	r3, #0
 800a92a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	f383 8811 	msr	BASEPRI, r3
}
 800a932:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a934:	bf00      	nop
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	e000ed04 	.word	0xe000ed04

0800a940 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a940:	b480      	push	{r7}
 800a942:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a944:	4b0b      	ldr	r3, [pc, #44]	; (800a974 <vPortSetupTimerInterrupt+0x34>)
 800a946:	2200      	movs	r2, #0
 800a948:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a94a:	4b0b      	ldr	r3, [pc, #44]	; (800a978 <vPortSetupTimerInterrupt+0x38>)
 800a94c:	2200      	movs	r2, #0
 800a94e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a950:	4b0a      	ldr	r3, [pc, #40]	; (800a97c <vPortSetupTimerInterrupt+0x3c>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a0a      	ldr	r2, [pc, #40]	; (800a980 <vPortSetupTimerInterrupt+0x40>)
 800a956:	fba2 2303 	umull	r2, r3, r2, r3
 800a95a:	099b      	lsrs	r3, r3, #6
 800a95c:	4a09      	ldr	r2, [pc, #36]	; (800a984 <vPortSetupTimerInterrupt+0x44>)
 800a95e:	3b01      	subs	r3, #1
 800a960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a962:	4b04      	ldr	r3, [pc, #16]	; (800a974 <vPortSetupTimerInterrupt+0x34>)
 800a964:	2207      	movs	r2, #7
 800a966:	601a      	str	r2, [r3, #0]
}
 800a968:	bf00      	nop
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	e000e010 	.word	0xe000e010
 800a978:	e000e018 	.word	0xe000e018
 800a97c:	20000000 	.word	0x20000000
 800a980:	10624dd3 	.word	0x10624dd3
 800a984:	e000e014 	.word	0xe000e014

0800a988 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a988:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a998 <vPortEnableVFP+0x10>
 800a98c:	6801      	ldr	r1, [r0, #0]
 800a98e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a992:	6001      	str	r1, [r0, #0]
 800a994:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a996:	bf00      	nop
 800a998:	e000ed88 	.word	0xe000ed88

0800a99c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a9a2:	f3ef 8305 	mrs	r3, IPSR
 800a9a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2b0f      	cmp	r3, #15
 800a9ac:	d916      	bls.n	800a9dc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9ae:	4a19      	ldr	r2, [pc, #100]	; (800aa14 <vPortValidateInterruptPriority+0x78>)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9b8:	4b17      	ldr	r3, [pc, #92]	; (800aa18 <vPortValidateInterruptPriority+0x7c>)
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	7afa      	ldrb	r2, [r7, #11]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d20c      	bcs.n	800a9dc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c6:	b672      	cpsid	i
 800a9c8:	f383 8811 	msr	BASEPRI, r3
 800a9cc:	f3bf 8f6f 	isb	sy
 800a9d0:	f3bf 8f4f 	dsb	sy
 800a9d4:	b662      	cpsie	i
 800a9d6:	607b      	str	r3, [r7, #4]
}
 800a9d8:	bf00      	nop
 800a9da:	e7fe      	b.n	800a9da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9dc:	4b0f      	ldr	r3, [pc, #60]	; (800aa1c <vPortValidateInterruptPriority+0x80>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a9e4:	4b0e      	ldr	r3, [pc, #56]	; (800aa20 <vPortValidateInterruptPriority+0x84>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d90c      	bls.n	800aa06 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f0:	b672      	cpsid	i
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	b662      	cpsie	i
 800aa00:	603b      	str	r3, [r7, #0]
}
 800aa02:	bf00      	nop
 800aa04:	e7fe      	b.n	800aa04 <vPortValidateInterruptPriority+0x68>
	}
 800aa06:	bf00      	nop
 800aa08:	3714      	adds	r7, #20
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	e000e3f0 	.word	0xe000e3f0
 800aa18:	2000668c 	.word	0x2000668c
 800aa1c:	e000ed0c 	.word	0xe000ed0c
 800aa20:	20006690 	.word	0x20006690

0800aa24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b08a      	sub	sp, #40	; 0x28
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa30:	f7fe ffac 	bl	800998c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aa34:	4b5b      	ldr	r3, [pc, #364]	; (800aba4 <pvPortMalloc+0x180>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d101      	bne.n	800aa40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa3c:	f000 f91a 	bl	800ac74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa40:	4b59      	ldr	r3, [pc, #356]	; (800aba8 <pvPortMalloc+0x184>)
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4013      	ands	r3, r2
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f040 8092 	bne.w	800ab72 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d01f      	beq.n	800aa94 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800aa54:	2208      	movs	r2, #8
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4413      	add	r3, r2
 800aa5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f003 0307 	and.w	r3, r3, #7
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d016      	beq.n	800aa94 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f023 0307 	bic.w	r3, r3, #7
 800aa6c:	3308      	adds	r3, #8
 800aa6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f003 0307 	and.w	r3, r3, #7
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00c      	beq.n	800aa94 <pvPortMalloc+0x70>
	__asm volatile
 800aa7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7e:	b672      	cpsid	i
 800aa80:	f383 8811 	msr	BASEPRI, r3
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	b662      	cpsie	i
 800aa8e:	617b      	str	r3, [r7, #20]
}
 800aa90:	bf00      	nop
 800aa92:	e7fe      	b.n	800aa92 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d06b      	beq.n	800ab72 <pvPortMalloc+0x14e>
 800aa9a:	4b44      	ldr	r3, [pc, #272]	; (800abac <pvPortMalloc+0x188>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d866      	bhi.n	800ab72 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aaa4:	4b42      	ldr	r3, [pc, #264]	; (800abb0 <pvPortMalloc+0x18c>)
 800aaa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aaa8:	4b41      	ldr	r3, [pc, #260]	; (800abb0 <pvPortMalloc+0x18c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaae:	e004      	b.n	800aaba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d903      	bls.n	800aacc <pvPortMalloc+0xa8>
 800aac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d1f1      	bne.n	800aab0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aacc:	4b35      	ldr	r3, [pc, #212]	; (800aba4 <pvPortMalloc+0x180>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d04d      	beq.n	800ab72 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aad6:	6a3b      	ldr	r3, [r7, #32]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2208      	movs	r2, #8
 800aadc:	4413      	add	r3, r2
 800aade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	6a3b      	ldr	r3, [r7, #32]
 800aae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaea:	685a      	ldr	r2, [r3, #4]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	1ad2      	subs	r2, r2, r3
 800aaf0:	2308      	movs	r3, #8
 800aaf2:	005b      	lsls	r3, r3, #1
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d921      	bls.n	800ab3c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aaf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4413      	add	r3, r2
 800aafe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	f003 0307 	and.w	r3, r3, #7
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00c      	beq.n	800ab24 <pvPortMalloc+0x100>
	__asm volatile
 800ab0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0e:	b672      	cpsid	i
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	b662      	cpsie	i
 800ab1e:	613b      	str	r3, [r7, #16]
}
 800ab20:	bf00      	nop
 800ab22:	e7fe      	b.n	800ab22 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab26:	685a      	ldr	r2, [r3, #4]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	1ad2      	subs	r2, r2, r3
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab36:	69b8      	ldr	r0, [r7, #24]
 800ab38:	f000 f8fe 	bl	800ad38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab3c:	4b1b      	ldr	r3, [pc, #108]	; (800abac <pvPortMalloc+0x188>)
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	1ad3      	subs	r3, r2, r3
 800ab46:	4a19      	ldr	r2, [pc, #100]	; (800abac <pvPortMalloc+0x188>)
 800ab48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab4a:	4b18      	ldr	r3, [pc, #96]	; (800abac <pvPortMalloc+0x188>)
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	4b19      	ldr	r3, [pc, #100]	; (800abb4 <pvPortMalloc+0x190>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d203      	bcs.n	800ab5e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab56:	4b15      	ldr	r3, [pc, #84]	; (800abac <pvPortMalloc+0x188>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a16      	ldr	r2, [pc, #88]	; (800abb4 <pvPortMalloc+0x190>)
 800ab5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab60:	685a      	ldr	r2, [r3, #4]
 800ab62:	4b11      	ldr	r3, [pc, #68]	; (800aba8 <pvPortMalloc+0x184>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	431a      	orrs	r2, r3
 800ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6e:	2200      	movs	r2, #0
 800ab70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab72:	f7fe ff19 	bl	80099a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab76:	69fb      	ldr	r3, [r7, #28]
 800ab78:	f003 0307 	and.w	r3, r3, #7
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00c      	beq.n	800ab9a <pvPortMalloc+0x176>
	__asm volatile
 800ab80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab84:	b672      	cpsid	i
 800ab86:	f383 8811 	msr	BASEPRI, r3
 800ab8a:	f3bf 8f6f 	isb	sy
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	b662      	cpsie	i
 800ab94:	60fb      	str	r3, [r7, #12]
}
 800ab96:	bf00      	nop
 800ab98:	e7fe      	b.n	800ab98 <pvPortMalloc+0x174>
	return pvReturn;
 800ab9a:	69fb      	ldr	r3, [r7, #28]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3728      	adds	r7, #40	; 0x28
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	2000a29c 	.word	0x2000a29c
 800aba8:	2000a2a8 	.word	0x2000a2a8
 800abac:	2000a2a0 	.word	0x2000a2a0
 800abb0:	2000a294 	.word	0x2000a294
 800abb4:	2000a2a4 	.word	0x2000a2a4

0800abb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d04c      	beq.n	800ac64 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800abca:	2308      	movs	r3, #8
 800abcc:	425b      	negs	r3, r3
 800abce:	697a      	ldr	r2, [r7, #20]
 800abd0:	4413      	add	r3, r2
 800abd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	685a      	ldr	r2, [r3, #4]
 800abdc:	4b23      	ldr	r3, [pc, #140]	; (800ac6c <vPortFree+0xb4>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4013      	ands	r3, r2
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d10c      	bne.n	800ac00 <vPortFree+0x48>
	__asm volatile
 800abe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abea:	b672      	cpsid	i
 800abec:	f383 8811 	msr	BASEPRI, r3
 800abf0:	f3bf 8f6f 	isb	sy
 800abf4:	f3bf 8f4f 	dsb	sy
 800abf8:	b662      	cpsie	i
 800abfa:	60fb      	str	r3, [r7, #12]
}
 800abfc:	bf00      	nop
 800abfe:	e7fe      	b.n	800abfe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d00c      	beq.n	800ac22 <vPortFree+0x6a>
	__asm volatile
 800ac08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0c:	b672      	cpsid	i
 800ac0e:	f383 8811 	msr	BASEPRI, r3
 800ac12:	f3bf 8f6f 	isb	sy
 800ac16:	f3bf 8f4f 	dsb	sy
 800ac1a:	b662      	cpsie	i
 800ac1c:	60bb      	str	r3, [r7, #8]
}
 800ac1e:	bf00      	nop
 800ac20:	e7fe      	b.n	800ac20 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	685a      	ldr	r2, [r3, #4]
 800ac26:	4b11      	ldr	r3, [pc, #68]	; (800ac6c <vPortFree+0xb4>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d019      	beq.n	800ac64 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d115      	bne.n	800ac64 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	4b0b      	ldr	r3, [pc, #44]	; (800ac6c <vPortFree+0xb4>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	43db      	mvns	r3, r3
 800ac42:	401a      	ands	r2, r3
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac48:	f7fe fea0 	bl	800998c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	4b07      	ldr	r3, [pc, #28]	; (800ac70 <vPortFree+0xb8>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4413      	add	r3, r2
 800ac56:	4a06      	ldr	r2, [pc, #24]	; (800ac70 <vPortFree+0xb8>)
 800ac58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac5a:	6938      	ldr	r0, [r7, #16]
 800ac5c:	f000 f86c 	bl	800ad38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ac60:	f7fe fea2 	bl	80099a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac64:	bf00      	nop
 800ac66:	3718      	adds	r7, #24
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	2000a2a8 	.word	0x2000a2a8
 800ac70:	2000a2a0 	.word	0x2000a2a0

0800ac74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ac7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac80:	4b27      	ldr	r3, [pc, #156]	; (800ad20 <prvHeapInit+0xac>)
 800ac82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f003 0307 	and.w	r3, r3, #7
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00c      	beq.n	800aca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	3307      	adds	r3, #7
 800ac92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f023 0307 	bic.w	r3, r3, #7
 800ac9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	1ad3      	subs	r3, r2, r3
 800aca2:	4a1f      	ldr	r2, [pc, #124]	; (800ad20 <prvHeapInit+0xac>)
 800aca4:	4413      	add	r3, r2
 800aca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800acac:	4a1d      	ldr	r2, [pc, #116]	; (800ad24 <prvHeapInit+0xb0>)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800acb2:	4b1c      	ldr	r3, [pc, #112]	; (800ad24 <prvHeapInit+0xb0>)
 800acb4:	2200      	movs	r2, #0
 800acb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	4413      	add	r3, r2
 800acbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800acc0:	2208      	movs	r2, #8
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	1a9b      	subs	r3, r3, r2
 800acc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f023 0307 	bic.w	r3, r3, #7
 800acce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	4a15      	ldr	r2, [pc, #84]	; (800ad28 <prvHeapInit+0xb4>)
 800acd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800acd6:	4b14      	ldr	r3, [pc, #80]	; (800ad28 <prvHeapInit+0xb4>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2200      	movs	r2, #0
 800acdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800acde:	4b12      	ldr	r3, [pc, #72]	; (800ad28 <prvHeapInit+0xb4>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2200      	movs	r2, #0
 800ace4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	1ad2      	subs	r2, r2, r3
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800acf4:	4b0c      	ldr	r3, [pc, #48]	; (800ad28 <prvHeapInit+0xb4>)
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	4a0a      	ldr	r2, [pc, #40]	; (800ad2c <prvHeapInit+0xb8>)
 800ad02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	4a09      	ldr	r2, [pc, #36]	; (800ad30 <prvHeapInit+0xbc>)
 800ad0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad0c:	4b09      	ldr	r3, [pc, #36]	; (800ad34 <prvHeapInit+0xc0>)
 800ad0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ad12:	601a      	str	r2, [r3, #0]
}
 800ad14:	bf00      	nop
 800ad16:	3714      	adds	r7, #20
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	20006694 	.word	0x20006694
 800ad24:	2000a294 	.word	0x2000a294
 800ad28:	2000a29c 	.word	0x2000a29c
 800ad2c:	2000a2a4 	.word	0x2000a2a4
 800ad30:	2000a2a0 	.word	0x2000a2a0
 800ad34:	2000a2a8 	.word	0x2000a2a8

0800ad38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad40:	4b28      	ldr	r3, [pc, #160]	; (800ade4 <prvInsertBlockIntoFreeList+0xac>)
 800ad42:	60fb      	str	r3, [r7, #12]
 800ad44:	e002      	b.n	800ad4c <prvInsertBlockIntoFreeList+0x14>
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	60fb      	str	r3, [r7, #12]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d8f7      	bhi.n	800ad46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	68ba      	ldr	r2, [r7, #8]
 800ad60:	4413      	add	r3, r2
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d108      	bne.n	800ad7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	685a      	ldr	r2, [r3, #4]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	441a      	add	r2, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	68ba      	ldr	r2, [r7, #8]
 800ad84:	441a      	add	r2, r3
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d118      	bne.n	800adc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	4b15      	ldr	r3, [pc, #84]	; (800ade8 <prvInsertBlockIntoFreeList+0xb0>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d00d      	beq.n	800adb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	685a      	ldr	r2, [r3, #4]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	441a      	add	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	601a      	str	r2, [r3, #0]
 800adb4:	e008      	b.n	800adc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800adb6:	4b0c      	ldr	r3, [pc, #48]	; (800ade8 <prvInsertBlockIntoFreeList+0xb0>)
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	601a      	str	r2, [r3, #0]
 800adbe:	e003      	b.n	800adc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d002      	beq.n	800add6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800add6:	bf00      	nop
 800add8:	3714      	adds	r7, #20
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	2000a294 	.word	0x2000a294
 800ade8:	2000a29c 	.word	0x2000a29c

0800adec <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	330c      	adds	r3, #12
 800adfc:	461a      	mov	r2, r3
 800adfe:	6839      	ldr	r1, [r7, #0]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f002 f931 	bl	800d068 <tcpip_send_msg_wait_sem>
 800ae06:	4603      	mov	r3, r0
 800ae08:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ae0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d103      	bne.n	800ae1a <netconn_apimsg+0x2e>
    return apimsg->err;
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ae18:	e001      	b.n	800ae1e <netconn_apimsg+0x32>
  }
  return err;
 800ae1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
	...

0800ae28 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b08c      	sub	sp, #48	; 0x30
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	4603      	mov	r3, r0
 800ae30:	603a      	str	r2, [r7, #0]
 800ae32:	71fb      	strb	r3, [r7, #7]
 800ae34:	460b      	mov	r3, r1
 800ae36:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800ae38:	79fb      	ldrb	r3, [r7, #7]
 800ae3a:	6839      	ldr	r1, [r7, #0]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f000 ffaf 	bl	800bda0 <netconn_alloc>
 800ae42:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800ae44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d054      	beq.n	800aef4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800ae4a:	79bb      	ldrb	r3, [r7, #6]
 800ae4c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800ae4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae50:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800ae52:	f107 0308 	add.w	r3, r7, #8
 800ae56:	4619      	mov	r1, r3
 800ae58:	4829      	ldr	r0, [pc, #164]	; (800af00 <netconn_new_with_proto_and_callback+0xd8>)
 800ae5a:	f7ff ffc7 	bl	800adec <netconn_apimsg>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800ae64:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d043      	beq.n	800aef4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800ae6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d005      	beq.n	800ae80 <netconn_new_with_proto_and_callback+0x58>
 800ae74:	4b23      	ldr	r3, [pc, #140]	; (800af04 <netconn_new_with_proto_and_callback+0xdc>)
 800ae76:	22a3      	movs	r2, #163	; 0xa3
 800ae78:	4923      	ldr	r1, [pc, #140]	; (800af08 <netconn_new_with_proto_and_callback+0xe0>)
 800ae7a:	4824      	ldr	r0, [pc, #144]	; (800af0c <netconn_new_with_proto_and_callback+0xe4>)
 800ae7c:	f012 fbd0 	bl	801d620 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800ae80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae82:	3310      	adds	r3, #16
 800ae84:	4618      	mov	r0, r3
 800ae86:	f00d f9a8 	bl	80181da <sys_mbox_valid>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d105      	bne.n	800ae9c <netconn_new_with_proto_and_callback+0x74>
 800ae90:	4b1c      	ldr	r3, [pc, #112]	; (800af04 <netconn_new_with_proto_and_callback+0xdc>)
 800ae92:	22a4      	movs	r2, #164	; 0xa4
 800ae94:	491e      	ldr	r1, [pc, #120]	; (800af10 <netconn_new_with_proto_and_callback+0xe8>)
 800ae96:	481d      	ldr	r0, [pc, #116]	; (800af0c <netconn_new_with_proto_and_callback+0xe4>)
 800ae98:	f012 fbc2 	bl	801d620 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800ae9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9e:	3314      	adds	r3, #20
 800aea0:	4618      	mov	r0, r3
 800aea2:	f00d f99a 	bl	80181da <sys_mbox_valid>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d005      	beq.n	800aeb8 <netconn_new_with_proto_and_callback+0x90>
 800aeac:	4b15      	ldr	r3, [pc, #84]	; (800af04 <netconn_new_with_proto_and_callback+0xdc>)
 800aeae:	22a6      	movs	r2, #166	; 0xa6
 800aeb0:	4918      	ldr	r1, [pc, #96]	; (800af14 <netconn_new_with_proto_and_callback+0xec>)
 800aeb2:	4816      	ldr	r0, [pc, #88]	; (800af0c <netconn_new_with_proto_and_callback+0xe4>)
 800aeb4:	f012 fbb4 	bl	801d620 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800aeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeba:	330c      	adds	r3, #12
 800aebc:	4618      	mov	r0, r3
 800aebe:	f00d fa1d 	bl	80182fc <sys_sem_valid>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d105      	bne.n	800aed4 <netconn_new_with_proto_and_callback+0xac>
 800aec8:	4b0e      	ldr	r3, [pc, #56]	; (800af04 <netconn_new_with_proto_and_callback+0xdc>)
 800aeca:	22a9      	movs	r2, #169	; 0xa9
 800aecc:	4912      	ldr	r1, [pc, #72]	; (800af18 <netconn_new_with_proto_and_callback+0xf0>)
 800aece:	480f      	ldr	r0, [pc, #60]	; (800af0c <netconn_new_with_proto_and_callback+0xe4>)
 800aed0:	f012 fba6 	bl	801d620 <iprintf>
      sys_sem_free(&conn->op_completed);
 800aed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed6:	330c      	adds	r3, #12
 800aed8:	4618      	mov	r0, r3
 800aeda:	f00d fa02 	bl	80182e2 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800aede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee0:	3310      	adds	r3, #16
 800aee2:	4618      	mov	r0, r3
 800aee4:	f00d f8f2 	bl	80180cc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800aee8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aeea:	2007      	movs	r0, #7
 800aeec:	f002 fe7a 	bl	800dbe4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800aef0:	2300      	movs	r3, #0
 800aef2:	e000      	b.n	800aef6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800aef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3730      	adds	r7, #48	; 0x30
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	0800bd75 	.word	0x0800bd75
 800af04:	0801ea30 	.word	0x0801ea30
 800af08:	0801ea64 	.word	0x0801ea64
 800af0c:	0801ea88 	.word	0x0801ea88
 800af10:	0801eab0 	.word	0x0801eab0
 800af14:	0801eac8 	.word	0x0801eac8
 800af18:	0801eaec 	.word	0x0801eaec

0800af1c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b08c      	sub	sp, #48	; 0x30
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d101      	bne.n	800af2e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800af2a:	2300      	movs	r3, #0
 800af2c:	e014      	b.n	800af58 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800af32:	2329      	movs	r3, #41	; 0x29
 800af34:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800af36:	f107 030c 	add.w	r3, r7, #12
 800af3a:	4619      	mov	r1, r3
 800af3c:	4808      	ldr	r0, [pc, #32]	; (800af60 <netconn_prepare_delete+0x44>)
 800af3e:	f7ff ff55 	bl	800adec <netconn_apimsg>
 800af42:	4603      	mov	r3, r0
 800af44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800af48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d002      	beq.n	800af56 <netconn_prepare_delete+0x3a>
    return err;
 800af50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af54:	e000      	b.n	800af58 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800af56:	2300      	movs	r3, #0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3730      	adds	r7, #48	; 0x30
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	0800c2e1 	.word	0x0800c2e1

0800af64 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <netconn_delete+0x12>
    return ERR_OK;
 800af72:	2300      	movs	r3, #0
 800af74:	e00d      	b.n	800af92 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f7ff ffd0 	bl	800af1c <netconn_prepare_delete>
 800af7c:	4603      	mov	r3, r0
 800af7e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800af80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d102      	bne.n	800af8e <netconn_delete+0x2a>
    netconn_free(conn);
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 ff77 	bl	800be7c <netconn_free>
  }
  return err;
 800af8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
	...

0800af9c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b08e      	sub	sp, #56	; 0x38
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	4613      	mov	r3, r2
 800afa8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d109      	bne.n	800afc4 <netconn_connect+0x28>
 800afb0:	4b11      	ldr	r3, [pc, #68]	; (800aff8 <netconn_connect+0x5c>)
 800afb2:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800afb6:	4911      	ldr	r1, [pc, #68]	; (800affc <netconn_connect+0x60>)
 800afb8:	4811      	ldr	r0, [pc, #68]	; (800b000 <netconn_connect+0x64>)
 800afba:	f012 fb31 	bl	801d620 <iprintf>
 800afbe:	f06f 030f 	mvn.w	r3, #15
 800afc2:	e015      	b.n	800aff0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d101      	bne.n	800afce <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800afca:	4b0e      	ldr	r3, [pc, #56]	; (800b004 <netconn_connect+0x68>)
 800afcc:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800afd6:	88fb      	ldrh	r3, [r7, #6]
 800afd8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800afda:	f107 0314 	add.w	r3, r7, #20
 800afde:	4619      	mov	r1, r3
 800afe0:	4809      	ldr	r0, [pc, #36]	; (800b008 <netconn_connect+0x6c>)
 800afe2:	f7ff ff03 	bl	800adec <netconn_apimsg>
 800afe6:	4603      	mov	r3, r0
 800afe8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800afec:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3738      	adds	r7, #56	; 0x38
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	0801ea30 	.word	0x0801ea30
 800affc:	0801eba4 	.word	0x0801eba4
 800b000:	0801ea88 	.word	0x0801ea88
 800b004:	0802223c 	.word	0x0802223c
 800b008:	0800c5c9 	.word	0x0800c5c9

0800b00c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b088      	sub	sp, #32
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	4613      	mov	r3, r2
 800b018:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800b01a:	2300      	movs	r3, #0
 800b01c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d109      	bne.n	800b038 <netconn_recv_data+0x2c>
 800b024:	4b58      	ldr	r3, [pc, #352]	; (800b188 <netconn_recv_data+0x17c>)
 800b026:	f44f 7212 	mov.w	r2, #584	; 0x248
 800b02a:	4958      	ldr	r1, [pc, #352]	; (800b18c <netconn_recv_data+0x180>)
 800b02c:	4858      	ldr	r0, [pc, #352]	; (800b190 <netconn_recv_data+0x184>)
 800b02e:	f012 faf7 	bl	801d620 <iprintf>
 800b032:	f06f 030f 	mvn.w	r3, #15
 800b036:	e0a2      	b.n	800b17e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	2200      	movs	r2, #0
 800b03c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d109      	bne.n	800b058 <netconn_recv_data+0x4c>
 800b044:	4b50      	ldr	r3, [pc, #320]	; (800b188 <netconn_recv_data+0x17c>)
 800b046:	f240 224a 	movw	r2, #586	; 0x24a
 800b04a:	4952      	ldr	r1, [pc, #328]	; (800b194 <netconn_recv_data+0x188>)
 800b04c:	4850      	ldr	r0, [pc, #320]	; (800b190 <netconn_recv_data+0x184>)
 800b04e:	f012 fae7 	bl	801d620 <iprintf>
 800b052:	f06f 030f 	mvn.w	r3, #15
 800b056:	e092      	b.n	800b17e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	3310      	adds	r3, #16
 800b05c:	4618      	mov	r0, r3
 800b05e:	f00d f8bc 	bl	80181da <sys_mbox_valid>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d10e      	bne.n	800b086 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800b068:	68f8      	ldr	r0, [r7, #12]
 800b06a:	f000 fad4 	bl	800b616 <netconn_err>
 800b06e:	4603      	mov	r3, r0
 800b070:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800b072:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d002      	beq.n	800b080 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800b07a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b07e:	e07e      	b.n	800b17e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800b080:	f06f 030a 	mvn.w	r3, #10
 800b084:	e07b      	b.n	800b17e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	7f1b      	ldrb	r3, [r3, #28]
 800b08a:	f003 0302 	and.w	r3, r3, #2
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d10f      	bne.n	800b0b2 <netconn_recv_data+0xa6>
 800b092:	79fb      	ldrb	r3, [r7, #7]
 800b094:	f003 0304 	and.w	r3, r3, #4
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10a      	bne.n	800b0b2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	7f1b      	ldrb	r3, [r3, #28]
 800b0a0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d104      	bne.n	800b0b2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d023      	beq.n	800b0fa <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	3310      	adds	r3, #16
 800b0b6:	f107 0218 	add.w	r2, r7, #24
 800b0ba:	4611      	mov	r1, r2
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f00d f870 	bl	80181a2 <sys_arch_mbox_tryfetch>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0c8:	d11f      	bne.n	800b10a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800b0ca:	68f8      	ldr	r0, [r7, #12]
 800b0cc:	f000 faa3 	bl	800b616 <netconn_err>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800b0d4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d002      	beq.n	800b0e2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800b0dc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b0e0:	e04d      	b.n	800b17e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	7f1b      	ldrb	r3, [r3, #28]
 800b0e6:	f003 0301 	and.w	r3, r3, #1
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d002      	beq.n	800b0f4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800b0ee:	f06f 030a 	mvn.w	r3, #10
 800b0f2:	e044      	b.n	800b17e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800b0f4:	f06f 0306 	mvn.w	r3, #6
 800b0f8:	e041      	b.n	800b17e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	3310      	adds	r3, #16
 800b0fe:	f107 0118 	add.w	r1, r7, #24
 800b102:	2200      	movs	r2, #0
 800b104:	4618      	mov	r0, r3
 800b106:	f00d f80d 	bl	8018124 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b112:	2b10      	cmp	r3, #16
 800b114:	d117      	bne.n	800b146 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	f107 0217 	add.w	r2, r7, #23
 800b11c:	4611      	mov	r1, r2
 800b11e:	4618      	mov	r0, r3
 800b120:	f000 faca 	bl	800b6b8 <lwip_netconn_is_err_msg>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d009      	beq.n	800b13e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800b12a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b12e:	f113 0f0f 	cmn.w	r3, #15
 800b132:	d101      	bne.n	800b138 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800b134:	2300      	movs	r3, #0
 800b136:	e022      	b.n	800b17e <netconn_recv_data+0x172>
      }
      return err;
 800b138:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b13c:	e01f      	b.n	800b17e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	891b      	ldrh	r3, [r3, #8]
 800b142:	83fb      	strh	r3, [r7, #30]
 800b144:	e00d      	b.n	800b162 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d106      	bne.n	800b15a <netconn_recv_data+0x14e>
 800b14c:	4b0e      	ldr	r3, [pc, #56]	; (800b188 <netconn_recv_data+0x17c>)
 800b14e:	f240 2291 	movw	r2, #657	; 0x291
 800b152:	4911      	ldr	r1, [pc, #68]	; (800b198 <netconn_recv_data+0x18c>)
 800b154:	480e      	ldr	r0, [pc, #56]	; (800b190 <netconn_recv_data+0x184>)
 800b156:	f012 fa63 	bl	801d620 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	891b      	ldrh	r3, [r3, #8]
 800b160:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b166:	2b00      	cmp	r3, #0
 800b168:	d005      	beq.n	800b176 <netconn_recv_data+0x16a>
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16e:	8bfa      	ldrh	r2, [r7, #30]
 800b170:	2101      	movs	r1, #1
 800b172:	68f8      	ldr	r0, [r7, #12]
 800b174:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800b176:	69ba      	ldr	r2, [r7, #24]
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3720      	adds	r7, #32
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	0801ea30 	.word	0x0801ea30
 800b18c:	0801ec48 	.word	0x0801ec48
 800b190:	0801ea88 	.word	0x0801ea88
 800b194:	0801ec68 	.word	0x0801ec68
 800b198:	0801ec84 	.word	0x0801ec84

0800b19c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d005      	beq.n	800b1ba <netconn_tcp_recvd_msg+0x1e>
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b1b6:	2b10      	cmp	r3, #16
 800b1b8:	d009      	beq.n	800b1ce <netconn_tcp_recvd_msg+0x32>
 800b1ba:	4b0c      	ldr	r3, [pc, #48]	; (800b1ec <netconn_tcp_recvd_msg+0x50>)
 800b1bc:	f240 22a7 	movw	r2, #679	; 0x2a7
 800b1c0:	490b      	ldr	r1, [pc, #44]	; (800b1f0 <netconn_tcp_recvd_msg+0x54>)
 800b1c2:	480c      	ldr	r0, [pc, #48]	; (800b1f4 <netconn_tcp_recvd_msg+0x58>)
 800b1c4:	f012 fa2c 	bl	801d620 <iprintf>
 800b1c8:	f06f 030f 	mvn.w	r3, #15
 800b1cc:	e00a      	b.n	800b1e4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	68ba      	ldr	r2, [r7, #8]
 800b1d8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800b1da:	6879      	ldr	r1, [r7, #4]
 800b1dc:	4806      	ldr	r0, [pc, #24]	; (800b1f8 <netconn_tcp_recvd_msg+0x5c>)
 800b1de:	f7ff fe05 	bl	800adec <netconn_apimsg>
 800b1e2:	4603      	mov	r3, r0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	0801ea30 	.word	0x0801ea30
 800b1f0:	0801ec90 	.word	0x0801ec90
 800b1f4:	0801ea88 	.word	0x0801ea88
 800b1f8:	0800c745 	.word	0x0800c745

0800b1fc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b090      	sub	sp, #64	; 0x40
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	4613      	mov	r3, r2
 800b208:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3310      	adds	r3, #16
 800b20e:	4618      	mov	r0, r3
 800b210:	f00c ffe3 	bl	80181da <sys_mbox_valid>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d102      	bne.n	800b220 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800b21a:	f06f 030a 	mvn.w	r3, #10
 800b21e:	e06d      	b.n	800b2fc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	7f1b      	ldrb	r3, [r3, #28]
 800b224:	b25b      	sxtb	r3, r3
 800b226:	2b00      	cmp	r3, #0
 800b228:	da07      	bge.n	800b23a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	7f1b      	ldrb	r3, [r3, #28]
 800b22e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b232:	b2da      	uxtb	r2, r3
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800b238:	e039      	b.n	800b2ae <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800b23a:	79fb      	ldrb	r3, [r7, #7]
 800b23c:	461a      	mov	r2, r3
 800b23e:	68b9      	ldr	r1, [r7, #8]
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f7ff fee3 	bl	800b00c <netconn_recv_data>
 800b246:	4603      	mov	r3, r0
 800b248:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800b24c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b250:	2b00      	cmp	r3, #0
 800b252:	d002      	beq.n	800b25a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800b254:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b258:	e050      	b.n	800b2fc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800b260:	79fb      	ldrb	r3, [r7, #7]
 800b262:	f003 0308 	and.w	r3, r3, #8
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10e      	bne.n	800b288 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800b26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d002      	beq.n	800b276 <netconn_recv_data_tcp+0x7a>
 800b270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b272:	891b      	ldrh	r3, [r3, #8]
 800b274:	e000      	b.n	800b278 <netconn_recv_data_tcp+0x7c>
 800b276:	2301      	movs	r3, #1
 800b278:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800b27a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b27c:	f107 0214 	add.w	r2, r7, #20
 800b280:	4619      	mov	r1, r3
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f7ff ff8a 	bl	800b19c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800b288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d134      	bne.n	800b2f8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800b28e:	79fb      	ldrb	r3, [r7, #7]
 800b290:	f003 0310 	and.w	r3, r3, #16
 800b294:	2b00      	cmp	r3, #0
 800b296:	d009      	beq.n	800b2ac <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	7f1b      	ldrb	r3, [r3, #28]
 800b29c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b2a0:	b2da      	uxtb	r2, r3
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800b2a6:	f06f 0306 	mvn.w	r3, #6
 800b2aa:	e027      	b.n	800b2fc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800b2ac:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d005      	beq.n	800b2c2 <netconn_recv_data_tcp+0xc6>
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	2101      	movs	r1, #1
 800b2be:	68f8      	ldr	r0, [r7, #12]
 800b2c0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10f      	bne.n	800b2ea <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f000 f9a3 	bl	800b616 <netconn_err>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800b2d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d002      	beq.n	800b2e4 <netconn_recv_data_tcp+0xe8>
          return err;
 800b2de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b2e2:	e00b      	b.n	800b2fc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800b2e4:	f06f 030d 	mvn.w	r3, #13
 800b2e8:	e008      	b.n	800b2fc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800b2ea:	2101      	movs	r1, #1
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f000 f955 	bl	800b59c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800b2f2:	f06f 030e 	mvn.w	r3, #14
 800b2f6:	e001      	b.n	800b2fc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800b2f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3740      	adds	r7, #64	; 0x40
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b086      	sub	sp, #24
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800b30e:	2300      	movs	r3, #0
 800b310:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d109      	bne.n	800b32c <netconn_recv+0x28>
 800b318:	4b32      	ldr	r3, [pc, #200]	; (800b3e4 <netconn_recv+0xe0>)
 800b31a:	f240 3263 	movw	r2, #867	; 0x363
 800b31e:	4932      	ldr	r1, [pc, #200]	; (800b3e8 <netconn_recv+0xe4>)
 800b320:	4832      	ldr	r0, [pc, #200]	; (800b3ec <netconn_recv+0xe8>)
 800b322:	f012 f97d 	bl	801d620 <iprintf>
 800b326:	f06f 030f 	mvn.w	r3, #15
 800b32a:	e056      	b.n	800b3da <netconn_recv+0xd6>
  *new_buf = NULL;
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	2200      	movs	r2, #0
 800b330:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d109      	bne.n	800b34c <netconn_recv+0x48>
 800b338:	4b2a      	ldr	r3, [pc, #168]	; (800b3e4 <netconn_recv+0xe0>)
 800b33a:	f240 3265 	movw	r2, #869	; 0x365
 800b33e:	492c      	ldr	r1, [pc, #176]	; (800b3f0 <netconn_recv+0xec>)
 800b340:	482a      	ldr	r0, [pc, #168]	; (800b3ec <netconn_recv+0xe8>)
 800b342:	f012 f96d 	bl	801d620 <iprintf>
 800b346:	f06f 030f 	mvn.w	r3, #15
 800b34a:	e046      	b.n	800b3da <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b354:	2b10      	cmp	r3, #16
 800b356:	d13a      	bne.n	800b3ce <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800b358:	2300      	movs	r3, #0
 800b35a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b35c:	2006      	movs	r0, #6
 800b35e:	f002 fbcb 	bl	800daf8 <memp_malloc>
 800b362:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d102      	bne.n	800b370 <netconn_recv+0x6c>
      return ERR_MEM;
 800b36a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b36e:	e034      	b.n	800b3da <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800b370:	f107 030c 	add.w	r3, r7, #12
 800b374:	2200      	movs	r2, #0
 800b376:	4619      	mov	r1, r3
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f7ff ff3f 	bl	800b1fc <netconn_recv_data_tcp>
 800b37e:	4603      	mov	r3, r0
 800b380:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b382:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d006      	beq.n	800b398 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800b38a:	6979      	ldr	r1, [r7, #20]
 800b38c:	2006      	movs	r0, #6
 800b38e:	f002 fc29 	bl	800dbe4 <memp_free>
      return err;
 800b392:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b396:	e020      	b.n	800b3da <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d106      	bne.n	800b3ac <netconn_recv+0xa8>
 800b39e:	4b11      	ldr	r3, [pc, #68]	; (800b3e4 <netconn_recv+0xe0>)
 800b3a0:	f240 3279 	movw	r2, #889	; 0x379
 800b3a4:	4913      	ldr	r1, [pc, #76]	; (800b3f4 <netconn_recv+0xf0>)
 800b3a6:	4811      	ldr	r0, [pc, #68]	; (800b3ec <netconn_recv+0xe8>)
 800b3a8:	f012 f93a 	bl	801d620 <iprintf>

    buf->p = p;
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b3b2:	68fa      	ldr	r2, [r7, #12]
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	697a      	ldr	r2, [r7, #20]
 800b3c8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	e005      	b.n	800b3da <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	6839      	ldr	r1, [r7, #0]
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f7ff fe1a 	bl	800b00c <netconn_recv_data>
 800b3d8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3718      	adds	r7, #24
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	0801ea30 	.word	0x0801ea30
 800b3e8:	0801ec48 	.word	0x0801ec48
 800b3ec:	0801ea88 	.word	0x0801ea88
 800b3f0:	0801ec68 	.word	0x0801ec68
 800b3f4:	0801ece0 	.word	0x0801ece0

0800b3f8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b088      	sub	sp, #32
 800b3fc:	af02      	add	r7, sp, #8
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
 800b404:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800b40e:	78fa      	ldrb	r2, [r7, #3]
 800b410:	f107 0110 	add.w	r1, r7, #16
 800b414:	6a3b      	ldr	r3, [r7, #32]
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	4613      	mov	r3, r2
 800b41a:	2201      	movs	r2, #1
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f000 f805 	bl	800b42c <netconn_write_vectors_partly>
 800b422:	4603      	mov	r3, r0
}
 800b424:	4618      	mov	r0, r3
 800b426:	3718      	adds	r7, #24
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b092      	sub	sp, #72	; 0x48
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	4611      	mov	r1, r2
 800b438:	461a      	mov	r2, r3
 800b43a:	460b      	mov	r3, r1
 800b43c:	80fb      	strh	r3, [r7, #6]
 800b43e:	4613      	mov	r3, r2
 800b440:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d109      	bne.n	800b45c <netconn_write_vectors_partly+0x30>
 800b448:	4b4e      	ldr	r3, [pc, #312]	; (800b584 <netconn_write_vectors_partly+0x158>)
 800b44a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b44e:	494e      	ldr	r1, [pc, #312]	; (800b588 <netconn_write_vectors_partly+0x15c>)
 800b450:	484e      	ldr	r0, [pc, #312]	; (800b58c <netconn_write_vectors_partly+0x160>)
 800b452:	f012 f8e5 	bl	801d620 <iprintf>
 800b456:	f06f 030f 	mvn.w	r3, #15
 800b45a:	e08e      	b.n	800b57a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b464:	2b10      	cmp	r3, #16
 800b466:	d009      	beq.n	800b47c <netconn_write_vectors_partly+0x50>
 800b468:	4b46      	ldr	r3, [pc, #280]	; (800b584 <netconn_write_vectors_partly+0x158>)
 800b46a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800b46e:	4948      	ldr	r1, [pc, #288]	; (800b590 <netconn_write_vectors_partly+0x164>)
 800b470:	4846      	ldr	r0, [pc, #280]	; (800b58c <netconn_write_vectors_partly+0x160>)
 800b472:	f012 f8d5 	bl	801d620 <iprintf>
 800b476:	f06f 0305 	mvn.w	r3, #5
 800b47a:	e07e      	b.n	800b57a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	7f1b      	ldrb	r3, [r3, #28]
 800b480:	f003 0302 	and.w	r3, r3, #2
 800b484:	2b00      	cmp	r3, #0
 800b486:	d104      	bne.n	800b492 <netconn_write_vectors_partly+0x66>
 800b488:	797b      	ldrb	r3, [r7, #5]
 800b48a:	f003 0304 	and.w	r3, r3, #4
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d001      	beq.n	800b496 <netconn_write_vectors_partly+0x6a>
 800b492:	2301      	movs	r3, #1
 800b494:	e000      	b.n	800b498 <netconn_write_vectors_partly+0x6c>
 800b496:	2300      	movs	r3, #0
 800b498:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800b49c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d005      	beq.n	800b4b0 <netconn_write_vectors_partly+0x84>
 800b4a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d102      	bne.n	800b4b0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800b4aa:	f06f 0305 	mvn.w	r3, #5
 800b4ae:	e064      	b.n	800b57a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	643b      	str	r3, [r7, #64]	; 0x40
 800b4b8:	e015      	b.n	800b4e6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800b4ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4bc:	00db      	lsls	r3, r3, #3
 800b4be:	68ba      	ldr	r2, [r7, #8]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4c6:	4413      	add	r3, r2
 800b4c8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800b4ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4cc:	00db      	lsls	r3, r3, #3
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d202      	bcs.n	800b4e0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800b4da:	f06f 0305 	mvn.w	r3, #5
 800b4de:	e04c      	b.n	800b57a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800b4e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	643b      	str	r3, [r7, #64]	; 0x40
 800b4e6:	88fb      	ldrh	r3, [r7, #6]
 800b4e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	dbe5      	blt.n	800b4ba <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800b4ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d101      	bne.n	800b4f8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	e040      	b.n	800b57a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800b4f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	da0a      	bge.n	800b514 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800b4fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b500:	2b00      	cmp	r3, #0
 800b502:	d102      	bne.n	800b50a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800b504:	f06f 0305 	mvn.w	r3, #5
 800b508:	e037      	b.n	800b57a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800b50a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b50e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800b510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b512:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800b51c:	88fb      	ldrh	r3, [r7, #6]
 800b51e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800b520:	2300      	movs	r3, #0
 800b522:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800b524:	797b      	ldrb	r3, [r7, #5]
 800b526:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800b52a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b52c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800b52e:	2300      	movs	r3, #0
 800b530:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800b532:	f107 0314 	add.w	r3, r7, #20
 800b536:	4619      	mov	r1, r3
 800b538:	4816      	ldr	r0, [pc, #88]	; (800b594 <netconn_write_vectors_partly+0x168>)
 800b53a:	f7ff fc57 	bl	800adec <netconn_apimsg>
 800b53e:	4603      	mov	r3, r0
 800b540:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800b544:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d114      	bne.n	800b576 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800b54c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d002      	beq.n	800b558 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800b552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b556:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800b558:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10a      	bne.n	800b576 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800b560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b564:	429a      	cmp	r2, r3
 800b566:	d006      	beq.n	800b576 <netconn_write_vectors_partly+0x14a>
 800b568:	4b06      	ldr	r3, [pc, #24]	; (800b584 <netconn_write_vectors_partly+0x158>)
 800b56a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b56e:	490a      	ldr	r1, [pc, #40]	; (800b598 <netconn_write_vectors_partly+0x16c>)
 800b570:	4806      	ldr	r0, [pc, #24]	; (800b58c <netconn_write_vectors_partly+0x160>)
 800b572:	f012 f855 	bl	801d620 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800b576:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3748      	adds	r7, #72	; 0x48
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	0801ea30 	.word	0x0801ea30
 800b588:	0801ed08 	.word	0x0801ed08
 800b58c:	0801ea88 	.word	0x0801ea88
 800b590:	0801ed24 	.word	0x0801ed24
 800b594:	0800cb49 	.word	0x0800cb49
 800b598:	0801ed48 	.word	0x0801ed48

0800b59c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b08c      	sub	sp, #48	; 0x30
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d109      	bne.n	800b5c2 <netconn_close_shutdown+0x26>
 800b5ae:	4b0f      	ldr	r3, [pc, #60]	; (800b5ec <netconn_close_shutdown+0x50>)
 800b5b0:	f240 4247 	movw	r2, #1095	; 0x447
 800b5b4:	490e      	ldr	r1, [pc, #56]	; (800b5f0 <netconn_close_shutdown+0x54>)
 800b5b6:	480f      	ldr	r0, [pc, #60]	; (800b5f4 <netconn_close_shutdown+0x58>)
 800b5b8:	f012 f832 	bl	801d620 <iprintf>
 800b5bc:	f06f 030f 	mvn.w	r3, #15
 800b5c0:	e010      	b.n	800b5e4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800b5c6:	78fb      	ldrb	r3, [r7, #3]
 800b5c8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b5ca:	2329      	movs	r3, #41	; 0x29
 800b5cc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800b5ce:	f107 030c 	add.w	r3, r7, #12
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	4808      	ldr	r0, [pc, #32]	; (800b5f8 <netconn_close_shutdown+0x5c>)
 800b5d6:	f7ff fc09 	bl	800adec <netconn_apimsg>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b5e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3730      	adds	r7, #48	; 0x30
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	0801ea30 	.word	0x0801ea30
 800b5f0:	0801ed6c 	.word	0x0801ed6c
 800b5f4:	0801ea88 	.word	0x0801ea88
 800b5f8:	0800cc61 	.word	0x0800cc61

0800b5fc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800b604:	2103      	movs	r1, #3
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7ff ffc8 	bl	800b59c <netconn_close_shutdown>
 800b60c:	4603      	mov	r3, r0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b084      	sub	sp, #16
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d101      	bne.n	800b628 <netconn_err+0x12>
    return ERR_OK;
 800b624:	2300      	movs	r3, #0
 800b626:	e00d      	b.n	800b644 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800b628:	f00c fef2 	bl	8018410 <sys_arch_protect>
 800b62c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	7a1b      	ldrb	r3, [r3, #8]
 800b632:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f00c fef6 	bl	801842c <sys_arch_unprotect>
  return err;
 800b640:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	4603      	mov	r3, r0
 800b654:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800b656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b65a:	f113 0f0d 	cmn.w	r3, #13
 800b65e:	d009      	beq.n	800b674 <lwip_netconn_err_to_msg+0x28>
 800b660:	f113 0f0d 	cmn.w	r3, #13
 800b664:	dc0c      	bgt.n	800b680 <lwip_netconn_err_to_msg+0x34>
 800b666:	f113 0f0f 	cmn.w	r3, #15
 800b66a:	d007      	beq.n	800b67c <lwip_netconn_err_to_msg+0x30>
 800b66c:	f113 0f0e 	cmn.w	r3, #14
 800b670:	d002      	beq.n	800b678 <lwip_netconn_err_to_msg+0x2c>
 800b672:	e005      	b.n	800b680 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800b674:	4b0a      	ldr	r3, [pc, #40]	; (800b6a0 <lwip_netconn_err_to_msg+0x54>)
 800b676:	e00e      	b.n	800b696 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800b678:	4b0a      	ldr	r3, [pc, #40]	; (800b6a4 <lwip_netconn_err_to_msg+0x58>)
 800b67a:	e00c      	b.n	800b696 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800b67c:	4b0a      	ldr	r3, [pc, #40]	; (800b6a8 <lwip_netconn_err_to_msg+0x5c>)
 800b67e:	e00a      	b.n	800b696 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800b680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d005      	beq.n	800b694 <lwip_netconn_err_to_msg+0x48>
 800b688:	4b08      	ldr	r3, [pc, #32]	; (800b6ac <lwip_netconn_err_to_msg+0x60>)
 800b68a:	227d      	movs	r2, #125	; 0x7d
 800b68c:	4908      	ldr	r1, [pc, #32]	; (800b6b0 <lwip_netconn_err_to_msg+0x64>)
 800b68e:	4809      	ldr	r0, [pc, #36]	; (800b6b4 <lwip_netconn_err_to_msg+0x68>)
 800b690:	f011 ffc6 	bl	801d620 <iprintf>
      return NULL;
 800b694:	2300      	movs	r3, #0
  }
}
 800b696:	4618      	mov	r0, r3
 800b698:	3708      	adds	r7, #8
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	08022128 	.word	0x08022128
 800b6a4:	08022129 	.word	0x08022129
 800b6a8:	0802212a 	.word	0x0802212a
 800b6ac:	0801ed88 	.word	0x0801ed88
 800b6b0:	0801edbc 	.word	0x0801edbc
 800b6b4:	0801edcc 	.word	0x0801edcc

0800b6b8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d105      	bne.n	800b6d4 <lwip_netconn_is_err_msg+0x1c>
 800b6c8:	4b12      	ldr	r3, [pc, #72]	; (800b714 <lwip_netconn_is_err_msg+0x5c>)
 800b6ca:	2285      	movs	r2, #133	; 0x85
 800b6cc:	4912      	ldr	r1, [pc, #72]	; (800b718 <lwip_netconn_is_err_msg+0x60>)
 800b6ce:	4813      	ldr	r0, [pc, #76]	; (800b71c <lwip_netconn_is_err_msg+0x64>)
 800b6d0:	f011 ffa6 	bl	801d620 <iprintf>

  if (msg == &netconn_aborted) {
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4a12      	ldr	r2, [pc, #72]	; (800b720 <lwip_netconn_is_err_msg+0x68>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d104      	bne.n	800b6e6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	22f3      	movs	r2, #243	; 0xf3
 800b6e0:	701a      	strb	r2, [r3, #0]
    return 1;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e012      	b.n	800b70c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a0e      	ldr	r2, [pc, #56]	; (800b724 <lwip_netconn_is_err_msg+0x6c>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d104      	bne.n	800b6f8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	22f2      	movs	r2, #242	; 0xf2
 800b6f2:	701a      	strb	r2, [r3, #0]
    return 1;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	e009      	b.n	800b70c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4a0b      	ldr	r2, [pc, #44]	; (800b728 <lwip_netconn_is_err_msg+0x70>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d104      	bne.n	800b70a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	22f1      	movs	r2, #241	; 0xf1
 800b704:	701a      	strb	r2, [r3, #0]
    return 1;
 800b706:	2301      	movs	r3, #1
 800b708:	e000      	b.n	800b70c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3708      	adds	r7, #8
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	0801ed88 	.word	0x0801ed88
 800b718:	0801edf4 	.word	0x0801edf4
 800b71c:	0801edcc 	.word	0x0801edcc
 800b720:	08022128 	.word	0x08022128
 800b724:	08022129 	.word	0x08022129
 800b728:	0802212a 	.word	0x0802212a

0800b72c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b088      	sub	sp, #32
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
 800b738:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d105      	bne.n	800b74c <recv_udp+0x20>
 800b740:	4b34      	ldr	r3, [pc, #208]	; (800b814 <recv_udp+0xe8>)
 800b742:	22e5      	movs	r2, #229	; 0xe5
 800b744:	4934      	ldr	r1, [pc, #208]	; (800b818 <recv_udp+0xec>)
 800b746:	4835      	ldr	r0, [pc, #212]	; (800b81c <recv_udp+0xf0>)
 800b748:	f011 ff6a 	bl	801d620 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d105      	bne.n	800b75e <recv_udp+0x32>
 800b752:	4b30      	ldr	r3, [pc, #192]	; (800b814 <recv_udp+0xe8>)
 800b754:	22e6      	movs	r2, #230	; 0xe6
 800b756:	4932      	ldr	r1, [pc, #200]	; (800b820 <recv_udp+0xf4>)
 800b758:	4830      	ldr	r0, [pc, #192]	; (800b81c <recv_udp+0xf0>)
 800b75a:	f011 ff61 	bl	801d620 <iprintf>
  conn = (struct netconn *)arg;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d103      	bne.n	800b770 <recv_udp+0x44>
    pbuf_free(p);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f003 f8df 	bl	800e92c <pbuf_free>
    return;
 800b76e:	e04d      	b.n	800b80c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800b770:	69fb      	ldr	r3, [r7, #28]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	68ba      	ldr	r2, [r7, #8]
 800b776:	429a      	cmp	r2, r3
 800b778:	d005      	beq.n	800b786 <recv_udp+0x5a>
 800b77a:	4b26      	ldr	r3, [pc, #152]	; (800b814 <recv_udp+0xe8>)
 800b77c:	22ee      	movs	r2, #238	; 0xee
 800b77e:	4929      	ldr	r1, [pc, #164]	; (800b824 <recv_udp+0xf8>)
 800b780:	4826      	ldr	r0, [pc, #152]	; (800b81c <recv_udp+0xf0>)
 800b782:	f011 ff4d 	bl	801d620 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b786:	69fb      	ldr	r3, [r7, #28]
 800b788:	3310      	adds	r3, #16
 800b78a:	4618      	mov	r0, r3
 800b78c:	f00c fd25 	bl	80181da <sys_mbox_valid>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d103      	bne.n	800b79e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f003 f8c8 	bl	800e92c <pbuf_free>
    return;
 800b79c:	e036      	b.n	800b80c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b79e:	2006      	movs	r0, #6
 800b7a0:	f002 f9aa 	bl	800daf8 <memp_malloc>
 800b7a4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d103      	bne.n	800b7b4 <recv_udp+0x88>
    pbuf_free(p);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f003 f8bd 	bl	800e92c <pbuf_free>
    return;
 800b7b2:	e02b      	b.n	800b80c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d002      	beq.n	800b7cc <recv_udp+0xa0>
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	e000      	b.n	800b7ce <recv_udp+0xa2>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	69ba      	ldr	r2, [r7, #24]
 800b7d0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b7d6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	891b      	ldrh	r3, [r3, #8]
 800b7dc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	3310      	adds	r3, #16
 800b7e2:	69b9      	ldr	r1, [r7, #24]
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f00c fc83 	bl	80180f0 <sys_mbox_trypost>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d003      	beq.n	800b7f8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800b7f0:	69b8      	ldr	r0, [r7, #24]
 800b7f2:	f001 fac1 	bl	800cd78 <netbuf_delete>
    return;
 800b7f6:	e009      	b.n	800b80c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b7f8:	69fb      	ldr	r3, [r7, #28]
 800b7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d005      	beq.n	800b80c <recv_udp+0xe0>
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b804:	8afa      	ldrh	r2, [r7, #22]
 800b806:	2100      	movs	r1, #0
 800b808:	69f8      	ldr	r0, [r7, #28]
 800b80a:	4798      	blx	r3
  }
}
 800b80c:	3720      	adds	r7, #32
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	0801ed88 	.word	0x0801ed88
 800b818:	0801ee00 	.word	0x0801ee00
 800b81c:	0801edcc 	.word	0x0801edcc
 800b820:	0801ee24 	.word	0x0801ee24
 800b824:	0801ee44 	.word	0x0801ee44

0800b828 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b088      	sub	sp, #32
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	607a      	str	r2, [r7, #4]
 800b834:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d106      	bne.n	800b84a <recv_tcp+0x22>
 800b83c:	4b36      	ldr	r3, [pc, #216]	; (800b918 <recv_tcp+0xf0>)
 800b83e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b842:	4936      	ldr	r1, [pc, #216]	; (800b91c <recv_tcp+0xf4>)
 800b844:	4836      	ldr	r0, [pc, #216]	; (800b920 <recv_tcp+0xf8>)
 800b846:	f011 feeb 	bl	801d620 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d106      	bne.n	800b85e <recv_tcp+0x36>
 800b850:	4b31      	ldr	r3, [pc, #196]	; (800b918 <recv_tcp+0xf0>)
 800b852:	f240 122d 	movw	r2, #301	; 0x12d
 800b856:	4933      	ldr	r1, [pc, #204]	; (800b924 <recv_tcp+0xfc>)
 800b858:	4831      	ldr	r0, [pc, #196]	; (800b920 <recv_tcp+0xf8>)
 800b85a:	f011 fee1 	bl	801d620 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800b85e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d006      	beq.n	800b874 <recv_tcp+0x4c>
 800b866:	4b2c      	ldr	r3, [pc, #176]	; (800b918 <recv_tcp+0xf0>)
 800b868:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800b86c:	492e      	ldr	r1, [pc, #184]	; (800b928 <recv_tcp+0x100>)
 800b86e:	482c      	ldr	r0, [pc, #176]	; (800b920 <recv_tcp+0xf8>)
 800b870:	f011 fed6 	bl	801d620 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d102      	bne.n	800b884 <recv_tcp+0x5c>
    return ERR_VAL;
 800b87e:	f06f 0305 	mvn.w	r3, #5
 800b882:	e045      	b.n	800b910 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d006      	beq.n	800b89c <recv_tcp+0x74>
 800b88e:	4b22      	ldr	r3, [pc, #136]	; (800b918 <recv_tcp+0xf0>)
 800b890:	f240 1235 	movw	r2, #309	; 0x135
 800b894:	4925      	ldr	r1, [pc, #148]	; (800b92c <recv_tcp+0x104>)
 800b896:	4822      	ldr	r0, [pc, #136]	; (800b920 <recv_tcp+0xf8>)
 800b898:	f011 fec2 	bl	801d620 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	3310      	adds	r3, #16
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f00c fc9a 	bl	80181da <sys_mbox_valid>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10d      	bne.n	800b8c8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d008      	beq.n	800b8c4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	891b      	ldrh	r3, [r3, #8]
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	68b8      	ldr	r0, [r7, #8]
 800b8ba:	f003 fe8d 	bl	800f5d8 <tcp_recved>
      pbuf_free(p);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f003 f834 	bl	800e92c <pbuf_free>
    }
    return ERR_OK;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	e023      	b.n	800b910 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d005      	beq.n	800b8da <recv_tcp+0xb2>
    msg = p;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	891b      	ldrh	r3, [r3, #8]
 800b8d6:	83fb      	strh	r3, [r7, #30]
 800b8d8:	e003      	b.n	800b8e2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800b8da:	4b15      	ldr	r3, [pc, #84]	; (800b930 <recv_tcp+0x108>)
 800b8dc:	61bb      	str	r3, [r7, #24]
    len = 0;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	3310      	adds	r3, #16
 800b8e6:	69b9      	ldr	r1, [r7, #24]
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f00c fc01 	bl	80180f0 <sys_mbox_trypost>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d002      	beq.n	800b8fa <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800b8f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8f8:	e00a      	b.n	800b910 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d005      	beq.n	800b90e <recv_tcp+0xe6>
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b906:	8bfa      	ldrh	r2, [r7, #30]
 800b908:	2100      	movs	r1, #0
 800b90a:	6978      	ldr	r0, [r7, #20]
 800b90c:	4798      	blx	r3
  }

  return ERR_OK;
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	3720      	adds	r7, #32
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}
 800b918:	0801ed88 	.word	0x0801ed88
 800b91c:	0801ee64 	.word	0x0801ee64
 800b920:	0801edcc 	.word	0x0801edcc
 800b924:	0801ee88 	.word	0x0801ee88
 800b928:	0801eea8 	.word	0x0801eea8
 800b92c:	0801eec0 	.word	0x0801eec0
 800b930:	0802212a 	.word	0x0802212a

0800b934 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d106      	bne.n	800b956 <poll_tcp+0x22>
 800b948:	4b29      	ldr	r3, [pc, #164]	; (800b9f0 <poll_tcp+0xbc>)
 800b94a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800b94e:	4929      	ldr	r1, [pc, #164]	; (800b9f4 <poll_tcp+0xc0>)
 800b950:	4829      	ldr	r0, [pc, #164]	; (800b9f8 <poll_tcp+0xc4>)
 800b952:	f011 fe65 	bl	801d620 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	785b      	ldrb	r3, [r3, #1]
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d104      	bne.n	800b968 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b95e:	2101      	movs	r1, #1
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f000 ff25 	bl	800c7b0 <lwip_netconn_do_writemore>
 800b966:	e016      	b.n	800b996 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	785b      	ldrb	r3, [r3, #1]
 800b96c:	2b04      	cmp	r3, #4
 800b96e:	d112      	bne.n	800b996 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	6a1b      	ldr	r3, [r3, #32]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d00a      	beq.n	800b98e <poll_tcp+0x5a>
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6a1b      	ldr	r3, [r3, #32]
 800b97c:	7a5b      	ldrb	r3, [r3, #9]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d005      	beq.n	800b98e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6a1b      	ldr	r3, [r3, #32]
 800b986:	7a5a      	ldrb	r2, [r3, #9]
 800b988:	3a01      	subs	r2, #1
 800b98a:	b2d2      	uxtb	r2, r2
 800b98c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b98e:	2101      	movs	r1, #1
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f000 fb3b 	bl	800c00c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	7f1b      	ldrb	r3, [r3, #28]
 800b99a:	f003 0310 	and.w	r3, r3, #16
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d021      	beq.n	800b9e6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d01d      	beq.n	800b9e6 <poll_tcp+0xb2>
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b9b2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b9b6:	d316      	bcc.n	800b9e6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b9c0:	2b04      	cmp	r3, #4
 800b9c2:	d810      	bhi.n	800b9e6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	7f1b      	ldrb	r3, [r3, #28]
 800b9c8:	f023 0310 	bic.w	r3, r3, #16
 800b9cc:	b2da      	uxtb	r2, r3
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d005      	beq.n	800b9e6 <poll_tcp+0xb2>
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9de:	2200      	movs	r2, #0
 800b9e0:	2102      	movs	r1, #2
 800b9e2:	68f8      	ldr	r0, [r7, #12]
 800b9e4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b9e6:	2300      	movs	r3, #0
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	0801ed88 	.word	0x0801ed88
 800b9f4:	0801eee0 	.word	0x0801eee0
 800b9f8:	0801edcc 	.word	0x0801edcc

0800b9fc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b086      	sub	sp, #24
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	4613      	mov	r3, r2
 800ba08:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d106      	bne.n	800ba22 <sent_tcp+0x26>
 800ba14:	4b20      	ldr	r3, [pc, #128]	; (800ba98 <sent_tcp+0x9c>)
 800ba16:	f240 1293 	movw	r2, #403	; 0x193
 800ba1a:	4920      	ldr	r1, [pc, #128]	; (800ba9c <sent_tcp+0xa0>)
 800ba1c:	4820      	ldr	r0, [pc, #128]	; (800baa0 <sent_tcp+0xa4>)
 800ba1e:	f011 fdff 	bl	801d620 <iprintf>

  if (conn) {
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d032      	beq.n	800ba8e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	785b      	ldrb	r3, [r3, #1]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d104      	bne.n	800ba3a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ba30:	2101      	movs	r1, #1
 800ba32:	6978      	ldr	r0, [r7, #20]
 800ba34:	f000 febc 	bl	800c7b0 <lwip_netconn_do_writemore>
 800ba38:	e007      	b.n	800ba4a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	785b      	ldrb	r3, [r3, #1]
 800ba3e:	2b04      	cmp	r3, #4
 800ba40:	d103      	bne.n	800ba4a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ba42:	2101      	movs	r1, #1
 800ba44:	6978      	ldr	r0, [r7, #20]
 800ba46:	f000 fae1 	bl	800c00c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d01d      	beq.n	800ba8e <sent_tcp+0x92>
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ba5a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ba5e:	d316      	bcc.n	800ba8e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ba68:	2b04      	cmp	r3, #4
 800ba6a:	d810      	bhi.n	800ba8e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	7f1b      	ldrb	r3, [r3, #28]
 800ba70:	f023 0310 	bic.w	r3, r3, #16
 800ba74:	b2da      	uxtb	r2, r3
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d005      	beq.n	800ba8e <sent_tcp+0x92>
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba86:	88fa      	ldrh	r2, [r7, #6]
 800ba88:	2102      	movs	r1, #2
 800ba8a:	6978      	ldr	r0, [r7, #20]
 800ba8c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ba8e:	2300      	movs	r3, #0
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3718      	adds	r7, #24
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	0801ed88 	.word	0x0801ed88
 800ba9c:	0801eee0 	.word	0x0801eee0
 800baa0:	0801edcc 	.word	0x0801edcc

0800baa4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b088      	sub	sp, #32
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	460b      	mov	r3, r1
 800baae:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d106      	bne.n	800bac8 <err_tcp+0x24>
 800baba:	4b5f      	ldr	r3, [pc, #380]	; (800bc38 <err_tcp+0x194>)
 800babc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800bac0:	495e      	ldr	r1, [pc, #376]	; (800bc3c <err_tcp+0x198>)
 800bac2:	485f      	ldr	r0, [pc, #380]	; (800bc40 <err_tcp+0x19c>)
 800bac4:	f011 fdac 	bl	801d620 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800bac8:	f00c fca2 	bl	8018410 <sys_arch_protect>
 800bacc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	2200      	movs	r2, #0
 800bad2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	78fa      	ldrb	r2, [r7, #3]
 800bad8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	7f1b      	ldrb	r3, [r3, #28]
 800bade:	f043 0301 	orr.w	r3, r3, #1
 800bae2:	b2da      	uxtb	r2, r3
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800bae8:	69fb      	ldr	r3, [r7, #28]
 800baea:	785b      	ldrb	r3, [r3, #1]
 800baec:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800baee:	69fb      	ldr	r3, [r7, #28]
 800baf0:	2200      	movs	r2, #0
 800baf2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800baf4:	69b8      	ldr	r0, [r7, #24]
 800baf6:	f00c fc99 	bl	801842c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d005      	beq.n	800bb0e <err_tcp+0x6a>
 800bb02:	69fb      	ldr	r3, [r7, #28]
 800bb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb06:	2200      	movs	r2, #0
 800bb08:	2104      	movs	r1, #4
 800bb0a:	69f8      	ldr	r0, [r7, #28]
 800bb0c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d005      	beq.n	800bb22 <err_tcp+0x7e>
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	2100      	movs	r1, #0
 800bb1e:	69f8      	ldr	r0, [r7, #28]
 800bb20:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d005      	beq.n	800bb36 <err_tcp+0x92>
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb2e:	2200      	movs	r2, #0
 800bb30:	2102      	movs	r1, #2
 800bb32:	69f8      	ldr	r0, [r7, #28]
 800bb34:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800bb36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7ff fd86 	bl	800b64c <lwip_netconn_err_to_msg>
 800bb40:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800bb42:	69fb      	ldr	r3, [r7, #28]
 800bb44:	3310      	adds	r3, #16
 800bb46:	4618      	mov	r0, r3
 800bb48:	f00c fb47 	bl	80181da <sys_mbox_valid>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d005      	beq.n	800bb5e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	3310      	adds	r3, #16
 800bb56:	6939      	ldr	r1, [r7, #16]
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f00c fac9 	bl	80180f0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800bb5e:	69fb      	ldr	r3, [r7, #28]
 800bb60:	3314      	adds	r3, #20
 800bb62:	4618      	mov	r0, r3
 800bb64:	f00c fb39 	bl	80181da <sys_mbox_valid>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d005      	beq.n	800bb7a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800bb6e:	69fb      	ldr	r3, [r7, #28]
 800bb70:	3314      	adds	r3, #20
 800bb72:	6939      	ldr	r1, [r7, #16]
 800bb74:	4618      	mov	r0, r3
 800bb76:	f00c fabb 	bl	80180f0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800bb7a:	7dfb      	ldrb	r3, [r7, #23]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d005      	beq.n	800bb8c <err_tcp+0xe8>
 800bb80:	7dfb      	ldrb	r3, [r7, #23]
 800bb82:	2b04      	cmp	r3, #4
 800bb84:	d002      	beq.n	800bb8c <err_tcp+0xe8>
 800bb86:	7dfb      	ldrb	r3, [r7, #23]
 800bb88:	2b03      	cmp	r3, #3
 800bb8a:	d143      	bne.n	800bc14 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	7f1b      	ldrb	r3, [r3, #28]
 800bb90:	f003 0304 	and.w	r3, r3, #4
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	bf14      	ite	ne
 800bb98:	2301      	movne	r3, #1
 800bb9a:	2300      	moveq	r3, #0
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	7f1b      	ldrb	r3, [r3, #28]
 800bba4:	f023 0304 	bic.w	r3, r3, #4
 800bba8:	b2da      	uxtb	r2, r3
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d13b      	bne.n	800bc2c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bbb4:	69fb      	ldr	r3, [r7, #28]
 800bbb6:	6a1b      	ldr	r3, [r3, #32]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d106      	bne.n	800bbca <err_tcp+0x126>
 800bbbc:	4b1e      	ldr	r3, [pc, #120]	; (800bc38 <err_tcp+0x194>)
 800bbbe:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bbc2:	4920      	ldr	r1, [pc, #128]	; (800bc44 <err_tcp+0x1a0>)
 800bbc4:	481e      	ldr	r0, [pc, #120]	; (800bc40 <err_tcp+0x19c>)
 800bbc6:	f011 fd2b 	bl	801d620 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800bbca:	7dfb      	ldrb	r3, [r7, #23]
 800bbcc:	2b04      	cmp	r3, #4
 800bbce:	d104      	bne.n	800bbda <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	6a1b      	ldr	r3, [r3, #32]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	711a      	strb	r2, [r3, #4]
 800bbd8:	e003      	b.n	800bbe2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	78fa      	ldrb	r2, [r7, #3]
 800bbe0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	6a1b      	ldr	r3, [r3, #32]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	330c      	adds	r3, #12
 800bbea:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800bbec:	68b8      	ldr	r0, [r7, #8]
 800bbee:	f00c fb85 	bl	80182fc <sys_sem_valid>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d106      	bne.n	800bc06 <err_tcp+0x162>
 800bbf8:	4b0f      	ldr	r3, [pc, #60]	; (800bc38 <err_tcp+0x194>)
 800bbfa:	f240 12ef 	movw	r2, #495	; 0x1ef
 800bbfe:	4912      	ldr	r1, [pc, #72]	; (800bc48 <err_tcp+0x1a4>)
 800bc00:	480f      	ldr	r0, [pc, #60]	; (800bc40 <err_tcp+0x19c>)
 800bc02:	f011 fd0d 	bl	801d620 <iprintf>
      conn->current_msg = NULL;
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800bc0c:	68b8      	ldr	r0, [r7, #8]
 800bc0e:	f00c fb5b 	bl	80182c8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800bc12:	e00b      	b.n	800bc2c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	6a1b      	ldr	r3, [r3, #32]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d008      	beq.n	800bc2e <err_tcp+0x18a>
 800bc1c:	4b06      	ldr	r3, [pc, #24]	; (800bc38 <err_tcp+0x194>)
 800bc1e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800bc22:	490a      	ldr	r1, [pc, #40]	; (800bc4c <err_tcp+0x1a8>)
 800bc24:	4806      	ldr	r0, [pc, #24]	; (800bc40 <err_tcp+0x19c>)
 800bc26:	f011 fcfb 	bl	801d620 <iprintf>
  }
}
 800bc2a:	e000      	b.n	800bc2e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800bc2c:	bf00      	nop
}
 800bc2e:	bf00      	nop
 800bc30:	3720      	adds	r7, #32
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	0801ed88 	.word	0x0801ed88
 800bc3c:	0801eee0 	.word	0x0801eee0
 800bc40:	0801edcc 	.word	0x0801edcc
 800bc44:	0801eef0 	.word	0x0801eef0
 800bc48:	0801ef0c 	.word	0x0801ef0c
 800bc4c:	0801ef28 	.word	0x0801ef28

0800bc50 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800bc5e:	6879      	ldr	r1, [r7, #4]
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	f004 fc97 	bl	8010594 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800bc66:	490a      	ldr	r1, [pc, #40]	; (800bc90 <setup_tcp+0x40>)
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f004 fca5 	bl	80105b8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800bc6e:	4909      	ldr	r1, [pc, #36]	; (800bc94 <setup_tcp+0x44>)
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f004 fcc3 	bl	80105fc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800bc76:	2202      	movs	r2, #2
 800bc78:	4907      	ldr	r1, [pc, #28]	; (800bc98 <setup_tcp+0x48>)
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f004 fd1a 	bl	80106b4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800bc80:	4906      	ldr	r1, [pc, #24]	; (800bc9c <setup_tcp+0x4c>)
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	f004 fcdc 	bl	8010640 <tcp_err>
}
 800bc88:	bf00      	nop
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	0800b829 	.word	0x0800b829
 800bc94:	0800b9fd 	.word	0x0800b9fd
 800bc98:	0800b935 	.word	0x0800b935
 800bc9c:	0800baa5 	.word	0x0800baa5

0800bca0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800bca0:	b590      	push	{r4, r7, lr}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d006      	beq.n	800bcc4 <pcb_new+0x24>
 800bcb6:	4b2b      	ldr	r3, [pc, #172]	; (800bd64 <pcb_new+0xc4>)
 800bcb8:	f240 2265 	movw	r2, #613	; 0x265
 800bcbc:	492a      	ldr	r1, [pc, #168]	; (800bd68 <pcb_new+0xc8>)
 800bcbe:	482b      	ldr	r0, [pc, #172]	; (800bd6c <pcb_new+0xcc>)
 800bcc0:	f011 fcae 	bl	801d620 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bcce:	2b10      	cmp	r3, #16
 800bcd0:	d022      	beq.n	800bd18 <pcb_new+0x78>
 800bcd2:	2b20      	cmp	r3, #32
 800bcd4:	d133      	bne.n	800bd3e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681c      	ldr	r4, [r3, #0]
 800bcda:	7bfb      	ldrb	r3, [r7, #15]
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f009 fda6 	bl	801582e <udp_new_ip_type>
 800bce2:	4603      	mov	r3, r0
 800bce4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d02a      	beq.n	800bd46 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	2b22      	cmp	r3, #34	; 0x22
 800bcf8:	d104      	bne.n	800bd04 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	2201      	movs	r2, #1
 800bd02:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	6858      	ldr	r0, [r3, #4]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	461a      	mov	r2, r3
 800bd10:	4917      	ldr	r1, [pc, #92]	; (800bd70 <pcb_new+0xd0>)
 800bd12:	f009 fd13 	bl	801573c <udp_recv>
      }
      break;
 800bd16:	e016      	b.n	800bd46 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681c      	ldr	r4, [r3, #0]
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f004 fc2a 	bl	8010578 <tcp_new_ip_type>
 800bd24:	4603      	mov	r3, r0
 800bd26:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00b      	beq.n	800bd4a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7ff ff8a 	bl	800bc50 <setup_tcp>
      }
      break;
 800bd3c:	e005      	b.n	800bd4a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	22fa      	movs	r2, #250	; 0xfa
 800bd42:	711a      	strb	r2, [r3, #4]
      return;
 800bd44:	e00a      	b.n	800bd5c <pcb_new+0xbc>
      break;
 800bd46:	bf00      	nop
 800bd48:	e000      	b.n	800bd4c <pcb_new+0xac>
      break;
 800bd4a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d102      	bne.n	800bd5c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	22ff      	movs	r2, #255	; 0xff
 800bd5a:	711a      	strb	r2, [r3, #4]
  }
}
 800bd5c:	3714      	adds	r7, #20
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd90      	pop	{r4, r7, pc}
 800bd62:	bf00      	nop
 800bd64:	0801ed88 	.word	0x0801ed88
 800bd68:	0801ef6c 	.word	0x0801ef6c
 800bd6c:	0801edcc 	.word	0x0801edcc
 800bd70:	0800b72d 	.word	0x0800b72d

0800bd74 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2200      	movs	r2, #0
 800bd84:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d102      	bne.n	800bd96 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f7ff ff85 	bl	800bca0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800bd96:	bf00      	nop
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
	...

0800bda0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b086      	sub	sp, #24
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	4603      	mov	r3, r0
 800bda8:	6039      	str	r1, [r7, #0]
 800bdaa:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800bdac:	2300      	movs	r3, #0
 800bdae:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800bdb0:	2007      	movs	r0, #7
 800bdb2:	f001 fea1 	bl	800daf8 <memp_malloc>
 800bdb6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d101      	bne.n	800bdc2 <netconn_alloc+0x22>
    return NULL;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	e052      	b.n	800be68 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	79fa      	ldrb	r2, [r7, #7]
 800bdcc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800bdd4:	79fb      	ldrb	r3, [r7, #7]
 800bdd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdda:	2b10      	cmp	r3, #16
 800bddc:	d004      	beq.n	800bde8 <netconn_alloc+0x48>
 800bdde:	2b20      	cmp	r3, #32
 800bde0:	d105      	bne.n	800bdee <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800bde2:	2306      	movs	r3, #6
 800bde4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800bde6:	e00a      	b.n	800bdfe <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800bde8:	2306      	movs	r3, #6
 800bdea:	617b      	str	r3, [r7, #20]
      break;
 800bdec:	e007      	b.n	800bdfe <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800bdee:	4b20      	ldr	r3, [pc, #128]	; (800be70 <netconn_alloc+0xd0>)
 800bdf0:	f240 22e5 	movw	r2, #741	; 0x2e5
 800bdf4:	491f      	ldr	r1, [pc, #124]	; (800be74 <netconn_alloc+0xd4>)
 800bdf6:	4820      	ldr	r0, [pc, #128]	; (800be78 <netconn_alloc+0xd8>)
 800bdf8:	f011 fc12 	bl	801d620 <iprintf>
      goto free_and_return;
 800bdfc:	e02f      	b.n	800be5e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	3310      	adds	r3, #16
 800be02:	6979      	ldr	r1, [r7, #20]
 800be04:	4618      	mov	r0, r3
 800be06:	f00c f93f 	bl	8018088 <sys_mbox_new>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d125      	bne.n	800be5c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	330c      	adds	r3, #12
 800be14:	2100      	movs	r1, #0
 800be16:	4618      	mov	r0, r3
 800be18:	f00c f9fd 	bl	8018216 <sys_sem_new>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d005      	beq.n	800be2e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	3310      	adds	r3, #16
 800be26:	4618      	mov	r0, r3
 800be28:	f00c f950 	bl	80180cc <sys_mbox_free>
    goto free_and_return;
 800be2c:	e017      	b.n	800be5e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	3314      	adds	r3, #20
 800be32:	4618      	mov	r0, r3
 800be34:	f00c f9e2 	bl	80181fc <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2200      	movs	r2, #0
 800be3c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be44:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	683a      	ldr	r2, [r7, #0]
 800be4a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2200      	movs	r2, #0
 800be50:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	7cfa      	ldrb	r2, [r7, #19]
 800be56:	771a      	strb	r2, [r3, #28]
  return conn;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	e005      	b.n	800be68 <netconn_alloc+0xc8>
    goto free_and_return;
 800be5c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800be5e:	68f9      	ldr	r1, [r7, #12]
 800be60:	2007      	movs	r0, #7
 800be62:	f001 febf 	bl	800dbe4 <memp_free>
  return NULL;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3718      	adds	r7, #24
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	0801ed88 	.word	0x0801ed88
 800be74:	0801ef8c 	.word	0x0801ef8c
 800be78:	0801edcc 	.word	0x0801edcc

0800be7c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d006      	beq.n	800be9a <netconn_free+0x1e>
 800be8c:	4b1b      	ldr	r3, [pc, #108]	; (800befc <netconn_free+0x80>)
 800be8e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800be92:	491b      	ldr	r1, [pc, #108]	; (800bf00 <netconn_free+0x84>)
 800be94:	481b      	ldr	r0, [pc, #108]	; (800bf04 <netconn_free+0x88>)
 800be96:	f011 fbc3 	bl	801d620 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	3310      	adds	r3, #16
 800be9e:	4618      	mov	r0, r3
 800bea0:	f00c f99b 	bl	80181da <sys_mbox_valid>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d006      	beq.n	800beb8 <netconn_free+0x3c>
 800beaa:	4b14      	ldr	r3, [pc, #80]	; (800befc <netconn_free+0x80>)
 800beac:	f240 3223 	movw	r2, #803	; 0x323
 800beb0:	4915      	ldr	r1, [pc, #84]	; (800bf08 <netconn_free+0x8c>)
 800beb2:	4814      	ldr	r0, [pc, #80]	; (800bf04 <netconn_free+0x88>)
 800beb4:	f011 fbb4 	bl	801d620 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	3314      	adds	r3, #20
 800bebc:	4618      	mov	r0, r3
 800bebe:	f00c f98c 	bl	80181da <sys_mbox_valid>
 800bec2:	4603      	mov	r3, r0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d006      	beq.n	800bed6 <netconn_free+0x5a>
 800bec8:	4b0c      	ldr	r3, [pc, #48]	; (800befc <netconn_free+0x80>)
 800beca:	f240 3226 	movw	r2, #806	; 0x326
 800bece:	490f      	ldr	r1, [pc, #60]	; (800bf0c <netconn_free+0x90>)
 800bed0:	480c      	ldr	r0, [pc, #48]	; (800bf04 <netconn_free+0x88>)
 800bed2:	f011 fba5 	bl	801d620 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	330c      	adds	r3, #12
 800beda:	4618      	mov	r0, r3
 800bedc:	f00c fa01 	bl	80182e2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	330c      	adds	r3, #12
 800bee4:	4618      	mov	r0, r3
 800bee6:	f00c fa1a 	bl	801831e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800beea:	6879      	ldr	r1, [r7, #4]
 800beec:	2007      	movs	r0, #7
 800beee:	f001 fe79 	bl	800dbe4 <memp_free>
}
 800bef2:	bf00      	nop
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	0801ed88 	.word	0x0801ed88
 800bf00:	0801efb4 	.word	0x0801efb4
 800bf04:	0801edcc 	.word	0x0801edcc
 800bf08:	0801efe4 	.word	0x0801efe4
 800bf0c:	0801f020 	.word	0x0801f020

0800bf10 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b086      	sub	sp, #24
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	3310      	adds	r3, #16
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f00c f95c 	bl	80181da <sys_mbox_valid>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d02f      	beq.n	800bf88 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800bf28:	e018      	b.n	800bf5c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf32:	2b10      	cmp	r3, #16
 800bf34:	d10e      	bne.n	800bf54 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	f107 020f 	add.w	r2, r7, #15
 800bf3c:	4611      	mov	r1, r2
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7ff fbba 	bl	800b6b8 <lwip_netconn_is_err_msg>
 800bf44:	4603      	mov	r3, r0
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d108      	bne.n	800bf5c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f002 fced 	bl	800e92c <pbuf_free>
 800bf52:	e003      	b.n	800bf5c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f000 ff0e 	bl	800cd78 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	3310      	adds	r3, #16
 800bf60:	f107 0210 	add.w	r2, r7, #16
 800bf64:	4611      	mov	r1, r2
 800bf66:	4618      	mov	r0, r3
 800bf68:	f00c f91b 	bl	80181a2 <sys_arch_mbox_tryfetch>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf72:	d1da      	bne.n	800bf2a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	3310      	adds	r3, #16
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f00c f8a7 	bl	80180cc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	3310      	adds	r3, #16
 800bf82:	4618      	mov	r0, r3
 800bf84:	f00c f93a 	bl	80181fc <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	3314      	adds	r3, #20
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f00c f924 	bl	80181da <sys_mbox_valid>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d034      	beq.n	800c002 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800bf98:	e01d      	b.n	800bfd6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	f107 020e 	add.w	r2, r7, #14
 800bfa0:	4611      	mov	r1, r2
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7ff fb88 	bl	800b6b8 <lwip_netconn_is_err_msg>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d113      	bne.n	800bfd6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800bfb2:	6978      	ldr	r0, [r7, #20]
 800bfb4:	f7ff ffac 	bl	800bf10 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d007      	beq.n	800bfd0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f003 faa1 	bl	800f50c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800bfd0:	6978      	ldr	r0, [r7, #20]
 800bfd2:	f7ff ff53 	bl	800be7c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	3314      	adds	r3, #20
 800bfda:	f107 0210 	add.w	r2, r7, #16
 800bfde:	4611      	mov	r1, r2
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f00c f8de 	bl	80181a2 <sys_arch_mbox_tryfetch>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfec:	d1d5      	bne.n	800bf9a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	3314      	adds	r3, #20
 800bff2:	4618      	mov	r0, r3
 800bff4:	f00c f86a 	bl	80180cc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	3314      	adds	r3, #20
 800bffc:	4618      	mov	r0, r3
 800bffe:	f00c f8fd 	bl	80181fc <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800c002:	bf00      	nop
 800c004:	3718      	adds	r7, #24
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
	...

0800c00c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b086      	sub	sp, #24
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	460b      	mov	r3, r1
 800c016:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800c018:	2300      	movs	r3, #0
 800c01a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d106      	bne.n	800c030 <lwip_netconn_do_close_internal+0x24>
 800c022:	4b87      	ldr	r3, [pc, #540]	; (800c240 <lwip_netconn_do_close_internal+0x234>)
 800c024:	f240 32a2 	movw	r2, #930	; 0x3a2
 800c028:	4986      	ldr	r1, [pc, #536]	; (800c244 <lwip_netconn_do_close_internal+0x238>)
 800c02a:	4887      	ldr	r0, [pc, #540]	; (800c248 <lwip_netconn_do_close_internal+0x23c>)
 800c02c:	f011 faf8 	bl	801d620 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c038:	2b10      	cmp	r3, #16
 800c03a:	d006      	beq.n	800c04a <lwip_netconn_do_close_internal+0x3e>
 800c03c:	4b80      	ldr	r3, [pc, #512]	; (800c240 <lwip_netconn_do_close_internal+0x234>)
 800c03e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800c042:	4982      	ldr	r1, [pc, #520]	; (800c24c <lwip_netconn_do_close_internal+0x240>)
 800c044:	4880      	ldr	r0, [pc, #512]	; (800c248 <lwip_netconn_do_close_internal+0x23c>)
 800c046:	f011 faeb 	bl	801d620 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	785b      	ldrb	r3, [r3, #1]
 800c04e:	2b04      	cmp	r3, #4
 800c050:	d006      	beq.n	800c060 <lwip_netconn_do_close_internal+0x54>
 800c052:	4b7b      	ldr	r3, [pc, #492]	; (800c240 <lwip_netconn_do_close_internal+0x234>)
 800c054:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800c058:	497d      	ldr	r1, [pc, #500]	; (800c250 <lwip_netconn_do_close_internal+0x244>)
 800c05a:	487b      	ldr	r0, [pc, #492]	; (800c248 <lwip_netconn_do_close_internal+0x23c>)
 800c05c:	f011 fae0 	bl	801d620 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d106      	bne.n	800c076 <lwip_netconn_do_close_internal+0x6a>
 800c068:	4b75      	ldr	r3, [pc, #468]	; (800c240 <lwip_netconn_do_close_internal+0x234>)
 800c06a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800c06e:	4979      	ldr	r1, [pc, #484]	; (800c254 <lwip_netconn_do_close_internal+0x248>)
 800c070:	4875      	ldr	r0, [pc, #468]	; (800c248 <lwip_netconn_do_close_internal+0x23c>)
 800c072:	f011 fad5 	bl	801d620 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6a1b      	ldr	r3, [r3, #32]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d106      	bne.n	800c08c <lwip_netconn_do_close_internal+0x80>
 800c07e:	4b70      	ldr	r3, [pc, #448]	; (800c240 <lwip_netconn_do_close_internal+0x234>)
 800c080:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c084:	4974      	ldr	r1, [pc, #464]	; (800c258 <lwip_netconn_do_close_internal+0x24c>)
 800c086:	4870      	ldr	r0, [pc, #448]	; (800c248 <lwip_netconn_do_close_internal+0x23c>)
 800c088:	f011 faca 	bl	801d620 <iprintf>

  tpcb = conn->pcb.tcp;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a1b      	ldr	r3, [r3, #32]
 800c096:	7a1b      	ldrb	r3, [r3, #8]
 800c098:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
 800c09c:	f003 0301 	and.w	r3, r3, #1
 800c0a0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800c0a2:	7bfb      	ldrb	r3, [r7, #15]
 800c0a4:	f003 0302 	and.w	r3, r3, #2
 800c0a8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800c0aa:	7bfb      	ldrb	r3, [r7, #15]
 800c0ac:	2b03      	cmp	r3, #3
 800c0ae:	d102      	bne.n	800c0b6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	75bb      	strb	r3, [r7, #22]
 800c0b4:	e01f      	b.n	800c0f6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800c0b6:	7bbb      	ldrb	r3, [r7, #14]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00e      	beq.n	800c0da <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800c0c0:	2b05      	cmp	r3, #5
 800c0c2:	d007      	beq.n	800c0d4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800c0c8:	2b06      	cmp	r3, #6
 800c0ca:	d003      	beq.n	800c0d4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800c0d0:	2b08      	cmp	r3, #8
 800c0d2:	d102      	bne.n	800c0da <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	75bb      	strb	r3, [r7, #22]
 800c0d8:	e00d      	b.n	800c0f6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800c0da:	7b7b      	ldrb	r3, [r7, #13]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d008      	beq.n	800c0f2 <lwip_netconn_do_close_internal+0xe6>
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	8b5b      	ldrh	r3, [r3, #26]
 800c0e4:	f003 0310 	and.w	r3, r3, #16
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d002      	beq.n	800c0f2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	75bb      	strb	r3, [r7, #22]
 800c0f0:	e001      	b.n	800c0f6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800c0f6:	7dbb      	ldrb	r3, [r7, #22]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d003      	beq.n	800c104 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800c0fc:	2100      	movs	r1, #0
 800c0fe:	6938      	ldr	r0, [r7, #16]
 800c100:	f004 fa48 	bl	8010594 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	7d1b      	ldrb	r3, [r3, #20]
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d104      	bne.n	800c116 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800c10c:	2100      	movs	r1, #0
 800c10e:	6938      	ldr	r0, [r7, #16]
 800c110:	f004 fab8 	bl	8010684 <tcp_accept>
 800c114:	e01d      	b.n	800c152 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800c116:	7bbb      	ldrb	r3, [r7, #14]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d007      	beq.n	800c12c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800c11c:	2100      	movs	r1, #0
 800c11e:	6938      	ldr	r0, [r7, #16]
 800c120:	f004 fa4a 	bl	80105b8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800c124:	2100      	movs	r1, #0
 800c126:	6938      	ldr	r0, [r7, #16]
 800c128:	f004 faac 	bl	8010684 <tcp_accept>
    }
    if (shut_tx) {
 800c12c:	7b7b      	ldrb	r3, [r7, #13]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d003      	beq.n	800c13a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800c132:	2100      	movs	r1, #0
 800c134:	6938      	ldr	r0, [r7, #16]
 800c136:	f004 fa61 	bl	80105fc <tcp_sent>
    }
    if (shut_close) {
 800c13a:	7dbb      	ldrb	r3, [r7, #22]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d008      	beq.n	800c152 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800c140:	2200      	movs	r2, #0
 800c142:	2100      	movs	r1, #0
 800c144:	6938      	ldr	r0, [r7, #16]
 800c146:	f004 fab5 	bl	80106b4 <tcp_poll>
      tcp_err(tpcb, NULL);
 800c14a:	2100      	movs	r1, #0
 800c14c:	6938      	ldr	r0, [r7, #16]
 800c14e:	f004 fa77 	bl	8010640 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800c152:	7dbb      	ldrb	r3, [r7, #22]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d005      	beq.n	800c164 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800c158:	6938      	ldr	r0, [r7, #16]
 800c15a:	f003 f891 	bl	800f280 <tcp_close>
 800c15e:	4603      	mov	r3, r0
 800c160:	75fb      	strb	r3, [r7, #23]
 800c162:	e007      	b.n	800c174 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800c164:	7bbb      	ldrb	r3, [r7, #14]
 800c166:	7b7a      	ldrb	r2, [r7, #13]
 800c168:	4619      	mov	r1, r3
 800c16a:	6938      	ldr	r0, [r7, #16]
 800c16c:	f003 f8b4 	bl	800f2d8 <tcp_shutdown>
 800c170:	4603      	mov	r3, r0
 800c172:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800c174:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d102      	bne.n	800c182 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800c17c:	2301      	movs	r3, #1
 800c17e:	757b      	strb	r3, [r7, #21]
 800c180:	e016      	b.n	800c1b0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800c182:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c18a:	d10f      	bne.n	800c1ac <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6a1b      	ldr	r3, [r3, #32]
 800c190:	7a5b      	ldrb	r3, [r3, #9]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10c      	bne.n	800c1b0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800c196:	2301      	movs	r3, #1
 800c198:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800c19a:	7dbb      	ldrb	r3, [r7, #22]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d007      	beq.n	800c1b0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800c1a0:	6938      	ldr	r0, [r7, #16]
 800c1a2:	f003 f9b3 	bl	800f50c <tcp_abort>
          err = ERR_OK;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	75fb      	strb	r3, [r7, #23]
 800c1aa:	e001      	b.n	800c1b0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800c1b0:	7d7b      	ldrb	r3, [r7, #21]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d052      	beq.n	800c25c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a1b      	ldr	r3, [r3, #32]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	330c      	adds	r3, #12
 800c1be:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6a1b      	ldr	r3, [r3, #32]
 800c1c4:	7dfa      	ldrb	r2, [r7, #23]
 800c1c6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800c1d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d129      	bne.n	800c230 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800c1dc:	7dbb      	ldrb	r3, [r7, #22]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d00c      	beq.n	800c1fc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d005      	beq.n	800c1fc <lwip_netconn_do_close_internal+0x1f0>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	2104      	movs	r1, #4
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	4798      	blx	r3
      }
      if (shut_rx) {
 800c1fc:	7bbb      	ldrb	r3, [r7, #14]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d009      	beq.n	800c216 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c206:	2b00      	cmp	r3, #0
 800c208:	d005      	beq.n	800c216 <lwip_netconn_do_close_internal+0x20a>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c20e:	2200      	movs	r2, #0
 800c210:	2100      	movs	r1, #0
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	4798      	blx	r3
      }
      if (shut_tx) {
 800c216:	7b7b      	ldrb	r3, [r7, #13]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d009      	beq.n	800c230 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c220:	2b00      	cmp	r3, #0
 800c222:	d005      	beq.n	800c230 <lwip_netconn_do_close_internal+0x224>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c228:	2200      	movs	r2, #0
 800c22a:	2102      	movs	r1, #2
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c230:	78fb      	ldrb	r3, [r7, #3]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d002      	beq.n	800c23c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800c236:	68b8      	ldr	r0, [r7, #8]
 800c238:	f00c f846 	bl	80182c8 <sys_sem_signal>
    }
    return ERR_OK;
 800c23c:	2300      	movs	r3, #0
 800c23e:	e03c      	b.n	800c2ba <lwip_netconn_do_close_internal+0x2ae>
 800c240:	0801ed88 	.word	0x0801ed88
 800c244:	0801f05c 	.word	0x0801f05c
 800c248:	0801edcc 	.word	0x0801edcc
 800c24c:	0801f06c 	.word	0x0801f06c
 800c250:	0801f08c 	.word	0x0801f08c
 800c254:	0801f0b0 	.word	0x0801f0b0
 800c258:	0801eef0 	.word	0x0801eef0
  }
  if (!close_finished) {
 800c25c:	7d7b      	ldrb	r3, [r7, #21]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d11e      	bne.n	800c2a0 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	7d1b      	ldrb	r3, [r3, #20]
 800c266:	2b01      	cmp	r3, #1
 800c268:	d106      	bne.n	800c278 <lwip_netconn_do_close_internal+0x26c>
 800c26a:	4b16      	ldr	r3, [pc, #88]	; (800c2c4 <lwip_netconn_do_close_internal+0x2b8>)
 800c26c:	f240 4241 	movw	r2, #1089	; 0x441
 800c270:	4915      	ldr	r1, [pc, #84]	; (800c2c8 <lwip_netconn_do_close_internal+0x2bc>)
 800c272:	4816      	ldr	r0, [pc, #88]	; (800c2cc <lwip_netconn_do_close_internal+0x2c0>)
 800c274:	f011 f9d4 	bl	801d620 <iprintf>
    if (shut_tx) {
 800c278:	7b7b      	ldrb	r3, [r7, #13]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d003      	beq.n	800c286 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800c27e:	4914      	ldr	r1, [pc, #80]	; (800c2d0 <lwip_netconn_do_close_internal+0x2c4>)
 800c280:	6938      	ldr	r0, [r7, #16]
 800c282:	f004 f9bb 	bl	80105fc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800c286:	2201      	movs	r2, #1
 800c288:	4912      	ldr	r1, [pc, #72]	; (800c2d4 <lwip_netconn_do_close_internal+0x2c8>)
 800c28a:	6938      	ldr	r0, [r7, #16]
 800c28c:	f004 fa12 	bl	80106b4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800c290:	4911      	ldr	r1, [pc, #68]	; (800c2d8 <lwip_netconn_do_close_internal+0x2cc>)
 800c292:	6938      	ldr	r0, [r7, #16]
 800c294:	f004 f9d4 	bl	8010640 <tcp_err>
    tcp_arg(tpcb, conn);
 800c298:	6879      	ldr	r1, [r7, #4]
 800c29a:	6938      	ldr	r0, [r7, #16]
 800c29c:	f004 f97a 	bl	8010594 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800c2a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d106      	bne.n	800c2b6 <lwip_netconn_do_close_internal+0x2aa>
 800c2a8:	4b06      	ldr	r3, [pc, #24]	; (800c2c4 <lwip_netconn_do_close_internal+0x2b8>)
 800c2aa:	f240 424d 	movw	r2, #1101	; 0x44d
 800c2ae:	490b      	ldr	r1, [pc, #44]	; (800c2dc <lwip_netconn_do_close_internal+0x2d0>)
 800c2b0:	4806      	ldr	r0, [pc, #24]	; (800c2cc <lwip_netconn_do_close_internal+0x2c0>)
 800c2b2:	f011 f9b5 	bl	801d620 <iprintf>
  return err;
 800c2b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3718      	adds	r7, #24
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	0801ed88 	.word	0x0801ed88
 800c2c8:	0801f0c4 	.word	0x0801f0c4
 800c2cc:	0801edcc 	.word	0x0801edcc
 800c2d0:	0800b9fd 	.word	0x0800b9fd
 800c2d4:	0800b935 	.word	0x0800b935
 800c2d8:	0800baa5 	.word	0x0800baa5
 800c2dc:	0801f0e8 	.word	0x0801f0e8

0800c2e0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	785b      	ldrb	r3, [r3, #1]
 800c2f2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800c2f4:	7afb      	ldrb	r3, [r7, #11]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d00d      	beq.n	800c316 <lwip_netconn_do_delconn+0x36>
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c304:	2b10      	cmp	r3, #16
 800c306:	d006      	beq.n	800c316 <lwip_netconn_do_delconn+0x36>
 800c308:	4b60      	ldr	r3, [pc, #384]	; (800c48c <lwip_netconn_do_delconn+0x1ac>)
 800c30a:	f240 425e 	movw	r2, #1118	; 0x45e
 800c30e:	4960      	ldr	r1, [pc, #384]	; (800c490 <lwip_netconn_do_delconn+0x1b0>)
 800c310:	4860      	ldr	r0, [pc, #384]	; (800c494 <lwip_netconn_do_delconn+0x1b4>)
 800c312:	f011 f985 	bl	801d620 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800c316:	7afb      	ldrb	r3, [r7, #11]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d005      	beq.n	800c328 <lwip_netconn_do_delconn+0x48>
 800c31c:	7afb      	ldrb	r3, [r7, #11]
 800c31e:	2b02      	cmp	r3, #2
 800c320:	d002      	beq.n	800c328 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800c322:	7afb      	ldrb	r3, [r7, #11]
 800c324:	2b03      	cmp	r3, #3
 800c326:	d109      	bne.n	800c33c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800c328:	7afb      	ldrb	r3, [r7, #11]
 800c32a:	2b03      	cmp	r3, #3
 800c32c:	d10a      	bne.n	800c344 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	7f1b      	ldrb	r3, [r3, #28]
 800c334:	f003 0304 	and.w	r3, r3, #4
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d103      	bne.n	800c344 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	22fb      	movs	r2, #251	; 0xfb
 800c340:	711a      	strb	r2, [r3, #4]
 800c342:	e097      	b.n	800c474 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800c344:	7afb      	ldrb	r3, [r7, #11]
 800c346:	2b03      	cmp	r3, #3
 800c348:	d10d      	bne.n	800c366 <lwip_netconn_do_delconn+0x86>
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	7f1b      	ldrb	r3, [r3, #28]
 800c350:	f003 0304 	and.w	r3, r3, #4
 800c354:	2b00      	cmp	r3, #0
 800c356:	d106      	bne.n	800c366 <lwip_netconn_do_delconn+0x86>
 800c358:	4b4c      	ldr	r3, [pc, #304]	; (800c48c <lwip_netconn_do_delconn+0x1ac>)
 800c35a:	f240 427a 	movw	r2, #1146	; 0x47a
 800c35e:	494e      	ldr	r1, [pc, #312]	; (800c498 <lwip_netconn_do_delconn+0x1b8>)
 800c360:	484c      	ldr	r0, [pc, #304]	; (800c494 <lwip_netconn_do_delconn+0x1b4>)
 800c362:	f011 f95d 	bl	801d620 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2200      	movs	r2, #0
 800c36a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4618      	mov	r0, r3
 800c372:	f7ff fdcd 	bl	800bf10 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d05f      	beq.n	800c440 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c38a:	2b10      	cmp	r3, #16
 800c38c:	d00d      	beq.n	800c3aa <lwip_netconn_do_delconn+0xca>
 800c38e:	2b20      	cmp	r3, #32
 800c390:	d151      	bne.n	800c436 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	2200      	movs	r2, #0
 800c39a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f009 f9ea 	bl	801577c <udp_remove>
          break;
 800c3a8:	e046      	b.n	800c438 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	6a1b      	ldr	r3, [r3, #32]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d006      	beq.n	800c3c2 <lwip_netconn_do_delconn+0xe2>
 800c3b4:	4b35      	ldr	r3, [pc, #212]	; (800c48c <lwip_netconn_do_delconn+0x1ac>)
 800c3b6:	f240 4294 	movw	r2, #1172	; 0x494
 800c3ba:	4938      	ldr	r1, [pc, #224]	; (800c49c <lwip_netconn_do_delconn+0x1bc>)
 800c3bc:	4835      	ldr	r0, [pc, #212]	; (800c494 <lwip_netconn_do_delconn+0x1b4>)
 800c3be:	f011 f92f 	bl	801d620 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	2204      	movs	r2, #4
 800c3c8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2203      	movs	r2, #3
 800c3ce:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	68fa      	ldr	r2, [r7, #12]
 800c3d6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2100      	movs	r1, #0
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7ff fe14 	bl	800c00c <lwip_netconn_do_close_internal>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d04b      	beq.n	800c482 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	785b      	ldrb	r3, [r3, #1]
 800c3f0:	2b04      	cmp	r3, #4
 800c3f2:	d006      	beq.n	800c402 <lwip_netconn_do_delconn+0x122>
 800c3f4:	4b25      	ldr	r3, [pc, #148]	; (800c48c <lwip_netconn_do_delconn+0x1ac>)
 800c3f6:	f240 429a 	movw	r2, #1178	; 0x49a
 800c3fa:	4929      	ldr	r1, [pc, #164]	; (800c4a0 <lwip_netconn_do_delconn+0x1c0>)
 800c3fc:	4825      	ldr	r0, [pc, #148]	; (800c494 <lwip_netconn_do_delconn+0x1b4>)
 800c3fe:	f011 f90f 	bl	801d620 <iprintf>
            UNLOCK_TCPIP_CORE();
 800c402:	4828      	ldr	r0, [pc, #160]	; (800c4a4 <lwip_netconn_do_delconn+0x1c4>)
 800c404:	f00b ffd1 	bl	80183aa <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	330c      	adds	r3, #12
 800c40e:	2100      	movs	r1, #0
 800c410:	4618      	mov	r0, r3
 800c412:	f00b ff28 	bl	8018266 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800c416:	4823      	ldr	r0, [pc, #140]	; (800c4a4 <lwip_netconn_do_delconn+0x1c4>)
 800c418:	f00b ffb8 	bl	801838c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	785b      	ldrb	r3, [r3, #1]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d02d      	beq.n	800c482 <lwip_netconn_do_delconn+0x1a2>
 800c426:	4b19      	ldr	r3, [pc, #100]	; (800c48c <lwip_netconn_do_delconn+0x1ac>)
 800c428:	f240 429e 	movw	r2, #1182	; 0x49e
 800c42c:	491c      	ldr	r1, [pc, #112]	; (800c4a0 <lwip_netconn_do_delconn+0x1c0>)
 800c42e:	4819      	ldr	r0, [pc, #100]	; (800c494 <lwip_netconn_do_delconn+0x1b4>)
 800c430:	f011 f8f6 	bl	801d620 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800c434:	e025      	b.n	800c482 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800c436:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2200      	movs	r2, #0
 800c43e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c446:	2b00      	cmp	r3, #0
 800c448:	d007      	beq.n	800c45a <lwip_netconn_do_delconn+0x17a>
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c450:	68fa      	ldr	r2, [r7, #12]
 800c452:	6810      	ldr	r0, [r2, #0]
 800c454:	2200      	movs	r2, #0
 800c456:	2100      	movs	r1, #0
 800c458:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c460:	2b00      	cmp	r3, #0
 800c462:	d007      	beq.n	800c474 <lwip_netconn_do_delconn+0x194>
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c46a:	68fa      	ldr	r2, [r7, #12]
 800c46c:	6810      	ldr	r0, [r2, #0]
 800c46e:	2200      	movs	r2, #0
 800c470:	2102      	movs	r1, #2
 800c472:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	330c      	adds	r3, #12
 800c47a:	4618      	mov	r0, r3
 800c47c:	f00b ff3e 	bl	80182fc <sys_sem_valid>
 800c480:	e000      	b.n	800c484 <lwip_netconn_do_delconn+0x1a4>
          return;
 800c482:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	bf00      	nop
 800c48c:	0801ed88 	.word	0x0801ed88
 800c490:	0801f0f8 	.word	0x0801f0f8
 800c494:	0801edcc 	.word	0x0801edcc
 800c498:	0801f10c 	.word	0x0801f10c
 800c49c:	0801f12c 	.word	0x0801f12c
 800c4a0:	0801f148 	.word	0x0801f148
 800c4a4:	2000a2b8 	.word	0x2000a2b8

0800c4a8 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b088      	sub	sp, #32
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d102      	bne.n	800c4ca <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800c4c4:	f06f 0305 	mvn.w	r3, #5
 800c4c8:	e070      	b.n	800c5ac <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	785b      	ldrb	r3, [r3, #1]
 800c4ce:	2b03      	cmp	r3, #3
 800c4d0:	d006      	beq.n	800c4e0 <lwip_netconn_do_connected+0x38>
 800c4d2:	4b38      	ldr	r3, [pc, #224]	; (800c5b4 <lwip_netconn_do_connected+0x10c>)
 800c4d4:	f240 5223 	movw	r2, #1315	; 0x523
 800c4d8:	4937      	ldr	r1, [pc, #220]	; (800c5b8 <lwip_netconn_do_connected+0x110>)
 800c4da:	4838      	ldr	r0, [pc, #224]	; (800c5bc <lwip_netconn_do_connected+0x114>)
 800c4dc:	f011 f8a0 	bl	801d620 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	6a1b      	ldr	r3, [r3, #32]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d10c      	bne.n	800c502 <lwip_netconn_do_connected+0x5a>
 800c4e8:	69bb      	ldr	r3, [r7, #24]
 800c4ea:	7f1b      	ldrb	r3, [r3, #28]
 800c4ec:	f003 0304 	and.w	r3, r3, #4
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d106      	bne.n	800c502 <lwip_netconn_do_connected+0x5a>
 800c4f4:	4b2f      	ldr	r3, [pc, #188]	; (800c5b4 <lwip_netconn_do_connected+0x10c>)
 800c4f6:	f240 5224 	movw	r2, #1316	; 0x524
 800c4fa:	4931      	ldr	r1, [pc, #196]	; (800c5c0 <lwip_netconn_do_connected+0x118>)
 800c4fc:	482f      	ldr	r0, [pc, #188]	; (800c5bc <lwip_netconn_do_connected+0x114>)
 800c4fe:	f011 f88f 	bl	801d620 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800c502:	69bb      	ldr	r3, [r7, #24]
 800c504:	6a1b      	ldr	r3, [r3, #32]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d008      	beq.n	800c51c <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	6a1b      	ldr	r3, [r3, #32]
 800c50e:	79fa      	ldrb	r2, [r7, #7]
 800c510:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	6a1b      	ldr	r3, [r3, #32]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	330c      	adds	r3, #12
 800c51a:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c524:	2b10      	cmp	r3, #16
 800c526:	d106      	bne.n	800c536 <lwip_netconn_do_connected+0x8e>
 800c528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d102      	bne.n	800c536 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800c530:	69b8      	ldr	r0, [r7, #24]
 800c532:	f7ff fb8d 	bl	800bc50 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	7f1b      	ldrb	r3, [r3, #28]
 800c53a:	f003 0304 	and.w	r3, r3, #4
 800c53e:	2b00      	cmp	r3, #0
 800c540:	bf0c      	ite	eq
 800c542:	2301      	moveq	r3, #1
 800c544:	2300      	movne	r3, #0
 800c546:	b2db      	uxtb	r3, r3
 800c548:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	7f1b      	ldrb	r3, [r3, #28]
 800c54e:	f023 0304 	bic.w	r3, r3, #4
 800c552:	b2da      	uxtb	r2, r3
 800c554:	69bb      	ldr	r3, [r7, #24]
 800c556:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d002      	beq.n	800c564 <lwip_netconn_do_connected+0xbc>
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d10c      	bne.n	800c57e <lwip_netconn_do_connected+0xd6>
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d102      	bne.n	800c570 <lwip_netconn_do_connected+0xc8>
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d006      	beq.n	800c57e <lwip_netconn_do_connected+0xd6>
 800c570:	4b10      	ldr	r3, [pc, #64]	; (800c5b4 <lwip_netconn_do_connected+0x10c>)
 800c572:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800c576:	4913      	ldr	r1, [pc, #76]	; (800c5c4 <lwip_netconn_do_connected+0x11c>)
 800c578:	4810      	ldr	r0, [pc, #64]	; (800c5bc <lwip_netconn_do_connected+0x114>)
 800c57a:	f011 f851 	bl	801d620 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	2200      	movs	r2, #0
 800c582:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	2200      	movs	r2, #0
 800c588:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d005      	beq.n	800c59e <lwip_netconn_do_connected+0xf6>
 800c592:	69bb      	ldr	r3, [r7, #24]
 800c594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c596:	2200      	movs	r2, #0
 800c598:	2102      	movs	r1, #2
 800c59a:	69b8      	ldr	r0, [r7, #24]
 800c59c:	4798      	blx	r3

  if (was_blocking) {
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d002      	beq.n	800c5aa <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800c5a4:	69f8      	ldr	r0, [r7, #28]
 800c5a6:	f00b fe8f 	bl	80182c8 <sys_sem_signal>
  }
  return ERR_OK;
 800c5aa:	2300      	movs	r3, #0
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3720      	adds	r7, #32
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	0801ed88 	.word	0x0801ed88
 800c5b8:	0801f150 	.word	0x0801f150
 800c5bc:	0801edcc 	.word	0x0801edcc
 800c5c0:	0801f170 	.word	0x0801f170
 800c5c4:	0801f1b0 	.word	0x0801f1b0

0800c5c8 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b086      	sub	sp, #24
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d102      	bne.n	800c5e4 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800c5de:	23f1      	movs	r3, #241	; 0xf1
 800c5e0:	75fb      	strb	r3, [r7, #23]
 800c5e2:	e09b      	b.n	800c71c <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5ee:	2b10      	cmp	r3, #16
 800c5f0:	d00f      	beq.n	800c612 <lwip_netconn_do_connect+0x4a>
 800c5f2:	2b20      	cmp	r3, #32
 800c5f4:	f040 8087 	bne.w	800c706 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	6858      	ldr	r0, [r3, #4]
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	6899      	ldr	r1, [r3, #8]
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	899b      	ldrh	r3, [r3, #12]
 800c606:	461a      	mov	r2, r3
 800c608:	f009 f82a 	bl	8015660 <udp_connect>
 800c60c:	4603      	mov	r3, r0
 800c60e:	75fb      	strb	r3, [r7, #23]
        break;
 800c610:	e084      	b.n	800c71c <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	785b      	ldrb	r3, [r3, #1]
 800c618:	2b03      	cmp	r3, #3
 800c61a:	d102      	bne.n	800c622 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800c61c:	23f7      	movs	r3, #247	; 0xf7
 800c61e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800c620:	e07b      	b.n	800c71a <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	785b      	ldrb	r3, [r3, #1]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d002      	beq.n	800c632 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800c62c:	23f6      	movs	r3, #246	; 0xf6
 800c62e:	75fb      	strb	r3, [r7, #23]
        break;
 800c630:	e073      	b.n	800c71a <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4618      	mov	r0, r3
 800c638:	f7ff fb0a 	bl	800bc50 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	6858      	ldr	r0, [r3, #4]
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	6899      	ldr	r1, [r3, #8]
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	899a      	ldrh	r2, [r3, #12]
 800c64a:	4b38      	ldr	r3, [pc, #224]	; (800c72c <lwip_netconn_do_connect+0x164>)
 800c64c:	f003 f85a 	bl	800f704 <tcp_connect>
 800c650:	4603      	mov	r3, r0
 800c652:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800c654:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d15e      	bne.n	800c71a <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	7f1b      	ldrb	r3, [r3, #28]
 800c662:	f003 0302 	and.w	r3, r3, #2
 800c666:	2b00      	cmp	r3, #0
 800c668:	bf14      	ite	ne
 800c66a:	2301      	movne	r3, #1
 800c66c:	2300      	moveq	r3, #0
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2203      	movs	r2, #3
 800c678:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800c67a:	7bfb      	ldrb	r3, [r7, #15]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d009      	beq.n	800c694 <lwip_netconn_do_connect+0xcc>
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	7f1a      	ldrb	r2, [r3, #28]
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f042 0204 	orr.w	r2, r2, #4
 800c68e:	b2d2      	uxtb	r2, r2
 800c690:	771a      	strb	r2, [r3, #28]
 800c692:	e008      	b.n	800c6a6 <lwip_netconn_do_connect+0xde>
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	7f1a      	ldrb	r2, [r3, #28]
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f022 0204 	bic.w	r2, r2, #4
 800c6a2:	b2d2      	uxtb	r2, r2
 800c6a4:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800c6a6:	7bfb      	ldrb	r3, [r7, #15]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d002      	beq.n	800c6b2 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800c6ac:	23fb      	movs	r3, #251	; 0xfb
 800c6ae:	75fb      	strb	r3, [r7, #23]
        break;
 800c6b0:	e033      	b.n	800c71a <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	693a      	ldr	r2, [r7, #16]
 800c6b8:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	785b      	ldrb	r3, [r3, #1]
 800c6c0:	2b03      	cmp	r3, #3
 800c6c2:	d006      	beq.n	800c6d2 <lwip_netconn_do_connect+0x10a>
 800c6c4:	4b1a      	ldr	r3, [pc, #104]	; (800c730 <lwip_netconn_do_connect+0x168>)
 800c6c6:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800c6ca:	491a      	ldr	r1, [pc, #104]	; (800c734 <lwip_netconn_do_connect+0x16c>)
 800c6cc:	481a      	ldr	r0, [pc, #104]	; (800c738 <lwip_netconn_do_connect+0x170>)
 800c6ce:	f010 ffa7 	bl	801d620 <iprintf>
              UNLOCK_TCPIP_CORE();
 800c6d2:	481a      	ldr	r0, [pc, #104]	; (800c73c <lwip_netconn_do_connect+0x174>)
 800c6d4:	f00b fe69 	bl	80183aa <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	330c      	adds	r3, #12
 800c6de:	2100      	movs	r1, #0
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f00b fdc0 	bl	8018266 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800c6e6:	4815      	ldr	r0, [pc, #84]	; (800c73c <lwip_netconn_do_connect+0x174>)
 800c6e8:	f00b fe50 	bl	801838c <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	785b      	ldrb	r3, [r3, #1]
 800c6f2:	2b03      	cmp	r3, #3
 800c6f4:	d116      	bne.n	800c724 <lwip_netconn_do_connect+0x15c>
 800c6f6:	4b0e      	ldr	r3, [pc, #56]	; (800c730 <lwip_netconn_do_connect+0x168>)
 800c6f8:	f240 5274 	movw	r2, #1396	; 0x574
 800c6fc:	490d      	ldr	r1, [pc, #52]	; (800c734 <lwip_netconn_do_connect+0x16c>)
 800c6fe:	480e      	ldr	r0, [pc, #56]	; (800c738 <lwip_netconn_do_connect+0x170>)
 800c700:	f010 ff8e 	bl	801d620 <iprintf>
              return;
 800c704:	e00e      	b.n	800c724 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800c706:	4b0a      	ldr	r3, [pc, #40]	; (800c730 <lwip_netconn_do_connect+0x168>)
 800c708:	f240 527d 	movw	r2, #1405	; 0x57d
 800c70c:	490c      	ldr	r1, [pc, #48]	; (800c740 <lwip_netconn_do_connect+0x178>)
 800c70e:	480a      	ldr	r0, [pc, #40]	; (800c738 <lwip_netconn_do_connect+0x170>)
 800c710:	f010 ff86 	bl	801d620 <iprintf>
 800c714:	23fa      	movs	r3, #250	; 0xfa
 800c716:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800c718:	e000      	b.n	800c71c <lwip_netconn_do_connect+0x154>
        break;
 800c71a:	bf00      	nop
    }
  }
  msg->err = err;
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	7dfa      	ldrb	r2, [r7, #23]
 800c720:	711a      	strb	r2, [r3, #4]
 800c722:	e000      	b.n	800c726 <lwip_netconn_do_connect+0x15e>
              return;
 800c724:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800c726:	3718      	adds	r7, #24
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	0800c4a9 	.word	0x0800c4a9
 800c730:	0801ed88 	.word	0x0801ed88
 800c734:	0801f148 	.word	0x0801f148
 800c738:	0801edcc 	.word	0x0801edcc
 800c73c:	2000a2b8 	.word	0x2000a2b8
 800c740:	0801f1d0 	.word	0x0801f1d0

0800c744 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b086      	sub	sp, #24
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	2200      	movs	r2, #0
 800c754:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d022      	beq.n	800c7a6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c76a:	2b10      	cmp	r3, #16
 800c76c:	d11b      	bne.n	800c7a6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c77a:	d202      	bcs.n	800c782 <lwip_netconn_do_recv+0x3e>
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	b29b      	uxth	r3, r3
 800c780:	e001      	b.n	800c786 <lwip_netconn_do_recv+0x42>
 800c782:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c786:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	89fa      	ldrh	r2, [r7, #14]
 800c790:	4611      	mov	r1, r2
 800c792:	4618      	mov	r0, r3
 800c794:	f002 ff20 	bl	800f5d8 <tcp_recved>
        remaining -= recved;
 800c798:	89fb      	ldrh	r3, [r7, #14]
 800c79a:	697a      	ldr	r2, [r7, #20]
 800c79c:	1ad3      	subs	r3, r2, r3
 800c79e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d1e6      	bne.n	800c774 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c7a6:	bf00      	nop
 800c7a8:	3718      	adds	r7, #24
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
	...

0800c7b0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b088      	sub	sp, #32
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d106      	bne.n	800c7d4 <lwip_netconn_do_writemore+0x24>
 800c7c6:	4b96      	ldr	r3, [pc, #600]	; (800ca20 <lwip_netconn_do_writemore+0x270>)
 800c7c8:	f240 6273 	movw	r2, #1651	; 0x673
 800c7cc:	4995      	ldr	r1, [pc, #596]	; (800ca24 <lwip_netconn_do_writemore+0x274>)
 800c7ce:	4896      	ldr	r0, [pc, #600]	; (800ca28 <lwip_netconn_do_writemore+0x278>)
 800c7d0:	f010 ff26 	bl	801d620 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	785b      	ldrb	r3, [r3, #1]
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d006      	beq.n	800c7ea <lwip_netconn_do_writemore+0x3a>
 800c7dc:	4b90      	ldr	r3, [pc, #576]	; (800ca20 <lwip_netconn_do_writemore+0x270>)
 800c7de:	f240 6274 	movw	r2, #1652	; 0x674
 800c7e2:	4992      	ldr	r1, [pc, #584]	; (800ca2c <lwip_netconn_do_writemore+0x27c>)
 800c7e4:	4890      	ldr	r0, [pc, #576]	; (800ca28 <lwip_netconn_do_writemore+0x278>)
 800c7e6:	f010 ff1b 	bl	801d620 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6a1b      	ldr	r3, [r3, #32]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d106      	bne.n	800c800 <lwip_netconn_do_writemore+0x50>
 800c7f2:	4b8b      	ldr	r3, [pc, #556]	; (800ca20 <lwip_netconn_do_writemore+0x270>)
 800c7f4:	f240 6275 	movw	r2, #1653	; 0x675
 800c7f8:	498d      	ldr	r1, [pc, #564]	; (800ca30 <lwip_netconn_do_writemore+0x280>)
 800c7fa:	488b      	ldr	r0, [pc, #556]	; (800ca28 <lwip_netconn_do_writemore+0x278>)
 800c7fc:	f010 ff10 	bl	801d620 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d106      	bne.n	800c816 <lwip_netconn_do_writemore+0x66>
 800c808:	4b85      	ldr	r3, [pc, #532]	; (800ca20 <lwip_netconn_do_writemore+0x270>)
 800c80a:	f240 6276 	movw	r2, #1654	; 0x676
 800c80e:	4989      	ldr	r1, [pc, #548]	; (800ca34 <lwip_netconn_do_writemore+0x284>)
 800c810:	4885      	ldr	r0, [pc, #532]	; (800ca28 <lwip_netconn_do_writemore+0x278>)
 800c812:	f010 ff05 	bl	801d620 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6a1b      	ldr	r3, [r3, #32]
 800c81a:	699a      	ldr	r2, [r3, #24]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6a1b      	ldr	r3, [r3, #32]
 800c820:	695b      	ldr	r3, [r3, #20]
 800c822:	429a      	cmp	r2, r3
 800c824:	d306      	bcc.n	800c834 <lwip_netconn_do_writemore+0x84>
 800c826:	4b7e      	ldr	r3, [pc, #504]	; (800ca20 <lwip_netconn_do_writemore+0x270>)
 800c828:	f240 6277 	movw	r2, #1655	; 0x677
 800c82c:	4982      	ldr	r1, [pc, #520]	; (800ca38 <lwip_netconn_do_writemore+0x288>)
 800c82e:	487e      	ldr	r0, [pc, #504]	; (800ca28 <lwip_netconn_do_writemore+0x278>)
 800c830:	f010 fef6 	bl	801d620 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6a1b      	ldr	r3, [r3, #32]
 800c838:	899b      	ldrh	r3, [r3, #12]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d106      	bne.n	800c84c <lwip_netconn_do_writemore+0x9c>
 800c83e:	4b78      	ldr	r3, [pc, #480]	; (800ca20 <lwip_netconn_do_writemore+0x270>)
 800c840:	f240 6279 	movw	r2, #1657	; 0x679
 800c844:	497d      	ldr	r1, [pc, #500]	; (800ca3c <lwip_netconn_do_writemore+0x28c>)
 800c846:	4878      	ldr	r0, [pc, #480]	; (800ca28 <lwip_netconn_do_writemore+0x278>)
 800c848:	f010 feea 	bl	801d620 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6a1b      	ldr	r3, [r3, #32]
 800c850:	7f1b      	ldrb	r3, [r3, #28]
 800c852:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	7f1b      	ldrb	r3, [r3, #28]
 800c858:	f003 0302 	and.w	r3, r3, #2
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d104      	bne.n	800c86a <lwip_netconn_do_writemore+0xba>
 800c860:	7ebb      	ldrb	r3, [r7, #26]
 800c862:	f003 0304 	and.w	r3, r3, #4
 800c866:	2b00      	cmp	r3, #0
 800c868:	d001      	beq.n	800c86e <lwip_netconn_do_writemore+0xbe>
 800c86a:	2301      	movs	r3, #1
 800c86c:	e000      	b.n	800c870 <lwip_netconn_do_writemore+0xc0>
 800c86e:	2300      	movs	r3, #0
 800c870:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6a1b      	ldr	r3, [r3, #32]
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6a1b      	ldr	r3, [r3, #32]
 800c87e:	691b      	ldr	r3, [r3, #16]
 800c880:	4413      	add	r3, r2
 800c882:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6a1b      	ldr	r3, [r3, #32]
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	685a      	ldr	r2, [r3, #4]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6a1b      	ldr	r3, [r3, #32]
 800c890:	691b      	ldr	r3, [r3, #16]
 800c892:	1ad3      	subs	r3, r2, r3
 800c894:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c89c:	d307      	bcc.n	800c8ae <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800c89e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c8a2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c8a4:	7ebb      	ldrb	r3, [r7, #26]
 800c8a6:	f043 0302 	orr.w	r3, r3, #2
 800c8aa:	76bb      	strb	r3, [r7, #26]
 800c8ac:	e001      	b.n	800c8b2 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c8ba:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800c8bc:	89fa      	ldrh	r2, [r7, #14]
 800c8be:	8bbb      	ldrh	r3, [r7, #28]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d216      	bcs.n	800c8f2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800c8c4:	89fb      	ldrh	r3, [r7, #14]
 800c8c6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800c8c8:	7e3b      	ldrb	r3, [r7, #24]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00d      	beq.n	800c8ea <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800c8ce:	8bbb      	ldrh	r3, [r7, #28]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10e      	bne.n	800c8f2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6a1b      	ldr	r3, [r3, #32]
 800c8d8:	699b      	ldr	r3, [r3, #24]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d102      	bne.n	800c8e4 <lwip_netconn_do_writemore+0x134>
 800c8de:	f06f 0306 	mvn.w	r3, #6
 800c8e2:	e000      	b.n	800c8e6 <lwip_netconn_do_writemore+0x136>
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800c8e8:	e07d      	b.n	800c9e6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800c8ea:	7ebb      	ldrb	r3, [r7, #26]
 800c8ec:	f043 0302 	orr.w	r3, r3, #2
 800c8f0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6a1b      	ldr	r3, [r3, #32]
 800c8f6:	691a      	ldr	r2, [r3, #16]
 800c8f8:	8bbb      	ldrh	r3, [r7, #28]
 800c8fa:	441a      	add	r2, r3
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6a1b      	ldr	r3, [r3, #32]
 800c900:	689b      	ldr	r3, [r3, #8]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	429a      	cmp	r2, r3
 800c906:	d906      	bls.n	800c916 <lwip_netconn_do_writemore+0x166>
 800c908:	4b45      	ldr	r3, [pc, #276]	; (800ca20 <lwip_netconn_do_writemore+0x270>)
 800c90a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800c90e:	494c      	ldr	r1, [pc, #304]	; (800ca40 <lwip_netconn_do_writemore+0x290>)
 800c910:	4845      	ldr	r0, [pc, #276]	; (800ca28 <lwip_netconn_do_writemore+0x278>)
 800c912:	f010 fe85 	bl	801d620 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c916:	8bbb      	ldrh	r3, [r7, #28]
 800c918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d103      	bne.n	800c928 <lwip_netconn_do_writemore+0x178>
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c926:	d209      	bcs.n	800c93c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c92c:	8bba      	ldrh	r2, [r7, #28]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d10b      	bne.n	800c94a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6a1b      	ldr	r3, [r3, #32]
 800c936:	899b      	ldrh	r3, [r3, #12]
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d906      	bls.n	800c94a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800c93c:	2301      	movs	r3, #1
 800c93e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c940:	7ebb      	ldrb	r3, [r7, #26]
 800c942:	f043 0302 	orr.w	r3, r3, #2
 800c946:	76bb      	strb	r3, [r7, #26]
 800c948:	e001      	b.n	800c94e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800c94a:	2300      	movs	r3, #0
 800c94c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6858      	ldr	r0, [r3, #4]
 800c952:	7ebb      	ldrb	r3, [r7, #26]
 800c954:	8bba      	ldrh	r2, [r7, #28]
 800c956:	6979      	ldr	r1, [r7, #20]
 800c958:	f006 fd5e 	bl	8013418 <tcp_write>
 800c95c:	4603      	mov	r3, r0
 800c95e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800c960:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d12c      	bne.n	800c9c2 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6a1b      	ldr	r3, [r3, #32]
 800c96c:	6999      	ldr	r1, [r3, #24]
 800c96e:	8bba      	ldrh	r2, [r7, #28]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6a1b      	ldr	r3, [r3, #32]
 800c974:	440a      	add	r2, r1
 800c976:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6a1b      	ldr	r3, [r3, #32]
 800c97c:	6919      	ldr	r1, [r3, #16]
 800c97e:	8bba      	ldrh	r2, [r7, #28]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6a1b      	ldr	r3, [r3, #32]
 800c984:	440a      	add	r2, r1
 800c986:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6a1b      	ldr	r3, [r3, #32]
 800c98c:	691a      	ldr	r2, [r3, #16]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6a1b      	ldr	r3, [r3, #32]
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	429a      	cmp	r2, r3
 800c998:	d113      	bne.n	800c9c2 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6a1b      	ldr	r3, [r3, #32]
 800c99e:	899a      	ldrh	r2, [r3, #12]
 800c9a0:	3a01      	subs	r2, #1
 800c9a2:	b292      	uxth	r2, r2
 800c9a4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6a1b      	ldr	r3, [r3, #32]
 800c9aa:	899b      	ldrh	r3, [r3, #12]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d008      	beq.n	800c9c2 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6a1b      	ldr	r3, [r3, #32]
 800c9b4:	689a      	ldr	r2, [r3, #8]
 800c9b6:	3208      	adds	r2, #8
 800c9b8:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6a1b      	ldr	r3, [r3, #32]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800c9c2:	7e7b      	ldrb	r3, [r7, #25]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d004      	beq.n	800c9d2 <lwip_netconn_do_writemore+0x222>
 800c9c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	f43f af50 	beq.w	800c872 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800c9d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d004      	beq.n	800c9e4 <lwip_netconn_do_writemore+0x234>
 800c9da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c9de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9e2:	d146      	bne.n	800ca72 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800c9e4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800c9e6:	7e3b      	ldrb	r3, [r7, #24]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d02b      	beq.n	800ca44 <lwip_netconn_do_writemore+0x294>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6a1b      	ldr	r3, [r3, #32]
 800c9f0:	699a      	ldr	r2, [r3, #24]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6a1b      	ldr	r3, [r3, #32]
 800c9f6:	695b      	ldr	r3, [r3, #20]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d223      	bcs.n	800ca44 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d005      	beq.n	800ca10 <lwip_netconn_do_writemore+0x260>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca08:	2200      	movs	r2, #0
 800ca0a:	2103      	movs	r1, #3
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	7f1b      	ldrb	r3, [r3, #28]
 800ca14:	f043 0310 	orr.w	r3, r3, #16
 800ca18:	b2da      	uxtb	r2, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	771a      	strb	r2, [r3, #28]
 800ca1e:	e028      	b.n	800ca72 <lwip_netconn_do_writemore+0x2c2>
 800ca20:	0801ed88 	.word	0x0801ed88
 800ca24:	0801eee0 	.word	0x0801eee0
 800ca28:	0801edcc 	.word	0x0801edcc
 800ca2c:	0801f1e8 	.word	0x0801f1e8
 800ca30:	0801eef0 	.word	0x0801eef0
 800ca34:	0801f208 	.word	0x0801f208
 800ca38:	0801f220 	.word	0x0801f220
 800ca3c:	0801f260 	.word	0x0801f260
 800ca40:	0801f288 	.word	0x0801f288
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ca4c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ca50:	d305      	bcc.n	800ca5e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ca5a:	2b04      	cmp	r3, #4
 800ca5c:	d909      	bls.n	800ca72 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d005      	beq.n	800ca72 <lwip_netconn_do_writemore+0x2c2>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	2103      	movs	r1, #3
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800ca72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d11d      	bne.n	800cab6 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6a1b      	ldr	r3, [r3, #32]
 800ca7e:	699a      	ldr	r2, [r3, #24]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6a1b      	ldr	r3, [r3, #32]
 800ca84:	695b      	ldr	r3, [r3, #20]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d002      	beq.n	800ca90 <lwip_netconn_do_writemore+0x2e0>
 800ca8a:	7e3b      	ldrb	r3, [r7, #24]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d001      	beq.n	800ca94 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800ca90:	2301      	movs	r3, #1
 800ca92:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f007 faa7 	bl	8013fec <tcp_output>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800caa2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800caa6:	f113 0f04 	cmn.w	r3, #4
 800caaa:	d12c      	bne.n	800cb06 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800caac:	7b3b      	ldrb	r3, [r7, #12]
 800caae:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cab0:	2301      	movs	r3, #1
 800cab2:	76fb      	strb	r3, [r7, #27]
 800cab4:	e027      	b.n	800cb06 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800cab6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800caba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cabe:	d120      	bne.n	800cb02 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	4618      	mov	r0, r3
 800cac6:	f007 fa91 	bl	8013fec <tcp_output>
 800caca:	4603      	mov	r3, r0
 800cacc:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800cace:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800cad2:	f113 0f04 	cmn.w	r3, #4
 800cad6:	d104      	bne.n	800cae2 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800cad8:	7b7b      	ldrb	r3, [r7, #13]
 800cada:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cadc:	2301      	movs	r3, #1
 800cade:	76fb      	strb	r3, [r7, #27]
 800cae0:	e011      	b.n	800cb06 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800cae2:	7e3b      	ldrb	r3, [r7, #24]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d00e      	beq.n	800cb06 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6a1b      	ldr	r3, [r3, #32]
 800caec:	699b      	ldr	r3, [r3, #24]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d102      	bne.n	800caf8 <lwip_netconn_do_writemore+0x348>
 800caf2:	f06f 0306 	mvn.w	r3, #6
 800caf6:	e000      	b.n	800cafa <lwip_netconn_do_writemore+0x34a>
 800caf8:	2300      	movs	r3, #0
 800cafa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cafc:	2301      	movs	r3, #1
 800cafe:	76fb      	strb	r3, [r7, #27]
 800cb00:	e001      	b.n	800cb06 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800cb02:	2301      	movs	r3, #1
 800cb04:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800cb06:	7efb      	ldrb	r3, [r7, #27]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d015      	beq.n	800cb38 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6a1b      	ldr	r3, [r3, #32]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	330c      	adds	r3, #12
 800cb14:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6a1b      	ldr	r3, [r3, #32]
 800cb1a:	7ffa      	ldrb	r2, [r7, #31]
 800cb1c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2200      	movs	r2, #0
 800cb22:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2200      	movs	r2, #0
 800cb28:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800cb2a:	78fb      	ldrb	r3, [r7, #3]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d006      	beq.n	800cb3e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800cb30:	68b8      	ldr	r0, [r7, #8]
 800cb32:	f00b fbc9 	bl	80182c8 <sys_sem_signal>
 800cb36:	e002      	b.n	800cb3e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800cb38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb3c:	e000      	b.n	800cb40 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800cb3e:	2300      	movs	r3, #0
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3720      	adds	r7, #32
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7fe fd5c 	bl	800b616 <netconn_err>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800cb62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d166      	bne.n	800cc38 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb74:	2b10      	cmp	r3, #16
 800cb76:	d15d      	bne.n	800cc34 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	785b      	ldrb	r3, [r3, #1]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d002      	beq.n	800cb88 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800cb82:	23fb      	movs	r3, #251	; 0xfb
 800cb84:	73fb      	strb	r3, [r7, #15]
 800cb86:	e057      	b.n	800cc38 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d04d      	beq.n	800cc2e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2201      	movs	r2, #1
 800cb98:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	6a1b      	ldr	r3, [r3, #32]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d006      	beq.n	800cbb2 <lwip_netconn_do_write+0x6a>
 800cba4:	4b28      	ldr	r3, [pc, #160]	; (800cc48 <lwip_netconn_do_write+0x100>)
 800cba6:	f240 7223 	movw	r2, #1827	; 0x723
 800cbaa:	4928      	ldr	r1, [pc, #160]	; (800cc4c <lwip_netconn_do_write+0x104>)
 800cbac:	4828      	ldr	r0, [pc, #160]	; (800cc50 <lwip_netconn_do_write+0x108>)
 800cbae:	f010 fd37 	bl	801d620 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	695b      	ldr	r3, [r3, #20]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d106      	bne.n	800cbc8 <lwip_netconn_do_write+0x80>
 800cbba:	4b23      	ldr	r3, [pc, #140]	; (800cc48 <lwip_netconn_do_write+0x100>)
 800cbbc:	f240 7224 	movw	r2, #1828	; 0x724
 800cbc0:	4924      	ldr	r1, [pc, #144]	; (800cc54 <lwip_netconn_do_write+0x10c>)
 800cbc2:	4823      	ldr	r0, [pc, #140]	; (800cc50 <lwip_netconn_do_write+0x108>)
 800cbc4:	f010 fd2c 	bl	801d620 <iprintf>
        msg->conn->current_msg = msg;
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	68ba      	ldr	r2, [r7, #8]
 800cbce:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7ff fdea 	bl	800c7b0 <lwip_netconn_do_writemore>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d02e      	beq.n	800cc40 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	785b      	ldrb	r3, [r3, #1]
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d006      	beq.n	800cbfa <lwip_netconn_do_write+0xb2>
 800cbec:	4b16      	ldr	r3, [pc, #88]	; (800cc48 <lwip_netconn_do_write+0x100>)
 800cbee:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800cbf2:	4919      	ldr	r1, [pc, #100]	; (800cc58 <lwip_netconn_do_write+0x110>)
 800cbf4:	4816      	ldr	r0, [pc, #88]	; (800cc50 <lwip_netconn_do_write+0x108>)
 800cbf6:	f010 fd13 	bl	801d620 <iprintf>
          UNLOCK_TCPIP_CORE();
 800cbfa:	4818      	ldr	r0, [pc, #96]	; (800cc5c <lwip_netconn_do_write+0x114>)
 800cbfc:	f00b fbd5 	bl	80183aa <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	330c      	adds	r3, #12
 800cc06:	2100      	movs	r1, #0
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f00b fb2c 	bl	8018266 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800cc0e:	4813      	ldr	r0, [pc, #76]	; (800cc5c <lwip_netconn_do_write+0x114>)
 800cc10:	f00b fbbc 	bl	801838c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	785b      	ldrb	r3, [r3, #1]
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d110      	bne.n	800cc40 <lwip_netconn_do_write+0xf8>
 800cc1e:	4b0a      	ldr	r3, [pc, #40]	; (800cc48 <lwip_netconn_do_write+0x100>)
 800cc20:	f240 722c 	movw	r2, #1836	; 0x72c
 800cc24:	490c      	ldr	r1, [pc, #48]	; (800cc58 <lwip_netconn_do_write+0x110>)
 800cc26:	480a      	ldr	r0, [pc, #40]	; (800cc50 <lwip_netconn_do_write+0x108>)
 800cc28:	f010 fcfa 	bl	801d620 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800cc2c:	e008      	b.n	800cc40 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800cc2e:	23f5      	movs	r3, #245	; 0xf5
 800cc30:	73fb      	strb	r3, [r7, #15]
 800cc32:	e001      	b.n	800cc38 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800cc34:	23fa      	movs	r3, #250	; 0xfa
 800cc36:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	7bfa      	ldrb	r2, [r7, #15]
 800cc3c:	711a      	strb	r2, [r3, #4]
 800cc3e:	e000      	b.n	800cc42 <lwip_netconn_do_write+0xfa>
        return;
 800cc40:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800cc42:	3710      	adds	r7, #16
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	0801ed88 	.word	0x0801ed88
 800cc4c:	0801f12c 	.word	0x0801f12c
 800cc50:	0801edcc 	.word	0x0801edcc
 800cc54:	0801f2b4 	.word	0x0801f2b4
 800cc58:	0801f148 	.word	0x0801f148
 800cc5c:	2000a2b8 	.word	0x2000a2b8

0800cc60 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	785b      	ldrb	r3, [r3, #1]
 800cc72:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d069      	beq.n	800cd52 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800cc88:	2b10      	cmp	r3, #16
 800cc8a:	d162      	bne.n	800cd52 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800cc90:	2b03      	cmp	r3, #3
 800cc92:	d002      	beq.n	800cc9a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800cc94:	7afb      	ldrb	r3, [r7, #11]
 800cc96:	2b02      	cmp	r3, #2
 800cc98:	d05b      	beq.n	800cd52 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800cc9a:	7afb      	ldrb	r3, [r7, #11]
 800cc9c:	2b03      	cmp	r3, #3
 800cc9e:	d103      	bne.n	800cca8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	22f5      	movs	r2, #245	; 0xf5
 800cca4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800cca6:	e059      	b.n	800cd5c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800cca8:	7afb      	ldrb	r3, [r7, #11]
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d103      	bne.n	800ccb6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	22fb      	movs	r2, #251	; 0xfb
 800ccb2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ccb4:	e052      	b.n	800cd5c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	7a1b      	ldrb	r3, [r3, #8]
 800ccba:	f003 0301 	and.w	r3, r3, #1
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d004      	beq.n	800cccc <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7ff f922 	bl	800bf10 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	6a1b      	ldr	r3, [r3, #32]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d006      	beq.n	800cce4 <lwip_netconn_do_close+0x84>
 800ccd6:	4b23      	ldr	r3, [pc, #140]	; (800cd64 <lwip_netconn_do_close+0x104>)
 800ccd8:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800ccdc:	4922      	ldr	r1, [pc, #136]	; (800cd68 <lwip_netconn_do_close+0x108>)
 800ccde:	4823      	ldr	r0, [pc, #140]	; (800cd6c <lwip_netconn_do_close+0x10c>)
 800cce0:	f010 fc9e 	bl	801d620 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2204      	movs	r2, #4
 800ccea:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7ff f986 	bl	800c00c <lwip_netconn_do_close_internal>
 800cd00:	4603      	mov	r3, r0
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d029      	beq.n	800cd5a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	785b      	ldrb	r3, [r3, #1]
 800cd0c:	2b04      	cmp	r3, #4
 800cd0e:	d006      	beq.n	800cd1e <lwip_netconn_do_close+0xbe>
 800cd10:	4b14      	ldr	r3, [pc, #80]	; (800cd64 <lwip_netconn_do_close+0x104>)
 800cd12:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800cd16:	4916      	ldr	r1, [pc, #88]	; (800cd70 <lwip_netconn_do_close+0x110>)
 800cd18:	4814      	ldr	r0, [pc, #80]	; (800cd6c <lwip_netconn_do_close+0x10c>)
 800cd1a:	f010 fc81 	bl	801d620 <iprintf>
        UNLOCK_TCPIP_CORE();
 800cd1e:	4815      	ldr	r0, [pc, #84]	; (800cd74 <lwip_netconn_do_close+0x114>)
 800cd20:	f00b fb43 	bl	80183aa <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	330c      	adds	r3, #12
 800cd2a:	2100      	movs	r1, #0
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f00b fa9a 	bl	8018266 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800cd32:	4810      	ldr	r0, [pc, #64]	; (800cd74 <lwip_netconn_do_close+0x114>)
 800cd34:	f00b fb2a 	bl	801838c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	785b      	ldrb	r3, [r3, #1]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d00b      	beq.n	800cd5a <lwip_netconn_do_close+0xfa>
 800cd42:	4b08      	ldr	r3, [pc, #32]	; (800cd64 <lwip_netconn_do_close+0x104>)
 800cd44:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800cd48:	4909      	ldr	r1, [pc, #36]	; (800cd70 <lwip_netconn_do_close+0x110>)
 800cd4a:	4808      	ldr	r0, [pc, #32]	; (800cd6c <lwip_netconn_do_close+0x10c>)
 800cd4c:	f010 fc68 	bl	801d620 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800cd50:	e003      	b.n	800cd5a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	22f5      	movs	r2, #245	; 0xf5
 800cd56:	711a      	strb	r2, [r3, #4]
 800cd58:	e000      	b.n	800cd5c <lwip_netconn_do_close+0xfc>
      return;
 800cd5a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	0801ed88 	.word	0x0801ed88
 800cd68:	0801f12c 	.word	0x0801f12c
 800cd6c:	0801edcc 	.word	0x0801edcc
 800cd70:	0801f148 	.word	0x0801f148
 800cd74:	2000a2b8 	.word	0x2000a2b8

0800cd78 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d013      	beq.n	800cdae <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d00b      	beq.n	800cda6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4618      	mov	r0, r3
 800cd94:	f001 fdca 	bl	800e92c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	605a      	str	r2, [r3, #4]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	685a      	ldr	r2, [r3, #4]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800cda6:	6879      	ldr	r1, [r7, #4]
 800cda8:	2006      	movs	r0, #6
 800cdaa:	f000 ff1b 	bl	800dbe4 <memp_free>
  }
}
 800cdae:	bf00      	nop
 800cdb0:	3708      	adds	r7, #8
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
	...

0800cdb8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800cdc2:	f008 f9cb 	bl	801515c <sys_timeouts_sleeptime>
 800cdc6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdce:	d10b      	bne.n	800cde8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800cdd0:	4813      	ldr	r0, [pc, #76]	; (800ce20 <tcpip_timeouts_mbox_fetch+0x68>)
 800cdd2:	f00b faea 	bl	80183aa <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	6839      	ldr	r1, [r7, #0]
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f00b f9a2 	bl	8018124 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800cde0:	480f      	ldr	r0, [pc, #60]	; (800ce20 <tcpip_timeouts_mbox_fetch+0x68>)
 800cde2:	f00b fad3 	bl	801838c <sys_mutex_lock>
    return;
 800cde6:	e018      	b.n	800ce1a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d102      	bne.n	800cdf4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800cdee:	f008 f97b 	bl	80150e8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cdf2:	e7e6      	b.n	800cdc2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800cdf4:	480a      	ldr	r0, [pc, #40]	; (800ce20 <tcpip_timeouts_mbox_fetch+0x68>)
 800cdf6:	f00b fad8 	bl	80183aa <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800cdfa:	68fa      	ldr	r2, [r7, #12]
 800cdfc:	6839      	ldr	r1, [r7, #0]
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f00b f990 	bl	8018124 <sys_arch_mbox_fetch>
 800ce04:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ce06:	4806      	ldr	r0, [pc, #24]	; (800ce20 <tcpip_timeouts_mbox_fetch+0x68>)
 800ce08:	f00b fac0 	bl	801838c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce12:	d102      	bne.n	800ce1a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ce14:	f008 f968 	bl	80150e8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ce18:	e7d3      	b.n	800cdc2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ce1a:	3710      	adds	r7, #16
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	2000a2b8 	.word	0x2000a2b8

0800ce24 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ce2c:	4810      	ldr	r0, [pc, #64]	; (800ce70 <tcpip_thread+0x4c>)
 800ce2e:	f00b faad 	bl	801838c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ce32:	4b10      	ldr	r3, [pc, #64]	; (800ce74 <tcpip_thread+0x50>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d005      	beq.n	800ce46 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ce3a:	4b0e      	ldr	r3, [pc, #56]	; (800ce74 <tcpip_thread+0x50>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4a0e      	ldr	r2, [pc, #56]	; (800ce78 <tcpip_thread+0x54>)
 800ce40:	6812      	ldr	r2, [r2, #0]
 800ce42:	4610      	mov	r0, r2
 800ce44:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ce46:	f107 030c 	add.w	r3, r7, #12
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	480b      	ldr	r0, [pc, #44]	; (800ce7c <tcpip_thread+0x58>)
 800ce4e:	f7ff ffb3 	bl	800cdb8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d106      	bne.n	800ce66 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ce58:	4b09      	ldr	r3, [pc, #36]	; (800ce80 <tcpip_thread+0x5c>)
 800ce5a:	2291      	movs	r2, #145	; 0x91
 800ce5c:	4909      	ldr	r1, [pc, #36]	; (800ce84 <tcpip_thread+0x60>)
 800ce5e:	480a      	ldr	r0, [pc, #40]	; (800ce88 <tcpip_thread+0x64>)
 800ce60:	f010 fbde 	bl	801d620 <iprintf>
      continue;
 800ce64:	e003      	b.n	800ce6e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f000 f80f 	bl	800ce8c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ce6e:	e7ea      	b.n	800ce46 <tcpip_thread+0x22>
 800ce70:	2000a2b8 	.word	0x2000a2b8
 800ce74:	2000a2ac 	.word	0x2000a2ac
 800ce78:	2000a2b0 	.word	0x2000a2b0
 800ce7c:	2000a2b4 	.word	0x2000a2b4
 800ce80:	0801f2e0 	.word	0x0801f2e0
 800ce84:	0801f310 	.word	0x0801f310
 800ce88:	0801f330 	.word	0x0801f330

0800ce8c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	2b02      	cmp	r3, #2
 800ce9a:	d026      	beq.n	800ceea <tcpip_thread_handle_msg+0x5e>
 800ce9c:	2b02      	cmp	r3, #2
 800ce9e:	dc2b      	bgt.n	800cef8 <tcpip_thread_handle_msg+0x6c>
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d002      	beq.n	800ceaa <tcpip_thread_handle_msg+0x1e>
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d015      	beq.n	800ced4 <tcpip_thread_handle_msg+0x48>
 800cea8:	e026      	b.n	800cef8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	68db      	ldr	r3, [r3, #12]
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	6850      	ldr	r0, [r2, #4]
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	6892      	ldr	r2, [r2, #8]
 800ceb6:	4611      	mov	r1, r2
 800ceb8:	4798      	blx	r3
 800ceba:	4603      	mov	r3, r0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d004      	beq.n	800ceca <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	4618      	mov	r0, r3
 800cec6:	f001 fd31 	bl	800e92c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ceca:	6879      	ldr	r1, [r7, #4]
 800cecc:	2009      	movs	r0, #9
 800cece:	f000 fe89 	bl	800dbe4 <memp_free>
      break;
 800ced2:	e018      	b.n	800cf06 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	6892      	ldr	r2, [r2, #8]
 800cedc:	4610      	mov	r0, r2
 800cede:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cee0:	6879      	ldr	r1, [r7, #4]
 800cee2:	2008      	movs	r0, #8
 800cee4:	f000 fe7e 	bl	800dbe4 <memp_free>
      break;
 800cee8:	e00d      	b.n	800cf06 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	6892      	ldr	r2, [r2, #8]
 800cef2:	4610      	mov	r0, r2
 800cef4:	4798      	blx	r3
      break;
 800cef6:	e006      	b.n	800cf06 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cef8:	4b05      	ldr	r3, [pc, #20]	; (800cf10 <tcpip_thread_handle_msg+0x84>)
 800cefa:	22cf      	movs	r2, #207	; 0xcf
 800cefc:	4905      	ldr	r1, [pc, #20]	; (800cf14 <tcpip_thread_handle_msg+0x88>)
 800cefe:	4806      	ldr	r0, [pc, #24]	; (800cf18 <tcpip_thread_handle_msg+0x8c>)
 800cf00:	f010 fb8e 	bl	801d620 <iprintf>
      break;
 800cf04:	bf00      	nop
  }
}
 800cf06:	bf00      	nop
 800cf08:	3708      	adds	r7, #8
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	0801f2e0 	.word	0x0801f2e0
 800cf14:	0801f310 	.word	0x0801f310
 800cf18:	0801f330 	.word	0x0801f330

0800cf1c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b086      	sub	sp, #24
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cf28:	481a      	ldr	r0, [pc, #104]	; (800cf94 <tcpip_inpkt+0x78>)
 800cf2a:	f00b f956 	bl	80181da <sys_mbox_valid>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d105      	bne.n	800cf40 <tcpip_inpkt+0x24>
 800cf34:	4b18      	ldr	r3, [pc, #96]	; (800cf98 <tcpip_inpkt+0x7c>)
 800cf36:	22fc      	movs	r2, #252	; 0xfc
 800cf38:	4918      	ldr	r1, [pc, #96]	; (800cf9c <tcpip_inpkt+0x80>)
 800cf3a:	4819      	ldr	r0, [pc, #100]	; (800cfa0 <tcpip_inpkt+0x84>)
 800cf3c:	f010 fb70 	bl	801d620 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800cf40:	2009      	movs	r0, #9
 800cf42:	f000 fdd9 	bl	800daf8 <memp_malloc>
 800cf46:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d102      	bne.n	800cf54 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800cf4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf52:	e01a      	b.n	800cf8a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	2200      	movs	r2, #0
 800cf58:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	68ba      	ldr	r2, [r7, #8]
 800cf64:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cf6c:	6979      	ldr	r1, [r7, #20]
 800cf6e:	4809      	ldr	r0, [pc, #36]	; (800cf94 <tcpip_inpkt+0x78>)
 800cf70:	f00b f8be 	bl	80180f0 <sys_mbox_trypost>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d006      	beq.n	800cf88 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cf7a:	6979      	ldr	r1, [r7, #20]
 800cf7c:	2009      	movs	r0, #9
 800cf7e:	f000 fe31 	bl	800dbe4 <memp_free>
    return ERR_MEM;
 800cf82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf86:	e000      	b.n	800cf8a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800cf88:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3718      	adds	r7, #24
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	2000a2b4 	.word	0x2000a2b4
 800cf98:	0801f2e0 	.word	0x0801f2e0
 800cf9c:	0801f358 	.word	0x0801f358
 800cfa0:	0801f330 	.word	0x0801f330

0800cfa4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfb4:	f003 0318 	and.w	r3, r3, #24
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d006      	beq.n	800cfca <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800cfbc:	4a08      	ldr	r2, [pc, #32]	; (800cfe0 <tcpip_input+0x3c>)
 800cfbe:	6839      	ldr	r1, [r7, #0]
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f7ff ffab 	bl	800cf1c <tcpip_inpkt>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	e005      	b.n	800cfd6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800cfca:	4a06      	ldr	r2, [pc, #24]	; (800cfe4 <tcpip_input+0x40>)
 800cfcc:	6839      	ldr	r1, [r7, #0]
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f7ff ffa4 	bl	800cf1c <tcpip_inpkt>
 800cfd4:	4603      	mov	r3, r0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	08017edd 	.word	0x08017edd
 800cfe4:	08016b91 	.word	0x08016b91

0800cfe8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cff2:	4819      	ldr	r0, [pc, #100]	; (800d058 <tcpip_try_callback+0x70>)
 800cff4:	f00b f8f1 	bl	80181da <sys_mbox_valid>
 800cff8:	4603      	mov	r3, r0
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d106      	bne.n	800d00c <tcpip_try_callback+0x24>
 800cffe:	4b17      	ldr	r3, [pc, #92]	; (800d05c <tcpip_try_callback+0x74>)
 800d000:	f240 125d 	movw	r2, #349	; 0x15d
 800d004:	4916      	ldr	r1, [pc, #88]	; (800d060 <tcpip_try_callback+0x78>)
 800d006:	4817      	ldr	r0, [pc, #92]	; (800d064 <tcpip_try_callback+0x7c>)
 800d008:	f010 fb0a 	bl	801d620 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d00c:	2008      	movs	r0, #8
 800d00e:	f000 fd73 	bl	800daf8 <memp_malloc>
 800d012:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d102      	bne.n	800d020 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d01a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d01e:	e017      	b.n	800d050 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2201      	movs	r2, #1
 800d024:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	687a      	ldr	r2, [r7, #4]
 800d02a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	683a      	ldr	r2, [r7, #0]
 800d030:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d032:	68f9      	ldr	r1, [r7, #12]
 800d034:	4808      	ldr	r0, [pc, #32]	; (800d058 <tcpip_try_callback+0x70>)
 800d036:	f00b f85b 	bl	80180f0 <sys_mbox_trypost>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d006      	beq.n	800d04e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d040:	68f9      	ldr	r1, [r7, #12]
 800d042:	2008      	movs	r0, #8
 800d044:	f000 fdce 	bl	800dbe4 <memp_free>
    return ERR_MEM;
 800d048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d04c:	e000      	b.n	800d050 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d04e:	2300      	movs	r3, #0
}
 800d050:	4618      	mov	r0, r3
 800d052:	3710      	adds	r7, #16
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	2000a2b4 	.word	0x2000a2b4
 800d05c:	0801f2e0 	.word	0x0801f2e0
 800d060:	0801f358 	.word	0x0801f358
 800d064:	0801f330 	.word	0x0801f330

0800d068 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	60b9      	str	r1, [r7, #8]
 800d072:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800d074:	4806      	ldr	r0, [pc, #24]	; (800d090 <tcpip_send_msg_wait_sem+0x28>)
 800d076:	f00b f989 	bl	801838c <sys_mutex_lock>
  fn(apimsg);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	68b8      	ldr	r0, [r7, #8]
 800d07e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800d080:	4803      	ldr	r0, [pc, #12]	; (800d090 <tcpip_send_msg_wait_sem+0x28>)
 800d082:	f00b f992 	bl	80183aa <sys_mutex_unlock>
  return ERR_OK;
 800d086:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3710      	adds	r7, #16
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	2000a2b8 	.word	0x2000a2b8

0800d094 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af02      	add	r7, sp, #8
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d09e:	f000 f871 	bl	800d184 <lwip_init>

  tcpip_init_done = initfunc;
 800d0a2:	4a17      	ldr	r2, [pc, #92]	; (800d100 <tcpip_init+0x6c>)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d0a8:	4a16      	ldr	r2, [pc, #88]	; (800d104 <tcpip_init+0x70>)
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d0ae:	2106      	movs	r1, #6
 800d0b0:	4815      	ldr	r0, [pc, #84]	; (800d108 <tcpip_init+0x74>)
 800d0b2:	f00a ffe9 	bl	8018088 <sys_mbox_new>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d006      	beq.n	800d0ca <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d0bc:	4b13      	ldr	r3, [pc, #76]	; (800d10c <tcpip_init+0x78>)
 800d0be:	f240 2261 	movw	r2, #609	; 0x261
 800d0c2:	4913      	ldr	r1, [pc, #76]	; (800d110 <tcpip_init+0x7c>)
 800d0c4:	4813      	ldr	r0, [pc, #76]	; (800d114 <tcpip_init+0x80>)
 800d0c6:	f010 faab 	bl	801d620 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d0ca:	4813      	ldr	r0, [pc, #76]	; (800d118 <tcpip_init+0x84>)
 800d0cc:	f00b f942 	bl	8018354 <sys_mutex_new>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d006      	beq.n	800d0e4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d0d6:	4b0d      	ldr	r3, [pc, #52]	; (800d10c <tcpip_init+0x78>)
 800d0d8:	f240 2265 	movw	r2, #613	; 0x265
 800d0dc:	490f      	ldr	r1, [pc, #60]	; (800d11c <tcpip_init+0x88>)
 800d0de:	480d      	ldr	r0, [pc, #52]	; (800d114 <tcpip_init+0x80>)
 800d0e0:	f010 fa9e 	bl	801d620 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	9300      	str	r3, [sp, #0]
 800d0e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	490c      	ldr	r1, [pc, #48]	; (800d120 <tcpip_init+0x8c>)
 800d0f0:	480c      	ldr	r0, [pc, #48]	; (800d124 <tcpip_init+0x90>)
 800d0f2:	f00b f967 	bl	80183c4 <sys_thread_new>
}
 800d0f6:	bf00      	nop
 800d0f8:	3708      	adds	r7, #8
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	2000a2ac 	.word	0x2000a2ac
 800d104:	2000a2b0 	.word	0x2000a2b0
 800d108:	2000a2b4 	.word	0x2000a2b4
 800d10c:	0801f2e0 	.word	0x0801f2e0
 800d110:	0801f368 	.word	0x0801f368
 800d114:	0801f330 	.word	0x0801f330
 800d118:	2000a2b8 	.word	0x2000a2b8
 800d11c:	0801f38c 	.word	0x0801f38c
 800d120:	0800ce25 	.word	0x0800ce25
 800d124:	0801f3b0 	.word	0x0801f3b0

0800d128 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d128:	b480      	push	{r7}
 800d12a:	b083      	sub	sp, #12
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	4603      	mov	r3, r0
 800d130:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d132:	88fb      	ldrh	r3, [r7, #6]
 800d134:	021b      	lsls	r3, r3, #8
 800d136:	b21a      	sxth	r2, r3
 800d138:	88fb      	ldrh	r3, [r7, #6]
 800d13a:	0a1b      	lsrs	r3, r3, #8
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	b21b      	sxth	r3, r3
 800d140:	4313      	orrs	r3, r2
 800d142:	b21b      	sxth	r3, r3
 800d144:	b29b      	uxth	r3, r3
}
 800d146:	4618      	mov	r0, r3
 800d148:	370c      	adds	r7, #12
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr

0800d152 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d152:	b480      	push	{r7}
 800d154:	b083      	sub	sp, #12
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	061a      	lsls	r2, r3, #24
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	021b      	lsls	r3, r3, #8
 800d162:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d166:	431a      	orrs	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	0a1b      	lsrs	r3, r3, #8
 800d16c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d170:	431a      	orrs	r2, r3
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	0e1b      	lsrs	r3, r3, #24
 800d176:	4313      	orrs	r3, r2
}
 800d178:	4618      	mov	r0, r3
 800d17a:	370c      	adds	r7, #12
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d18a:	2300      	movs	r3, #0
 800d18c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d18e:	f00b f8d3 	bl	8018338 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d192:	f000 f8d9 	bl	800d348 <mem_init>
  memp_init();
 800d196:	f000 fc41 	bl	800da1c <memp_init>
  pbuf_init();
  netif_init();
 800d19a:	f000 fd4d 	bl	800dc38 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d19e:	f008 f815 	bl	80151cc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d1a2:	f001 fe5d 	bl	800ee60 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d1a6:	f007 ff57 	bl	8015058 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d1aa:	bf00      	nop
 800d1ac:	3708      	adds	r7, #8
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
	...

0800d1b4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d1be:	4b05      	ldr	r3, [pc, #20]	; (800d1d4 <ptr_to_mem+0x20>)
 800d1c0:	681a      	ldr	r2, [r3, #0]
 800d1c2:	88fb      	ldrh	r3, [r7, #6]
 800d1c4:	4413      	add	r3, r2
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	370c      	adds	r7, #12
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr
 800d1d2:	bf00      	nop
 800d1d4:	2000e2d0 	.word	0x2000e2d0

0800d1d8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d1e0:	4b05      	ldr	r3, [pc, #20]	; (800d1f8 <mem_to_ptr+0x20>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	1ad3      	subs	r3, r2, r3
 800d1e8:	b29b      	uxth	r3, r3
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	370c      	adds	r7, #12
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr
 800d1f6:	bf00      	nop
 800d1f8:	2000e2d0 	.word	0x2000e2d0

0800d1fc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d1fc:	b590      	push	{r4, r7, lr}
 800d1fe:	b085      	sub	sp, #20
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d204:	4b47      	ldr	r3, [pc, #284]	; (800d324 <plug_holes+0x128>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	687a      	ldr	r2, [r7, #4]
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d206      	bcs.n	800d21c <plug_holes+0x20>
 800d20e:	4b46      	ldr	r3, [pc, #280]	; (800d328 <plug_holes+0x12c>)
 800d210:	f240 12df 	movw	r2, #479	; 0x1df
 800d214:	4945      	ldr	r1, [pc, #276]	; (800d32c <plug_holes+0x130>)
 800d216:	4846      	ldr	r0, [pc, #280]	; (800d330 <plug_holes+0x134>)
 800d218:	f010 fa02 	bl	801d620 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d21c:	4b45      	ldr	r3, [pc, #276]	; (800d334 <plug_holes+0x138>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	429a      	cmp	r2, r3
 800d224:	d306      	bcc.n	800d234 <plug_holes+0x38>
 800d226:	4b40      	ldr	r3, [pc, #256]	; (800d328 <plug_holes+0x12c>)
 800d228:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d22c:	4942      	ldr	r1, [pc, #264]	; (800d338 <plug_holes+0x13c>)
 800d22e:	4840      	ldr	r0, [pc, #256]	; (800d330 <plug_holes+0x134>)
 800d230:	f010 f9f6 	bl	801d620 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	791b      	ldrb	r3, [r3, #4]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d006      	beq.n	800d24a <plug_holes+0x4e>
 800d23c:	4b3a      	ldr	r3, [pc, #232]	; (800d328 <plug_holes+0x12c>)
 800d23e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d242:	493e      	ldr	r1, [pc, #248]	; (800d33c <plug_holes+0x140>)
 800d244:	483a      	ldr	r0, [pc, #232]	; (800d330 <plug_holes+0x134>)
 800d246:	f010 f9eb 	bl	801d620 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	881b      	ldrh	r3, [r3, #0]
 800d24e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d252:	4293      	cmp	r3, r2
 800d254:	d906      	bls.n	800d264 <plug_holes+0x68>
 800d256:	4b34      	ldr	r3, [pc, #208]	; (800d328 <plug_holes+0x12c>)
 800d258:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d25c:	4938      	ldr	r1, [pc, #224]	; (800d340 <plug_holes+0x144>)
 800d25e:	4834      	ldr	r0, [pc, #208]	; (800d330 <plug_holes+0x134>)
 800d260:	f010 f9de 	bl	801d620 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	881b      	ldrh	r3, [r3, #0]
 800d268:	4618      	mov	r0, r3
 800d26a:	f7ff ffa3 	bl	800d1b4 <ptr_to_mem>
 800d26e:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d270:	687a      	ldr	r2, [r7, #4]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	429a      	cmp	r2, r3
 800d276:	d025      	beq.n	800d2c4 <plug_holes+0xc8>
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	791b      	ldrb	r3, [r3, #4]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d121      	bne.n	800d2c4 <plug_holes+0xc8>
 800d280:	4b2c      	ldr	r3, [pc, #176]	; (800d334 <plug_holes+0x138>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	68fa      	ldr	r2, [r7, #12]
 800d286:	429a      	cmp	r2, r3
 800d288:	d01c      	beq.n	800d2c4 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d28a:	4b2e      	ldr	r3, [pc, #184]	; (800d344 <plug_holes+0x148>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	68fa      	ldr	r2, [r7, #12]
 800d290:	429a      	cmp	r2, r3
 800d292:	d102      	bne.n	800d29a <plug_holes+0x9e>
      lfree = mem;
 800d294:	4a2b      	ldr	r2, [pc, #172]	; (800d344 <plug_holes+0x148>)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	881a      	ldrh	r2, [r3, #0]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	881b      	ldrh	r3, [r3, #0]
 800d2a6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d00a      	beq.n	800d2c4 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	881b      	ldrh	r3, [r3, #0]
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7ff ff7e 	bl	800d1b4 <ptr_to_mem>
 800d2b8:	4604      	mov	r4, r0
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f7ff ff8c 	bl	800d1d8 <mem_to_ptr>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	885b      	ldrh	r3, [r3, #2]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7ff ff73 	bl	800d1b4 <ptr_to_mem>
 800d2ce:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d2d0:	68ba      	ldr	r2, [r7, #8]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d020      	beq.n	800d31a <plug_holes+0x11e>
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	791b      	ldrb	r3, [r3, #4]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d11c      	bne.n	800d31a <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d2e0:	4b18      	ldr	r3, [pc, #96]	; (800d344 <plug_holes+0x148>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d102      	bne.n	800d2f0 <plug_holes+0xf4>
      lfree = pmem;
 800d2ea:	4a16      	ldr	r2, [pc, #88]	; (800d344 <plug_holes+0x148>)
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	881a      	ldrh	r2, [r3, #0]
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	881b      	ldrh	r3, [r3, #0]
 800d2fc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d300:	4293      	cmp	r3, r2
 800d302:	d00a      	beq.n	800d31a <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	881b      	ldrh	r3, [r3, #0]
 800d308:	4618      	mov	r0, r3
 800d30a:	f7ff ff53 	bl	800d1b4 <ptr_to_mem>
 800d30e:	4604      	mov	r4, r0
 800d310:	68b8      	ldr	r0, [r7, #8]
 800d312:	f7ff ff61 	bl	800d1d8 <mem_to_ptr>
 800d316:	4603      	mov	r3, r0
 800d318:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d31a:	bf00      	nop
 800d31c:	3714      	adds	r7, #20
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd90      	pop	{r4, r7, pc}
 800d322:	bf00      	nop
 800d324:	2000e2d0 	.word	0x2000e2d0
 800d328:	0801f3c0 	.word	0x0801f3c0
 800d32c:	0801f3f0 	.word	0x0801f3f0
 800d330:	0801f408 	.word	0x0801f408
 800d334:	2000e2d4 	.word	0x2000e2d4
 800d338:	0801f430 	.word	0x0801f430
 800d33c:	0801f44c 	.word	0x0801f44c
 800d340:	0801f468 	.word	0x0801f468
 800d344:	2000e2dc 	.word	0x2000e2dc

0800d348 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d34e:	4b1f      	ldr	r3, [pc, #124]	; (800d3cc <mem_init+0x84>)
 800d350:	3303      	adds	r3, #3
 800d352:	f023 0303 	bic.w	r3, r3, #3
 800d356:	461a      	mov	r2, r3
 800d358:	4b1d      	ldr	r3, [pc, #116]	; (800d3d0 <mem_init+0x88>)
 800d35a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d35c:	4b1c      	ldr	r3, [pc, #112]	; (800d3d0 <mem_init+0x88>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d368:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2200      	movs	r2, #0
 800d36e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d376:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 800d37a:	f7ff ff1b 	bl	800d1b4 <ptr_to_mem>
 800d37e:	4603      	mov	r3, r0
 800d380:	4a14      	ldr	r2, [pc, #80]	; (800d3d4 <mem_init+0x8c>)
 800d382:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d384:	4b13      	ldr	r3, [pc, #76]	; (800d3d4 <mem_init+0x8c>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2201      	movs	r2, #1
 800d38a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d38c:	4b11      	ldr	r3, [pc, #68]	; (800d3d4 <mem_init+0x8c>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d394:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d396:	4b0f      	ldr	r3, [pc, #60]	; (800d3d4 <mem_init+0x8c>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d39e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d3a0:	4b0b      	ldr	r3, [pc, #44]	; (800d3d0 <mem_init+0x88>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	4a0c      	ldr	r2, [pc, #48]	; (800d3d8 <mem_init+0x90>)
 800d3a6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d3a8:	480c      	ldr	r0, [pc, #48]	; (800d3dc <mem_init+0x94>)
 800d3aa:	f00a ffd3 	bl	8018354 <sys_mutex_new>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d006      	beq.n	800d3c2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d3b4:	4b0a      	ldr	r3, [pc, #40]	; (800d3e0 <mem_init+0x98>)
 800d3b6:	f240 221f 	movw	r2, #543	; 0x21f
 800d3ba:	490a      	ldr	r1, [pc, #40]	; (800d3e4 <mem_init+0x9c>)
 800d3bc:	480a      	ldr	r0, [pc, #40]	; (800d3e8 <mem_init+0xa0>)
 800d3be:	f010 f92f 	bl	801d620 <iprintf>
  }
}
 800d3c2:	bf00      	nop
 800d3c4:	3708      	adds	r7, #8
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	2000a2d4 	.word	0x2000a2d4
 800d3d0:	2000e2d0 	.word	0x2000e2d0
 800d3d4:	2000e2d4 	.word	0x2000e2d4
 800d3d8:	2000e2dc 	.word	0x2000e2dc
 800d3dc:	2000e2d8 	.word	0x2000e2d8
 800d3e0:	0801f3c0 	.word	0x0801f3c0
 800d3e4:	0801f494 	.word	0x0801f494
 800d3e8:	0801f408 	.word	0x0801f408

0800d3ec <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b086      	sub	sp, #24
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f7ff feef 	bl	800d1d8 <mem_to_ptr>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	881b      	ldrh	r3, [r3, #0]
 800d402:	4618      	mov	r0, r3
 800d404:	f7ff fed6 	bl	800d1b4 <ptr_to_mem>
 800d408:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	885b      	ldrh	r3, [r3, #2]
 800d40e:	4618      	mov	r0, r3
 800d410:	f7ff fed0 	bl	800d1b4 <ptr_to_mem>
 800d414:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	881b      	ldrh	r3, [r3, #0]
 800d41a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d41e:	4293      	cmp	r3, r2
 800d420:	d819      	bhi.n	800d456 <mem_link_valid+0x6a>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	885b      	ldrh	r3, [r3, #2]
 800d426:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d813      	bhi.n	800d456 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d432:	8afa      	ldrh	r2, [r7, #22]
 800d434:	429a      	cmp	r2, r3
 800d436:	d004      	beq.n	800d442 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	881b      	ldrh	r3, [r3, #0]
 800d43c:	8afa      	ldrh	r2, [r7, #22]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d109      	bne.n	800d456 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d442:	4b08      	ldr	r3, [pc, #32]	; (800d464 <mem_link_valid+0x78>)
 800d444:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d446:	693a      	ldr	r2, [r7, #16]
 800d448:	429a      	cmp	r2, r3
 800d44a:	d006      	beq.n	800d45a <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	885b      	ldrh	r3, [r3, #2]
 800d450:	8afa      	ldrh	r2, [r7, #22]
 800d452:	429a      	cmp	r2, r3
 800d454:	d001      	beq.n	800d45a <mem_link_valid+0x6e>
    return 0;
 800d456:	2300      	movs	r3, #0
 800d458:	e000      	b.n	800d45c <mem_link_valid+0x70>
  }
  return 1;
 800d45a:	2301      	movs	r3, #1
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3718      	adds	r7, #24
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	2000e2d4 	.word	0x2000e2d4

0800d468 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b088      	sub	sp, #32
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d070      	beq.n	800d558 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f003 0303 	and.w	r3, r3, #3
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d00d      	beq.n	800d49c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d480:	4b37      	ldr	r3, [pc, #220]	; (800d560 <mem_free+0xf8>)
 800d482:	f240 2273 	movw	r2, #627	; 0x273
 800d486:	4937      	ldr	r1, [pc, #220]	; (800d564 <mem_free+0xfc>)
 800d488:	4837      	ldr	r0, [pc, #220]	; (800d568 <mem_free+0x100>)
 800d48a:	f010 f8c9 	bl	801d620 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d48e:	f00a ffbf 	bl	8018410 <sys_arch_protect>
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	68f8      	ldr	r0, [r7, #12]
 800d496:	f00a ffc9 	bl	801842c <sys_arch_unprotect>
    return;
 800d49a:	e05e      	b.n	800d55a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	3b08      	subs	r3, #8
 800d4a0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d4a2:	4b32      	ldr	r3, [pc, #200]	; (800d56c <mem_free+0x104>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	69fa      	ldr	r2, [r7, #28]
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d306      	bcc.n	800d4ba <mem_free+0x52>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f103 020c 	add.w	r2, r3, #12
 800d4b2:	4b2f      	ldr	r3, [pc, #188]	; (800d570 <mem_free+0x108>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d90d      	bls.n	800d4d6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d4ba:	4b29      	ldr	r3, [pc, #164]	; (800d560 <mem_free+0xf8>)
 800d4bc:	f240 227f 	movw	r2, #639	; 0x27f
 800d4c0:	492c      	ldr	r1, [pc, #176]	; (800d574 <mem_free+0x10c>)
 800d4c2:	4829      	ldr	r0, [pc, #164]	; (800d568 <mem_free+0x100>)
 800d4c4:	f010 f8ac 	bl	801d620 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d4c8:	f00a ffa2 	bl	8018410 <sys_arch_protect>
 800d4cc:	6138      	str	r0, [r7, #16]
 800d4ce:	6938      	ldr	r0, [r7, #16]
 800d4d0:	f00a ffac 	bl	801842c <sys_arch_unprotect>
    return;
 800d4d4:	e041      	b.n	800d55a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d4d6:	4828      	ldr	r0, [pc, #160]	; (800d578 <mem_free+0x110>)
 800d4d8:	f00a ff58 	bl	801838c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	791b      	ldrb	r3, [r3, #4]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d110      	bne.n	800d506 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d4e4:	4b1e      	ldr	r3, [pc, #120]	; (800d560 <mem_free+0xf8>)
 800d4e6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d4ea:	4924      	ldr	r1, [pc, #144]	; (800d57c <mem_free+0x114>)
 800d4ec:	481e      	ldr	r0, [pc, #120]	; (800d568 <mem_free+0x100>)
 800d4ee:	f010 f897 	bl	801d620 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d4f2:	4821      	ldr	r0, [pc, #132]	; (800d578 <mem_free+0x110>)
 800d4f4:	f00a ff59 	bl	80183aa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d4f8:	f00a ff8a 	bl	8018410 <sys_arch_protect>
 800d4fc:	6178      	str	r0, [r7, #20]
 800d4fe:	6978      	ldr	r0, [r7, #20]
 800d500:	f00a ff94 	bl	801842c <sys_arch_unprotect>
    return;
 800d504:	e029      	b.n	800d55a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d506:	69f8      	ldr	r0, [r7, #28]
 800d508:	f7ff ff70 	bl	800d3ec <mem_link_valid>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d110      	bne.n	800d534 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d512:	4b13      	ldr	r3, [pc, #76]	; (800d560 <mem_free+0xf8>)
 800d514:	f240 2295 	movw	r2, #661	; 0x295
 800d518:	4919      	ldr	r1, [pc, #100]	; (800d580 <mem_free+0x118>)
 800d51a:	4813      	ldr	r0, [pc, #76]	; (800d568 <mem_free+0x100>)
 800d51c:	f010 f880 	bl	801d620 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d520:	4815      	ldr	r0, [pc, #84]	; (800d578 <mem_free+0x110>)
 800d522:	f00a ff42 	bl	80183aa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d526:	f00a ff73 	bl	8018410 <sys_arch_protect>
 800d52a:	61b8      	str	r0, [r7, #24]
 800d52c:	69b8      	ldr	r0, [r7, #24]
 800d52e:	f00a ff7d 	bl	801842c <sys_arch_unprotect>
    return;
 800d532:	e012      	b.n	800d55a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	2200      	movs	r2, #0
 800d538:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d53a:	4b12      	ldr	r3, [pc, #72]	; (800d584 <mem_free+0x11c>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	69fa      	ldr	r2, [r7, #28]
 800d540:	429a      	cmp	r2, r3
 800d542:	d202      	bcs.n	800d54a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d544:	4a0f      	ldr	r2, [pc, #60]	; (800d584 <mem_free+0x11c>)
 800d546:	69fb      	ldr	r3, [r7, #28]
 800d548:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d54a:	69f8      	ldr	r0, [r7, #28]
 800d54c:	f7ff fe56 	bl	800d1fc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d550:	4809      	ldr	r0, [pc, #36]	; (800d578 <mem_free+0x110>)
 800d552:	f00a ff2a 	bl	80183aa <sys_mutex_unlock>
 800d556:	e000      	b.n	800d55a <mem_free+0xf2>
    return;
 800d558:	bf00      	nop
}
 800d55a:	3720      	adds	r7, #32
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	0801f3c0 	.word	0x0801f3c0
 800d564:	0801f4b0 	.word	0x0801f4b0
 800d568:	0801f408 	.word	0x0801f408
 800d56c:	2000e2d0 	.word	0x2000e2d0
 800d570:	2000e2d4 	.word	0x2000e2d4
 800d574:	0801f4d4 	.word	0x0801f4d4
 800d578:	2000e2d8 	.word	0x2000e2d8
 800d57c:	0801f4f0 	.word	0x0801f4f0
 800d580:	0801f518 	.word	0x0801f518
 800d584:	2000e2dc 	.word	0x2000e2dc

0800d588 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b088      	sub	sp, #32
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	460b      	mov	r3, r1
 800d592:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d594:	887b      	ldrh	r3, [r7, #2]
 800d596:	3303      	adds	r3, #3
 800d598:	b29b      	uxth	r3, r3
 800d59a:	f023 0303 	bic.w	r3, r3, #3
 800d59e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d5a0:	8bfb      	ldrh	r3, [r7, #30]
 800d5a2:	2b0b      	cmp	r3, #11
 800d5a4:	d801      	bhi.n	800d5aa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d5a6:	230c      	movs	r3, #12
 800d5a8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d5aa:	8bfb      	ldrh	r3, [r7, #30]
 800d5ac:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d803      	bhi.n	800d5bc <mem_trim+0x34>
 800d5b4:	8bfa      	ldrh	r2, [r7, #30]
 800d5b6:	887b      	ldrh	r3, [r7, #2]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d201      	bcs.n	800d5c0 <mem_trim+0x38>
    return NULL;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	e0dc      	b.n	800d77a <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d5c0:	4b70      	ldr	r3, [pc, #448]	; (800d784 <mem_trim+0x1fc>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d304      	bcc.n	800d5d4 <mem_trim+0x4c>
 800d5ca:	4b6f      	ldr	r3, [pc, #444]	; (800d788 <mem_trim+0x200>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	687a      	ldr	r2, [r7, #4]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d306      	bcc.n	800d5e2 <mem_trim+0x5a>
 800d5d4:	4b6d      	ldr	r3, [pc, #436]	; (800d78c <mem_trim+0x204>)
 800d5d6:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d5da:	496d      	ldr	r1, [pc, #436]	; (800d790 <mem_trim+0x208>)
 800d5dc:	486d      	ldr	r0, [pc, #436]	; (800d794 <mem_trim+0x20c>)
 800d5de:	f010 f81f 	bl	801d620 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d5e2:	4b68      	ldr	r3, [pc, #416]	; (800d784 <mem_trim+0x1fc>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	687a      	ldr	r2, [r7, #4]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d304      	bcc.n	800d5f6 <mem_trim+0x6e>
 800d5ec:	4b66      	ldr	r3, [pc, #408]	; (800d788 <mem_trim+0x200>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d307      	bcc.n	800d606 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d5f6:	f00a ff0b 	bl	8018410 <sys_arch_protect>
 800d5fa:	60b8      	str	r0, [r7, #8]
 800d5fc:	68b8      	ldr	r0, [r7, #8]
 800d5fe:	f00a ff15 	bl	801842c <sys_arch_unprotect>
    return rmem;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	e0b9      	b.n	800d77a <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	3b08      	subs	r3, #8
 800d60a:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d60c:	69b8      	ldr	r0, [r7, #24]
 800d60e:	f7ff fde3 	bl	800d1d8 <mem_to_ptr>
 800d612:	4603      	mov	r3, r0
 800d614:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	881a      	ldrh	r2, [r3, #0]
 800d61a:	8afb      	ldrh	r3, [r7, #22]
 800d61c:	1ad3      	subs	r3, r2, r3
 800d61e:	b29b      	uxth	r3, r3
 800d620:	3b08      	subs	r3, #8
 800d622:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d624:	8bfa      	ldrh	r2, [r7, #30]
 800d626:	8abb      	ldrh	r3, [r7, #20]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d906      	bls.n	800d63a <mem_trim+0xb2>
 800d62c:	4b57      	ldr	r3, [pc, #348]	; (800d78c <mem_trim+0x204>)
 800d62e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d632:	4959      	ldr	r1, [pc, #356]	; (800d798 <mem_trim+0x210>)
 800d634:	4857      	ldr	r0, [pc, #348]	; (800d794 <mem_trim+0x20c>)
 800d636:	f00f fff3 	bl	801d620 <iprintf>
  if (newsize > size) {
 800d63a:	8bfa      	ldrh	r2, [r7, #30]
 800d63c:	8abb      	ldrh	r3, [r7, #20]
 800d63e:	429a      	cmp	r2, r3
 800d640:	d901      	bls.n	800d646 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800d642:	2300      	movs	r3, #0
 800d644:	e099      	b.n	800d77a <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800d646:	8bfa      	ldrh	r2, [r7, #30]
 800d648:	8abb      	ldrh	r3, [r7, #20]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d101      	bne.n	800d652 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	e093      	b.n	800d77a <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d652:	4852      	ldr	r0, [pc, #328]	; (800d79c <mem_trim+0x214>)
 800d654:	f00a fe9a 	bl	801838c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	881b      	ldrh	r3, [r3, #0]
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7ff fda9 	bl	800d1b4 <ptr_to_mem>
 800d662:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	791b      	ldrb	r3, [r3, #4]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d141      	bne.n	800d6f0 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d66c:	69bb      	ldr	r3, [r7, #24]
 800d66e:	881b      	ldrh	r3, [r3, #0]
 800d670:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d674:	4293      	cmp	r3, r2
 800d676:	d106      	bne.n	800d686 <mem_trim+0xfe>
 800d678:	4b44      	ldr	r3, [pc, #272]	; (800d78c <mem_trim+0x204>)
 800d67a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d67e:	4948      	ldr	r1, [pc, #288]	; (800d7a0 <mem_trim+0x218>)
 800d680:	4844      	ldr	r0, [pc, #272]	; (800d794 <mem_trim+0x20c>)
 800d682:	f00f ffcd 	bl	801d620 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	881b      	ldrh	r3, [r3, #0]
 800d68a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d68c:	8afa      	ldrh	r2, [r7, #22]
 800d68e:	8bfb      	ldrh	r3, [r7, #30]
 800d690:	4413      	add	r3, r2
 800d692:	b29b      	uxth	r3, r3
 800d694:	3308      	adds	r3, #8
 800d696:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d698:	4b42      	ldr	r3, [pc, #264]	; (800d7a4 <mem_trim+0x21c>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	693a      	ldr	r2, [r7, #16]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d106      	bne.n	800d6b0 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800d6a2:	89fb      	ldrh	r3, [r7, #14]
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7ff fd85 	bl	800d1b4 <ptr_to_mem>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	4a3d      	ldr	r2, [pc, #244]	; (800d7a4 <mem_trim+0x21c>)
 800d6ae:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d6b0:	89fb      	ldrh	r3, [r7, #14]
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7ff fd7e 	bl	800d1b4 <ptr_to_mem>
 800d6b8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	89ba      	ldrh	r2, [r7, #12]
 800d6c4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	8afa      	ldrh	r2, [r7, #22]
 800d6ca:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d6cc:	69bb      	ldr	r3, [r7, #24]
 800d6ce:	89fa      	ldrh	r2, [r7, #14]
 800d6d0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	881b      	ldrh	r3, [r3, #0]
 800d6d6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d049      	beq.n	800d772 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	881b      	ldrh	r3, [r3, #0]
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7ff fd66 	bl	800d1b4 <ptr_to_mem>
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	89fb      	ldrh	r3, [r7, #14]
 800d6ec:	8053      	strh	r3, [r2, #2]
 800d6ee:	e040      	b.n	800d772 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d6f0:	8bfb      	ldrh	r3, [r7, #30]
 800d6f2:	f103 0214 	add.w	r2, r3, #20
 800d6f6:	8abb      	ldrh	r3, [r7, #20]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d83a      	bhi.n	800d772 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d6fc:	8afa      	ldrh	r2, [r7, #22]
 800d6fe:	8bfb      	ldrh	r3, [r7, #30]
 800d700:	4413      	add	r3, r2
 800d702:	b29b      	uxth	r3, r3
 800d704:	3308      	adds	r3, #8
 800d706:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d708:	69bb      	ldr	r3, [r7, #24]
 800d70a:	881b      	ldrh	r3, [r3, #0]
 800d70c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d710:	4293      	cmp	r3, r2
 800d712:	d106      	bne.n	800d722 <mem_trim+0x19a>
 800d714:	4b1d      	ldr	r3, [pc, #116]	; (800d78c <mem_trim+0x204>)
 800d716:	f240 3216 	movw	r2, #790	; 0x316
 800d71a:	4921      	ldr	r1, [pc, #132]	; (800d7a0 <mem_trim+0x218>)
 800d71c:	481d      	ldr	r0, [pc, #116]	; (800d794 <mem_trim+0x20c>)
 800d71e:	f00f ff7f 	bl	801d620 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d722:	89fb      	ldrh	r3, [r7, #14]
 800d724:	4618      	mov	r0, r3
 800d726:	f7ff fd45 	bl	800d1b4 <ptr_to_mem>
 800d72a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d72c:	4b1d      	ldr	r3, [pc, #116]	; (800d7a4 <mem_trim+0x21c>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	693a      	ldr	r2, [r7, #16]
 800d732:	429a      	cmp	r2, r3
 800d734:	d202      	bcs.n	800d73c <mem_trim+0x1b4>
      lfree = mem2;
 800d736:	4a1b      	ldr	r2, [pc, #108]	; (800d7a4 <mem_trim+0x21c>)
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	2200      	movs	r2, #0
 800d740:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d742:	69bb      	ldr	r3, [r7, #24]
 800d744:	881a      	ldrh	r2, [r3, #0]
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	8afa      	ldrh	r2, [r7, #22]
 800d74e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	89fa      	ldrh	r2, [r7, #14]
 800d754:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	881b      	ldrh	r3, [r3, #0]
 800d75a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d75e:	4293      	cmp	r3, r2
 800d760:	d007      	beq.n	800d772 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	881b      	ldrh	r3, [r3, #0]
 800d766:	4618      	mov	r0, r3
 800d768:	f7ff fd24 	bl	800d1b4 <ptr_to_mem>
 800d76c:	4602      	mov	r2, r0
 800d76e:	89fb      	ldrh	r3, [r7, #14]
 800d770:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d772:	480a      	ldr	r0, [pc, #40]	; (800d79c <mem_trim+0x214>)
 800d774:	f00a fe19 	bl	80183aa <sys_mutex_unlock>
  return rmem;
 800d778:	687b      	ldr	r3, [r7, #4]
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3720      	adds	r7, #32
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	2000e2d0 	.word	0x2000e2d0
 800d788:	2000e2d4 	.word	0x2000e2d4
 800d78c:	0801f3c0 	.word	0x0801f3c0
 800d790:	0801f54c 	.word	0x0801f54c
 800d794:	0801f408 	.word	0x0801f408
 800d798:	0801f564 	.word	0x0801f564
 800d79c:	2000e2d8 	.word	0x2000e2d8
 800d7a0:	0801f584 	.word	0x0801f584
 800d7a4:	2000e2dc 	.word	0x2000e2dc

0800d7a8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b088      	sub	sp, #32
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d7b2:	88fb      	ldrh	r3, [r7, #6]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d101      	bne.n	800d7bc <mem_malloc+0x14>
    return NULL;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	e0e6      	b.n	800d98a <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d7bc:	88fb      	ldrh	r3, [r7, #6]
 800d7be:	3303      	adds	r3, #3
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	f023 0303 	bic.w	r3, r3, #3
 800d7c6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d7c8:	8bbb      	ldrh	r3, [r7, #28]
 800d7ca:	2b0b      	cmp	r3, #11
 800d7cc:	d801      	bhi.n	800d7d2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d7ce:	230c      	movs	r3, #12
 800d7d0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d7d2:	8bbb      	ldrh	r3, [r7, #28]
 800d7d4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d803      	bhi.n	800d7e4 <mem_malloc+0x3c>
 800d7dc:	8bba      	ldrh	r2, [r7, #28]
 800d7de:	88fb      	ldrh	r3, [r7, #6]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d201      	bcs.n	800d7e8 <mem_malloc+0x40>
    return NULL;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	e0d0      	b.n	800d98a <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d7e8:	486a      	ldr	r0, [pc, #424]	; (800d994 <mem_malloc+0x1ec>)
 800d7ea:	f00a fdcf 	bl	801838c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d7ee:	4b6a      	ldr	r3, [pc, #424]	; (800d998 <mem_malloc+0x1f0>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7ff fcf0 	bl	800d1d8 <mem_to_ptr>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	83fb      	strh	r3, [r7, #30]
 800d7fc:	e0b9      	b.n	800d972 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d7fe:	8bfb      	ldrh	r3, [r7, #30]
 800d800:	4618      	mov	r0, r3
 800d802:	f7ff fcd7 	bl	800d1b4 <ptr_to_mem>
 800d806:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	791b      	ldrb	r3, [r3, #4]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	f040 80a9 	bne.w	800d964 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	881b      	ldrh	r3, [r3, #0]
 800d816:	461a      	mov	r2, r3
 800d818:	8bfb      	ldrh	r3, [r7, #30]
 800d81a:	1ad3      	subs	r3, r2, r3
 800d81c:	f1a3 0208 	sub.w	r2, r3, #8
 800d820:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d822:	429a      	cmp	r2, r3
 800d824:	f0c0 809e 	bcc.w	800d964 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	881b      	ldrh	r3, [r3, #0]
 800d82c:	461a      	mov	r2, r3
 800d82e:	8bfb      	ldrh	r3, [r7, #30]
 800d830:	1ad3      	subs	r3, r2, r3
 800d832:	f1a3 0208 	sub.w	r2, r3, #8
 800d836:	8bbb      	ldrh	r3, [r7, #28]
 800d838:	3314      	adds	r3, #20
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d335      	bcc.n	800d8aa <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d83e:	8bfa      	ldrh	r2, [r7, #30]
 800d840:	8bbb      	ldrh	r3, [r7, #28]
 800d842:	4413      	add	r3, r2
 800d844:	b29b      	uxth	r3, r3
 800d846:	3308      	adds	r3, #8
 800d848:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d84a:	8a7b      	ldrh	r3, [r7, #18]
 800d84c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d850:	4293      	cmp	r3, r2
 800d852:	d106      	bne.n	800d862 <mem_malloc+0xba>
 800d854:	4b51      	ldr	r3, [pc, #324]	; (800d99c <mem_malloc+0x1f4>)
 800d856:	f240 3287 	movw	r2, #903	; 0x387
 800d85a:	4951      	ldr	r1, [pc, #324]	; (800d9a0 <mem_malloc+0x1f8>)
 800d85c:	4851      	ldr	r0, [pc, #324]	; (800d9a4 <mem_malloc+0x1fc>)
 800d85e:	f00f fedf 	bl	801d620 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d862:	8a7b      	ldrh	r3, [r7, #18]
 800d864:	4618      	mov	r0, r3
 800d866:	f7ff fca5 	bl	800d1b4 <ptr_to_mem>
 800d86a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2200      	movs	r2, #0
 800d870:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	881a      	ldrh	r2, [r3, #0]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	8bfa      	ldrh	r2, [r7, #30]
 800d87e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	8a7a      	ldrh	r2, [r7, #18]
 800d884:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	2201      	movs	r2, #1
 800d88a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	881b      	ldrh	r3, [r3, #0]
 800d890:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d894:	4293      	cmp	r3, r2
 800d896:	d00b      	beq.n	800d8b0 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	881b      	ldrh	r3, [r3, #0]
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7ff fc89 	bl	800d1b4 <ptr_to_mem>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	8a7b      	ldrh	r3, [r7, #18]
 800d8a6:	8053      	strh	r3, [r2, #2]
 800d8a8:	e002      	b.n	800d8b0 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d8b0:	4b39      	ldr	r3, [pc, #228]	; (800d998 <mem_malloc+0x1f0>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	697a      	ldr	r2, [r7, #20]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d127      	bne.n	800d90a <mem_malloc+0x162>
          struct mem *cur = lfree;
 800d8ba:	4b37      	ldr	r3, [pc, #220]	; (800d998 <mem_malloc+0x1f0>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d8c0:	e005      	b.n	800d8ce <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	881b      	ldrh	r3, [r3, #0]
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7ff fc74 	bl	800d1b4 <ptr_to_mem>
 800d8cc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d8ce:	69bb      	ldr	r3, [r7, #24]
 800d8d0:	791b      	ldrb	r3, [r3, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d004      	beq.n	800d8e0 <mem_malloc+0x138>
 800d8d6:	4b34      	ldr	r3, [pc, #208]	; (800d9a8 <mem_malloc+0x200>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	69ba      	ldr	r2, [r7, #24]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d1f0      	bne.n	800d8c2 <mem_malloc+0x11a>
          }
          lfree = cur;
 800d8e0:	4a2d      	ldr	r2, [pc, #180]	; (800d998 <mem_malloc+0x1f0>)
 800d8e2:	69bb      	ldr	r3, [r7, #24]
 800d8e4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d8e6:	4b2c      	ldr	r3, [pc, #176]	; (800d998 <mem_malloc+0x1f0>)
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	4b2f      	ldr	r3, [pc, #188]	; (800d9a8 <mem_malloc+0x200>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d00b      	beq.n	800d90a <mem_malloc+0x162>
 800d8f2:	4b29      	ldr	r3, [pc, #164]	; (800d998 <mem_malloc+0x1f0>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	791b      	ldrb	r3, [r3, #4]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d006      	beq.n	800d90a <mem_malloc+0x162>
 800d8fc:	4b27      	ldr	r3, [pc, #156]	; (800d99c <mem_malloc+0x1f4>)
 800d8fe:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d902:	492a      	ldr	r1, [pc, #168]	; (800d9ac <mem_malloc+0x204>)
 800d904:	4827      	ldr	r0, [pc, #156]	; (800d9a4 <mem_malloc+0x1fc>)
 800d906:	f00f fe8b 	bl	801d620 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d90a:	4822      	ldr	r0, [pc, #136]	; (800d994 <mem_malloc+0x1ec>)
 800d90c:	f00a fd4d 	bl	80183aa <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d910:	8bba      	ldrh	r2, [r7, #28]
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	4413      	add	r3, r2
 800d916:	3308      	adds	r3, #8
 800d918:	4a23      	ldr	r2, [pc, #140]	; (800d9a8 <mem_malloc+0x200>)
 800d91a:	6812      	ldr	r2, [r2, #0]
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d906      	bls.n	800d92e <mem_malloc+0x186>
 800d920:	4b1e      	ldr	r3, [pc, #120]	; (800d99c <mem_malloc+0x1f4>)
 800d922:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d926:	4922      	ldr	r1, [pc, #136]	; (800d9b0 <mem_malloc+0x208>)
 800d928:	481e      	ldr	r0, [pc, #120]	; (800d9a4 <mem_malloc+0x1fc>)
 800d92a:	f00f fe79 	bl	801d620 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	f003 0303 	and.w	r3, r3, #3
 800d934:	2b00      	cmp	r3, #0
 800d936:	d006      	beq.n	800d946 <mem_malloc+0x19e>
 800d938:	4b18      	ldr	r3, [pc, #96]	; (800d99c <mem_malloc+0x1f4>)
 800d93a:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d93e:	491d      	ldr	r1, [pc, #116]	; (800d9b4 <mem_malloc+0x20c>)
 800d940:	4818      	ldr	r0, [pc, #96]	; (800d9a4 <mem_malloc+0x1fc>)
 800d942:	f00f fe6d 	bl	801d620 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	f003 0303 	and.w	r3, r3, #3
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d006      	beq.n	800d95e <mem_malloc+0x1b6>
 800d950:	4b12      	ldr	r3, [pc, #72]	; (800d99c <mem_malloc+0x1f4>)
 800d952:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d956:	4918      	ldr	r1, [pc, #96]	; (800d9b8 <mem_malloc+0x210>)
 800d958:	4812      	ldr	r0, [pc, #72]	; (800d9a4 <mem_malloc+0x1fc>)
 800d95a:	f00f fe61 	bl	801d620 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	3308      	adds	r3, #8
 800d962:	e012      	b.n	800d98a <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800d964:	8bfb      	ldrh	r3, [r7, #30]
 800d966:	4618      	mov	r0, r3
 800d968:	f7ff fc24 	bl	800d1b4 <ptr_to_mem>
 800d96c:	4603      	mov	r3, r0
 800d96e:	881b      	ldrh	r3, [r3, #0]
 800d970:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d972:	8bfa      	ldrh	r2, [r7, #30]
 800d974:	8bb9      	ldrh	r1, [r7, #28]
 800d976:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800d97a:	1a5b      	subs	r3, r3, r1
 800d97c:	429a      	cmp	r2, r3
 800d97e:	f4ff af3e 	bcc.w	800d7fe <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d982:	4804      	ldr	r0, [pc, #16]	; (800d994 <mem_malloc+0x1ec>)
 800d984:	f00a fd11 	bl	80183aa <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d988:	2300      	movs	r3, #0
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3720      	adds	r7, #32
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	2000e2d8 	.word	0x2000e2d8
 800d998:	2000e2dc 	.word	0x2000e2dc
 800d99c:	0801f3c0 	.word	0x0801f3c0
 800d9a0:	0801f584 	.word	0x0801f584
 800d9a4:	0801f408 	.word	0x0801f408
 800d9a8:	2000e2d4 	.word	0x2000e2d4
 800d9ac:	0801f598 	.word	0x0801f598
 800d9b0:	0801f5b4 	.word	0x0801f5b4
 800d9b4:	0801f5e4 	.word	0x0801f5e4
 800d9b8:	0801f614 	.word	0x0801f614

0800d9bc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b085      	sub	sp, #20
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	689b      	ldr	r3, [r3, #8]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	3303      	adds	r3, #3
 800d9d2:	f023 0303 	bic.w	r3, r3, #3
 800d9d6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d9d8:	2300      	movs	r3, #0
 800d9da:	60fb      	str	r3, [r7, #12]
 800d9dc:	e011      	b.n	800da02 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	689b      	ldr	r3, [r3, #8]
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	68ba      	ldr	r2, [r7, #8]
 800d9ee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	881b      	ldrh	r3, [r3, #0]
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	4413      	add	r3, r2
 800d9fa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	3301      	adds	r3, #1
 800da00:	60fb      	str	r3, [r7, #12]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	885b      	ldrh	r3, [r3, #2]
 800da06:	461a      	mov	r2, r3
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	4293      	cmp	r3, r2
 800da0c:	dbe7      	blt.n	800d9de <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800da0e:	bf00      	nop
 800da10:	bf00      	nop
 800da12:	3714      	adds	r7, #20
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800da22:	2300      	movs	r3, #0
 800da24:	80fb      	strh	r3, [r7, #6]
 800da26:	e009      	b.n	800da3c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800da28:	88fb      	ldrh	r3, [r7, #6]
 800da2a:	4a08      	ldr	r2, [pc, #32]	; (800da4c <memp_init+0x30>)
 800da2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff ffc3 	bl	800d9bc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800da36:	88fb      	ldrh	r3, [r7, #6]
 800da38:	3301      	adds	r3, #1
 800da3a:	80fb      	strh	r3, [r7, #6]
 800da3c:	88fb      	ldrh	r3, [r7, #6]
 800da3e:	2b0c      	cmp	r3, #12
 800da40:	d9f2      	bls.n	800da28 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800da42:	bf00      	nop
 800da44:	bf00      	nop
 800da46:	3708      	adds	r7, #8
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	080221c8 	.word	0x080221c8

0800da50 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800da58:	f00a fcda 	bl	8018410 <sys_arch_protect>
 800da5c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d015      	beq.n	800da98 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	68ba      	ldr	r2, [r7, #8]
 800da72:	6812      	ldr	r2, [r2, #0]
 800da74:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	f003 0303 	and.w	r3, r3, #3
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d006      	beq.n	800da8e <do_memp_malloc_pool+0x3e>
 800da80:	4b09      	ldr	r3, [pc, #36]	; (800daa8 <do_memp_malloc_pool+0x58>)
 800da82:	f44f 728c 	mov.w	r2, #280	; 0x118
 800da86:	4909      	ldr	r1, [pc, #36]	; (800daac <do_memp_malloc_pool+0x5c>)
 800da88:	4809      	ldr	r0, [pc, #36]	; (800dab0 <do_memp_malloc_pool+0x60>)
 800da8a:	f00f fdc9 	bl	801d620 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800da8e:	68f8      	ldr	r0, [r7, #12]
 800da90:	f00a fccc 	bl	801842c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	e003      	b.n	800daa0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800da98:	68f8      	ldr	r0, [r7, #12]
 800da9a:	f00a fcc7 	bl	801842c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800da9e:	2300      	movs	r3, #0
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3710      	adds	r7, #16
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}
 800daa8:	0801f638 	.word	0x0801f638
 800daac:	0801f668 	.word	0x0801f668
 800dab0:	0801f68c 	.word	0x0801f68c

0800dab4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d106      	bne.n	800dad0 <memp_malloc_pool+0x1c>
 800dac2:	4b0a      	ldr	r3, [pc, #40]	; (800daec <memp_malloc_pool+0x38>)
 800dac4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800dac8:	4909      	ldr	r1, [pc, #36]	; (800daf0 <memp_malloc_pool+0x3c>)
 800daca:	480a      	ldr	r0, [pc, #40]	; (800daf4 <memp_malloc_pool+0x40>)
 800dacc:	f00f fda8 	bl	801d620 <iprintf>
  if (desc == NULL) {
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d101      	bne.n	800dada <memp_malloc_pool+0x26>
    return NULL;
 800dad6:	2300      	movs	r3, #0
 800dad8:	e003      	b.n	800dae2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f7ff ffb8 	bl	800da50 <do_memp_malloc_pool>
 800dae0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3708      	adds	r7, #8
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	0801f638 	.word	0x0801f638
 800daf0:	0801f6b4 	.word	0x0801f6b4
 800daf4:	0801f68c 	.word	0x0801f68c

0800daf8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b084      	sub	sp, #16
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	4603      	mov	r3, r0
 800db00:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800db02:	79fb      	ldrb	r3, [r7, #7]
 800db04:	2b0c      	cmp	r3, #12
 800db06:	d908      	bls.n	800db1a <memp_malloc+0x22>
 800db08:	4b0a      	ldr	r3, [pc, #40]	; (800db34 <memp_malloc+0x3c>)
 800db0a:	f240 1257 	movw	r2, #343	; 0x157
 800db0e:	490a      	ldr	r1, [pc, #40]	; (800db38 <memp_malloc+0x40>)
 800db10:	480a      	ldr	r0, [pc, #40]	; (800db3c <memp_malloc+0x44>)
 800db12:	f00f fd85 	bl	801d620 <iprintf>
 800db16:	2300      	movs	r3, #0
 800db18:	e008      	b.n	800db2c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800db1a:	79fb      	ldrb	r3, [r7, #7]
 800db1c:	4a08      	ldr	r2, [pc, #32]	; (800db40 <memp_malloc+0x48>)
 800db1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db22:	4618      	mov	r0, r3
 800db24:	f7ff ff94 	bl	800da50 <do_memp_malloc_pool>
 800db28:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800db2a:	68fb      	ldr	r3, [r7, #12]
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3710      	adds	r7, #16
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}
 800db34:	0801f638 	.word	0x0801f638
 800db38:	0801f6c8 	.word	0x0801f6c8
 800db3c:	0801f68c 	.word	0x0801f68c
 800db40:	080221c8 	.word	0x080221c8

0800db44 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	f003 0303 	and.w	r3, r3, #3
 800db54:	2b00      	cmp	r3, #0
 800db56:	d006      	beq.n	800db66 <do_memp_free_pool+0x22>
 800db58:	4b0d      	ldr	r3, [pc, #52]	; (800db90 <do_memp_free_pool+0x4c>)
 800db5a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800db5e:	490d      	ldr	r1, [pc, #52]	; (800db94 <do_memp_free_pool+0x50>)
 800db60:	480d      	ldr	r0, [pc, #52]	; (800db98 <do_memp_free_pool+0x54>)
 800db62:	f00f fd5d 	bl	801d620 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800db6a:	f00a fc51 	bl	8018410 <sys_arch_protect>
 800db6e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	689b      	ldr	r3, [r3, #8]
 800db74:	681a      	ldr	r2, [r3, #0]
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	689b      	ldr	r3, [r3, #8]
 800db7e:	68fa      	ldr	r2, [r7, #12]
 800db80:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800db82:	68b8      	ldr	r0, [r7, #8]
 800db84:	f00a fc52 	bl	801842c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800db88:	bf00      	nop
 800db8a:	3710      	adds	r7, #16
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	0801f638 	.word	0x0801f638
 800db94:	0801f6e8 	.word	0x0801f6e8
 800db98:	0801f68c 	.word	0x0801f68c

0800db9c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d106      	bne.n	800dbba <memp_free_pool+0x1e>
 800dbac:	4b0a      	ldr	r3, [pc, #40]	; (800dbd8 <memp_free_pool+0x3c>)
 800dbae:	f240 1295 	movw	r2, #405	; 0x195
 800dbb2:	490a      	ldr	r1, [pc, #40]	; (800dbdc <memp_free_pool+0x40>)
 800dbb4:	480a      	ldr	r0, [pc, #40]	; (800dbe0 <memp_free_pool+0x44>)
 800dbb6:	f00f fd33 	bl	801d620 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d007      	beq.n	800dbd0 <memp_free_pool+0x34>
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d004      	beq.n	800dbd0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800dbc6:	6839      	ldr	r1, [r7, #0]
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f7ff ffbb 	bl	800db44 <do_memp_free_pool>
 800dbce:	e000      	b.n	800dbd2 <memp_free_pool+0x36>
    return;
 800dbd0:	bf00      	nop
}
 800dbd2:	3708      	adds	r7, #8
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	0801f638 	.word	0x0801f638
 800dbdc:	0801f6b4 	.word	0x0801f6b4
 800dbe0:	0801f68c 	.word	0x0801f68c

0800dbe4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	4603      	mov	r3, r0
 800dbec:	6039      	str	r1, [r7, #0]
 800dbee:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800dbf0:	79fb      	ldrb	r3, [r7, #7]
 800dbf2:	2b0c      	cmp	r3, #12
 800dbf4:	d907      	bls.n	800dc06 <memp_free+0x22>
 800dbf6:	4b0c      	ldr	r3, [pc, #48]	; (800dc28 <memp_free+0x44>)
 800dbf8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800dbfc:	490b      	ldr	r1, [pc, #44]	; (800dc2c <memp_free+0x48>)
 800dbfe:	480c      	ldr	r0, [pc, #48]	; (800dc30 <memp_free+0x4c>)
 800dc00:	f00f fd0e 	bl	801d620 <iprintf>
 800dc04:	e00c      	b.n	800dc20 <memp_free+0x3c>

  if (mem == NULL) {
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d008      	beq.n	800dc1e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800dc0c:	79fb      	ldrb	r3, [r7, #7]
 800dc0e:	4a09      	ldr	r2, [pc, #36]	; (800dc34 <memp_free+0x50>)
 800dc10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc14:	6839      	ldr	r1, [r7, #0]
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7ff ff94 	bl	800db44 <do_memp_free_pool>
 800dc1c:	e000      	b.n	800dc20 <memp_free+0x3c>
    return;
 800dc1e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800dc20:	3708      	adds	r7, #8
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	0801f638 	.word	0x0801f638
 800dc2c:	0801f708 	.word	0x0801f708
 800dc30:	0801f68c 	.word	0x0801f68c
 800dc34:	080221c8 	.word	0x080221c8

0800dc38 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800dc3c:	bf00      	nop
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc44:	4770      	bx	lr
	...

0800dc48 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b086      	sub	sp, #24
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	60b9      	str	r1, [r7, #8]
 800dc52:	607a      	str	r2, [r7, #4]
 800dc54:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d108      	bne.n	800dc6e <netif_add+0x26>
 800dc5c:	4b57      	ldr	r3, [pc, #348]	; (800ddbc <netif_add+0x174>)
 800dc5e:	f240 1227 	movw	r2, #295	; 0x127
 800dc62:	4957      	ldr	r1, [pc, #348]	; (800ddc0 <netif_add+0x178>)
 800dc64:	4857      	ldr	r0, [pc, #348]	; (800ddc4 <netif_add+0x17c>)
 800dc66:	f00f fcdb 	bl	801d620 <iprintf>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	e0a2      	b.n	800ddb4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800dc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d108      	bne.n	800dc86 <netif_add+0x3e>
 800dc74:	4b51      	ldr	r3, [pc, #324]	; (800ddbc <netif_add+0x174>)
 800dc76:	f44f 7294 	mov.w	r2, #296	; 0x128
 800dc7a:	4953      	ldr	r1, [pc, #332]	; (800ddc8 <netif_add+0x180>)
 800dc7c:	4851      	ldr	r0, [pc, #324]	; (800ddc4 <netif_add+0x17c>)
 800dc7e:	f00f fccf 	bl	801d620 <iprintf>
 800dc82:	2300      	movs	r3, #0
 800dc84:	e096      	b.n	800ddb4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d101      	bne.n	800dc90 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800dc8c:	4b4f      	ldr	r3, [pc, #316]	; (800ddcc <netif_add+0x184>)
 800dc8e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d101      	bne.n	800dc9a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800dc96:	4b4d      	ldr	r3, [pc, #308]	; (800ddcc <netif_add+0x184>)
 800dc98:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d101      	bne.n	800dca4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800dca0:	4b4a      	ldr	r3, [pc, #296]	; (800ddcc <netif_add+0x184>)
 800dca2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2200      	movs	r2, #0
 800dca8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2200      	movs	r2, #0
 800dcae:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	4a45      	ldr	r2, [pc, #276]	; (800ddd0 <netif_add+0x188>)
 800dcba:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2200      	movs	r2, #0
 800dcce:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	6a3a      	ldr	r2, [r7, #32]
 800dcd4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800dcd6:	4b3f      	ldr	r3, [pc, #252]	; (800ddd4 <netif_add+0x18c>)
 800dcd8:	781a      	ldrb	r2, [r3, #0]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dce4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	687a      	ldr	r2, [r7, #4]
 800dcea:	68b9      	ldr	r1, [r7, #8]
 800dcec:	68f8      	ldr	r0, [r7, #12]
 800dcee:	f000 f913 	bl	800df18 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800dcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf4:	68f8      	ldr	r0, [r7, #12]
 800dcf6:	4798      	blx	r3
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d001      	beq.n	800dd02 <netif_add+0xba>
    return NULL;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	e058      	b.n	800ddb4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd08:	2bff      	cmp	r3, #255	; 0xff
 800dd0a:	d103      	bne.n	800dd14 <netif_add+0xcc>
        netif->num = 0;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800dd14:	2300      	movs	r3, #0
 800dd16:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dd18:	4b2f      	ldr	r3, [pc, #188]	; (800ddd8 <netif_add+0x190>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	617b      	str	r3, [r7, #20]
 800dd1e:	e02b      	b.n	800dd78 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800dd20:	697a      	ldr	r2, [r7, #20]
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d106      	bne.n	800dd36 <netif_add+0xee>
 800dd28:	4b24      	ldr	r3, [pc, #144]	; (800ddbc <netif_add+0x174>)
 800dd2a:	f240 128b 	movw	r2, #395	; 0x18b
 800dd2e:	492b      	ldr	r1, [pc, #172]	; (800dddc <netif_add+0x194>)
 800dd30:	4824      	ldr	r0, [pc, #144]	; (800ddc4 <netif_add+0x17c>)
 800dd32:	f00f fc75 	bl	801d620 <iprintf>
        num_netifs++;
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	3301      	adds	r3, #1
 800dd3a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	2bff      	cmp	r3, #255	; 0xff
 800dd40:	dd06      	ble.n	800dd50 <netif_add+0x108>
 800dd42:	4b1e      	ldr	r3, [pc, #120]	; (800ddbc <netif_add+0x174>)
 800dd44:	f240 128d 	movw	r2, #397	; 0x18d
 800dd48:	4925      	ldr	r1, [pc, #148]	; (800dde0 <netif_add+0x198>)
 800dd4a:	481e      	ldr	r0, [pc, #120]	; (800ddc4 <netif_add+0x17c>)
 800dd4c:	f00f fc68 	bl	801d620 <iprintf>
        if (netif2->num == netif->num) {
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d108      	bne.n	800dd72 <netif_add+0x12a>
          netif->num++;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd66:	3301      	adds	r3, #1
 800dd68:	b2da      	uxtb	r2, r3
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800dd70:	e005      	b.n	800dd7e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	617b      	str	r3, [r7, #20]
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d1d0      	bne.n	800dd20 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d1be      	bne.n	800dd02 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd8a:	2bfe      	cmp	r3, #254	; 0xfe
 800dd8c:	d103      	bne.n	800dd96 <netif_add+0x14e>
    netif_num = 0;
 800dd8e:	4b11      	ldr	r3, [pc, #68]	; (800ddd4 <netif_add+0x18c>)
 800dd90:	2200      	movs	r2, #0
 800dd92:	701a      	strb	r2, [r3, #0]
 800dd94:	e006      	b.n	800dda4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	b2da      	uxtb	r2, r3
 800dda0:	4b0c      	ldr	r3, [pc, #48]	; (800ddd4 <netif_add+0x18c>)
 800dda2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800dda4:	4b0c      	ldr	r3, [pc, #48]	; (800ddd8 <netif_add+0x190>)
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ddac:	4a0a      	ldr	r2, [pc, #40]	; (800ddd8 <netif_add+0x190>)
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3718      	adds	r7, #24
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	0801f724 	.word	0x0801f724
 800ddc0:	0801f7b8 	.word	0x0801f7b8
 800ddc4:	0801f774 	.word	0x0801f774
 800ddc8:	0801f7d4 	.word	0x0801f7d4
 800ddcc:	0802223c 	.word	0x0802223c
 800ddd0:	0800e1f3 	.word	0x0800e1f3
 800ddd4:	200113b4 	.word	0x200113b4
 800ddd8:	200113ac 	.word	0x200113ac
 800dddc:	0801f7f8 	.word	0x0801f7f8
 800dde0:	0801f80c 	.word	0x0801f80c

0800dde4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ddee:	6839      	ldr	r1, [r7, #0]
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f002 fe05 	bl	8010a00 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ddf6:	6839      	ldr	r1, [r7, #0]
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f007 fd25 	bl	8015848 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ddfe:	bf00      	nop
 800de00:	3708      	adds	r7, #8
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
	...

0800de08 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b086      	sub	sp, #24
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	60f8      	str	r0, [r7, #12]
 800de10:	60b9      	str	r1, [r7, #8]
 800de12:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d106      	bne.n	800de28 <netif_do_set_ipaddr+0x20>
 800de1a:	4b1d      	ldr	r3, [pc, #116]	; (800de90 <netif_do_set_ipaddr+0x88>)
 800de1c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800de20:	491c      	ldr	r1, [pc, #112]	; (800de94 <netif_do_set_ipaddr+0x8c>)
 800de22:	481d      	ldr	r0, [pc, #116]	; (800de98 <netif_do_set_ipaddr+0x90>)
 800de24:	f00f fbfc 	bl	801d620 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d106      	bne.n	800de3c <netif_do_set_ipaddr+0x34>
 800de2e:	4b18      	ldr	r3, [pc, #96]	; (800de90 <netif_do_set_ipaddr+0x88>)
 800de30:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800de34:	4917      	ldr	r1, [pc, #92]	; (800de94 <netif_do_set_ipaddr+0x8c>)
 800de36:	4818      	ldr	r0, [pc, #96]	; (800de98 <netif_do_set_ipaddr+0x90>)
 800de38:	f00f fbf2 	bl	801d620 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	681a      	ldr	r2, [r3, #0]
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	3304      	adds	r3, #4
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	429a      	cmp	r2, r3
 800de48:	d01c      	beq.n	800de84 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	3304      	adds	r3, #4
 800de54:	681a      	ldr	r2, [r3, #0]
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800de5a:	f107 0314 	add.w	r3, r7, #20
 800de5e:	4619      	mov	r1, r3
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f7ff ffbf 	bl	800dde4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d002      	beq.n	800de72 <netif_do_set_ipaddr+0x6a>
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	e000      	b.n	800de74 <netif_do_set_ipaddr+0x6c>
 800de72:	2300      	movs	r3, #0
 800de74:	68fa      	ldr	r2, [r7, #12]
 800de76:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800de78:	2101      	movs	r1, #1
 800de7a:	68f8      	ldr	r0, [r7, #12]
 800de7c:	f000 f8d2 	bl	800e024 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800de80:	2301      	movs	r3, #1
 800de82:	e000      	b.n	800de86 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800de84:	2300      	movs	r3, #0
}
 800de86:	4618      	mov	r0, r3
 800de88:	3718      	adds	r7, #24
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	0801f724 	.word	0x0801f724
 800de94:	0801f83c 	.word	0x0801f83c
 800de98:	0801f774 	.word	0x0801f774

0800de9c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b085      	sub	sp, #20
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	3308      	adds	r3, #8
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d00a      	beq.n	800decc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d002      	beq.n	800dec2 <netif_do_set_netmask+0x26>
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	e000      	b.n	800dec4 <netif_do_set_netmask+0x28>
 800dec2:	2300      	movs	r3, #0
 800dec4:	68fa      	ldr	r2, [r7, #12]
 800dec6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800dec8:	2301      	movs	r3, #1
 800deca:	e000      	b.n	800dece <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3714      	adds	r7, #20
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr

0800deda <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800deda:	b480      	push	{r7}
 800dedc:	b085      	sub	sp, #20
 800dede:	af00      	add	r7, sp, #0
 800dee0:	60f8      	str	r0, [r7, #12]
 800dee2:	60b9      	str	r1, [r7, #8]
 800dee4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	330c      	adds	r3, #12
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	429a      	cmp	r2, r3
 800def2:	d00a      	beq.n	800df0a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d002      	beq.n	800df00 <netif_do_set_gw+0x26>
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	e000      	b.n	800df02 <netif_do_set_gw+0x28>
 800df00:	2300      	movs	r3, #0
 800df02:	68fa      	ldr	r2, [r7, #12]
 800df04:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800df06:	2301      	movs	r3, #1
 800df08:	e000      	b.n	800df0c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800df0a:	2300      	movs	r3, #0
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3714      	adds	r7, #20
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr

0800df18 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b088      	sub	sp, #32
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	607a      	str	r2, [r7, #4]
 800df24:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800df26:	2300      	movs	r3, #0
 800df28:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800df2a:	2300      	movs	r3, #0
 800df2c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d101      	bne.n	800df38 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800df34:	4b1c      	ldr	r3, [pc, #112]	; (800dfa8 <netif_set_addr+0x90>)
 800df36:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d101      	bne.n	800df42 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800df3e:	4b1a      	ldr	r3, [pc, #104]	; (800dfa8 <netif_set_addr+0x90>)
 800df40:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d101      	bne.n	800df4c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800df48:	4b17      	ldr	r3, [pc, #92]	; (800dfa8 <netif_set_addr+0x90>)
 800df4a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d003      	beq.n	800df5a <netif_set_addr+0x42>
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d101      	bne.n	800df5e <netif_set_addr+0x46>
 800df5a:	2301      	movs	r3, #1
 800df5c:	e000      	b.n	800df60 <netif_set_addr+0x48>
 800df5e:	2300      	movs	r3, #0
 800df60:	617b      	str	r3, [r7, #20]
  if (remove) {
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d006      	beq.n	800df76 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800df68:	f107 0310 	add.w	r3, r7, #16
 800df6c:	461a      	mov	r2, r3
 800df6e:	68b9      	ldr	r1, [r7, #8]
 800df70:	68f8      	ldr	r0, [r7, #12]
 800df72:	f7ff ff49 	bl	800de08 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800df76:	69fa      	ldr	r2, [r7, #28]
 800df78:	6879      	ldr	r1, [r7, #4]
 800df7a:	68f8      	ldr	r0, [r7, #12]
 800df7c:	f7ff ff8e 	bl	800de9c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800df80:	69ba      	ldr	r2, [r7, #24]
 800df82:	6839      	ldr	r1, [r7, #0]
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	f7ff ffa8 	bl	800deda <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d106      	bne.n	800df9e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800df90:	f107 0310 	add.w	r3, r7, #16
 800df94:	461a      	mov	r2, r3
 800df96:	68b9      	ldr	r1, [r7, #8]
 800df98:	68f8      	ldr	r0, [r7, #12]
 800df9a:	f7ff ff35 	bl	800de08 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800df9e:	bf00      	nop
 800dfa0:	3720      	adds	r7, #32
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	0802223c 	.word	0x0802223c

0800dfac <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b083      	sub	sp, #12
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800dfb4:	4a04      	ldr	r2, [pc, #16]	; (800dfc8 <netif_set_default+0x1c>)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800dfba:	bf00      	nop
 800dfbc:	370c      	adds	r7, #12
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr
 800dfc6:	bf00      	nop
 800dfc8:	200113b0 	.word	0x200113b0

0800dfcc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d107      	bne.n	800dfea <netif_set_up+0x1e>
 800dfda:	4b0f      	ldr	r3, [pc, #60]	; (800e018 <netif_set_up+0x4c>)
 800dfdc:	f44f 7254 	mov.w	r2, #848	; 0x350
 800dfe0:	490e      	ldr	r1, [pc, #56]	; (800e01c <netif_set_up+0x50>)
 800dfe2:	480f      	ldr	r0, [pc, #60]	; (800e020 <netif_set_up+0x54>)
 800dfe4:	f00f fb1c 	bl	801d620 <iprintf>
 800dfe8:	e013      	b.n	800e012 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dff0:	f003 0301 	and.w	r3, r3, #1
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d10c      	bne.n	800e012 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dffe:	f043 0301 	orr.w	r3, r3, #1
 800e002:	b2da      	uxtb	r2, r3
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e00a:	2103      	movs	r1, #3
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f000 f809 	bl	800e024 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	0801f724 	.word	0x0801f724
 800e01c:	0801f8ac 	.word	0x0801f8ac
 800e020:	0801f774 	.word	0x0801f774

0800e024 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b082      	sub	sp, #8
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	460b      	mov	r3, r1
 800e02e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d106      	bne.n	800e044 <netif_issue_reports+0x20>
 800e036:	4b18      	ldr	r3, [pc, #96]	; (800e098 <netif_issue_reports+0x74>)
 800e038:	f240 326d 	movw	r2, #877	; 0x36d
 800e03c:	4917      	ldr	r1, [pc, #92]	; (800e09c <netif_issue_reports+0x78>)
 800e03e:	4818      	ldr	r0, [pc, #96]	; (800e0a0 <netif_issue_reports+0x7c>)
 800e040:	f00f faee 	bl	801d620 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e04a:	f003 0304 	and.w	r3, r3, #4
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d01e      	beq.n	800e090 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e058:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d017      	beq.n	800e090 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e060:	78fb      	ldrb	r3, [r7, #3]
 800e062:	f003 0301 	and.w	r3, r3, #1
 800e066:	2b00      	cmp	r3, #0
 800e068:	d013      	beq.n	800e092 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	3304      	adds	r3, #4
 800e06e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e070:	2b00      	cmp	r3, #0
 800e072:	d00e      	beq.n	800e092 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e07a:	f003 0308 	and.w	r3, r3, #8
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d007      	beq.n	800e092 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	3304      	adds	r3, #4
 800e086:	4619      	mov	r1, r3
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f008 fb47 	bl	801671c <etharp_request>
 800e08e:	e000      	b.n	800e092 <netif_issue_reports+0x6e>
    return;
 800e090:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e092:	3708      	adds	r7, #8
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	0801f724 	.word	0x0801f724
 800e09c:	0801f8c8 	.word	0x0801f8c8
 800e0a0:	0801f774 	.word	0x0801f774

0800e0a4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d107      	bne.n	800e0c2 <netif_set_down+0x1e>
 800e0b2:	4b12      	ldr	r3, [pc, #72]	; (800e0fc <netif_set_down+0x58>)
 800e0b4:	f240 329b 	movw	r2, #923	; 0x39b
 800e0b8:	4911      	ldr	r1, [pc, #68]	; (800e100 <netif_set_down+0x5c>)
 800e0ba:	4812      	ldr	r0, [pc, #72]	; (800e104 <netif_set_down+0x60>)
 800e0bc:	f00f fab0 	bl	801d620 <iprintf>
 800e0c0:	e019      	b.n	800e0f6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0c8:	f003 0301 	and.w	r3, r3, #1
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d012      	beq.n	800e0f6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0d6:	f023 0301 	bic.w	r3, r3, #1
 800e0da:	b2da      	uxtb	r2, r3
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0e8:	f003 0308 	and.w	r3, r3, #8
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d002      	beq.n	800e0f6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f007 fed1 	bl	8015e98 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e0f6:	3708      	adds	r7, #8
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	0801f724 	.word	0x0801f724
 800e100:	0801f8ec 	.word	0x0801f8ec
 800e104:	0801f774 	.word	0x0801f774

0800e108 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d107      	bne.n	800e126 <netif_set_link_up+0x1e>
 800e116:	4b13      	ldr	r3, [pc, #76]	; (800e164 <netif_set_link_up+0x5c>)
 800e118:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e11c:	4912      	ldr	r1, [pc, #72]	; (800e168 <netif_set_link_up+0x60>)
 800e11e:	4813      	ldr	r0, [pc, #76]	; (800e16c <netif_set_link_up+0x64>)
 800e120:	f00f fa7e 	bl	801d620 <iprintf>
 800e124:	e01b      	b.n	800e15e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e12c:	f003 0304 	and.w	r3, r3, #4
 800e130:	2b00      	cmp	r3, #0
 800e132:	d114      	bne.n	800e15e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e13a:	f043 0304 	orr.w	r3, r3, #4
 800e13e:	b2da      	uxtb	r2, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e146:	2103      	movs	r1, #3
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f7ff ff6b 	bl	800e024 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	69db      	ldr	r3, [r3, #28]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d003      	beq.n	800e15e <netif_set_link_up+0x56>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	69db      	ldr	r3, [r3, #28]
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e15e:	3708      	adds	r7, #8
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}
 800e164:	0801f724 	.word	0x0801f724
 800e168:	0801f90c 	.word	0x0801f90c
 800e16c:	0801f774 	.word	0x0801f774

0800e170 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d107      	bne.n	800e18e <netif_set_link_down+0x1e>
 800e17e:	4b11      	ldr	r3, [pc, #68]	; (800e1c4 <netif_set_link_down+0x54>)
 800e180:	f240 4206 	movw	r2, #1030	; 0x406
 800e184:	4910      	ldr	r1, [pc, #64]	; (800e1c8 <netif_set_link_down+0x58>)
 800e186:	4811      	ldr	r0, [pc, #68]	; (800e1cc <netif_set_link_down+0x5c>)
 800e188:	f00f fa4a 	bl	801d620 <iprintf>
 800e18c:	e017      	b.n	800e1be <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e194:	f003 0304 	and.w	r3, r3, #4
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d010      	beq.n	800e1be <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e1a2:	f023 0304 	bic.w	r3, r3, #4
 800e1a6:	b2da      	uxtb	r2, r3
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	69db      	ldr	r3, [r3, #28]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d003      	beq.n	800e1be <netif_set_link_down+0x4e>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	69db      	ldr	r3, [r3, #28]
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e1be:	3708      	adds	r7, #8
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}
 800e1c4:	0801f724 	.word	0x0801f724
 800e1c8:	0801f930 	.word	0x0801f930
 800e1cc:	0801f774 	.word	0x0801f774

0800e1d0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b083      	sub	sp, #12
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d002      	beq.n	800e1e6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	683a      	ldr	r2, [r7, #0]
 800e1e4:	61da      	str	r2, [r3, #28]
  }
}
 800e1e6:	bf00      	nop
 800e1e8:	370c      	adds	r7, #12
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f0:	4770      	bx	lr

0800e1f2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e1f2:	b480      	push	{r7}
 800e1f4:	b085      	sub	sp, #20
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	60f8      	str	r0, [r7, #12]
 800e1fa:	60b9      	str	r1, [r7, #8]
 800e1fc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e1fe:	f06f 030b 	mvn.w	r3, #11
}
 800e202:	4618      	mov	r0, r3
 800e204:	3714      	adds	r7, #20
 800e206:	46bd      	mov	sp, r7
 800e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20c:	4770      	bx	lr
	...

0800e210 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e210:	b480      	push	{r7}
 800e212:	b085      	sub	sp, #20
 800e214:	af00      	add	r7, sp, #0
 800e216:	4603      	mov	r3, r0
 800e218:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e21a:	79fb      	ldrb	r3, [r7, #7]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d013      	beq.n	800e248 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e220:	4b0d      	ldr	r3, [pc, #52]	; (800e258 <netif_get_by_index+0x48>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	60fb      	str	r3, [r7, #12]
 800e226:	e00c      	b.n	800e242 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e22e:	3301      	adds	r3, #1
 800e230:	b2db      	uxtb	r3, r3
 800e232:	79fa      	ldrb	r2, [r7, #7]
 800e234:	429a      	cmp	r2, r3
 800e236:	d101      	bne.n	800e23c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	e006      	b.n	800e24a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	60fb      	str	r3, [r7, #12]
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d1ef      	bne.n	800e228 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e248:	2300      	movs	r3, #0
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3714      	adds	r7, #20
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr
 800e256:	bf00      	nop
 800e258:	200113ac 	.word	0x200113ac

0800e25c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b082      	sub	sp, #8
 800e260:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e262:	f00a f8d5 	bl	8018410 <sys_arch_protect>
 800e266:	6038      	str	r0, [r7, #0]
 800e268:	4b0d      	ldr	r3, [pc, #52]	; (800e2a0 <pbuf_free_ooseq+0x44>)
 800e26a:	2200      	movs	r2, #0
 800e26c:	701a      	strb	r2, [r3, #0]
 800e26e:	6838      	ldr	r0, [r7, #0]
 800e270:	f00a f8dc 	bl	801842c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e274:	4b0b      	ldr	r3, [pc, #44]	; (800e2a4 <pbuf_free_ooseq+0x48>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	607b      	str	r3, [r7, #4]
 800e27a:	e00a      	b.n	800e292 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e280:	2b00      	cmp	r3, #0
 800e282:	d003      	beq.n	800e28c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f002 fbf9 	bl	8010a7c <tcp_free_ooseq>
      return;
 800e28a:	e005      	b.n	800e298 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	68db      	ldr	r3, [r3, #12]
 800e290:	607b      	str	r3, [r7, #4]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d1f1      	bne.n	800e27c <pbuf_free_ooseq+0x20>
    }
  }
}
 800e298:	3708      	adds	r7, #8
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	bf00      	nop
 800e2a0:	200113b5 	.word	0x200113b5
 800e2a4:	200113c4 	.word	0x200113c4

0800e2a8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e2b0:	f7ff ffd4 	bl	800e25c <pbuf_free_ooseq>
}
 800e2b4:	bf00      	nop
 800e2b6:	3708      	adds	r7, #8
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b082      	sub	sp, #8
 800e2c0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e2c2:	f00a f8a5 	bl	8018410 <sys_arch_protect>
 800e2c6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e2c8:	4b0f      	ldr	r3, [pc, #60]	; (800e308 <pbuf_pool_is_empty+0x4c>)
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e2ce:	4b0e      	ldr	r3, [pc, #56]	; (800e308 <pbuf_pool_is_empty+0x4c>)
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f00a f8a9 	bl	801842c <sys_arch_unprotect>

  if (!queued) {
 800e2da:	78fb      	ldrb	r3, [r7, #3]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d10f      	bne.n	800e300 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e2e0:	2100      	movs	r1, #0
 800e2e2:	480a      	ldr	r0, [pc, #40]	; (800e30c <pbuf_pool_is_empty+0x50>)
 800e2e4:	f7fe fe80 	bl	800cfe8 <tcpip_try_callback>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d008      	beq.n	800e300 <pbuf_pool_is_empty+0x44>
 800e2ee:	f00a f88f 	bl	8018410 <sys_arch_protect>
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	4b04      	ldr	r3, [pc, #16]	; (800e308 <pbuf_pool_is_empty+0x4c>)
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	701a      	strb	r2, [r3, #0]
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f00a f896 	bl	801842c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e300:	bf00      	nop
 800e302:	3708      	adds	r7, #8
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	200113b5 	.word	0x200113b5
 800e30c:	0800e2a9 	.word	0x0800e2a9

0800e310 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e310:	b480      	push	{r7}
 800e312:	b085      	sub	sp, #20
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	4611      	mov	r1, r2
 800e31c:	461a      	mov	r2, r3
 800e31e:	460b      	mov	r3, r1
 800e320:	80fb      	strh	r3, [r7, #6]
 800e322:	4613      	mov	r3, r2
 800e324:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2200      	movs	r2, #0
 800e32a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	68ba      	ldr	r2, [r7, #8]
 800e330:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	88fa      	ldrh	r2, [r7, #6]
 800e336:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	88ba      	ldrh	r2, [r7, #4]
 800e33c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e33e:	8b3b      	ldrh	r3, [r7, #24]
 800e340:	b2da      	uxtb	r2, r3
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	7f3a      	ldrb	r2, [r7, #28]
 800e34a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2201      	movs	r2, #1
 800e350:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2200      	movs	r2, #0
 800e356:	73da      	strb	r2, [r3, #15]
}
 800e358:	bf00      	nop
 800e35a:	3714      	adds	r7, #20
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr

0800e364 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b08c      	sub	sp, #48	; 0x30
 800e368:	af02      	add	r7, sp, #8
 800e36a:	4603      	mov	r3, r0
 800e36c:	71fb      	strb	r3, [r7, #7]
 800e36e:	460b      	mov	r3, r1
 800e370:	80bb      	strh	r3, [r7, #4]
 800e372:	4613      	mov	r3, r2
 800e374:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e376:	79fb      	ldrb	r3, [r7, #7]
 800e378:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e37a:	887b      	ldrh	r3, [r7, #2]
 800e37c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e380:	d07f      	beq.n	800e482 <pbuf_alloc+0x11e>
 800e382:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e386:	f300 80c8 	bgt.w	800e51a <pbuf_alloc+0x1b6>
 800e38a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e38e:	d010      	beq.n	800e3b2 <pbuf_alloc+0x4e>
 800e390:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e394:	f300 80c1 	bgt.w	800e51a <pbuf_alloc+0x1b6>
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d002      	beq.n	800e3a2 <pbuf_alloc+0x3e>
 800e39c:	2b41      	cmp	r3, #65	; 0x41
 800e39e:	f040 80bc 	bne.w	800e51a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e3a2:	887a      	ldrh	r2, [r7, #2]
 800e3a4:	88bb      	ldrh	r3, [r7, #4]
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	2000      	movs	r0, #0
 800e3aa:	f000 f8d1 	bl	800e550 <pbuf_alloc_reference>
 800e3ae:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e3b0:	e0bd      	b.n	800e52e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e3ba:	88bb      	ldrh	r3, [r7, #4]
 800e3bc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e3be:	200c      	movs	r0, #12
 800e3c0:	f7ff fb9a 	bl	800daf8 <memp_malloc>
 800e3c4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d109      	bne.n	800e3e0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e3cc:	f7ff ff76 	bl	800e2bc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d002      	beq.n	800e3dc <pbuf_alloc+0x78>
            pbuf_free(p);
 800e3d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3d8:	f000 faa8 	bl	800e92c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	e0a7      	b.n	800e530 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e3e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3e2:	3303      	adds	r3, #3
 800e3e4:	b29b      	uxth	r3, r3
 800e3e6:	f023 0303 	bic.w	r3, r3, #3
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	8b7a      	ldrh	r2, [r7, #26]
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	bf28      	it	cs
 800e3f8:	4613      	movcs	r3, r2
 800e3fa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e3fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3fe:	3310      	adds	r3, #16
 800e400:	693a      	ldr	r2, [r7, #16]
 800e402:	4413      	add	r3, r2
 800e404:	3303      	adds	r3, #3
 800e406:	f023 0303 	bic.w	r3, r3, #3
 800e40a:	4618      	mov	r0, r3
 800e40c:	89f9      	ldrh	r1, [r7, #14]
 800e40e:	8b7a      	ldrh	r2, [r7, #26]
 800e410:	2300      	movs	r3, #0
 800e412:	9301      	str	r3, [sp, #4]
 800e414:	887b      	ldrh	r3, [r7, #2]
 800e416:	9300      	str	r3, [sp, #0]
 800e418:	460b      	mov	r3, r1
 800e41a:	4601      	mov	r1, r0
 800e41c:	6938      	ldr	r0, [r7, #16]
 800e41e:	f7ff ff77 	bl	800e310 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	f003 0303 	and.w	r3, r3, #3
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d006      	beq.n	800e43c <pbuf_alloc+0xd8>
 800e42e:	4b42      	ldr	r3, [pc, #264]	; (800e538 <pbuf_alloc+0x1d4>)
 800e430:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e434:	4941      	ldr	r1, [pc, #260]	; (800e53c <pbuf_alloc+0x1d8>)
 800e436:	4842      	ldr	r0, [pc, #264]	; (800e540 <pbuf_alloc+0x1dc>)
 800e438:	f00f f8f2 	bl	801d620 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e43c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e43e:	3303      	adds	r3, #3
 800e440:	f023 0303 	bic.w	r3, r3, #3
 800e444:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e448:	d106      	bne.n	800e458 <pbuf_alloc+0xf4>
 800e44a:	4b3b      	ldr	r3, [pc, #236]	; (800e538 <pbuf_alloc+0x1d4>)
 800e44c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e450:	493c      	ldr	r1, [pc, #240]	; (800e544 <pbuf_alloc+0x1e0>)
 800e452:	483b      	ldr	r0, [pc, #236]	; (800e540 <pbuf_alloc+0x1dc>)
 800e454:	f00f f8e4 	bl	801d620 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d102      	bne.n	800e464 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	627b      	str	r3, [r7, #36]	; 0x24
 800e462:	e002      	b.n	800e46a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e464:	69fb      	ldr	r3, [r7, #28]
 800e466:	693a      	ldr	r2, [r7, #16]
 800e468:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e46e:	8b7a      	ldrh	r2, [r7, #26]
 800e470:	89fb      	ldrh	r3, [r7, #14]
 800e472:	1ad3      	subs	r3, r2, r3
 800e474:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e476:	2300      	movs	r3, #0
 800e478:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e47a:	8b7b      	ldrh	r3, [r7, #26]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d19e      	bne.n	800e3be <pbuf_alloc+0x5a>
      break;
 800e480:	e055      	b.n	800e52e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e482:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e484:	3303      	adds	r3, #3
 800e486:	b29b      	uxth	r3, r3
 800e488:	f023 0303 	bic.w	r3, r3, #3
 800e48c:	b29a      	uxth	r2, r3
 800e48e:	88bb      	ldrh	r3, [r7, #4]
 800e490:	3303      	adds	r3, #3
 800e492:	b29b      	uxth	r3, r3
 800e494:	f023 0303 	bic.w	r3, r3, #3
 800e498:	b29b      	uxth	r3, r3
 800e49a:	4413      	add	r3, r2
 800e49c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e49e:	8b3b      	ldrh	r3, [r7, #24]
 800e4a0:	3310      	adds	r3, #16
 800e4a2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e4a4:	8b3a      	ldrh	r2, [r7, #24]
 800e4a6:	88bb      	ldrh	r3, [r7, #4]
 800e4a8:	3303      	adds	r3, #3
 800e4aa:	f023 0303 	bic.w	r3, r3, #3
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d306      	bcc.n	800e4c0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e4b2:	8afa      	ldrh	r2, [r7, #22]
 800e4b4:	88bb      	ldrh	r3, [r7, #4]
 800e4b6:	3303      	adds	r3, #3
 800e4b8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d201      	bcs.n	800e4c4 <pbuf_alloc+0x160>
        return NULL;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	e035      	b.n	800e530 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e4c4:	8afb      	ldrh	r3, [r7, #22]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7ff f96e 	bl	800d7a8 <mem_malloc>
 800e4cc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d101      	bne.n	800e4d8 <pbuf_alloc+0x174>
        return NULL;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	e02b      	b.n	800e530 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e4d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4da:	3310      	adds	r3, #16
 800e4dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4de:	4413      	add	r3, r2
 800e4e0:	3303      	adds	r3, #3
 800e4e2:	f023 0303 	bic.w	r3, r3, #3
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	88b9      	ldrh	r1, [r7, #4]
 800e4ea:	88ba      	ldrh	r2, [r7, #4]
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	9301      	str	r3, [sp, #4]
 800e4f0:	887b      	ldrh	r3, [r7, #2]
 800e4f2:	9300      	str	r3, [sp, #0]
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	4601      	mov	r1, r0
 800e4f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4fa:	f7ff ff09 	bl	800e310 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	f003 0303 	and.w	r3, r3, #3
 800e506:	2b00      	cmp	r3, #0
 800e508:	d010      	beq.n	800e52c <pbuf_alloc+0x1c8>
 800e50a:	4b0b      	ldr	r3, [pc, #44]	; (800e538 <pbuf_alloc+0x1d4>)
 800e50c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e510:	490d      	ldr	r1, [pc, #52]	; (800e548 <pbuf_alloc+0x1e4>)
 800e512:	480b      	ldr	r0, [pc, #44]	; (800e540 <pbuf_alloc+0x1dc>)
 800e514:	f00f f884 	bl	801d620 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e518:	e008      	b.n	800e52c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e51a:	4b07      	ldr	r3, [pc, #28]	; (800e538 <pbuf_alloc+0x1d4>)
 800e51c:	f240 1227 	movw	r2, #295	; 0x127
 800e520:	490a      	ldr	r1, [pc, #40]	; (800e54c <pbuf_alloc+0x1e8>)
 800e522:	4807      	ldr	r0, [pc, #28]	; (800e540 <pbuf_alloc+0x1dc>)
 800e524:	f00f f87c 	bl	801d620 <iprintf>
      return NULL;
 800e528:	2300      	movs	r3, #0
 800e52a:	e001      	b.n	800e530 <pbuf_alloc+0x1cc>
      break;
 800e52c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e530:	4618      	mov	r0, r3
 800e532:	3728      	adds	r7, #40	; 0x28
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}
 800e538:	0801f954 	.word	0x0801f954
 800e53c:	0801f984 	.word	0x0801f984
 800e540:	0801f9b4 	.word	0x0801f9b4
 800e544:	0801f9dc 	.word	0x0801f9dc
 800e548:	0801fa10 	.word	0x0801fa10
 800e54c:	0801fa3c 	.word	0x0801fa3c

0800e550 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b086      	sub	sp, #24
 800e554:	af02      	add	r7, sp, #8
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	460b      	mov	r3, r1
 800e55a:	807b      	strh	r3, [r7, #2]
 800e55c:	4613      	mov	r3, r2
 800e55e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e560:	883b      	ldrh	r3, [r7, #0]
 800e562:	2b41      	cmp	r3, #65	; 0x41
 800e564:	d009      	beq.n	800e57a <pbuf_alloc_reference+0x2a>
 800e566:	883b      	ldrh	r3, [r7, #0]
 800e568:	2b01      	cmp	r3, #1
 800e56a:	d006      	beq.n	800e57a <pbuf_alloc_reference+0x2a>
 800e56c:	4b0f      	ldr	r3, [pc, #60]	; (800e5ac <pbuf_alloc_reference+0x5c>)
 800e56e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e572:	490f      	ldr	r1, [pc, #60]	; (800e5b0 <pbuf_alloc_reference+0x60>)
 800e574:	480f      	ldr	r0, [pc, #60]	; (800e5b4 <pbuf_alloc_reference+0x64>)
 800e576:	f00f f853 	bl	801d620 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e57a:	200b      	movs	r0, #11
 800e57c:	f7ff fabc 	bl	800daf8 <memp_malloc>
 800e580:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d101      	bne.n	800e58c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e588:	2300      	movs	r3, #0
 800e58a:	e00b      	b.n	800e5a4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e58c:	8879      	ldrh	r1, [r7, #2]
 800e58e:	887a      	ldrh	r2, [r7, #2]
 800e590:	2300      	movs	r3, #0
 800e592:	9301      	str	r3, [sp, #4]
 800e594:	883b      	ldrh	r3, [r7, #0]
 800e596:	9300      	str	r3, [sp, #0]
 800e598:	460b      	mov	r3, r1
 800e59a:	6879      	ldr	r1, [r7, #4]
 800e59c:	68f8      	ldr	r0, [r7, #12]
 800e59e:	f7ff feb7 	bl	800e310 <pbuf_init_alloced_pbuf>
  return p;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3710      	adds	r7, #16
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	0801f954 	.word	0x0801f954
 800e5b0:	0801fa58 	.word	0x0801fa58
 800e5b4:	0801f9b4 	.word	0x0801f9b4

0800e5b8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b088      	sub	sp, #32
 800e5bc:	af02      	add	r7, sp, #8
 800e5be:	607b      	str	r3, [r7, #4]
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	73fb      	strb	r3, [r7, #15]
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	81bb      	strh	r3, [r7, #12]
 800e5c8:	4613      	mov	r3, r2
 800e5ca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e5cc:	7bfb      	ldrb	r3, [r7, #15]
 800e5ce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e5d0:	8a7b      	ldrh	r3, [r7, #18]
 800e5d2:	3303      	adds	r3, #3
 800e5d4:	f023 0203 	bic.w	r2, r3, #3
 800e5d8:	89bb      	ldrh	r3, [r7, #12]
 800e5da:	441a      	add	r2, r3
 800e5dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d901      	bls.n	800e5e6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	e018      	b.n	800e618 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e5e6:	6a3b      	ldr	r3, [r7, #32]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d007      	beq.n	800e5fc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e5ec:	8a7b      	ldrh	r3, [r7, #18]
 800e5ee:	3303      	adds	r3, #3
 800e5f0:	f023 0303 	bic.w	r3, r3, #3
 800e5f4:	6a3a      	ldr	r2, [r7, #32]
 800e5f6:	4413      	add	r3, r2
 800e5f8:	617b      	str	r3, [r7, #20]
 800e5fa:	e001      	b.n	800e600 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	89b9      	ldrh	r1, [r7, #12]
 800e604:	89ba      	ldrh	r2, [r7, #12]
 800e606:	2302      	movs	r3, #2
 800e608:	9301      	str	r3, [sp, #4]
 800e60a:	897b      	ldrh	r3, [r7, #10]
 800e60c:	9300      	str	r3, [sp, #0]
 800e60e:	460b      	mov	r3, r1
 800e610:	6979      	ldr	r1, [r7, #20]
 800e612:	f7ff fe7d 	bl	800e310 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e616:	687b      	ldr	r3, [r7, #4]
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3718      	adds	r7, #24
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}

0800e620 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b084      	sub	sp, #16
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	460b      	mov	r3, r1
 800e62a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d106      	bne.n	800e640 <pbuf_realloc+0x20>
 800e632:	4b3a      	ldr	r3, [pc, #232]	; (800e71c <pbuf_realloc+0xfc>)
 800e634:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e638:	4939      	ldr	r1, [pc, #228]	; (800e720 <pbuf_realloc+0x100>)
 800e63a:	483a      	ldr	r0, [pc, #232]	; (800e724 <pbuf_realloc+0x104>)
 800e63c:	f00e fff0 	bl	801d620 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	891b      	ldrh	r3, [r3, #8]
 800e644:	887a      	ldrh	r2, [r7, #2]
 800e646:	429a      	cmp	r2, r3
 800e648:	d263      	bcs.n	800e712 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	891a      	ldrh	r2, [r3, #8]
 800e64e:	887b      	ldrh	r3, [r7, #2]
 800e650:	1ad3      	subs	r3, r2, r3
 800e652:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e654:	887b      	ldrh	r3, [r7, #2]
 800e656:	817b      	strh	r3, [r7, #10]
  q = p;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e65c:	e018      	b.n	800e690 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	895b      	ldrh	r3, [r3, #10]
 800e662:	897a      	ldrh	r2, [r7, #10]
 800e664:	1ad3      	subs	r3, r2, r3
 800e666:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	891a      	ldrh	r2, [r3, #8]
 800e66c:	893b      	ldrh	r3, [r7, #8]
 800e66e:	1ad3      	subs	r3, r2, r3
 800e670:	b29a      	uxth	r2, r3
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d106      	bne.n	800e690 <pbuf_realloc+0x70>
 800e682:	4b26      	ldr	r3, [pc, #152]	; (800e71c <pbuf_realloc+0xfc>)
 800e684:	f240 12af 	movw	r2, #431	; 0x1af
 800e688:	4927      	ldr	r1, [pc, #156]	; (800e728 <pbuf_realloc+0x108>)
 800e68a:	4826      	ldr	r0, [pc, #152]	; (800e724 <pbuf_realloc+0x104>)
 800e68c:	f00e ffc8 	bl	801d620 <iprintf>
  while (rem_len > q->len) {
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	895b      	ldrh	r3, [r3, #10]
 800e694:	897a      	ldrh	r2, [r7, #10]
 800e696:	429a      	cmp	r2, r3
 800e698:	d8e1      	bhi.n	800e65e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	7b1b      	ldrb	r3, [r3, #12]
 800e69e:	f003 030f 	and.w	r3, r3, #15
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d121      	bne.n	800e6ea <pbuf_realloc+0xca>
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	895b      	ldrh	r3, [r3, #10]
 800e6aa:	897a      	ldrh	r2, [r7, #10]
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d01c      	beq.n	800e6ea <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	7b5b      	ldrb	r3, [r3, #13]
 800e6b4:	f003 0302 	and.w	r3, r3, #2
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d116      	bne.n	800e6ea <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	685a      	ldr	r2, [r3, #4]
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	1ad3      	subs	r3, r2, r3
 800e6c4:	b29a      	uxth	r2, r3
 800e6c6:	897b      	ldrh	r3, [r7, #10]
 800e6c8:	4413      	add	r3, r2
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	68f8      	ldr	r0, [r7, #12]
 800e6d0:	f7fe ff5a 	bl	800d588 <mem_trim>
 800e6d4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d106      	bne.n	800e6ea <pbuf_realloc+0xca>
 800e6dc:	4b0f      	ldr	r3, [pc, #60]	; (800e71c <pbuf_realloc+0xfc>)
 800e6de:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e6e2:	4912      	ldr	r1, [pc, #72]	; (800e72c <pbuf_realloc+0x10c>)
 800e6e4:	480f      	ldr	r0, [pc, #60]	; (800e724 <pbuf_realloc+0x104>)
 800e6e6:	f00e ff9b 	bl	801d620 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	897a      	ldrh	r2, [r7, #10]
 800e6ee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	895a      	ldrh	r2, [r3, #10]
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d004      	beq.n	800e70a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	4618      	mov	r0, r3
 800e706:	f000 f911 	bl	800e92c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2200      	movs	r2, #0
 800e70e:	601a      	str	r2, [r3, #0]
 800e710:	e000      	b.n	800e714 <pbuf_realloc+0xf4>
    return;
 800e712:	bf00      	nop

}
 800e714:	3710      	adds	r7, #16
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	0801f954 	.word	0x0801f954
 800e720:	0801fa6c 	.word	0x0801fa6c
 800e724:	0801f9b4 	.word	0x0801f9b4
 800e728:	0801fa84 	.word	0x0801fa84
 800e72c:	0801fa9c 	.word	0x0801fa9c

0800e730 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b086      	sub	sp, #24
 800e734:	af00      	add	r7, sp, #0
 800e736:	60f8      	str	r0, [r7, #12]
 800e738:	60b9      	str	r1, [r7, #8]
 800e73a:	4613      	mov	r3, r2
 800e73c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d106      	bne.n	800e752 <pbuf_add_header_impl+0x22>
 800e744:	4b2b      	ldr	r3, [pc, #172]	; (800e7f4 <pbuf_add_header_impl+0xc4>)
 800e746:	f240 12df 	movw	r2, #479	; 0x1df
 800e74a:	492b      	ldr	r1, [pc, #172]	; (800e7f8 <pbuf_add_header_impl+0xc8>)
 800e74c:	482b      	ldr	r0, [pc, #172]	; (800e7fc <pbuf_add_header_impl+0xcc>)
 800e74e:	f00e ff67 	bl	801d620 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d003      	beq.n	800e760 <pbuf_add_header_impl+0x30>
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e75e:	d301      	bcc.n	800e764 <pbuf_add_header_impl+0x34>
    return 1;
 800e760:	2301      	movs	r3, #1
 800e762:	e043      	b.n	800e7ec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d101      	bne.n	800e76e <pbuf_add_header_impl+0x3e>
    return 0;
 800e76a:	2300      	movs	r3, #0
 800e76c:	e03e      	b.n	800e7ec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	891a      	ldrh	r2, [r3, #8]
 800e776:	8a7b      	ldrh	r3, [r7, #18]
 800e778:	4413      	add	r3, r2
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	8a7a      	ldrh	r2, [r7, #18]
 800e77e:	429a      	cmp	r2, r3
 800e780:	d901      	bls.n	800e786 <pbuf_add_header_impl+0x56>
    return 1;
 800e782:	2301      	movs	r3, #1
 800e784:	e032      	b.n	800e7ec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	7b1b      	ldrb	r3, [r3, #12]
 800e78a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e78c:	8a3b      	ldrh	r3, [r7, #16]
 800e78e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e792:	2b00      	cmp	r3, #0
 800e794:	d00c      	beq.n	800e7b0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	685a      	ldr	r2, [r3, #4]
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	425b      	negs	r3, r3
 800e79e:	4413      	add	r3, r2
 800e7a0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	3310      	adds	r3, #16
 800e7a6:	697a      	ldr	r2, [r7, #20]
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d20d      	bcs.n	800e7c8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	e01d      	b.n	800e7ec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e7b0:	79fb      	ldrb	r3, [r7, #7]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d006      	beq.n	800e7c4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	685a      	ldr	r2, [r3, #4]
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	425b      	negs	r3, r3
 800e7be:	4413      	add	r3, r2
 800e7c0:	617b      	str	r3, [r7, #20]
 800e7c2:	e001      	b.n	800e7c8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	e011      	b.n	800e7ec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	697a      	ldr	r2, [r7, #20]
 800e7cc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	895a      	ldrh	r2, [r3, #10]
 800e7d2:	8a7b      	ldrh	r3, [r7, #18]
 800e7d4:	4413      	add	r3, r2
 800e7d6:	b29a      	uxth	r2, r3
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	891a      	ldrh	r2, [r3, #8]
 800e7e0:	8a7b      	ldrh	r3, [r7, #18]
 800e7e2:	4413      	add	r3, r2
 800e7e4:	b29a      	uxth	r2, r3
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	811a      	strh	r2, [r3, #8]


  return 0;
 800e7ea:	2300      	movs	r3, #0
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3718      	adds	r7, #24
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	0801f954 	.word	0x0801f954
 800e7f8:	0801fab8 	.word	0x0801fab8
 800e7fc:	0801f9b4 	.word	0x0801f9b4

0800e800 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e80a:	2200      	movs	r2, #0
 800e80c:	6839      	ldr	r1, [r7, #0]
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f7ff ff8e 	bl	800e730 <pbuf_add_header_impl>
 800e814:	4603      	mov	r3, r0
}
 800e816:	4618      	mov	r0, r3
 800e818:	3708      	adds	r7, #8
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
	...

0800e820 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b084      	sub	sp, #16
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d106      	bne.n	800e83e <pbuf_remove_header+0x1e>
 800e830:	4b20      	ldr	r3, [pc, #128]	; (800e8b4 <pbuf_remove_header+0x94>)
 800e832:	f240 224b 	movw	r2, #587	; 0x24b
 800e836:	4920      	ldr	r1, [pc, #128]	; (800e8b8 <pbuf_remove_header+0x98>)
 800e838:	4820      	ldr	r0, [pc, #128]	; (800e8bc <pbuf_remove_header+0x9c>)
 800e83a:	f00e fef1 	bl	801d620 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d003      	beq.n	800e84c <pbuf_remove_header+0x2c>
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e84a:	d301      	bcc.n	800e850 <pbuf_remove_header+0x30>
    return 1;
 800e84c:	2301      	movs	r3, #1
 800e84e:	e02c      	b.n	800e8aa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d101      	bne.n	800e85a <pbuf_remove_header+0x3a>
    return 0;
 800e856:	2300      	movs	r3, #0
 800e858:	e027      	b.n	800e8aa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	895b      	ldrh	r3, [r3, #10]
 800e862:	89fa      	ldrh	r2, [r7, #14]
 800e864:	429a      	cmp	r2, r3
 800e866:	d908      	bls.n	800e87a <pbuf_remove_header+0x5a>
 800e868:	4b12      	ldr	r3, [pc, #72]	; (800e8b4 <pbuf_remove_header+0x94>)
 800e86a:	f240 2255 	movw	r2, #597	; 0x255
 800e86e:	4914      	ldr	r1, [pc, #80]	; (800e8c0 <pbuf_remove_header+0xa0>)
 800e870:	4812      	ldr	r0, [pc, #72]	; (800e8bc <pbuf_remove_header+0x9c>)
 800e872:	f00e fed5 	bl	801d620 <iprintf>
 800e876:	2301      	movs	r3, #1
 800e878:	e017      	b.n	800e8aa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	685a      	ldr	r2, [r3, #4]
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	441a      	add	r2, r3
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	895a      	ldrh	r2, [r3, #10]
 800e890:	89fb      	ldrh	r3, [r7, #14]
 800e892:	1ad3      	subs	r3, r2, r3
 800e894:	b29a      	uxth	r2, r3
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	891a      	ldrh	r2, [r3, #8]
 800e89e:	89fb      	ldrh	r3, [r7, #14]
 800e8a0:	1ad3      	subs	r3, r2, r3
 800e8a2:	b29a      	uxth	r2, r3
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e8a8:	2300      	movs	r3, #0
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3710      	adds	r7, #16
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	0801f954 	.word	0x0801f954
 800e8b8:	0801fab8 	.word	0x0801fab8
 800e8bc:	0801f9b4 	.word	0x0801f9b4
 800e8c0:	0801fac4 	.word	0x0801fac4

0800e8c4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b082      	sub	sp, #8
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	807b      	strh	r3, [r7, #2]
 800e8d0:	4613      	mov	r3, r2
 800e8d2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e8d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	da08      	bge.n	800e8ee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e8dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e8e0:	425b      	negs	r3, r3
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f7ff ff9b 	bl	800e820 <pbuf_remove_header>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	e007      	b.n	800e8fe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e8ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e8f2:	787a      	ldrb	r2, [r7, #1]
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f7ff ff1a 	bl	800e730 <pbuf_add_header_impl>
 800e8fc:	4603      	mov	r3, r0
  }
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3708      	adds	r7, #8
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}

0800e906 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e906:	b580      	push	{r7, lr}
 800e908:	b082      	sub	sp, #8
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	6078      	str	r0, [r7, #4]
 800e90e:	460b      	mov	r3, r1
 800e910:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e912:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e916:	2201      	movs	r2, #1
 800e918:	4619      	mov	r1, r3
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f7ff ffd2 	bl	800e8c4 <pbuf_header_impl>
 800e920:	4603      	mov	r3, r0
}
 800e922:	4618      	mov	r0, r3
 800e924:	3708      	adds	r7, #8
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
	...

0800e92c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b088      	sub	sp, #32
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d10b      	bne.n	800e952 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d106      	bne.n	800e94e <pbuf_free+0x22>
 800e940:	4b3b      	ldr	r3, [pc, #236]	; (800ea30 <pbuf_free+0x104>)
 800e942:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e946:	493b      	ldr	r1, [pc, #236]	; (800ea34 <pbuf_free+0x108>)
 800e948:	483b      	ldr	r0, [pc, #236]	; (800ea38 <pbuf_free+0x10c>)
 800e94a:	f00e fe69 	bl	801d620 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e94e:	2300      	movs	r3, #0
 800e950:	e069      	b.n	800ea26 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e952:	2300      	movs	r3, #0
 800e954:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e956:	e062      	b.n	800ea1e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e958:	f009 fd5a 	bl	8018410 <sys_arch_protect>
 800e95c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	7b9b      	ldrb	r3, [r3, #14]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d106      	bne.n	800e974 <pbuf_free+0x48>
 800e966:	4b32      	ldr	r3, [pc, #200]	; (800ea30 <pbuf_free+0x104>)
 800e968:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e96c:	4933      	ldr	r1, [pc, #204]	; (800ea3c <pbuf_free+0x110>)
 800e96e:	4832      	ldr	r0, [pc, #200]	; (800ea38 <pbuf_free+0x10c>)
 800e970:	f00e fe56 	bl	801d620 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	7b9b      	ldrb	r3, [r3, #14]
 800e978:	3b01      	subs	r3, #1
 800e97a:	b2da      	uxtb	r2, r3
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	739a      	strb	r2, [r3, #14]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	7b9b      	ldrb	r3, [r3, #14]
 800e984:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e986:	69b8      	ldr	r0, [r7, #24]
 800e988:	f009 fd50 	bl	801842c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e98c:	7dfb      	ldrb	r3, [r7, #23]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d143      	bne.n	800ea1a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	7b1b      	ldrb	r3, [r3, #12]
 800e99c:	f003 030f 	and.w	r3, r3, #15
 800e9a0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	7b5b      	ldrb	r3, [r3, #13]
 800e9a6:	f003 0302 	and.w	r3, r3, #2
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d011      	beq.n	800e9d2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	691b      	ldr	r3, [r3, #16]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d106      	bne.n	800e9c8 <pbuf_free+0x9c>
 800e9ba:	4b1d      	ldr	r3, [pc, #116]	; (800ea30 <pbuf_free+0x104>)
 800e9bc:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e9c0:	491f      	ldr	r1, [pc, #124]	; (800ea40 <pbuf_free+0x114>)
 800e9c2:	481d      	ldr	r0, [pc, #116]	; (800ea38 <pbuf_free+0x10c>)
 800e9c4:	f00e fe2c 	bl	801d620 <iprintf>
        pc->custom_free_function(p);
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	691b      	ldr	r3, [r3, #16]
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	4798      	blx	r3
 800e9d0:	e01d      	b.n	800ea0e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e9d2:	7bfb      	ldrb	r3, [r7, #15]
 800e9d4:	2b02      	cmp	r3, #2
 800e9d6:	d104      	bne.n	800e9e2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e9d8:	6879      	ldr	r1, [r7, #4]
 800e9da:	200c      	movs	r0, #12
 800e9dc:	f7ff f902 	bl	800dbe4 <memp_free>
 800e9e0:	e015      	b.n	800ea0e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e9e2:	7bfb      	ldrb	r3, [r7, #15]
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d104      	bne.n	800e9f2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e9e8:	6879      	ldr	r1, [r7, #4]
 800e9ea:	200b      	movs	r0, #11
 800e9ec:	f7ff f8fa 	bl	800dbe4 <memp_free>
 800e9f0:	e00d      	b.n	800ea0e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e9f2:	7bfb      	ldrb	r3, [r7, #15]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d103      	bne.n	800ea00 <pbuf_free+0xd4>
          mem_free(p);
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f7fe fd35 	bl	800d468 <mem_free>
 800e9fe:	e006      	b.n	800ea0e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ea00:	4b0b      	ldr	r3, [pc, #44]	; (800ea30 <pbuf_free+0x104>)
 800ea02:	f240 320f 	movw	r2, #783	; 0x30f
 800ea06:	490f      	ldr	r1, [pc, #60]	; (800ea44 <pbuf_free+0x118>)
 800ea08:	480b      	ldr	r0, [pc, #44]	; (800ea38 <pbuf_free+0x10c>)
 800ea0a:	f00e fe09 	bl	801d620 <iprintf>
        }
      }
      count++;
 800ea0e:	7ffb      	ldrb	r3, [r7, #31]
 800ea10:	3301      	adds	r3, #1
 800ea12:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	607b      	str	r3, [r7, #4]
 800ea18:	e001      	b.n	800ea1e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d199      	bne.n	800e958 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ea24:	7ffb      	ldrb	r3, [r7, #31]
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3720      	adds	r7, #32
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	0801f954 	.word	0x0801f954
 800ea34:	0801fab8 	.word	0x0801fab8
 800ea38:	0801f9b4 	.word	0x0801f9b4
 800ea3c:	0801fae4 	.word	0x0801fae4
 800ea40:	0801fafc 	.word	0x0801fafc
 800ea44:	0801fb20 	.word	0x0801fb20

0800ea48 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b085      	sub	sp, #20
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ea50:	2300      	movs	r3, #0
 800ea52:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ea54:	e005      	b.n	800ea62 <pbuf_clen+0x1a>
    ++len;
 800ea56:	89fb      	ldrh	r3, [r7, #14]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d1f6      	bne.n	800ea56 <pbuf_clen+0xe>
  }
  return len;
 800ea68:	89fb      	ldrh	r3, [r7, #14]
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3714      	adds	r7, #20
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea74:	4770      	bx	lr
	...

0800ea78 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b084      	sub	sp, #16
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d016      	beq.n	800eab4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ea86:	f009 fcc3 	bl	8018410 <sys_arch_protect>
 800ea8a:	60f8      	str	r0, [r7, #12]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	7b9b      	ldrb	r3, [r3, #14]
 800ea90:	3301      	adds	r3, #1
 800ea92:	b2da      	uxtb	r2, r3
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	739a      	strb	r2, [r3, #14]
 800ea98:	68f8      	ldr	r0, [r7, #12]
 800ea9a:	f009 fcc7 	bl	801842c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	7b9b      	ldrb	r3, [r3, #14]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d106      	bne.n	800eab4 <pbuf_ref+0x3c>
 800eaa6:	4b05      	ldr	r3, [pc, #20]	; (800eabc <pbuf_ref+0x44>)
 800eaa8:	f240 3242 	movw	r2, #834	; 0x342
 800eaac:	4904      	ldr	r1, [pc, #16]	; (800eac0 <pbuf_ref+0x48>)
 800eaae:	4805      	ldr	r0, [pc, #20]	; (800eac4 <pbuf_ref+0x4c>)
 800eab0:	f00e fdb6 	bl	801d620 <iprintf>
  }
}
 800eab4:	bf00      	nop
 800eab6:	3710      	adds	r7, #16
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}
 800eabc:	0801f954 	.word	0x0801f954
 800eac0:	0801fb34 	.word	0x0801fb34
 800eac4:	0801f9b4 	.word	0x0801f9b4

0800eac8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b084      	sub	sp, #16
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d002      	beq.n	800eade <pbuf_cat+0x16>
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d107      	bne.n	800eaee <pbuf_cat+0x26>
 800eade:	4b20      	ldr	r3, [pc, #128]	; (800eb60 <pbuf_cat+0x98>)
 800eae0:	f240 3259 	movw	r2, #857	; 0x359
 800eae4:	491f      	ldr	r1, [pc, #124]	; (800eb64 <pbuf_cat+0x9c>)
 800eae6:	4820      	ldr	r0, [pc, #128]	; (800eb68 <pbuf_cat+0xa0>)
 800eae8:	f00e fd9a 	bl	801d620 <iprintf>
 800eaec:	e034      	b.n	800eb58 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	60fb      	str	r3, [r7, #12]
 800eaf2:	e00a      	b.n	800eb0a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	891a      	ldrh	r2, [r3, #8]
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	891b      	ldrh	r3, [r3, #8]
 800eafc:	4413      	add	r3, r2
 800eafe:	b29a      	uxth	r2, r3
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	60fb      	str	r3, [r7, #12]
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d1f0      	bne.n	800eaf4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	891a      	ldrh	r2, [r3, #8]
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	895b      	ldrh	r3, [r3, #10]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d006      	beq.n	800eb2c <pbuf_cat+0x64>
 800eb1e:	4b10      	ldr	r3, [pc, #64]	; (800eb60 <pbuf_cat+0x98>)
 800eb20:	f240 3262 	movw	r2, #866	; 0x362
 800eb24:	4911      	ldr	r1, [pc, #68]	; (800eb6c <pbuf_cat+0xa4>)
 800eb26:	4810      	ldr	r0, [pc, #64]	; (800eb68 <pbuf_cat+0xa0>)
 800eb28:	f00e fd7a 	bl	801d620 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d006      	beq.n	800eb42 <pbuf_cat+0x7a>
 800eb34:	4b0a      	ldr	r3, [pc, #40]	; (800eb60 <pbuf_cat+0x98>)
 800eb36:	f240 3263 	movw	r2, #867	; 0x363
 800eb3a:	490d      	ldr	r1, [pc, #52]	; (800eb70 <pbuf_cat+0xa8>)
 800eb3c:	480a      	ldr	r0, [pc, #40]	; (800eb68 <pbuf_cat+0xa0>)
 800eb3e:	f00e fd6f 	bl	801d620 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	891a      	ldrh	r2, [r3, #8]
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	891b      	ldrh	r3, [r3, #8]
 800eb4a:	4413      	add	r3, r2
 800eb4c:	b29a      	uxth	r2, r3
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	683a      	ldr	r2, [r7, #0]
 800eb56:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800eb58:	3710      	adds	r7, #16
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	0801f954 	.word	0x0801f954
 800eb64:	0801fb48 	.word	0x0801fb48
 800eb68:	0801f9b4 	.word	0x0801f9b4
 800eb6c:	0801fb80 	.word	0x0801fb80
 800eb70:	0801fbb0 	.word	0x0801fbb0

0800eb74 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b086      	sub	sp, #24
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	617b      	str	r3, [r7, #20]
 800eb82:	2300      	movs	r3, #0
 800eb84:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d008      	beq.n	800eb9e <pbuf_copy+0x2a>
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d005      	beq.n	800eb9e <pbuf_copy+0x2a>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	891a      	ldrh	r2, [r3, #8]
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	891b      	ldrh	r3, [r3, #8]
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d209      	bcs.n	800ebb2 <pbuf_copy+0x3e>
 800eb9e:	4b57      	ldr	r3, [pc, #348]	; (800ecfc <pbuf_copy+0x188>)
 800eba0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800eba4:	4956      	ldr	r1, [pc, #344]	; (800ed00 <pbuf_copy+0x18c>)
 800eba6:	4857      	ldr	r0, [pc, #348]	; (800ed04 <pbuf_copy+0x190>)
 800eba8:	f00e fd3a 	bl	801d620 <iprintf>
 800ebac:	f06f 030f 	mvn.w	r3, #15
 800ebb0:	e09f      	b.n	800ecf2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	895b      	ldrh	r3, [r3, #10]
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	1ad2      	subs	r2, r2, r3
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	895b      	ldrh	r3, [r3, #10]
 800ebc0:	4619      	mov	r1, r3
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	1acb      	subs	r3, r1, r3
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d306      	bcc.n	800ebd8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	895b      	ldrh	r3, [r3, #10]
 800ebce:	461a      	mov	r2, r3
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	1ad3      	subs	r3, r2, r3
 800ebd4:	60fb      	str	r3, [r7, #12]
 800ebd6:	e005      	b.n	800ebe4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	895b      	ldrh	r3, [r3, #10]
 800ebdc:	461a      	mov	r2, r3
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	1ad3      	subs	r3, r2, r3
 800ebe2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	685a      	ldr	r2, [r3, #4]
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	18d0      	adds	r0, r2, r3
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	685a      	ldr	r2, [r3, #4]
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	4413      	add	r3, r2
 800ebf4:	68fa      	ldr	r2, [r7, #12]
 800ebf6:	4619      	mov	r1, r3
 800ebf8:	f00e fcfc 	bl	801d5f4 <memcpy>
    offset_to += len;
 800ebfc:	697a      	ldr	r2, [r7, #20]
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	4413      	add	r3, r2
 800ec02:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ec04:	693a      	ldr	r2, [r7, #16]
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	4413      	add	r3, r2
 800ec0a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	895b      	ldrh	r3, [r3, #10]
 800ec10:	461a      	mov	r2, r3
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d906      	bls.n	800ec26 <pbuf_copy+0xb2>
 800ec18:	4b38      	ldr	r3, [pc, #224]	; (800ecfc <pbuf_copy+0x188>)
 800ec1a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ec1e:	493a      	ldr	r1, [pc, #232]	; (800ed08 <pbuf_copy+0x194>)
 800ec20:	4838      	ldr	r0, [pc, #224]	; (800ed04 <pbuf_copy+0x190>)
 800ec22:	f00e fcfd 	bl	801d620 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	895b      	ldrh	r3, [r3, #10]
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d906      	bls.n	800ec40 <pbuf_copy+0xcc>
 800ec32:	4b32      	ldr	r3, [pc, #200]	; (800ecfc <pbuf_copy+0x188>)
 800ec34:	f240 32da 	movw	r2, #986	; 0x3da
 800ec38:	4934      	ldr	r1, [pc, #208]	; (800ed0c <pbuf_copy+0x198>)
 800ec3a:	4832      	ldr	r0, [pc, #200]	; (800ed04 <pbuf_copy+0x190>)
 800ec3c:	f00e fcf0 	bl	801d620 <iprintf>
    if (offset_from >= p_from->len) {
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	895b      	ldrh	r3, [r3, #10]
 800ec44:	461a      	mov	r2, r3
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	4293      	cmp	r3, r2
 800ec4a:	d304      	bcc.n	800ec56 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	895b      	ldrh	r3, [r3, #10]
 800ec5a:	461a      	mov	r2, r3
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d114      	bne.n	800ec8c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ec62:	2300      	movs	r3, #0
 800ec64:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d10c      	bne.n	800ec8c <pbuf_copy+0x118>
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d009      	beq.n	800ec8c <pbuf_copy+0x118>
 800ec78:	4b20      	ldr	r3, [pc, #128]	; (800ecfc <pbuf_copy+0x188>)
 800ec7a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ec7e:	4924      	ldr	r1, [pc, #144]	; (800ed10 <pbuf_copy+0x19c>)
 800ec80:	4820      	ldr	r0, [pc, #128]	; (800ed04 <pbuf_copy+0x190>)
 800ec82:	f00e fccd 	bl	801d620 <iprintf>
 800ec86:	f06f 030f 	mvn.w	r3, #15
 800ec8a:	e032      	b.n	800ecf2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d013      	beq.n	800ecba <pbuf_copy+0x146>
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	895a      	ldrh	r2, [r3, #10]
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	891b      	ldrh	r3, [r3, #8]
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d10d      	bne.n	800ecba <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d009      	beq.n	800ecba <pbuf_copy+0x146>
 800eca6:	4b15      	ldr	r3, [pc, #84]	; (800ecfc <pbuf_copy+0x188>)
 800eca8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ecac:	4919      	ldr	r1, [pc, #100]	; (800ed14 <pbuf_copy+0x1a0>)
 800ecae:	4815      	ldr	r0, [pc, #84]	; (800ed04 <pbuf_copy+0x190>)
 800ecb0:	f00e fcb6 	bl	801d620 <iprintf>
 800ecb4:	f06f 0305 	mvn.w	r3, #5
 800ecb8:	e01b      	b.n	800ecf2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d013      	beq.n	800ece8 <pbuf_copy+0x174>
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	895a      	ldrh	r2, [r3, #10]
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	891b      	ldrh	r3, [r3, #8]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d10d      	bne.n	800ece8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d009      	beq.n	800ece8 <pbuf_copy+0x174>
 800ecd4:	4b09      	ldr	r3, [pc, #36]	; (800ecfc <pbuf_copy+0x188>)
 800ecd6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ecda:	490e      	ldr	r1, [pc, #56]	; (800ed14 <pbuf_copy+0x1a0>)
 800ecdc:	4809      	ldr	r0, [pc, #36]	; (800ed04 <pbuf_copy+0x190>)
 800ecde:	f00e fc9f 	bl	801d620 <iprintf>
 800ece2:	f06f 0305 	mvn.w	r3, #5
 800ece6:	e004      	b.n	800ecf2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	f47f af61 	bne.w	800ebb2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ecf0:	2300      	movs	r3, #0
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3718      	adds	r7, #24
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	0801f954 	.word	0x0801f954
 800ed00:	0801fbfc 	.word	0x0801fbfc
 800ed04:	0801f9b4 	.word	0x0801f9b4
 800ed08:	0801fc2c 	.word	0x0801fc2c
 800ed0c:	0801fc44 	.word	0x0801fc44
 800ed10:	0801fc60 	.word	0x0801fc60
 800ed14:	0801fc70 	.word	0x0801fc70

0800ed18 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b088      	sub	sp, #32
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	60f8      	str	r0, [r7, #12]
 800ed20:	60b9      	str	r1, [r7, #8]
 800ed22:	4611      	mov	r1, r2
 800ed24:	461a      	mov	r2, r3
 800ed26:	460b      	mov	r3, r1
 800ed28:	80fb      	strh	r3, [r7, #6]
 800ed2a:	4613      	mov	r3, r2
 800ed2c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ed32:	2300      	movs	r3, #0
 800ed34:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d108      	bne.n	800ed4e <pbuf_copy_partial+0x36>
 800ed3c:	4b2b      	ldr	r3, [pc, #172]	; (800edec <pbuf_copy_partial+0xd4>)
 800ed3e:	f240 420a 	movw	r2, #1034	; 0x40a
 800ed42:	492b      	ldr	r1, [pc, #172]	; (800edf0 <pbuf_copy_partial+0xd8>)
 800ed44:	482b      	ldr	r0, [pc, #172]	; (800edf4 <pbuf_copy_partial+0xdc>)
 800ed46:	f00e fc6b 	bl	801d620 <iprintf>
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	e04a      	b.n	800ede4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d108      	bne.n	800ed66 <pbuf_copy_partial+0x4e>
 800ed54:	4b25      	ldr	r3, [pc, #148]	; (800edec <pbuf_copy_partial+0xd4>)
 800ed56:	f240 420b 	movw	r2, #1035	; 0x40b
 800ed5a:	4927      	ldr	r1, [pc, #156]	; (800edf8 <pbuf_copy_partial+0xe0>)
 800ed5c:	4825      	ldr	r0, [pc, #148]	; (800edf4 <pbuf_copy_partial+0xdc>)
 800ed5e:	f00e fc5f 	bl	801d620 <iprintf>
 800ed62:	2300      	movs	r3, #0
 800ed64:	e03e      	b.n	800ede4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	61fb      	str	r3, [r7, #28]
 800ed6a:	e034      	b.n	800edd6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ed6c:	88bb      	ldrh	r3, [r7, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d00a      	beq.n	800ed88 <pbuf_copy_partial+0x70>
 800ed72:	69fb      	ldr	r3, [r7, #28]
 800ed74:	895b      	ldrh	r3, [r3, #10]
 800ed76:	88ba      	ldrh	r2, [r7, #4]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d305      	bcc.n	800ed88 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ed7c:	69fb      	ldr	r3, [r7, #28]
 800ed7e:	895b      	ldrh	r3, [r3, #10]
 800ed80:	88ba      	ldrh	r2, [r7, #4]
 800ed82:	1ad3      	subs	r3, r2, r3
 800ed84:	80bb      	strh	r3, [r7, #4]
 800ed86:	e023      	b.n	800edd0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ed88:	69fb      	ldr	r3, [r7, #28]
 800ed8a:	895a      	ldrh	r2, [r3, #10]
 800ed8c:	88bb      	ldrh	r3, [r7, #4]
 800ed8e:	1ad3      	subs	r3, r2, r3
 800ed90:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ed92:	8b3a      	ldrh	r2, [r7, #24]
 800ed94:	88fb      	ldrh	r3, [r7, #6]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d901      	bls.n	800ed9e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ed9a:	88fb      	ldrh	r3, [r7, #6]
 800ed9c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ed9e:	8b7b      	ldrh	r3, [r7, #26]
 800eda0:	68ba      	ldr	r2, [r7, #8]
 800eda2:	18d0      	adds	r0, r2, r3
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	685a      	ldr	r2, [r3, #4]
 800eda8:	88bb      	ldrh	r3, [r7, #4]
 800edaa:	4413      	add	r3, r2
 800edac:	8b3a      	ldrh	r2, [r7, #24]
 800edae:	4619      	mov	r1, r3
 800edb0:	f00e fc20 	bl	801d5f4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800edb4:	8afa      	ldrh	r2, [r7, #22]
 800edb6:	8b3b      	ldrh	r3, [r7, #24]
 800edb8:	4413      	add	r3, r2
 800edba:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800edbc:	8b7a      	ldrh	r2, [r7, #26]
 800edbe:	8b3b      	ldrh	r3, [r7, #24]
 800edc0:	4413      	add	r3, r2
 800edc2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800edc4:	88fa      	ldrh	r2, [r7, #6]
 800edc6:	8b3b      	ldrh	r3, [r7, #24]
 800edc8:	1ad3      	subs	r3, r2, r3
 800edca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800edcc:	2300      	movs	r3, #0
 800edce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800edd0:	69fb      	ldr	r3, [r7, #28]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	61fb      	str	r3, [r7, #28]
 800edd6:	88fb      	ldrh	r3, [r7, #6]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d002      	beq.n	800ede2 <pbuf_copy_partial+0xca>
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d1c4      	bne.n	800ed6c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ede2:	8afb      	ldrh	r3, [r7, #22]
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3720      	adds	r7, #32
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}
 800edec:	0801f954 	.word	0x0801f954
 800edf0:	0801fc9c 	.word	0x0801fc9c
 800edf4:	0801f9b4 	.word	0x0801f9b4
 800edf8:	0801fcbc 	.word	0x0801fcbc

0800edfc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	4603      	mov	r3, r0
 800ee04:	603a      	str	r2, [r7, #0]
 800ee06:	71fb      	strb	r3, [r7, #7]
 800ee08:	460b      	mov	r3, r1
 800ee0a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	8919      	ldrh	r1, [r3, #8]
 800ee10:	88ba      	ldrh	r2, [r7, #4]
 800ee12:	79fb      	ldrb	r3, [r7, #7]
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7ff faa5 	bl	800e364 <pbuf_alloc>
 800ee1a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d101      	bne.n	800ee26 <pbuf_clone+0x2a>
    return NULL;
 800ee22:	2300      	movs	r3, #0
 800ee24:	e011      	b.n	800ee4a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ee26:	6839      	ldr	r1, [r7, #0]
 800ee28:	68f8      	ldr	r0, [r7, #12]
 800ee2a:	f7ff fea3 	bl	800eb74 <pbuf_copy>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ee32:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d006      	beq.n	800ee48 <pbuf_clone+0x4c>
 800ee3a:	4b06      	ldr	r3, [pc, #24]	; (800ee54 <pbuf_clone+0x58>)
 800ee3c:	f240 5224 	movw	r2, #1316	; 0x524
 800ee40:	4905      	ldr	r1, [pc, #20]	; (800ee58 <pbuf_clone+0x5c>)
 800ee42:	4806      	ldr	r0, [pc, #24]	; (800ee5c <pbuf_clone+0x60>)
 800ee44:	f00e fbec 	bl	801d620 <iprintf>
  return q;
 800ee48:	68fb      	ldr	r3, [r7, #12]
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3710      	adds	r7, #16
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	0801f954 	.word	0x0801f954
 800ee58:	0801fdc8 	.word	0x0801fdc8
 800ee5c:	0801f9b4 	.word	0x0801f9b4

0800ee60 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ee64:	f00e fc6a 	bl	801d73c <rand>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	b29b      	uxth	r3, r3
 800ee6c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ee76:	b29a      	uxth	r2, r3
 800ee78:	4b01      	ldr	r3, [pc, #4]	; (800ee80 <tcp_init+0x20>)
 800ee7a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ee7c:	bf00      	nop
 800ee7e:	bd80      	pop	{r7, pc}
 800ee80:	20000024 	.word	0x20000024

0800ee84 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	7d1b      	ldrb	r3, [r3, #20]
 800ee90:	2b01      	cmp	r3, #1
 800ee92:	d105      	bne.n	800eea0 <tcp_free+0x1c>
 800ee94:	4b06      	ldr	r3, [pc, #24]	; (800eeb0 <tcp_free+0x2c>)
 800ee96:	22d4      	movs	r2, #212	; 0xd4
 800ee98:	4906      	ldr	r1, [pc, #24]	; (800eeb4 <tcp_free+0x30>)
 800ee9a:	4807      	ldr	r0, [pc, #28]	; (800eeb8 <tcp_free+0x34>)
 800ee9c:	f00e fbc0 	bl	801d620 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800eea0:	6879      	ldr	r1, [r7, #4]
 800eea2:	2001      	movs	r0, #1
 800eea4:	f7fe fe9e 	bl	800dbe4 <memp_free>
}
 800eea8:	bf00      	nop
 800eeaa:	3708      	adds	r7, #8
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}
 800eeb0:	0801fe54 	.word	0x0801fe54
 800eeb4:	0801fe84 	.word	0x0801fe84
 800eeb8:	0801fe98 	.word	0x0801fe98

0800eebc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b082      	sub	sp, #8
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	7d1b      	ldrb	r3, [r3, #20]
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	d105      	bne.n	800eed8 <tcp_free_listen+0x1c>
 800eecc:	4b06      	ldr	r3, [pc, #24]	; (800eee8 <tcp_free_listen+0x2c>)
 800eece:	22df      	movs	r2, #223	; 0xdf
 800eed0:	4906      	ldr	r1, [pc, #24]	; (800eeec <tcp_free_listen+0x30>)
 800eed2:	4807      	ldr	r0, [pc, #28]	; (800eef0 <tcp_free_listen+0x34>)
 800eed4:	f00e fba4 	bl	801d620 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800eed8:	6879      	ldr	r1, [r7, #4]
 800eeda:	2002      	movs	r0, #2
 800eedc:	f7fe fe82 	bl	800dbe4 <memp_free>
}
 800eee0:	bf00      	nop
 800eee2:	3708      	adds	r7, #8
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	0801fe54 	.word	0x0801fe54
 800eeec:	0801fec0 	.word	0x0801fec0
 800eef0:	0801fe98 	.word	0x0801fe98

0800eef4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800eef8:	f001 f85c 	bl	800ffb4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800eefc:	4b07      	ldr	r3, [pc, #28]	; (800ef1c <tcp_tmr+0x28>)
 800eefe:	781b      	ldrb	r3, [r3, #0]
 800ef00:	3301      	adds	r3, #1
 800ef02:	b2da      	uxtb	r2, r3
 800ef04:	4b05      	ldr	r3, [pc, #20]	; (800ef1c <tcp_tmr+0x28>)
 800ef06:	701a      	strb	r2, [r3, #0]
 800ef08:	4b04      	ldr	r3, [pc, #16]	; (800ef1c <tcp_tmr+0x28>)
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	f003 0301 	and.w	r3, r3, #1
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d001      	beq.n	800ef18 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ef14:	f000 fd0e 	bl	800f934 <tcp_slowtmr>
  }
}
 800ef18:	bf00      	nop
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	200113cd 	.word	0x200113cd

0800ef20 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b084      	sub	sp, #16
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d105      	bne.n	800ef3c <tcp_remove_listener+0x1c>
 800ef30:	4b0d      	ldr	r3, [pc, #52]	; (800ef68 <tcp_remove_listener+0x48>)
 800ef32:	22ff      	movs	r2, #255	; 0xff
 800ef34:	490d      	ldr	r1, [pc, #52]	; (800ef6c <tcp_remove_listener+0x4c>)
 800ef36:	480e      	ldr	r0, [pc, #56]	; (800ef70 <tcp_remove_listener+0x50>)
 800ef38:	f00e fb72 	bl	801d620 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	60fb      	str	r3, [r7, #12]
 800ef40:	e00a      	b.n	800ef58 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef46:	683a      	ldr	r2, [r7, #0]
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d102      	bne.n	800ef52 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	68db      	ldr	r3, [r3, #12]
 800ef56:	60fb      	str	r3, [r7, #12]
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1f1      	bne.n	800ef42 <tcp_remove_listener+0x22>
    }
  }
}
 800ef5e:	bf00      	nop
 800ef60:	bf00      	nop
 800ef62:	3710      	adds	r7, #16
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}
 800ef68:	0801fe54 	.word	0x0801fe54
 800ef6c:	0801fedc 	.word	0x0801fedc
 800ef70:	0801fe98 	.word	0x0801fe98

0800ef74 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b084      	sub	sp, #16
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d106      	bne.n	800ef90 <tcp_listen_closed+0x1c>
 800ef82:	4b14      	ldr	r3, [pc, #80]	; (800efd4 <tcp_listen_closed+0x60>)
 800ef84:	f240 1211 	movw	r2, #273	; 0x111
 800ef88:	4913      	ldr	r1, [pc, #76]	; (800efd8 <tcp_listen_closed+0x64>)
 800ef8a:	4814      	ldr	r0, [pc, #80]	; (800efdc <tcp_listen_closed+0x68>)
 800ef8c:	f00e fb48 	bl	801d620 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	7d1b      	ldrb	r3, [r3, #20]
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	d006      	beq.n	800efa6 <tcp_listen_closed+0x32>
 800ef98:	4b0e      	ldr	r3, [pc, #56]	; (800efd4 <tcp_listen_closed+0x60>)
 800ef9a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ef9e:	4910      	ldr	r1, [pc, #64]	; (800efe0 <tcp_listen_closed+0x6c>)
 800efa0:	480e      	ldr	r0, [pc, #56]	; (800efdc <tcp_listen_closed+0x68>)
 800efa2:	f00e fb3d 	bl	801d620 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800efa6:	2301      	movs	r3, #1
 800efa8:	60fb      	str	r3, [r7, #12]
 800efaa:	e00b      	b.n	800efc4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800efac:	4a0d      	ldr	r2, [pc, #52]	; (800efe4 <tcp_listen_closed+0x70>)
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	6879      	ldr	r1, [r7, #4]
 800efb8:	4618      	mov	r0, r3
 800efba:	f7ff ffb1 	bl	800ef20 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	3301      	adds	r3, #1
 800efc2:	60fb      	str	r3, [r7, #12]
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	2b03      	cmp	r3, #3
 800efc8:	d9f0      	bls.n	800efac <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800efca:	bf00      	nop
 800efcc:	bf00      	nop
 800efce:	3710      	adds	r7, #16
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	0801fe54 	.word	0x0801fe54
 800efd8:	0801ff04 	.word	0x0801ff04
 800efdc:	0801fe98 	.word	0x0801fe98
 800efe0:	0801ff10 	.word	0x0801ff10
 800efe4:	08022214 	.word	0x08022214

0800efe8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800efe8:	b5b0      	push	{r4, r5, r7, lr}
 800efea:	b088      	sub	sp, #32
 800efec:	af04      	add	r7, sp, #16
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	460b      	mov	r3, r1
 800eff2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d106      	bne.n	800f008 <tcp_close_shutdown+0x20>
 800effa:	4b63      	ldr	r3, [pc, #396]	; (800f188 <tcp_close_shutdown+0x1a0>)
 800effc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f000:	4962      	ldr	r1, [pc, #392]	; (800f18c <tcp_close_shutdown+0x1a4>)
 800f002:	4863      	ldr	r0, [pc, #396]	; (800f190 <tcp_close_shutdown+0x1a8>)
 800f004:	f00e fb0c 	bl	801d620 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f008:	78fb      	ldrb	r3, [r7, #3]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d066      	beq.n	800f0dc <tcp_close_shutdown+0xf4>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	7d1b      	ldrb	r3, [r3, #20]
 800f012:	2b04      	cmp	r3, #4
 800f014:	d003      	beq.n	800f01e <tcp_close_shutdown+0x36>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	7d1b      	ldrb	r3, [r3, #20]
 800f01a:	2b07      	cmp	r3, #7
 800f01c:	d15e      	bne.n	800f0dc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f022:	2b00      	cmp	r3, #0
 800f024:	d104      	bne.n	800f030 <tcp_close_shutdown+0x48>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f02a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f02e:	d055      	beq.n	800f0dc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	8b5b      	ldrh	r3, [r3, #26]
 800f034:	f003 0310 	and.w	r3, r3, #16
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d106      	bne.n	800f04a <tcp_close_shutdown+0x62>
 800f03c:	4b52      	ldr	r3, [pc, #328]	; (800f188 <tcp_close_shutdown+0x1a0>)
 800f03e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f042:	4954      	ldr	r1, [pc, #336]	; (800f194 <tcp_close_shutdown+0x1ac>)
 800f044:	4852      	ldr	r0, [pc, #328]	; (800f190 <tcp_close_shutdown+0x1a8>)
 800f046:	f00e faeb 	bl	801d620 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f052:	687d      	ldr	r5, [r7, #4]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	3304      	adds	r3, #4
 800f058:	687a      	ldr	r2, [r7, #4]
 800f05a:	8ad2      	ldrh	r2, [r2, #22]
 800f05c:	6879      	ldr	r1, [r7, #4]
 800f05e:	8b09      	ldrh	r1, [r1, #24]
 800f060:	9102      	str	r1, [sp, #8]
 800f062:	9201      	str	r2, [sp, #4]
 800f064:	9300      	str	r3, [sp, #0]
 800f066:	462b      	mov	r3, r5
 800f068:	4622      	mov	r2, r4
 800f06a:	4601      	mov	r1, r0
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f005 fd71 	bl	8014b54 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f001 fb4e 	bl	8010714 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f078:	4b47      	ldr	r3, [pc, #284]	; (800f198 <tcp_close_shutdown+0x1b0>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	687a      	ldr	r2, [r7, #4]
 800f07e:	429a      	cmp	r2, r3
 800f080:	d105      	bne.n	800f08e <tcp_close_shutdown+0xa6>
 800f082:	4b45      	ldr	r3, [pc, #276]	; (800f198 <tcp_close_shutdown+0x1b0>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	68db      	ldr	r3, [r3, #12]
 800f088:	4a43      	ldr	r2, [pc, #268]	; (800f198 <tcp_close_shutdown+0x1b0>)
 800f08a:	6013      	str	r3, [r2, #0]
 800f08c:	e013      	b.n	800f0b6 <tcp_close_shutdown+0xce>
 800f08e:	4b42      	ldr	r3, [pc, #264]	; (800f198 <tcp_close_shutdown+0x1b0>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	60fb      	str	r3, [r7, #12]
 800f094:	e00c      	b.n	800f0b0 <tcp_close_shutdown+0xc8>
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	68db      	ldr	r3, [r3, #12]
 800f09a:	687a      	ldr	r2, [r7, #4]
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d104      	bne.n	800f0aa <tcp_close_shutdown+0xc2>
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	68da      	ldr	r2, [r3, #12]
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	60da      	str	r2, [r3, #12]
 800f0a8:	e005      	b.n	800f0b6 <tcp_close_shutdown+0xce>
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	68db      	ldr	r3, [r3, #12]
 800f0ae:	60fb      	str	r3, [r7, #12]
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d1ef      	bne.n	800f096 <tcp_close_shutdown+0xae>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	60da      	str	r2, [r3, #12]
 800f0bc:	4b37      	ldr	r3, [pc, #220]	; (800f19c <tcp_close_shutdown+0x1b4>)
 800f0be:	2201      	movs	r2, #1
 800f0c0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f0c2:	4b37      	ldr	r3, [pc, #220]	; (800f1a0 <tcp_close_shutdown+0x1b8>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d102      	bne.n	800f0d2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f0cc:	f003 ffe6 	bl	801309c <tcp_trigger_input_pcb_close>
 800f0d0:	e002      	b.n	800f0d8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f7ff fed6 	bl	800ee84 <tcp_free>
      }
      return ERR_OK;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	e050      	b.n	800f17e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	7d1b      	ldrb	r3, [r3, #20]
 800f0e0:	2b02      	cmp	r3, #2
 800f0e2:	d03b      	beq.n	800f15c <tcp_close_shutdown+0x174>
 800f0e4:	2b02      	cmp	r3, #2
 800f0e6:	dc44      	bgt.n	800f172 <tcp_close_shutdown+0x18a>
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d002      	beq.n	800f0f2 <tcp_close_shutdown+0x10a>
 800f0ec:	2b01      	cmp	r3, #1
 800f0ee:	d02a      	beq.n	800f146 <tcp_close_shutdown+0x15e>
 800f0f0:	e03f      	b.n	800f172 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	8adb      	ldrh	r3, [r3, #22]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d021      	beq.n	800f13e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f0fa:	4b2a      	ldr	r3, [pc, #168]	; (800f1a4 <tcp_close_shutdown+0x1bc>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	687a      	ldr	r2, [r7, #4]
 800f100:	429a      	cmp	r2, r3
 800f102:	d105      	bne.n	800f110 <tcp_close_shutdown+0x128>
 800f104:	4b27      	ldr	r3, [pc, #156]	; (800f1a4 <tcp_close_shutdown+0x1bc>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	68db      	ldr	r3, [r3, #12]
 800f10a:	4a26      	ldr	r2, [pc, #152]	; (800f1a4 <tcp_close_shutdown+0x1bc>)
 800f10c:	6013      	str	r3, [r2, #0]
 800f10e:	e013      	b.n	800f138 <tcp_close_shutdown+0x150>
 800f110:	4b24      	ldr	r3, [pc, #144]	; (800f1a4 <tcp_close_shutdown+0x1bc>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	60bb      	str	r3, [r7, #8]
 800f116:	e00c      	b.n	800f132 <tcp_close_shutdown+0x14a>
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	68db      	ldr	r3, [r3, #12]
 800f11c:	687a      	ldr	r2, [r7, #4]
 800f11e:	429a      	cmp	r2, r3
 800f120:	d104      	bne.n	800f12c <tcp_close_shutdown+0x144>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	68da      	ldr	r2, [r3, #12]
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	60da      	str	r2, [r3, #12]
 800f12a:	e005      	b.n	800f138 <tcp_close_shutdown+0x150>
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	68db      	ldr	r3, [r3, #12]
 800f130:	60bb      	str	r3, [r7, #8]
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d1ef      	bne.n	800f118 <tcp_close_shutdown+0x130>
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2200      	movs	r2, #0
 800f13c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f7ff fea0 	bl	800ee84 <tcp_free>
      break;
 800f144:	e01a      	b.n	800f17c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f7ff ff14 	bl	800ef74 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f14c:	6879      	ldr	r1, [r7, #4]
 800f14e:	4816      	ldr	r0, [pc, #88]	; (800f1a8 <tcp_close_shutdown+0x1c0>)
 800f150:	f001 fb30 	bl	80107b4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f7ff feb1 	bl	800eebc <tcp_free_listen>
      break;
 800f15a:	e00f      	b.n	800f17c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f15c:	6879      	ldr	r1, [r7, #4]
 800f15e:	480e      	ldr	r0, [pc, #56]	; (800f198 <tcp_close_shutdown+0x1b0>)
 800f160:	f001 fb28 	bl	80107b4 <tcp_pcb_remove>
 800f164:	4b0d      	ldr	r3, [pc, #52]	; (800f19c <tcp_close_shutdown+0x1b4>)
 800f166:	2201      	movs	r2, #1
 800f168:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f7ff fe8a 	bl	800ee84 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f170:	e004      	b.n	800f17c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f000 f81a 	bl	800f1ac <tcp_close_shutdown_fin>
 800f178:	4603      	mov	r3, r0
 800f17a:	e000      	b.n	800f17e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f17c:	2300      	movs	r3, #0
}
 800f17e:	4618      	mov	r0, r3
 800f180:	3710      	adds	r7, #16
 800f182:	46bd      	mov	sp, r7
 800f184:	bdb0      	pop	{r4, r5, r7, pc}
 800f186:	bf00      	nop
 800f188:	0801fe54 	.word	0x0801fe54
 800f18c:	0801ff28 	.word	0x0801ff28
 800f190:	0801fe98 	.word	0x0801fe98
 800f194:	0801ff48 	.word	0x0801ff48
 800f198:	200113c4 	.word	0x200113c4
 800f19c:	200113cc 	.word	0x200113cc
 800f1a0:	20011404 	.word	0x20011404
 800f1a4:	200113bc 	.word	0x200113bc
 800f1a8:	200113c0 	.word	0x200113c0

0800f1ac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b084      	sub	sp, #16
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d106      	bne.n	800f1c8 <tcp_close_shutdown_fin+0x1c>
 800f1ba:	4b2e      	ldr	r3, [pc, #184]	; (800f274 <tcp_close_shutdown_fin+0xc8>)
 800f1bc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f1c0:	492d      	ldr	r1, [pc, #180]	; (800f278 <tcp_close_shutdown_fin+0xcc>)
 800f1c2:	482e      	ldr	r0, [pc, #184]	; (800f27c <tcp_close_shutdown_fin+0xd0>)
 800f1c4:	f00e fa2c 	bl	801d620 <iprintf>

  switch (pcb->state) {
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	7d1b      	ldrb	r3, [r3, #20]
 800f1cc:	2b07      	cmp	r3, #7
 800f1ce:	d020      	beq.n	800f212 <tcp_close_shutdown_fin+0x66>
 800f1d0:	2b07      	cmp	r3, #7
 800f1d2:	dc2b      	bgt.n	800f22c <tcp_close_shutdown_fin+0x80>
 800f1d4:	2b03      	cmp	r3, #3
 800f1d6:	d002      	beq.n	800f1de <tcp_close_shutdown_fin+0x32>
 800f1d8:	2b04      	cmp	r3, #4
 800f1da:	d00d      	beq.n	800f1f8 <tcp_close_shutdown_fin+0x4c>
 800f1dc:	e026      	b.n	800f22c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f004 fdc6 	bl	8013d70 <tcp_send_fin>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f1e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d11f      	bne.n	800f230 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2205      	movs	r2, #5
 800f1f4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f1f6:	e01b      	b.n	800f230 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f004 fdb9 	bl	8013d70 <tcp_send_fin>
 800f1fe:	4603      	mov	r3, r0
 800f200:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d114      	bne.n	800f234 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2205      	movs	r2, #5
 800f20e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f210:	e010      	b.n	800f234 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f004 fdac 	bl	8013d70 <tcp_send_fin>
 800f218:	4603      	mov	r3, r0
 800f21a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f21c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d109      	bne.n	800f238 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2209      	movs	r2, #9
 800f228:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f22a:	e005      	b.n	800f238 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f22c:	2300      	movs	r3, #0
 800f22e:	e01c      	b.n	800f26a <tcp_close_shutdown_fin+0xbe>
      break;
 800f230:	bf00      	nop
 800f232:	e002      	b.n	800f23a <tcp_close_shutdown_fin+0x8e>
      break;
 800f234:	bf00      	nop
 800f236:	e000      	b.n	800f23a <tcp_close_shutdown_fin+0x8e>
      break;
 800f238:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f23a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d103      	bne.n	800f24a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f004 fed2 	bl	8013fec <tcp_output>
 800f248:	e00d      	b.n	800f266 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f24a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f24e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f252:	d108      	bne.n	800f266 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	8b5b      	ldrh	r3, [r3, #26]
 800f258:	f043 0308 	orr.w	r3, r3, #8
 800f25c:	b29a      	uxth	r2, r3
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f262:	2300      	movs	r3, #0
 800f264:	e001      	b.n	800f26a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f266:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3710      	adds	r7, #16
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}
 800f272:	bf00      	nop
 800f274:	0801fe54 	.word	0x0801fe54
 800f278:	0801ff04 	.word	0x0801ff04
 800f27c:	0801fe98 	.word	0x0801fe98

0800f280 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d109      	bne.n	800f2a2 <tcp_close+0x22>
 800f28e:	4b0f      	ldr	r3, [pc, #60]	; (800f2cc <tcp_close+0x4c>)
 800f290:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f294:	490e      	ldr	r1, [pc, #56]	; (800f2d0 <tcp_close+0x50>)
 800f296:	480f      	ldr	r0, [pc, #60]	; (800f2d4 <tcp_close+0x54>)
 800f298:	f00e f9c2 	bl	801d620 <iprintf>
 800f29c:	f06f 030f 	mvn.w	r3, #15
 800f2a0:	e00f      	b.n	800f2c2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	7d1b      	ldrb	r3, [r3, #20]
 800f2a6:	2b01      	cmp	r3, #1
 800f2a8:	d006      	beq.n	800f2b8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	8b5b      	ldrh	r3, [r3, #26]
 800f2ae:	f043 0310 	orr.w	r3, r3, #16
 800f2b2:	b29a      	uxth	r2, r3
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f2b8:	2101      	movs	r1, #1
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f7ff fe94 	bl	800efe8 <tcp_close_shutdown>
 800f2c0:	4603      	mov	r3, r0
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3708      	adds	r7, #8
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	0801fe54 	.word	0x0801fe54
 800f2d0:	0801ff64 	.word	0x0801ff64
 800f2d4:	0801fe98 	.word	0x0801fe98

0800f2d8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b084      	sub	sp, #16
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d109      	bne.n	800f2fe <tcp_shutdown+0x26>
 800f2ea:	4b26      	ldr	r3, [pc, #152]	; (800f384 <tcp_shutdown+0xac>)
 800f2ec:	f240 2207 	movw	r2, #519	; 0x207
 800f2f0:	4925      	ldr	r1, [pc, #148]	; (800f388 <tcp_shutdown+0xb0>)
 800f2f2:	4826      	ldr	r0, [pc, #152]	; (800f38c <tcp_shutdown+0xb4>)
 800f2f4:	f00e f994 	bl	801d620 <iprintf>
 800f2f8:	f06f 030f 	mvn.w	r3, #15
 800f2fc:	e03d      	b.n	800f37a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	7d1b      	ldrb	r3, [r3, #20]
 800f302:	2b01      	cmp	r3, #1
 800f304:	d102      	bne.n	800f30c <tcp_shutdown+0x34>
    return ERR_CONN;
 800f306:	f06f 030a 	mvn.w	r3, #10
 800f30a:	e036      	b.n	800f37a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d01b      	beq.n	800f34a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	8b5b      	ldrh	r3, [r3, #26]
 800f316:	f043 0310 	orr.w	r3, r3, #16
 800f31a:	b29a      	uxth	r2, r3
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d005      	beq.n	800f332 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f326:	2101      	movs	r1, #1
 800f328:	68f8      	ldr	r0, [r7, #12]
 800f32a:	f7ff fe5d 	bl	800efe8 <tcp_close_shutdown>
 800f32e:	4603      	mov	r3, r0
 800f330:	e023      	b.n	800f37a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f336:	2b00      	cmp	r3, #0
 800f338:	d007      	beq.n	800f34a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f33e:	4618      	mov	r0, r3
 800f340:	f7ff faf4 	bl	800e92c <pbuf_free>
      pcb->refused_data = NULL;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	2200      	movs	r2, #0
 800f348:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d013      	beq.n	800f378 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	7d1b      	ldrb	r3, [r3, #20]
 800f354:	2b04      	cmp	r3, #4
 800f356:	dc02      	bgt.n	800f35e <tcp_shutdown+0x86>
 800f358:	2b03      	cmp	r3, #3
 800f35a:	da02      	bge.n	800f362 <tcp_shutdown+0x8a>
 800f35c:	e009      	b.n	800f372 <tcp_shutdown+0x9a>
 800f35e:	2b07      	cmp	r3, #7
 800f360:	d107      	bne.n	800f372 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	b2db      	uxtb	r3, r3
 800f366:	4619      	mov	r1, r3
 800f368:	68f8      	ldr	r0, [r7, #12]
 800f36a:	f7ff fe3d 	bl	800efe8 <tcp_close_shutdown>
 800f36e:	4603      	mov	r3, r0
 800f370:	e003      	b.n	800f37a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f372:	f06f 030a 	mvn.w	r3, #10
 800f376:	e000      	b.n	800f37a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800f378:	2300      	movs	r3, #0
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	3710      	adds	r7, #16
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
 800f382:	bf00      	nop
 800f384:	0801fe54 	.word	0x0801fe54
 800f388:	0801ff7c 	.word	0x0801ff7c
 800f38c:	0801fe98 	.word	0x0801fe98

0800f390 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b08e      	sub	sp, #56	; 0x38
 800f394:	af04      	add	r7, sp, #16
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d107      	bne.n	800f3b0 <tcp_abandon+0x20>
 800f3a0:	4b52      	ldr	r3, [pc, #328]	; (800f4ec <tcp_abandon+0x15c>)
 800f3a2:	f240 223d 	movw	r2, #573	; 0x23d
 800f3a6:	4952      	ldr	r1, [pc, #328]	; (800f4f0 <tcp_abandon+0x160>)
 800f3a8:	4852      	ldr	r0, [pc, #328]	; (800f4f4 <tcp_abandon+0x164>)
 800f3aa:	f00e f939 	bl	801d620 <iprintf>
 800f3ae:	e099      	b.n	800f4e4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	7d1b      	ldrb	r3, [r3, #20]
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d106      	bne.n	800f3c6 <tcp_abandon+0x36>
 800f3b8:	4b4c      	ldr	r3, [pc, #304]	; (800f4ec <tcp_abandon+0x15c>)
 800f3ba:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f3be:	494e      	ldr	r1, [pc, #312]	; (800f4f8 <tcp_abandon+0x168>)
 800f3c0:	484c      	ldr	r0, [pc, #304]	; (800f4f4 <tcp_abandon+0x164>)
 800f3c2:	f00e f92d 	bl	801d620 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	7d1b      	ldrb	r3, [r3, #20]
 800f3ca:	2b0a      	cmp	r3, #10
 800f3cc:	d107      	bne.n	800f3de <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f3ce:	6879      	ldr	r1, [r7, #4]
 800f3d0:	484a      	ldr	r0, [pc, #296]	; (800f4fc <tcp_abandon+0x16c>)
 800f3d2:	f001 f9ef 	bl	80107b4 <tcp_pcb_remove>
    tcp_free(pcb);
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f7ff fd54 	bl	800ee84 <tcp_free>
 800f3dc:	e082      	b.n	800f4e4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3ea:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3f0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3f8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	691b      	ldr	r3, [r3, #16]
 800f3fe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	7d1b      	ldrb	r3, [r3, #20]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d126      	bne.n	800f456 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	8adb      	ldrh	r3, [r3, #22]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d02e      	beq.n	800f46e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f410:	4b3b      	ldr	r3, [pc, #236]	; (800f500 <tcp_abandon+0x170>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	687a      	ldr	r2, [r7, #4]
 800f416:	429a      	cmp	r2, r3
 800f418:	d105      	bne.n	800f426 <tcp_abandon+0x96>
 800f41a:	4b39      	ldr	r3, [pc, #228]	; (800f500 <tcp_abandon+0x170>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	4a37      	ldr	r2, [pc, #220]	; (800f500 <tcp_abandon+0x170>)
 800f422:	6013      	str	r3, [r2, #0]
 800f424:	e013      	b.n	800f44e <tcp_abandon+0xbe>
 800f426:	4b36      	ldr	r3, [pc, #216]	; (800f500 <tcp_abandon+0x170>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	61fb      	str	r3, [r7, #28]
 800f42c:	e00c      	b.n	800f448 <tcp_abandon+0xb8>
 800f42e:	69fb      	ldr	r3, [r7, #28]
 800f430:	68db      	ldr	r3, [r3, #12]
 800f432:	687a      	ldr	r2, [r7, #4]
 800f434:	429a      	cmp	r2, r3
 800f436:	d104      	bne.n	800f442 <tcp_abandon+0xb2>
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	68da      	ldr	r2, [r3, #12]
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	60da      	str	r2, [r3, #12]
 800f440:	e005      	b.n	800f44e <tcp_abandon+0xbe>
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	68db      	ldr	r3, [r3, #12]
 800f446:	61fb      	str	r3, [r7, #28]
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d1ef      	bne.n	800f42e <tcp_abandon+0x9e>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2200      	movs	r2, #0
 800f452:	60da      	str	r2, [r3, #12]
 800f454:	e00b      	b.n	800f46e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	8adb      	ldrh	r3, [r3, #22]
 800f45e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f460:	6879      	ldr	r1, [r7, #4]
 800f462:	4828      	ldr	r0, [pc, #160]	; (800f504 <tcp_abandon+0x174>)
 800f464:	f001 f9a6 	bl	80107b4 <tcp_pcb_remove>
 800f468:	4b27      	ldr	r3, [pc, #156]	; (800f508 <tcp_abandon+0x178>)
 800f46a:	2201      	movs	r2, #1
 800f46c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f472:	2b00      	cmp	r3, #0
 800f474:	d004      	beq.n	800f480 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f47a:	4618      	mov	r0, r3
 800f47c:	f000 fe7a 	bl	8010174 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f484:	2b00      	cmp	r3, #0
 800f486:	d004      	beq.n	800f492 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f48c:	4618      	mov	r0, r3
 800f48e:	f000 fe71 	bl	8010174 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f496:	2b00      	cmp	r3, #0
 800f498:	d004      	beq.n	800f4a4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f000 fe68 	bl	8010174 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d00e      	beq.n	800f4c8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f4aa:	6879      	ldr	r1, [r7, #4]
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	3304      	adds	r3, #4
 800f4b0:	687a      	ldr	r2, [r7, #4]
 800f4b2:	8b12      	ldrh	r2, [r2, #24]
 800f4b4:	9202      	str	r2, [sp, #8]
 800f4b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f4b8:	9201      	str	r2, [sp, #4]
 800f4ba:	9300      	str	r3, [sp, #0]
 800f4bc:	460b      	mov	r3, r1
 800f4be:	697a      	ldr	r2, [r7, #20]
 800f4c0:	69b9      	ldr	r1, [r7, #24]
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f005 fb46 	bl	8014b54 <tcp_rst>
    }
    last_state = pcb->state;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	7d1b      	ldrb	r3, [r3, #20]
 800f4cc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7ff fcd8 	bl	800ee84 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d004      	beq.n	800f4e4 <tcp_abandon+0x154>
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	f06f 010c 	mvn.w	r1, #12
 800f4e0:	68f8      	ldr	r0, [r7, #12]
 800f4e2:	4798      	blx	r3
  }
}
 800f4e4:	3728      	adds	r7, #40	; 0x28
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
 800f4ea:	bf00      	nop
 800f4ec:	0801fe54 	.word	0x0801fe54
 800f4f0:	0801ff98 	.word	0x0801ff98
 800f4f4:	0801fe98 	.word	0x0801fe98
 800f4f8:	0801ffb4 	.word	0x0801ffb4
 800f4fc:	200113c8 	.word	0x200113c8
 800f500:	200113bc 	.word	0x200113bc
 800f504:	200113c4 	.word	0x200113c4
 800f508:	200113cc 	.word	0x200113cc

0800f50c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b082      	sub	sp, #8
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f514:	2101      	movs	r1, #1
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f7ff ff3a 	bl	800f390 <tcp_abandon>
}
 800f51c:	bf00      	nop
 800f51e:	3708      	adds	r7, #8
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d106      	bne.n	800f540 <tcp_update_rcv_ann_wnd+0x1c>
 800f532:	4b25      	ldr	r3, [pc, #148]	; (800f5c8 <tcp_update_rcv_ann_wnd+0xa4>)
 800f534:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f538:	4924      	ldr	r1, [pc, #144]	; (800f5cc <tcp_update_rcv_ann_wnd+0xa8>)
 800f53a:	4825      	ldr	r0, [pc, #148]	; (800f5d0 <tcp_update_rcv_ann_wnd+0xac>)
 800f53c:	f00e f870 	bl	801d620 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f544:	687a      	ldr	r2, [r7, #4]
 800f546:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f548:	4413      	add	r3, r2
 800f54a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f550:	687a      	ldr	r2, [r7, #4]
 800f552:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f554:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f558:	bf28      	it	cs
 800f55a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f55e:	b292      	uxth	r2, r2
 800f560:	4413      	add	r3, r2
 800f562:	68fa      	ldr	r2, [r7, #12]
 800f564:	1ad3      	subs	r3, r2, r3
 800f566:	2b00      	cmp	r3, #0
 800f568:	db08      	blt.n	800f57c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f576:	68fa      	ldr	r2, [r7, #12]
 800f578:	1ad3      	subs	r3, r2, r3
 800f57a:	e020      	b.n	800f5be <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f584:	1ad3      	subs	r3, r2, r3
 800f586:	2b00      	cmp	r3, #0
 800f588:	dd03      	ble.n	800f592 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	2200      	movs	r2, #0
 800f58e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f590:	e014      	b.n	800f5bc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f59a:	1ad3      	subs	r3, r2, r3
 800f59c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5a4:	d306      	bcc.n	800f5b4 <tcp_update_rcv_ann_wnd+0x90>
 800f5a6:	4b08      	ldr	r3, [pc, #32]	; (800f5c8 <tcp_update_rcv_ann_wnd+0xa4>)
 800f5a8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f5ac:	4909      	ldr	r1, [pc, #36]	; (800f5d4 <tcp_update_rcv_ann_wnd+0xb0>)
 800f5ae:	4808      	ldr	r0, [pc, #32]	; (800f5d0 <tcp_update_rcv_ann_wnd+0xac>)
 800f5b0:	f00e f836 	bl	801d620 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	b29a      	uxth	r2, r3
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f5bc:	2300      	movs	r3, #0
  }
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3710      	adds	r7, #16
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	0801fe54 	.word	0x0801fe54
 800f5cc:	080200b0 	.word	0x080200b0
 800f5d0:	0801fe98 	.word	0x0801fe98
 800f5d4:	080200d4 	.word	0x080200d4

0800f5d8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b084      	sub	sp, #16
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	460b      	mov	r3, r1
 800f5e2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d107      	bne.n	800f5fa <tcp_recved+0x22>
 800f5ea:	4b1f      	ldr	r3, [pc, #124]	; (800f668 <tcp_recved+0x90>)
 800f5ec:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f5f0:	491e      	ldr	r1, [pc, #120]	; (800f66c <tcp_recved+0x94>)
 800f5f2:	481f      	ldr	r0, [pc, #124]	; (800f670 <tcp_recved+0x98>)
 800f5f4:	f00e f814 	bl	801d620 <iprintf>
 800f5f8:	e032      	b.n	800f660 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	7d1b      	ldrb	r3, [r3, #20]
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	d106      	bne.n	800f610 <tcp_recved+0x38>
 800f602:	4b19      	ldr	r3, [pc, #100]	; (800f668 <tcp_recved+0x90>)
 800f604:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f608:	491a      	ldr	r1, [pc, #104]	; (800f674 <tcp_recved+0x9c>)
 800f60a:	4819      	ldr	r0, [pc, #100]	; (800f670 <tcp_recved+0x98>)
 800f60c:	f00e f808 	bl	801d620 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f614:	887b      	ldrh	r3, [r7, #2]
 800f616:	4413      	add	r3, r2
 800f618:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f61a:	89fb      	ldrh	r3, [r7, #14]
 800f61c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f620:	d804      	bhi.n	800f62c <tcp_recved+0x54>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f626:	89fa      	ldrh	r2, [r7, #14]
 800f628:	429a      	cmp	r2, r3
 800f62a:	d204      	bcs.n	800f636 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f632:	851a      	strh	r2, [r3, #40]	; 0x28
 800f634:	e002      	b.n	800f63c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	89fa      	ldrh	r2, [r7, #14]
 800f63a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f7ff ff71 	bl	800f524 <tcp_update_rcv_ann_wnd>
 800f642:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f64a:	d309      	bcc.n	800f660 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	8b5b      	ldrh	r3, [r3, #26]
 800f650:	f043 0302 	orr.w	r3, r3, #2
 800f654:	b29a      	uxth	r2, r3
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f004 fcc6 	bl	8013fec <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f660:	3710      	adds	r7, #16
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}
 800f666:	bf00      	nop
 800f668:	0801fe54 	.word	0x0801fe54
 800f66c:	080200f0 	.word	0x080200f0
 800f670:	0801fe98 	.word	0x0801fe98
 800f674:	08020108 	.word	0x08020108

0800f678 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f678:	b480      	push	{r7}
 800f67a:	b083      	sub	sp, #12
 800f67c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f67e:	2300      	movs	r3, #0
 800f680:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f682:	4b1e      	ldr	r3, [pc, #120]	; (800f6fc <tcp_new_port+0x84>)
 800f684:	881b      	ldrh	r3, [r3, #0]
 800f686:	3301      	adds	r3, #1
 800f688:	b29a      	uxth	r2, r3
 800f68a:	4b1c      	ldr	r3, [pc, #112]	; (800f6fc <tcp_new_port+0x84>)
 800f68c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f68e:	4b1b      	ldr	r3, [pc, #108]	; (800f6fc <tcp_new_port+0x84>)
 800f690:	881b      	ldrh	r3, [r3, #0]
 800f692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f696:	4293      	cmp	r3, r2
 800f698:	d103      	bne.n	800f6a2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f69a:	4b18      	ldr	r3, [pc, #96]	; (800f6fc <tcp_new_port+0x84>)
 800f69c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f6a0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	71fb      	strb	r3, [r7, #7]
 800f6a6:	e01e      	b.n	800f6e6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f6a8:	79fb      	ldrb	r3, [r7, #7]
 800f6aa:	4a15      	ldr	r2, [pc, #84]	; (800f700 <tcp_new_port+0x88>)
 800f6ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	603b      	str	r3, [r7, #0]
 800f6b4:	e011      	b.n	800f6da <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	8ada      	ldrh	r2, [r3, #22]
 800f6ba:	4b10      	ldr	r3, [pc, #64]	; (800f6fc <tcp_new_port+0x84>)
 800f6bc:	881b      	ldrh	r3, [r3, #0]
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	d108      	bne.n	800f6d4 <tcp_new_port+0x5c>
        n++;
 800f6c2:	88bb      	ldrh	r3, [r7, #4]
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f6c8:	88bb      	ldrh	r3, [r7, #4]
 800f6ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f6ce:	d3d8      	bcc.n	800f682 <tcp_new_port+0xa>
          return 0;
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	e00d      	b.n	800f6f0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	68db      	ldr	r3, [r3, #12]
 800f6d8:	603b      	str	r3, [r7, #0]
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d1ea      	bne.n	800f6b6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f6e0:	79fb      	ldrb	r3, [r7, #7]
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	71fb      	strb	r3, [r7, #7]
 800f6e6:	79fb      	ldrb	r3, [r7, #7]
 800f6e8:	2b03      	cmp	r3, #3
 800f6ea:	d9dd      	bls.n	800f6a8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f6ec:	4b03      	ldr	r3, [pc, #12]	; (800f6fc <tcp_new_port+0x84>)
 800f6ee:	881b      	ldrh	r3, [r3, #0]
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	370c      	adds	r7, #12
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	4770      	bx	lr
 800f6fc:	20000024 	.word	0x20000024
 800f700:	08022214 	.word	0x08022214

0800f704 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b08a      	sub	sp, #40	; 0x28
 800f708:	af00      	add	r7, sp, #0
 800f70a:	60f8      	str	r0, [r7, #12]
 800f70c:	60b9      	str	r1, [r7, #8]
 800f70e:	603b      	str	r3, [r7, #0]
 800f710:	4613      	mov	r3, r2
 800f712:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800f714:	2300      	movs	r3, #0
 800f716:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d109      	bne.n	800f732 <tcp_connect+0x2e>
 800f71e:	4b7d      	ldr	r3, [pc, #500]	; (800f914 <tcp_connect+0x210>)
 800f720:	f240 4235 	movw	r2, #1077	; 0x435
 800f724:	497c      	ldr	r1, [pc, #496]	; (800f918 <tcp_connect+0x214>)
 800f726:	487d      	ldr	r0, [pc, #500]	; (800f91c <tcp_connect+0x218>)
 800f728:	f00d ff7a 	bl	801d620 <iprintf>
 800f72c:	f06f 030f 	mvn.w	r3, #15
 800f730:	e0ec      	b.n	800f90c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d109      	bne.n	800f74c <tcp_connect+0x48>
 800f738:	4b76      	ldr	r3, [pc, #472]	; (800f914 <tcp_connect+0x210>)
 800f73a:	f240 4236 	movw	r2, #1078	; 0x436
 800f73e:	4978      	ldr	r1, [pc, #480]	; (800f920 <tcp_connect+0x21c>)
 800f740:	4876      	ldr	r0, [pc, #472]	; (800f91c <tcp_connect+0x218>)
 800f742:	f00d ff6d 	bl	801d620 <iprintf>
 800f746:	f06f 030f 	mvn.w	r3, #15
 800f74a:	e0df      	b.n	800f90c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	7d1b      	ldrb	r3, [r3, #20]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d009      	beq.n	800f768 <tcp_connect+0x64>
 800f754:	4b6f      	ldr	r3, [pc, #444]	; (800f914 <tcp_connect+0x210>)
 800f756:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800f75a:	4972      	ldr	r1, [pc, #456]	; (800f924 <tcp_connect+0x220>)
 800f75c:	486f      	ldr	r0, [pc, #444]	; (800f91c <tcp_connect+0x218>)
 800f75e:	f00d ff5f 	bl	801d620 <iprintf>
 800f762:	f06f 0309 	mvn.w	r3, #9
 800f766:	e0d1      	b.n	800f90c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d002      	beq.n	800f774 <tcp_connect+0x70>
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	e000      	b.n	800f776 <tcp_connect+0x72>
 800f774:	2300      	movs	r3, #0
 800f776:	68fa      	ldr	r2, [r7, #12]
 800f778:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	88fa      	ldrh	r2, [r7, #6]
 800f77e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	7a1b      	ldrb	r3, [r3, #8]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d006      	beq.n	800f796 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	7a1b      	ldrb	r3, [r3, #8]
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7fe fd3f 	bl	800e210 <netif_get_by_index>
 800f792:	6278      	str	r0, [r7, #36]	; 0x24
 800f794:	e005      	b.n	800f7a2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	3304      	adds	r3, #4
 800f79a:	4618      	mov	r0, r3
 800f79c:	f007 f95e 	bl	8016a5c <ip4_route>
 800f7a0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800f7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d102      	bne.n	800f7ae <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800f7a8:	f06f 0303 	mvn.w	r3, #3
 800f7ac:	e0ae      	b.n	800f90c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d003      	beq.n	800f7bc <tcp_connect+0xb8>
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d111      	bne.n	800f7e0 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800f7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d002      	beq.n	800f7c8 <tcp_connect+0xc4>
 800f7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c4:	3304      	adds	r3, #4
 800f7c6:	e000      	b.n	800f7ca <tcp_connect+0xc6>
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800f7cc:	69fb      	ldr	r3, [r7, #28]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d102      	bne.n	800f7d8 <tcp_connect+0xd4>
      return ERR_RTE;
 800f7d2:	f06f 0303 	mvn.w	r3, #3
 800f7d6:	e099      	b.n	800f90c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f7d8:	69fb      	ldr	r3, [r7, #28]
 800f7da:	681a      	ldr	r2, [r3, #0]
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	8adb      	ldrh	r3, [r3, #22]
 800f7e4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	8adb      	ldrh	r3, [r3, #22]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d10c      	bne.n	800f808 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800f7ee:	f7ff ff43 	bl	800f678 <tcp_new_port>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	8adb      	ldrh	r3, [r3, #22]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d102      	bne.n	800f808 <tcp_connect+0x104>
      return ERR_BUF;
 800f802:	f06f 0301 	mvn.w	r3, #1
 800f806:	e081      	b.n	800f90c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800f808:	68f8      	ldr	r0, [r7, #12]
 800f80a:	f001 f867 	bl	80108dc <tcp_next_iss>
 800f80e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	2200      	movs	r2, #0
 800f814:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	697a      	ldr	r2, [r7, #20]
 800f81a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	1e5a      	subs	r2, r3, #1
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	1e5a      	subs	r2, r3, #1
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	1e5a      	subs	r2, r3, #1
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f83a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f852:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f85c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	3304      	adds	r3, #4
 800f866:	461a      	mov	r2, r3
 800f868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f86a:	f001 f85d 	bl	8010928 <tcp_eff_send_mss_netif>
 800f86e:	4603      	mov	r3, r0
 800f870:	461a      	mov	r2, r3
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	2201      	movs	r2, #1
 800f87a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	683a      	ldr	r2, [r7, #0]
 800f882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800f886:	2102      	movs	r1, #2
 800f888:	68f8      	ldr	r0, [r7, #12]
 800f88a:	f004 fac1 	bl	8013e10 <tcp_enqueue_flags>
 800f88e:	4603      	mov	r3, r0
 800f890:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800f892:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d136      	bne.n	800f908 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	2202      	movs	r2, #2
 800f89e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800f8a0:	8b7b      	ldrh	r3, [r7, #26]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d021      	beq.n	800f8ea <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800f8a6:	4b20      	ldr	r3, [pc, #128]	; (800f928 <tcp_connect+0x224>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	68fa      	ldr	r2, [r7, #12]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d105      	bne.n	800f8bc <tcp_connect+0x1b8>
 800f8b0:	4b1d      	ldr	r3, [pc, #116]	; (800f928 <tcp_connect+0x224>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	68db      	ldr	r3, [r3, #12]
 800f8b6:	4a1c      	ldr	r2, [pc, #112]	; (800f928 <tcp_connect+0x224>)
 800f8b8:	6013      	str	r3, [r2, #0]
 800f8ba:	e013      	b.n	800f8e4 <tcp_connect+0x1e0>
 800f8bc:	4b1a      	ldr	r3, [pc, #104]	; (800f928 <tcp_connect+0x224>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	623b      	str	r3, [r7, #32]
 800f8c2:	e00c      	b.n	800f8de <tcp_connect+0x1da>
 800f8c4:	6a3b      	ldr	r3, [r7, #32]
 800f8c6:	68db      	ldr	r3, [r3, #12]
 800f8c8:	68fa      	ldr	r2, [r7, #12]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d104      	bne.n	800f8d8 <tcp_connect+0x1d4>
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	68da      	ldr	r2, [r3, #12]
 800f8d2:	6a3b      	ldr	r3, [r7, #32]
 800f8d4:	60da      	str	r2, [r3, #12]
 800f8d6:	e005      	b.n	800f8e4 <tcp_connect+0x1e0>
 800f8d8:	6a3b      	ldr	r3, [r7, #32]
 800f8da:	68db      	ldr	r3, [r3, #12]
 800f8dc:	623b      	str	r3, [r7, #32]
 800f8de:	6a3b      	ldr	r3, [r7, #32]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d1ef      	bne.n	800f8c4 <tcp_connect+0x1c0>
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800f8ea:	4b10      	ldr	r3, [pc, #64]	; (800f92c <tcp_connect+0x228>)
 800f8ec:	681a      	ldr	r2, [r3, #0]
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	60da      	str	r2, [r3, #12]
 800f8f2:	4a0e      	ldr	r2, [pc, #56]	; (800f92c <tcp_connect+0x228>)
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	6013      	str	r3, [r2, #0]
 800f8f8:	f005 faee 	bl	8014ed8 <tcp_timer_needed>
 800f8fc:	4b0c      	ldr	r3, [pc, #48]	; (800f930 <tcp_connect+0x22c>)
 800f8fe:	2201      	movs	r2, #1
 800f900:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800f902:	68f8      	ldr	r0, [r7, #12]
 800f904:	f004 fb72 	bl	8013fec <tcp_output>
  }
  return ret;
 800f908:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3728      	adds	r7, #40	; 0x28
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}
 800f914:	0801fe54 	.word	0x0801fe54
 800f918:	08020130 	.word	0x08020130
 800f91c:	0801fe98 	.word	0x0801fe98
 800f920:	0802014c 	.word	0x0802014c
 800f924:	08020168 	.word	0x08020168
 800f928:	200113bc 	.word	0x200113bc
 800f92c:	200113c4 	.word	0x200113c4
 800f930:	200113cc 	.word	0x200113cc

0800f934 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f934:	b5b0      	push	{r4, r5, r7, lr}
 800f936:	b090      	sub	sp, #64	; 0x40
 800f938:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f93a:	2300      	movs	r3, #0
 800f93c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f940:	4b94      	ldr	r3, [pc, #592]	; (800fb94 <tcp_slowtmr+0x260>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	3301      	adds	r3, #1
 800f946:	4a93      	ldr	r2, [pc, #588]	; (800fb94 <tcp_slowtmr+0x260>)
 800f948:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f94a:	4b93      	ldr	r3, [pc, #588]	; (800fb98 <tcp_slowtmr+0x264>)
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	3301      	adds	r3, #1
 800f950:	b2da      	uxtb	r2, r3
 800f952:	4b91      	ldr	r3, [pc, #580]	; (800fb98 <tcp_slowtmr+0x264>)
 800f954:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f956:	2300      	movs	r3, #0
 800f958:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f95a:	4b90      	ldr	r3, [pc, #576]	; (800fb9c <tcp_slowtmr+0x268>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f960:	e29d      	b.n	800fe9e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f964:	7d1b      	ldrb	r3, [r3, #20]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d106      	bne.n	800f978 <tcp_slowtmr+0x44>
 800f96a:	4b8d      	ldr	r3, [pc, #564]	; (800fba0 <tcp_slowtmr+0x26c>)
 800f96c:	f240 42be 	movw	r2, #1214	; 0x4be
 800f970:	498c      	ldr	r1, [pc, #560]	; (800fba4 <tcp_slowtmr+0x270>)
 800f972:	488d      	ldr	r0, [pc, #564]	; (800fba8 <tcp_slowtmr+0x274>)
 800f974:	f00d fe54 	bl	801d620 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97a:	7d1b      	ldrb	r3, [r3, #20]
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	d106      	bne.n	800f98e <tcp_slowtmr+0x5a>
 800f980:	4b87      	ldr	r3, [pc, #540]	; (800fba0 <tcp_slowtmr+0x26c>)
 800f982:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f986:	4989      	ldr	r1, [pc, #548]	; (800fbac <tcp_slowtmr+0x278>)
 800f988:	4887      	ldr	r0, [pc, #540]	; (800fba8 <tcp_slowtmr+0x274>)
 800f98a:	f00d fe49 	bl	801d620 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f990:	7d1b      	ldrb	r3, [r3, #20]
 800f992:	2b0a      	cmp	r3, #10
 800f994:	d106      	bne.n	800f9a4 <tcp_slowtmr+0x70>
 800f996:	4b82      	ldr	r3, [pc, #520]	; (800fba0 <tcp_slowtmr+0x26c>)
 800f998:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f99c:	4984      	ldr	r1, [pc, #528]	; (800fbb0 <tcp_slowtmr+0x27c>)
 800f99e:	4882      	ldr	r0, [pc, #520]	; (800fba8 <tcp_slowtmr+0x274>)
 800f9a0:	f00d fe3e 	bl	801d620 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a6:	7f9a      	ldrb	r2, [r3, #30]
 800f9a8:	4b7b      	ldr	r3, [pc, #492]	; (800fb98 <tcp_slowtmr+0x264>)
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d105      	bne.n	800f9bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f9ba:	e270      	b.n	800fe9e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f9bc:	4b76      	ldr	r3, [pc, #472]	; (800fb98 <tcp_slowtmr+0x264>)
 800f9be:	781a      	ldrb	r2, [r3, #0]
 800f9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d2:	7d1b      	ldrb	r3, [r3, #20]
 800f9d4:	2b02      	cmp	r3, #2
 800f9d6:	d10a      	bne.n	800f9ee <tcp_slowtmr+0xba>
 800f9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f9de:	2b05      	cmp	r3, #5
 800f9e0:	d905      	bls.n	800f9ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f9e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f9ec:	e11e      	b.n	800fc2c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f9f4:	2b0b      	cmp	r3, #11
 800f9f6:	d905      	bls.n	800fa04 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f9f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9fc:	3301      	adds	r3, #1
 800f9fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa02:	e113      	b.n	800fc2c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800fa04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa06:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d075      	beq.n	800fafa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800fa0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d006      	beq.n	800fa24 <tcp_slowtmr+0xf0>
 800fa16:	4b62      	ldr	r3, [pc, #392]	; (800fba0 <tcp_slowtmr+0x26c>)
 800fa18:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800fa1c:	4965      	ldr	r1, [pc, #404]	; (800fbb4 <tcp_slowtmr+0x280>)
 800fa1e:	4862      	ldr	r0, [pc, #392]	; (800fba8 <tcp_slowtmr+0x274>)
 800fa20:	f00d fdfe 	bl	801d620 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800fa24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d106      	bne.n	800fa3a <tcp_slowtmr+0x106>
 800fa2c:	4b5c      	ldr	r3, [pc, #368]	; (800fba0 <tcp_slowtmr+0x26c>)
 800fa2e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800fa32:	4961      	ldr	r1, [pc, #388]	; (800fbb8 <tcp_slowtmr+0x284>)
 800fa34:	485c      	ldr	r0, [pc, #368]	; (800fba8 <tcp_slowtmr+0x274>)
 800fa36:	f00d fdf3 	bl	801d620 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800fa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa3c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fa40:	2b0b      	cmp	r3, #11
 800fa42:	d905      	bls.n	800fa50 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800fa44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa48:	3301      	adds	r3, #1
 800fa4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa4e:	e0ed      	b.n	800fc2c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800fa50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa52:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fa56:	3b01      	subs	r3, #1
 800fa58:	4a58      	ldr	r2, [pc, #352]	; (800fbbc <tcp_slowtmr+0x288>)
 800fa5a:	5cd3      	ldrb	r3, [r2, r3]
 800fa5c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800fa5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa60:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fa64:	7c7a      	ldrb	r2, [r7, #17]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d907      	bls.n	800fa7a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800fa6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa6c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fa70:	3301      	adds	r3, #1
 800fa72:	b2da      	uxtb	r2, r3
 800fa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa76:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800fa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa7c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fa80:	7c7a      	ldrb	r2, [r7, #17]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	f200 80d2 	bhi.w	800fc2c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800fa88:	2301      	movs	r3, #1
 800fa8a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800fa8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d108      	bne.n	800faa8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800fa96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa98:	f005 f950 	bl	8014d3c <tcp_zero_window_probe>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d014      	beq.n	800facc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800faa2:	2300      	movs	r3, #0
 800faa4:	623b      	str	r3, [r7, #32]
 800faa6:	e011      	b.n	800facc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800faa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800faae:	4619      	mov	r1, r3
 800fab0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fab2:	f004 f815 	bl	8013ae0 <tcp_split_unsent_seg>
 800fab6:	4603      	mov	r3, r0
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d107      	bne.n	800facc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800fabc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fabe:	f004 fa95 	bl	8013fec <tcp_output>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d101      	bne.n	800facc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800fac8:	2300      	movs	r3, #0
 800faca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800facc:	6a3b      	ldr	r3, [r7, #32]
 800face:	2b00      	cmp	r3, #0
 800fad0:	f000 80ac 	beq.w	800fc2c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800fad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad6:	2200      	movs	r2, #0
 800fad8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fade:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fae2:	2b06      	cmp	r3, #6
 800fae4:	f200 80a2 	bhi.w	800fc2c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800fae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800faee:	3301      	adds	r3, #1
 800faf0:	b2da      	uxtb	r2, r3
 800faf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800faf8:	e098      	b.n	800fc2c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	db0f      	blt.n	800fb24 <tcp_slowtmr+0x1f0>
 800fb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb06:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fb0a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	d008      	beq.n	800fb24 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800fb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fb18:	b29b      	uxth	r3, r3
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	b29b      	uxth	r3, r3
 800fb1e:	b21a      	sxth	r2, r3
 800fb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb22:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800fb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb26:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800fb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fb30:	429a      	cmp	r2, r3
 800fb32:	db7b      	blt.n	800fc2c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fb34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb36:	f004 fd4b 	bl	80145d0 <tcp_rexmit_rto_prepare>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d007      	beq.n	800fb50 <tcp_slowtmr+0x21c>
 800fb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d171      	bne.n	800fc2c <tcp_slowtmr+0x2f8>
 800fb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d06d      	beq.n	800fc2c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800fb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb52:	7d1b      	ldrb	r3, [r3, #20]
 800fb54:	2b02      	cmp	r3, #2
 800fb56:	d03a      	beq.n	800fbce <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb5e:	2b0c      	cmp	r3, #12
 800fb60:	bf28      	it	cs
 800fb62:	230c      	movcs	r3, #12
 800fb64:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fb6c:	10db      	asrs	r3, r3, #3
 800fb6e:	b21b      	sxth	r3, r3
 800fb70:	461a      	mov	r2, r3
 800fb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fb78:	4413      	add	r3, r2
 800fb7a:	7efa      	ldrb	r2, [r7, #27]
 800fb7c:	4910      	ldr	r1, [pc, #64]	; (800fbc0 <tcp_slowtmr+0x28c>)
 800fb7e:	5c8a      	ldrb	r2, [r1, r2]
 800fb80:	4093      	lsls	r3, r2
 800fb82:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	dc1a      	bgt.n	800fbc4 <tcp_slowtmr+0x290>
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	b21a      	sxth	r2, r3
 800fb92:	e019      	b.n	800fbc8 <tcp_slowtmr+0x294>
 800fb94:	200113b8 	.word	0x200113b8
 800fb98:	200113ce 	.word	0x200113ce
 800fb9c:	200113c4 	.word	0x200113c4
 800fba0:	0801fe54 	.word	0x0801fe54
 800fba4:	08020198 	.word	0x08020198
 800fba8:	0801fe98 	.word	0x0801fe98
 800fbac:	080201c4 	.word	0x080201c4
 800fbb0:	080201f0 	.word	0x080201f0
 800fbb4:	08020220 	.word	0x08020220
 800fbb8:	08020254 	.word	0x08020254
 800fbbc:	0802220c 	.word	0x0802220c
 800fbc0:	080221fc 	.word	0x080221fc
 800fbc4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbdc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fbe0:	4293      	cmp	r3, r2
 800fbe2:	bf28      	it	cs
 800fbe4:	4613      	movcs	r3, r2
 800fbe6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fbe8:	8a7b      	ldrh	r3, [r7, #18]
 800fbea:	085b      	lsrs	r3, r3, #1
 800fbec:	b29a      	uxth	r2, r3
 800fbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbfe:	005b      	lsls	r3, r3, #1
 800fc00:	b29b      	uxth	r3, r3
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d206      	bcs.n	800fc14 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc0a:	005b      	lsls	r3, r3, #1
 800fc0c:	b29a      	uxth	r2, r3
 800fc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc10:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc16:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc20:	2200      	movs	r2, #0
 800fc22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fc26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc28:	f004 fd42 	bl	80146b0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2e:	7d1b      	ldrb	r3, [r3, #20]
 800fc30:	2b06      	cmp	r3, #6
 800fc32:	d111      	bne.n	800fc58 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc36:	8b5b      	ldrh	r3, [r3, #26]
 800fc38:	f003 0310 	and.w	r3, r3, #16
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d00b      	beq.n	800fc58 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc40:	4b9c      	ldr	r3, [pc, #624]	; (800feb4 <tcp_slowtmr+0x580>)
 800fc42:	681a      	ldr	r2, [r3, #0]
 800fc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc46:	6a1b      	ldr	r3, [r3, #32]
 800fc48:	1ad3      	subs	r3, r2, r3
 800fc4a:	2b28      	cmp	r3, #40	; 0x28
 800fc4c:	d904      	bls.n	800fc58 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fc4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc52:	3301      	adds	r3, #1
 800fc54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc5a:	7a5b      	ldrb	r3, [r3, #9]
 800fc5c:	f003 0308 	and.w	r3, r3, #8
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d04a      	beq.n	800fcfa <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800fc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc66:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fc68:	2b04      	cmp	r3, #4
 800fc6a:	d003      	beq.n	800fc74 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800fc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc6e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fc70:	2b07      	cmp	r3, #7
 800fc72:	d142      	bne.n	800fcfa <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc74:	4b8f      	ldr	r3, [pc, #572]	; (800feb4 <tcp_slowtmr+0x580>)
 800fc76:	681a      	ldr	r2, [r3, #0]
 800fc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc7a:	6a1b      	ldr	r3, [r3, #32]
 800fc7c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc80:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fc84:	4b8c      	ldr	r3, [pc, #560]	; (800feb8 <tcp_slowtmr+0x584>)
 800fc86:	440b      	add	r3, r1
 800fc88:	498c      	ldr	r1, [pc, #560]	; (800febc <tcp_slowtmr+0x588>)
 800fc8a:	fba1 1303 	umull	r1, r3, r1, r3
 800fc8e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d90a      	bls.n	800fcaa <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fc94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc98:	3301      	adds	r3, #1
 800fc9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fc9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fca2:	3301      	adds	r3, #1
 800fca4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fca8:	e027      	b.n	800fcfa <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fcaa:	4b82      	ldr	r3, [pc, #520]	; (800feb4 <tcp_slowtmr+0x580>)
 800fcac:	681a      	ldr	r2, [r3, #0]
 800fcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb0:	6a1b      	ldr	r3, [r3, #32]
 800fcb2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcbc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	4b7f      	ldr	r3, [pc, #508]	; (800fec0 <tcp_slowtmr+0x58c>)
 800fcc4:	fb00 f303 	mul.w	r3, r0, r3
 800fcc8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fcca:	497c      	ldr	r1, [pc, #496]	; (800febc <tcp_slowtmr+0x588>)
 800fccc:	fba1 1303 	umull	r1, r3, r1, r3
 800fcd0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d911      	bls.n	800fcfa <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800fcd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fcd8:	f004 fff0 	bl	8014cbc <tcp_keepalive>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fce2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d107      	bne.n	800fcfa <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800fcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fcf0:	3301      	adds	r3, #1
 800fcf2:	b2da      	uxtb	r2, r3
 800fcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcf6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fcfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d011      	beq.n	800fd26 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fd02:	4b6c      	ldr	r3, [pc, #432]	; (800feb4 <tcp_slowtmr+0x580>)
 800fd04:	681a      	ldr	r2, [r3, #0]
 800fd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd08:	6a1b      	ldr	r3, [r3, #32]
 800fd0a:	1ad2      	subs	r2, r2, r3
 800fd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fd12:	4619      	mov	r1, r3
 800fd14:	460b      	mov	r3, r1
 800fd16:	005b      	lsls	r3, r3, #1
 800fd18:	440b      	add	r3, r1
 800fd1a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d302      	bcc.n	800fd26 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fd20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd22:	f000 feab 	bl	8010a7c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd28:	7d1b      	ldrb	r3, [r3, #20]
 800fd2a:	2b03      	cmp	r3, #3
 800fd2c:	d10b      	bne.n	800fd46 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd2e:	4b61      	ldr	r3, [pc, #388]	; (800feb4 <tcp_slowtmr+0x580>)
 800fd30:	681a      	ldr	r2, [r3, #0]
 800fd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd34:	6a1b      	ldr	r3, [r3, #32]
 800fd36:	1ad3      	subs	r3, r2, r3
 800fd38:	2b28      	cmp	r3, #40	; 0x28
 800fd3a:	d904      	bls.n	800fd46 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fd3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd40:	3301      	adds	r3, #1
 800fd42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd48:	7d1b      	ldrb	r3, [r3, #20]
 800fd4a:	2b09      	cmp	r3, #9
 800fd4c:	d10b      	bne.n	800fd66 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fd4e:	4b59      	ldr	r3, [pc, #356]	; (800feb4 <tcp_slowtmr+0x580>)
 800fd50:	681a      	ldr	r2, [r3, #0]
 800fd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd54:	6a1b      	ldr	r3, [r3, #32]
 800fd56:	1ad3      	subs	r3, r2, r3
 800fd58:	2bf0      	cmp	r3, #240	; 0xf0
 800fd5a:	d904      	bls.n	800fd66 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800fd5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd60:	3301      	adds	r3, #1
 800fd62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fd66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d060      	beq.n	800fe30 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd74:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fd76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd78:	f000 fccc 	bl	8010714 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d010      	beq.n	800fda4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fd82:	4b50      	ldr	r3, [pc, #320]	; (800fec4 <tcp_slowtmr+0x590>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd88:	429a      	cmp	r2, r3
 800fd8a:	d106      	bne.n	800fd9a <tcp_slowtmr+0x466>
 800fd8c:	4b4e      	ldr	r3, [pc, #312]	; (800fec8 <tcp_slowtmr+0x594>)
 800fd8e:	f240 526d 	movw	r2, #1389	; 0x56d
 800fd92:	494e      	ldr	r1, [pc, #312]	; (800fecc <tcp_slowtmr+0x598>)
 800fd94:	484e      	ldr	r0, [pc, #312]	; (800fed0 <tcp_slowtmr+0x59c>)
 800fd96:	f00d fc43 	bl	801d620 <iprintf>
        prev->next = pcb->next;
 800fd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd9c:	68da      	ldr	r2, [r3, #12]
 800fd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda0:	60da      	str	r2, [r3, #12]
 800fda2:	e00f      	b.n	800fdc4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fda4:	4b47      	ldr	r3, [pc, #284]	; (800fec4 <tcp_slowtmr+0x590>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d006      	beq.n	800fdbc <tcp_slowtmr+0x488>
 800fdae:	4b46      	ldr	r3, [pc, #280]	; (800fec8 <tcp_slowtmr+0x594>)
 800fdb0:	f240 5271 	movw	r2, #1393	; 0x571
 800fdb4:	4947      	ldr	r1, [pc, #284]	; (800fed4 <tcp_slowtmr+0x5a0>)
 800fdb6:	4846      	ldr	r0, [pc, #280]	; (800fed0 <tcp_slowtmr+0x59c>)
 800fdb8:	f00d fc32 	bl	801d620 <iprintf>
        tcp_active_pcbs = pcb->next;
 800fdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbe:	68db      	ldr	r3, [r3, #12]
 800fdc0:	4a40      	ldr	r2, [pc, #256]	; (800fec4 <tcp_slowtmr+0x590>)
 800fdc2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fdc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d013      	beq.n	800fdf4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdce:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fdd4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd8:	3304      	adds	r3, #4
 800fdda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fddc:	8ad2      	ldrh	r2, [r2, #22]
 800fdde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fde0:	8b09      	ldrh	r1, [r1, #24]
 800fde2:	9102      	str	r1, [sp, #8]
 800fde4:	9201      	str	r2, [sp, #4]
 800fde6:	9300      	str	r3, [sp, #0]
 800fde8:	462b      	mov	r3, r5
 800fdea:	4622      	mov	r2, r4
 800fdec:	4601      	mov	r1, r0
 800fdee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fdf0:	f004 feb0 	bl	8014b54 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf6:	691b      	ldr	r3, [r3, #16]
 800fdf8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdfc:	7d1b      	ldrb	r3, [r3, #20]
 800fdfe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fe00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe02:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fe04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe06:	68db      	ldr	r3, [r3, #12]
 800fe08:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fe0a:	6838      	ldr	r0, [r7, #0]
 800fe0c:	f7ff f83a 	bl	800ee84 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fe10:	4b31      	ldr	r3, [pc, #196]	; (800fed8 <tcp_slowtmr+0x5a4>)
 800fe12:	2200      	movs	r2, #0
 800fe14:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d004      	beq.n	800fe26 <tcp_slowtmr+0x4f2>
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	f06f 010c 	mvn.w	r1, #12
 800fe22:	68b8      	ldr	r0, [r7, #8]
 800fe24:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fe26:	4b2c      	ldr	r3, [pc, #176]	; (800fed8 <tcp_slowtmr+0x5a4>)
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d037      	beq.n	800fe9e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800fe2e:	e592      	b.n	800f956 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fe30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe32:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fe34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe36:	68db      	ldr	r3, [r3, #12]
 800fe38:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fe3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe3c:	7f1b      	ldrb	r3, [r3, #28]
 800fe3e:	3301      	adds	r3, #1
 800fe40:	b2da      	uxtb	r2, r3
 800fe42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe44:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fe46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe48:	7f1a      	ldrb	r2, [r3, #28]
 800fe4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe4c:	7f5b      	ldrb	r3, [r3, #29]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d325      	bcc.n	800fe9e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800fe52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe54:	2200      	movs	r2, #0
 800fe56:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fe58:	4b1f      	ldr	r3, [pc, #124]	; (800fed8 <tcp_slowtmr+0x5a4>)
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fe5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d00b      	beq.n	800fe80 <tcp_slowtmr+0x54c>
 800fe68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe70:	6912      	ldr	r2, [r2, #16]
 800fe72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe74:	4610      	mov	r0, r2
 800fe76:	4798      	blx	r3
 800fe78:	4603      	mov	r3, r0
 800fe7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fe7e:	e002      	b.n	800fe86 <tcp_slowtmr+0x552>
 800fe80:	2300      	movs	r3, #0
 800fe82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fe86:	4b14      	ldr	r3, [pc, #80]	; (800fed8 <tcp_slowtmr+0x5a4>)
 800fe88:	781b      	ldrb	r3, [r3, #0]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d000      	beq.n	800fe90 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800fe8e:	e562      	b.n	800f956 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fe90:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d102      	bne.n	800fe9e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800fe98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe9a:	f004 f8a7 	bl	8013fec <tcp_output>
  while (pcb != NULL) {
 800fe9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	f47f ad5e 	bne.w	800f962 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fea6:	2300      	movs	r3, #0
 800fea8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800feaa:	4b0c      	ldr	r3, [pc, #48]	; (800fedc <tcp_slowtmr+0x5a8>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800feb0:	e069      	b.n	800ff86 <tcp_slowtmr+0x652>
 800feb2:	bf00      	nop
 800feb4:	200113b8 	.word	0x200113b8
 800feb8:	000a4cb8 	.word	0x000a4cb8
 800febc:	10624dd3 	.word	0x10624dd3
 800fec0:	000124f8 	.word	0x000124f8
 800fec4:	200113c4 	.word	0x200113c4
 800fec8:	0801fe54 	.word	0x0801fe54
 800fecc:	0802028c 	.word	0x0802028c
 800fed0:	0801fe98 	.word	0x0801fe98
 800fed4:	080202b8 	.word	0x080202b8
 800fed8:	200113cc 	.word	0x200113cc
 800fedc:	200113c8 	.word	0x200113c8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee2:	7d1b      	ldrb	r3, [r3, #20]
 800fee4:	2b0a      	cmp	r3, #10
 800fee6:	d006      	beq.n	800fef6 <tcp_slowtmr+0x5c2>
 800fee8:	4b2b      	ldr	r3, [pc, #172]	; (800ff98 <tcp_slowtmr+0x664>)
 800feea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800feee:	492b      	ldr	r1, [pc, #172]	; (800ff9c <tcp_slowtmr+0x668>)
 800fef0:	482b      	ldr	r0, [pc, #172]	; (800ffa0 <tcp_slowtmr+0x66c>)
 800fef2:	f00d fb95 	bl	801d620 <iprintf>
    pcb_remove = 0;
 800fef6:	2300      	movs	r3, #0
 800fef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fefc:	4b29      	ldr	r3, [pc, #164]	; (800ffa4 <tcp_slowtmr+0x670>)
 800fefe:	681a      	ldr	r2, [r3, #0]
 800ff00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff02:	6a1b      	ldr	r3, [r3, #32]
 800ff04:	1ad3      	subs	r3, r2, r3
 800ff06:	2bf0      	cmp	r3, #240	; 0xf0
 800ff08:	d904      	bls.n	800ff14 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ff0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff0e:	3301      	adds	r3, #1
 800ff10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ff14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d02f      	beq.n	800ff7c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ff1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff1e:	f000 fbf9 	bl	8010714 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ff22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d010      	beq.n	800ff4a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ff28:	4b1f      	ldr	r3, [pc, #124]	; (800ffa8 <tcp_slowtmr+0x674>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	d106      	bne.n	800ff40 <tcp_slowtmr+0x60c>
 800ff32:	4b19      	ldr	r3, [pc, #100]	; (800ff98 <tcp_slowtmr+0x664>)
 800ff34:	f240 52af 	movw	r2, #1455	; 0x5af
 800ff38:	491c      	ldr	r1, [pc, #112]	; (800ffac <tcp_slowtmr+0x678>)
 800ff3a:	4819      	ldr	r0, [pc, #100]	; (800ffa0 <tcp_slowtmr+0x66c>)
 800ff3c:	f00d fb70 	bl	801d620 <iprintf>
        prev->next = pcb->next;
 800ff40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff42:	68da      	ldr	r2, [r3, #12]
 800ff44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff46:	60da      	str	r2, [r3, #12]
 800ff48:	e00f      	b.n	800ff6a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ff4a:	4b17      	ldr	r3, [pc, #92]	; (800ffa8 <tcp_slowtmr+0x674>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d006      	beq.n	800ff62 <tcp_slowtmr+0x62e>
 800ff54:	4b10      	ldr	r3, [pc, #64]	; (800ff98 <tcp_slowtmr+0x664>)
 800ff56:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ff5a:	4915      	ldr	r1, [pc, #84]	; (800ffb0 <tcp_slowtmr+0x67c>)
 800ff5c:	4810      	ldr	r0, [pc, #64]	; (800ffa0 <tcp_slowtmr+0x66c>)
 800ff5e:	f00d fb5f 	bl	801d620 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ff62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff64:	68db      	ldr	r3, [r3, #12]
 800ff66:	4a10      	ldr	r2, [pc, #64]	; (800ffa8 <tcp_slowtmr+0x674>)
 800ff68:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ff6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff6c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ff6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff70:	68db      	ldr	r3, [r3, #12]
 800ff72:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ff74:	69f8      	ldr	r0, [r7, #28]
 800ff76:	f7fe ff85 	bl	800ee84 <tcp_free>
 800ff7a:	e004      	b.n	800ff86 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ff7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff7e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ff80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ff86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d1a9      	bne.n	800fee0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ff8c:	bf00      	nop
 800ff8e:	bf00      	nop
 800ff90:	3730      	adds	r7, #48	; 0x30
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bdb0      	pop	{r4, r5, r7, pc}
 800ff96:	bf00      	nop
 800ff98:	0801fe54 	.word	0x0801fe54
 800ff9c:	080202e4 	.word	0x080202e4
 800ffa0:	0801fe98 	.word	0x0801fe98
 800ffa4:	200113b8 	.word	0x200113b8
 800ffa8:	200113c8 	.word	0x200113c8
 800ffac:	08020314 	.word	0x08020314
 800ffb0:	0802033c 	.word	0x0802033c

0800ffb4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ffba:	4b2d      	ldr	r3, [pc, #180]	; (8010070 <tcp_fasttmr+0xbc>)
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	b2da      	uxtb	r2, r3
 800ffc2:	4b2b      	ldr	r3, [pc, #172]	; (8010070 <tcp_fasttmr+0xbc>)
 800ffc4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ffc6:	4b2b      	ldr	r3, [pc, #172]	; (8010074 <tcp_fasttmr+0xc0>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ffcc:	e048      	b.n	8010060 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	7f9a      	ldrb	r2, [r3, #30]
 800ffd2:	4b27      	ldr	r3, [pc, #156]	; (8010070 <tcp_fasttmr+0xbc>)
 800ffd4:	781b      	ldrb	r3, [r3, #0]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d03f      	beq.n	801005a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ffda:	4b25      	ldr	r3, [pc, #148]	; (8010070 <tcp_fasttmr+0xbc>)
 800ffdc:	781a      	ldrb	r2, [r3, #0]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	8b5b      	ldrh	r3, [r3, #26]
 800ffe6:	f003 0301 	and.w	r3, r3, #1
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d010      	beq.n	8010010 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	8b5b      	ldrh	r3, [r3, #26]
 800fff2:	f043 0302 	orr.w	r3, r3, #2
 800fff6:	b29a      	uxth	r2, r3
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f003 fff5 	bl	8013fec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	8b5b      	ldrh	r3, [r3, #26]
 8010006:	f023 0303 	bic.w	r3, r3, #3
 801000a:	b29a      	uxth	r2, r3
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	8b5b      	ldrh	r3, [r3, #26]
 8010014:	f003 0308 	and.w	r3, r3, #8
 8010018:	2b00      	cmp	r3, #0
 801001a:	d009      	beq.n	8010030 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	8b5b      	ldrh	r3, [r3, #26]
 8010020:	f023 0308 	bic.w	r3, r3, #8
 8010024:	b29a      	uxth	r2, r3
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f7ff f8be 	bl	800f1ac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801003a:	2b00      	cmp	r3, #0
 801003c:	d00a      	beq.n	8010054 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801003e:	4b0e      	ldr	r3, [pc, #56]	; (8010078 <tcp_fasttmr+0xc4>)
 8010040:	2200      	movs	r2, #0
 8010042:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f000 f819 	bl	801007c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801004a:	4b0b      	ldr	r3, [pc, #44]	; (8010078 <tcp_fasttmr+0xc4>)
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d000      	beq.n	8010054 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010052:	e7b8      	b.n	800ffc6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	607b      	str	r3, [r7, #4]
 8010058:	e002      	b.n	8010060 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	68db      	ldr	r3, [r3, #12]
 801005e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d1b3      	bne.n	800ffce <tcp_fasttmr+0x1a>
    }
  }
}
 8010066:	bf00      	nop
 8010068:	bf00      	nop
 801006a:	3708      	adds	r7, #8
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}
 8010070:	200113ce 	.word	0x200113ce
 8010074:	200113c4 	.word	0x200113c4
 8010078:	200113cc 	.word	0x200113cc

0801007c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801007c:	b590      	push	{r4, r7, lr}
 801007e:	b085      	sub	sp, #20
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d109      	bne.n	801009e <tcp_process_refused_data+0x22>
 801008a:	4b37      	ldr	r3, [pc, #220]	; (8010168 <tcp_process_refused_data+0xec>)
 801008c:	f240 6209 	movw	r2, #1545	; 0x609
 8010090:	4936      	ldr	r1, [pc, #216]	; (801016c <tcp_process_refused_data+0xf0>)
 8010092:	4837      	ldr	r0, [pc, #220]	; (8010170 <tcp_process_refused_data+0xf4>)
 8010094:	f00d fac4 	bl	801d620 <iprintf>
 8010098:	f06f 030f 	mvn.w	r3, #15
 801009c:	e060      	b.n	8010160 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100a2:	7b5b      	ldrb	r3, [r3, #13]
 80100a4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100aa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2200      	movs	r2, #0
 80100b0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d00b      	beq.n	80100d4 <tcp_process_refused_data+0x58>
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6918      	ldr	r0, [r3, #16]
 80100c6:	2300      	movs	r3, #0
 80100c8:	68ba      	ldr	r2, [r7, #8]
 80100ca:	6879      	ldr	r1, [r7, #4]
 80100cc:	47a0      	blx	r4
 80100ce:	4603      	mov	r3, r0
 80100d0:	73fb      	strb	r3, [r7, #15]
 80100d2:	e007      	b.n	80100e4 <tcp_process_refused_data+0x68>
 80100d4:	2300      	movs	r3, #0
 80100d6:	68ba      	ldr	r2, [r7, #8]
 80100d8:	6879      	ldr	r1, [r7, #4]
 80100da:	2000      	movs	r0, #0
 80100dc:	f000 f8a4 	bl	8010228 <tcp_recv_null>
 80100e0:	4603      	mov	r3, r0
 80100e2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80100e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d12a      	bne.n	8010142 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80100ec:	7bbb      	ldrb	r3, [r7, #14]
 80100ee:	f003 0320 	and.w	r3, r3, #32
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d033      	beq.n	801015e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100fa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80100fe:	d005      	beq.n	801010c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010104:	3301      	adds	r3, #1
 8010106:	b29a      	uxth	r2, r3
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010112:	2b00      	cmp	r3, #0
 8010114:	d00b      	beq.n	801012e <tcp_process_refused_data+0xb2>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6918      	ldr	r0, [r3, #16]
 8010120:	2300      	movs	r3, #0
 8010122:	2200      	movs	r2, #0
 8010124:	6879      	ldr	r1, [r7, #4]
 8010126:	47a0      	blx	r4
 8010128:	4603      	mov	r3, r0
 801012a:	73fb      	strb	r3, [r7, #15]
 801012c:	e001      	b.n	8010132 <tcp_process_refused_data+0xb6>
 801012e:	2300      	movs	r3, #0
 8010130:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010136:	f113 0f0d 	cmn.w	r3, #13
 801013a:	d110      	bne.n	801015e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801013c:	f06f 030c 	mvn.w	r3, #12
 8010140:	e00e      	b.n	8010160 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010146:	f113 0f0d 	cmn.w	r3, #13
 801014a:	d102      	bne.n	8010152 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801014c:	f06f 030c 	mvn.w	r3, #12
 8010150:	e006      	b.n	8010160 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	68ba      	ldr	r2, [r7, #8]
 8010156:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010158:	f06f 0304 	mvn.w	r3, #4
 801015c:	e000      	b.n	8010160 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801015e:	2300      	movs	r3, #0
}
 8010160:	4618      	mov	r0, r3
 8010162:	3714      	adds	r7, #20
 8010164:	46bd      	mov	sp, r7
 8010166:	bd90      	pop	{r4, r7, pc}
 8010168:	0801fe54 	.word	0x0801fe54
 801016c:	08020364 	.word	0x08020364
 8010170:	0801fe98 	.word	0x0801fe98

08010174 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b084      	sub	sp, #16
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801017c:	e007      	b.n	801018e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f000 f80a 	bl	801019e <tcp_seg_free>
    seg = next;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d1f4      	bne.n	801017e <tcp_segs_free+0xa>
  }
}
 8010194:	bf00      	nop
 8010196:	bf00      	nop
 8010198:	3710      	adds	r7, #16
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}

0801019e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801019e:	b580      	push	{r7, lr}
 80101a0:	b082      	sub	sp, #8
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d00c      	beq.n	80101c6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	685b      	ldr	r3, [r3, #4]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d004      	beq.n	80101be <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	685b      	ldr	r3, [r3, #4]
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7fe fbb7 	bl	800e92c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80101be:	6879      	ldr	r1, [r7, #4]
 80101c0:	2003      	movs	r0, #3
 80101c2:	f7fd fd0f 	bl	800dbe4 <memp_free>
  }
}
 80101c6:	bf00      	nop
 80101c8:	3708      	adds	r7, #8
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd80      	pop	{r7, pc}
	...

080101d0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b084      	sub	sp, #16
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d106      	bne.n	80101ec <tcp_seg_copy+0x1c>
 80101de:	4b0f      	ldr	r3, [pc, #60]	; (801021c <tcp_seg_copy+0x4c>)
 80101e0:	f240 6282 	movw	r2, #1666	; 0x682
 80101e4:	490e      	ldr	r1, [pc, #56]	; (8010220 <tcp_seg_copy+0x50>)
 80101e6:	480f      	ldr	r0, [pc, #60]	; (8010224 <tcp_seg_copy+0x54>)
 80101e8:	f00d fa1a 	bl	801d620 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80101ec:	2003      	movs	r0, #3
 80101ee:	f7fd fc83 	bl	800daf8 <memp_malloc>
 80101f2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d101      	bne.n	80101fe <tcp_seg_copy+0x2e>
    return NULL;
 80101fa:	2300      	movs	r3, #0
 80101fc:	e00a      	b.n	8010214 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80101fe:	2210      	movs	r2, #16
 8010200:	6879      	ldr	r1, [r7, #4]
 8010202:	68f8      	ldr	r0, [r7, #12]
 8010204:	f00d f9f6 	bl	801d5f4 <memcpy>
  pbuf_ref(cseg->p);
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	685b      	ldr	r3, [r3, #4]
 801020c:	4618      	mov	r0, r3
 801020e:	f7fe fc33 	bl	800ea78 <pbuf_ref>
  return cseg;
 8010212:	68fb      	ldr	r3, [r7, #12]
}
 8010214:	4618      	mov	r0, r3
 8010216:	3710      	adds	r7, #16
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}
 801021c:	0801fe54 	.word	0x0801fe54
 8010220:	080203a8 	.word	0x080203a8
 8010224:	0801fe98 	.word	0x0801fe98

08010228 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b084      	sub	sp, #16
 801022c:	af00      	add	r7, sp, #0
 801022e:	60f8      	str	r0, [r7, #12]
 8010230:	60b9      	str	r1, [r7, #8]
 8010232:	607a      	str	r2, [r7, #4]
 8010234:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d109      	bne.n	8010250 <tcp_recv_null+0x28>
 801023c:	4b12      	ldr	r3, [pc, #72]	; (8010288 <tcp_recv_null+0x60>)
 801023e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010242:	4912      	ldr	r1, [pc, #72]	; (801028c <tcp_recv_null+0x64>)
 8010244:	4812      	ldr	r0, [pc, #72]	; (8010290 <tcp_recv_null+0x68>)
 8010246:	f00d f9eb 	bl	801d620 <iprintf>
 801024a:	f06f 030f 	mvn.w	r3, #15
 801024e:	e016      	b.n	801027e <tcp_recv_null+0x56>

  if (p != NULL) {
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d009      	beq.n	801026a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	891b      	ldrh	r3, [r3, #8]
 801025a:	4619      	mov	r1, r3
 801025c:	68b8      	ldr	r0, [r7, #8]
 801025e:	f7ff f9bb 	bl	800f5d8 <tcp_recved>
    pbuf_free(p);
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f7fe fb62 	bl	800e92c <pbuf_free>
 8010268:	e008      	b.n	801027c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801026a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d104      	bne.n	801027c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010272:	68b8      	ldr	r0, [r7, #8]
 8010274:	f7ff f804 	bl	800f280 <tcp_close>
 8010278:	4603      	mov	r3, r0
 801027a:	e000      	b.n	801027e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801027c:	2300      	movs	r3, #0
}
 801027e:	4618      	mov	r0, r3
 8010280:	3710      	adds	r7, #16
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	0801fe54 	.word	0x0801fe54
 801028c:	080203c4 	.word	0x080203c4
 8010290:	0801fe98 	.word	0x0801fe98

08010294 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b086      	sub	sp, #24
 8010298:	af00      	add	r7, sp, #0
 801029a:	4603      	mov	r3, r0
 801029c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801029e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	db01      	blt.n	80102aa <tcp_kill_prio+0x16>
 80102a6:	79fb      	ldrb	r3, [r7, #7]
 80102a8:	e000      	b.n	80102ac <tcp_kill_prio+0x18>
 80102aa:	237f      	movs	r3, #127	; 0x7f
 80102ac:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80102ae:	7afb      	ldrb	r3, [r7, #11]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d034      	beq.n	801031e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80102b4:	7afb      	ldrb	r3, [r7, #11]
 80102b6:	3b01      	subs	r3, #1
 80102b8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80102ba:	2300      	movs	r3, #0
 80102bc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80102be:	2300      	movs	r3, #0
 80102c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102c2:	4b19      	ldr	r3, [pc, #100]	; (8010328 <tcp_kill_prio+0x94>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	617b      	str	r3, [r7, #20]
 80102c8:	e01f      	b.n	801030a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	7d5b      	ldrb	r3, [r3, #21]
 80102ce:	7afa      	ldrb	r2, [r7, #11]
 80102d0:	429a      	cmp	r2, r3
 80102d2:	d80c      	bhi.n	80102ee <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80102d8:	7afa      	ldrb	r2, [r7, #11]
 80102da:	429a      	cmp	r2, r3
 80102dc:	d112      	bne.n	8010304 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80102de:	4b13      	ldr	r3, [pc, #76]	; (801032c <tcp_kill_prio+0x98>)
 80102e0:	681a      	ldr	r2, [r3, #0]
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	6a1b      	ldr	r3, [r3, #32]
 80102e6:	1ad3      	subs	r3, r2, r3
 80102e8:	68fa      	ldr	r2, [r7, #12]
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d80a      	bhi.n	8010304 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80102ee:	4b0f      	ldr	r3, [pc, #60]	; (801032c <tcp_kill_prio+0x98>)
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	6a1b      	ldr	r3, [r3, #32]
 80102f6:	1ad3      	subs	r3, r2, r3
 80102f8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	7d5b      	ldrb	r3, [r3, #21]
 8010302:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010304:	697b      	ldr	r3, [r7, #20]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	617b      	str	r3, [r7, #20]
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d1dc      	bne.n	80102ca <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d004      	beq.n	8010320 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010316:	6938      	ldr	r0, [r7, #16]
 8010318:	f7ff f8f8 	bl	800f50c <tcp_abort>
 801031c:	e000      	b.n	8010320 <tcp_kill_prio+0x8c>
    return;
 801031e:	bf00      	nop
  }
}
 8010320:	3718      	adds	r7, #24
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}
 8010326:	bf00      	nop
 8010328:	200113c4 	.word	0x200113c4
 801032c:	200113b8 	.word	0x200113b8

08010330 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b086      	sub	sp, #24
 8010334:	af00      	add	r7, sp, #0
 8010336:	4603      	mov	r3, r0
 8010338:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801033a:	79fb      	ldrb	r3, [r7, #7]
 801033c:	2b08      	cmp	r3, #8
 801033e:	d009      	beq.n	8010354 <tcp_kill_state+0x24>
 8010340:	79fb      	ldrb	r3, [r7, #7]
 8010342:	2b09      	cmp	r3, #9
 8010344:	d006      	beq.n	8010354 <tcp_kill_state+0x24>
 8010346:	4b1a      	ldr	r3, [pc, #104]	; (80103b0 <tcp_kill_state+0x80>)
 8010348:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801034c:	4919      	ldr	r1, [pc, #100]	; (80103b4 <tcp_kill_state+0x84>)
 801034e:	481a      	ldr	r0, [pc, #104]	; (80103b8 <tcp_kill_state+0x88>)
 8010350:	f00d f966 	bl	801d620 <iprintf>

  inactivity = 0;
 8010354:	2300      	movs	r3, #0
 8010356:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010358:	2300      	movs	r3, #0
 801035a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801035c:	4b17      	ldr	r3, [pc, #92]	; (80103bc <tcp_kill_state+0x8c>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	617b      	str	r3, [r7, #20]
 8010362:	e017      	b.n	8010394 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	7d1b      	ldrb	r3, [r3, #20]
 8010368:	79fa      	ldrb	r2, [r7, #7]
 801036a:	429a      	cmp	r2, r3
 801036c:	d10f      	bne.n	801038e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801036e:	4b14      	ldr	r3, [pc, #80]	; (80103c0 <tcp_kill_state+0x90>)
 8010370:	681a      	ldr	r2, [r3, #0]
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	6a1b      	ldr	r3, [r3, #32]
 8010376:	1ad3      	subs	r3, r2, r3
 8010378:	68fa      	ldr	r2, [r7, #12]
 801037a:	429a      	cmp	r2, r3
 801037c:	d807      	bhi.n	801038e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801037e:	4b10      	ldr	r3, [pc, #64]	; (80103c0 <tcp_kill_state+0x90>)
 8010380:	681a      	ldr	r2, [r3, #0]
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	6a1b      	ldr	r3, [r3, #32]
 8010386:	1ad3      	subs	r3, r2, r3
 8010388:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	68db      	ldr	r3, [r3, #12]
 8010392:	617b      	str	r3, [r7, #20]
 8010394:	697b      	ldr	r3, [r7, #20]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d1e4      	bne.n	8010364 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d003      	beq.n	80103a8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80103a0:	2100      	movs	r1, #0
 80103a2:	6938      	ldr	r0, [r7, #16]
 80103a4:	f7fe fff4 	bl	800f390 <tcp_abandon>
  }
}
 80103a8:	bf00      	nop
 80103aa:	3718      	adds	r7, #24
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}
 80103b0:	0801fe54 	.word	0x0801fe54
 80103b4:	080203e0 	.word	0x080203e0
 80103b8:	0801fe98 	.word	0x0801fe98
 80103bc:	200113c4 	.word	0x200113c4
 80103c0:	200113b8 	.word	0x200113b8

080103c4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b084      	sub	sp, #16
 80103c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80103ca:	2300      	movs	r3, #0
 80103cc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80103ce:	2300      	movs	r3, #0
 80103d0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80103d2:	4b12      	ldr	r3, [pc, #72]	; (801041c <tcp_kill_timewait+0x58>)
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	60fb      	str	r3, [r7, #12]
 80103d8:	e012      	b.n	8010400 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80103da:	4b11      	ldr	r3, [pc, #68]	; (8010420 <tcp_kill_timewait+0x5c>)
 80103dc:	681a      	ldr	r2, [r3, #0]
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	6a1b      	ldr	r3, [r3, #32]
 80103e2:	1ad3      	subs	r3, r2, r3
 80103e4:	687a      	ldr	r2, [r7, #4]
 80103e6:	429a      	cmp	r2, r3
 80103e8:	d807      	bhi.n	80103fa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80103ea:	4b0d      	ldr	r3, [pc, #52]	; (8010420 <tcp_kill_timewait+0x5c>)
 80103ec:	681a      	ldr	r2, [r3, #0]
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	6a1b      	ldr	r3, [r3, #32]
 80103f2:	1ad3      	subs	r3, r2, r3
 80103f4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	68db      	ldr	r3, [r3, #12]
 80103fe:	60fb      	str	r3, [r7, #12]
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d1e9      	bne.n	80103da <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d002      	beq.n	8010412 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801040c:	68b8      	ldr	r0, [r7, #8]
 801040e:	f7ff f87d 	bl	800f50c <tcp_abort>
  }
}
 8010412:	bf00      	nop
 8010414:	3710      	adds	r7, #16
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}
 801041a:	bf00      	nop
 801041c:	200113c8 	.word	0x200113c8
 8010420:	200113b8 	.word	0x200113b8

08010424 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801042a:	4b10      	ldr	r3, [pc, #64]	; (801046c <tcp_handle_closepend+0x48>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010430:	e014      	b.n	801045c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	68db      	ldr	r3, [r3, #12]
 8010436:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	8b5b      	ldrh	r3, [r3, #26]
 801043c:	f003 0308 	and.w	r3, r3, #8
 8010440:	2b00      	cmp	r3, #0
 8010442:	d009      	beq.n	8010458 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	8b5b      	ldrh	r3, [r3, #26]
 8010448:	f023 0308 	bic.w	r3, r3, #8
 801044c:	b29a      	uxth	r2, r3
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010452:	6878      	ldr	r0, [r7, #4]
 8010454:	f7fe feaa 	bl	800f1ac <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d1e7      	bne.n	8010432 <tcp_handle_closepend+0xe>
  }
}
 8010462:	bf00      	nop
 8010464:	bf00      	nop
 8010466:	3708      	adds	r7, #8
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}
 801046c:	200113c4 	.word	0x200113c4

08010470 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b084      	sub	sp, #16
 8010474:	af00      	add	r7, sp, #0
 8010476:	4603      	mov	r3, r0
 8010478:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801047a:	2001      	movs	r0, #1
 801047c:	f7fd fb3c 	bl	800daf8 <memp_malloc>
 8010480:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d126      	bne.n	80104d6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010488:	f7ff ffcc 	bl	8010424 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801048c:	f7ff ff9a 	bl	80103c4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010490:	2001      	movs	r0, #1
 8010492:	f7fd fb31 	bl	800daf8 <memp_malloc>
 8010496:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d11b      	bne.n	80104d6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801049e:	2009      	movs	r0, #9
 80104a0:	f7ff ff46 	bl	8010330 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80104a4:	2001      	movs	r0, #1
 80104a6:	f7fd fb27 	bl	800daf8 <memp_malloc>
 80104aa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d111      	bne.n	80104d6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80104b2:	2008      	movs	r0, #8
 80104b4:	f7ff ff3c 	bl	8010330 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80104b8:	2001      	movs	r0, #1
 80104ba:	f7fd fb1d 	bl	800daf8 <memp_malloc>
 80104be:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d107      	bne.n	80104d6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80104c6:	79fb      	ldrb	r3, [r7, #7]
 80104c8:	4618      	mov	r0, r3
 80104ca:	f7ff fee3 	bl	8010294 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80104ce:	2001      	movs	r0, #1
 80104d0:	f7fd fb12 	bl	800daf8 <memp_malloc>
 80104d4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d03f      	beq.n	801055c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80104dc:	229c      	movs	r2, #156	; 0x9c
 80104de:	2100      	movs	r1, #0
 80104e0:	68f8      	ldr	r0, [r7, #12]
 80104e2:	f00d f895 	bl	801d610 <memset>
    pcb->prio = prio;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	79fa      	ldrb	r2, [r7, #7]
 80104ea:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80104f2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80104fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	22ff      	movs	r2, #255	; 0xff
 801050a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010512:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2206      	movs	r2, #6
 8010518:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	2206      	movs	r2, #6
 8010520:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010528:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2201      	movs	r2, #1
 801052e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010532:	4b0d      	ldr	r3, [pc, #52]	; (8010568 <tcp_alloc+0xf8>)
 8010534:	681a      	ldr	r2, [r3, #0]
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801053a:	4b0c      	ldr	r3, [pc, #48]	; (801056c <tcp_alloc+0xfc>)
 801053c:	781a      	ldrb	r2, [r3, #0]
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010548:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	4a08      	ldr	r2, [pc, #32]	; (8010570 <tcp_alloc+0x100>)
 8010550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	4a07      	ldr	r2, [pc, #28]	; (8010574 <tcp_alloc+0x104>)
 8010558:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801055c:	68fb      	ldr	r3, [r7, #12]
}
 801055e:	4618      	mov	r0, r3
 8010560:	3710      	adds	r7, #16
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
 8010566:	bf00      	nop
 8010568:	200113b8 	.word	0x200113b8
 801056c:	200113ce 	.word	0x200113ce
 8010570:	08010229 	.word	0x08010229
 8010574:	006ddd00 	.word	0x006ddd00

08010578 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b084      	sub	sp, #16
 801057c:	af00      	add	r7, sp, #0
 801057e:	4603      	mov	r3, r0
 8010580:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8010582:	2040      	movs	r0, #64	; 0x40
 8010584:	f7ff ff74 	bl	8010470 <tcp_alloc>
 8010588:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801058a:	68fb      	ldr	r3, [r7, #12]
}
 801058c:	4618      	mov	r0, r3
 801058e:	3710      	adds	r7, #16
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}

08010594 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8010594:	b480      	push	{r7}
 8010596:	b083      	sub	sp, #12
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d002      	beq.n	80105aa <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	683a      	ldr	r2, [r7, #0]
 80105a8:	611a      	str	r2, [r3, #16]
  }
}
 80105aa:	bf00      	nop
 80105ac:	370c      	adds	r7, #12
 80105ae:	46bd      	mov	sp, r7
 80105b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b4:	4770      	bx	lr
	...

080105b8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d00e      	beq.n	80105e6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	7d1b      	ldrb	r3, [r3, #20]
 80105cc:	2b01      	cmp	r3, #1
 80105ce:	d106      	bne.n	80105de <tcp_recv+0x26>
 80105d0:	4b07      	ldr	r3, [pc, #28]	; (80105f0 <tcp_recv+0x38>)
 80105d2:	f240 72df 	movw	r2, #2015	; 0x7df
 80105d6:	4907      	ldr	r1, [pc, #28]	; (80105f4 <tcp_recv+0x3c>)
 80105d8:	4807      	ldr	r0, [pc, #28]	; (80105f8 <tcp_recv+0x40>)
 80105da:	f00d f821 	bl	801d620 <iprintf>
    pcb->recv = recv;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	683a      	ldr	r2, [r7, #0]
 80105e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80105e6:	bf00      	nop
 80105e8:	3708      	adds	r7, #8
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}
 80105ee:	bf00      	nop
 80105f0:	0801fe54 	.word	0x0801fe54
 80105f4:	080203f0 	.word	0x080203f0
 80105f8:	0801fe98 	.word	0x0801fe98

080105fc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d00e      	beq.n	801062a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	7d1b      	ldrb	r3, [r3, #20]
 8010610:	2b01      	cmp	r3, #1
 8010612:	d106      	bne.n	8010622 <tcp_sent+0x26>
 8010614:	4b07      	ldr	r3, [pc, #28]	; (8010634 <tcp_sent+0x38>)
 8010616:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801061a:	4907      	ldr	r1, [pc, #28]	; (8010638 <tcp_sent+0x3c>)
 801061c:	4807      	ldr	r0, [pc, #28]	; (801063c <tcp_sent+0x40>)
 801061e:	f00c ffff 	bl	801d620 <iprintf>
    pcb->sent = sent;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	683a      	ldr	r2, [r7, #0]
 8010626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801062a:	bf00      	nop
 801062c:	3708      	adds	r7, #8
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
 8010632:	bf00      	nop
 8010634:	0801fe54 	.word	0x0801fe54
 8010638:	08020418 	.word	0x08020418
 801063c:	0801fe98 	.word	0x0801fe98

08010640 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b082      	sub	sp, #8
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d00e      	beq.n	801066e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	7d1b      	ldrb	r3, [r3, #20]
 8010654:	2b01      	cmp	r3, #1
 8010656:	d106      	bne.n	8010666 <tcp_err+0x26>
 8010658:	4b07      	ldr	r3, [pc, #28]	; (8010678 <tcp_err+0x38>)
 801065a:	f640 020d 	movw	r2, #2061	; 0x80d
 801065e:	4907      	ldr	r1, [pc, #28]	; (801067c <tcp_err+0x3c>)
 8010660:	4807      	ldr	r0, [pc, #28]	; (8010680 <tcp_err+0x40>)
 8010662:	f00c ffdd 	bl	801d620 <iprintf>
    pcb->errf = err;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	683a      	ldr	r2, [r7, #0]
 801066a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801066e:	bf00      	nop
 8010670:	3708      	adds	r7, #8
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}
 8010676:	bf00      	nop
 8010678:	0801fe54 	.word	0x0801fe54
 801067c:	08020440 	.word	0x08020440
 8010680:	0801fe98 	.word	0x0801fe98

08010684 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8010684:	b480      	push	{r7}
 8010686:	b085      	sub	sp, #20
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d008      	beq.n	80106a6 <tcp_accept+0x22>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	7d1b      	ldrb	r3, [r3, #20]
 8010698:	2b01      	cmp	r3, #1
 801069a:	d104      	bne.n	80106a6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	683a      	ldr	r2, [r7, #0]
 80106a4:	619a      	str	r2, [r3, #24]
  }
}
 80106a6:	bf00      	nop
 80106a8:	3714      	adds	r7, #20
 80106aa:	46bd      	mov	sp, r7
 80106ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b0:	4770      	bx	lr
	...

080106b4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b084      	sub	sp, #16
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	60f8      	str	r0, [r7, #12]
 80106bc:	60b9      	str	r1, [r7, #8]
 80106be:	4613      	mov	r3, r2
 80106c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d107      	bne.n	80106d8 <tcp_poll+0x24>
 80106c8:	4b0e      	ldr	r3, [pc, #56]	; (8010704 <tcp_poll+0x50>)
 80106ca:	f640 023d 	movw	r2, #2109	; 0x83d
 80106ce:	490e      	ldr	r1, [pc, #56]	; (8010708 <tcp_poll+0x54>)
 80106d0:	480e      	ldr	r0, [pc, #56]	; (801070c <tcp_poll+0x58>)
 80106d2:	f00c ffa5 	bl	801d620 <iprintf>
 80106d6:	e011      	b.n	80106fc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	7d1b      	ldrb	r3, [r3, #20]
 80106dc:	2b01      	cmp	r3, #1
 80106de:	d106      	bne.n	80106ee <tcp_poll+0x3a>
 80106e0:	4b08      	ldr	r3, [pc, #32]	; (8010704 <tcp_poll+0x50>)
 80106e2:	f640 023e 	movw	r2, #2110	; 0x83e
 80106e6:	490a      	ldr	r1, [pc, #40]	; (8010710 <tcp_poll+0x5c>)
 80106e8:	4808      	ldr	r0, [pc, #32]	; (801070c <tcp_poll+0x58>)
 80106ea:	f00c ff99 	bl	801d620 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	68ba      	ldr	r2, [r7, #8]
 80106f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	79fa      	ldrb	r2, [r7, #7]
 80106fa:	775a      	strb	r2, [r3, #29]
}
 80106fc:	3710      	adds	r7, #16
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}
 8010702:	bf00      	nop
 8010704:	0801fe54 	.word	0x0801fe54
 8010708:	08020468 	.word	0x08020468
 801070c:	0801fe98 	.word	0x0801fe98
 8010710:	08020480 	.word	0x08020480

08010714 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b082      	sub	sp, #8
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d107      	bne.n	8010732 <tcp_pcb_purge+0x1e>
 8010722:	4b21      	ldr	r3, [pc, #132]	; (80107a8 <tcp_pcb_purge+0x94>)
 8010724:	f640 0251 	movw	r2, #2129	; 0x851
 8010728:	4920      	ldr	r1, [pc, #128]	; (80107ac <tcp_pcb_purge+0x98>)
 801072a:	4821      	ldr	r0, [pc, #132]	; (80107b0 <tcp_pcb_purge+0x9c>)
 801072c:	f00c ff78 	bl	801d620 <iprintf>
 8010730:	e037      	b.n	80107a2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	7d1b      	ldrb	r3, [r3, #20]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d033      	beq.n	80107a2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801073e:	2b0a      	cmp	r3, #10
 8010740:	d02f      	beq.n	80107a2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010746:	2b01      	cmp	r3, #1
 8010748:	d02b      	beq.n	80107a2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801074e:	2b00      	cmp	r3, #0
 8010750:	d007      	beq.n	8010762 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010756:	4618      	mov	r0, r3
 8010758:	f7fe f8e8 	bl	800e92c <pbuf_free>
      pcb->refused_data = NULL;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2200      	movs	r2, #0
 8010760:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010766:	2b00      	cmp	r3, #0
 8010768:	d002      	beq.n	8010770 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f000 f986 	bl	8010a7c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010776:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801077c:	4618      	mov	r0, r3
 801077e:	f7ff fcf9 	bl	8010174 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010786:	4618      	mov	r0, r3
 8010788:	f7ff fcf4 	bl	8010174 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2200      	movs	r2, #0
 8010790:	66da      	str	r2, [r3, #108]	; 0x6c
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	2200      	movs	r2, #0
 801079e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80107a2:	3708      	adds	r7, #8
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}
 80107a8:	0801fe54 	.word	0x0801fe54
 80107ac:	080204a0 	.word	0x080204a0
 80107b0:	0801fe98 	.word	0x0801fe98

080107b4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b084      	sub	sp, #16
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d106      	bne.n	80107d2 <tcp_pcb_remove+0x1e>
 80107c4:	4b3e      	ldr	r3, [pc, #248]	; (80108c0 <tcp_pcb_remove+0x10c>)
 80107c6:	f640 0283 	movw	r2, #2179	; 0x883
 80107ca:	493e      	ldr	r1, [pc, #248]	; (80108c4 <tcp_pcb_remove+0x110>)
 80107cc:	483e      	ldr	r0, [pc, #248]	; (80108c8 <tcp_pcb_remove+0x114>)
 80107ce:	f00c ff27 	bl	801d620 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d106      	bne.n	80107e6 <tcp_pcb_remove+0x32>
 80107d8:	4b39      	ldr	r3, [pc, #228]	; (80108c0 <tcp_pcb_remove+0x10c>)
 80107da:	f640 0284 	movw	r2, #2180	; 0x884
 80107de:	493b      	ldr	r1, [pc, #236]	; (80108cc <tcp_pcb_remove+0x118>)
 80107e0:	4839      	ldr	r0, [pc, #228]	; (80108c8 <tcp_pcb_remove+0x114>)
 80107e2:	f00c ff1d 	bl	801d620 <iprintf>

  TCP_RMV(pcblist, pcb);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	683a      	ldr	r2, [r7, #0]
 80107ec:	429a      	cmp	r2, r3
 80107ee:	d105      	bne.n	80107fc <tcp_pcb_remove+0x48>
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	68da      	ldr	r2, [r3, #12]
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	601a      	str	r2, [r3, #0]
 80107fa:	e013      	b.n	8010824 <tcp_pcb_remove+0x70>
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	60fb      	str	r3, [r7, #12]
 8010802:	e00c      	b.n	801081e <tcp_pcb_remove+0x6a>
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	68db      	ldr	r3, [r3, #12]
 8010808:	683a      	ldr	r2, [r7, #0]
 801080a:	429a      	cmp	r2, r3
 801080c:	d104      	bne.n	8010818 <tcp_pcb_remove+0x64>
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	68da      	ldr	r2, [r3, #12]
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	60da      	str	r2, [r3, #12]
 8010816:	e005      	b.n	8010824 <tcp_pcb_remove+0x70>
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	68db      	ldr	r3, [r3, #12]
 801081c:	60fb      	str	r3, [r7, #12]
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d1ef      	bne.n	8010804 <tcp_pcb_remove+0x50>
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	2200      	movs	r2, #0
 8010828:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801082a:	6838      	ldr	r0, [r7, #0]
 801082c:	f7ff ff72 	bl	8010714 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	7d1b      	ldrb	r3, [r3, #20]
 8010834:	2b0a      	cmp	r3, #10
 8010836:	d013      	beq.n	8010860 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801083c:	2b01      	cmp	r3, #1
 801083e:	d00f      	beq.n	8010860 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	8b5b      	ldrh	r3, [r3, #26]
 8010844:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010848:	2b00      	cmp	r3, #0
 801084a:	d009      	beq.n	8010860 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	8b5b      	ldrh	r3, [r3, #26]
 8010850:	f043 0302 	orr.w	r3, r3, #2
 8010854:	b29a      	uxth	r2, r3
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801085a:	6838      	ldr	r0, [r7, #0]
 801085c:	f003 fbc6 	bl	8013fec <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	7d1b      	ldrb	r3, [r3, #20]
 8010864:	2b01      	cmp	r3, #1
 8010866:	d020      	beq.n	80108aa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801086c:	2b00      	cmp	r3, #0
 801086e:	d006      	beq.n	801087e <tcp_pcb_remove+0xca>
 8010870:	4b13      	ldr	r3, [pc, #76]	; (80108c0 <tcp_pcb_remove+0x10c>)
 8010872:	f640 0293 	movw	r2, #2195	; 0x893
 8010876:	4916      	ldr	r1, [pc, #88]	; (80108d0 <tcp_pcb_remove+0x11c>)
 8010878:	4813      	ldr	r0, [pc, #76]	; (80108c8 <tcp_pcb_remove+0x114>)
 801087a:	f00c fed1 	bl	801d620 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010882:	2b00      	cmp	r3, #0
 8010884:	d006      	beq.n	8010894 <tcp_pcb_remove+0xe0>
 8010886:	4b0e      	ldr	r3, [pc, #56]	; (80108c0 <tcp_pcb_remove+0x10c>)
 8010888:	f640 0294 	movw	r2, #2196	; 0x894
 801088c:	4911      	ldr	r1, [pc, #68]	; (80108d4 <tcp_pcb_remove+0x120>)
 801088e:	480e      	ldr	r0, [pc, #56]	; (80108c8 <tcp_pcb_remove+0x114>)
 8010890:	f00c fec6 	bl	801d620 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010898:	2b00      	cmp	r3, #0
 801089a:	d006      	beq.n	80108aa <tcp_pcb_remove+0xf6>
 801089c:	4b08      	ldr	r3, [pc, #32]	; (80108c0 <tcp_pcb_remove+0x10c>)
 801089e:	f640 0296 	movw	r2, #2198	; 0x896
 80108a2:	490d      	ldr	r1, [pc, #52]	; (80108d8 <tcp_pcb_remove+0x124>)
 80108a4:	4808      	ldr	r0, [pc, #32]	; (80108c8 <tcp_pcb_remove+0x114>)
 80108a6:	f00c febb 	bl	801d620 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	2200      	movs	r2, #0
 80108ae:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	2200      	movs	r2, #0
 80108b4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80108b6:	bf00      	nop
 80108b8:	3710      	adds	r7, #16
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}
 80108be:	bf00      	nop
 80108c0:	0801fe54 	.word	0x0801fe54
 80108c4:	080204bc 	.word	0x080204bc
 80108c8:	0801fe98 	.word	0x0801fe98
 80108cc:	080204d8 	.word	0x080204d8
 80108d0:	080204f8 	.word	0x080204f8
 80108d4:	08020510 	.word	0x08020510
 80108d8:	0802052c 	.word	0x0802052c

080108dc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b082      	sub	sp, #8
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d106      	bne.n	80108f8 <tcp_next_iss+0x1c>
 80108ea:	4b0a      	ldr	r3, [pc, #40]	; (8010914 <tcp_next_iss+0x38>)
 80108ec:	f640 02af 	movw	r2, #2223	; 0x8af
 80108f0:	4909      	ldr	r1, [pc, #36]	; (8010918 <tcp_next_iss+0x3c>)
 80108f2:	480a      	ldr	r0, [pc, #40]	; (801091c <tcp_next_iss+0x40>)
 80108f4:	f00c fe94 	bl	801d620 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80108f8:	4b09      	ldr	r3, [pc, #36]	; (8010920 <tcp_next_iss+0x44>)
 80108fa:	681a      	ldr	r2, [r3, #0]
 80108fc:	4b09      	ldr	r3, [pc, #36]	; (8010924 <tcp_next_iss+0x48>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	4413      	add	r3, r2
 8010902:	4a07      	ldr	r2, [pc, #28]	; (8010920 <tcp_next_iss+0x44>)
 8010904:	6013      	str	r3, [r2, #0]
  return iss;
 8010906:	4b06      	ldr	r3, [pc, #24]	; (8010920 <tcp_next_iss+0x44>)
 8010908:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801090a:	4618      	mov	r0, r3
 801090c:	3708      	adds	r7, #8
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}
 8010912:	bf00      	nop
 8010914:	0801fe54 	.word	0x0801fe54
 8010918:	08020544 	.word	0x08020544
 801091c:	0801fe98 	.word	0x0801fe98
 8010920:	20000028 	.word	0x20000028
 8010924:	200113b8 	.word	0x200113b8

08010928 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b086      	sub	sp, #24
 801092c:	af00      	add	r7, sp, #0
 801092e:	4603      	mov	r3, r0
 8010930:	60b9      	str	r1, [r7, #8]
 8010932:	607a      	str	r2, [r7, #4]
 8010934:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d106      	bne.n	801094a <tcp_eff_send_mss_netif+0x22>
 801093c:	4b14      	ldr	r3, [pc, #80]	; (8010990 <tcp_eff_send_mss_netif+0x68>)
 801093e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010942:	4914      	ldr	r1, [pc, #80]	; (8010994 <tcp_eff_send_mss_netif+0x6c>)
 8010944:	4814      	ldr	r0, [pc, #80]	; (8010998 <tcp_eff_send_mss_netif+0x70>)
 8010946:	f00c fe6b 	bl	801d620 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801094a:	68bb      	ldr	r3, [r7, #8]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d101      	bne.n	8010954 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010950:	89fb      	ldrh	r3, [r7, #14]
 8010952:	e019      	b.n	8010988 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010958:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801095a:	8afb      	ldrh	r3, [r7, #22]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d012      	beq.n	8010986 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010960:	2328      	movs	r3, #40	; 0x28
 8010962:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010964:	8afa      	ldrh	r2, [r7, #22]
 8010966:	8abb      	ldrh	r3, [r7, #20]
 8010968:	429a      	cmp	r2, r3
 801096a:	d904      	bls.n	8010976 <tcp_eff_send_mss_netif+0x4e>
 801096c:	8afa      	ldrh	r2, [r7, #22]
 801096e:	8abb      	ldrh	r3, [r7, #20]
 8010970:	1ad3      	subs	r3, r2, r3
 8010972:	b29b      	uxth	r3, r3
 8010974:	e000      	b.n	8010978 <tcp_eff_send_mss_netif+0x50>
 8010976:	2300      	movs	r3, #0
 8010978:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801097a:	8a7a      	ldrh	r2, [r7, #18]
 801097c:	89fb      	ldrh	r3, [r7, #14]
 801097e:	4293      	cmp	r3, r2
 8010980:	bf28      	it	cs
 8010982:	4613      	movcs	r3, r2
 8010984:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010986:	89fb      	ldrh	r3, [r7, #14]
}
 8010988:	4618      	mov	r0, r3
 801098a:	3718      	adds	r7, #24
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}
 8010990:	0801fe54 	.word	0x0801fe54
 8010994:	08020560 	.word	0x08020560
 8010998:	0801fe98 	.word	0x0801fe98

0801099c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b084      	sub	sp, #16
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
 80109a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80109a6:	683b      	ldr	r3, [r7, #0]
 80109a8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d119      	bne.n	80109e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80109b0:	4b10      	ldr	r3, [pc, #64]	; (80109f4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80109b2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80109b6:	4910      	ldr	r1, [pc, #64]	; (80109f8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80109b8:	4810      	ldr	r0, [pc, #64]	; (80109fc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80109ba:	f00c fe31 	bl	801d620 <iprintf>

  while (pcb != NULL) {
 80109be:	e011      	b.n	80109e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	681a      	ldr	r2, [r3, #0]
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d108      	bne.n	80109de <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	68db      	ldr	r3, [r3, #12]
 80109d0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80109d2:	68f8      	ldr	r0, [r7, #12]
 80109d4:	f7fe fd9a 	bl	800f50c <tcp_abort>
      pcb = next;
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	60fb      	str	r3, [r7, #12]
 80109dc:	e002      	b.n	80109e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	68db      	ldr	r3, [r3, #12]
 80109e2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d1ea      	bne.n	80109c0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80109ea:	bf00      	nop
 80109ec:	bf00      	nop
 80109ee:	3710      	adds	r7, #16
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}
 80109f4:	0801fe54 	.word	0x0801fe54
 80109f8:	08020588 	.word	0x08020588
 80109fc:	0801fe98 	.word	0x0801fe98

08010a00 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b084      	sub	sp, #16
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
 8010a08:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d02a      	beq.n	8010a66 <tcp_netif_ip_addr_changed+0x66>
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d026      	beq.n	8010a66 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010a18:	4b15      	ldr	r3, [pc, #84]	; (8010a70 <tcp_netif_ip_addr_changed+0x70>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	4619      	mov	r1, r3
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f7ff ffbc 	bl	801099c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010a24:	4b13      	ldr	r3, [pc, #76]	; (8010a74 <tcp_netif_ip_addr_changed+0x74>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	4619      	mov	r1, r3
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f7ff ffb6 	bl	801099c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d017      	beq.n	8010a66 <tcp_netif_ip_addr_changed+0x66>
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d013      	beq.n	8010a66 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010a3e:	4b0e      	ldr	r3, [pc, #56]	; (8010a78 <tcp_netif_ip_addr_changed+0x78>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	60fb      	str	r3, [r7, #12]
 8010a44:	e00c      	b.n	8010a60 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681a      	ldr	r2, [r3, #0]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d103      	bne.n	8010a5a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	681a      	ldr	r2, [r3, #0]
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	68db      	ldr	r3, [r3, #12]
 8010a5e:	60fb      	str	r3, [r7, #12]
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d1ef      	bne.n	8010a46 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010a66:	bf00      	nop
 8010a68:	3710      	adds	r7, #16
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	200113c4 	.word	0x200113c4
 8010a74:	200113bc 	.word	0x200113bc
 8010a78:	200113c0 	.word	0x200113c0

08010a7c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d007      	beq.n	8010a9c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a90:	4618      	mov	r0, r3
 8010a92:	f7ff fb6f 	bl	8010174 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2200      	movs	r2, #0
 8010a9a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010a9c:	bf00      	nop
 8010a9e:	3708      	adds	r7, #8
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}

08010aa4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010aa4:	b590      	push	{r4, r7, lr}
 8010aa6:	b08d      	sub	sp, #52	; 0x34
 8010aa8:	af04      	add	r7, sp, #16
 8010aaa:	6078      	str	r0, [r7, #4]
 8010aac:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d105      	bne.n	8010ac0 <tcp_input+0x1c>
 8010ab4:	4b9b      	ldr	r3, [pc, #620]	; (8010d24 <tcp_input+0x280>)
 8010ab6:	2283      	movs	r2, #131	; 0x83
 8010ab8:	499b      	ldr	r1, [pc, #620]	; (8010d28 <tcp_input+0x284>)
 8010aba:	489c      	ldr	r0, [pc, #624]	; (8010d2c <tcp_input+0x288>)
 8010abc:	f00c fdb0 	bl	801d620 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	685b      	ldr	r3, [r3, #4]
 8010ac4:	4a9a      	ldr	r2, [pc, #616]	; (8010d30 <tcp_input+0x28c>)
 8010ac6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	895b      	ldrh	r3, [r3, #10]
 8010acc:	2b13      	cmp	r3, #19
 8010ace:	f240 83d1 	bls.w	8011274 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010ad2:	4b98      	ldr	r3, [pc, #608]	; (8010d34 <tcp_input+0x290>)
 8010ad4:	695b      	ldr	r3, [r3, #20]
 8010ad6:	4a97      	ldr	r2, [pc, #604]	; (8010d34 <tcp_input+0x290>)
 8010ad8:	6812      	ldr	r2, [r2, #0]
 8010ada:	4611      	mov	r1, r2
 8010adc:	4618      	mov	r0, r3
 8010ade:	f006 fa53 	bl	8016f88 <ip4_addr_isbroadcast_u32>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	f040 83c7 	bne.w	8011278 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010aea:	4b92      	ldr	r3, [pc, #584]	; (8010d34 <tcp_input+0x290>)
 8010aec:	695b      	ldr	r3, [r3, #20]
 8010aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010af2:	2be0      	cmp	r3, #224	; 0xe0
 8010af4:	f000 83c0 	beq.w	8011278 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010af8:	4b8d      	ldr	r3, [pc, #564]	; (8010d30 <tcp_input+0x28c>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	899b      	ldrh	r3, [r3, #12]
 8010afe:	b29b      	uxth	r3, r3
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7fc fb11 	bl	800d128 <lwip_htons>
 8010b06:	4603      	mov	r3, r0
 8010b08:	0b1b      	lsrs	r3, r3, #12
 8010b0a:	b29b      	uxth	r3, r3
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	009b      	lsls	r3, r3, #2
 8010b10:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010b12:	7cbb      	ldrb	r3, [r7, #18]
 8010b14:	2b13      	cmp	r3, #19
 8010b16:	f240 83b1 	bls.w	801127c <tcp_input+0x7d8>
 8010b1a:	7cbb      	ldrb	r3, [r7, #18]
 8010b1c:	b29a      	uxth	r2, r3
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	891b      	ldrh	r3, [r3, #8]
 8010b22:	429a      	cmp	r2, r3
 8010b24:	f200 83aa 	bhi.w	801127c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010b28:	7cbb      	ldrb	r3, [r7, #18]
 8010b2a:	b29b      	uxth	r3, r3
 8010b2c:	3b14      	subs	r3, #20
 8010b2e:	b29a      	uxth	r2, r3
 8010b30:	4b81      	ldr	r3, [pc, #516]	; (8010d38 <tcp_input+0x294>)
 8010b32:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010b34:	4b81      	ldr	r3, [pc, #516]	; (8010d3c <tcp_input+0x298>)
 8010b36:	2200      	movs	r2, #0
 8010b38:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	895a      	ldrh	r2, [r3, #10]
 8010b3e:	7cbb      	ldrb	r3, [r7, #18]
 8010b40:	b29b      	uxth	r3, r3
 8010b42:	429a      	cmp	r2, r3
 8010b44:	d309      	bcc.n	8010b5a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010b46:	4b7c      	ldr	r3, [pc, #496]	; (8010d38 <tcp_input+0x294>)
 8010b48:	881a      	ldrh	r2, [r3, #0]
 8010b4a:	4b7d      	ldr	r3, [pc, #500]	; (8010d40 <tcp_input+0x29c>)
 8010b4c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010b4e:	7cbb      	ldrb	r3, [r7, #18]
 8010b50:	4619      	mov	r1, r3
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f7fd fe64 	bl	800e820 <pbuf_remove_header>
 8010b58:	e04e      	b.n	8010bf8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d105      	bne.n	8010b6e <tcp_input+0xca>
 8010b62:	4b70      	ldr	r3, [pc, #448]	; (8010d24 <tcp_input+0x280>)
 8010b64:	22c2      	movs	r2, #194	; 0xc2
 8010b66:	4977      	ldr	r1, [pc, #476]	; (8010d44 <tcp_input+0x2a0>)
 8010b68:	4870      	ldr	r0, [pc, #448]	; (8010d2c <tcp_input+0x288>)
 8010b6a:	f00c fd59 	bl	801d620 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010b6e:	2114      	movs	r1, #20
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f7fd fe55 	bl	800e820 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	895a      	ldrh	r2, [r3, #10]
 8010b7a:	4b71      	ldr	r3, [pc, #452]	; (8010d40 <tcp_input+0x29c>)
 8010b7c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010b7e:	4b6e      	ldr	r3, [pc, #440]	; (8010d38 <tcp_input+0x294>)
 8010b80:	881a      	ldrh	r2, [r3, #0]
 8010b82:	4b6f      	ldr	r3, [pc, #444]	; (8010d40 <tcp_input+0x29c>)
 8010b84:	881b      	ldrh	r3, [r3, #0]
 8010b86:	1ad3      	subs	r3, r2, r3
 8010b88:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010b8a:	4b6d      	ldr	r3, [pc, #436]	; (8010d40 <tcp_input+0x29c>)
 8010b8c:	881b      	ldrh	r3, [r3, #0]
 8010b8e:	4619      	mov	r1, r3
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f7fd fe45 	bl	800e820 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	895b      	ldrh	r3, [r3, #10]
 8010b9c:	8a3a      	ldrh	r2, [r7, #16]
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	f200 836e 	bhi.w	8011280 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	685b      	ldr	r3, [r3, #4]
 8010baa:	4a64      	ldr	r2, [pc, #400]	; (8010d3c <tcp_input+0x298>)
 8010bac:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	8a3a      	ldrh	r2, [r7, #16]
 8010bb4:	4611      	mov	r1, r2
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f7fd fe32 	bl	800e820 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	891a      	ldrh	r2, [r3, #8]
 8010bc0:	8a3b      	ldrh	r3, [r7, #16]
 8010bc2:	1ad3      	subs	r3, r2, r3
 8010bc4:	b29a      	uxth	r2, r3
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	895b      	ldrh	r3, [r3, #10]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d005      	beq.n	8010bde <tcp_input+0x13a>
 8010bd2:	4b54      	ldr	r3, [pc, #336]	; (8010d24 <tcp_input+0x280>)
 8010bd4:	22df      	movs	r2, #223	; 0xdf
 8010bd6:	495c      	ldr	r1, [pc, #368]	; (8010d48 <tcp_input+0x2a4>)
 8010bd8:	4854      	ldr	r0, [pc, #336]	; (8010d2c <tcp_input+0x288>)
 8010bda:	f00c fd21 	bl	801d620 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	891a      	ldrh	r2, [r3, #8]
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	891b      	ldrh	r3, [r3, #8]
 8010be8:	429a      	cmp	r2, r3
 8010bea:	d005      	beq.n	8010bf8 <tcp_input+0x154>
 8010bec:	4b4d      	ldr	r3, [pc, #308]	; (8010d24 <tcp_input+0x280>)
 8010bee:	22e0      	movs	r2, #224	; 0xe0
 8010bf0:	4956      	ldr	r1, [pc, #344]	; (8010d4c <tcp_input+0x2a8>)
 8010bf2:	484e      	ldr	r0, [pc, #312]	; (8010d2c <tcp_input+0x288>)
 8010bf4:	f00c fd14 	bl	801d620 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010bf8:	4b4d      	ldr	r3, [pc, #308]	; (8010d30 <tcp_input+0x28c>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	881b      	ldrh	r3, [r3, #0]
 8010bfe:	b29b      	uxth	r3, r3
 8010c00:	4a4b      	ldr	r2, [pc, #300]	; (8010d30 <tcp_input+0x28c>)
 8010c02:	6814      	ldr	r4, [r2, #0]
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7fc fa8f 	bl	800d128 <lwip_htons>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010c0e:	4b48      	ldr	r3, [pc, #288]	; (8010d30 <tcp_input+0x28c>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	885b      	ldrh	r3, [r3, #2]
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	4a46      	ldr	r2, [pc, #280]	; (8010d30 <tcp_input+0x28c>)
 8010c18:	6814      	ldr	r4, [r2, #0]
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f7fc fa84 	bl	800d128 <lwip_htons>
 8010c20:	4603      	mov	r3, r0
 8010c22:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010c24:	4b42      	ldr	r3, [pc, #264]	; (8010d30 <tcp_input+0x28c>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	685b      	ldr	r3, [r3, #4]
 8010c2a:	4a41      	ldr	r2, [pc, #260]	; (8010d30 <tcp_input+0x28c>)
 8010c2c:	6814      	ldr	r4, [r2, #0]
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7fc fa8f 	bl	800d152 <lwip_htonl>
 8010c34:	4603      	mov	r3, r0
 8010c36:	6063      	str	r3, [r4, #4]
 8010c38:	6863      	ldr	r3, [r4, #4]
 8010c3a:	4a45      	ldr	r2, [pc, #276]	; (8010d50 <tcp_input+0x2ac>)
 8010c3c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010c3e:	4b3c      	ldr	r3, [pc, #240]	; (8010d30 <tcp_input+0x28c>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	689b      	ldr	r3, [r3, #8]
 8010c44:	4a3a      	ldr	r2, [pc, #232]	; (8010d30 <tcp_input+0x28c>)
 8010c46:	6814      	ldr	r4, [r2, #0]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7fc fa82 	bl	800d152 <lwip_htonl>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	60a3      	str	r3, [r4, #8]
 8010c52:	68a3      	ldr	r3, [r4, #8]
 8010c54:	4a3f      	ldr	r2, [pc, #252]	; (8010d54 <tcp_input+0x2b0>)
 8010c56:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010c58:	4b35      	ldr	r3, [pc, #212]	; (8010d30 <tcp_input+0x28c>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	89db      	ldrh	r3, [r3, #14]
 8010c5e:	b29b      	uxth	r3, r3
 8010c60:	4a33      	ldr	r2, [pc, #204]	; (8010d30 <tcp_input+0x28c>)
 8010c62:	6814      	ldr	r4, [r2, #0]
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7fc fa5f 	bl	800d128 <lwip_htons>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010c6e:	4b30      	ldr	r3, [pc, #192]	; (8010d30 <tcp_input+0x28c>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	899b      	ldrh	r3, [r3, #12]
 8010c74:	b29b      	uxth	r3, r3
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7fc fa56 	bl	800d128 <lwip_htons>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	b2db      	uxtb	r3, r3
 8010c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c84:	b2da      	uxtb	r2, r3
 8010c86:	4b34      	ldr	r3, [pc, #208]	; (8010d58 <tcp_input+0x2b4>)
 8010c88:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	891a      	ldrh	r2, [r3, #8]
 8010c8e:	4b33      	ldr	r3, [pc, #204]	; (8010d5c <tcp_input+0x2b8>)
 8010c90:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010c92:	4b31      	ldr	r3, [pc, #196]	; (8010d58 <tcp_input+0x2b4>)
 8010c94:	781b      	ldrb	r3, [r3, #0]
 8010c96:	f003 0303 	and.w	r3, r3, #3
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d00c      	beq.n	8010cb8 <tcp_input+0x214>
    tcplen++;
 8010c9e:	4b2f      	ldr	r3, [pc, #188]	; (8010d5c <tcp_input+0x2b8>)
 8010ca0:	881b      	ldrh	r3, [r3, #0]
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	b29a      	uxth	r2, r3
 8010ca6:	4b2d      	ldr	r3, [pc, #180]	; (8010d5c <tcp_input+0x2b8>)
 8010ca8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	891a      	ldrh	r2, [r3, #8]
 8010cae:	4b2b      	ldr	r3, [pc, #172]	; (8010d5c <tcp_input+0x2b8>)
 8010cb0:	881b      	ldrh	r3, [r3, #0]
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	f200 82e6 	bhi.w	8011284 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010cbc:	4b28      	ldr	r3, [pc, #160]	; (8010d60 <tcp_input+0x2bc>)
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	61fb      	str	r3, [r7, #28]
 8010cc2:	e09d      	b.n	8010e00 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010cc4:	69fb      	ldr	r3, [r7, #28]
 8010cc6:	7d1b      	ldrb	r3, [r3, #20]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d105      	bne.n	8010cd8 <tcp_input+0x234>
 8010ccc:	4b15      	ldr	r3, [pc, #84]	; (8010d24 <tcp_input+0x280>)
 8010cce:	22fb      	movs	r2, #251	; 0xfb
 8010cd0:	4924      	ldr	r1, [pc, #144]	; (8010d64 <tcp_input+0x2c0>)
 8010cd2:	4816      	ldr	r0, [pc, #88]	; (8010d2c <tcp_input+0x288>)
 8010cd4:	f00c fca4 	bl	801d620 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010cd8:	69fb      	ldr	r3, [r7, #28]
 8010cda:	7d1b      	ldrb	r3, [r3, #20]
 8010cdc:	2b0a      	cmp	r3, #10
 8010cde:	d105      	bne.n	8010cec <tcp_input+0x248>
 8010ce0:	4b10      	ldr	r3, [pc, #64]	; (8010d24 <tcp_input+0x280>)
 8010ce2:	22fc      	movs	r2, #252	; 0xfc
 8010ce4:	4920      	ldr	r1, [pc, #128]	; (8010d68 <tcp_input+0x2c4>)
 8010ce6:	4811      	ldr	r0, [pc, #68]	; (8010d2c <tcp_input+0x288>)
 8010ce8:	f00c fc9a 	bl	801d620 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010cec:	69fb      	ldr	r3, [r7, #28]
 8010cee:	7d1b      	ldrb	r3, [r3, #20]
 8010cf0:	2b01      	cmp	r3, #1
 8010cf2:	d105      	bne.n	8010d00 <tcp_input+0x25c>
 8010cf4:	4b0b      	ldr	r3, [pc, #44]	; (8010d24 <tcp_input+0x280>)
 8010cf6:	22fd      	movs	r2, #253	; 0xfd
 8010cf8:	491c      	ldr	r1, [pc, #112]	; (8010d6c <tcp_input+0x2c8>)
 8010cfa:	480c      	ldr	r0, [pc, #48]	; (8010d2c <tcp_input+0x288>)
 8010cfc:	f00c fc90 	bl	801d620 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010d00:	69fb      	ldr	r3, [r7, #28]
 8010d02:	7a1b      	ldrb	r3, [r3, #8]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d033      	beq.n	8010d70 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010d08:	69fb      	ldr	r3, [r7, #28]
 8010d0a:	7a1a      	ldrb	r2, [r3, #8]
 8010d0c:	4b09      	ldr	r3, [pc, #36]	; (8010d34 <tcp_input+0x290>)
 8010d0e:	685b      	ldr	r3, [r3, #4]
 8010d10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d14:	3301      	adds	r3, #1
 8010d16:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d029      	beq.n	8010d70 <tcp_input+0x2cc>
      prev = pcb;
 8010d1c:	69fb      	ldr	r3, [r7, #28]
 8010d1e:	61bb      	str	r3, [r7, #24]
      continue;
 8010d20:	e06b      	b.n	8010dfa <tcp_input+0x356>
 8010d22:	bf00      	nop
 8010d24:	080205bc 	.word	0x080205bc
 8010d28:	080205f0 	.word	0x080205f0
 8010d2c:	08020608 	.word	0x08020608
 8010d30:	200113e0 	.word	0x200113e0
 8010d34:	2000a2bc 	.word	0x2000a2bc
 8010d38:	200113e4 	.word	0x200113e4
 8010d3c:	200113e8 	.word	0x200113e8
 8010d40:	200113e6 	.word	0x200113e6
 8010d44:	08020630 	.word	0x08020630
 8010d48:	08020640 	.word	0x08020640
 8010d4c:	0802064c 	.word	0x0802064c
 8010d50:	200113f0 	.word	0x200113f0
 8010d54:	200113f4 	.word	0x200113f4
 8010d58:	200113fc 	.word	0x200113fc
 8010d5c:	200113fa 	.word	0x200113fa
 8010d60:	200113c4 	.word	0x200113c4
 8010d64:	0802066c 	.word	0x0802066c
 8010d68:	08020694 	.word	0x08020694
 8010d6c:	080206c0 	.word	0x080206c0
    }

    if (pcb->remote_port == tcphdr->src &&
 8010d70:	69fb      	ldr	r3, [r7, #28]
 8010d72:	8b1a      	ldrh	r2, [r3, #24]
 8010d74:	4b72      	ldr	r3, [pc, #456]	; (8010f40 <tcp_input+0x49c>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	881b      	ldrh	r3, [r3, #0]
 8010d7a:	b29b      	uxth	r3, r3
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d13a      	bne.n	8010df6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010d80:	69fb      	ldr	r3, [r7, #28]
 8010d82:	8ada      	ldrh	r2, [r3, #22]
 8010d84:	4b6e      	ldr	r3, [pc, #440]	; (8010f40 <tcp_input+0x49c>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	885b      	ldrh	r3, [r3, #2]
 8010d8a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d132      	bne.n	8010df6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010d90:	69fb      	ldr	r3, [r7, #28]
 8010d92:	685a      	ldr	r2, [r3, #4]
 8010d94:	4b6b      	ldr	r3, [pc, #428]	; (8010f44 <tcp_input+0x4a0>)
 8010d96:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010d98:	429a      	cmp	r2, r3
 8010d9a:	d12c      	bne.n	8010df6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010d9c:	69fb      	ldr	r3, [r7, #28]
 8010d9e:	681a      	ldr	r2, [r3, #0]
 8010da0:	4b68      	ldr	r3, [pc, #416]	; (8010f44 <tcp_input+0x4a0>)
 8010da2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010da4:	429a      	cmp	r2, r3
 8010da6:	d126      	bne.n	8010df6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010da8:	69fb      	ldr	r3, [r7, #28]
 8010daa:	68db      	ldr	r3, [r3, #12]
 8010dac:	69fa      	ldr	r2, [r7, #28]
 8010dae:	429a      	cmp	r2, r3
 8010db0:	d106      	bne.n	8010dc0 <tcp_input+0x31c>
 8010db2:	4b65      	ldr	r3, [pc, #404]	; (8010f48 <tcp_input+0x4a4>)
 8010db4:	f240 120d 	movw	r2, #269	; 0x10d
 8010db8:	4964      	ldr	r1, [pc, #400]	; (8010f4c <tcp_input+0x4a8>)
 8010dba:	4865      	ldr	r0, [pc, #404]	; (8010f50 <tcp_input+0x4ac>)
 8010dbc:	f00c fc30 	bl	801d620 <iprintf>
      if (prev != NULL) {
 8010dc0:	69bb      	ldr	r3, [r7, #24]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d00a      	beq.n	8010ddc <tcp_input+0x338>
        prev->next = pcb->next;
 8010dc6:	69fb      	ldr	r3, [r7, #28]
 8010dc8:	68da      	ldr	r2, [r3, #12]
 8010dca:	69bb      	ldr	r3, [r7, #24]
 8010dcc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010dce:	4b61      	ldr	r3, [pc, #388]	; (8010f54 <tcp_input+0x4b0>)
 8010dd0:	681a      	ldr	r2, [r3, #0]
 8010dd2:	69fb      	ldr	r3, [r7, #28]
 8010dd4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010dd6:	4a5f      	ldr	r2, [pc, #380]	; (8010f54 <tcp_input+0x4b0>)
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010ddc:	69fb      	ldr	r3, [r7, #28]
 8010dde:	68db      	ldr	r3, [r3, #12]
 8010de0:	69fa      	ldr	r2, [r7, #28]
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d111      	bne.n	8010e0a <tcp_input+0x366>
 8010de6:	4b58      	ldr	r3, [pc, #352]	; (8010f48 <tcp_input+0x4a4>)
 8010de8:	f240 1215 	movw	r2, #277	; 0x115
 8010dec:	495a      	ldr	r1, [pc, #360]	; (8010f58 <tcp_input+0x4b4>)
 8010dee:	4858      	ldr	r0, [pc, #352]	; (8010f50 <tcp_input+0x4ac>)
 8010df0:	f00c fc16 	bl	801d620 <iprintf>
      break;
 8010df4:	e009      	b.n	8010e0a <tcp_input+0x366>
    }
    prev = pcb;
 8010df6:	69fb      	ldr	r3, [r7, #28]
 8010df8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010dfa:	69fb      	ldr	r3, [r7, #28]
 8010dfc:	68db      	ldr	r3, [r3, #12]
 8010dfe:	61fb      	str	r3, [r7, #28]
 8010e00:	69fb      	ldr	r3, [r7, #28]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f47f af5e 	bne.w	8010cc4 <tcp_input+0x220>
 8010e08:	e000      	b.n	8010e0c <tcp_input+0x368>
      break;
 8010e0a:	bf00      	nop
  }

  if (pcb == NULL) {
 8010e0c:	69fb      	ldr	r3, [r7, #28]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	f040 80aa 	bne.w	8010f68 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e14:	4b51      	ldr	r3, [pc, #324]	; (8010f5c <tcp_input+0x4b8>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	61fb      	str	r3, [r7, #28]
 8010e1a:	e03f      	b.n	8010e9c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010e1c:	69fb      	ldr	r3, [r7, #28]
 8010e1e:	7d1b      	ldrb	r3, [r3, #20]
 8010e20:	2b0a      	cmp	r3, #10
 8010e22:	d006      	beq.n	8010e32 <tcp_input+0x38e>
 8010e24:	4b48      	ldr	r3, [pc, #288]	; (8010f48 <tcp_input+0x4a4>)
 8010e26:	f240 121f 	movw	r2, #287	; 0x11f
 8010e2a:	494d      	ldr	r1, [pc, #308]	; (8010f60 <tcp_input+0x4bc>)
 8010e2c:	4848      	ldr	r0, [pc, #288]	; (8010f50 <tcp_input+0x4ac>)
 8010e2e:	f00c fbf7 	bl	801d620 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e32:	69fb      	ldr	r3, [r7, #28]
 8010e34:	7a1b      	ldrb	r3, [r3, #8]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d009      	beq.n	8010e4e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010e3a:	69fb      	ldr	r3, [r7, #28]
 8010e3c:	7a1a      	ldrb	r2, [r3, #8]
 8010e3e:	4b41      	ldr	r3, [pc, #260]	; (8010f44 <tcp_input+0x4a0>)
 8010e40:	685b      	ldr	r3, [r3, #4]
 8010e42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e46:	3301      	adds	r3, #1
 8010e48:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d122      	bne.n	8010e94 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010e4e:	69fb      	ldr	r3, [r7, #28]
 8010e50:	8b1a      	ldrh	r2, [r3, #24]
 8010e52:	4b3b      	ldr	r3, [pc, #236]	; (8010f40 <tcp_input+0x49c>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	881b      	ldrh	r3, [r3, #0]
 8010e58:	b29b      	uxth	r3, r3
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d11b      	bne.n	8010e96 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010e5e:	69fb      	ldr	r3, [r7, #28]
 8010e60:	8ada      	ldrh	r2, [r3, #22]
 8010e62:	4b37      	ldr	r3, [pc, #220]	; (8010f40 <tcp_input+0x49c>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	885b      	ldrh	r3, [r3, #2]
 8010e68:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d113      	bne.n	8010e96 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010e6e:	69fb      	ldr	r3, [r7, #28]
 8010e70:	685a      	ldr	r2, [r3, #4]
 8010e72:	4b34      	ldr	r3, [pc, #208]	; (8010f44 <tcp_input+0x4a0>)
 8010e74:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010e76:	429a      	cmp	r2, r3
 8010e78:	d10d      	bne.n	8010e96 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010e7a:	69fb      	ldr	r3, [r7, #28]
 8010e7c:	681a      	ldr	r2, [r3, #0]
 8010e7e:	4b31      	ldr	r3, [pc, #196]	; (8010f44 <tcp_input+0x4a0>)
 8010e80:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d107      	bne.n	8010e96 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010e86:	69f8      	ldr	r0, [r7, #28]
 8010e88:	f000 fb56 	bl	8011538 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f7fd fd4d 	bl	800e92c <pbuf_free>
        return;
 8010e92:	e1fd      	b.n	8011290 <tcp_input+0x7ec>
        continue;
 8010e94:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e96:	69fb      	ldr	r3, [r7, #28]
 8010e98:	68db      	ldr	r3, [r3, #12]
 8010e9a:	61fb      	str	r3, [r7, #28]
 8010e9c:	69fb      	ldr	r3, [r7, #28]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d1bc      	bne.n	8010e1c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010ea6:	4b2f      	ldr	r3, [pc, #188]	; (8010f64 <tcp_input+0x4c0>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	617b      	str	r3, [r7, #20]
 8010eac:	e02a      	b.n	8010f04 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010eae:	697b      	ldr	r3, [r7, #20]
 8010eb0:	7a1b      	ldrb	r3, [r3, #8]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d00c      	beq.n	8010ed0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	7a1a      	ldrb	r2, [r3, #8]
 8010eba:	4b22      	ldr	r3, [pc, #136]	; (8010f44 <tcp_input+0x4a0>)
 8010ebc:	685b      	ldr	r3, [r3, #4]
 8010ebe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ec2:	3301      	adds	r3, #1
 8010ec4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d002      	beq.n	8010ed0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	61bb      	str	r3, [r7, #24]
        continue;
 8010ece:	e016      	b.n	8010efe <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010ed0:	697b      	ldr	r3, [r7, #20]
 8010ed2:	8ada      	ldrh	r2, [r3, #22]
 8010ed4:	4b1a      	ldr	r3, [pc, #104]	; (8010f40 <tcp_input+0x49c>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	885b      	ldrh	r3, [r3, #2]
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d10c      	bne.n	8010efa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010ee0:	697b      	ldr	r3, [r7, #20]
 8010ee2:	681a      	ldr	r2, [r3, #0]
 8010ee4:	4b17      	ldr	r3, [pc, #92]	; (8010f44 <tcp_input+0x4a0>)
 8010ee6:	695b      	ldr	r3, [r3, #20]
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	d00f      	beq.n	8010f0c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d00d      	beq.n	8010f0e <tcp_input+0x46a>
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d009      	beq.n	8010f0e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	68db      	ldr	r3, [r3, #12]
 8010f02:	617b      	str	r3, [r7, #20]
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d1d1      	bne.n	8010eae <tcp_input+0x40a>
 8010f0a:	e000      	b.n	8010f0e <tcp_input+0x46a>
            break;
 8010f0c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d029      	beq.n	8010f68 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010f14:	69bb      	ldr	r3, [r7, #24]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d00a      	beq.n	8010f30 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	68da      	ldr	r2, [r3, #12]
 8010f1e:	69bb      	ldr	r3, [r7, #24]
 8010f20:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010f22:	4b10      	ldr	r3, [pc, #64]	; (8010f64 <tcp_input+0x4c0>)
 8010f24:	681a      	ldr	r2, [r3, #0]
 8010f26:	697b      	ldr	r3, [r7, #20]
 8010f28:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010f2a:	4a0e      	ldr	r2, [pc, #56]	; (8010f64 <tcp_input+0x4c0>)
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010f30:	6978      	ldr	r0, [r7, #20]
 8010f32:	f000 fa03 	bl	801133c <tcp_listen_input>
      }
      pbuf_free(p);
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	f7fd fcf8 	bl	800e92c <pbuf_free>
      return;
 8010f3c:	e1a8      	b.n	8011290 <tcp_input+0x7ec>
 8010f3e:	bf00      	nop
 8010f40:	200113e0 	.word	0x200113e0
 8010f44:	2000a2bc 	.word	0x2000a2bc
 8010f48:	080205bc 	.word	0x080205bc
 8010f4c:	080206e8 	.word	0x080206e8
 8010f50:	08020608 	.word	0x08020608
 8010f54:	200113c4 	.word	0x200113c4
 8010f58:	08020714 	.word	0x08020714
 8010f5c:	200113c8 	.word	0x200113c8
 8010f60:	08020740 	.word	0x08020740
 8010f64:	200113c0 	.word	0x200113c0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010f68:	69fb      	ldr	r3, [r7, #28]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	f000 8158 	beq.w	8011220 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010f70:	4b95      	ldr	r3, [pc, #596]	; (80111c8 <tcp_input+0x724>)
 8010f72:	2200      	movs	r2, #0
 8010f74:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	891a      	ldrh	r2, [r3, #8]
 8010f7a:	4b93      	ldr	r3, [pc, #588]	; (80111c8 <tcp_input+0x724>)
 8010f7c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010f7e:	4a92      	ldr	r2, [pc, #584]	; (80111c8 <tcp_input+0x724>)
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010f84:	4b91      	ldr	r3, [pc, #580]	; (80111cc <tcp_input+0x728>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	4a8f      	ldr	r2, [pc, #572]	; (80111c8 <tcp_input+0x724>)
 8010f8a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010f8c:	4b90      	ldr	r3, [pc, #576]	; (80111d0 <tcp_input+0x72c>)
 8010f8e:	2200      	movs	r2, #0
 8010f90:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010f92:	4b90      	ldr	r3, [pc, #576]	; (80111d4 <tcp_input+0x730>)
 8010f94:	2200      	movs	r2, #0
 8010f96:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010f98:	4b8f      	ldr	r3, [pc, #572]	; (80111d8 <tcp_input+0x734>)
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010f9e:	4b8f      	ldr	r3, [pc, #572]	; (80111dc <tcp_input+0x738>)
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	f003 0308 	and.w	r3, r3, #8
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d006      	beq.n	8010fb8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	7b5b      	ldrb	r3, [r3, #13]
 8010fae:	f043 0301 	orr.w	r3, r3, #1
 8010fb2:	b2da      	uxtb	r2, r3
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010fb8:	69fb      	ldr	r3, [r7, #28]
 8010fba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d017      	beq.n	8010ff0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010fc0:	69f8      	ldr	r0, [r7, #28]
 8010fc2:	f7ff f85b 	bl	801007c <tcp_process_refused_data>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	f113 0f0d 	cmn.w	r3, #13
 8010fcc:	d007      	beq.n	8010fde <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010fce:	69fb      	ldr	r3, [r7, #28]
 8010fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d00c      	beq.n	8010ff0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010fd6:	4b82      	ldr	r3, [pc, #520]	; (80111e0 <tcp_input+0x73c>)
 8010fd8:	881b      	ldrh	r3, [r3, #0]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d008      	beq.n	8010ff0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010fde:	69fb      	ldr	r3, [r7, #28]
 8010fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	f040 80e3 	bne.w	80111ae <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010fe8:	69f8      	ldr	r0, [r7, #28]
 8010fea:	f003 fe05 	bl	8014bf8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010fee:	e0de      	b.n	80111ae <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010ff0:	4a7c      	ldr	r2, [pc, #496]	; (80111e4 <tcp_input+0x740>)
 8010ff2:	69fb      	ldr	r3, [r7, #28]
 8010ff4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010ff6:	69f8      	ldr	r0, [r7, #28]
 8010ff8:	f000 fb18 	bl	801162c <tcp_process>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011000:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011004:	f113 0f0d 	cmn.w	r3, #13
 8011008:	f000 80d3 	beq.w	80111b2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801100c:	4b71      	ldr	r3, [pc, #452]	; (80111d4 <tcp_input+0x730>)
 801100e:	781b      	ldrb	r3, [r3, #0]
 8011010:	f003 0308 	and.w	r3, r3, #8
 8011014:	2b00      	cmp	r3, #0
 8011016:	d015      	beq.n	8011044 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011018:	69fb      	ldr	r3, [r7, #28]
 801101a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801101e:	2b00      	cmp	r3, #0
 8011020:	d008      	beq.n	8011034 <tcp_input+0x590>
 8011022:	69fb      	ldr	r3, [r7, #28]
 8011024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011028:	69fa      	ldr	r2, [r7, #28]
 801102a:	6912      	ldr	r2, [r2, #16]
 801102c:	f06f 010d 	mvn.w	r1, #13
 8011030:	4610      	mov	r0, r2
 8011032:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011034:	69f9      	ldr	r1, [r7, #28]
 8011036:	486c      	ldr	r0, [pc, #432]	; (80111e8 <tcp_input+0x744>)
 8011038:	f7ff fbbc 	bl	80107b4 <tcp_pcb_remove>
        tcp_free(pcb);
 801103c:	69f8      	ldr	r0, [r7, #28]
 801103e:	f7fd ff21 	bl	800ee84 <tcp_free>
 8011042:	e0da      	b.n	80111fa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8011044:	2300      	movs	r3, #0
 8011046:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011048:	4b63      	ldr	r3, [pc, #396]	; (80111d8 <tcp_input+0x734>)
 801104a:	881b      	ldrh	r3, [r3, #0]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d01d      	beq.n	801108c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011050:	4b61      	ldr	r3, [pc, #388]	; (80111d8 <tcp_input+0x734>)
 8011052:	881b      	ldrh	r3, [r3, #0]
 8011054:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011056:	69fb      	ldr	r3, [r7, #28]
 8011058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801105c:	2b00      	cmp	r3, #0
 801105e:	d00a      	beq.n	8011076 <tcp_input+0x5d2>
 8011060:	69fb      	ldr	r3, [r7, #28]
 8011062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011066:	69fa      	ldr	r2, [r7, #28]
 8011068:	6910      	ldr	r0, [r2, #16]
 801106a:	89fa      	ldrh	r2, [r7, #14]
 801106c:	69f9      	ldr	r1, [r7, #28]
 801106e:	4798      	blx	r3
 8011070:	4603      	mov	r3, r0
 8011072:	74fb      	strb	r3, [r7, #19]
 8011074:	e001      	b.n	801107a <tcp_input+0x5d6>
 8011076:	2300      	movs	r3, #0
 8011078:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801107a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801107e:	f113 0f0d 	cmn.w	r3, #13
 8011082:	f000 8098 	beq.w	80111b6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011086:	4b54      	ldr	r3, [pc, #336]	; (80111d8 <tcp_input+0x734>)
 8011088:	2200      	movs	r2, #0
 801108a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801108c:	69f8      	ldr	r0, [r7, #28]
 801108e:	f000 f915 	bl	80112bc <tcp_input_delayed_close>
 8011092:	4603      	mov	r3, r0
 8011094:	2b00      	cmp	r3, #0
 8011096:	f040 8090 	bne.w	80111ba <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801109a:	4b4d      	ldr	r3, [pc, #308]	; (80111d0 <tcp_input+0x72c>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d041      	beq.n	8011126 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80110a2:	69fb      	ldr	r3, [r7, #28]
 80110a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d006      	beq.n	80110b8 <tcp_input+0x614>
 80110aa:	4b50      	ldr	r3, [pc, #320]	; (80111ec <tcp_input+0x748>)
 80110ac:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80110b0:	494f      	ldr	r1, [pc, #316]	; (80111f0 <tcp_input+0x74c>)
 80110b2:	4850      	ldr	r0, [pc, #320]	; (80111f4 <tcp_input+0x750>)
 80110b4:	f00c fab4 	bl	801d620 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80110b8:	69fb      	ldr	r3, [r7, #28]
 80110ba:	8b5b      	ldrh	r3, [r3, #26]
 80110bc:	f003 0310 	and.w	r3, r3, #16
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d008      	beq.n	80110d6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80110c4:	4b42      	ldr	r3, [pc, #264]	; (80111d0 <tcp_input+0x72c>)
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	4618      	mov	r0, r3
 80110ca:	f7fd fc2f 	bl	800e92c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80110ce:	69f8      	ldr	r0, [r7, #28]
 80110d0:	f7fe fa1c 	bl	800f50c <tcp_abort>
            goto aborted;
 80110d4:	e091      	b.n	80111fa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80110d6:	69fb      	ldr	r3, [r7, #28]
 80110d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d00c      	beq.n	80110fa <tcp_input+0x656>
 80110e0:	69fb      	ldr	r3, [r7, #28]
 80110e2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80110e6:	69fb      	ldr	r3, [r7, #28]
 80110e8:	6918      	ldr	r0, [r3, #16]
 80110ea:	4b39      	ldr	r3, [pc, #228]	; (80111d0 <tcp_input+0x72c>)
 80110ec:	681a      	ldr	r2, [r3, #0]
 80110ee:	2300      	movs	r3, #0
 80110f0:	69f9      	ldr	r1, [r7, #28]
 80110f2:	47a0      	blx	r4
 80110f4:	4603      	mov	r3, r0
 80110f6:	74fb      	strb	r3, [r7, #19]
 80110f8:	e008      	b.n	801110c <tcp_input+0x668>
 80110fa:	4b35      	ldr	r3, [pc, #212]	; (80111d0 <tcp_input+0x72c>)
 80110fc:	681a      	ldr	r2, [r3, #0]
 80110fe:	2300      	movs	r3, #0
 8011100:	69f9      	ldr	r1, [r7, #28]
 8011102:	2000      	movs	r0, #0
 8011104:	f7ff f890 	bl	8010228 <tcp_recv_null>
 8011108:	4603      	mov	r3, r0
 801110a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801110c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011110:	f113 0f0d 	cmn.w	r3, #13
 8011114:	d053      	beq.n	80111be <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011116:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d003      	beq.n	8011126 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801111e:	4b2c      	ldr	r3, [pc, #176]	; (80111d0 <tcp_input+0x72c>)
 8011120:	681a      	ldr	r2, [r3, #0]
 8011122:	69fb      	ldr	r3, [r7, #28]
 8011124:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011126:	4b2b      	ldr	r3, [pc, #172]	; (80111d4 <tcp_input+0x730>)
 8011128:	781b      	ldrb	r3, [r3, #0]
 801112a:	f003 0320 	and.w	r3, r3, #32
 801112e:	2b00      	cmp	r3, #0
 8011130:	d030      	beq.n	8011194 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8011132:	69fb      	ldr	r3, [r7, #28]
 8011134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011136:	2b00      	cmp	r3, #0
 8011138:	d009      	beq.n	801114e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801113a:	69fb      	ldr	r3, [r7, #28]
 801113c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801113e:	7b5a      	ldrb	r2, [r3, #13]
 8011140:	69fb      	ldr	r3, [r7, #28]
 8011142:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011144:	f042 0220 	orr.w	r2, r2, #32
 8011148:	b2d2      	uxtb	r2, r2
 801114a:	735a      	strb	r2, [r3, #13]
 801114c:	e022      	b.n	8011194 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801114e:	69fb      	ldr	r3, [r7, #28]
 8011150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011152:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011156:	d005      	beq.n	8011164 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8011158:	69fb      	ldr	r3, [r7, #28]
 801115a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801115c:	3301      	adds	r3, #1
 801115e:	b29a      	uxth	r2, r3
 8011160:	69fb      	ldr	r3, [r7, #28]
 8011162:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011164:	69fb      	ldr	r3, [r7, #28]
 8011166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801116a:	2b00      	cmp	r3, #0
 801116c:	d00b      	beq.n	8011186 <tcp_input+0x6e2>
 801116e:	69fb      	ldr	r3, [r7, #28]
 8011170:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011174:	69fb      	ldr	r3, [r7, #28]
 8011176:	6918      	ldr	r0, [r3, #16]
 8011178:	2300      	movs	r3, #0
 801117a:	2200      	movs	r2, #0
 801117c:	69f9      	ldr	r1, [r7, #28]
 801117e:	47a0      	blx	r4
 8011180:	4603      	mov	r3, r0
 8011182:	74fb      	strb	r3, [r7, #19]
 8011184:	e001      	b.n	801118a <tcp_input+0x6e6>
 8011186:	2300      	movs	r3, #0
 8011188:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801118a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801118e:	f113 0f0d 	cmn.w	r3, #13
 8011192:	d016      	beq.n	80111c2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011194:	4b13      	ldr	r3, [pc, #76]	; (80111e4 <tcp_input+0x740>)
 8011196:	2200      	movs	r2, #0
 8011198:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801119a:	69f8      	ldr	r0, [r7, #28]
 801119c:	f000 f88e 	bl	80112bc <tcp_input_delayed_close>
 80111a0:	4603      	mov	r3, r0
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d128      	bne.n	80111f8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80111a6:	69f8      	ldr	r0, [r7, #28]
 80111a8:	f002 ff20 	bl	8013fec <tcp_output>
 80111ac:	e025      	b.n	80111fa <tcp_input+0x756>
        goto aborted;
 80111ae:	bf00      	nop
 80111b0:	e023      	b.n	80111fa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80111b2:	bf00      	nop
 80111b4:	e021      	b.n	80111fa <tcp_input+0x756>
              goto aborted;
 80111b6:	bf00      	nop
 80111b8:	e01f      	b.n	80111fa <tcp_input+0x756>
          goto aborted;
 80111ba:	bf00      	nop
 80111bc:	e01d      	b.n	80111fa <tcp_input+0x756>
            goto aborted;
 80111be:	bf00      	nop
 80111c0:	e01b      	b.n	80111fa <tcp_input+0x756>
              goto aborted;
 80111c2:	bf00      	nop
 80111c4:	e019      	b.n	80111fa <tcp_input+0x756>
 80111c6:	bf00      	nop
 80111c8:	200113d0 	.word	0x200113d0
 80111cc:	200113e0 	.word	0x200113e0
 80111d0:	20011400 	.word	0x20011400
 80111d4:	200113fd 	.word	0x200113fd
 80111d8:	200113f8 	.word	0x200113f8
 80111dc:	200113fc 	.word	0x200113fc
 80111e0:	200113fa 	.word	0x200113fa
 80111e4:	20011404 	.word	0x20011404
 80111e8:	200113c4 	.word	0x200113c4
 80111ec:	080205bc 	.word	0x080205bc
 80111f0:	08020770 	.word	0x08020770
 80111f4:	08020608 	.word	0x08020608
          goto aborted;
 80111f8:	bf00      	nop
    tcp_input_pcb = NULL;
 80111fa:	4b27      	ldr	r3, [pc, #156]	; (8011298 <tcp_input+0x7f4>)
 80111fc:	2200      	movs	r2, #0
 80111fe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011200:	4b26      	ldr	r3, [pc, #152]	; (801129c <tcp_input+0x7f8>)
 8011202:	2200      	movs	r2, #0
 8011204:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011206:	4b26      	ldr	r3, [pc, #152]	; (80112a0 <tcp_input+0x7fc>)
 8011208:	685b      	ldr	r3, [r3, #4]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d03f      	beq.n	801128e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801120e:	4b24      	ldr	r3, [pc, #144]	; (80112a0 <tcp_input+0x7fc>)
 8011210:	685b      	ldr	r3, [r3, #4]
 8011212:	4618      	mov	r0, r3
 8011214:	f7fd fb8a 	bl	800e92c <pbuf_free>
      inseg.p = NULL;
 8011218:	4b21      	ldr	r3, [pc, #132]	; (80112a0 <tcp_input+0x7fc>)
 801121a:	2200      	movs	r2, #0
 801121c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801121e:	e036      	b.n	801128e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011220:	4b20      	ldr	r3, [pc, #128]	; (80112a4 <tcp_input+0x800>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	899b      	ldrh	r3, [r3, #12]
 8011226:	b29b      	uxth	r3, r3
 8011228:	4618      	mov	r0, r3
 801122a:	f7fb ff7d 	bl	800d128 <lwip_htons>
 801122e:	4603      	mov	r3, r0
 8011230:	b2db      	uxtb	r3, r3
 8011232:	f003 0304 	and.w	r3, r3, #4
 8011236:	2b00      	cmp	r3, #0
 8011238:	d118      	bne.n	801126c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801123a:	4b1b      	ldr	r3, [pc, #108]	; (80112a8 <tcp_input+0x804>)
 801123c:	6819      	ldr	r1, [r3, #0]
 801123e:	4b1b      	ldr	r3, [pc, #108]	; (80112ac <tcp_input+0x808>)
 8011240:	881b      	ldrh	r3, [r3, #0]
 8011242:	461a      	mov	r2, r3
 8011244:	4b1a      	ldr	r3, [pc, #104]	; (80112b0 <tcp_input+0x80c>)
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801124a:	4b16      	ldr	r3, [pc, #88]	; (80112a4 <tcp_input+0x800>)
 801124c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801124e:	885b      	ldrh	r3, [r3, #2]
 8011250:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011252:	4a14      	ldr	r2, [pc, #80]	; (80112a4 <tcp_input+0x800>)
 8011254:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011256:	8812      	ldrh	r2, [r2, #0]
 8011258:	b292      	uxth	r2, r2
 801125a:	9202      	str	r2, [sp, #8]
 801125c:	9301      	str	r3, [sp, #4]
 801125e:	4b15      	ldr	r3, [pc, #84]	; (80112b4 <tcp_input+0x810>)
 8011260:	9300      	str	r3, [sp, #0]
 8011262:	4b15      	ldr	r3, [pc, #84]	; (80112b8 <tcp_input+0x814>)
 8011264:	4602      	mov	r2, r0
 8011266:	2000      	movs	r0, #0
 8011268:	f003 fc74 	bl	8014b54 <tcp_rst>
    pbuf_free(p);
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f7fd fb5d 	bl	800e92c <pbuf_free>
  return;
 8011272:	e00c      	b.n	801128e <tcp_input+0x7ea>
    goto dropped;
 8011274:	bf00      	nop
 8011276:	e006      	b.n	8011286 <tcp_input+0x7e2>
    goto dropped;
 8011278:	bf00      	nop
 801127a:	e004      	b.n	8011286 <tcp_input+0x7e2>
    goto dropped;
 801127c:	bf00      	nop
 801127e:	e002      	b.n	8011286 <tcp_input+0x7e2>
      goto dropped;
 8011280:	bf00      	nop
 8011282:	e000      	b.n	8011286 <tcp_input+0x7e2>
      goto dropped;
 8011284:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011286:	6878      	ldr	r0, [r7, #4]
 8011288:	f7fd fb50 	bl	800e92c <pbuf_free>
 801128c:	e000      	b.n	8011290 <tcp_input+0x7ec>
  return;
 801128e:	bf00      	nop
}
 8011290:	3724      	adds	r7, #36	; 0x24
 8011292:	46bd      	mov	sp, r7
 8011294:	bd90      	pop	{r4, r7, pc}
 8011296:	bf00      	nop
 8011298:	20011404 	.word	0x20011404
 801129c:	20011400 	.word	0x20011400
 80112a0:	200113d0 	.word	0x200113d0
 80112a4:	200113e0 	.word	0x200113e0
 80112a8:	200113f4 	.word	0x200113f4
 80112ac:	200113fa 	.word	0x200113fa
 80112b0:	200113f0 	.word	0x200113f0
 80112b4:	2000a2cc 	.word	0x2000a2cc
 80112b8:	2000a2d0 	.word	0x2000a2d0

080112bc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b082      	sub	sp, #8
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d106      	bne.n	80112d8 <tcp_input_delayed_close+0x1c>
 80112ca:	4b17      	ldr	r3, [pc, #92]	; (8011328 <tcp_input_delayed_close+0x6c>)
 80112cc:	f240 225a 	movw	r2, #602	; 0x25a
 80112d0:	4916      	ldr	r1, [pc, #88]	; (801132c <tcp_input_delayed_close+0x70>)
 80112d2:	4817      	ldr	r0, [pc, #92]	; (8011330 <tcp_input_delayed_close+0x74>)
 80112d4:	f00c f9a4 	bl	801d620 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80112d8:	4b16      	ldr	r3, [pc, #88]	; (8011334 <tcp_input_delayed_close+0x78>)
 80112da:	781b      	ldrb	r3, [r3, #0]
 80112dc:	f003 0310 	and.w	r3, r3, #16
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d01c      	beq.n	801131e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	8b5b      	ldrh	r3, [r3, #26]
 80112e8:	f003 0310 	and.w	r3, r3, #16
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d10d      	bne.n	801130c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d008      	beq.n	801130c <tcp_input_delayed_close+0x50>
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011300:	687a      	ldr	r2, [r7, #4]
 8011302:	6912      	ldr	r2, [r2, #16]
 8011304:	f06f 010e 	mvn.w	r1, #14
 8011308:	4610      	mov	r0, r2
 801130a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801130c:	6879      	ldr	r1, [r7, #4]
 801130e:	480a      	ldr	r0, [pc, #40]	; (8011338 <tcp_input_delayed_close+0x7c>)
 8011310:	f7ff fa50 	bl	80107b4 <tcp_pcb_remove>
    tcp_free(pcb);
 8011314:	6878      	ldr	r0, [r7, #4]
 8011316:	f7fd fdb5 	bl	800ee84 <tcp_free>
    return 1;
 801131a:	2301      	movs	r3, #1
 801131c:	e000      	b.n	8011320 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801131e:	2300      	movs	r3, #0
}
 8011320:	4618      	mov	r0, r3
 8011322:	3708      	adds	r7, #8
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}
 8011328:	080205bc 	.word	0x080205bc
 801132c:	0802078c 	.word	0x0802078c
 8011330:	08020608 	.word	0x08020608
 8011334:	200113fd 	.word	0x200113fd
 8011338:	200113c4 	.word	0x200113c4

0801133c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801133c:	b590      	push	{r4, r7, lr}
 801133e:	b08b      	sub	sp, #44	; 0x2c
 8011340:	af04      	add	r7, sp, #16
 8011342:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011344:	4b6f      	ldr	r3, [pc, #444]	; (8011504 <tcp_listen_input+0x1c8>)
 8011346:	781b      	ldrb	r3, [r3, #0]
 8011348:	f003 0304 	and.w	r3, r3, #4
 801134c:	2b00      	cmp	r3, #0
 801134e:	f040 80d2 	bne.w	80114f6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d106      	bne.n	8011366 <tcp_listen_input+0x2a>
 8011358:	4b6b      	ldr	r3, [pc, #428]	; (8011508 <tcp_listen_input+0x1cc>)
 801135a:	f240 2281 	movw	r2, #641	; 0x281
 801135e:	496b      	ldr	r1, [pc, #428]	; (801150c <tcp_listen_input+0x1d0>)
 8011360:	486b      	ldr	r0, [pc, #428]	; (8011510 <tcp_listen_input+0x1d4>)
 8011362:	f00c f95d 	bl	801d620 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011366:	4b67      	ldr	r3, [pc, #412]	; (8011504 <tcp_listen_input+0x1c8>)
 8011368:	781b      	ldrb	r3, [r3, #0]
 801136a:	f003 0310 	and.w	r3, r3, #16
 801136e:	2b00      	cmp	r3, #0
 8011370:	d019      	beq.n	80113a6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011372:	4b68      	ldr	r3, [pc, #416]	; (8011514 <tcp_listen_input+0x1d8>)
 8011374:	6819      	ldr	r1, [r3, #0]
 8011376:	4b68      	ldr	r3, [pc, #416]	; (8011518 <tcp_listen_input+0x1dc>)
 8011378:	881b      	ldrh	r3, [r3, #0]
 801137a:	461a      	mov	r2, r3
 801137c:	4b67      	ldr	r3, [pc, #412]	; (801151c <tcp_listen_input+0x1e0>)
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011382:	4b67      	ldr	r3, [pc, #412]	; (8011520 <tcp_listen_input+0x1e4>)
 8011384:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011386:	885b      	ldrh	r3, [r3, #2]
 8011388:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801138a:	4a65      	ldr	r2, [pc, #404]	; (8011520 <tcp_listen_input+0x1e4>)
 801138c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801138e:	8812      	ldrh	r2, [r2, #0]
 8011390:	b292      	uxth	r2, r2
 8011392:	9202      	str	r2, [sp, #8]
 8011394:	9301      	str	r3, [sp, #4]
 8011396:	4b63      	ldr	r3, [pc, #396]	; (8011524 <tcp_listen_input+0x1e8>)
 8011398:	9300      	str	r3, [sp, #0]
 801139a:	4b63      	ldr	r3, [pc, #396]	; (8011528 <tcp_listen_input+0x1ec>)
 801139c:	4602      	mov	r2, r0
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	f003 fbd8 	bl	8014b54 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80113a4:	e0a9      	b.n	80114fa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80113a6:	4b57      	ldr	r3, [pc, #348]	; (8011504 <tcp_listen_input+0x1c8>)
 80113a8:	781b      	ldrb	r3, [r3, #0]
 80113aa:	f003 0302 	and.w	r3, r3, #2
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	f000 80a3 	beq.w	80114fa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	7d5b      	ldrb	r3, [r3, #21]
 80113b8:	4618      	mov	r0, r3
 80113ba:	f7ff f859 	bl	8010470 <tcp_alloc>
 80113be:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80113c0:	697b      	ldr	r3, [r7, #20]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d111      	bne.n	80113ea <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	699b      	ldr	r3, [r3, #24]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d00a      	beq.n	80113e4 <tcp_listen_input+0xa8>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	699b      	ldr	r3, [r3, #24]
 80113d2:	687a      	ldr	r2, [r7, #4]
 80113d4:	6910      	ldr	r0, [r2, #16]
 80113d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80113da:	2100      	movs	r1, #0
 80113dc:	4798      	blx	r3
 80113de:	4603      	mov	r3, r0
 80113e0:	73bb      	strb	r3, [r7, #14]
      return;
 80113e2:	e08b      	b.n	80114fc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80113e4:	23f0      	movs	r3, #240	; 0xf0
 80113e6:	73bb      	strb	r3, [r7, #14]
      return;
 80113e8:	e088      	b.n	80114fc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80113ea:	4b50      	ldr	r3, [pc, #320]	; (801152c <tcp_listen_input+0x1f0>)
 80113ec:	695a      	ldr	r2, [r3, #20]
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80113f2:	4b4e      	ldr	r3, [pc, #312]	; (801152c <tcp_listen_input+0x1f0>)
 80113f4:	691a      	ldr	r2, [r3, #16]
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	8ada      	ldrh	r2, [r3, #22]
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011402:	4b47      	ldr	r3, [pc, #284]	; (8011520 <tcp_listen_input+0x1e4>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	881b      	ldrh	r3, [r3, #0]
 8011408:	b29a      	uxth	r2, r3
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	2203      	movs	r2, #3
 8011412:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011414:	4b41      	ldr	r3, [pc, #260]	; (801151c <tcp_listen_input+0x1e0>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	1c5a      	adds	r2, r3, #1
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011426:	6978      	ldr	r0, [r7, #20]
 8011428:	f7ff fa58 	bl	80108dc <tcp_next_iss>
 801142c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	693a      	ldr	r2, [r7, #16]
 8011432:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	693a      	ldr	r2, [r7, #16]
 8011438:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	693a      	ldr	r2, [r7, #16]
 801143e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	693a      	ldr	r2, [r7, #16]
 8011444:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011446:	4b35      	ldr	r3, [pc, #212]	; (801151c <tcp_listen_input+0x1e0>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	1e5a      	subs	r2, r3, #1
 801144c:	697b      	ldr	r3, [r7, #20]
 801144e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	691a      	ldr	r2, [r3, #16]
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	687a      	ldr	r2, [r7, #4]
 801145c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	7a5b      	ldrb	r3, [r3, #9]
 8011462:	f003 030c 	and.w	r3, r3, #12
 8011466:	b2da      	uxtb	r2, r3
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	7a1a      	ldrb	r2, [r3, #8]
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011474:	4b2e      	ldr	r3, [pc, #184]	; (8011530 <tcp_listen_input+0x1f4>)
 8011476:	681a      	ldr	r2, [r3, #0]
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	60da      	str	r2, [r3, #12]
 801147c:	4a2c      	ldr	r2, [pc, #176]	; (8011530 <tcp_listen_input+0x1f4>)
 801147e:	697b      	ldr	r3, [r7, #20]
 8011480:	6013      	str	r3, [r2, #0]
 8011482:	f003 fd29 	bl	8014ed8 <tcp_timer_needed>
 8011486:	4b2b      	ldr	r3, [pc, #172]	; (8011534 <tcp_listen_input+0x1f8>)
 8011488:	2201      	movs	r2, #1
 801148a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801148c:	6978      	ldr	r0, [r7, #20]
 801148e:	f001 fd8f 	bl	8012fb0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011492:	4b23      	ldr	r3, [pc, #140]	; (8011520 <tcp_listen_input+0x1e4>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	89db      	ldrh	r3, [r3, #14]
 8011498:	b29a      	uxth	r2, r3
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80114b0:	697b      	ldr	r3, [r7, #20]
 80114b2:	3304      	adds	r3, #4
 80114b4:	4618      	mov	r0, r3
 80114b6:	f005 fad1 	bl	8016a5c <ip4_route>
 80114ba:	4601      	mov	r1, r0
 80114bc:	697b      	ldr	r3, [r7, #20]
 80114be:	3304      	adds	r3, #4
 80114c0:	461a      	mov	r2, r3
 80114c2:	4620      	mov	r0, r4
 80114c4:	f7ff fa30 	bl	8010928 <tcp_eff_send_mss_netif>
 80114c8:	4603      	mov	r3, r0
 80114ca:	461a      	mov	r2, r3
 80114cc:	697b      	ldr	r3, [r7, #20]
 80114ce:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80114d0:	2112      	movs	r1, #18
 80114d2:	6978      	ldr	r0, [r7, #20]
 80114d4:	f002 fc9c 	bl	8013e10 <tcp_enqueue_flags>
 80114d8:	4603      	mov	r3, r0
 80114da:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80114dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d004      	beq.n	80114ee <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80114e4:	2100      	movs	r1, #0
 80114e6:	6978      	ldr	r0, [r7, #20]
 80114e8:	f7fd ff52 	bl	800f390 <tcp_abandon>
      return;
 80114ec:	e006      	b.n	80114fc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80114ee:	6978      	ldr	r0, [r7, #20]
 80114f0:	f002 fd7c 	bl	8013fec <tcp_output>
  return;
 80114f4:	e001      	b.n	80114fa <tcp_listen_input+0x1be>
    return;
 80114f6:	bf00      	nop
 80114f8:	e000      	b.n	80114fc <tcp_listen_input+0x1c0>
  return;
 80114fa:	bf00      	nop
}
 80114fc:	371c      	adds	r7, #28
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd90      	pop	{r4, r7, pc}
 8011502:	bf00      	nop
 8011504:	200113fc 	.word	0x200113fc
 8011508:	080205bc 	.word	0x080205bc
 801150c:	080207b4 	.word	0x080207b4
 8011510:	08020608 	.word	0x08020608
 8011514:	200113f4 	.word	0x200113f4
 8011518:	200113fa 	.word	0x200113fa
 801151c:	200113f0 	.word	0x200113f0
 8011520:	200113e0 	.word	0x200113e0
 8011524:	2000a2cc 	.word	0x2000a2cc
 8011528:	2000a2d0 	.word	0x2000a2d0
 801152c:	2000a2bc 	.word	0x2000a2bc
 8011530:	200113c4 	.word	0x200113c4
 8011534:	200113cc 	.word	0x200113cc

08011538 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b086      	sub	sp, #24
 801153c:	af04      	add	r7, sp, #16
 801153e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011540:	4b2f      	ldr	r3, [pc, #188]	; (8011600 <tcp_timewait_input+0xc8>)
 8011542:	781b      	ldrb	r3, [r3, #0]
 8011544:	f003 0304 	and.w	r3, r3, #4
 8011548:	2b00      	cmp	r3, #0
 801154a:	d153      	bne.n	80115f4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d106      	bne.n	8011560 <tcp_timewait_input+0x28>
 8011552:	4b2c      	ldr	r3, [pc, #176]	; (8011604 <tcp_timewait_input+0xcc>)
 8011554:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011558:	492b      	ldr	r1, [pc, #172]	; (8011608 <tcp_timewait_input+0xd0>)
 801155a:	482c      	ldr	r0, [pc, #176]	; (801160c <tcp_timewait_input+0xd4>)
 801155c:	f00c f860 	bl	801d620 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011560:	4b27      	ldr	r3, [pc, #156]	; (8011600 <tcp_timewait_input+0xc8>)
 8011562:	781b      	ldrb	r3, [r3, #0]
 8011564:	f003 0302 	and.w	r3, r3, #2
 8011568:	2b00      	cmp	r3, #0
 801156a:	d02a      	beq.n	80115c2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801156c:	4b28      	ldr	r3, [pc, #160]	; (8011610 <tcp_timewait_input+0xd8>)
 801156e:	681a      	ldr	r2, [r3, #0]
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011574:	1ad3      	subs	r3, r2, r3
 8011576:	2b00      	cmp	r3, #0
 8011578:	db2d      	blt.n	80115d6 <tcp_timewait_input+0x9e>
 801157a:	4b25      	ldr	r3, [pc, #148]	; (8011610 <tcp_timewait_input+0xd8>)
 801157c:	681a      	ldr	r2, [r3, #0]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011582:	6879      	ldr	r1, [r7, #4]
 8011584:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011586:	440b      	add	r3, r1
 8011588:	1ad3      	subs	r3, r2, r3
 801158a:	2b00      	cmp	r3, #0
 801158c:	dc23      	bgt.n	80115d6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801158e:	4b21      	ldr	r3, [pc, #132]	; (8011614 <tcp_timewait_input+0xdc>)
 8011590:	6819      	ldr	r1, [r3, #0]
 8011592:	4b21      	ldr	r3, [pc, #132]	; (8011618 <tcp_timewait_input+0xe0>)
 8011594:	881b      	ldrh	r3, [r3, #0]
 8011596:	461a      	mov	r2, r3
 8011598:	4b1d      	ldr	r3, [pc, #116]	; (8011610 <tcp_timewait_input+0xd8>)
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801159e:	4b1f      	ldr	r3, [pc, #124]	; (801161c <tcp_timewait_input+0xe4>)
 80115a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115a2:	885b      	ldrh	r3, [r3, #2]
 80115a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80115a6:	4a1d      	ldr	r2, [pc, #116]	; (801161c <tcp_timewait_input+0xe4>)
 80115a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115aa:	8812      	ldrh	r2, [r2, #0]
 80115ac:	b292      	uxth	r2, r2
 80115ae:	9202      	str	r2, [sp, #8]
 80115b0:	9301      	str	r3, [sp, #4]
 80115b2:	4b1b      	ldr	r3, [pc, #108]	; (8011620 <tcp_timewait_input+0xe8>)
 80115b4:	9300      	str	r3, [sp, #0]
 80115b6:	4b1b      	ldr	r3, [pc, #108]	; (8011624 <tcp_timewait_input+0xec>)
 80115b8:	4602      	mov	r2, r0
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f003 faca 	bl	8014b54 <tcp_rst>
      return;
 80115c0:	e01b      	b.n	80115fa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80115c2:	4b0f      	ldr	r3, [pc, #60]	; (8011600 <tcp_timewait_input+0xc8>)
 80115c4:	781b      	ldrb	r3, [r3, #0]
 80115c6:	f003 0301 	and.w	r3, r3, #1
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d003      	beq.n	80115d6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80115ce:	4b16      	ldr	r3, [pc, #88]	; (8011628 <tcp_timewait_input+0xf0>)
 80115d0:	681a      	ldr	r2, [r3, #0]
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80115d6:	4b10      	ldr	r3, [pc, #64]	; (8011618 <tcp_timewait_input+0xe0>)
 80115d8:	881b      	ldrh	r3, [r3, #0]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d00c      	beq.n	80115f8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	8b5b      	ldrh	r3, [r3, #26]
 80115e2:	f043 0302 	orr.w	r3, r3, #2
 80115e6:	b29a      	uxth	r2, r3
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f002 fcfd 	bl	8013fec <tcp_output>
  }
  return;
 80115f2:	e001      	b.n	80115f8 <tcp_timewait_input+0xc0>
    return;
 80115f4:	bf00      	nop
 80115f6:	e000      	b.n	80115fa <tcp_timewait_input+0xc2>
  return;
 80115f8:	bf00      	nop
}
 80115fa:	3708      	adds	r7, #8
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd80      	pop	{r7, pc}
 8011600:	200113fc 	.word	0x200113fc
 8011604:	080205bc 	.word	0x080205bc
 8011608:	080207d4 	.word	0x080207d4
 801160c:	08020608 	.word	0x08020608
 8011610:	200113f0 	.word	0x200113f0
 8011614:	200113f4 	.word	0x200113f4
 8011618:	200113fa 	.word	0x200113fa
 801161c:	200113e0 	.word	0x200113e0
 8011620:	2000a2cc 	.word	0x2000a2cc
 8011624:	2000a2d0 	.word	0x2000a2d0
 8011628:	200113b8 	.word	0x200113b8

0801162c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801162c:	b590      	push	{r4, r7, lr}
 801162e:	b08d      	sub	sp, #52	; 0x34
 8011630:	af04      	add	r7, sp, #16
 8011632:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011634:	2300      	movs	r3, #0
 8011636:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011638:	2300      	movs	r3, #0
 801163a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d106      	bne.n	8011650 <tcp_process+0x24>
 8011642:	4b9d      	ldr	r3, [pc, #628]	; (80118b8 <tcp_process+0x28c>)
 8011644:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011648:	499c      	ldr	r1, [pc, #624]	; (80118bc <tcp_process+0x290>)
 801164a:	489d      	ldr	r0, [pc, #628]	; (80118c0 <tcp_process+0x294>)
 801164c:	f00b ffe8 	bl	801d620 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011650:	4b9c      	ldr	r3, [pc, #624]	; (80118c4 <tcp_process+0x298>)
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	f003 0304 	and.w	r3, r3, #4
 8011658:	2b00      	cmp	r3, #0
 801165a:	d04e      	beq.n	80116fa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	7d1b      	ldrb	r3, [r3, #20]
 8011660:	2b02      	cmp	r3, #2
 8011662:	d108      	bne.n	8011676 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011668:	4b97      	ldr	r3, [pc, #604]	; (80118c8 <tcp_process+0x29c>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	429a      	cmp	r2, r3
 801166e:	d123      	bne.n	80116b8 <tcp_process+0x8c>
        acceptable = 1;
 8011670:	2301      	movs	r3, #1
 8011672:	76fb      	strb	r3, [r7, #27]
 8011674:	e020      	b.n	80116b8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801167a:	4b94      	ldr	r3, [pc, #592]	; (80118cc <tcp_process+0x2a0>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	429a      	cmp	r2, r3
 8011680:	d102      	bne.n	8011688 <tcp_process+0x5c>
        acceptable = 1;
 8011682:	2301      	movs	r3, #1
 8011684:	76fb      	strb	r3, [r7, #27]
 8011686:	e017      	b.n	80116b8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011688:	4b90      	ldr	r3, [pc, #576]	; (80118cc <tcp_process+0x2a0>)
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011690:	1ad3      	subs	r3, r2, r3
 8011692:	2b00      	cmp	r3, #0
 8011694:	db10      	blt.n	80116b8 <tcp_process+0x8c>
 8011696:	4b8d      	ldr	r3, [pc, #564]	; (80118cc <tcp_process+0x2a0>)
 8011698:	681a      	ldr	r2, [r3, #0]
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801169e:	6879      	ldr	r1, [r7, #4]
 80116a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80116a2:	440b      	add	r3, r1
 80116a4:	1ad3      	subs	r3, r2, r3
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	dc06      	bgt.n	80116b8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	8b5b      	ldrh	r3, [r3, #26]
 80116ae:	f043 0302 	orr.w	r3, r3, #2
 80116b2:	b29a      	uxth	r2, r3
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80116b8:	7efb      	ldrb	r3, [r7, #27]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d01b      	beq.n	80116f6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	7d1b      	ldrb	r3, [r3, #20]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d106      	bne.n	80116d4 <tcp_process+0xa8>
 80116c6:	4b7c      	ldr	r3, [pc, #496]	; (80118b8 <tcp_process+0x28c>)
 80116c8:	f44f 724e 	mov.w	r2, #824	; 0x338
 80116cc:	4980      	ldr	r1, [pc, #512]	; (80118d0 <tcp_process+0x2a4>)
 80116ce:	487c      	ldr	r0, [pc, #496]	; (80118c0 <tcp_process+0x294>)
 80116d0:	f00b ffa6 	bl	801d620 <iprintf>
      recv_flags |= TF_RESET;
 80116d4:	4b7f      	ldr	r3, [pc, #508]	; (80118d4 <tcp_process+0x2a8>)
 80116d6:	781b      	ldrb	r3, [r3, #0]
 80116d8:	f043 0308 	orr.w	r3, r3, #8
 80116dc:	b2da      	uxtb	r2, r3
 80116de:	4b7d      	ldr	r3, [pc, #500]	; (80118d4 <tcp_process+0x2a8>)
 80116e0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	8b5b      	ldrh	r3, [r3, #26]
 80116e6:	f023 0301 	bic.w	r3, r3, #1
 80116ea:	b29a      	uxth	r2, r3
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80116f0:	f06f 030d 	mvn.w	r3, #13
 80116f4:	e37a      	b.n	8011dec <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80116f6:	2300      	movs	r3, #0
 80116f8:	e378      	b.n	8011dec <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80116fa:	4b72      	ldr	r3, [pc, #456]	; (80118c4 <tcp_process+0x298>)
 80116fc:	781b      	ldrb	r3, [r3, #0]
 80116fe:	f003 0302 	and.w	r3, r3, #2
 8011702:	2b00      	cmp	r3, #0
 8011704:	d010      	beq.n	8011728 <tcp_process+0xfc>
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	7d1b      	ldrb	r3, [r3, #20]
 801170a:	2b02      	cmp	r3, #2
 801170c:	d00c      	beq.n	8011728 <tcp_process+0xfc>
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	7d1b      	ldrb	r3, [r3, #20]
 8011712:	2b03      	cmp	r3, #3
 8011714:	d008      	beq.n	8011728 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	8b5b      	ldrh	r3, [r3, #26]
 801171a:	f043 0302 	orr.w	r3, r3, #2
 801171e:	b29a      	uxth	r2, r3
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011724:	2300      	movs	r3, #0
 8011726:	e361      	b.n	8011dec <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	8b5b      	ldrh	r3, [r3, #26]
 801172c:	f003 0310 	and.w	r3, r3, #16
 8011730:	2b00      	cmp	r3, #0
 8011732:	d103      	bne.n	801173c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011734:	4b68      	ldr	r3, [pc, #416]	; (80118d8 <tcp_process+0x2ac>)
 8011736:	681a      	ldr	r2, [r3, #0]
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2200      	movs	r2, #0
 8011740:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	2200      	movs	r2, #0
 8011748:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f001 fc2f 	bl	8012fb0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	7d1b      	ldrb	r3, [r3, #20]
 8011756:	3b02      	subs	r3, #2
 8011758:	2b07      	cmp	r3, #7
 801175a:	f200 8337 	bhi.w	8011dcc <tcp_process+0x7a0>
 801175e:	a201      	add	r2, pc, #4	; (adr r2, 8011764 <tcp_process+0x138>)
 8011760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011764:	08011785 	.word	0x08011785
 8011768:	080119b5 	.word	0x080119b5
 801176c:	08011b2d 	.word	0x08011b2d
 8011770:	08011b57 	.word	0x08011b57
 8011774:	08011c7b 	.word	0x08011c7b
 8011778:	08011b2d 	.word	0x08011b2d
 801177c:	08011d07 	.word	0x08011d07
 8011780:	08011d97 	.word	0x08011d97
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011784:	4b4f      	ldr	r3, [pc, #316]	; (80118c4 <tcp_process+0x298>)
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	f003 0310 	and.w	r3, r3, #16
 801178c:	2b00      	cmp	r3, #0
 801178e:	f000 80e4 	beq.w	801195a <tcp_process+0x32e>
 8011792:	4b4c      	ldr	r3, [pc, #304]	; (80118c4 <tcp_process+0x298>)
 8011794:	781b      	ldrb	r3, [r3, #0]
 8011796:	f003 0302 	and.w	r3, r3, #2
 801179a:	2b00      	cmp	r3, #0
 801179c:	f000 80dd 	beq.w	801195a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117a4:	1c5a      	adds	r2, r3, #1
 80117a6:	4b48      	ldr	r3, [pc, #288]	; (80118c8 <tcp_process+0x29c>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	429a      	cmp	r2, r3
 80117ac:	f040 80d5 	bne.w	801195a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80117b0:	4b46      	ldr	r3, [pc, #280]	; (80118cc <tcp_process+0x2a0>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	1c5a      	adds	r2, r3, #1
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80117c2:	4b41      	ldr	r3, [pc, #260]	; (80118c8 <tcp_process+0x29c>)
 80117c4:	681a      	ldr	r2, [r3, #0]
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80117ca:	4b44      	ldr	r3, [pc, #272]	; (80118dc <tcp_process+0x2b0>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	89db      	ldrh	r3, [r3, #14]
 80117d0:	b29a      	uxth	r2, r3
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80117e4:	4b39      	ldr	r3, [pc, #228]	; (80118cc <tcp_process+0x2a0>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	1e5a      	subs	r2, r3, #1
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2204      	movs	r2, #4
 80117f2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	3304      	adds	r3, #4
 80117fc:	4618      	mov	r0, r3
 80117fe:	f005 f92d 	bl	8016a5c <ip4_route>
 8011802:	4601      	mov	r1, r0
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	3304      	adds	r3, #4
 8011808:	461a      	mov	r2, r3
 801180a:	4620      	mov	r0, r4
 801180c:	f7ff f88c 	bl	8010928 <tcp_eff_send_mss_netif>
 8011810:	4603      	mov	r3, r0
 8011812:	461a      	mov	r2, r3
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801181c:	009a      	lsls	r2, r3, #2
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011822:	005b      	lsls	r3, r3, #1
 8011824:	f241 111c 	movw	r1, #4380	; 0x111c
 8011828:	428b      	cmp	r3, r1
 801182a:	bf38      	it	cc
 801182c:	460b      	movcc	r3, r1
 801182e:	429a      	cmp	r2, r3
 8011830:	d204      	bcs.n	801183c <tcp_process+0x210>
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011836:	009b      	lsls	r3, r3, #2
 8011838:	b29b      	uxth	r3, r3
 801183a:	e00d      	b.n	8011858 <tcp_process+0x22c>
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011840:	005b      	lsls	r3, r3, #1
 8011842:	f241 121c 	movw	r2, #4380	; 0x111c
 8011846:	4293      	cmp	r3, r2
 8011848:	d904      	bls.n	8011854 <tcp_process+0x228>
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801184e:	005b      	lsls	r3, r3, #1
 8011850:	b29b      	uxth	r3, r3
 8011852:	e001      	b.n	8011858 <tcp_process+0x22c>
 8011854:	f241 131c 	movw	r3, #4380	; 0x111c
 8011858:	687a      	ldr	r2, [r7, #4]
 801185a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011864:	2b00      	cmp	r3, #0
 8011866:	d106      	bne.n	8011876 <tcp_process+0x24a>
 8011868:	4b13      	ldr	r3, [pc, #76]	; (80118b8 <tcp_process+0x28c>)
 801186a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801186e:	491c      	ldr	r1, [pc, #112]	; (80118e0 <tcp_process+0x2b4>)
 8011870:	4813      	ldr	r0, [pc, #76]	; (80118c0 <tcp_process+0x294>)
 8011872:	f00b fed5 	bl	801d620 <iprintf>
        --pcb->snd_queuelen;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801187c:	3b01      	subs	r3, #1
 801187e:	b29a      	uxth	r2, r3
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801188a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801188c:	69fb      	ldr	r3, [r7, #28]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d12a      	bne.n	80118e8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011896:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011898:	69fb      	ldr	r3, [r7, #28]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d106      	bne.n	80118ac <tcp_process+0x280>
 801189e:	4b06      	ldr	r3, [pc, #24]	; (80118b8 <tcp_process+0x28c>)
 80118a0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80118a4:	490f      	ldr	r1, [pc, #60]	; (80118e4 <tcp_process+0x2b8>)
 80118a6:	4806      	ldr	r0, [pc, #24]	; (80118c0 <tcp_process+0x294>)
 80118a8:	f00b feba 	bl	801d620 <iprintf>
          pcb->unsent = rseg->next;
 80118ac:	69fb      	ldr	r3, [r7, #28]
 80118ae:	681a      	ldr	r2, [r3, #0]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	66da      	str	r2, [r3, #108]	; 0x6c
 80118b4:	e01c      	b.n	80118f0 <tcp_process+0x2c4>
 80118b6:	bf00      	nop
 80118b8:	080205bc 	.word	0x080205bc
 80118bc:	080207f4 	.word	0x080207f4
 80118c0:	08020608 	.word	0x08020608
 80118c4:	200113fc 	.word	0x200113fc
 80118c8:	200113f4 	.word	0x200113f4
 80118cc:	200113f0 	.word	0x200113f0
 80118d0:	08020810 	.word	0x08020810
 80118d4:	200113fd 	.word	0x200113fd
 80118d8:	200113b8 	.word	0x200113b8
 80118dc:	200113e0 	.word	0x200113e0
 80118e0:	08020830 	.word	0x08020830
 80118e4:	08020848 	.word	0x08020848
        } else {
          pcb->unacked = rseg->next;
 80118e8:	69fb      	ldr	r3, [r7, #28]
 80118ea:	681a      	ldr	r2, [r3, #0]
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80118f0:	69f8      	ldr	r0, [r7, #28]
 80118f2:	f7fe fc54 	bl	801019e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d104      	bne.n	8011908 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011904:	861a      	strh	r2, [r3, #48]	; 0x30
 8011906:	e006      	b.n	8011916 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2200      	movs	r2, #0
 801190c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2200      	movs	r2, #0
 8011912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801191c:	2b00      	cmp	r3, #0
 801191e:	d00a      	beq.n	8011936 <tcp_process+0x30a>
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011926:	687a      	ldr	r2, [r7, #4]
 8011928:	6910      	ldr	r0, [r2, #16]
 801192a:	2200      	movs	r2, #0
 801192c:	6879      	ldr	r1, [r7, #4]
 801192e:	4798      	blx	r3
 8011930:	4603      	mov	r3, r0
 8011932:	76bb      	strb	r3, [r7, #26]
 8011934:	e001      	b.n	801193a <tcp_process+0x30e>
 8011936:	2300      	movs	r3, #0
 8011938:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801193a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801193e:	f113 0f0d 	cmn.w	r3, #13
 8011942:	d102      	bne.n	801194a <tcp_process+0x31e>
          return ERR_ABRT;
 8011944:	f06f 030c 	mvn.w	r3, #12
 8011948:	e250      	b.n	8011dec <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	8b5b      	ldrh	r3, [r3, #26]
 801194e:	f043 0302 	orr.w	r3, r3, #2
 8011952:	b29a      	uxth	r2, r3
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011958:	e23a      	b.n	8011dd0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801195a:	4b98      	ldr	r3, [pc, #608]	; (8011bbc <tcp_process+0x590>)
 801195c:	781b      	ldrb	r3, [r3, #0]
 801195e:	f003 0310 	and.w	r3, r3, #16
 8011962:	2b00      	cmp	r3, #0
 8011964:	f000 8234 	beq.w	8011dd0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011968:	4b95      	ldr	r3, [pc, #596]	; (8011bc0 <tcp_process+0x594>)
 801196a:	6819      	ldr	r1, [r3, #0]
 801196c:	4b95      	ldr	r3, [pc, #596]	; (8011bc4 <tcp_process+0x598>)
 801196e:	881b      	ldrh	r3, [r3, #0]
 8011970:	461a      	mov	r2, r3
 8011972:	4b95      	ldr	r3, [pc, #596]	; (8011bc8 <tcp_process+0x59c>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011978:	4b94      	ldr	r3, [pc, #592]	; (8011bcc <tcp_process+0x5a0>)
 801197a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801197c:	885b      	ldrh	r3, [r3, #2]
 801197e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011980:	4a92      	ldr	r2, [pc, #584]	; (8011bcc <tcp_process+0x5a0>)
 8011982:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011984:	8812      	ldrh	r2, [r2, #0]
 8011986:	b292      	uxth	r2, r2
 8011988:	9202      	str	r2, [sp, #8]
 801198a:	9301      	str	r3, [sp, #4]
 801198c:	4b90      	ldr	r3, [pc, #576]	; (8011bd0 <tcp_process+0x5a4>)
 801198e:	9300      	str	r3, [sp, #0]
 8011990:	4b90      	ldr	r3, [pc, #576]	; (8011bd4 <tcp_process+0x5a8>)
 8011992:	4602      	mov	r2, r0
 8011994:	6878      	ldr	r0, [r7, #4]
 8011996:	f003 f8dd 	bl	8014b54 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80119a0:	2b05      	cmp	r3, #5
 80119a2:	f200 8215 	bhi.w	8011dd0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2200      	movs	r2, #0
 80119aa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f002 fea7 	bl	8014700 <tcp_rexmit_rto>
      break;
 80119b2:	e20d      	b.n	8011dd0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80119b4:	4b81      	ldr	r3, [pc, #516]	; (8011bbc <tcp_process+0x590>)
 80119b6:	781b      	ldrb	r3, [r3, #0]
 80119b8:	f003 0310 	and.w	r3, r3, #16
 80119bc:	2b00      	cmp	r3, #0
 80119be:	f000 80a1 	beq.w	8011b04 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119c2:	4b7f      	ldr	r3, [pc, #508]	; (8011bc0 <tcp_process+0x594>)
 80119c4:	681a      	ldr	r2, [r3, #0]
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119ca:	1ad3      	subs	r3, r2, r3
 80119cc:	3b01      	subs	r3, #1
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	db7e      	blt.n	8011ad0 <tcp_process+0x4a4>
 80119d2:	4b7b      	ldr	r3, [pc, #492]	; (8011bc0 <tcp_process+0x594>)
 80119d4:	681a      	ldr	r2, [r3, #0]
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119da:	1ad3      	subs	r3, r2, r3
 80119dc:	2b00      	cmp	r3, #0
 80119de:	dc77      	bgt.n	8011ad0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2204      	movs	r2, #4
 80119e4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d102      	bne.n	80119f4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80119ee:	23fa      	movs	r3, #250	; 0xfa
 80119f0:	76bb      	strb	r3, [r7, #26]
 80119f2:	e01d      	b.n	8011a30 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80119f8:	699b      	ldr	r3, [r3, #24]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d106      	bne.n	8011a0c <tcp_process+0x3e0>
 80119fe:	4b76      	ldr	r3, [pc, #472]	; (8011bd8 <tcp_process+0x5ac>)
 8011a00:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011a04:	4975      	ldr	r1, [pc, #468]	; (8011bdc <tcp_process+0x5b0>)
 8011a06:	4876      	ldr	r0, [pc, #472]	; (8011be0 <tcp_process+0x5b4>)
 8011a08:	f00b fe0a 	bl	801d620 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a10:	699b      	ldr	r3, [r3, #24]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d00a      	beq.n	8011a2c <tcp_process+0x400>
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a1a:	699b      	ldr	r3, [r3, #24]
 8011a1c:	687a      	ldr	r2, [r7, #4]
 8011a1e:	6910      	ldr	r0, [r2, #16]
 8011a20:	2200      	movs	r2, #0
 8011a22:	6879      	ldr	r1, [r7, #4]
 8011a24:	4798      	blx	r3
 8011a26:	4603      	mov	r3, r0
 8011a28:	76bb      	strb	r3, [r7, #26]
 8011a2a:	e001      	b.n	8011a30 <tcp_process+0x404>
 8011a2c:	23f0      	movs	r3, #240	; 0xf0
 8011a2e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011a30:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d00a      	beq.n	8011a4e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011a38:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011a3c:	f113 0f0d 	cmn.w	r3, #13
 8011a40:	d002      	beq.n	8011a48 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f7fd fd62 	bl	800f50c <tcp_abort>
            }
            return ERR_ABRT;
 8011a48:	f06f 030c 	mvn.w	r3, #12
 8011a4c:	e1ce      	b.n	8011dec <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	f000 fae0 	bl	8012014 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011a54:	4b63      	ldr	r3, [pc, #396]	; (8011be4 <tcp_process+0x5b8>)
 8011a56:	881b      	ldrh	r3, [r3, #0]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d005      	beq.n	8011a68 <tcp_process+0x43c>
            recv_acked--;
 8011a5c:	4b61      	ldr	r3, [pc, #388]	; (8011be4 <tcp_process+0x5b8>)
 8011a5e:	881b      	ldrh	r3, [r3, #0]
 8011a60:	3b01      	subs	r3, #1
 8011a62:	b29a      	uxth	r2, r3
 8011a64:	4b5f      	ldr	r3, [pc, #380]	; (8011be4 <tcp_process+0x5b8>)
 8011a66:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a6c:	009a      	lsls	r2, r3, #2
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a72:	005b      	lsls	r3, r3, #1
 8011a74:	f241 111c 	movw	r1, #4380	; 0x111c
 8011a78:	428b      	cmp	r3, r1
 8011a7a:	bf38      	it	cc
 8011a7c:	460b      	movcc	r3, r1
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d204      	bcs.n	8011a8c <tcp_process+0x460>
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a86:	009b      	lsls	r3, r3, #2
 8011a88:	b29b      	uxth	r3, r3
 8011a8a:	e00d      	b.n	8011aa8 <tcp_process+0x47c>
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a90:	005b      	lsls	r3, r3, #1
 8011a92:	f241 121c 	movw	r2, #4380	; 0x111c
 8011a96:	4293      	cmp	r3, r2
 8011a98:	d904      	bls.n	8011aa4 <tcp_process+0x478>
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a9e:	005b      	lsls	r3, r3, #1
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	e001      	b.n	8011aa8 <tcp_process+0x47c>
 8011aa4:	f241 131c 	movw	r3, #4380	; 0x111c
 8011aa8:	687a      	ldr	r2, [r7, #4]
 8011aaa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011aae:	4b4e      	ldr	r3, [pc, #312]	; (8011be8 <tcp_process+0x5bc>)
 8011ab0:	781b      	ldrb	r3, [r3, #0]
 8011ab2:	f003 0320 	and.w	r3, r3, #32
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d037      	beq.n	8011b2a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	8b5b      	ldrh	r3, [r3, #26]
 8011abe:	f043 0302 	orr.w	r3, r3, #2
 8011ac2:	b29a      	uxth	r2, r3
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2207      	movs	r2, #7
 8011acc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011ace:	e02c      	b.n	8011b2a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ad0:	4b3b      	ldr	r3, [pc, #236]	; (8011bc0 <tcp_process+0x594>)
 8011ad2:	6819      	ldr	r1, [r3, #0]
 8011ad4:	4b3b      	ldr	r3, [pc, #236]	; (8011bc4 <tcp_process+0x598>)
 8011ad6:	881b      	ldrh	r3, [r3, #0]
 8011ad8:	461a      	mov	r2, r3
 8011ada:	4b3b      	ldr	r3, [pc, #236]	; (8011bc8 <tcp_process+0x59c>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011ae0:	4b3a      	ldr	r3, [pc, #232]	; (8011bcc <tcp_process+0x5a0>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ae4:	885b      	ldrh	r3, [r3, #2]
 8011ae6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011ae8:	4a38      	ldr	r2, [pc, #224]	; (8011bcc <tcp_process+0x5a0>)
 8011aea:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011aec:	8812      	ldrh	r2, [r2, #0]
 8011aee:	b292      	uxth	r2, r2
 8011af0:	9202      	str	r2, [sp, #8]
 8011af2:	9301      	str	r3, [sp, #4]
 8011af4:	4b36      	ldr	r3, [pc, #216]	; (8011bd0 <tcp_process+0x5a4>)
 8011af6:	9300      	str	r3, [sp, #0]
 8011af8:	4b36      	ldr	r3, [pc, #216]	; (8011bd4 <tcp_process+0x5a8>)
 8011afa:	4602      	mov	r2, r0
 8011afc:	6878      	ldr	r0, [r7, #4]
 8011afe:	f003 f829 	bl	8014b54 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011b02:	e167      	b.n	8011dd4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011b04:	4b2d      	ldr	r3, [pc, #180]	; (8011bbc <tcp_process+0x590>)
 8011b06:	781b      	ldrb	r3, [r3, #0]
 8011b08:	f003 0302 	and.w	r3, r3, #2
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	f000 8161 	beq.w	8011dd4 <tcp_process+0x7a8>
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b16:	1e5a      	subs	r2, r3, #1
 8011b18:	4b2b      	ldr	r3, [pc, #172]	; (8011bc8 <tcp_process+0x59c>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	f040 8159 	bne.w	8011dd4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f002 fe0e 	bl	8014744 <tcp_rexmit>
      break;
 8011b28:	e154      	b.n	8011dd4 <tcp_process+0x7a8>
 8011b2a:	e153      	b.n	8011dd4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f000 fa71 	bl	8012014 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011b32:	4b2d      	ldr	r3, [pc, #180]	; (8011be8 <tcp_process+0x5bc>)
 8011b34:	781b      	ldrb	r3, [r3, #0]
 8011b36:	f003 0320 	and.w	r3, r3, #32
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	f000 814c 	beq.w	8011dd8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	8b5b      	ldrh	r3, [r3, #26]
 8011b44:	f043 0302 	orr.w	r3, r3, #2
 8011b48:	b29a      	uxth	r2, r3
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2207      	movs	r2, #7
 8011b52:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011b54:	e140      	b.n	8011dd8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f000 fa5c 	bl	8012014 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011b5c:	4b22      	ldr	r3, [pc, #136]	; (8011be8 <tcp_process+0x5bc>)
 8011b5e:	781b      	ldrb	r3, [r3, #0]
 8011b60:	f003 0320 	and.w	r3, r3, #32
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d071      	beq.n	8011c4c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011b68:	4b14      	ldr	r3, [pc, #80]	; (8011bbc <tcp_process+0x590>)
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	f003 0310 	and.w	r3, r3, #16
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d060      	beq.n	8011c36 <tcp_process+0x60a>
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b78:	4b11      	ldr	r3, [pc, #68]	; (8011bc0 <tcp_process+0x594>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	d15a      	bne.n	8011c36 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d156      	bne.n	8011c36 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	8b5b      	ldrh	r3, [r3, #26]
 8011b8c:	f043 0302 	orr.w	r3, r3, #2
 8011b90:	b29a      	uxth	r2, r3
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f7fe fdbc 	bl	8010714 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011b9c:	4b13      	ldr	r3, [pc, #76]	; (8011bec <tcp_process+0x5c0>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	687a      	ldr	r2, [r7, #4]
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d105      	bne.n	8011bb2 <tcp_process+0x586>
 8011ba6:	4b11      	ldr	r3, [pc, #68]	; (8011bec <tcp_process+0x5c0>)
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	68db      	ldr	r3, [r3, #12]
 8011bac:	4a0f      	ldr	r2, [pc, #60]	; (8011bec <tcp_process+0x5c0>)
 8011bae:	6013      	str	r3, [r2, #0]
 8011bb0:	e02e      	b.n	8011c10 <tcp_process+0x5e4>
 8011bb2:	4b0e      	ldr	r3, [pc, #56]	; (8011bec <tcp_process+0x5c0>)
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	617b      	str	r3, [r7, #20]
 8011bb8:	e027      	b.n	8011c0a <tcp_process+0x5de>
 8011bba:	bf00      	nop
 8011bbc:	200113fc 	.word	0x200113fc
 8011bc0:	200113f4 	.word	0x200113f4
 8011bc4:	200113fa 	.word	0x200113fa
 8011bc8:	200113f0 	.word	0x200113f0
 8011bcc:	200113e0 	.word	0x200113e0
 8011bd0:	2000a2cc 	.word	0x2000a2cc
 8011bd4:	2000a2d0 	.word	0x2000a2d0
 8011bd8:	080205bc 	.word	0x080205bc
 8011bdc:	0802085c 	.word	0x0802085c
 8011be0:	08020608 	.word	0x08020608
 8011be4:	200113f8 	.word	0x200113f8
 8011be8:	200113fd 	.word	0x200113fd
 8011bec:	200113c4 	.word	0x200113c4
 8011bf0:	697b      	ldr	r3, [r7, #20]
 8011bf2:	68db      	ldr	r3, [r3, #12]
 8011bf4:	687a      	ldr	r2, [r7, #4]
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	d104      	bne.n	8011c04 <tcp_process+0x5d8>
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	68da      	ldr	r2, [r3, #12]
 8011bfe:	697b      	ldr	r3, [r7, #20]
 8011c00:	60da      	str	r2, [r3, #12]
 8011c02:	e005      	b.n	8011c10 <tcp_process+0x5e4>
 8011c04:	697b      	ldr	r3, [r7, #20]
 8011c06:	68db      	ldr	r3, [r3, #12]
 8011c08:	617b      	str	r3, [r7, #20]
 8011c0a:	697b      	ldr	r3, [r7, #20]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d1ef      	bne.n	8011bf0 <tcp_process+0x5c4>
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	2200      	movs	r2, #0
 8011c14:	60da      	str	r2, [r3, #12]
 8011c16:	4b77      	ldr	r3, [pc, #476]	; (8011df4 <tcp_process+0x7c8>)
 8011c18:	2201      	movs	r2, #1
 8011c1a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	220a      	movs	r2, #10
 8011c20:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011c22:	4b75      	ldr	r3, [pc, #468]	; (8011df8 <tcp_process+0x7cc>)
 8011c24:	681a      	ldr	r2, [r3, #0]
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	60da      	str	r2, [r3, #12]
 8011c2a:	4a73      	ldr	r2, [pc, #460]	; (8011df8 <tcp_process+0x7cc>)
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6013      	str	r3, [r2, #0]
 8011c30:	f003 f952 	bl	8014ed8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011c34:	e0d2      	b.n	8011ddc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	8b5b      	ldrh	r3, [r3, #26]
 8011c3a:	f043 0302 	orr.w	r3, r3, #2
 8011c3e:	b29a      	uxth	r2, r3
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	2208      	movs	r2, #8
 8011c48:	751a      	strb	r2, [r3, #20]
      break;
 8011c4a:	e0c7      	b.n	8011ddc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011c4c:	4b6b      	ldr	r3, [pc, #428]	; (8011dfc <tcp_process+0x7d0>)
 8011c4e:	781b      	ldrb	r3, [r3, #0]
 8011c50:	f003 0310 	and.w	r3, r3, #16
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	f000 80c1 	beq.w	8011ddc <tcp_process+0x7b0>
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c5e:	4b68      	ldr	r3, [pc, #416]	; (8011e00 <tcp_process+0x7d4>)
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	429a      	cmp	r2, r3
 8011c64:	f040 80ba 	bne.w	8011ddc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	f040 80b5 	bne.w	8011ddc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	2206      	movs	r2, #6
 8011c76:	751a      	strb	r2, [r3, #20]
      break;
 8011c78:	e0b0      	b.n	8011ddc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f000 f9ca 	bl	8012014 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011c80:	4b60      	ldr	r3, [pc, #384]	; (8011e04 <tcp_process+0x7d8>)
 8011c82:	781b      	ldrb	r3, [r3, #0]
 8011c84:	f003 0320 	and.w	r3, r3, #32
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	f000 80a9 	beq.w	8011de0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	8b5b      	ldrh	r3, [r3, #26]
 8011c92:	f043 0302 	orr.w	r3, r3, #2
 8011c96:	b29a      	uxth	r2, r3
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011c9c:	6878      	ldr	r0, [r7, #4]
 8011c9e:	f7fe fd39 	bl	8010714 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011ca2:	4b59      	ldr	r3, [pc, #356]	; (8011e08 <tcp_process+0x7dc>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	687a      	ldr	r2, [r7, #4]
 8011ca8:	429a      	cmp	r2, r3
 8011caa:	d105      	bne.n	8011cb8 <tcp_process+0x68c>
 8011cac:	4b56      	ldr	r3, [pc, #344]	; (8011e08 <tcp_process+0x7dc>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	68db      	ldr	r3, [r3, #12]
 8011cb2:	4a55      	ldr	r2, [pc, #340]	; (8011e08 <tcp_process+0x7dc>)
 8011cb4:	6013      	str	r3, [r2, #0]
 8011cb6:	e013      	b.n	8011ce0 <tcp_process+0x6b4>
 8011cb8:	4b53      	ldr	r3, [pc, #332]	; (8011e08 <tcp_process+0x7dc>)
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	613b      	str	r3, [r7, #16]
 8011cbe:	e00c      	b.n	8011cda <tcp_process+0x6ae>
 8011cc0:	693b      	ldr	r3, [r7, #16]
 8011cc2:	68db      	ldr	r3, [r3, #12]
 8011cc4:	687a      	ldr	r2, [r7, #4]
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d104      	bne.n	8011cd4 <tcp_process+0x6a8>
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	68da      	ldr	r2, [r3, #12]
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	60da      	str	r2, [r3, #12]
 8011cd2:	e005      	b.n	8011ce0 <tcp_process+0x6b4>
 8011cd4:	693b      	ldr	r3, [r7, #16]
 8011cd6:	68db      	ldr	r3, [r3, #12]
 8011cd8:	613b      	str	r3, [r7, #16]
 8011cda:	693b      	ldr	r3, [r7, #16]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d1ef      	bne.n	8011cc0 <tcp_process+0x694>
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	60da      	str	r2, [r3, #12]
 8011ce6:	4b43      	ldr	r3, [pc, #268]	; (8011df4 <tcp_process+0x7c8>)
 8011ce8:	2201      	movs	r2, #1
 8011cea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	220a      	movs	r2, #10
 8011cf0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011cf2:	4b41      	ldr	r3, [pc, #260]	; (8011df8 <tcp_process+0x7cc>)
 8011cf4:	681a      	ldr	r2, [r3, #0]
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	60da      	str	r2, [r3, #12]
 8011cfa:	4a3f      	ldr	r2, [pc, #252]	; (8011df8 <tcp_process+0x7cc>)
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6013      	str	r3, [r2, #0]
 8011d00:	f003 f8ea 	bl	8014ed8 <tcp_timer_needed>
      }
      break;
 8011d04:	e06c      	b.n	8011de0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f000 f984 	bl	8012014 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011d0c:	4b3b      	ldr	r3, [pc, #236]	; (8011dfc <tcp_process+0x7d0>)
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	f003 0310 	and.w	r3, r3, #16
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d065      	beq.n	8011de4 <tcp_process+0x7b8>
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d1c:	4b38      	ldr	r3, [pc, #224]	; (8011e00 <tcp_process+0x7d4>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	429a      	cmp	r2, r3
 8011d22:	d15f      	bne.n	8011de4 <tcp_process+0x7b8>
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d15b      	bne.n	8011de4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011d2c:	6878      	ldr	r0, [r7, #4]
 8011d2e:	f7fe fcf1 	bl	8010714 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011d32:	4b35      	ldr	r3, [pc, #212]	; (8011e08 <tcp_process+0x7dc>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	687a      	ldr	r2, [r7, #4]
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	d105      	bne.n	8011d48 <tcp_process+0x71c>
 8011d3c:	4b32      	ldr	r3, [pc, #200]	; (8011e08 <tcp_process+0x7dc>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	68db      	ldr	r3, [r3, #12]
 8011d42:	4a31      	ldr	r2, [pc, #196]	; (8011e08 <tcp_process+0x7dc>)
 8011d44:	6013      	str	r3, [r2, #0]
 8011d46:	e013      	b.n	8011d70 <tcp_process+0x744>
 8011d48:	4b2f      	ldr	r3, [pc, #188]	; (8011e08 <tcp_process+0x7dc>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	60fb      	str	r3, [r7, #12]
 8011d4e:	e00c      	b.n	8011d6a <tcp_process+0x73e>
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	68db      	ldr	r3, [r3, #12]
 8011d54:	687a      	ldr	r2, [r7, #4]
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d104      	bne.n	8011d64 <tcp_process+0x738>
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	68da      	ldr	r2, [r3, #12]
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	60da      	str	r2, [r3, #12]
 8011d62:	e005      	b.n	8011d70 <tcp_process+0x744>
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	68db      	ldr	r3, [r3, #12]
 8011d68:	60fb      	str	r3, [r7, #12]
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d1ef      	bne.n	8011d50 <tcp_process+0x724>
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2200      	movs	r2, #0
 8011d74:	60da      	str	r2, [r3, #12]
 8011d76:	4b1f      	ldr	r3, [pc, #124]	; (8011df4 <tcp_process+0x7c8>)
 8011d78:	2201      	movs	r2, #1
 8011d7a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	220a      	movs	r2, #10
 8011d80:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011d82:	4b1d      	ldr	r3, [pc, #116]	; (8011df8 <tcp_process+0x7cc>)
 8011d84:	681a      	ldr	r2, [r3, #0]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	60da      	str	r2, [r3, #12]
 8011d8a:	4a1b      	ldr	r2, [pc, #108]	; (8011df8 <tcp_process+0x7cc>)
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6013      	str	r3, [r2, #0]
 8011d90:	f003 f8a2 	bl	8014ed8 <tcp_timer_needed>
      }
      break;
 8011d94:	e026      	b.n	8011de4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	f000 f93c 	bl	8012014 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011d9c:	4b17      	ldr	r3, [pc, #92]	; (8011dfc <tcp_process+0x7d0>)
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	f003 0310 	and.w	r3, r3, #16
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d01f      	beq.n	8011de8 <tcp_process+0x7bc>
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011dac:	4b14      	ldr	r3, [pc, #80]	; (8011e00 <tcp_process+0x7d4>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	429a      	cmp	r2, r3
 8011db2:	d119      	bne.n	8011de8 <tcp_process+0x7bc>
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d115      	bne.n	8011de8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011dbc:	4b11      	ldr	r3, [pc, #68]	; (8011e04 <tcp_process+0x7d8>)
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	f043 0310 	orr.w	r3, r3, #16
 8011dc4:	b2da      	uxtb	r2, r3
 8011dc6:	4b0f      	ldr	r3, [pc, #60]	; (8011e04 <tcp_process+0x7d8>)
 8011dc8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011dca:	e00d      	b.n	8011de8 <tcp_process+0x7bc>
    default:
      break;
 8011dcc:	bf00      	nop
 8011dce:	e00c      	b.n	8011dea <tcp_process+0x7be>
      break;
 8011dd0:	bf00      	nop
 8011dd2:	e00a      	b.n	8011dea <tcp_process+0x7be>
      break;
 8011dd4:	bf00      	nop
 8011dd6:	e008      	b.n	8011dea <tcp_process+0x7be>
      break;
 8011dd8:	bf00      	nop
 8011dda:	e006      	b.n	8011dea <tcp_process+0x7be>
      break;
 8011ddc:	bf00      	nop
 8011dde:	e004      	b.n	8011dea <tcp_process+0x7be>
      break;
 8011de0:	bf00      	nop
 8011de2:	e002      	b.n	8011dea <tcp_process+0x7be>
      break;
 8011de4:	bf00      	nop
 8011de6:	e000      	b.n	8011dea <tcp_process+0x7be>
      break;
 8011de8:	bf00      	nop
  }
  return ERR_OK;
 8011dea:	2300      	movs	r3, #0
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3724      	adds	r7, #36	; 0x24
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd90      	pop	{r4, r7, pc}
 8011df4:	200113cc 	.word	0x200113cc
 8011df8:	200113c8 	.word	0x200113c8
 8011dfc:	200113fc 	.word	0x200113fc
 8011e00:	200113f4 	.word	0x200113f4
 8011e04:	200113fd 	.word	0x200113fd
 8011e08:	200113c4 	.word	0x200113c4

08011e0c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011e0c:	b590      	push	{r4, r7, lr}
 8011e0e:	b085      	sub	sp, #20
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d106      	bne.n	8011e2a <tcp_oos_insert_segment+0x1e>
 8011e1c:	4b3b      	ldr	r3, [pc, #236]	; (8011f0c <tcp_oos_insert_segment+0x100>)
 8011e1e:	f240 421f 	movw	r2, #1055	; 0x41f
 8011e22:	493b      	ldr	r1, [pc, #236]	; (8011f10 <tcp_oos_insert_segment+0x104>)
 8011e24:	483b      	ldr	r0, [pc, #236]	; (8011f14 <tcp_oos_insert_segment+0x108>)
 8011e26:	f00b fbfb 	bl	801d620 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	68db      	ldr	r3, [r3, #12]
 8011e2e:	899b      	ldrh	r3, [r3, #12]
 8011e30:	b29b      	uxth	r3, r3
 8011e32:	4618      	mov	r0, r3
 8011e34:	f7fb f978 	bl	800d128 <lwip_htons>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	b2db      	uxtb	r3, r3
 8011e3c:	f003 0301 	and.w	r3, r3, #1
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d028      	beq.n	8011e96 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011e44:	6838      	ldr	r0, [r7, #0]
 8011e46:	f7fe f995 	bl	8010174 <tcp_segs_free>
    next = NULL;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	603b      	str	r3, [r7, #0]
 8011e4e:	e056      	b.n	8011efe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	68db      	ldr	r3, [r3, #12]
 8011e54:	899b      	ldrh	r3, [r3, #12]
 8011e56:	b29b      	uxth	r3, r3
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f7fb f965 	bl	800d128 <lwip_htons>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	b2db      	uxtb	r3, r3
 8011e62:	f003 0301 	and.w	r3, r3, #1
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d00d      	beq.n	8011e86 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	68db      	ldr	r3, [r3, #12]
 8011e6e:	899b      	ldrh	r3, [r3, #12]
 8011e70:	b29c      	uxth	r4, r3
 8011e72:	2001      	movs	r0, #1
 8011e74:	f7fb f958 	bl	800d128 <lwip_htons>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	461a      	mov	r2, r3
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	68db      	ldr	r3, [r3, #12]
 8011e80:	4322      	orrs	r2, r4
 8011e82:	b292      	uxth	r2, r2
 8011e84:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011e86:	683b      	ldr	r3, [r7, #0]
 8011e88:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011e90:	68f8      	ldr	r0, [r7, #12]
 8011e92:	f7fe f984 	bl	801019e <tcp_seg_free>
    while (next &&
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d00e      	beq.n	8011eba <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	891b      	ldrh	r3, [r3, #8]
 8011ea0:	461a      	mov	r2, r3
 8011ea2:	4b1d      	ldr	r3, [pc, #116]	; (8011f18 <tcp_oos_insert_segment+0x10c>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	441a      	add	r2, r3
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	68db      	ldr	r3, [r3, #12]
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	6839      	ldr	r1, [r7, #0]
 8011eb0:	8909      	ldrh	r1, [r1, #8]
 8011eb2:	440b      	add	r3, r1
 8011eb4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	daca      	bge.n	8011e50 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d01e      	beq.n	8011efe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	891b      	ldrh	r3, [r3, #8]
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	4b14      	ldr	r3, [pc, #80]	; (8011f18 <tcp_oos_insert_segment+0x10c>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	441a      	add	r2, r3
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	68db      	ldr	r3, [r3, #12]
 8011ed0:	685b      	ldr	r3, [r3, #4]
 8011ed2:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	dd12      	ble.n	8011efe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	68db      	ldr	r3, [r3, #12]
 8011edc:	685b      	ldr	r3, [r3, #4]
 8011ede:	b29a      	uxth	r2, r3
 8011ee0:	4b0d      	ldr	r3, [pc, #52]	; (8011f18 <tcp_oos_insert_segment+0x10c>)
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	b29b      	uxth	r3, r3
 8011ee6:	1ad3      	subs	r3, r2, r3
 8011ee8:	b29a      	uxth	r2, r3
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	685a      	ldr	r2, [r3, #4]
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	891b      	ldrh	r3, [r3, #8]
 8011ef6:	4619      	mov	r1, r3
 8011ef8:	4610      	mov	r0, r2
 8011efa:	f7fc fb91 	bl	800e620 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	683a      	ldr	r2, [r7, #0]
 8011f02:	601a      	str	r2, [r3, #0]
}
 8011f04:	bf00      	nop
 8011f06:	3714      	adds	r7, #20
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd90      	pop	{r4, r7, pc}
 8011f0c:	080205bc 	.word	0x080205bc
 8011f10:	0802087c 	.word	0x0802087c
 8011f14:	08020608 	.word	0x08020608
 8011f18:	200113f0 	.word	0x200113f0

08011f1c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011f1c:	b5b0      	push	{r4, r5, r7, lr}
 8011f1e:	b086      	sub	sp, #24
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	60f8      	str	r0, [r7, #12]
 8011f24:	60b9      	str	r1, [r7, #8]
 8011f26:	607a      	str	r2, [r7, #4]
 8011f28:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011f2a:	e03e      	b.n	8011faa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011f30:	68bb      	ldr	r3, [r7, #8]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011f36:	697b      	ldr	r3, [r7, #20]
 8011f38:	685b      	ldr	r3, [r3, #4]
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7fc fd84 	bl	800ea48 <pbuf_clen>
 8011f40:	4603      	mov	r3, r0
 8011f42:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f4a:	8a7a      	ldrh	r2, [r7, #18]
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	d906      	bls.n	8011f5e <tcp_free_acked_segments+0x42>
 8011f50:	4b2a      	ldr	r3, [pc, #168]	; (8011ffc <tcp_free_acked_segments+0xe0>)
 8011f52:	f240 4257 	movw	r2, #1111	; 0x457
 8011f56:	492a      	ldr	r1, [pc, #168]	; (8012000 <tcp_free_acked_segments+0xe4>)
 8011f58:	482a      	ldr	r0, [pc, #168]	; (8012004 <tcp_free_acked_segments+0xe8>)
 8011f5a:	f00b fb61 	bl	801d620 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011f64:	8a7b      	ldrh	r3, [r7, #18]
 8011f66:	1ad3      	subs	r3, r2, r3
 8011f68:	b29a      	uxth	r2, r3
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011f70:	697b      	ldr	r3, [r7, #20]
 8011f72:	891a      	ldrh	r2, [r3, #8]
 8011f74:	4b24      	ldr	r3, [pc, #144]	; (8012008 <tcp_free_acked_segments+0xec>)
 8011f76:	881b      	ldrh	r3, [r3, #0]
 8011f78:	4413      	add	r3, r2
 8011f7a:	b29a      	uxth	r2, r3
 8011f7c:	4b22      	ldr	r3, [pc, #136]	; (8012008 <tcp_free_acked_segments+0xec>)
 8011f7e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011f80:	6978      	ldr	r0, [r7, #20]
 8011f82:	f7fe f90c 	bl	801019e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d00c      	beq.n	8011faa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011f90:	68bb      	ldr	r3, [r7, #8]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d109      	bne.n	8011faa <tcp_free_acked_segments+0x8e>
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d106      	bne.n	8011faa <tcp_free_acked_segments+0x8e>
 8011f9c:	4b17      	ldr	r3, [pc, #92]	; (8011ffc <tcp_free_acked_segments+0xe0>)
 8011f9e:	f240 4261 	movw	r2, #1121	; 0x461
 8011fa2:	491a      	ldr	r1, [pc, #104]	; (801200c <tcp_free_acked_segments+0xf0>)
 8011fa4:	4817      	ldr	r0, [pc, #92]	; (8012004 <tcp_free_acked_segments+0xe8>)
 8011fa6:	f00b fb3b 	bl	801d620 <iprintf>
  while (seg_list != NULL &&
 8011faa:	68bb      	ldr	r3, [r7, #8]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d020      	beq.n	8011ff2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011fb0:	68bb      	ldr	r3, [r7, #8]
 8011fb2:	68db      	ldr	r3, [r3, #12]
 8011fb4:	685b      	ldr	r3, [r3, #4]
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7fb f8cb 	bl	800d152 <lwip_htonl>
 8011fbc:	4604      	mov	r4, r0
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	891b      	ldrh	r3, [r3, #8]
 8011fc2:	461d      	mov	r5, r3
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	68db      	ldr	r3, [r3, #12]
 8011fc8:	899b      	ldrh	r3, [r3, #12]
 8011fca:	b29b      	uxth	r3, r3
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7fb f8ab 	bl	800d128 <lwip_htons>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	b2db      	uxtb	r3, r3
 8011fd6:	f003 0303 	and.w	r3, r3, #3
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d001      	beq.n	8011fe2 <tcp_free_acked_segments+0xc6>
 8011fde:	2301      	movs	r3, #1
 8011fe0:	e000      	b.n	8011fe4 <tcp_free_acked_segments+0xc8>
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	442b      	add	r3, r5
 8011fe6:	18e2      	adds	r2, r4, r3
 8011fe8:	4b09      	ldr	r3, [pc, #36]	; (8012010 <tcp_free_acked_segments+0xf4>)
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	dd9c      	ble.n	8011f2c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011ff2:	68bb      	ldr	r3, [r7, #8]
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	3718      	adds	r7, #24
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8011ffc:	080205bc 	.word	0x080205bc
 8012000:	080208a4 	.word	0x080208a4
 8012004:	08020608 	.word	0x08020608
 8012008:	200113f8 	.word	0x200113f8
 801200c:	080208cc 	.word	0x080208cc
 8012010:	200113f4 	.word	0x200113f4

08012014 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012014:	b5b0      	push	{r4, r5, r7, lr}
 8012016:	b094      	sub	sp, #80	; 0x50
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801201c:	2300      	movs	r3, #0
 801201e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d106      	bne.n	8012034 <tcp_receive+0x20>
 8012026:	4b91      	ldr	r3, [pc, #580]	; (801226c <tcp_receive+0x258>)
 8012028:	f240 427b 	movw	r2, #1147	; 0x47b
 801202c:	4990      	ldr	r1, [pc, #576]	; (8012270 <tcp_receive+0x25c>)
 801202e:	4891      	ldr	r0, [pc, #580]	; (8012274 <tcp_receive+0x260>)
 8012030:	f00b faf6 	bl	801d620 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	7d1b      	ldrb	r3, [r3, #20]
 8012038:	2b03      	cmp	r3, #3
 801203a:	d806      	bhi.n	801204a <tcp_receive+0x36>
 801203c:	4b8b      	ldr	r3, [pc, #556]	; (801226c <tcp_receive+0x258>)
 801203e:	f240 427c 	movw	r2, #1148	; 0x47c
 8012042:	498d      	ldr	r1, [pc, #564]	; (8012278 <tcp_receive+0x264>)
 8012044:	488b      	ldr	r0, [pc, #556]	; (8012274 <tcp_receive+0x260>)
 8012046:	f00b faeb 	bl	801d620 <iprintf>

  if (flags & TCP_ACK) {
 801204a:	4b8c      	ldr	r3, [pc, #560]	; (801227c <tcp_receive+0x268>)
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	f003 0310 	and.w	r3, r3, #16
 8012052:	2b00      	cmp	r3, #0
 8012054:	f000 8264 	beq.w	8012520 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801205e:	461a      	mov	r2, r3
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012064:	4413      	add	r3, r2
 8012066:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801206c:	4b84      	ldr	r3, [pc, #528]	; (8012280 <tcp_receive+0x26c>)
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	1ad3      	subs	r3, r2, r3
 8012072:	2b00      	cmp	r3, #0
 8012074:	db1b      	blt.n	80120ae <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801207a:	4b81      	ldr	r3, [pc, #516]	; (8012280 <tcp_receive+0x26c>)
 801207c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801207e:	429a      	cmp	r2, r3
 8012080:	d106      	bne.n	8012090 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012086:	4b7f      	ldr	r3, [pc, #508]	; (8012284 <tcp_receive+0x270>)
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	1ad3      	subs	r3, r2, r3
 801208c:	2b00      	cmp	r3, #0
 801208e:	db0e      	blt.n	80120ae <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012094:	4b7b      	ldr	r3, [pc, #492]	; (8012284 <tcp_receive+0x270>)
 8012096:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012098:	429a      	cmp	r2, r3
 801209a:	d125      	bne.n	80120e8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801209c:	4b7a      	ldr	r3, [pc, #488]	; (8012288 <tcp_receive+0x274>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	89db      	ldrh	r3, [r3, #14]
 80120a2:	b29a      	uxth	r2, r3
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d91c      	bls.n	80120e8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80120ae:	4b76      	ldr	r3, [pc, #472]	; (8012288 <tcp_receive+0x274>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	89db      	ldrh	r3, [r3, #14]
 80120b4:	b29a      	uxth	r2, r3
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80120c8:	429a      	cmp	r2, r3
 80120ca:	d205      	bcs.n	80120d8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80120d8:	4b69      	ldr	r3, [pc, #420]	; (8012280 <tcp_receive+0x26c>)
 80120da:	681a      	ldr	r2, [r3, #0]
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80120e0:	4b68      	ldr	r3, [pc, #416]	; (8012284 <tcp_receive+0x270>)
 80120e2:	681a      	ldr	r2, [r3, #0]
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80120e8:	4b66      	ldr	r3, [pc, #408]	; (8012284 <tcp_receive+0x270>)
 80120ea:	681a      	ldr	r2, [r3, #0]
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120f0:	1ad3      	subs	r3, r2, r3
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	dc58      	bgt.n	80121a8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80120f6:	4b65      	ldr	r3, [pc, #404]	; (801228c <tcp_receive+0x278>)
 80120f8:	881b      	ldrh	r3, [r3, #0]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d14b      	bne.n	8012196 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012102:	687a      	ldr	r2, [r7, #4]
 8012104:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8012108:	4413      	add	r3, r2
 801210a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801210c:	429a      	cmp	r2, r3
 801210e:	d142      	bne.n	8012196 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012116:	2b00      	cmp	r3, #0
 8012118:	db3d      	blt.n	8012196 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801211e:	4b59      	ldr	r3, [pc, #356]	; (8012284 <tcp_receive+0x270>)
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	429a      	cmp	r2, r3
 8012124:	d137      	bne.n	8012196 <tcp_receive+0x182>
              found_dupack = 1;
 8012126:	2301      	movs	r3, #1
 8012128:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012130:	2bff      	cmp	r3, #255	; 0xff
 8012132:	d007      	beq.n	8012144 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801213a:	3301      	adds	r3, #1
 801213c:	b2da      	uxtb	r2, r3
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801214a:	2b03      	cmp	r3, #3
 801214c:	d91b      	bls.n	8012186 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012158:	4413      	add	r3, r2
 801215a:	b29a      	uxth	r2, r3
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012162:	429a      	cmp	r2, r3
 8012164:	d30a      	bcc.n	801217c <tcp_receive+0x168>
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012170:	4413      	add	r3, r2
 8012172:	b29a      	uxth	r2, r3
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801217a:	e004      	b.n	8012186 <tcp_receive+0x172>
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012182:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801218c:	2b02      	cmp	r3, #2
 801218e:	d902      	bls.n	8012196 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f002 fb43 	bl	801481c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012198:	2b00      	cmp	r3, #0
 801219a:	f040 8161 	bne.w	8012460 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2200      	movs	r2, #0
 80121a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80121a6:	e15b      	b.n	8012460 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80121a8:	4b36      	ldr	r3, [pc, #216]	; (8012284 <tcp_receive+0x270>)
 80121aa:	681a      	ldr	r2, [r3, #0]
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121b0:	1ad3      	subs	r3, r2, r3
 80121b2:	3b01      	subs	r3, #1
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	f2c0 814e 	blt.w	8012456 <tcp_receive+0x442>
 80121ba:	4b32      	ldr	r3, [pc, #200]	; (8012284 <tcp_receive+0x270>)
 80121bc:	681a      	ldr	r2, [r3, #0]
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121c2:	1ad3      	subs	r3, r2, r3
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	f300 8146 	bgt.w	8012456 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	8b5b      	ldrh	r3, [r3, #26]
 80121ce:	f003 0304 	and.w	r3, r3, #4
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d010      	beq.n	80121f8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	8b5b      	ldrh	r3, [r3, #26]
 80121da:	f023 0304 	bic.w	r3, r3, #4
 80121de:	b29a      	uxth	r2, r3
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2200      	movs	r2, #0
 80121f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2200      	movs	r2, #0
 80121fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012206:	10db      	asrs	r3, r3, #3
 8012208:	b21b      	sxth	r3, r3
 801220a:	b29a      	uxth	r2, r3
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012212:	b29b      	uxth	r3, r3
 8012214:	4413      	add	r3, r2
 8012216:	b29b      	uxth	r3, r3
 8012218:	b21a      	sxth	r2, r3
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012220:	4b18      	ldr	r3, [pc, #96]	; (8012284 <tcp_receive+0x270>)
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	b29a      	uxth	r2, r3
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801222a:	b29b      	uxth	r3, r3
 801222c:	1ad3      	subs	r3, r2, r3
 801222e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	2200      	movs	r2, #0
 8012234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012238:	4b12      	ldr	r3, [pc, #72]	; (8012284 <tcp_receive+0x270>)
 801223a:	681a      	ldr	r2, [r3, #0]
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	7d1b      	ldrb	r3, [r3, #20]
 8012244:	2b03      	cmp	r3, #3
 8012246:	f240 8097 	bls.w	8012378 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012256:	429a      	cmp	r2, r3
 8012258:	d245      	bcs.n	80122e6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	8b5b      	ldrh	r3, [r3, #26]
 801225e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012262:	2b00      	cmp	r3, #0
 8012264:	d014      	beq.n	8012290 <tcp_receive+0x27c>
 8012266:	2301      	movs	r3, #1
 8012268:	e013      	b.n	8012292 <tcp_receive+0x27e>
 801226a:	bf00      	nop
 801226c:	080205bc 	.word	0x080205bc
 8012270:	080208ec 	.word	0x080208ec
 8012274:	08020608 	.word	0x08020608
 8012278:	08020908 	.word	0x08020908
 801227c:	200113fc 	.word	0x200113fc
 8012280:	200113f0 	.word	0x200113f0
 8012284:	200113f4 	.word	0x200113f4
 8012288:	200113e0 	.word	0x200113e0
 801228c:	200113fa 	.word	0x200113fa
 8012290:	2302      	movs	r3, #2
 8012292:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012296:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801229a:	b29a      	uxth	r2, r3
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122a0:	fb12 f303 	smulbb	r3, r2, r3
 80122a4:	b29b      	uxth	r3, r3
 80122a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80122a8:	4293      	cmp	r3, r2
 80122aa:	bf28      	it	cs
 80122ac:	4613      	movcs	r3, r2
 80122ae:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80122b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80122b8:	4413      	add	r3, r2
 80122ba:	b29a      	uxth	r2, r3
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80122c2:	429a      	cmp	r2, r3
 80122c4:	d309      	bcc.n	80122da <tcp_receive+0x2c6>
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80122cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80122ce:	4413      	add	r3, r2
 80122d0:	b29a      	uxth	r2, r3
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80122d8:	e04e      	b.n	8012378 <tcp_receive+0x364>
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80122e4:	e048      	b.n	8012378 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80122ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80122ee:	4413      	add	r3, r2
 80122f0:	b29a      	uxth	r2, r3
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80122f8:	429a      	cmp	r2, r3
 80122fa:	d309      	bcc.n	8012310 <tcp_receive+0x2fc>
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012302:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012304:	4413      	add	r3, r2
 8012306:	b29a      	uxth	r2, r3
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801230e:	e004      	b.n	801231a <tcp_receive+0x306>
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012316:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012326:	429a      	cmp	r2, r3
 8012328:	d326      	bcc.n	8012378 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012336:	1ad3      	subs	r3, r2, r3
 8012338:	b29a      	uxth	r2, r3
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801234a:	4413      	add	r3, r2
 801234c:	b29a      	uxth	r2, r3
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012354:	429a      	cmp	r2, r3
 8012356:	d30a      	bcc.n	801236e <tcp_receive+0x35a>
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012362:	4413      	add	r3, r2
 8012364:	b29a      	uxth	r2, r3
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801236c:	e004      	b.n	8012378 <tcp_receive+0x364>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012374:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012380:	4a98      	ldr	r2, [pc, #608]	; (80125e4 <tcp_receive+0x5d0>)
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f7ff fdca 	bl	8011f1c <tcp_free_acked_segments>
 8012388:	4602      	mov	r2, r0
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012396:	4a94      	ldr	r2, [pc, #592]	; (80125e8 <tcp_receive+0x5d4>)
 8012398:	6878      	ldr	r0, [r7, #4]
 801239a:	f7ff fdbf 	bl	8011f1c <tcp_free_acked_segments>
 801239e:	4602      	mov	r2, r0
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d104      	bne.n	80123b6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123b2:	861a      	strh	r2, [r3, #48]	; 0x30
 80123b4:	e002      	b.n	80123bc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	2200      	movs	r2, #0
 80123ba:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2200      	movs	r2, #0
 80123c0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d103      	bne.n	80123d2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2200      	movs	r2, #0
 80123ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80123d8:	4b84      	ldr	r3, [pc, #528]	; (80125ec <tcp_receive+0x5d8>)
 80123da:	881b      	ldrh	r3, [r3, #0]
 80123dc:	4413      	add	r3, r2
 80123de:	b29a      	uxth	r2, r3
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	8b5b      	ldrh	r3, [r3, #26]
 80123ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d035      	beq.n	801245e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d118      	bne.n	801242c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d00c      	beq.n	801241c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801240a:	68db      	ldr	r3, [r3, #12]
 801240c:	685b      	ldr	r3, [r3, #4]
 801240e:	4618      	mov	r0, r3
 8012410:	f7fa fe9f 	bl	800d152 <lwip_htonl>
 8012414:	4603      	mov	r3, r0
 8012416:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012418:	2b00      	cmp	r3, #0
 801241a:	dc20      	bgt.n	801245e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	8b5b      	ldrh	r3, [r3, #26]
 8012420:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012424:	b29a      	uxth	r2, r3
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801242a:	e018      	b.n	801245e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012434:	68db      	ldr	r3, [r3, #12]
 8012436:	685b      	ldr	r3, [r3, #4]
 8012438:	4618      	mov	r0, r3
 801243a:	f7fa fe8a 	bl	800d152 <lwip_htonl>
 801243e:	4603      	mov	r3, r0
 8012440:	1ae3      	subs	r3, r4, r3
 8012442:	2b00      	cmp	r3, #0
 8012444:	dc0b      	bgt.n	801245e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	8b5b      	ldrh	r3, [r3, #26]
 801244a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801244e:	b29a      	uxth	r2, r3
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012454:	e003      	b.n	801245e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012456:	6878      	ldr	r0, [r7, #4]
 8012458:	f002 fbce 	bl	8014bf8 <tcp_send_empty_ack>
 801245c:	e000      	b.n	8012460 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801245e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012464:	2b00      	cmp	r3, #0
 8012466:	d05b      	beq.n	8012520 <tcp_receive+0x50c>
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801246c:	4b60      	ldr	r3, [pc, #384]	; (80125f0 <tcp_receive+0x5dc>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	1ad3      	subs	r3, r2, r3
 8012472:	2b00      	cmp	r3, #0
 8012474:	da54      	bge.n	8012520 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012476:	4b5f      	ldr	r3, [pc, #380]	; (80125f4 <tcp_receive+0x5e0>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	b29a      	uxth	r2, r3
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012480:	b29b      	uxth	r3, r3
 8012482:	1ad3      	subs	r3, r2, r3
 8012484:	b29b      	uxth	r3, r3
 8012486:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801248a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012494:	10db      	asrs	r3, r3, #3
 8012496:	b21b      	sxth	r3, r3
 8012498:	b29b      	uxth	r3, r3
 801249a:	1ad3      	subs	r3, r2, r3
 801249c:	b29b      	uxth	r3, r3
 801249e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80124a8:	b29a      	uxth	r2, r3
 80124aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80124ae:	4413      	add	r3, r2
 80124b0:	b29b      	uxth	r3, r3
 80124b2:	b21a      	sxth	r2, r3
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80124b8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80124bc:	2b00      	cmp	r3, #0
 80124be:	da05      	bge.n	80124cc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80124c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80124c4:	425b      	negs	r3, r3
 80124c6:	b29b      	uxth	r3, r3
 80124c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80124cc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80124d6:	109b      	asrs	r3, r3, #2
 80124d8:	b21b      	sxth	r3, r3
 80124da:	b29b      	uxth	r3, r3
 80124dc:	1ad3      	subs	r3, r2, r3
 80124de:	b29b      	uxth	r3, r3
 80124e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80124ea:	b29a      	uxth	r2, r3
 80124ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80124f0:	4413      	add	r3, r2
 80124f2:	b29b      	uxth	r3, r3
 80124f4:	b21a      	sxth	r2, r3
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012500:	10db      	asrs	r3, r3, #3
 8012502:	b21b      	sxth	r3, r3
 8012504:	b29a      	uxth	r2, r3
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801250c:	b29b      	uxth	r3, r3
 801250e:	4413      	add	r3, r2
 8012510:	b29b      	uxth	r3, r3
 8012512:	b21a      	sxth	r2, r3
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2200      	movs	r2, #0
 801251e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012520:	4b35      	ldr	r3, [pc, #212]	; (80125f8 <tcp_receive+0x5e4>)
 8012522:	881b      	ldrh	r3, [r3, #0]
 8012524:	2b00      	cmp	r3, #0
 8012526:	f000 84e2 	beq.w	8012eee <tcp_receive+0xeda>
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	7d1b      	ldrb	r3, [r3, #20]
 801252e:	2b06      	cmp	r3, #6
 8012530:	f200 84dd 	bhi.w	8012eee <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012538:	4b30      	ldr	r3, [pc, #192]	; (80125fc <tcp_receive+0x5e8>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	1ad3      	subs	r3, r2, r3
 801253e:	3b01      	subs	r3, #1
 8012540:	2b00      	cmp	r3, #0
 8012542:	f2c0 808f 	blt.w	8012664 <tcp_receive+0x650>
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801254a:	4b2b      	ldr	r3, [pc, #172]	; (80125f8 <tcp_receive+0x5e4>)
 801254c:	881b      	ldrh	r3, [r3, #0]
 801254e:	4619      	mov	r1, r3
 8012550:	4b2a      	ldr	r3, [pc, #168]	; (80125fc <tcp_receive+0x5e8>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	440b      	add	r3, r1
 8012556:	1ad3      	subs	r3, r2, r3
 8012558:	3301      	adds	r3, #1
 801255a:	2b00      	cmp	r3, #0
 801255c:	f300 8082 	bgt.w	8012664 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012560:	4b27      	ldr	r3, [pc, #156]	; (8012600 <tcp_receive+0x5ec>)
 8012562:	685b      	ldr	r3, [r3, #4]
 8012564:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801256a:	4b24      	ldr	r3, [pc, #144]	; (80125fc <tcp_receive+0x5e8>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	1ad3      	subs	r3, r2, r3
 8012570:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012572:	4b23      	ldr	r3, [pc, #140]	; (8012600 <tcp_receive+0x5ec>)
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d106      	bne.n	8012588 <tcp_receive+0x574>
 801257a:	4b22      	ldr	r3, [pc, #136]	; (8012604 <tcp_receive+0x5f0>)
 801257c:	f240 5294 	movw	r2, #1428	; 0x594
 8012580:	4921      	ldr	r1, [pc, #132]	; (8012608 <tcp_receive+0x5f4>)
 8012582:	4822      	ldr	r0, [pc, #136]	; (801260c <tcp_receive+0x5f8>)
 8012584:	f00b f84c 	bl	801d620 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801258a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801258e:	4293      	cmp	r3, r2
 8012590:	d906      	bls.n	80125a0 <tcp_receive+0x58c>
 8012592:	4b1c      	ldr	r3, [pc, #112]	; (8012604 <tcp_receive+0x5f0>)
 8012594:	f240 5295 	movw	r2, #1429	; 0x595
 8012598:	491d      	ldr	r1, [pc, #116]	; (8012610 <tcp_receive+0x5fc>)
 801259a:	481c      	ldr	r0, [pc, #112]	; (801260c <tcp_receive+0x5f8>)
 801259c:	f00b f840 	bl	801d620 <iprintf>
      off = (u16_t)off32;
 80125a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80125a6:	4b16      	ldr	r3, [pc, #88]	; (8012600 <tcp_receive+0x5ec>)
 80125a8:	685b      	ldr	r3, [r3, #4]
 80125aa:	891b      	ldrh	r3, [r3, #8]
 80125ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80125b0:	429a      	cmp	r2, r3
 80125b2:	d906      	bls.n	80125c2 <tcp_receive+0x5ae>
 80125b4:	4b13      	ldr	r3, [pc, #76]	; (8012604 <tcp_receive+0x5f0>)
 80125b6:	f240 5297 	movw	r2, #1431	; 0x597
 80125ba:	4916      	ldr	r1, [pc, #88]	; (8012614 <tcp_receive+0x600>)
 80125bc:	4813      	ldr	r0, [pc, #76]	; (801260c <tcp_receive+0x5f8>)
 80125be:	f00b f82f 	bl	801d620 <iprintf>
      inseg.len -= off;
 80125c2:	4b0f      	ldr	r3, [pc, #60]	; (8012600 <tcp_receive+0x5ec>)
 80125c4:	891a      	ldrh	r2, [r3, #8]
 80125c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125ca:	1ad3      	subs	r3, r2, r3
 80125cc:	b29a      	uxth	r2, r3
 80125ce:	4b0c      	ldr	r3, [pc, #48]	; (8012600 <tcp_receive+0x5ec>)
 80125d0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80125d2:	4b0b      	ldr	r3, [pc, #44]	; (8012600 <tcp_receive+0x5ec>)
 80125d4:	685b      	ldr	r3, [r3, #4]
 80125d6:	891a      	ldrh	r2, [r3, #8]
 80125d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125dc:	1ad3      	subs	r3, r2, r3
 80125de:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80125e0:	e02a      	b.n	8012638 <tcp_receive+0x624>
 80125e2:	bf00      	nop
 80125e4:	08020924 	.word	0x08020924
 80125e8:	0802092c 	.word	0x0802092c
 80125ec:	200113f8 	.word	0x200113f8
 80125f0:	200113f4 	.word	0x200113f4
 80125f4:	200113b8 	.word	0x200113b8
 80125f8:	200113fa 	.word	0x200113fa
 80125fc:	200113f0 	.word	0x200113f0
 8012600:	200113d0 	.word	0x200113d0
 8012604:	080205bc 	.word	0x080205bc
 8012608:	08020934 	.word	0x08020934
 801260c:	08020608 	.word	0x08020608
 8012610:	08020944 	.word	0x08020944
 8012614:	08020954 	.word	0x08020954
        off -= p->len;
 8012618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801261a:	895b      	ldrh	r3, [r3, #10]
 801261c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012620:	1ad3      	subs	r3, r2, r3
 8012622:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012628:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801262a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801262c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801262e:	2200      	movs	r2, #0
 8012630:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801263a:	895b      	ldrh	r3, [r3, #10]
 801263c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012640:	429a      	cmp	r2, r3
 8012642:	d8e9      	bhi.n	8012618 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012644:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012648:	4619      	mov	r1, r3
 801264a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801264c:	f7fc f8e8 	bl	800e820 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012654:	4a91      	ldr	r2, [pc, #580]	; (801289c <tcp_receive+0x888>)
 8012656:	6013      	str	r3, [r2, #0]
 8012658:	4b91      	ldr	r3, [pc, #580]	; (80128a0 <tcp_receive+0x88c>)
 801265a:	68db      	ldr	r3, [r3, #12]
 801265c:	4a8f      	ldr	r2, [pc, #572]	; (801289c <tcp_receive+0x888>)
 801265e:	6812      	ldr	r2, [r2, #0]
 8012660:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012662:	e00d      	b.n	8012680 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012664:	4b8d      	ldr	r3, [pc, #564]	; (801289c <tcp_receive+0x888>)
 8012666:	681a      	ldr	r2, [r3, #0]
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801266c:	1ad3      	subs	r3, r2, r3
 801266e:	2b00      	cmp	r3, #0
 8012670:	da06      	bge.n	8012680 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	8b5b      	ldrh	r3, [r3, #26]
 8012676:	f043 0302 	orr.w	r3, r3, #2
 801267a:	b29a      	uxth	r2, r3
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012680:	4b86      	ldr	r3, [pc, #536]	; (801289c <tcp_receive+0x888>)
 8012682:	681a      	ldr	r2, [r3, #0]
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012688:	1ad3      	subs	r3, r2, r3
 801268a:	2b00      	cmp	r3, #0
 801268c:	f2c0 842a 	blt.w	8012ee4 <tcp_receive+0xed0>
 8012690:	4b82      	ldr	r3, [pc, #520]	; (801289c <tcp_receive+0x888>)
 8012692:	681a      	ldr	r2, [r3, #0]
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012698:	6879      	ldr	r1, [r7, #4]
 801269a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801269c:	440b      	add	r3, r1
 801269e:	1ad3      	subs	r3, r2, r3
 80126a0:	3301      	adds	r3, #1
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	f300 841e 	bgt.w	8012ee4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80126ac:	4b7b      	ldr	r3, [pc, #492]	; (801289c <tcp_receive+0x888>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	429a      	cmp	r2, r3
 80126b2:	f040 829a 	bne.w	8012bea <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80126b6:	4b7a      	ldr	r3, [pc, #488]	; (80128a0 <tcp_receive+0x88c>)
 80126b8:	891c      	ldrh	r4, [r3, #8]
 80126ba:	4b79      	ldr	r3, [pc, #484]	; (80128a0 <tcp_receive+0x88c>)
 80126bc:	68db      	ldr	r3, [r3, #12]
 80126be:	899b      	ldrh	r3, [r3, #12]
 80126c0:	b29b      	uxth	r3, r3
 80126c2:	4618      	mov	r0, r3
 80126c4:	f7fa fd30 	bl	800d128 <lwip_htons>
 80126c8:	4603      	mov	r3, r0
 80126ca:	b2db      	uxtb	r3, r3
 80126cc:	f003 0303 	and.w	r3, r3, #3
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d001      	beq.n	80126d8 <tcp_receive+0x6c4>
 80126d4:	2301      	movs	r3, #1
 80126d6:	e000      	b.n	80126da <tcp_receive+0x6c6>
 80126d8:	2300      	movs	r3, #0
 80126da:	4423      	add	r3, r4
 80126dc:	b29a      	uxth	r2, r3
 80126de:	4b71      	ldr	r3, [pc, #452]	; (80128a4 <tcp_receive+0x890>)
 80126e0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80126e6:	4b6f      	ldr	r3, [pc, #444]	; (80128a4 <tcp_receive+0x890>)
 80126e8:	881b      	ldrh	r3, [r3, #0]
 80126ea:	429a      	cmp	r2, r3
 80126ec:	d275      	bcs.n	80127da <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80126ee:	4b6c      	ldr	r3, [pc, #432]	; (80128a0 <tcp_receive+0x88c>)
 80126f0:	68db      	ldr	r3, [r3, #12]
 80126f2:	899b      	ldrh	r3, [r3, #12]
 80126f4:	b29b      	uxth	r3, r3
 80126f6:	4618      	mov	r0, r3
 80126f8:	f7fa fd16 	bl	800d128 <lwip_htons>
 80126fc:	4603      	mov	r3, r0
 80126fe:	b2db      	uxtb	r3, r3
 8012700:	f003 0301 	and.w	r3, r3, #1
 8012704:	2b00      	cmp	r3, #0
 8012706:	d01f      	beq.n	8012748 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012708:	4b65      	ldr	r3, [pc, #404]	; (80128a0 <tcp_receive+0x88c>)
 801270a:	68db      	ldr	r3, [r3, #12]
 801270c:	899b      	ldrh	r3, [r3, #12]
 801270e:	b29b      	uxth	r3, r3
 8012710:	b21b      	sxth	r3, r3
 8012712:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012716:	b21c      	sxth	r4, r3
 8012718:	4b61      	ldr	r3, [pc, #388]	; (80128a0 <tcp_receive+0x88c>)
 801271a:	68db      	ldr	r3, [r3, #12]
 801271c:	899b      	ldrh	r3, [r3, #12]
 801271e:	b29b      	uxth	r3, r3
 8012720:	4618      	mov	r0, r3
 8012722:	f7fa fd01 	bl	800d128 <lwip_htons>
 8012726:	4603      	mov	r3, r0
 8012728:	b2db      	uxtb	r3, r3
 801272a:	b29b      	uxth	r3, r3
 801272c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012730:	b29b      	uxth	r3, r3
 8012732:	4618      	mov	r0, r3
 8012734:	f7fa fcf8 	bl	800d128 <lwip_htons>
 8012738:	4603      	mov	r3, r0
 801273a:	b21b      	sxth	r3, r3
 801273c:	4323      	orrs	r3, r4
 801273e:	b21a      	sxth	r2, r3
 8012740:	4b57      	ldr	r3, [pc, #348]	; (80128a0 <tcp_receive+0x88c>)
 8012742:	68db      	ldr	r3, [r3, #12]
 8012744:	b292      	uxth	r2, r2
 8012746:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801274c:	4b54      	ldr	r3, [pc, #336]	; (80128a0 <tcp_receive+0x88c>)
 801274e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012750:	4b53      	ldr	r3, [pc, #332]	; (80128a0 <tcp_receive+0x88c>)
 8012752:	68db      	ldr	r3, [r3, #12]
 8012754:	899b      	ldrh	r3, [r3, #12]
 8012756:	b29b      	uxth	r3, r3
 8012758:	4618      	mov	r0, r3
 801275a:	f7fa fce5 	bl	800d128 <lwip_htons>
 801275e:	4603      	mov	r3, r0
 8012760:	b2db      	uxtb	r3, r3
 8012762:	f003 0302 	and.w	r3, r3, #2
 8012766:	2b00      	cmp	r3, #0
 8012768:	d005      	beq.n	8012776 <tcp_receive+0x762>
            inseg.len -= 1;
 801276a:	4b4d      	ldr	r3, [pc, #308]	; (80128a0 <tcp_receive+0x88c>)
 801276c:	891b      	ldrh	r3, [r3, #8]
 801276e:	3b01      	subs	r3, #1
 8012770:	b29a      	uxth	r2, r3
 8012772:	4b4b      	ldr	r3, [pc, #300]	; (80128a0 <tcp_receive+0x88c>)
 8012774:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012776:	4b4a      	ldr	r3, [pc, #296]	; (80128a0 <tcp_receive+0x88c>)
 8012778:	685b      	ldr	r3, [r3, #4]
 801277a:	4a49      	ldr	r2, [pc, #292]	; (80128a0 <tcp_receive+0x88c>)
 801277c:	8912      	ldrh	r2, [r2, #8]
 801277e:	4611      	mov	r1, r2
 8012780:	4618      	mov	r0, r3
 8012782:	f7fb ff4d 	bl	800e620 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012786:	4b46      	ldr	r3, [pc, #280]	; (80128a0 <tcp_receive+0x88c>)
 8012788:	891c      	ldrh	r4, [r3, #8]
 801278a:	4b45      	ldr	r3, [pc, #276]	; (80128a0 <tcp_receive+0x88c>)
 801278c:	68db      	ldr	r3, [r3, #12]
 801278e:	899b      	ldrh	r3, [r3, #12]
 8012790:	b29b      	uxth	r3, r3
 8012792:	4618      	mov	r0, r3
 8012794:	f7fa fcc8 	bl	800d128 <lwip_htons>
 8012798:	4603      	mov	r3, r0
 801279a:	b2db      	uxtb	r3, r3
 801279c:	f003 0303 	and.w	r3, r3, #3
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d001      	beq.n	80127a8 <tcp_receive+0x794>
 80127a4:	2301      	movs	r3, #1
 80127a6:	e000      	b.n	80127aa <tcp_receive+0x796>
 80127a8:	2300      	movs	r3, #0
 80127aa:	4423      	add	r3, r4
 80127ac:	b29a      	uxth	r2, r3
 80127ae:	4b3d      	ldr	r3, [pc, #244]	; (80128a4 <tcp_receive+0x890>)
 80127b0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80127b2:	4b3c      	ldr	r3, [pc, #240]	; (80128a4 <tcp_receive+0x890>)
 80127b4:	881b      	ldrh	r3, [r3, #0]
 80127b6:	461a      	mov	r2, r3
 80127b8:	4b38      	ldr	r3, [pc, #224]	; (801289c <tcp_receive+0x888>)
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	441a      	add	r2, r3
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127c2:	6879      	ldr	r1, [r7, #4]
 80127c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80127c6:	440b      	add	r3, r1
 80127c8:	429a      	cmp	r2, r3
 80127ca:	d006      	beq.n	80127da <tcp_receive+0x7c6>
 80127cc:	4b36      	ldr	r3, [pc, #216]	; (80128a8 <tcp_receive+0x894>)
 80127ce:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80127d2:	4936      	ldr	r1, [pc, #216]	; (80128ac <tcp_receive+0x898>)
 80127d4:	4836      	ldr	r0, [pc, #216]	; (80128b0 <tcp_receive+0x89c>)
 80127d6:	f00a ff23 	bl	801d620 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127de:	2b00      	cmp	r3, #0
 80127e0:	f000 80e7 	beq.w	80129b2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80127e4:	4b2e      	ldr	r3, [pc, #184]	; (80128a0 <tcp_receive+0x88c>)
 80127e6:	68db      	ldr	r3, [r3, #12]
 80127e8:	899b      	ldrh	r3, [r3, #12]
 80127ea:	b29b      	uxth	r3, r3
 80127ec:	4618      	mov	r0, r3
 80127ee:	f7fa fc9b 	bl	800d128 <lwip_htons>
 80127f2:	4603      	mov	r3, r0
 80127f4:	b2db      	uxtb	r3, r3
 80127f6:	f003 0301 	and.w	r3, r3, #1
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d010      	beq.n	8012820 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80127fe:	e00a      	b.n	8012816 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012804:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801280a:	681a      	ldr	r2, [r3, #0]
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012810:	68f8      	ldr	r0, [r7, #12]
 8012812:	f7fd fcc4 	bl	801019e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801281a:	2b00      	cmp	r3, #0
 801281c:	d1f0      	bne.n	8012800 <tcp_receive+0x7ec>
 801281e:	e0c8      	b.n	80129b2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012824:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012826:	e052      	b.n	80128ce <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801282a:	68db      	ldr	r3, [r3, #12]
 801282c:	899b      	ldrh	r3, [r3, #12]
 801282e:	b29b      	uxth	r3, r3
 8012830:	4618      	mov	r0, r3
 8012832:	f7fa fc79 	bl	800d128 <lwip_htons>
 8012836:	4603      	mov	r3, r0
 8012838:	b2db      	uxtb	r3, r3
 801283a:	f003 0301 	and.w	r3, r3, #1
 801283e:	2b00      	cmp	r3, #0
 8012840:	d03d      	beq.n	80128be <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012842:	4b17      	ldr	r3, [pc, #92]	; (80128a0 <tcp_receive+0x88c>)
 8012844:	68db      	ldr	r3, [r3, #12]
 8012846:	899b      	ldrh	r3, [r3, #12]
 8012848:	b29b      	uxth	r3, r3
 801284a:	4618      	mov	r0, r3
 801284c:	f7fa fc6c 	bl	800d128 <lwip_htons>
 8012850:	4603      	mov	r3, r0
 8012852:	b2db      	uxtb	r3, r3
 8012854:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012858:	2b00      	cmp	r3, #0
 801285a:	d130      	bne.n	80128be <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801285c:	4b10      	ldr	r3, [pc, #64]	; (80128a0 <tcp_receive+0x88c>)
 801285e:	68db      	ldr	r3, [r3, #12]
 8012860:	899b      	ldrh	r3, [r3, #12]
 8012862:	b29c      	uxth	r4, r3
 8012864:	2001      	movs	r0, #1
 8012866:	f7fa fc5f 	bl	800d128 <lwip_htons>
 801286a:	4603      	mov	r3, r0
 801286c:	461a      	mov	r2, r3
 801286e:	4b0c      	ldr	r3, [pc, #48]	; (80128a0 <tcp_receive+0x88c>)
 8012870:	68db      	ldr	r3, [r3, #12]
 8012872:	4322      	orrs	r2, r4
 8012874:	b292      	uxth	r2, r2
 8012876:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012878:	4b09      	ldr	r3, [pc, #36]	; (80128a0 <tcp_receive+0x88c>)
 801287a:	891c      	ldrh	r4, [r3, #8]
 801287c:	4b08      	ldr	r3, [pc, #32]	; (80128a0 <tcp_receive+0x88c>)
 801287e:	68db      	ldr	r3, [r3, #12]
 8012880:	899b      	ldrh	r3, [r3, #12]
 8012882:	b29b      	uxth	r3, r3
 8012884:	4618      	mov	r0, r3
 8012886:	f7fa fc4f 	bl	800d128 <lwip_htons>
 801288a:	4603      	mov	r3, r0
 801288c:	b2db      	uxtb	r3, r3
 801288e:	f003 0303 	and.w	r3, r3, #3
 8012892:	2b00      	cmp	r3, #0
 8012894:	d00e      	beq.n	80128b4 <tcp_receive+0x8a0>
 8012896:	2301      	movs	r3, #1
 8012898:	e00d      	b.n	80128b6 <tcp_receive+0x8a2>
 801289a:	bf00      	nop
 801289c:	200113f0 	.word	0x200113f0
 80128a0:	200113d0 	.word	0x200113d0
 80128a4:	200113fa 	.word	0x200113fa
 80128a8:	080205bc 	.word	0x080205bc
 80128ac:	08020964 	.word	0x08020964
 80128b0:	08020608 	.word	0x08020608
 80128b4:	2300      	movs	r3, #0
 80128b6:	4423      	add	r3, r4
 80128b8:	b29a      	uxth	r2, r3
 80128ba:	4b98      	ldr	r3, [pc, #608]	; (8012b1c <tcp_receive+0xb08>)
 80128bc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80128be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128c0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80128c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80128c8:	6938      	ldr	r0, [r7, #16]
 80128ca:	f7fd fc68 	bl	801019e <tcp_seg_free>
            while (next &&
 80128ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d00e      	beq.n	80128f2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80128d4:	4b91      	ldr	r3, [pc, #580]	; (8012b1c <tcp_receive+0xb08>)
 80128d6:	881b      	ldrh	r3, [r3, #0]
 80128d8:	461a      	mov	r2, r3
 80128da:	4b91      	ldr	r3, [pc, #580]	; (8012b20 <tcp_receive+0xb0c>)
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	441a      	add	r2, r3
 80128e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128e2:	68db      	ldr	r3, [r3, #12]
 80128e4:	685b      	ldr	r3, [r3, #4]
 80128e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80128e8:	8909      	ldrh	r1, [r1, #8]
 80128ea:	440b      	add	r3, r1
 80128ec:	1ad3      	subs	r3, r2, r3
            while (next &&
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	da9a      	bge.n	8012828 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80128f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d059      	beq.n	80129ac <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80128f8:	4b88      	ldr	r3, [pc, #544]	; (8012b1c <tcp_receive+0xb08>)
 80128fa:	881b      	ldrh	r3, [r3, #0]
 80128fc:	461a      	mov	r2, r3
 80128fe:	4b88      	ldr	r3, [pc, #544]	; (8012b20 <tcp_receive+0xb0c>)
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	441a      	add	r2, r3
 8012904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012906:	68db      	ldr	r3, [r3, #12]
 8012908:	685b      	ldr	r3, [r3, #4]
 801290a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801290c:	2b00      	cmp	r3, #0
 801290e:	dd4d      	ble.n	80129ac <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012912:	68db      	ldr	r3, [r3, #12]
 8012914:	685b      	ldr	r3, [r3, #4]
 8012916:	b29a      	uxth	r2, r3
 8012918:	4b81      	ldr	r3, [pc, #516]	; (8012b20 <tcp_receive+0xb0c>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	b29b      	uxth	r3, r3
 801291e:	1ad3      	subs	r3, r2, r3
 8012920:	b29a      	uxth	r2, r3
 8012922:	4b80      	ldr	r3, [pc, #512]	; (8012b24 <tcp_receive+0xb10>)
 8012924:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012926:	4b7f      	ldr	r3, [pc, #508]	; (8012b24 <tcp_receive+0xb10>)
 8012928:	68db      	ldr	r3, [r3, #12]
 801292a:	899b      	ldrh	r3, [r3, #12]
 801292c:	b29b      	uxth	r3, r3
 801292e:	4618      	mov	r0, r3
 8012930:	f7fa fbfa 	bl	800d128 <lwip_htons>
 8012934:	4603      	mov	r3, r0
 8012936:	b2db      	uxtb	r3, r3
 8012938:	f003 0302 	and.w	r3, r3, #2
 801293c:	2b00      	cmp	r3, #0
 801293e:	d005      	beq.n	801294c <tcp_receive+0x938>
                inseg.len -= 1;
 8012940:	4b78      	ldr	r3, [pc, #480]	; (8012b24 <tcp_receive+0xb10>)
 8012942:	891b      	ldrh	r3, [r3, #8]
 8012944:	3b01      	subs	r3, #1
 8012946:	b29a      	uxth	r2, r3
 8012948:	4b76      	ldr	r3, [pc, #472]	; (8012b24 <tcp_receive+0xb10>)
 801294a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801294c:	4b75      	ldr	r3, [pc, #468]	; (8012b24 <tcp_receive+0xb10>)
 801294e:	685b      	ldr	r3, [r3, #4]
 8012950:	4a74      	ldr	r2, [pc, #464]	; (8012b24 <tcp_receive+0xb10>)
 8012952:	8912      	ldrh	r2, [r2, #8]
 8012954:	4611      	mov	r1, r2
 8012956:	4618      	mov	r0, r3
 8012958:	f7fb fe62 	bl	800e620 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801295c:	4b71      	ldr	r3, [pc, #452]	; (8012b24 <tcp_receive+0xb10>)
 801295e:	891c      	ldrh	r4, [r3, #8]
 8012960:	4b70      	ldr	r3, [pc, #448]	; (8012b24 <tcp_receive+0xb10>)
 8012962:	68db      	ldr	r3, [r3, #12]
 8012964:	899b      	ldrh	r3, [r3, #12]
 8012966:	b29b      	uxth	r3, r3
 8012968:	4618      	mov	r0, r3
 801296a:	f7fa fbdd 	bl	800d128 <lwip_htons>
 801296e:	4603      	mov	r3, r0
 8012970:	b2db      	uxtb	r3, r3
 8012972:	f003 0303 	and.w	r3, r3, #3
 8012976:	2b00      	cmp	r3, #0
 8012978:	d001      	beq.n	801297e <tcp_receive+0x96a>
 801297a:	2301      	movs	r3, #1
 801297c:	e000      	b.n	8012980 <tcp_receive+0x96c>
 801297e:	2300      	movs	r3, #0
 8012980:	4423      	add	r3, r4
 8012982:	b29a      	uxth	r2, r3
 8012984:	4b65      	ldr	r3, [pc, #404]	; (8012b1c <tcp_receive+0xb08>)
 8012986:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012988:	4b64      	ldr	r3, [pc, #400]	; (8012b1c <tcp_receive+0xb08>)
 801298a:	881b      	ldrh	r3, [r3, #0]
 801298c:	461a      	mov	r2, r3
 801298e:	4b64      	ldr	r3, [pc, #400]	; (8012b20 <tcp_receive+0xb0c>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	441a      	add	r2, r3
 8012994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012996:	68db      	ldr	r3, [r3, #12]
 8012998:	685b      	ldr	r3, [r3, #4]
 801299a:	429a      	cmp	r2, r3
 801299c:	d006      	beq.n	80129ac <tcp_receive+0x998>
 801299e:	4b62      	ldr	r3, [pc, #392]	; (8012b28 <tcp_receive+0xb14>)
 80129a0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80129a4:	4961      	ldr	r1, [pc, #388]	; (8012b2c <tcp_receive+0xb18>)
 80129a6:	4862      	ldr	r0, [pc, #392]	; (8012b30 <tcp_receive+0xb1c>)
 80129a8:	f00a fe3a 	bl	801d620 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80129b0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80129b2:	4b5a      	ldr	r3, [pc, #360]	; (8012b1c <tcp_receive+0xb08>)
 80129b4:	881b      	ldrh	r3, [r3, #0]
 80129b6:	461a      	mov	r2, r3
 80129b8:	4b59      	ldr	r3, [pc, #356]	; (8012b20 <tcp_receive+0xb0c>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	441a      	add	r2, r3
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80129c6:	4b55      	ldr	r3, [pc, #340]	; (8012b1c <tcp_receive+0xb08>)
 80129c8:	881b      	ldrh	r3, [r3, #0]
 80129ca:	429a      	cmp	r2, r3
 80129cc:	d206      	bcs.n	80129dc <tcp_receive+0x9c8>
 80129ce:	4b56      	ldr	r3, [pc, #344]	; (8012b28 <tcp_receive+0xb14>)
 80129d0:	f240 6207 	movw	r2, #1543	; 0x607
 80129d4:	4957      	ldr	r1, [pc, #348]	; (8012b34 <tcp_receive+0xb20>)
 80129d6:	4856      	ldr	r0, [pc, #344]	; (8012b30 <tcp_receive+0xb1c>)
 80129d8:	f00a fe22 	bl	801d620 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80129e0:	4b4e      	ldr	r3, [pc, #312]	; (8012b1c <tcp_receive+0xb08>)
 80129e2:	881b      	ldrh	r3, [r3, #0]
 80129e4:	1ad3      	subs	r3, r2, r3
 80129e6:	b29a      	uxth	r2, r3
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80129ec:	6878      	ldr	r0, [r7, #4]
 80129ee:	f7fc fd99 	bl	800f524 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80129f2:	4b4c      	ldr	r3, [pc, #304]	; (8012b24 <tcp_receive+0xb10>)
 80129f4:	685b      	ldr	r3, [r3, #4]
 80129f6:	891b      	ldrh	r3, [r3, #8]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d006      	beq.n	8012a0a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80129fc:	4b49      	ldr	r3, [pc, #292]	; (8012b24 <tcp_receive+0xb10>)
 80129fe:	685b      	ldr	r3, [r3, #4]
 8012a00:	4a4d      	ldr	r2, [pc, #308]	; (8012b38 <tcp_receive+0xb24>)
 8012a02:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012a04:	4b47      	ldr	r3, [pc, #284]	; (8012b24 <tcp_receive+0xb10>)
 8012a06:	2200      	movs	r2, #0
 8012a08:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012a0a:	4b46      	ldr	r3, [pc, #280]	; (8012b24 <tcp_receive+0xb10>)
 8012a0c:	68db      	ldr	r3, [r3, #12]
 8012a0e:	899b      	ldrh	r3, [r3, #12]
 8012a10:	b29b      	uxth	r3, r3
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7fa fb88 	bl	800d128 <lwip_htons>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	b2db      	uxtb	r3, r3
 8012a1c:	f003 0301 	and.w	r3, r3, #1
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	f000 80b8 	beq.w	8012b96 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012a26:	4b45      	ldr	r3, [pc, #276]	; (8012b3c <tcp_receive+0xb28>)
 8012a28:	781b      	ldrb	r3, [r3, #0]
 8012a2a:	f043 0320 	orr.w	r3, r3, #32
 8012a2e:	b2da      	uxtb	r2, r3
 8012a30:	4b42      	ldr	r3, [pc, #264]	; (8012b3c <tcp_receive+0xb28>)
 8012a32:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012a34:	e0af      	b.n	8012b96 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a3a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a40:	68db      	ldr	r3, [r3, #12]
 8012a42:	685b      	ldr	r3, [r3, #4]
 8012a44:	4a36      	ldr	r2, [pc, #216]	; (8012b20 <tcp_receive+0xb0c>)
 8012a46:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	891b      	ldrh	r3, [r3, #8]
 8012a4c:	461c      	mov	r4, r3
 8012a4e:	68bb      	ldr	r3, [r7, #8]
 8012a50:	68db      	ldr	r3, [r3, #12]
 8012a52:	899b      	ldrh	r3, [r3, #12]
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7fa fb66 	bl	800d128 <lwip_htons>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	f003 0303 	and.w	r3, r3, #3
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d001      	beq.n	8012a6c <tcp_receive+0xa58>
 8012a68:	2301      	movs	r3, #1
 8012a6a:	e000      	b.n	8012a6e <tcp_receive+0xa5a>
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	191a      	adds	r2, r3, r4
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a74:	441a      	add	r2, r3
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a7e:	461c      	mov	r4, r3
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	891b      	ldrh	r3, [r3, #8]
 8012a84:	461d      	mov	r5, r3
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	68db      	ldr	r3, [r3, #12]
 8012a8a:	899b      	ldrh	r3, [r3, #12]
 8012a8c:	b29b      	uxth	r3, r3
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7fa fb4a 	bl	800d128 <lwip_htons>
 8012a94:	4603      	mov	r3, r0
 8012a96:	b2db      	uxtb	r3, r3
 8012a98:	f003 0303 	and.w	r3, r3, #3
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d001      	beq.n	8012aa4 <tcp_receive+0xa90>
 8012aa0:	2301      	movs	r3, #1
 8012aa2:	e000      	b.n	8012aa6 <tcp_receive+0xa92>
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	442b      	add	r3, r5
 8012aa8:	429c      	cmp	r4, r3
 8012aaa:	d206      	bcs.n	8012aba <tcp_receive+0xaa6>
 8012aac:	4b1e      	ldr	r3, [pc, #120]	; (8012b28 <tcp_receive+0xb14>)
 8012aae:	f240 622b 	movw	r2, #1579	; 0x62b
 8012ab2:	4923      	ldr	r1, [pc, #140]	; (8012b40 <tcp_receive+0xb2c>)
 8012ab4:	481e      	ldr	r0, [pc, #120]	; (8012b30 <tcp_receive+0xb1c>)
 8012ab6:	f00a fdb3 	bl	801d620 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	891b      	ldrh	r3, [r3, #8]
 8012abe:	461c      	mov	r4, r3
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	68db      	ldr	r3, [r3, #12]
 8012ac4:	899b      	ldrh	r3, [r3, #12]
 8012ac6:	b29b      	uxth	r3, r3
 8012ac8:	4618      	mov	r0, r3
 8012aca:	f7fa fb2d 	bl	800d128 <lwip_htons>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	b2db      	uxtb	r3, r3
 8012ad2:	f003 0303 	and.w	r3, r3, #3
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d001      	beq.n	8012ade <tcp_receive+0xaca>
 8012ada:	2301      	movs	r3, #1
 8012adc:	e000      	b.n	8012ae0 <tcp_receive+0xacc>
 8012ade:	2300      	movs	r3, #0
 8012ae0:	1919      	adds	r1, r3, r4
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012ae6:	b28b      	uxth	r3, r1
 8012ae8:	1ad3      	subs	r3, r2, r3
 8012aea:	b29a      	uxth	r2, r3
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012af0:	6878      	ldr	r0, [r7, #4]
 8012af2:	f7fc fd17 	bl	800f524 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012af6:	68bb      	ldr	r3, [r7, #8]
 8012af8:	685b      	ldr	r3, [r3, #4]
 8012afa:	891b      	ldrh	r3, [r3, #8]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d028      	beq.n	8012b52 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012b00:	4b0d      	ldr	r3, [pc, #52]	; (8012b38 <tcp_receive+0xb24>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d01d      	beq.n	8012b44 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8012b08:	4b0b      	ldr	r3, [pc, #44]	; (8012b38 <tcp_receive+0xb24>)
 8012b0a:	681a      	ldr	r2, [r3, #0]
 8012b0c:	68bb      	ldr	r3, [r7, #8]
 8012b0e:	685b      	ldr	r3, [r3, #4]
 8012b10:	4619      	mov	r1, r3
 8012b12:	4610      	mov	r0, r2
 8012b14:	f7fb ffd8 	bl	800eac8 <pbuf_cat>
 8012b18:	e018      	b.n	8012b4c <tcp_receive+0xb38>
 8012b1a:	bf00      	nop
 8012b1c:	200113fa 	.word	0x200113fa
 8012b20:	200113f0 	.word	0x200113f0
 8012b24:	200113d0 	.word	0x200113d0
 8012b28:	080205bc 	.word	0x080205bc
 8012b2c:	0802099c 	.word	0x0802099c
 8012b30:	08020608 	.word	0x08020608
 8012b34:	080209d8 	.word	0x080209d8
 8012b38:	20011400 	.word	0x20011400
 8012b3c:	200113fd 	.word	0x200113fd
 8012b40:	080209f8 	.word	0x080209f8
            } else {
              recv_data = cseg->p;
 8012b44:	68bb      	ldr	r3, [r7, #8]
 8012b46:	685b      	ldr	r3, [r3, #4]
 8012b48:	4a70      	ldr	r2, [pc, #448]	; (8012d0c <tcp_receive+0xcf8>)
 8012b4a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012b52:	68bb      	ldr	r3, [r7, #8]
 8012b54:	68db      	ldr	r3, [r3, #12]
 8012b56:	899b      	ldrh	r3, [r3, #12]
 8012b58:	b29b      	uxth	r3, r3
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	f7fa fae4 	bl	800d128 <lwip_htons>
 8012b60:	4603      	mov	r3, r0
 8012b62:	b2db      	uxtb	r3, r3
 8012b64:	f003 0301 	and.w	r3, r3, #1
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d00d      	beq.n	8012b88 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012b6c:	4b68      	ldr	r3, [pc, #416]	; (8012d10 <tcp_receive+0xcfc>)
 8012b6e:	781b      	ldrb	r3, [r3, #0]
 8012b70:	f043 0320 	orr.w	r3, r3, #32
 8012b74:	b2da      	uxtb	r2, r3
 8012b76:	4b66      	ldr	r3, [pc, #408]	; (8012d10 <tcp_receive+0xcfc>)
 8012b78:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	7d1b      	ldrb	r3, [r3, #20]
 8012b7e:	2b04      	cmp	r3, #4
 8012b80:	d102      	bne.n	8012b88 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	2207      	movs	r2, #7
 8012b86:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012b88:	68bb      	ldr	r3, [r7, #8]
 8012b8a:	681a      	ldr	r2, [r3, #0]
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012b90:	68b8      	ldr	r0, [r7, #8]
 8012b92:	f7fd fb04 	bl	801019e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d008      	beq.n	8012bb0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ba2:	68db      	ldr	r3, [r3, #12]
 8012ba4:	685a      	ldr	r2, [r3, #4]
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012baa:	429a      	cmp	r2, r3
 8012bac:	f43f af43 	beq.w	8012a36 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	8b5b      	ldrh	r3, [r3, #26]
 8012bb4:	f003 0301 	and.w	r3, r3, #1
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d00e      	beq.n	8012bda <tcp_receive+0xbc6>
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	8b5b      	ldrh	r3, [r3, #26]
 8012bc0:	f023 0301 	bic.w	r3, r3, #1
 8012bc4:	b29a      	uxth	r2, r3
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	835a      	strh	r2, [r3, #26]
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	8b5b      	ldrh	r3, [r3, #26]
 8012bce:	f043 0302 	orr.w	r3, r3, #2
 8012bd2:	b29a      	uxth	r2, r3
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012bd8:	e188      	b.n	8012eec <tcp_receive+0xed8>
        tcp_ack(pcb);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	8b5b      	ldrh	r3, [r3, #26]
 8012bde:	f043 0301 	orr.w	r3, r3, #1
 8012be2:	b29a      	uxth	r2, r3
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012be8:	e180      	b.n	8012eec <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d106      	bne.n	8012c00 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012bf2:	4848      	ldr	r0, [pc, #288]	; (8012d14 <tcp_receive+0xd00>)
 8012bf4:	f7fd faec 	bl	80101d0 <tcp_seg_copy>
 8012bf8:	4602      	mov	r2, r0
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	675a      	str	r2, [r3, #116]	; 0x74
 8012bfe:	e16d      	b.n	8012edc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012c00:	2300      	movs	r3, #0
 8012c02:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c08:	63bb      	str	r3, [r7, #56]	; 0x38
 8012c0a:	e157      	b.n	8012ebc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8012c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c0e:	68db      	ldr	r3, [r3, #12]
 8012c10:	685a      	ldr	r2, [r3, #4]
 8012c12:	4b41      	ldr	r3, [pc, #260]	; (8012d18 <tcp_receive+0xd04>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	429a      	cmp	r2, r3
 8012c18:	d11d      	bne.n	8012c56 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012c1a:	4b3e      	ldr	r3, [pc, #248]	; (8012d14 <tcp_receive+0xd00>)
 8012c1c:	891a      	ldrh	r2, [r3, #8]
 8012c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c20:	891b      	ldrh	r3, [r3, #8]
 8012c22:	429a      	cmp	r2, r3
 8012c24:	f240 814f 	bls.w	8012ec6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012c28:	483a      	ldr	r0, [pc, #232]	; (8012d14 <tcp_receive+0xd00>)
 8012c2a:	f7fd fad1 	bl	80101d0 <tcp_seg_copy>
 8012c2e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012c30:	697b      	ldr	r3, [r7, #20]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	f000 8149 	beq.w	8012eca <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8012c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d003      	beq.n	8012c46 <tcp_receive+0xc32>
                    prev->next = cseg;
 8012c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c40:	697a      	ldr	r2, [r7, #20]
 8012c42:	601a      	str	r2, [r3, #0]
 8012c44:	e002      	b.n	8012c4c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	697a      	ldr	r2, [r7, #20]
 8012c4a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012c4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c4e:	6978      	ldr	r0, [r7, #20]
 8012c50:	f7ff f8dc 	bl	8011e0c <tcp_oos_insert_segment>
                }
                break;
 8012c54:	e139      	b.n	8012eca <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d117      	bne.n	8012c8c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012c5c:	4b2e      	ldr	r3, [pc, #184]	; (8012d18 <tcp_receive+0xd04>)
 8012c5e:	681a      	ldr	r2, [r3, #0]
 8012c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c62:	68db      	ldr	r3, [r3, #12]
 8012c64:	685b      	ldr	r3, [r3, #4]
 8012c66:	1ad3      	subs	r3, r2, r3
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	da57      	bge.n	8012d1c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012c6c:	4829      	ldr	r0, [pc, #164]	; (8012d14 <tcp_receive+0xd00>)
 8012c6e:	f7fd faaf 	bl	80101d0 <tcp_seg_copy>
 8012c72:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012c74:	69bb      	ldr	r3, [r7, #24]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	f000 8129 	beq.w	8012ece <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	69ba      	ldr	r2, [r7, #24]
 8012c80:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012c82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c84:	69b8      	ldr	r0, [r7, #24]
 8012c86:	f7ff f8c1 	bl	8011e0c <tcp_oos_insert_segment>
                  }
                  break;
 8012c8a:	e120      	b.n	8012ece <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012c8c:	4b22      	ldr	r3, [pc, #136]	; (8012d18 <tcp_receive+0xd04>)
 8012c8e:	681a      	ldr	r2, [r3, #0]
 8012c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c92:	68db      	ldr	r3, [r3, #12]
 8012c94:	685b      	ldr	r3, [r3, #4]
 8012c96:	1ad3      	subs	r3, r2, r3
 8012c98:	3b01      	subs	r3, #1
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	db3e      	blt.n	8012d1c <tcp_receive+0xd08>
 8012c9e:	4b1e      	ldr	r3, [pc, #120]	; (8012d18 <tcp_receive+0xd04>)
 8012ca0:	681a      	ldr	r2, [r3, #0]
 8012ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ca4:	68db      	ldr	r3, [r3, #12]
 8012ca6:	685b      	ldr	r3, [r3, #4]
 8012ca8:	1ad3      	subs	r3, r2, r3
 8012caa:	3301      	adds	r3, #1
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	dc35      	bgt.n	8012d1c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012cb0:	4818      	ldr	r0, [pc, #96]	; (8012d14 <tcp_receive+0xd00>)
 8012cb2:	f7fd fa8d 	bl	80101d0 <tcp_seg_copy>
 8012cb6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012cb8:	69fb      	ldr	r3, [r7, #28]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	f000 8109 	beq.w	8012ed2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cc2:	68db      	ldr	r3, [r3, #12]
 8012cc4:	685b      	ldr	r3, [r3, #4]
 8012cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cc8:	8912      	ldrh	r2, [r2, #8]
 8012cca:	441a      	add	r2, r3
 8012ccc:	4b12      	ldr	r3, [pc, #72]	; (8012d18 <tcp_receive+0xd04>)
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	1ad3      	subs	r3, r2, r3
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	dd12      	ble.n	8012cfc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012cd6:	4b10      	ldr	r3, [pc, #64]	; (8012d18 <tcp_receive+0xd04>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	b29a      	uxth	r2, r3
 8012cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cde:	68db      	ldr	r3, [r3, #12]
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	b29b      	uxth	r3, r3
 8012ce4:	1ad3      	subs	r3, r2, r3
 8012ce6:	b29a      	uxth	r2, r3
 8012ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cea:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cee:	685a      	ldr	r2, [r3, #4]
 8012cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cf2:	891b      	ldrh	r3, [r3, #8]
 8012cf4:	4619      	mov	r1, r3
 8012cf6:	4610      	mov	r0, r2
 8012cf8:	f7fb fc92 	bl	800e620 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cfe:	69fa      	ldr	r2, [r7, #28]
 8012d00:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012d02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d04:	69f8      	ldr	r0, [r7, #28]
 8012d06:	f7ff f881 	bl	8011e0c <tcp_oos_insert_segment>
                  }
                  break;
 8012d0a:	e0e2      	b.n	8012ed2 <tcp_receive+0xebe>
 8012d0c:	20011400 	.word	0x20011400
 8012d10:	200113fd 	.word	0x200113fd
 8012d14:	200113d0 	.word	0x200113d0
 8012d18:	200113f0 	.word	0x200113f0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	f040 80c6 	bne.w	8012eb6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012d2a:	4b80      	ldr	r3, [pc, #512]	; (8012f2c <tcp_receive+0xf18>)
 8012d2c:	681a      	ldr	r2, [r3, #0]
 8012d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d30:	68db      	ldr	r3, [r3, #12]
 8012d32:	685b      	ldr	r3, [r3, #4]
 8012d34:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	f340 80bd 	ble.w	8012eb6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3e:	68db      	ldr	r3, [r3, #12]
 8012d40:	899b      	ldrh	r3, [r3, #12]
 8012d42:	b29b      	uxth	r3, r3
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7fa f9ef 	bl	800d128 <lwip_htons>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	b2db      	uxtb	r3, r3
 8012d4e:	f003 0301 	and.w	r3, r3, #1
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	f040 80bf 	bne.w	8012ed6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012d58:	4875      	ldr	r0, [pc, #468]	; (8012f30 <tcp_receive+0xf1c>)
 8012d5a:	f7fd fa39 	bl	80101d0 <tcp_seg_copy>
 8012d5e:	4602      	mov	r2, r0
 8012d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d62:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	f000 80b6 	beq.w	8012eda <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d70:	68db      	ldr	r3, [r3, #12]
 8012d72:	685b      	ldr	r3, [r3, #4]
 8012d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d76:	8912      	ldrh	r2, [r2, #8]
 8012d78:	441a      	add	r2, r3
 8012d7a:	4b6c      	ldr	r3, [pc, #432]	; (8012f2c <tcp_receive+0xf18>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	1ad3      	subs	r3, r2, r3
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	dd12      	ble.n	8012daa <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012d84:	4b69      	ldr	r3, [pc, #420]	; (8012f2c <tcp_receive+0xf18>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	b29a      	uxth	r2, r3
 8012d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d8c:	68db      	ldr	r3, [r3, #12]
 8012d8e:	685b      	ldr	r3, [r3, #4]
 8012d90:	b29b      	uxth	r3, r3
 8012d92:	1ad3      	subs	r3, r2, r3
 8012d94:	b29a      	uxth	r2, r3
 8012d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d98:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d9c:	685a      	ldr	r2, [r3, #4]
 8012d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da0:	891b      	ldrh	r3, [r3, #8]
 8012da2:	4619      	mov	r1, r3
 8012da4:	4610      	mov	r0, r2
 8012da6:	f7fb fc3b 	bl	800e620 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012daa:	4b62      	ldr	r3, [pc, #392]	; (8012f34 <tcp_receive+0xf20>)
 8012dac:	881b      	ldrh	r3, [r3, #0]
 8012dae:	461a      	mov	r2, r3
 8012db0:	4b5e      	ldr	r3, [pc, #376]	; (8012f2c <tcp_receive+0xf18>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	441a      	add	r2, r3
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dba:	6879      	ldr	r1, [r7, #4]
 8012dbc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012dbe:	440b      	add	r3, r1
 8012dc0:	1ad3      	subs	r3, r2, r3
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	f340 8089 	ble.w	8012eda <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	68db      	ldr	r3, [r3, #12]
 8012dce:	899b      	ldrh	r3, [r3, #12]
 8012dd0:	b29b      	uxth	r3, r3
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7fa f9a8 	bl	800d128 <lwip_htons>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	b2db      	uxtb	r3, r3
 8012ddc:	f003 0301 	and.w	r3, r3, #1
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d022      	beq.n	8012e2a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	68db      	ldr	r3, [r3, #12]
 8012dea:	899b      	ldrh	r3, [r3, #12]
 8012dec:	b29b      	uxth	r3, r3
 8012dee:	b21b      	sxth	r3, r3
 8012df0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012df4:	b21c      	sxth	r4, r3
 8012df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	68db      	ldr	r3, [r3, #12]
 8012dfc:	899b      	ldrh	r3, [r3, #12]
 8012dfe:	b29b      	uxth	r3, r3
 8012e00:	4618      	mov	r0, r3
 8012e02:	f7fa f991 	bl	800d128 <lwip_htons>
 8012e06:	4603      	mov	r3, r0
 8012e08:	b2db      	uxtb	r3, r3
 8012e0a:	b29b      	uxth	r3, r3
 8012e0c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012e10:	b29b      	uxth	r3, r3
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7fa f988 	bl	800d128 <lwip_htons>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	b21b      	sxth	r3, r3
 8012e1c:	4323      	orrs	r3, r4
 8012e1e:	b21a      	sxth	r2, r3
 8012e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	68db      	ldr	r3, [r3, #12]
 8012e26:	b292      	uxth	r2, r2
 8012e28:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e2e:	b29a      	uxth	r2, r3
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e34:	4413      	add	r3, r2
 8012e36:	b299      	uxth	r1, r3
 8012e38:	4b3c      	ldr	r3, [pc, #240]	; (8012f2c <tcp_receive+0xf18>)
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	b29a      	uxth	r2, r3
 8012e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	1a8a      	subs	r2, r1, r2
 8012e44:	b292      	uxth	r2, r2
 8012e46:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	685a      	ldr	r2, [r3, #4]
 8012e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	891b      	ldrh	r3, [r3, #8]
 8012e54:	4619      	mov	r1, r3
 8012e56:	4610      	mov	r0, r2
 8012e58:	f7fb fbe2 	bl	800e620 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	891c      	ldrh	r4, [r3, #8]
 8012e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	68db      	ldr	r3, [r3, #12]
 8012e68:	899b      	ldrh	r3, [r3, #12]
 8012e6a:	b29b      	uxth	r3, r3
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f7fa f95b 	bl	800d128 <lwip_htons>
 8012e72:	4603      	mov	r3, r0
 8012e74:	b2db      	uxtb	r3, r3
 8012e76:	f003 0303 	and.w	r3, r3, #3
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d001      	beq.n	8012e82 <tcp_receive+0xe6e>
 8012e7e:	2301      	movs	r3, #1
 8012e80:	e000      	b.n	8012e84 <tcp_receive+0xe70>
 8012e82:	2300      	movs	r3, #0
 8012e84:	4423      	add	r3, r4
 8012e86:	b29a      	uxth	r2, r3
 8012e88:	4b2a      	ldr	r3, [pc, #168]	; (8012f34 <tcp_receive+0xf20>)
 8012e8a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012e8c:	4b29      	ldr	r3, [pc, #164]	; (8012f34 <tcp_receive+0xf20>)
 8012e8e:	881b      	ldrh	r3, [r3, #0]
 8012e90:	461a      	mov	r2, r3
 8012e92:	4b26      	ldr	r3, [pc, #152]	; (8012f2c <tcp_receive+0xf18>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	441a      	add	r2, r3
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e9c:	6879      	ldr	r1, [r7, #4]
 8012e9e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012ea0:	440b      	add	r3, r1
 8012ea2:	429a      	cmp	r2, r3
 8012ea4:	d019      	beq.n	8012eda <tcp_receive+0xec6>
 8012ea6:	4b24      	ldr	r3, [pc, #144]	; (8012f38 <tcp_receive+0xf24>)
 8012ea8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012eac:	4923      	ldr	r1, [pc, #140]	; (8012f3c <tcp_receive+0xf28>)
 8012eae:	4824      	ldr	r0, [pc, #144]	; (8012f40 <tcp_receive+0xf2c>)
 8012eb0:	f00a fbb6 	bl	801d620 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012eb4:	e011      	b.n	8012eda <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8012ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	f47f aea4 	bne.w	8012c0c <tcp_receive+0xbf8>
 8012ec4:	e00a      	b.n	8012edc <tcp_receive+0xec8>
                break;
 8012ec6:	bf00      	nop
 8012ec8:	e008      	b.n	8012edc <tcp_receive+0xec8>
                break;
 8012eca:	bf00      	nop
 8012ecc:	e006      	b.n	8012edc <tcp_receive+0xec8>
                  break;
 8012ece:	bf00      	nop
 8012ed0:	e004      	b.n	8012edc <tcp_receive+0xec8>
                  break;
 8012ed2:	bf00      	nop
 8012ed4:	e002      	b.n	8012edc <tcp_receive+0xec8>
                  break;
 8012ed6:	bf00      	nop
 8012ed8:	e000      	b.n	8012edc <tcp_receive+0xec8>
                break;
 8012eda:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012edc:	6878      	ldr	r0, [r7, #4]
 8012ede:	f001 fe8b 	bl	8014bf8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012ee2:	e003      	b.n	8012eec <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f001 fe87 	bl	8014bf8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012eea:	e01a      	b.n	8012f22 <tcp_receive+0xf0e>
 8012eec:	e019      	b.n	8012f22 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012eee:	4b0f      	ldr	r3, [pc, #60]	; (8012f2c <tcp_receive+0xf18>)
 8012ef0:	681a      	ldr	r2, [r3, #0]
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ef6:	1ad3      	subs	r3, r2, r3
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	db0a      	blt.n	8012f12 <tcp_receive+0xefe>
 8012efc:	4b0b      	ldr	r3, [pc, #44]	; (8012f2c <tcp_receive+0xf18>)
 8012efe:	681a      	ldr	r2, [r3, #0]
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f04:	6879      	ldr	r1, [r7, #4]
 8012f06:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012f08:	440b      	add	r3, r1
 8012f0a:	1ad3      	subs	r3, r2, r3
 8012f0c:	3301      	adds	r3, #1
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	dd07      	ble.n	8012f22 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	8b5b      	ldrh	r3, [r3, #26]
 8012f16:	f043 0302 	orr.w	r3, r3, #2
 8012f1a:	b29a      	uxth	r2, r3
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012f20:	e7ff      	b.n	8012f22 <tcp_receive+0xf0e>
 8012f22:	bf00      	nop
 8012f24:	3750      	adds	r7, #80	; 0x50
 8012f26:	46bd      	mov	sp, r7
 8012f28:	bdb0      	pop	{r4, r5, r7, pc}
 8012f2a:	bf00      	nop
 8012f2c:	200113f0 	.word	0x200113f0
 8012f30:	200113d0 	.word	0x200113d0
 8012f34:	200113fa 	.word	0x200113fa
 8012f38:	080205bc 	.word	0x080205bc
 8012f3c:	08020964 	.word	0x08020964
 8012f40:	08020608 	.word	0x08020608

08012f44 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012f44:	b480      	push	{r7}
 8012f46:	b083      	sub	sp, #12
 8012f48:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012f4a:	4b15      	ldr	r3, [pc, #84]	; (8012fa0 <tcp_get_next_optbyte+0x5c>)
 8012f4c:	881b      	ldrh	r3, [r3, #0]
 8012f4e:	1c5a      	adds	r2, r3, #1
 8012f50:	b291      	uxth	r1, r2
 8012f52:	4a13      	ldr	r2, [pc, #76]	; (8012fa0 <tcp_get_next_optbyte+0x5c>)
 8012f54:	8011      	strh	r1, [r2, #0]
 8012f56:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012f58:	4b12      	ldr	r3, [pc, #72]	; (8012fa4 <tcp_get_next_optbyte+0x60>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d004      	beq.n	8012f6a <tcp_get_next_optbyte+0x26>
 8012f60:	4b11      	ldr	r3, [pc, #68]	; (8012fa8 <tcp_get_next_optbyte+0x64>)
 8012f62:	881b      	ldrh	r3, [r3, #0]
 8012f64:	88fa      	ldrh	r2, [r7, #6]
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d208      	bcs.n	8012f7c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012f6a:	4b10      	ldr	r3, [pc, #64]	; (8012fac <tcp_get_next_optbyte+0x68>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	3314      	adds	r3, #20
 8012f70:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012f72:	88fb      	ldrh	r3, [r7, #6]
 8012f74:	683a      	ldr	r2, [r7, #0]
 8012f76:	4413      	add	r3, r2
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	e00b      	b.n	8012f94 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012f7c:	88fb      	ldrh	r3, [r7, #6]
 8012f7e:	b2da      	uxtb	r2, r3
 8012f80:	4b09      	ldr	r3, [pc, #36]	; (8012fa8 <tcp_get_next_optbyte+0x64>)
 8012f82:	881b      	ldrh	r3, [r3, #0]
 8012f84:	b2db      	uxtb	r3, r3
 8012f86:	1ad3      	subs	r3, r2, r3
 8012f88:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012f8a:	4b06      	ldr	r3, [pc, #24]	; (8012fa4 <tcp_get_next_optbyte+0x60>)
 8012f8c:	681a      	ldr	r2, [r3, #0]
 8012f8e:	797b      	ldrb	r3, [r7, #5]
 8012f90:	4413      	add	r3, r2
 8012f92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012f94:	4618      	mov	r0, r3
 8012f96:	370c      	adds	r7, #12
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9e:	4770      	bx	lr
 8012fa0:	200113ec 	.word	0x200113ec
 8012fa4:	200113e8 	.word	0x200113e8
 8012fa8:	200113e6 	.word	0x200113e6
 8012fac:	200113e0 	.word	0x200113e0

08012fb0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b084      	sub	sp, #16
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d106      	bne.n	8012fcc <tcp_parseopt+0x1c>
 8012fbe:	4b32      	ldr	r3, [pc, #200]	; (8013088 <tcp_parseopt+0xd8>)
 8012fc0:	f240 727d 	movw	r2, #1917	; 0x77d
 8012fc4:	4931      	ldr	r1, [pc, #196]	; (801308c <tcp_parseopt+0xdc>)
 8012fc6:	4832      	ldr	r0, [pc, #200]	; (8013090 <tcp_parseopt+0xe0>)
 8012fc8:	f00a fb2a 	bl	801d620 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012fcc:	4b31      	ldr	r3, [pc, #196]	; (8013094 <tcp_parseopt+0xe4>)
 8012fce:	881b      	ldrh	r3, [r3, #0]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d055      	beq.n	8013080 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012fd4:	4b30      	ldr	r3, [pc, #192]	; (8013098 <tcp_parseopt+0xe8>)
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	801a      	strh	r2, [r3, #0]
 8012fda:	e045      	b.n	8013068 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012fdc:	f7ff ffb2 	bl	8012f44 <tcp_get_next_optbyte>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012fe4:	7bfb      	ldrb	r3, [r7, #15]
 8012fe6:	2b02      	cmp	r3, #2
 8012fe8:	d006      	beq.n	8012ff8 <tcp_parseopt+0x48>
 8012fea:	2b02      	cmp	r3, #2
 8012fec:	dc2b      	bgt.n	8013046 <tcp_parseopt+0x96>
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d041      	beq.n	8013076 <tcp_parseopt+0xc6>
 8012ff2:	2b01      	cmp	r3, #1
 8012ff4:	d127      	bne.n	8013046 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012ff6:	e037      	b.n	8013068 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012ff8:	f7ff ffa4 	bl	8012f44 <tcp_get_next_optbyte>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	2b04      	cmp	r3, #4
 8013000:	d13b      	bne.n	801307a <tcp_parseopt+0xca>
 8013002:	4b25      	ldr	r3, [pc, #148]	; (8013098 <tcp_parseopt+0xe8>)
 8013004:	881b      	ldrh	r3, [r3, #0]
 8013006:	3301      	adds	r3, #1
 8013008:	4a22      	ldr	r2, [pc, #136]	; (8013094 <tcp_parseopt+0xe4>)
 801300a:	8812      	ldrh	r2, [r2, #0]
 801300c:	4293      	cmp	r3, r2
 801300e:	da34      	bge.n	801307a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013010:	f7ff ff98 	bl	8012f44 <tcp_get_next_optbyte>
 8013014:	4603      	mov	r3, r0
 8013016:	b29b      	uxth	r3, r3
 8013018:	021b      	lsls	r3, r3, #8
 801301a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801301c:	f7ff ff92 	bl	8012f44 <tcp_get_next_optbyte>
 8013020:	4603      	mov	r3, r0
 8013022:	b29a      	uxth	r2, r3
 8013024:	89bb      	ldrh	r3, [r7, #12]
 8013026:	4313      	orrs	r3, r2
 8013028:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801302a:	89bb      	ldrh	r3, [r7, #12]
 801302c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013030:	d804      	bhi.n	801303c <tcp_parseopt+0x8c>
 8013032:	89bb      	ldrh	r3, [r7, #12]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d001      	beq.n	801303c <tcp_parseopt+0x8c>
 8013038:	89ba      	ldrh	r2, [r7, #12]
 801303a:	e001      	b.n	8013040 <tcp_parseopt+0x90>
 801303c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8013044:	e010      	b.n	8013068 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013046:	f7ff ff7d 	bl	8012f44 <tcp_get_next_optbyte>
 801304a:	4603      	mov	r3, r0
 801304c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801304e:	7afb      	ldrb	r3, [r7, #11]
 8013050:	2b01      	cmp	r3, #1
 8013052:	d914      	bls.n	801307e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013054:	7afb      	ldrb	r3, [r7, #11]
 8013056:	b29a      	uxth	r2, r3
 8013058:	4b0f      	ldr	r3, [pc, #60]	; (8013098 <tcp_parseopt+0xe8>)
 801305a:	881b      	ldrh	r3, [r3, #0]
 801305c:	4413      	add	r3, r2
 801305e:	b29b      	uxth	r3, r3
 8013060:	3b02      	subs	r3, #2
 8013062:	b29a      	uxth	r2, r3
 8013064:	4b0c      	ldr	r3, [pc, #48]	; (8013098 <tcp_parseopt+0xe8>)
 8013066:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013068:	4b0b      	ldr	r3, [pc, #44]	; (8013098 <tcp_parseopt+0xe8>)
 801306a:	881a      	ldrh	r2, [r3, #0]
 801306c:	4b09      	ldr	r3, [pc, #36]	; (8013094 <tcp_parseopt+0xe4>)
 801306e:	881b      	ldrh	r3, [r3, #0]
 8013070:	429a      	cmp	r2, r3
 8013072:	d3b3      	bcc.n	8012fdc <tcp_parseopt+0x2c>
 8013074:	e004      	b.n	8013080 <tcp_parseopt+0xd0>
          return;
 8013076:	bf00      	nop
 8013078:	e002      	b.n	8013080 <tcp_parseopt+0xd0>
            return;
 801307a:	bf00      	nop
 801307c:	e000      	b.n	8013080 <tcp_parseopt+0xd0>
            return;
 801307e:	bf00      	nop
      }
    }
  }
}
 8013080:	3710      	adds	r7, #16
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	080205bc 	.word	0x080205bc
 801308c:	08020a20 	.word	0x08020a20
 8013090:	08020608 	.word	0x08020608
 8013094:	200113e4 	.word	0x200113e4
 8013098:	200113ec 	.word	0x200113ec

0801309c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801309c:	b480      	push	{r7}
 801309e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80130a0:	4b05      	ldr	r3, [pc, #20]	; (80130b8 <tcp_trigger_input_pcb_close+0x1c>)
 80130a2:	781b      	ldrb	r3, [r3, #0]
 80130a4:	f043 0310 	orr.w	r3, r3, #16
 80130a8:	b2da      	uxtb	r2, r3
 80130aa:	4b03      	ldr	r3, [pc, #12]	; (80130b8 <tcp_trigger_input_pcb_close+0x1c>)
 80130ac:	701a      	strb	r2, [r3, #0]
}
 80130ae:	bf00      	nop
 80130b0:	46bd      	mov	sp, r7
 80130b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b6:	4770      	bx	lr
 80130b8:	200113fd 	.word	0x200113fd

080130bc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b084      	sub	sp, #16
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	60f8      	str	r0, [r7, #12]
 80130c4:	60b9      	str	r1, [r7, #8]
 80130c6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d00a      	beq.n	80130e4 <tcp_route+0x28>
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	7a1b      	ldrb	r3, [r3, #8]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d006      	beq.n	80130e4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	7a1b      	ldrb	r3, [r3, #8]
 80130da:	4618      	mov	r0, r3
 80130dc:	f7fb f898 	bl	800e210 <netif_get_by_index>
 80130e0:	4603      	mov	r3, r0
 80130e2:	e003      	b.n	80130ec <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f003 fcb9 	bl	8016a5c <ip4_route>
 80130ea:	4603      	mov	r3, r0
  }
}
 80130ec:	4618      	mov	r0, r3
 80130ee:	3710      	adds	r7, #16
 80130f0:	46bd      	mov	sp, r7
 80130f2:	bd80      	pop	{r7, pc}

080130f4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80130f4:	b590      	push	{r4, r7, lr}
 80130f6:	b087      	sub	sp, #28
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	60f8      	str	r0, [r7, #12]
 80130fc:	60b9      	str	r1, [r7, #8]
 80130fe:	603b      	str	r3, [r7, #0]
 8013100:	4613      	mov	r3, r2
 8013102:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d105      	bne.n	8013116 <tcp_create_segment+0x22>
 801310a:	4b44      	ldr	r3, [pc, #272]	; (801321c <tcp_create_segment+0x128>)
 801310c:	22a3      	movs	r2, #163	; 0xa3
 801310e:	4944      	ldr	r1, [pc, #272]	; (8013220 <tcp_create_segment+0x12c>)
 8013110:	4844      	ldr	r0, [pc, #272]	; (8013224 <tcp_create_segment+0x130>)
 8013112:	f00a fa85 	bl	801d620 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d105      	bne.n	8013128 <tcp_create_segment+0x34>
 801311c:	4b3f      	ldr	r3, [pc, #252]	; (801321c <tcp_create_segment+0x128>)
 801311e:	22a4      	movs	r2, #164	; 0xa4
 8013120:	4941      	ldr	r1, [pc, #260]	; (8013228 <tcp_create_segment+0x134>)
 8013122:	4840      	ldr	r0, [pc, #256]	; (8013224 <tcp_create_segment+0x130>)
 8013124:	f00a fa7c 	bl	801d620 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013128:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801312c:	009b      	lsls	r3, r3, #2
 801312e:	b2db      	uxtb	r3, r3
 8013130:	f003 0304 	and.w	r3, r3, #4
 8013134:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013136:	2003      	movs	r0, #3
 8013138:	f7fa fcde 	bl	800daf8 <memp_malloc>
 801313c:	6138      	str	r0, [r7, #16]
 801313e:	693b      	ldr	r3, [r7, #16]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d104      	bne.n	801314e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013144:	68b8      	ldr	r0, [r7, #8]
 8013146:	f7fb fbf1 	bl	800e92c <pbuf_free>
    return NULL;
 801314a:	2300      	movs	r3, #0
 801314c:	e061      	b.n	8013212 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801314e:	693b      	ldr	r3, [r7, #16]
 8013150:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013154:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013156:	693b      	ldr	r3, [r7, #16]
 8013158:	2200      	movs	r2, #0
 801315a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801315c:	693b      	ldr	r3, [r7, #16]
 801315e:	68ba      	ldr	r2, [r7, #8]
 8013160:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	891a      	ldrh	r2, [r3, #8]
 8013166:	7dfb      	ldrb	r3, [r7, #23]
 8013168:	b29b      	uxth	r3, r3
 801316a:	429a      	cmp	r2, r3
 801316c:	d205      	bcs.n	801317a <tcp_create_segment+0x86>
 801316e:	4b2b      	ldr	r3, [pc, #172]	; (801321c <tcp_create_segment+0x128>)
 8013170:	22b0      	movs	r2, #176	; 0xb0
 8013172:	492e      	ldr	r1, [pc, #184]	; (801322c <tcp_create_segment+0x138>)
 8013174:	482b      	ldr	r0, [pc, #172]	; (8013224 <tcp_create_segment+0x130>)
 8013176:	f00a fa53 	bl	801d620 <iprintf>
  seg->len = p->tot_len - optlen;
 801317a:	68bb      	ldr	r3, [r7, #8]
 801317c:	891a      	ldrh	r2, [r3, #8]
 801317e:	7dfb      	ldrb	r3, [r7, #23]
 8013180:	b29b      	uxth	r3, r3
 8013182:	1ad3      	subs	r3, r2, r3
 8013184:	b29a      	uxth	r2, r3
 8013186:	693b      	ldr	r3, [r7, #16]
 8013188:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801318a:	2114      	movs	r1, #20
 801318c:	68b8      	ldr	r0, [r7, #8]
 801318e:	f7fb fb37 	bl	800e800 <pbuf_add_header>
 8013192:	4603      	mov	r3, r0
 8013194:	2b00      	cmp	r3, #0
 8013196:	d004      	beq.n	80131a2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013198:	6938      	ldr	r0, [r7, #16]
 801319a:	f7fd f800 	bl	801019e <tcp_seg_free>
    return NULL;
 801319e:	2300      	movs	r3, #0
 80131a0:	e037      	b.n	8013212 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80131a2:	693b      	ldr	r3, [r7, #16]
 80131a4:	685b      	ldr	r3, [r3, #4]
 80131a6:	685a      	ldr	r2, [r3, #4]
 80131a8:	693b      	ldr	r3, [r7, #16]
 80131aa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	8ada      	ldrh	r2, [r3, #22]
 80131b0:	693b      	ldr	r3, [r7, #16]
 80131b2:	68dc      	ldr	r4, [r3, #12]
 80131b4:	4610      	mov	r0, r2
 80131b6:	f7f9 ffb7 	bl	800d128 <lwip_htons>
 80131ba:	4603      	mov	r3, r0
 80131bc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	8b1a      	ldrh	r2, [r3, #24]
 80131c2:	693b      	ldr	r3, [r7, #16]
 80131c4:	68dc      	ldr	r4, [r3, #12]
 80131c6:	4610      	mov	r0, r2
 80131c8:	f7f9 ffae 	bl	800d128 <lwip_htons>
 80131cc:	4603      	mov	r3, r0
 80131ce:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80131d0:	693b      	ldr	r3, [r7, #16]
 80131d2:	68dc      	ldr	r4, [r3, #12]
 80131d4:	6838      	ldr	r0, [r7, #0]
 80131d6:	f7f9 ffbc 	bl	800d152 <lwip_htonl>
 80131da:	4603      	mov	r3, r0
 80131dc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80131de:	7dfb      	ldrb	r3, [r7, #23]
 80131e0:	089b      	lsrs	r3, r3, #2
 80131e2:	b2db      	uxtb	r3, r3
 80131e4:	b29b      	uxth	r3, r3
 80131e6:	3305      	adds	r3, #5
 80131e8:	b29b      	uxth	r3, r3
 80131ea:	031b      	lsls	r3, r3, #12
 80131ec:	b29a      	uxth	r2, r3
 80131ee:	79fb      	ldrb	r3, [r7, #7]
 80131f0:	b29b      	uxth	r3, r3
 80131f2:	4313      	orrs	r3, r2
 80131f4:	b29a      	uxth	r2, r3
 80131f6:	693b      	ldr	r3, [r7, #16]
 80131f8:	68dc      	ldr	r4, [r3, #12]
 80131fa:	4610      	mov	r0, r2
 80131fc:	f7f9 ff94 	bl	800d128 <lwip_htons>
 8013200:	4603      	mov	r3, r0
 8013202:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013204:	693b      	ldr	r3, [r7, #16]
 8013206:	68db      	ldr	r3, [r3, #12]
 8013208:	2200      	movs	r2, #0
 801320a:	749a      	strb	r2, [r3, #18]
 801320c:	2200      	movs	r2, #0
 801320e:	74da      	strb	r2, [r3, #19]
  return seg;
 8013210:	693b      	ldr	r3, [r7, #16]
}
 8013212:	4618      	mov	r0, r3
 8013214:	371c      	adds	r7, #28
 8013216:	46bd      	mov	sp, r7
 8013218:	bd90      	pop	{r4, r7, pc}
 801321a:	bf00      	nop
 801321c:	08020a3c 	.word	0x08020a3c
 8013220:	08020a70 	.word	0x08020a70
 8013224:	08020a90 	.word	0x08020a90
 8013228:	08020ab8 	.word	0x08020ab8
 801322c:	08020adc 	.word	0x08020adc

08013230 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b086      	sub	sp, #24
 8013234:	af00      	add	r7, sp, #0
 8013236:	607b      	str	r3, [r7, #4]
 8013238:	4603      	mov	r3, r0
 801323a:	73fb      	strb	r3, [r7, #15]
 801323c:	460b      	mov	r3, r1
 801323e:	81bb      	strh	r3, [r7, #12]
 8013240:	4613      	mov	r3, r2
 8013242:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013244:	89bb      	ldrh	r3, [r7, #12]
 8013246:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d105      	bne.n	801325a <tcp_pbuf_prealloc+0x2a>
 801324e:	4b30      	ldr	r3, [pc, #192]	; (8013310 <tcp_pbuf_prealloc+0xe0>)
 8013250:	22e8      	movs	r2, #232	; 0xe8
 8013252:	4930      	ldr	r1, [pc, #192]	; (8013314 <tcp_pbuf_prealloc+0xe4>)
 8013254:	4830      	ldr	r0, [pc, #192]	; (8013318 <tcp_pbuf_prealloc+0xe8>)
 8013256:	f00a f9e3 	bl	801d620 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801325a:	6a3b      	ldr	r3, [r7, #32]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d105      	bne.n	801326c <tcp_pbuf_prealloc+0x3c>
 8013260:	4b2b      	ldr	r3, [pc, #172]	; (8013310 <tcp_pbuf_prealloc+0xe0>)
 8013262:	22e9      	movs	r2, #233	; 0xe9
 8013264:	492d      	ldr	r1, [pc, #180]	; (801331c <tcp_pbuf_prealloc+0xec>)
 8013266:	482c      	ldr	r0, [pc, #176]	; (8013318 <tcp_pbuf_prealloc+0xe8>)
 8013268:	f00a f9da 	bl	801d620 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801326c:	89ba      	ldrh	r2, [r7, #12]
 801326e:	897b      	ldrh	r3, [r7, #10]
 8013270:	429a      	cmp	r2, r3
 8013272:	d221      	bcs.n	80132b8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013274:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013278:	f003 0302 	and.w	r3, r3, #2
 801327c:	2b00      	cmp	r3, #0
 801327e:	d111      	bne.n	80132a4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013280:	6a3b      	ldr	r3, [r7, #32]
 8013282:	8b5b      	ldrh	r3, [r3, #26]
 8013284:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013288:	2b00      	cmp	r3, #0
 801328a:	d115      	bne.n	80132b8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801328c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013290:	2b00      	cmp	r3, #0
 8013292:	d007      	beq.n	80132a4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013294:	6a3b      	ldr	r3, [r7, #32]
 8013296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8013298:	2b00      	cmp	r3, #0
 801329a:	d103      	bne.n	80132a4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801329c:	6a3b      	ldr	r3, [r7, #32]
 801329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d009      	beq.n	80132b8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80132a4:	89bb      	ldrh	r3, [r7, #12]
 80132a6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80132aa:	f023 0203 	bic.w	r2, r3, #3
 80132ae:	897b      	ldrh	r3, [r7, #10]
 80132b0:	4293      	cmp	r3, r2
 80132b2:	bf28      	it	cs
 80132b4:	4613      	movcs	r3, r2
 80132b6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80132b8:	8af9      	ldrh	r1, [r7, #22]
 80132ba:	7bfb      	ldrb	r3, [r7, #15]
 80132bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7fb f84f 	bl	800e364 <pbuf_alloc>
 80132c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d101      	bne.n	80132d2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80132ce:	2300      	movs	r3, #0
 80132d0:	e019      	b.n	8013306 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80132d2:	693b      	ldr	r3, [r7, #16]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d006      	beq.n	80132e8 <tcp_pbuf_prealloc+0xb8>
 80132da:	4b0d      	ldr	r3, [pc, #52]	; (8013310 <tcp_pbuf_prealloc+0xe0>)
 80132dc:	f240 120b 	movw	r2, #267	; 0x10b
 80132e0:	490f      	ldr	r1, [pc, #60]	; (8013320 <tcp_pbuf_prealloc+0xf0>)
 80132e2:	480d      	ldr	r0, [pc, #52]	; (8013318 <tcp_pbuf_prealloc+0xe8>)
 80132e4:	f00a f99c 	bl	801d620 <iprintf>
  *oversize = p->len - length;
 80132e8:	693b      	ldr	r3, [r7, #16]
 80132ea:	895a      	ldrh	r2, [r3, #10]
 80132ec:	89bb      	ldrh	r3, [r7, #12]
 80132ee:	1ad3      	subs	r3, r2, r3
 80132f0:	b29a      	uxth	r2, r3
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80132f6:	693b      	ldr	r3, [r7, #16]
 80132f8:	89ba      	ldrh	r2, [r7, #12]
 80132fa:	811a      	strh	r2, [r3, #8]
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	891a      	ldrh	r2, [r3, #8]
 8013300:	693b      	ldr	r3, [r7, #16]
 8013302:	815a      	strh	r2, [r3, #10]
  return p;
 8013304:	693b      	ldr	r3, [r7, #16]
}
 8013306:	4618      	mov	r0, r3
 8013308:	3718      	adds	r7, #24
 801330a:	46bd      	mov	sp, r7
 801330c:	bd80      	pop	{r7, pc}
 801330e:	bf00      	nop
 8013310:	08020a3c 	.word	0x08020a3c
 8013314:	08020af4 	.word	0x08020af4
 8013318:	08020a90 	.word	0x08020a90
 801331c:	08020b18 	.word	0x08020b18
 8013320:	08020b38 	.word	0x08020b38

08013324 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b082      	sub	sp, #8
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
 801332c:	460b      	mov	r3, r1
 801332e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d106      	bne.n	8013344 <tcp_write_checks+0x20>
 8013336:	4b33      	ldr	r3, [pc, #204]	; (8013404 <tcp_write_checks+0xe0>)
 8013338:	f240 1233 	movw	r2, #307	; 0x133
 801333c:	4932      	ldr	r1, [pc, #200]	; (8013408 <tcp_write_checks+0xe4>)
 801333e:	4833      	ldr	r0, [pc, #204]	; (801340c <tcp_write_checks+0xe8>)
 8013340:	f00a f96e 	bl	801d620 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	7d1b      	ldrb	r3, [r3, #20]
 8013348:	2b04      	cmp	r3, #4
 801334a:	d00e      	beq.n	801336a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013350:	2b07      	cmp	r3, #7
 8013352:	d00a      	beq.n	801336a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013358:	2b02      	cmp	r3, #2
 801335a:	d006      	beq.n	801336a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013360:	2b03      	cmp	r3, #3
 8013362:	d002      	beq.n	801336a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013364:	f06f 030a 	mvn.w	r3, #10
 8013368:	e048      	b.n	80133fc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801336a:	887b      	ldrh	r3, [r7, #2]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d101      	bne.n	8013374 <tcp_write_checks+0x50>
    return ERR_OK;
 8013370:	2300      	movs	r3, #0
 8013372:	e043      	b.n	80133fc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801337a:	887a      	ldrh	r2, [r7, #2]
 801337c:	429a      	cmp	r2, r3
 801337e:	d909      	bls.n	8013394 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	8b5b      	ldrh	r3, [r3, #26]
 8013384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013388:	b29a      	uxth	r2, r3
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801338e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013392:	e033      	b.n	80133fc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801339a:	2b08      	cmp	r3, #8
 801339c:	d909      	bls.n	80133b2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	8b5b      	ldrh	r3, [r3, #26]
 80133a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133a6:	b29a      	uxth	r2, r3
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80133ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133b0:	e024      	b.n	80133fc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d00f      	beq.n	80133dc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d11a      	bne.n	80133fa <tcp_write_checks+0xd6>
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d116      	bne.n	80133fa <tcp_write_checks+0xd6>
 80133cc:	4b0d      	ldr	r3, [pc, #52]	; (8013404 <tcp_write_checks+0xe0>)
 80133ce:	f240 1255 	movw	r2, #341	; 0x155
 80133d2:	490f      	ldr	r1, [pc, #60]	; (8013410 <tcp_write_checks+0xec>)
 80133d4:	480d      	ldr	r0, [pc, #52]	; (801340c <tcp_write_checks+0xe8>)
 80133d6:	f00a f923 	bl	801d620 <iprintf>
 80133da:	e00e      	b.n	80133fa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d103      	bne.n	80133ec <tcp_write_checks+0xc8>
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d006      	beq.n	80133fa <tcp_write_checks+0xd6>
 80133ec:	4b05      	ldr	r3, [pc, #20]	; (8013404 <tcp_write_checks+0xe0>)
 80133ee:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80133f2:	4908      	ldr	r1, [pc, #32]	; (8013414 <tcp_write_checks+0xf0>)
 80133f4:	4805      	ldr	r0, [pc, #20]	; (801340c <tcp_write_checks+0xe8>)
 80133f6:	f00a f913 	bl	801d620 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80133fa:	2300      	movs	r3, #0
}
 80133fc:	4618      	mov	r0, r3
 80133fe:	3708      	adds	r7, #8
 8013400:	46bd      	mov	sp, r7
 8013402:	bd80      	pop	{r7, pc}
 8013404:	08020a3c 	.word	0x08020a3c
 8013408:	08020b4c 	.word	0x08020b4c
 801340c:	08020a90 	.word	0x08020a90
 8013410:	08020b6c 	.word	0x08020b6c
 8013414:	08020ba8 	.word	0x08020ba8

08013418 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013418:	b590      	push	{r4, r7, lr}
 801341a:	b09b      	sub	sp, #108	; 0x6c
 801341c:	af04      	add	r7, sp, #16
 801341e:	60f8      	str	r0, [r7, #12]
 8013420:	60b9      	str	r1, [r7, #8]
 8013422:	4611      	mov	r1, r2
 8013424:	461a      	mov	r2, r3
 8013426:	460b      	mov	r3, r1
 8013428:	80fb      	strh	r3, [r7, #6]
 801342a:	4613      	mov	r3, r2
 801342c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801342e:	2300      	movs	r3, #0
 8013430:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013432:	2300      	movs	r3, #0
 8013434:	653b      	str	r3, [r7, #80]	; 0x50
 8013436:	2300      	movs	r3, #0
 8013438:	64fb      	str	r3, [r7, #76]	; 0x4c
 801343a:	2300      	movs	r3, #0
 801343c:	64bb      	str	r3, [r7, #72]	; 0x48
 801343e:	2300      	movs	r3, #0
 8013440:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013442:	2300      	movs	r3, #0
 8013444:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013448:	2300      	movs	r3, #0
 801344a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801344e:	2300      	movs	r3, #0
 8013450:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013452:	2300      	movs	r3, #0
 8013454:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013456:	2300      	movs	r3, #0
 8013458:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d109      	bne.n	8013474 <tcp_write+0x5c>
 8013460:	4ba4      	ldr	r3, [pc, #656]	; (80136f4 <tcp_write+0x2dc>)
 8013462:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013466:	49a4      	ldr	r1, [pc, #656]	; (80136f8 <tcp_write+0x2e0>)
 8013468:	48a4      	ldr	r0, [pc, #656]	; (80136fc <tcp_write+0x2e4>)
 801346a:	f00a f8d9 	bl	801d620 <iprintf>
 801346e:	f06f 030f 	mvn.w	r3, #15
 8013472:	e32a      	b.n	8013aca <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801347a:	085b      	lsrs	r3, r3, #1
 801347c:	b29a      	uxth	r2, r3
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013482:	4293      	cmp	r3, r2
 8013484:	bf28      	it	cs
 8013486:	4613      	movcs	r3, r2
 8013488:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801348a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801348c:	2b00      	cmp	r3, #0
 801348e:	d102      	bne.n	8013496 <tcp_write+0x7e>
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013494:	e000      	b.n	8013498 <tcp_write+0x80>
 8013496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013498:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801349a:	68bb      	ldr	r3, [r7, #8]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d109      	bne.n	80134b4 <tcp_write+0x9c>
 80134a0:	4b94      	ldr	r3, [pc, #592]	; (80136f4 <tcp_write+0x2dc>)
 80134a2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80134a6:	4996      	ldr	r1, [pc, #600]	; (8013700 <tcp_write+0x2e8>)
 80134a8:	4894      	ldr	r0, [pc, #592]	; (80136fc <tcp_write+0x2e4>)
 80134aa:	f00a f8b9 	bl	801d620 <iprintf>
 80134ae:	f06f 030f 	mvn.w	r3, #15
 80134b2:	e30a      	b.n	8013aca <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80134b4:	88fb      	ldrh	r3, [r7, #6]
 80134b6:	4619      	mov	r1, r3
 80134b8:	68f8      	ldr	r0, [r7, #12]
 80134ba:	f7ff ff33 	bl	8013324 <tcp_write_checks>
 80134be:	4603      	mov	r3, r0
 80134c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80134c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d002      	beq.n	80134d2 <tcp_write+0xba>
    return err;
 80134cc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80134d0:	e2fb      	b.n	8013aca <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80134dc:	2300      	movs	r3, #0
 80134de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	f000 80f6 	beq.w	80136d8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134f0:	653b      	str	r3, [r7, #80]	; 0x50
 80134f2:	e002      	b.n	80134fa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80134f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80134fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d1f8      	bne.n	80134f4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013504:	7a9b      	ldrb	r3, [r3, #10]
 8013506:	009b      	lsls	r3, r3, #2
 8013508:	b29b      	uxth	r3, r3
 801350a:	f003 0304 	and.w	r3, r3, #4
 801350e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013510:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013514:	891b      	ldrh	r3, [r3, #8]
 8013516:	4619      	mov	r1, r3
 8013518:	8c3b      	ldrh	r3, [r7, #32]
 801351a:	440b      	add	r3, r1
 801351c:	429a      	cmp	r2, r3
 801351e:	da06      	bge.n	801352e <tcp_write+0x116>
 8013520:	4b74      	ldr	r3, [pc, #464]	; (80136f4 <tcp_write+0x2dc>)
 8013522:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013526:	4977      	ldr	r1, [pc, #476]	; (8013704 <tcp_write+0x2ec>)
 8013528:	4874      	ldr	r0, [pc, #464]	; (80136fc <tcp_write+0x2e4>)
 801352a:	f00a f879 	bl	801d620 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801352e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013530:	891a      	ldrh	r2, [r3, #8]
 8013532:	8c3b      	ldrh	r3, [r7, #32]
 8013534:	4413      	add	r3, r2
 8013536:	b29b      	uxth	r3, r3
 8013538:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801353a:	1ad3      	subs	r3, r2, r3
 801353c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013544:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013546:	8a7b      	ldrh	r3, [r7, #18]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d026      	beq.n	801359a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801354c:	8a7b      	ldrh	r3, [r7, #18]
 801354e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013550:	429a      	cmp	r2, r3
 8013552:	d206      	bcs.n	8013562 <tcp_write+0x14a>
 8013554:	4b67      	ldr	r3, [pc, #412]	; (80136f4 <tcp_write+0x2dc>)
 8013556:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801355a:	496b      	ldr	r1, [pc, #428]	; (8013708 <tcp_write+0x2f0>)
 801355c:	4867      	ldr	r0, [pc, #412]	; (80136fc <tcp_write+0x2e4>)
 801355e:	f00a f85f 	bl	801d620 <iprintf>
      seg = last_unsent;
 8013562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013564:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013566:	8a7b      	ldrh	r3, [r7, #18]
 8013568:	88fa      	ldrh	r2, [r7, #6]
 801356a:	4293      	cmp	r3, r2
 801356c:	bf28      	it	cs
 801356e:	4613      	movcs	r3, r2
 8013570:	b29b      	uxth	r3, r3
 8013572:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013574:	4293      	cmp	r3, r2
 8013576:	bf28      	it	cs
 8013578:	4613      	movcs	r3, r2
 801357a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801357c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013580:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013582:	4413      	add	r3, r2
 8013584:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8013588:	8a7a      	ldrh	r2, [r7, #18]
 801358a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801358c:	1ad3      	subs	r3, r2, r3
 801358e:	b29b      	uxth	r3, r3
 8013590:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013592:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013594:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013596:	1ad3      	subs	r3, r2, r3
 8013598:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801359a:	8a7b      	ldrh	r3, [r7, #18]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d00b      	beq.n	80135b8 <tcp_write+0x1a0>
 80135a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80135a4:	88fb      	ldrh	r3, [r7, #6]
 80135a6:	429a      	cmp	r2, r3
 80135a8:	d006      	beq.n	80135b8 <tcp_write+0x1a0>
 80135aa:	4b52      	ldr	r3, [pc, #328]	; (80136f4 <tcp_write+0x2dc>)
 80135ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80135b0:	4956      	ldr	r1, [pc, #344]	; (801370c <tcp_write+0x2f4>)
 80135b2:	4852      	ldr	r0, [pc, #328]	; (80136fc <tcp_write+0x2e4>)
 80135b4:	f00a f834 	bl	801d620 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80135b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80135bc:	88fb      	ldrh	r3, [r7, #6]
 80135be:	429a      	cmp	r2, r3
 80135c0:	f080 8167 	bcs.w	8013892 <tcp_write+0x47a>
 80135c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	f000 8163 	beq.w	8013892 <tcp_write+0x47a>
 80135cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135ce:	891b      	ldrh	r3, [r3, #8]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	f000 815e 	beq.w	8013892 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80135d6:	88fa      	ldrh	r2, [r7, #6]
 80135d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80135dc:	1ad2      	subs	r2, r2, r3
 80135de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80135e0:	4293      	cmp	r3, r2
 80135e2:	bfa8      	it	ge
 80135e4:	4613      	movge	r3, r2
 80135e6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80135e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135ea:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80135ec:	797b      	ldrb	r3, [r7, #5]
 80135ee:	f003 0301 	and.w	r3, r3, #1
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d027      	beq.n	8013646 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80135f6:	f107 0012 	add.w	r0, r7, #18
 80135fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80135fc:	8bf9      	ldrh	r1, [r7, #30]
 80135fe:	2301      	movs	r3, #1
 8013600:	9302      	str	r3, [sp, #8]
 8013602:	797b      	ldrb	r3, [r7, #5]
 8013604:	9301      	str	r3, [sp, #4]
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	9300      	str	r3, [sp, #0]
 801360a:	4603      	mov	r3, r0
 801360c:	2000      	movs	r0, #0
 801360e:	f7ff fe0f 	bl	8013230 <tcp_pbuf_prealloc>
 8013612:	6578      	str	r0, [r7, #84]	; 0x54
 8013614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013616:	2b00      	cmp	r3, #0
 8013618:	f000 8225 	beq.w	8013a66 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801361c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801361e:	6858      	ldr	r0, [r3, #4]
 8013620:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013624:	68ba      	ldr	r2, [r7, #8]
 8013626:	4413      	add	r3, r2
 8013628:	8bfa      	ldrh	r2, [r7, #30]
 801362a:	4619      	mov	r1, r3
 801362c:	f009 ffe2 	bl	801d5f4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013630:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013632:	f7fb fa09 	bl	800ea48 <pbuf_clen>
 8013636:	4603      	mov	r3, r0
 8013638:	461a      	mov	r2, r3
 801363a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801363e:	4413      	add	r3, r2
 8013640:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013644:	e041      	b.n	80136ca <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013648:	685b      	ldr	r3, [r3, #4]
 801364a:	637b      	str	r3, [r7, #52]	; 0x34
 801364c:	e002      	b.n	8013654 <tcp_write+0x23c>
 801364e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	637b      	str	r3, [r7, #52]	; 0x34
 8013654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d1f8      	bne.n	801364e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801365c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801365e:	7b1b      	ldrb	r3, [r3, #12]
 8013660:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013664:	2b00      	cmp	r3, #0
 8013666:	d115      	bne.n	8013694 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801366a:	685b      	ldr	r3, [r3, #4]
 801366c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801366e:	8952      	ldrh	r2, [r2, #10]
 8013670:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013672:	68ba      	ldr	r2, [r7, #8]
 8013674:	429a      	cmp	r2, r3
 8013676:	d10d      	bne.n	8013694 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013678:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801367c:	2b00      	cmp	r3, #0
 801367e:	d006      	beq.n	801368e <tcp_write+0x276>
 8013680:	4b1c      	ldr	r3, [pc, #112]	; (80136f4 <tcp_write+0x2dc>)
 8013682:	f240 2231 	movw	r2, #561	; 0x231
 8013686:	4922      	ldr	r1, [pc, #136]	; (8013710 <tcp_write+0x2f8>)
 8013688:	481c      	ldr	r0, [pc, #112]	; (80136fc <tcp_write+0x2e4>)
 801368a:	f009 ffc9 	bl	801d620 <iprintf>
          extendlen = seglen;
 801368e:	8bfb      	ldrh	r3, [r7, #30]
 8013690:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8013692:	e01a      	b.n	80136ca <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013694:	8bfb      	ldrh	r3, [r7, #30]
 8013696:	2201      	movs	r2, #1
 8013698:	4619      	mov	r1, r3
 801369a:	2000      	movs	r0, #0
 801369c:	f7fa fe62 	bl	800e364 <pbuf_alloc>
 80136a0:	6578      	str	r0, [r7, #84]	; 0x54
 80136a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	f000 81e0 	beq.w	8013a6a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80136aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80136ae:	68ba      	ldr	r2, [r7, #8]
 80136b0:	441a      	add	r2, r3
 80136b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136b4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80136b6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80136b8:	f7fb f9c6 	bl	800ea48 <pbuf_clen>
 80136bc:	4603      	mov	r3, r0
 80136be:	461a      	mov	r2, r3
 80136c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80136c4:	4413      	add	r3, r2
 80136c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80136ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80136ce:	8bfb      	ldrh	r3, [r7, #30]
 80136d0:	4413      	add	r3, r2
 80136d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80136d6:	e0dc      	b.n	8013892 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80136de:	2b00      	cmp	r3, #0
 80136e0:	f000 80d7 	beq.w	8013892 <tcp_write+0x47a>
 80136e4:	4b03      	ldr	r3, [pc, #12]	; (80136f4 <tcp_write+0x2dc>)
 80136e6:	f240 224a 	movw	r2, #586	; 0x24a
 80136ea:	490a      	ldr	r1, [pc, #40]	; (8013714 <tcp_write+0x2fc>)
 80136ec:	4803      	ldr	r0, [pc, #12]	; (80136fc <tcp_write+0x2e4>)
 80136ee:	f009 ff97 	bl	801d620 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80136f2:	e0ce      	b.n	8013892 <tcp_write+0x47a>
 80136f4:	08020a3c 	.word	0x08020a3c
 80136f8:	08020bdc 	.word	0x08020bdc
 80136fc:	08020a90 	.word	0x08020a90
 8013700:	08020bf4 	.word	0x08020bf4
 8013704:	08020c28 	.word	0x08020c28
 8013708:	08020c40 	.word	0x08020c40
 801370c:	08020c60 	.word	0x08020c60
 8013710:	08020c80 	.word	0x08020c80
 8013714:	08020cac 	.word	0x08020cac
    struct pbuf *p;
    u16_t left = len - pos;
 8013718:	88fa      	ldrh	r2, [r7, #6]
 801371a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801371e:	1ad3      	subs	r3, r2, r3
 8013720:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013722:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013726:	b29b      	uxth	r3, r3
 8013728:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801372a:	1ad3      	subs	r3, r2, r3
 801372c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801372e:	8b7a      	ldrh	r2, [r7, #26]
 8013730:	8bbb      	ldrh	r3, [r7, #28]
 8013732:	4293      	cmp	r3, r2
 8013734:	bf28      	it	cs
 8013736:	4613      	movcs	r3, r2
 8013738:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801373a:	797b      	ldrb	r3, [r7, #5]
 801373c:	f003 0301 	and.w	r3, r3, #1
 8013740:	2b00      	cmp	r3, #0
 8013742:	d036      	beq.n	80137b2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013744:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013748:	b29a      	uxth	r2, r3
 801374a:	8b3b      	ldrh	r3, [r7, #24]
 801374c:	4413      	add	r3, r2
 801374e:	b299      	uxth	r1, r3
 8013750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013752:	2b00      	cmp	r3, #0
 8013754:	bf0c      	ite	eq
 8013756:	2301      	moveq	r3, #1
 8013758:	2300      	movne	r3, #0
 801375a:	b2db      	uxtb	r3, r3
 801375c:	f107 0012 	add.w	r0, r7, #18
 8013760:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013762:	9302      	str	r3, [sp, #8]
 8013764:	797b      	ldrb	r3, [r7, #5]
 8013766:	9301      	str	r3, [sp, #4]
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	9300      	str	r3, [sp, #0]
 801376c:	4603      	mov	r3, r0
 801376e:	2036      	movs	r0, #54	; 0x36
 8013770:	f7ff fd5e 	bl	8013230 <tcp_pbuf_prealloc>
 8013774:	6338      	str	r0, [r7, #48]	; 0x30
 8013776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013778:	2b00      	cmp	r3, #0
 801377a:	f000 8178 	beq.w	8013a6e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013780:	895b      	ldrh	r3, [r3, #10]
 8013782:	8b3a      	ldrh	r2, [r7, #24]
 8013784:	429a      	cmp	r2, r3
 8013786:	d906      	bls.n	8013796 <tcp_write+0x37e>
 8013788:	4b8c      	ldr	r3, [pc, #560]	; (80139bc <tcp_write+0x5a4>)
 801378a:	f240 2266 	movw	r2, #614	; 0x266
 801378e:	498c      	ldr	r1, [pc, #560]	; (80139c0 <tcp_write+0x5a8>)
 8013790:	488c      	ldr	r0, [pc, #560]	; (80139c4 <tcp_write+0x5ac>)
 8013792:	f009 ff45 	bl	801d620 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013798:	685a      	ldr	r2, [r3, #4]
 801379a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801379e:	18d0      	adds	r0, r2, r3
 80137a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137a4:	68ba      	ldr	r2, [r7, #8]
 80137a6:	4413      	add	r3, r2
 80137a8:	8b3a      	ldrh	r2, [r7, #24]
 80137aa:	4619      	mov	r1, r3
 80137ac:	f009 ff22 	bl	801d5f4 <memcpy>
 80137b0:	e02f      	b.n	8013812 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80137b2:	8a7b      	ldrh	r3, [r7, #18]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d006      	beq.n	80137c6 <tcp_write+0x3ae>
 80137b8:	4b80      	ldr	r3, [pc, #512]	; (80139bc <tcp_write+0x5a4>)
 80137ba:	f240 2271 	movw	r2, #625	; 0x271
 80137be:	4982      	ldr	r1, [pc, #520]	; (80139c8 <tcp_write+0x5b0>)
 80137c0:	4880      	ldr	r0, [pc, #512]	; (80139c4 <tcp_write+0x5ac>)
 80137c2:	f009 ff2d 	bl	801d620 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80137c6:	8b3b      	ldrh	r3, [r7, #24]
 80137c8:	2201      	movs	r2, #1
 80137ca:	4619      	mov	r1, r3
 80137cc:	2036      	movs	r0, #54	; 0x36
 80137ce:	f7fa fdc9 	bl	800e364 <pbuf_alloc>
 80137d2:	6178      	str	r0, [r7, #20]
 80137d4:	697b      	ldr	r3, [r7, #20]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	f000 814b 	beq.w	8013a72 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80137dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137e0:	68ba      	ldr	r2, [r7, #8]
 80137e2:	441a      	add	r2, r3
 80137e4:	697b      	ldr	r3, [r7, #20]
 80137e6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80137e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80137ec:	b29b      	uxth	r3, r3
 80137ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80137f2:	4619      	mov	r1, r3
 80137f4:	2036      	movs	r0, #54	; 0x36
 80137f6:	f7fa fdb5 	bl	800e364 <pbuf_alloc>
 80137fa:	6338      	str	r0, [r7, #48]	; 0x30
 80137fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d103      	bne.n	801380a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013802:	6978      	ldr	r0, [r7, #20]
 8013804:	f7fb f892 	bl	800e92c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013808:	e136      	b.n	8013a78 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801380a:	6979      	ldr	r1, [r7, #20]
 801380c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801380e:	f7fb f95b 	bl	800eac8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013812:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013814:	f7fb f918 	bl	800ea48 <pbuf_clen>
 8013818:	4603      	mov	r3, r0
 801381a:	461a      	mov	r2, r3
 801381c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013820:	4413      	add	r3, r2
 8013822:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013826:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801382a:	2b09      	cmp	r3, #9
 801382c:	d903      	bls.n	8013836 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801382e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013830:	f7fb f87c 	bl	800e92c <pbuf_free>
      goto memerr;
 8013834:	e120      	b.n	8013a78 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801383a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801383e:	441a      	add	r2, r3
 8013840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013844:	9300      	str	r3, [sp, #0]
 8013846:	4613      	mov	r3, r2
 8013848:	2200      	movs	r2, #0
 801384a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801384c:	68f8      	ldr	r0, [r7, #12]
 801384e:	f7ff fc51 	bl	80130f4 <tcp_create_segment>
 8013852:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013856:	2b00      	cmp	r3, #0
 8013858:	f000 810d 	beq.w	8013a76 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801385c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801385e:	2b00      	cmp	r3, #0
 8013860:	d102      	bne.n	8013868 <tcp_write+0x450>
      queue = seg;
 8013862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013864:	647b      	str	r3, [r7, #68]	; 0x44
 8013866:	e00c      	b.n	8013882 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801386a:	2b00      	cmp	r3, #0
 801386c:	d106      	bne.n	801387c <tcp_write+0x464>
 801386e:	4b53      	ldr	r3, [pc, #332]	; (80139bc <tcp_write+0x5a4>)
 8013870:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013874:	4955      	ldr	r1, [pc, #340]	; (80139cc <tcp_write+0x5b4>)
 8013876:	4853      	ldr	r0, [pc, #332]	; (80139c4 <tcp_write+0x5ac>)
 8013878:	f009 fed2 	bl	801d620 <iprintf>
      prev_seg->next = seg;
 801387c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801387e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013880:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013884:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013886:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801388a:	8b3b      	ldrh	r3, [r7, #24]
 801388c:	4413      	add	r3, r2
 801388e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8013892:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013896:	88fb      	ldrh	r3, [r7, #6]
 8013898:	429a      	cmp	r2, r3
 801389a:	f4ff af3d 	bcc.w	8013718 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801389e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d02c      	beq.n	80138fe <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80138a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138a6:	685b      	ldr	r3, [r3, #4]
 80138a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80138aa:	e01e      	b.n	80138ea <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80138ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ae:	891a      	ldrh	r2, [r3, #8]
 80138b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80138b2:	4413      	add	r3, r2
 80138b4:	b29a      	uxth	r2, r3
 80138b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138b8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80138ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d110      	bne.n	80138e4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80138c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138c4:	685b      	ldr	r3, [r3, #4]
 80138c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138c8:	8952      	ldrh	r2, [r2, #10]
 80138ca:	4413      	add	r3, r2
 80138cc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80138ce:	68b9      	ldr	r1, [r7, #8]
 80138d0:	4618      	mov	r0, r3
 80138d2:	f009 fe8f 	bl	801d5f4 <memcpy>
        p->len += oversize_used;
 80138d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138d8:	895a      	ldrh	r2, [r3, #10]
 80138da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80138dc:	4413      	add	r3, r2
 80138de:	b29a      	uxth	r2, r3
 80138e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80138e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80138ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d1dd      	bne.n	80138ac <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80138f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138f2:	891a      	ldrh	r2, [r3, #8]
 80138f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80138f6:	4413      	add	r3, r2
 80138f8:	b29a      	uxth	r2, r3
 80138fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138fc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80138fe:	8a7a      	ldrh	r2, [r7, #18]
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013908:	2b00      	cmp	r3, #0
 801390a:	d018      	beq.n	801393e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801390c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801390e:	2b00      	cmp	r3, #0
 8013910:	d106      	bne.n	8013920 <tcp_write+0x508>
 8013912:	4b2a      	ldr	r3, [pc, #168]	; (80139bc <tcp_write+0x5a4>)
 8013914:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8013918:	492d      	ldr	r1, [pc, #180]	; (80139d0 <tcp_write+0x5b8>)
 801391a:	482a      	ldr	r0, [pc, #168]	; (80139c4 <tcp_write+0x5ac>)
 801391c:	f009 fe80 	bl	801d620 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013922:	685b      	ldr	r3, [r3, #4]
 8013924:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013926:	4618      	mov	r0, r3
 8013928:	f7fb f8ce 	bl	800eac8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801392c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801392e:	891a      	ldrh	r2, [r3, #8]
 8013930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013932:	891b      	ldrh	r3, [r3, #8]
 8013934:	4413      	add	r3, r2
 8013936:	b29a      	uxth	r2, r3
 8013938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801393a:	811a      	strh	r2, [r3, #8]
 801393c:	e037      	b.n	80139ae <tcp_write+0x596>
  } else if (extendlen > 0) {
 801393e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013940:	2b00      	cmp	r3, #0
 8013942:	d034      	beq.n	80139ae <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013946:	2b00      	cmp	r3, #0
 8013948:	d003      	beq.n	8013952 <tcp_write+0x53a>
 801394a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801394c:	685b      	ldr	r3, [r3, #4]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d106      	bne.n	8013960 <tcp_write+0x548>
 8013952:	4b1a      	ldr	r3, [pc, #104]	; (80139bc <tcp_write+0x5a4>)
 8013954:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013958:	491e      	ldr	r1, [pc, #120]	; (80139d4 <tcp_write+0x5bc>)
 801395a:	481a      	ldr	r0, [pc, #104]	; (80139c4 <tcp_write+0x5ac>)
 801395c:	f009 fe60 	bl	801d620 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013962:	685b      	ldr	r3, [r3, #4]
 8013964:	62bb      	str	r3, [r7, #40]	; 0x28
 8013966:	e009      	b.n	801397c <tcp_write+0x564>
      p->tot_len += extendlen;
 8013968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801396a:	891a      	ldrh	r2, [r3, #8]
 801396c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801396e:	4413      	add	r3, r2
 8013970:	b29a      	uxth	r2, r3
 8013972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013974:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	62bb      	str	r3, [r7, #40]	; 0x28
 801397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d1f1      	bne.n	8013968 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013986:	891a      	ldrh	r2, [r3, #8]
 8013988:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801398a:	4413      	add	r3, r2
 801398c:	b29a      	uxth	r2, r3
 801398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013990:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013994:	895a      	ldrh	r2, [r3, #10]
 8013996:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013998:	4413      	add	r3, r2
 801399a:	b29a      	uxth	r2, r3
 801399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801399e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80139a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139a2:	891a      	ldrh	r2, [r3, #8]
 80139a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139a6:	4413      	add	r3, r2
 80139a8:	b29a      	uxth	r2, r3
 80139aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139ac:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80139ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d111      	bne.n	80139d8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80139b8:	66da      	str	r2, [r3, #108]	; 0x6c
 80139ba:	e010      	b.n	80139de <tcp_write+0x5c6>
 80139bc:	08020a3c 	.word	0x08020a3c
 80139c0:	08020cdc 	.word	0x08020cdc
 80139c4:	08020a90 	.word	0x08020a90
 80139c8:	08020d1c 	.word	0x08020d1c
 80139cc:	08020d2c 	.word	0x08020d2c
 80139d0:	08020d40 	.word	0x08020d40
 80139d4:	08020d78 	.word	0x08020d78
  } else {
    last_unsent->next = queue;
 80139d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80139dc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80139e2:	88fb      	ldrh	r3, [r7, #6]
 80139e4:	441a      	add	r2, r3
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80139f0:	88fb      	ldrh	r3, [r7, #6]
 80139f2:	1ad3      	subs	r3, r2, r3
 80139f4:	b29a      	uxth	r2, r3
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013a02:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d00e      	beq.n	8013a2e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d10a      	bne.n	8013a2e <tcp_write+0x616>
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d106      	bne.n	8013a2e <tcp_write+0x616>
 8013a20:	4b2c      	ldr	r3, [pc, #176]	; (8013ad4 <tcp_write+0x6bc>)
 8013a22:	f240 3212 	movw	r2, #786	; 0x312
 8013a26:	492c      	ldr	r1, [pc, #176]	; (8013ad8 <tcp_write+0x6c0>)
 8013a28:	482c      	ldr	r0, [pc, #176]	; (8013adc <tcp_write+0x6c4>)
 8013a2a:	f009 fdf9 	bl	801d620 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d016      	beq.n	8013a62 <tcp_write+0x64a>
 8013a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a36:	68db      	ldr	r3, [r3, #12]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d012      	beq.n	8013a62 <tcp_write+0x64a>
 8013a3c:	797b      	ldrb	r3, [r7, #5]
 8013a3e:	f003 0302 	and.w	r3, r3, #2
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d10d      	bne.n	8013a62 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a48:	68db      	ldr	r3, [r3, #12]
 8013a4a:	899b      	ldrh	r3, [r3, #12]
 8013a4c:	b29c      	uxth	r4, r3
 8013a4e:	2008      	movs	r0, #8
 8013a50:	f7f9 fb6a 	bl	800d128 <lwip_htons>
 8013a54:	4603      	mov	r3, r0
 8013a56:	461a      	mov	r2, r3
 8013a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a5a:	68db      	ldr	r3, [r3, #12]
 8013a5c:	4322      	orrs	r2, r4
 8013a5e:	b292      	uxth	r2, r2
 8013a60:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013a62:	2300      	movs	r3, #0
 8013a64:	e031      	b.n	8013aca <tcp_write+0x6b2>
          goto memerr;
 8013a66:	bf00      	nop
 8013a68:	e006      	b.n	8013a78 <tcp_write+0x660>
            goto memerr;
 8013a6a:	bf00      	nop
 8013a6c:	e004      	b.n	8013a78 <tcp_write+0x660>
        goto memerr;
 8013a6e:	bf00      	nop
 8013a70:	e002      	b.n	8013a78 <tcp_write+0x660>
        goto memerr;
 8013a72:	bf00      	nop
 8013a74:	e000      	b.n	8013a78 <tcp_write+0x660>
      goto memerr;
 8013a76:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	8b5b      	ldrh	r3, [r3, #26]
 8013a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a80:	b29a      	uxth	r2, r3
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d002      	beq.n	8013a92 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8013a8c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013a8e:	f7fa ff4d 	bl	800e92c <pbuf_free>
  }
  if (queue != NULL) {
 8013a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d002      	beq.n	8013a9e <tcp_write+0x686>
    tcp_segs_free(queue);
 8013a98:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013a9a:	f7fc fb6b 	bl	8010174 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d00e      	beq.n	8013ac6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d10a      	bne.n	8013ac6 <tcp_write+0x6ae>
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d106      	bne.n	8013ac6 <tcp_write+0x6ae>
 8013ab8:	4b06      	ldr	r3, [pc, #24]	; (8013ad4 <tcp_write+0x6bc>)
 8013aba:	f240 3227 	movw	r2, #807	; 0x327
 8013abe:	4906      	ldr	r1, [pc, #24]	; (8013ad8 <tcp_write+0x6c0>)
 8013ac0:	4806      	ldr	r0, [pc, #24]	; (8013adc <tcp_write+0x6c4>)
 8013ac2:	f009 fdad 	bl	801d620 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013aca:	4618      	mov	r0, r3
 8013acc:	375c      	adds	r7, #92	; 0x5c
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd90      	pop	{r4, r7, pc}
 8013ad2:	bf00      	nop
 8013ad4:	08020a3c 	.word	0x08020a3c
 8013ad8:	08020db0 	.word	0x08020db0
 8013adc:	08020a90 	.word	0x08020a90

08013ae0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013ae0:	b590      	push	{r4, r7, lr}
 8013ae2:	b08b      	sub	sp, #44	; 0x2c
 8013ae4:	af02      	add	r7, sp, #8
 8013ae6:	6078      	str	r0, [r7, #4]
 8013ae8:	460b      	mov	r3, r1
 8013aea:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013aec:	2300      	movs	r3, #0
 8013aee:	61fb      	str	r3, [r7, #28]
 8013af0:	2300      	movs	r3, #0
 8013af2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013af4:	2300      	movs	r3, #0
 8013af6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d106      	bne.n	8013b0c <tcp_split_unsent_seg+0x2c>
 8013afe:	4b95      	ldr	r3, [pc, #596]	; (8013d54 <tcp_split_unsent_seg+0x274>)
 8013b00:	f240 324b 	movw	r2, #843	; 0x34b
 8013b04:	4994      	ldr	r1, [pc, #592]	; (8013d58 <tcp_split_unsent_seg+0x278>)
 8013b06:	4895      	ldr	r0, [pc, #596]	; (8013d5c <tcp_split_unsent_seg+0x27c>)
 8013b08:	f009 fd8a 	bl	801d620 <iprintf>

  useg = pcb->unsent;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b10:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d102      	bne.n	8013b1e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b1c:	e116      	b.n	8013d4c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013b1e:	887b      	ldrh	r3, [r7, #2]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d109      	bne.n	8013b38 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013b24:	4b8b      	ldr	r3, [pc, #556]	; (8013d54 <tcp_split_unsent_seg+0x274>)
 8013b26:	f240 3253 	movw	r2, #851	; 0x353
 8013b2a:	498d      	ldr	r1, [pc, #564]	; (8013d60 <tcp_split_unsent_seg+0x280>)
 8013b2c:	488b      	ldr	r0, [pc, #556]	; (8013d5c <tcp_split_unsent_seg+0x27c>)
 8013b2e:	f009 fd77 	bl	801d620 <iprintf>
    return ERR_VAL;
 8013b32:	f06f 0305 	mvn.w	r3, #5
 8013b36:	e109      	b.n	8013d4c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013b38:	697b      	ldr	r3, [r7, #20]
 8013b3a:	891b      	ldrh	r3, [r3, #8]
 8013b3c:	887a      	ldrh	r2, [r7, #2]
 8013b3e:	429a      	cmp	r2, r3
 8013b40:	d301      	bcc.n	8013b46 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013b42:	2300      	movs	r3, #0
 8013b44:	e102      	b.n	8013d4c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b4a:	887a      	ldrh	r2, [r7, #2]
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	d906      	bls.n	8013b5e <tcp_split_unsent_seg+0x7e>
 8013b50:	4b80      	ldr	r3, [pc, #512]	; (8013d54 <tcp_split_unsent_seg+0x274>)
 8013b52:	f240 325b 	movw	r2, #859	; 0x35b
 8013b56:	4983      	ldr	r1, [pc, #524]	; (8013d64 <tcp_split_unsent_seg+0x284>)
 8013b58:	4880      	ldr	r0, [pc, #512]	; (8013d5c <tcp_split_unsent_seg+0x27c>)
 8013b5a:	f009 fd61 	bl	801d620 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013b5e:	697b      	ldr	r3, [r7, #20]
 8013b60:	891b      	ldrh	r3, [r3, #8]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d106      	bne.n	8013b74 <tcp_split_unsent_seg+0x94>
 8013b66:	4b7b      	ldr	r3, [pc, #492]	; (8013d54 <tcp_split_unsent_seg+0x274>)
 8013b68:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013b6c:	497e      	ldr	r1, [pc, #504]	; (8013d68 <tcp_split_unsent_seg+0x288>)
 8013b6e:	487b      	ldr	r0, [pc, #492]	; (8013d5c <tcp_split_unsent_seg+0x27c>)
 8013b70:	f009 fd56 	bl	801d620 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013b74:	697b      	ldr	r3, [r7, #20]
 8013b76:	7a9b      	ldrb	r3, [r3, #10]
 8013b78:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013b7a:	7bfb      	ldrb	r3, [r7, #15]
 8013b7c:	009b      	lsls	r3, r3, #2
 8013b7e:	b2db      	uxtb	r3, r3
 8013b80:	f003 0304 	and.w	r3, r3, #4
 8013b84:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013b86:	697b      	ldr	r3, [r7, #20]
 8013b88:	891a      	ldrh	r2, [r3, #8]
 8013b8a:	887b      	ldrh	r3, [r7, #2]
 8013b8c:	1ad3      	subs	r3, r2, r3
 8013b8e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013b90:	7bbb      	ldrb	r3, [r7, #14]
 8013b92:	b29a      	uxth	r2, r3
 8013b94:	89bb      	ldrh	r3, [r7, #12]
 8013b96:	4413      	add	r3, r2
 8013b98:	b29b      	uxth	r3, r3
 8013b9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b9e:	4619      	mov	r1, r3
 8013ba0:	2036      	movs	r0, #54	; 0x36
 8013ba2:	f7fa fbdf 	bl	800e364 <pbuf_alloc>
 8013ba6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013ba8:	693b      	ldr	r3, [r7, #16]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	f000 80b7 	beq.w	8013d1e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013bb0:	697b      	ldr	r3, [r7, #20]
 8013bb2:	685b      	ldr	r3, [r3, #4]
 8013bb4:	891a      	ldrh	r2, [r3, #8]
 8013bb6:	697b      	ldr	r3, [r7, #20]
 8013bb8:	891b      	ldrh	r3, [r3, #8]
 8013bba:	1ad3      	subs	r3, r2, r3
 8013bbc:	b29a      	uxth	r2, r3
 8013bbe:	887b      	ldrh	r3, [r7, #2]
 8013bc0:	4413      	add	r3, r2
 8013bc2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013bc4:	697b      	ldr	r3, [r7, #20]
 8013bc6:	6858      	ldr	r0, [r3, #4]
 8013bc8:	693b      	ldr	r3, [r7, #16]
 8013bca:	685a      	ldr	r2, [r3, #4]
 8013bcc:	7bbb      	ldrb	r3, [r7, #14]
 8013bce:	18d1      	adds	r1, r2, r3
 8013bd0:	897b      	ldrh	r3, [r7, #10]
 8013bd2:	89ba      	ldrh	r2, [r7, #12]
 8013bd4:	f7fb f8a0 	bl	800ed18 <pbuf_copy_partial>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	461a      	mov	r2, r3
 8013bdc:	89bb      	ldrh	r3, [r7, #12]
 8013bde:	4293      	cmp	r3, r2
 8013be0:	f040 809f 	bne.w	8013d22 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013be4:	697b      	ldr	r3, [r7, #20]
 8013be6:	68db      	ldr	r3, [r3, #12]
 8013be8:	899b      	ldrh	r3, [r3, #12]
 8013bea:	b29b      	uxth	r3, r3
 8013bec:	4618      	mov	r0, r3
 8013bee:	f7f9 fa9b 	bl	800d128 <lwip_htons>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	b2db      	uxtb	r3, r3
 8013bf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013bfa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013c00:	7efb      	ldrb	r3, [r7, #27]
 8013c02:	f003 0308 	and.w	r3, r3, #8
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d007      	beq.n	8013c1a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013c0a:	7efb      	ldrb	r3, [r7, #27]
 8013c0c:	f023 0308 	bic.w	r3, r3, #8
 8013c10:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013c12:	7ebb      	ldrb	r3, [r7, #26]
 8013c14:	f043 0308 	orr.w	r3, r3, #8
 8013c18:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013c1a:	7efb      	ldrb	r3, [r7, #27]
 8013c1c:	f003 0301 	and.w	r3, r3, #1
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d007      	beq.n	8013c34 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013c24:	7efb      	ldrb	r3, [r7, #27]
 8013c26:	f023 0301 	bic.w	r3, r3, #1
 8013c2a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013c2c:	7ebb      	ldrb	r3, [r7, #26]
 8013c2e:	f043 0301 	orr.w	r3, r3, #1
 8013c32:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013c34:	697b      	ldr	r3, [r7, #20]
 8013c36:	68db      	ldr	r3, [r3, #12]
 8013c38:	685b      	ldr	r3, [r3, #4]
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7f9 fa89 	bl	800d152 <lwip_htonl>
 8013c40:	4602      	mov	r2, r0
 8013c42:	887b      	ldrh	r3, [r7, #2]
 8013c44:	18d1      	adds	r1, r2, r3
 8013c46:	7eba      	ldrb	r2, [r7, #26]
 8013c48:	7bfb      	ldrb	r3, [r7, #15]
 8013c4a:	9300      	str	r3, [sp, #0]
 8013c4c:	460b      	mov	r3, r1
 8013c4e:	6939      	ldr	r1, [r7, #16]
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f7ff fa4f 	bl	80130f4 <tcp_create_segment>
 8013c56:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013c58:	69fb      	ldr	r3, [r7, #28]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d063      	beq.n	8013d26 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013c5e:	697b      	ldr	r3, [r7, #20]
 8013c60:	685b      	ldr	r3, [r3, #4]
 8013c62:	4618      	mov	r0, r3
 8013c64:	f7fa fef0 	bl	800ea48 <pbuf_clen>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	461a      	mov	r2, r3
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c72:	1a9b      	subs	r3, r3, r2
 8013c74:	b29a      	uxth	r2, r3
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013c7c:	697b      	ldr	r3, [r7, #20]
 8013c7e:	6858      	ldr	r0, [r3, #4]
 8013c80:	697b      	ldr	r3, [r7, #20]
 8013c82:	685b      	ldr	r3, [r3, #4]
 8013c84:	891a      	ldrh	r2, [r3, #8]
 8013c86:	89bb      	ldrh	r3, [r7, #12]
 8013c88:	1ad3      	subs	r3, r2, r3
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	4619      	mov	r1, r3
 8013c8e:	f7fa fcc7 	bl	800e620 <pbuf_realloc>
  useg->len -= remainder;
 8013c92:	697b      	ldr	r3, [r7, #20]
 8013c94:	891a      	ldrh	r2, [r3, #8]
 8013c96:	89bb      	ldrh	r3, [r7, #12]
 8013c98:	1ad3      	subs	r3, r2, r3
 8013c9a:	b29a      	uxth	r2, r3
 8013c9c:	697b      	ldr	r3, [r7, #20]
 8013c9e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013ca0:	697b      	ldr	r3, [r7, #20]
 8013ca2:	68db      	ldr	r3, [r3, #12]
 8013ca4:	899b      	ldrh	r3, [r3, #12]
 8013ca6:	b29c      	uxth	r4, r3
 8013ca8:	7efb      	ldrb	r3, [r7, #27]
 8013caa:	b29b      	uxth	r3, r3
 8013cac:	4618      	mov	r0, r3
 8013cae:	f7f9 fa3b 	bl	800d128 <lwip_htons>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	461a      	mov	r2, r3
 8013cb6:	697b      	ldr	r3, [r7, #20]
 8013cb8:	68db      	ldr	r3, [r3, #12]
 8013cba:	4322      	orrs	r2, r4
 8013cbc:	b292      	uxth	r2, r2
 8013cbe:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013cc0:	697b      	ldr	r3, [r7, #20]
 8013cc2:	685b      	ldr	r3, [r3, #4]
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	f7fa febf 	bl	800ea48 <pbuf_clen>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	461a      	mov	r2, r3
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013cd4:	4413      	add	r3, r2
 8013cd6:	b29a      	uxth	r2, r3
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013cde:	69fb      	ldr	r3, [r7, #28]
 8013ce0:	685b      	ldr	r3, [r3, #4]
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	f7fa feb0 	bl	800ea48 <pbuf_clen>
 8013ce8:	4603      	mov	r3, r0
 8013cea:	461a      	mov	r2, r3
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013cf2:	4413      	add	r3, r2
 8013cf4:	b29a      	uxth	r2, r3
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013cfc:	697b      	ldr	r3, [r7, #20]
 8013cfe:	681a      	ldr	r2, [r3, #0]
 8013d00:	69fb      	ldr	r3, [r7, #28]
 8013d02:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013d04:	697b      	ldr	r3, [r7, #20]
 8013d06:	69fa      	ldr	r2, [r7, #28]
 8013d08:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013d0a:	69fb      	ldr	r3, [r7, #28]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d103      	bne.n	8013d1a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2200      	movs	r2, #0
 8013d16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	e016      	b.n	8013d4c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013d1e:	bf00      	nop
 8013d20:	e002      	b.n	8013d28 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013d22:	bf00      	nop
 8013d24:	e000      	b.n	8013d28 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013d26:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013d28:	69fb      	ldr	r3, [r7, #28]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d006      	beq.n	8013d3c <tcp_split_unsent_seg+0x25c>
 8013d2e:	4b09      	ldr	r3, [pc, #36]	; (8013d54 <tcp_split_unsent_seg+0x274>)
 8013d30:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013d34:	490d      	ldr	r1, [pc, #52]	; (8013d6c <tcp_split_unsent_seg+0x28c>)
 8013d36:	4809      	ldr	r0, [pc, #36]	; (8013d5c <tcp_split_unsent_seg+0x27c>)
 8013d38:	f009 fc72 	bl	801d620 <iprintf>
  if (p != NULL) {
 8013d3c:	693b      	ldr	r3, [r7, #16]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d002      	beq.n	8013d48 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013d42:	6938      	ldr	r0, [r7, #16]
 8013d44:	f7fa fdf2 	bl	800e92c <pbuf_free>
  }

  return ERR_MEM;
 8013d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3724      	adds	r7, #36	; 0x24
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd90      	pop	{r4, r7, pc}
 8013d54:	08020a3c 	.word	0x08020a3c
 8013d58:	08020dd0 	.word	0x08020dd0
 8013d5c:	08020a90 	.word	0x08020a90
 8013d60:	08020df4 	.word	0x08020df4
 8013d64:	08020e18 	.word	0x08020e18
 8013d68:	08020e28 	.word	0x08020e28
 8013d6c:	08020e38 	.word	0x08020e38

08013d70 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013d70:	b590      	push	{r4, r7, lr}
 8013d72:	b085      	sub	sp, #20
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d106      	bne.n	8013d8c <tcp_send_fin+0x1c>
 8013d7e:	4b21      	ldr	r3, [pc, #132]	; (8013e04 <tcp_send_fin+0x94>)
 8013d80:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013d84:	4920      	ldr	r1, [pc, #128]	; (8013e08 <tcp_send_fin+0x98>)
 8013d86:	4821      	ldr	r0, [pc, #132]	; (8013e0c <tcp_send_fin+0x9c>)
 8013d88:	f009 fc4a 	bl	801d620 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d02e      	beq.n	8013df2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d98:	60fb      	str	r3, [r7, #12]
 8013d9a:	e002      	b.n	8013da2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d1f8      	bne.n	8013d9c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	68db      	ldr	r3, [r3, #12]
 8013dae:	899b      	ldrh	r3, [r3, #12]
 8013db0:	b29b      	uxth	r3, r3
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7f9 f9b8 	bl	800d128 <lwip_htons>
 8013db8:	4603      	mov	r3, r0
 8013dba:	b2db      	uxtb	r3, r3
 8013dbc:	f003 0307 	and.w	r3, r3, #7
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d116      	bne.n	8013df2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	68db      	ldr	r3, [r3, #12]
 8013dc8:	899b      	ldrh	r3, [r3, #12]
 8013dca:	b29c      	uxth	r4, r3
 8013dcc:	2001      	movs	r0, #1
 8013dce:	f7f9 f9ab 	bl	800d128 <lwip_htons>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	461a      	mov	r2, r3
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	68db      	ldr	r3, [r3, #12]
 8013dda:	4322      	orrs	r2, r4
 8013ddc:	b292      	uxth	r2, r2
 8013dde:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	8b5b      	ldrh	r3, [r3, #26]
 8013de4:	f043 0320 	orr.w	r3, r3, #32
 8013de8:	b29a      	uxth	r2, r3
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013dee:	2300      	movs	r3, #0
 8013df0:	e004      	b.n	8013dfc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013df2:	2101      	movs	r1, #1
 8013df4:	6878      	ldr	r0, [r7, #4]
 8013df6:	f000 f80b 	bl	8013e10 <tcp_enqueue_flags>
 8013dfa:	4603      	mov	r3, r0
}
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	3714      	adds	r7, #20
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bd90      	pop	{r4, r7, pc}
 8013e04:	08020a3c 	.word	0x08020a3c
 8013e08:	08020e44 	.word	0x08020e44
 8013e0c:	08020a90 	.word	0x08020a90

08013e10 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b08a      	sub	sp, #40	; 0x28
 8013e14:	af02      	add	r7, sp, #8
 8013e16:	6078      	str	r0, [r7, #4]
 8013e18:	460b      	mov	r3, r1
 8013e1a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013e20:	2300      	movs	r3, #0
 8013e22:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013e24:	78fb      	ldrb	r3, [r7, #3]
 8013e26:	f003 0303 	and.w	r3, r3, #3
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d106      	bne.n	8013e3c <tcp_enqueue_flags+0x2c>
 8013e2e:	4b67      	ldr	r3, [pc, #412]	; (8013fcc <tcp_enqueue_flags+0x1bc>)
 8013e30:	f240 4211 	movw	r2, #1041	; 0x411
 8013e34:	4966      	ldr	r1, [pc, #408]	; (8013fd0 <tcp_enqueue_flags+0x1c0>)
 8013e36:	4867      	ldr	r0, [pc, #412]	; (8013fd4 <tcp_enqueue_flags+0x1c4>)
 8013e38:	f009 fbf2 	bl	801d620 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d106      	bne.n	8013e50 <tcp_enqueue_flags+0x40>
 8013e42:	4b62      	ldr	r3, [pc, #392]	; (8013fcc <tcp_enqueue_flags+0x1bc>)
 8013e44:	f240 4213 	movw	r2, #1043	; 0x413
 8013e48:	4963      	ldr	r1, [pc, #396]	; (8013fd8 <tcp_enqueue_flags+0x1c8>)
 8013e4a:	4862      	ldr	r0, [pc, #392]	; (8013fd4 <tcp_enqueue_flags+0x1c4>)
 8013e4c:	f009 fbe8 	bl	801d620 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013e50:	78fb      	ldrb	r3, [r7, #3]
 8013e52:	f003 0302 	and.w	r3, r3, #2
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d001      	beq.n	8013e5e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013e5a:	2301      	movs	r3, #1
 8013e5c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013e5e:	7ffb      	ldrb	r3, [r7, #31]
 8013e60:	009b      	lsls	r3, r3, #2
 8013e62:	b2db      	uxtb	r3, r3
 8013e64:	f003 0304 	and.w	r3, r3, #4
 8013e68:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013e6a:	7dfb      	ldrb	r3, [r7, #23]
 8013e6c:	b29b      	uxth	r3, r3
 8013e6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e72:	4619      	mov	r1, r3
 8013e74:	2036      	movs	r0, #54	; 0x36
 8013e76:	f7fa fa75 	bl	800e364 <pbuf_alloc>
 8013e7a:	6138      	str	r0, [r7, #16]
 8013e7c:	693b      	ldr	r3, [r7, #16]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d109      	bne.n	8013e96 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	8b5b      	ldrh	r3, [r3, #26]
 8013e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e8a:	b29a      	uxth	r2, r3
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e94:	e095      	b.n	8013fc2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013e96:	693b      	ldr	r3, [r7, #16]
 8013e98:	895a      	ldrh	r2, [r3, #10]
 8013e9a:	7dfb      	ldrb	r3, [r7, #23]
 8013e9c:	b29b      	uxth	r3, r3
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	d206      	bcs.n	8013eb0 <tcp_enqueue_flags+0xa0>
 8013ea2:	4b4a      	ldr	r3, [pc, #296]	; (8013fcc <tcp_enqueue_flags+0x1bc>)
 8013ea4:	f240 4239 	movw	r2, #1081	; 0x439
 8013ea8:	494c      	ldr	r1, [pc, #304]	; (8013fdc <tcp_enqueue_flags+0x1cc>)
 8013eaa:	484a      	ldr	r0, [pc, #296]	; (8013fd4 <tcp_enqueue_flags+0x1c4>)
 8013eac:	f009 fbb8 	bl	801d620 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013eb4:	78fa      	ldrb	r2, [r7, #3]
 8013eb6:	7ffb      	ldrb	r3, [r7, #31]
 8013eb8:	9300      	str	r3, [sp, #0]
 8013eba:	460b      	mov	r3, r1
 8013ebc:	6939      	ldr	r1, [r7, #16]
 8013ebe:	6878      	ldr	r0, [r7, #4]
 8013ec0:	f7ff f918 	bl	80130f4 <tcp_create_segment>
 8013ec4:	60f8      	str	r0, [r7, #12]
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d109      	bne.n	8013ee0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	8b5b      	ldrh	r3, [r3, #26]
 8013ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ed4:	b29a      	uxth	r2, r3
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ede:	e070      	b.n	8013fc2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	68db      	ldr	r3, [r3, #12]
 8013ee4:	f003 0303 	and.w	r3, r3, #3
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d006      	beq.n	8013efa <tcp_enqueue_flags+0xea>
 8013eec:	4b37      	ldr	r3, [pc, #220]	; (8013fcc <tcp_enqueue_flags+0x1bc>)
 8013eee:	f240 4242 	movw	r2, #1090	; 0x442
 8013ef2:	493b      	ldr	r1, [pc, #236]	; (8013fe0 <tcp_enqueue_flags+0x1d0>)
 8013ef4:	4837      	ldr	r0, [pc, #220]	; (8013fd4 <tcp_enqueue_flags+0x1c4>)
 8013ef6:	f009 fb93 	bl	801d620 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	891b      	ldrh	r3, [r3, #8]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d006      	beq.n	8013f10 <tcp_enqueue_flags+0x100>
 8013f02:	4b32      	ldr	r3, [pc, #200]	; (8013fcc <tcp_enqueue_flags+0x1bc>)
 8013f04:	f240 4243 	movw	r2, #1091	; 0x443
 8013f08:	4936      	ldr	r1, [pc, #216]	; (8013fe4 <tcp_enqueue_flags+0x1d4>)
 8013f0a:	4832      	ldr	r0, [pc, #200]	; (8013fd4 <tcp_enqueue_flags+0x1c4>)
 8013f0c:	f009 fb88 	bl	801d620 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d103      	bne.n	8013f20 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	68fa      	ldr	r2, [r7, #12]
 8013f1c:	66da      	str	r2, [r3, #108]	; 0x6c
 8013f1e:	e00d      	b.n	8013f3c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f24:	61bb      	str	r3, [r7, #24]
 8013f26:	e002      	b.n	8013f2e <tcp_enqueue_flags+0x11e>
 8013f28:	69bb      	ldr	r3, [r7, #24]
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	61bb      	str	r3, [r7, #24]
 8013f2e:	69bb      	ldr	r3, [r7, #24]
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d1f8      	bne.n	8013f28 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013f36:	69bb      	ldr	r3, [r7, #24]
 8013f38:	68fa      	ldr	r2, [r7, #12]
 8013f3a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2200      	movs	r2, #0
 8013f40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013f44:	78fb      	ldrb	r3, [r7, #3]
 8013f46:	f003 0302 	and.w	r3, r3, #2
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d104      	bne.n	8013f58 <tcp_enqueue_flags+0x148>
 8013f4e:	78fb      	ldrb	r3, [r7, #3]
 8013f50:	f003 0301 	and.w	r3, r3, #1
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d004      	beq.n	8013f62 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013f5c:	1c5a      	adds	r2, r3, #1
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013f62:	78fb      	ldrb	r3, [r7, #3]
 8013f64:	f003 0301 	and.w	r3, r3, #1
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d006      	beq.n	8013f7a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	8b5b      	ldrh	r3, [r3, #26]
 8013f70:	f043 0320 	orr.w	r3, r3, #32
 8013f74:	b29a      	uxth	r2, r3
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	685b      	ldr	r3, [r3, #4]
 8013f7e:	4618      	mov	r0, r3
 8013f80:	f7fa fd62 	bl	800ea48 <pbuf_clen>
 8013f84:	4603      	mov	r3, r0
 8013f86:	461a      	mov	r2, r3
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013f8e:	4413      	add	r3, r2
 8013f90:	b29a      	uxth	r2, r3
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d00e      	beq.n	8013fc0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d10a      	bne.n	8013fc0 <tcp_enqueue_flags+0x1b0>
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d106      	bne.n	8013fc0 <tcp_enqueue_flags+0x1b0>
 8013fb2:	4b06      	ldr	r3, [pc, #24]	; (8013fcc <tcp_enqueue_flags+0x1bc>)
 8013fb4:	f240 4265 	movw	r2, #1125	; 0x465
 8013fb8:	490b      	ldr	r1, [pc, #44]	; (8013fe8 <tcp_enqueue_flags+0x1d8>)
 8013fba:	4806      	ldr	r0, [pc, #24]	; (8013fd4 <tcp_enqueue_flags+0x1c4>)
 8013fbc:	f009 fb30 	bl	801d620 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013fc0:	2300      	movs	r3, #0
}
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	3720      	adds	r7, #32
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bd80      	pop	{r7, pc}
 8013fca:	bf00      	nop
 8013fcc:	08020a3c 	.word	0x08020a3c
 8013fd0:	08020e60 	.word	0x08020e60
 8013fd4:	08020a90 	.word	0x08020a90
 8013fd8:	08020eb8 	.word	0x08020eb8
 8013fdc:	08020ed8 	.word	0x08020ed8
 8013fe0:	08020f14 	.word	0x08020f14
 8013fe4:	08020f2c 	.word	0x08020f2c
 8013fe8:	08020f58 	.word	0x08020f58

08013fec <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013fec:	b5b0      	push	{r4, r5, r7, lr}
 8013fee:	b08a      	sub	sp, #40	; 0x28
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d106      	bne.n	8014008 <tcp_output+0x1c>
 8013ffa:	4b8a      	ldr	r3, [pc, #552]	; (8014224 <tcp_output+0x238>)
 8013ffc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014000:	4989      	ldr	r1, [pc, #548]	; (8014228 <tcp_output+0x23c>)
 8014002:	488a      	ldr	r0, [pc, #552]	; (801422c <tcp_output+0x240>)
 8014004:	f009 fb0c 	bl	801d620 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	7d1b      	ldrb	r3, [r3, #20]
 801400c:	2b01      	cmp	r3, #1
 801400e:	d106      	bne.n	801401e <tcp_output+0x32>
 8014010:	4b84      	ldr	r3, [pc, #528]	; (8014224 <tcp_output+0x238>)
 8014012:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014016:	4986      	ldr	r1, [pc, #536]	; (8014230 <tcp_output+0x244>)
 8014018:	4884      	ldr	r0, [pc, #528]	; (801422c <tcp_output+0x240>)
 801401a:	f009 fb01 	bl	801d620 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801401e:	4b85      	ldr	r3, [pc, #532]	; (8014234 <tcp_output+0x248>)
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	687a      	ldr	r2, [r7, #4]
 8014024:	429a      	cmp	r2, r3
 8014026:	d101      	bne.n	801402c <tcp_output+0x40>
    return ERR_OK;
 8014028:	2300      	movs	r3, #0
 801402a:	e1ce      	b.n	80143ca <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014038:	4293      	cmp	r3, r2
 801403a:	bf28      	it	cs
 801403c:	4613      	movcs	r3, r2
 801403e:	b29b      	uxth	r3, r3
 8014040:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014046:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801404a:	2b00      	cmp	r3, #0
 801404c:	d10b      	bne.n	8014066 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	8b5b      	ldrh	r3, [r3, #26]
 8014052:	f003 0302 	and.w	r3, r3, #2
 8014056:	2b00      	cmp	r3, #0
 8014058:	f000 81aa 	beq.w	80143b0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801405c:	6878      	ldr	r0, [r7, #4]
 801405e:	f000 fdcb 	bl	8014bf8 <tcp_send_empty_ack>
 8014062:	4603      	mov	r3, r0
 8014064:	e1b1      	b.n	80143ca <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014066:	6879      	ldr	r1, [r7, #4]
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	3304      	adds	r3, #4
 801406c:	461a      	mov	r2, r3
 801406e:	6878      	ldr	r0, [r7, #4]
 8014070:	f7ff f824 	bl	80130bc <tcp_route>
 8014074:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014076:	697b      	ldr	r3, [r7, #20]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d102      	bne.n	8014082 <tcp_output+0x96>
    return ERR_RTE;
 801407c:	f06f 0303 	mvn.w	r3, #3
 8014080:	e1a3      	b.n	80143ca <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d003      	beq.n	8014090 <tcp_output+0xa4>
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d111      	bne.n	80140b4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014090:	697b      	ldr	r3, [r7, #20]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d002      	beq.n	801409c <tcp_output+0xb0>
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	3304      	adds	r3, #4
 801409a:	e000      	b.n	801409e <tcp_output+0xb2>
 801409c:	2300      	movs	r3, #0
 801409e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80140a0:	693b      	ldr	r3, [r7, #16]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d102      	bne.n	80140ac <tcp_output+0xc0>
      return ERR_RTE;
 80140a6:	f06f 0303 	mvn.w	r3, #3
 80140aa:	e18e      	b.n	80143ca <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80140ac:	693b      	ldr	r3, [r7, #16]
 80140ae:	681a      	ldr	r2, [r3, #0]
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80140b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140b6:	68db      	ldr	r3, [r3, #12]
 80140b8:	685b      	ldr	r3, [r3, #4]
 80140ba:	4618      	mov	r0, r3
 80140bc:	f7f9 f849 	bl	800d152 <lwip_htonl>
 80140c0:	4602      	mov	r2, r0
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140c6:	1ad3      	subs	r3, r2, r3
 80140c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140ca:	8912      	ldrh	r2, [r2, #8]
 80140cc:	4413      	add	r3, r2
 80140ce:	69ba      	ldr	r2, [r7, #24]
 80140d0:	429a      	cmp	r2, r3
 80140d2:	d227      	bcs.n	8014124 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80140da:	461a      	mov	r2, r3
 80140dc:	69bb      	ldr	r3, [r7, #24]
 80140de:	4293      	cmp	r3, r2
 80140e0:	d114      	bne.n	801410c <tcp_output+0x120>
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d110      	bne.n	801410c <tcp_output+0x120>
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d10b      	bne.n	801410c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	2200      	movs	r2, #0
 80140f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2201      	movs	r2, #1
 8014100:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	2200      	movs	r2, #0
 8014108:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	8b5b      	ldrh	r3, [r3, #26]
 8014110:	f003 0302 	and.w	r3, r3, #2
 8014114:	2b00      	cmp	r3, #0
 8014116:	f000 814d 	beq.w	80143b4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f000 fd6c 	bl	8014bf8 <tcp_send_empty_ack>
 8014120:	4603      	mov	r3, r0
 8014122:	e152      	b.n	80143ca <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	2200      	movs	r2, #0
 8014128:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014130:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014132:	6a3b      	ldr	r3, [r7, #32]
 8014134:	2b00      	cmp	r3, #0
 8014136:	f000 811c 	beq.w	8014372 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801413a:	e002      	b.n	8014142 <tcp_output+0x156>
 801413c:	6a3b      	ldr	r3, [r7, #32]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	623b      	str	r3, [r7, #32]
 8014142:	6a3b      	ldr	r3, [r7, #32]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d1f8      	bne.n	801413c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801414a:	e112      	b.n	8014372 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801414e:	68db      	ldr	r3, [r3, #12]
 8014150:	899b      	ldrh	r3, [r3, #12]
 8014152:	b29b      	uxth	r3, r3
 8014154:	4618      	mov	r0, r3
 8014156:	f7f8 ffe7 	bl	800d128 <lwip_htons>
 801415a:	4603      	mov	r3, r0
 801415c:	b2db      	uxtb	r3, r3
 801415e:	f003 0304 	and.w	r3, r3, #4
 8014162:	2b00      	cmp	r3, #0
 8014164:	d006      	beq.n	8014174 <tcp_output+0x188>
 8014166:	4b2f      	ldr	r3, [pc, #188]	; (8014224 <tcp_output+0x238>)
 8014168:	f240 5236 	movw	r2, #1334	; 0x536
 801416c:	4932      	ldr	r1, [pc, #200]	; (8014238 <tcp_output+0x24c>)
 801416e:	482f      	ldr	r0, [pc, #188]	; (801422c <tcp_output+0x240>)
 8014170:	f009 fa56 	bl	801d620 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014178:	2b00      	cmp	r3, #0
 801417a:	d01f      	beq.n	80141bc <tcp_output+0x1d0>
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	8b5b      	ldrh	r3, [r3, #26]
 8014180:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014184:	2b00      	cmp	r3, #0
 8014186:	d119      	bne.n	80141bc <tcp_output+0x1d0>
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801418c:	2b00      	cmp	r3, #0
 801418e:	d00b      	beq.n	80141a8 <tcp_output+0x1bc>
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d110      	bne.n	80141bc <tcp_output+0x1d0>
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801419e:	891a      	ldrh	r2, [r3, #8]
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141a4:	429a      	cmp	r2, r3
 80141a6:	d209      	bcs.n	80141bc <tcp_output+0x1d0>
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d004      	beq.n	80141bc <tcp_output+0x1d0>
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80141b8:	2b08      	cmp	r3, #8
 80141ba:	d901      	bls.n	80141c0 <tcp_output+0x1d4>
 80141bc:	2301      	movs	r3, #1
 80141be:	e000      	b.n	80141c2 <tcp_output+0x1d6>
 80141c0:	2300      	movs	r3, #0
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d106      	bne.n	80141d4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	8b5b      	ldrh	r3, [r3, #26]
 80141ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	f000 80e4 	beq.w	801439c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	7d1b      	ldrb	r3, [r3, #20]
 80141d8:	2b02      	cmp	r3, #2
 80141da:	d00d      	beq.n	80141f8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80141dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141de:	68db      	ldr	r3, [r3, #12]
 80141e0:	899b      	ldrh	r3, [r3, #12]
 80141e2:	b29c      	uxth	r4, r3
 80141e4:	2010      	movs	r0, #16
 80141e6:	f7f8 ff9f 	bl	800d128 <lwip_htons>
 80141ea:	4603      	mov	r3, r0
 80141ec:	461a      	mov	r2, r3
 80141ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141f0:	68db      	ldr	r3, [r3, #12]
 80141f2:	4322      	orrs	r2, r4
 80141f4:	b292      	uxth	r2, r2
 80141f6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80141f8:	697a      	ldr	r2, [r7, #20]
 80141fa:	6879      	ldr	r1, [r7, #4]
 80141fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80141fe:	f000 f909 	bl	8014414 <tcp_output_segment>
 8014202:	4603      	mov	r3, r0
 8014204:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d016      	beq.n	801423c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	8b5b      	ldrh	r3, [r3, #26]
 8014212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014216:	b29a      	uxth	r2, r3
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	835a      	strh	r2, [r3, #26]
      return err;
 801421c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014220:	e0d3      	b.n	80143ca <tcp_output+0x3de>
 8014222:	bf00      	nop
 8014224:	08020a3c 	.word	0x08020a3c
 8014228:	08020f80 	.word	0x08020f80
 801422c:	08020a90 	.word	0x08020a90
 8014230:	08020f98 	.word	0x08020f98
 8014234:	20011404 	.word	0x20011404
 8014238:	08020fc0 	.word	0x08020fc0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801423e:	681a      	ldr	r2, [r3, #0]
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	7d1b      	ldrb	r3, [r3, #20]
 8014248:	2b02      	cmp	r3, #2
 801424a:	d006      	beq.n	801425a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	8b5b      	ldrh	r3, [r3, #26]
 8014250:	f023 0303 	bic.w	r3, r3, #3
 8014254:	b29a      	uxth	r2, r3
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801425c:	68db      	ldr	r3, [r3, #12]
 801425e:	685b      	ldr	r3, [r3, #4]
 8014260:	4618      	mov	r0, r3
 8014262:	f7f8 ff76 	bl	800d152 <lwip_htonl>
 8014266:	4604      	mov	r4, r0
 8014268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801426a:	891b      	ldrh	r3, [r3, #8]
 801426c:	461d      	mov	r5, r3
 801426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014270:	68db      	ldr	r3, [r3, #12]
 8014272:	899b      	ldrh	r3, [r3, #12]
 8014274:	b29b      	uxth	r3, r3
 8014276:	4618      	mov	r0, r3
 8014278:	f7f8 ff56 	bl	800d128 <lwip_htons>
 801427c:	4603      	mov	r3, r0
 801427e:	b2db      	uxtb	r3, r3
 8014280:	f003 0303 	and.w	r3, r3, #3
 8014284:	2b00      	cmp	r3, #0
 8014286:	d001      	beq.n	801428c <tcp_output+0x2a0>
 8014288:	2301      	movs	r3, #1
 801428a:	e000      	b.n	801428e <tcp_output+0x2a2>
 801428c:	2300      	movs	r3, #0
 801428e:	442b      	add	r3, r5
 8014290:	4423      	add	r3, r4
 8014292:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014298:	68bb      	ldr	r3, [r7, #8]
 801429a:	1ad3      	subs	r3, r2, r3
 801429c:	2b00      	cmp	r3, #0
 801429e:	da02      	bge.n	80142a6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	68ba      	ldr	r2, [r7, #8]
 80142a4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80142a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142a8:	891b      	ldrh	r3, [r3, #8]
 80142aa:	461c      	mov	r4, r3
 80142ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ae:	68db      	ldr	r3, [r3, #12]
 80142b0:	899b      	ldrh	r3, [r3, #12]
 80142b2:	b29b      	uxth	r3, r3
 80142b4:	4618      	mov	r0, r3
 80142b6:	f7f8 ff37 	bl	800d128 <lwip_htons>
 80142ba:	4603      	mov	r3, r0
 80142bc:	b2db      	uxtb	r3, r3
 80142be:	f003 0303 	and.w	r3, r3, #3
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d001      	beq.n	80142ca <tcp_output+0x2de>
 80142c6:	2301      	movs	r3, #1
 80142c8:	e000      	b.n	80142cc <tcp_output+0x2e0>
 80142ca:	2300      	movs	r3, #0
 80142cc:	4423      	add	r3, r4
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d049      	beq.n	8014366 <tcp_output+0x37a>
      seg->next = NULL;
 80142d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142d4:	2200      	movs	r2, #0
 80142d6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d105      	bne.n	80142ec <tcp_output+0x300>
        pcb->unacked = seg;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142e4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80142e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e8:	623b      	str	r3, [r7, #32]
 80142ea:	e03f      	b.n	801436c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80142ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ee:	68db      	ldr	r3, [r3, #12]
 80142f0:	685b      	ldr	r3, [r3, #4]
 80142f2:	4618      	mov	r0, r3
 80142f4:	f7f8 ff2d 	bl	800d152 <lwip_htonl>
 80142f8:	4604      	mov	r4, r0
 80142fa:	6a3b      	ldr	r3, [r7, #32]
 80142fc:	68db      	ldr	r3, [r3, #12]
 80142fe:	685b      	ldr	r3, [r3, #4]
 8014300:	4618      	mov	r0, r3
 8014302:	f7f8 ff26 	bl	800d152 <lwip_htonl>
 8014306:	4603      	mov	r3, r0
 8014308:	1ae3      	subs	r3, r4, r3
 801430a:	2b00      	cmp	r3, #0
 801430c:	da24      	bge.n	8014358 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	3370      	adds	r3, #112	; 0x70
 8014312:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014314:	e002      	b.n	801431c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014316:	69fb      	ldr	r3, [r7, #28]
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801431c:	69fb      	ldr	r3, [r7, #28]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d011      	beq.n	8014348 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014324:	69fb      	ldr	r3, [r7, #28]
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	68db      	ldr	r3, [r3, #12]
 801432a:	685b      	ldr	r3, [r3, #4]
 801432c:	4618      	mov	r0, r3
 801432e:	f7f8 ff10 	bl	800d152 <lwip_htonl>
 8014332:	4604      	mov	r4, r0
 8014334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014336:	68db      	ldr	r3, [r3, #12]
 8014338:	685b      	ldr	r3, [r3, #4]
 801433a:	4618      	mov	r0, r3
 801433c:	f7f8 ff09 	bl	800d152 <lwip_htonl>
 8014340:	4603      	mov	r3, r0
 8014342:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014344:	2b00      	cmp	r3, #0
 8014346:	dbe6      	blt.n	8014316 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014348:	69fb      	ldr	r3, [r7, #28]
 801434a:	681a      	ldr	r2, [r3, #0]
 801434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801434e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014350:	69fb      	ldr	r3, [r7, #28]
 8014352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014354:	601a      	str	r2, [r3, #0]
 8014356:	e009      	b.n	801436c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014358:	6a3b      	ldr	r3, [r7, #32]
 801435a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801435c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801435e:	6a3b      	ldr	r3, [r7, #32]
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	623b      	str	r3, [r7, #32]
 8014364:	e002      	b.n	801436c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014366:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014368:	f7fb ff19 	bl	801019e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014370:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014374:	2b00      	cmp	r3, #0
 8014376:	d012      	beq.n	801439e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801437a:	68db      	ldr	r3, [r3, #12]
 801437c:	685b      	ldr	r3, [r3, #4]
 801437e:	4618      	mov	r0, r3
 8014380:	f7f8 fee7 	bl	800d152 <lwip_htonl>
 8014384:	4602      	mov	r2, r0
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801438a:	1ad3      	subs	r3, r2, r3
 801438c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801438e:	8912      	ldrh	r2, [r2, #8]
 8014390:	4413      	add	r3, r2
  while (seg != NULL &&
 8014392:	69ba      	ldr	r2, [r7, #24]
 8014394:	429a      	cmp	r2, r3
 8014396:	f4bf aed9 	bcs.w	801414c <tcp_output+0x160>
 801439a:	e000      	b.n	801439e <tcp_output+0x3b2>
      break;
 801439c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d108      	bne.n	80143b8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	2200      	movs	r2, #0
 80143aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80143ae:	e004      	b.n	80143ba <tcp_output+0x3ce>
    goto output_done;
 80143b0:	bf00      	nop
 80143b2:	e002      	b.n	80143ba <tcp_output+0x3ce>
    goto output_done;
 80143b4:	bf00      	nop
 80143b6:	e000      	b.n	80143ba <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80143b8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	8b5b      	ldrh	r3, [r3, #26]
 80143be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80143c2:	b29a      	uxth	r2, r3
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80143c8:	2300      	movs	r3, #0
}
 80143ca:	4618      	mov	r0, r3
 80143cc:	3728      	adds	r7, #40	; 0x28
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bdb0      	pop	{r4, r5, r7, pc}
 80143d2:	bf00      	nop

080143d4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b082      	sub	sp, #8
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d106      	bne.n	80143f0 <tcp_output_segment_busy+0x1c>
 80143e2:	4b09      	ldr	r3, [pc, #36]	; (8014408 <tcp_output_segment_busy+0x34>)
 80143e4:	f240 529a 	movw	r2, #1434	; 0x59a
 80143e8:	4908      	ldr	r1, [pc, #32]	; (801440c <tcp_output_segment_busy+0x38>)
 80143ea:	4809      	ldr	r0, [pc, #36]	; (8014410 <tcp_output_segment_busy+0x3c>)
 80143ec:	f009 f918 	bl	801d620 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	685b      	ldr	r3, [r3, #4]
 80143f4:	7b9b      	ldrb	r3, [r3, #14]
 80143f6:	2b01      	cmp	r3, #1
 80143f8:	d001      	beq.n	80143fe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80143fa:	2301      	movs	r3, #1
 80143fc:	e000      	b.n	8014400 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80143fe:	2300      	movs	r3, #0
}
 8014400:	4618      	mov	r0, r3
 8014402:	3708      	adds	r7, #8
 8014404:	46bd      	mov	sp, r7
 8014406:	bd80      	pop	{r7, pc}
 8014408:	08020a3c 	.word	0x08020a3c
 801440c:	08020fd8 	.word	0x08020fd8
 8014410:	08020a90 	.word	0x08020a90

08014414 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014414:	b5b0      	push	{r4, r5, r7, lr}
 8014416:	b08c      	sub	sp, #48	; 0x30
 8014418:	af04      	add	r7, sp, #16
 801441a:	60f8      	str	r0, [r7, #12]
 801441c:	60b9      	str	r1, [r7, #8]
 801441e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d106      	bne.n	8014434 <tcp_output_segment+0x20>
 8014426:	4b63      	ldr	r3, [pc, #396]	; (80145b4 <tcp_output_segment+0x1a0>)
 8014428:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801442c:	4962      	ldr	r1, [pc, #392]	; (80145b8 <tcp_output_segment+0x1a4>)
 801442e:	4863      	ldr	r0, [pc, #396]	; (80145bc <tcp_output_segment+0x1a8>)
 8014430:	f009 f8f6 	bl	801d620 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d106      	bne.n	8014448 <tcp_output_segment+0x34>
 801443a:	4b5e      	ldr	r3, [pc, #376]	; (80145b4 <tcp_output_segment+0x1a0>)
 801443c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014440:	495f      	ldr	r1, [pc, #380]	; (80145c0 <tcp_output_segment+0x1ac>)
 8014442:	485e      	ldr	r0, [pc, #376]	; (80145bc <tcp_output_segment+0x1a8>)
 8014444:	f009 f8ec 	bl	801d620 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d106      	bne.n	801445c <tcp_output_segment+0x48>
 801444e:	4b59      	ldr	r3, [pc, #356]	; (80145b4 <tcp_output_segment+0x1a0>)
 8014450:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014454:	495b      	ldr	r1, [pc, #364]	; (80145c4 <tcp_output_segment+0x1b0>)
 8014456:	4859      	ldr	r0, [pc, #356]	; (80145bc <tcp_output_segment+0x1a8>)
 8014458:	f009 f8e2 	bl	801d620 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801445c:	68f8      	ldr	r0, [r7, #12]
 801445e:	f7ff ffb9 	bl	80143d4 <tcp_output_segment_busy>
 8014462:	4603      	mov	r3, r0
 8014464:	2b00      	cmp	r3, #0
 8014466:	d001      	beq.n	801446c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014468:	2300      	movs	r3, #0
 801446a:	e09f      	b.n	80145ac <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801446c:	68bb      	ldr	r3, [r7, #8]
 801446e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	68dc      	ldr	r4, [r3, #12]
 8014474:	4610      	mov	r0, r2
 8014476:	f7f8 fe6c 	bl	800d152 <lwip_htonl>
 801447a:	4603      	mov	r3, r0
 801447c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801447e:	68bb      	ldr	r3, [r7, #8]
 8014480:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	68dc      	ldr	r4, [r3, #12]
 8014486:	4610      	mov	r0, r2
 8014488:	f7f8 fe4e 	bl	800d128 <lwip_htons>
 801448c:	4603      	mov	r3, r0
 801448e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014490:	68bb      	ldr	r3, [r7, #8]
 8014492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014494:	68ba      	ldr	r2, [r7, #8]
 8014496:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014498:	441a      	add	r2, r3
 801449a:	68bb      	ldr	r3, [r7, #8]
 801449c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	68db      	ldr	r3, [r3, #12]
 80144a2:	3314      	adds	r3, #20
 80144a4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	7a9b      	ldrb	r3, [r3, #10]
 80144aa:	f003 0301 	and.w	r3, r3, #1
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d015      	beq.n	80144de <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80144b2:	68bb      	ldr	r3, [r7, #8]
 80144b4:	3304      	adds	r3, #4
 80144b6:	461a      	mov	r2, r3
 80144b8:	6879      	ldr	r1, [r7, #4]
 80144ba:	f44f 7006 	mov.w	r0, #536	; 0x218
 80144be:	f7fc fa33 	bl	8010928 <tcp_eff_send_mss_netif>
 80144c2:	4603      	mov	r3, r0
 80144c4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80144c6:	8b7b      	ldrh	r3, [r7, #26]
 80144c8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80144cc:	4618      	mov	r0, r3
 80144ce:	f7f8 fe40 	bl	800d152 <lwip_htonl>
 80144d2:	4602      	mov	r2, r0
 80144d4:	69fb      	ldr	r3, [r7, #28]
 80144d6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80144d8:	69fb      	ldr	r3, [r7, #28]
 80144da:	3304      	adds	r3, #4
 80144dc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80144de:	68bb      	ldr	r3, [r7, #8]
 80144e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	da02      	bge.n	80144ee <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80144e8:	68bb      	ldr	r3, [r7, #8]
 80144ea:	2200      	movs	r2, #0
 80144ec:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80144ee:	68bb      	ldr	r3, [r7, #8]
 80144f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d10c      	bne.n	8014510 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80144f6:	4b34      	ldr	r3, [pc, #208]	; (80145c8 <tcp_output_segment+0x1b4>)
 80144f8:	681a      	ldr	r2, [r3, #0]
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	68db      	ldr	r3, [r3, #12]
 8014502:	685b      	ldr	r3, [r3, #4]
 8014504:	4618      	mov	r0, r3
 8014506:	f7f8 fe24 	bl	800d152 <lwip_htonl>
 801450a:	4602      	mov	r2, r0
 801450c:	68bb      	ldr	r3, [r7, #8]
 801450e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	68da      	ldr	r2, [r3, #12]
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	685b      	ldr	r3, [r3, #4]
 8014518:	685b      	ldr	r3, [r3, #4]
 801451a:	1ad3      	subs	r3, r2, r3
 801451c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	685b      	ldr	r3, [r3, #4]
 8014522:	8959      	ldrh	r1, [r3, #10]
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	685b      	ldr	r3, [r3, #4]
 8014528:	8b3a      	ldrh	r2, [r7, #24]
 801452a:	1a8a      	subs	r2, r1, r2
 801452c:	b292      	uxth	r2, r2
 801452e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	685b      	ldr	r3, [r3, #4]
 8014534:	8919      	ldrh	r1, [r3, #8]
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	685b      	ldr	r3, [r3, #4]
 801453a:	8b3a      	ldrh	r2, [r7, #24]
 801453c:	1a8a      	subs	r2, r1, r2
 801453e:	b292      	uxth	r2, r2
 8014540:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	685b      	ldr	r3, [r3, #4]
 8014546:	68fa      	ldr	r2, [r7, #12]
 8014548:	68d2      	ldr	r2, [r2, #12]
 801454a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	68db      	ldr	r3, [r3, #12]
 8014550:	2200      	movs	r2, #0
 8014552:	741a      	strb	r2, [r3, #16]
 8014554:	2200      	movs	r2, #0
 8014556:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	68db      	ldr	r3, [r3, #12]
 801455c:	f103 0214 	add.w	r2, r3, #20
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	7a9b      	ldrb	r3, [r3, #10]
 8014564:	009b      	lsls	r3, r3, #2
 8014566:	f003 0304 	and.w	r3, r3, #4
 801456a:	4413      	add	r3, r2
 801456c:	69fa      	ldr	r2, [r7, #28]
 801456e:	429a      	cmp	r2, r3
 8014570:	d006      	beq.n	8014580 <tcp_output_segment+0x16c>
 8014572:	4b10      	ldr	r3, [pc, #64]	; (80145b4 <tcp_output_segment+0x1a0>)
 8014574:	f240 621c 	movw	r2, #1564	; 0x61c
 8014578:	4914      	ldr	r1, [pc, #80]	; (80145cc <tcp_output_segment+0x1b8>)
 801457a:	4810      	ldr	r0, [pc, #64]	; (80145bc <tcp_output_segment+0x1a8>)
 801457c:	f009 f850 	bl	801d620 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	6858      	ldr	r0, [r3, #4]
 8014584:	68b9      	ldr	r1, [r7, #8]
 8014586:	68bb      	ldr	r3, [r7, #8]
 8014588:	1d1c      	adds	r4, r3, #4
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	7add      	ldrb	r5, [r3, #11]
 801458e:	68bb      	ldr	r3, [r7, #8]
 8014590:	7a9b      	ldrb	r3, [r3, #10]
 8014592:	687a      	ldr	r2, [r7, #4]
 8014594:	9202      	str	r2, [sp, #8]
 8014596:	2206      	movs	r2, #6
 8014598:	9201      	str	r2, [sp, #4]
 801459a:	9300      	str	r3, [sp, #0]
 801459c:	462b      	mov	r3, r5
 801459e:	4622      	mov	r2, r4
 80145a0:	f002 fc1a 	bl	8016dd8 <ip4_output_if>
 80145a4:	4603      	mov	r3, r0
 80145a6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80145a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	3720      	adds	r7, #32
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bdb0      	pop	{r4, r5, r7, pc}
 80145b4:	08020a3c 	.word	0x08020a3c
 80145b8:	08021000 	.word	0x08021000
 80145bc:	08020a90 	.word	0x08020a90
 80145c0:	08021020 	.word	0x08021020
 80145c4:	08021040 	.word	0x08021040
 80145c8:	200113b8 	.word	0x200113b8
 80145cc:	08021064 	.word	0x08021064

080145d0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80145d0:	b5b0      	push	{r4, r5, r7, lr}
 80145d2:	b084      	sub	sp, #16
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d106      	bne.n	80145ec <tcp_rexmit_rto_prepare+0x1c>
 80145de:	4b31      	ldr	r3, [pc, #196]	; (80146a4 <tcp_rexmit_rto_prepare+0xd4>)
 80145e0:	f240 6263 	movw	r2, #1635	; 0x663
 80145e4:	4930      	ldr	r1, [pc, #192]	; (80146a8 <tcp_rexmit_rto_prepare+0xd8>)
 80145e6:	4831      	ldr	r0, [pc, #196]	; (80146ac <tcp_rexmit_rto_prepare+0xdc>)
 80145e8:	f009 f81a 	bl	801d620 <iprintf>

  if (pcb->unacked == NULL) {
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d102      	bne.n	80145fa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80145f4:	f06f 0305 	mvn.w	r3, #5
 80145f8:	e050      	b.n	801469c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145fe:	60fb      	str	r3, [r7, #12]
 8014600:	e00b      	b.n	801461a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014602:	68f8      	ldr	r0, [r7, #12]
 8014604:	f7ff fee6 	bl	80143d4 <tcp_output_segment_busy>
 8014608:	4603      	mov	r3, r0
 801460a:	2b00      	cmp	r3, #0
 801460c:	d002      	beq.n	8014614 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801460e:	f06f 0305 	mvn.w	r3, #5
 8014612:	e043      	b.n	801469c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	60fb      	str	r3, [r7, #12]
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d1ef      	bne.n	8014602 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014622:	68f8      	ldr	r0, [r7, #12]
 8014624:	f7ff fed6 	bl	80143d4 <tcp_output_segment_busy>
 8014628:	4603      	mov	r3, r0
 801462a:	2b00      	cmp	r3, #0
 801462c:	d002      	beq.n	8014634 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801462e:	f06f 0305 	mvn.w	r3, #5
 8014632:	e033      	b.n	801469c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2200      	movs	r2, #0
 8014648:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	8b5b      	ldrh	r3, [r3, #26]
 801464e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014652:	b29a      	uxth	r2, r3
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	68db      	ldr	r3, [r3, #12]
 801465c:	685b      	ldr	r3, [r3, #4]
 801465e:	4618      	mov	r0, r3
 8014660:	f7f8 fd77 	bl	800d152 <lwip_htonl>
 8014664:	4604      	mov	r4, r0
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	891b      	ldrh	r3, [r3, #8]
 801466a:	461d      	mov	r5, r3
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	68db      	ldr	r3, [r3, #12]
 8014670:	899b      	ldrh	r3, [r3, #12]
 8014672:	b29b      	uxth	r3, r3
 8014674:	4618      	mov	r0, r3
 8014676:	f7f8 fd57 	bl	800d128 <lwip_htons>
 801467a:	4603      	mov	r3, r0
 801467c:	b2db      	uxtb	r3, r3
 801467e:	f003 0303 	and.w	r3, r3, #3
 8014682:	2b00      	cmp	r3, #0
 8014684:	d001      	beq.n	801468a <tcp_rexmit_rto_prepare+0xba>
 8014686:	2301      	movs	r3, #1
 8014688:	e000      	b.n	801468c <tcp_rexmit_rto_prepare+0xbc>
 801468a:	2300      	movs	r3, #0
 801468c:	442b      	add	r3, r5
 801468e:	18e2      	adds	r2, r4, r3
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	2200      	movs	r2, #0
 8014698:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801469a:	2300      	movs	r3, #0
}
 801469c:	4618      	mov	r0, r3
 801469e:	3710      	adds	r7, #16
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bdb0      	pop	{r4, r5, r7, pc}
 80146a4:	08020a3c 	.word	0x08020a3c
 80146a8:	08021078 	.word	0x08021078
 80146ac:	08020a90 	.word	0x08020a90

080146b0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b082      	sub	sp, #8
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d106      	bne.n	80146cc <tcp_rexmit_rto_commit+0x1c>
 80146be:	4b0d      	ldr	r3, [pc, #52]	; (80146f4 <tcp_rexmit_rto_commit+0x44>)
 80146c0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80146c4:	490c      	ldr	r1, [pc, #48]	; (80146f8 <tcp_rexmit_rto_commit+0x48>)
 80146c6:	480d      	ldr	r0, [pc, #52]	; (80146fc <tcp_rexmit_rto_commit+0x4c>)
 80146c8:	f008 ffaa 	bl	801d620 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80146d2:	2bff      	cmp	r3, #255	; 0xff
 80146d4:	d007      	beq.n	80146e6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80146dc:	3301      	adds	r3, #1
 80146de:	b2da      	uxtb	r2, r3
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80146e6:	6878      	ldr	r0, [r7, #4]
 80146e8:	f7ff fc80 	bl	8013fec <tcp_output>
}
 80146ec:	bf00      	nop
 80146ee:	3708      	adds	r7, #8
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}
 80146f4:	08020a3c 	.word	0x08020a3c
 80146f8:	0802109c 	.word	0x0802109c
 80146fc:	08020a90 	.word	0x08020a90

08014700 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b082      	sub	sp, #8
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d106      	bne.n	801471c <tcp_rexmit_rto+0x1c>
 801470e:	4b0a      	ldr	r3, [pc, #40]	; (8014738 <tcp_rexmit_rto+0x38>)
 8014710:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014714:	4909      	ldr	r1, [pc, #36]	; (801473c <tcp_rexmit_rto+0x3c>)
 8014716:	480a      	ldr	r0, [pc, #40]	; (8014740 <tcp_rexmit_rto+0x40>)
 8014718:	f008 ff82 	bl	801d620 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801471c:	6878      	ldr	r0, [r7, #4]
 801471e:	f7ff ff57 	bl	80145d0 <tcp_rexmit_rto_prepare>
 8014722:	4603      	mov	r3, r0
 8014724:	2b00      	cmp	r3, #0
 8014726:	d102      	bne.n	801472e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f7ff ffc1 	bl	80146b0 <tcp_rexmit_rto_commit>
  }
}
 801472e:	bf00      	nop
 8014730:	3708      	adds	r7, #8
 8014732:	46bd      	mov	sp, r7
 8014734:	bd80      	pop	{r7, pc}
 8014736:	bf00      	nop
 8014738:	08020a3c 	.word	0x08020a3c
 801473c:	080210c0 	.word	0x080210c0
 8014740:	08020a90 	.word	0x08020a90

08014744 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014744:	b590      	push	{r4, r7, lr}
 8014746:	b085      	sub	sp, #20
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d106      	bne.n	8014760 <tcp_rexmit+0x1c>
 8014752:	4b2f      	ldr	r3, [pc, #188]	; (8014810 <tcp_rexmit+0xcc>)
 8014754:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014758:	492e      	ldr	r1, [pc, #184]	; (8014814 <tcp_rexmit+0xd0>)
 801475a:	482f      	ldr	r0, [pc, #188]	; (8014818 <tcp_rexmit+0xd4>)
 801475c:	f008 ff60 	bl	801d620 <iprintf>

  if (pcb->unacked == NULL) {
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014764:	2b00      	cmp	r3, #0
 8014766:	d102      	bne.n	801476e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014768:	f06f 0305 	mvn.w	r3, #5
 801476c:	e04c      	b.n	8014808 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014772:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014774:	68b8      	ldr	r0, [r7, #8]
 8014776:	f7ff fe2d 	bl	80143d4 <tcp_output_segment_busy>
 801477a:	4603      	mov	r3, r0
 801477c:	2b00      	cmp	r3, #0
 801477e:	d002      	beq.n	8014786 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014780:	f06f 0305 	mvn.w	r3, #5
 8014784:	e040      	b.n	8014808 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014786:	68bb      	ldr	r3, [r7, #8]
 8014788:	681a      	ldr	r2, [r3, #0]
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	336c      	adds	r3, #108	; 0x6c
 8014792:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014794:	e002      	b.n	801479c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d011      	beq.n	80147c8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	68db      	ldr	r3, [r3, #12]
 80147aa:	685b      	ldr	r3, [r3, #4]
 80147ac:	4618      	mov	r0, r3
 80147ae:	f7f8 fcd0 	bl	800d152 <lwip_htonl>
 80147b2:	4604      	mov	r4, r0
 80147b4:	68bb      	ldr	r3, [r7, #8]
 80147b6:	68db      	ldr	r3, [r3, #12]
 80147b8:	685b      	ldr	r3, [r3, #4]
 80147ba:	4618      	mov	r0, r3
 80147bc:	f7f8 fcc9 	bl	800d152 <lwip_htonl>
 80147c0:	4603      	mov	r3, r0
 80147c2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	dbe6      	blt.n	8014796 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	681a      	ldr	r2, [r3, #0]
 80147cc:	68bb      	ldr	r3, [r7, #8]
 80147ce:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	68ba      	ldr	r2, [r7, #8]
 80147d4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80147d6:	68bb      	ldr	r3, [r7, #8]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d103      	bne.n	80147e6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	2200      	movs	r2, #0
 80147e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80147ec:	2bff      	cmp	r3, #255	; 0xff
 80147ee:	d007      	beq.n	8014800 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80147f6:	3301      	adds	r3, #1
 80147f8:	b2da      	uxtb	r2, r3
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	2200      	movs	r2, #0
 8014804:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014806:	2300      	movs	r3, #0
}
 8014808:	4618      	mov	r0, r3
 801480a:	3714      	adds	r7, #20
 801480c:	46bd      	mov	sp, r7
 801480e:	bd90      	pop	{r4, r7, pc}
 8014810:	08020a3c 	.word	0x08020a3c
 8014814:	080210dc 	.word	0x080210dc
 8014818:	08020a90 	.word	0x08020a90

0801481c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b082      	sub	sp, #8
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d106      	bne.n	8014838 <tcp_rexmit_fast+0x1c>
 801482a:	4b2a      	ldr	r3, [pc, #168]	; (80148d4 <tcp_rexmit_fast+0xb8>)
 801482c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014830:	4929      	ldr	r1, [pc, #164]	; (80148d8 <tcp_rexmit_fast+0xbc>)
 8014832:	482a      	ldr	r0, [pc, #168]	; (80148dc <tcp_rexmit_fast+0xc0>)
 8014834:	f008 fef4 	bl	801d620 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801483c:	2b00      	cmp	r3, #0
 801483e:	d045      	beq.n	80148cc <tcp_rexmit_fast+0xb0>
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	8b5b      	ldrh	r3, [r3, #26]
 8014844:	f003 0304 	and.w	r3, r3, #4
 8014848:	2b00      	cmp	r3, #0
 801484a:	d13f      	bne.n	80148cc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801484c:	6878      	ldr	r0, [r7, #4]
 801484e:	f7ff ff79 	bl	8014744 <tcp_rexmit>
 8014852:	4603      	mov	r3, r0
 8014854:	2b00      	cmp	r3, #0
 8014856:	d139      	bne.n	80148cc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014864:	4293      	cmp	r3, r2
 8014866:	bf28      	it	cs
 8014868:	4613      	movcs	r3, r2
 801486a:	b29b      	uxth	r3, r3
 801486c:	2b00      	cmp	r3, #0
 801486e:	da00      	bge.n	8014872 <tcp_rexmit_fast+0x56>
 8014870:	3301      	adds	r3, #1
 8014872:	105b      	asrs	r3, r3, #1
 8014874:	b29a      	uxth	r2, r3
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014882:	461a      	mov	r2, r3
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014888:	005b      	lsls	r3, r3, #1
 801488a:	429a      	cmp	r2, r3
 801488c:	d206      	bcs.n	801489c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014892:	005b      	lsls	r3, r3, #1
 8014894:	b29a      	uxth	r2, r3
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80148a6:	4619      	mov	r1, r3
 80148a8:	0049      	lsls	r1, r1, #1
 80148aa:	440b      	add	r3, r1
 80148ac:	b29b      	uxth	r3, r3
 80148ae:	4413      	add	r3, r2
 80148b0:	b29a      	uxth	r2, r3
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	8b5b      	ldrh	r3, [r3, #26]
 80148bc:	f043 0304 	orr.w	r3, r3, #4
 80148c0:	b29a      	uxth	r2, r3
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	2200      	movs	r2, #0
 80148ca:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80148cc:	bf00      	nop
 80148ce:	3708      	adds	r7, #8
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bd80      	pop	{r7, pc}
 80148d4:	08020a3c 	.word	0x08020a3c
 80148d8:	080210f4 	.word	0x080210f4
 80148dc:	08020a90 	.word	0x08020a90

080148e0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b086      	sub	sp, #24
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	60f8      	str	r0, [r7, #12]
 80148e8:	607b      	str	r3, [r7, #4]
 80148ea:	460b      	mov	r3, r1
 80148ec:	817b      	strh	r3, [r7, #10]
 80148ee:	4613      	mov	r3, r2
 80148f0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80148f2:	897a      	ldrh	r2, [r7, #10]
 80148f4:	893b      	ldrh	r3, [r7, #8]
 80148f6:	4413      	add	r3, r2
 80148f8:	b29b      	uxth	r3, r3
 80148fa:	3314      	adds	r3, #20
 80148fc:	b29b      	uxth	r3, r3
 80148fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014902:	4619      	mov	r1, r3
 8014904:	2022      	movs	r0, #34	; 0x22
 8014906:	f7f9 fd2d 	bl	800e364 <pbuf_alloc>
 801490a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801490c:	697b      	ldr	r3, [r7, #20]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d04d      	beq.n	80149ae <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014912:	897b      	ldrh	r3, [r7, #10]
 8014914:	3313      	adds	r3, #19
 8014916:	697a      	ldr	r2, [r7, #20]
 8014918:	8952      	ldrh	r2, [r2, #10]
 801491a:	4293      	cmp	r3, r2
 801491c:	db06      	blt.n	801492c <tcp_output_alloc_header_common+0x4c>
 801491e:	4b26      	ldr	r3, [pc, #152]	; (80149b8 <tcp_output_alloc_header_common+0xd8>)
 8014920:	f240 7223 	movw	r2, #1827	; 0x723
 8014924:	4925      	ldr	r1, [pc, #148]	; (80149bc <tcp_output_alloc_header_common+0xdc>)
 8014926:	4826      	ldr	r0, [pc, #152]	; (80149c0 <tcp_output_alloc_header_common+0xe0>)
 8014928:	f008 fe7a 	bl	801d620 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801492c:	697b      	ldr	r3, [r7, #20]
 801492e:	685b      	ldr	r3, [r3, #4]
 8014930:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014932:	8c3b      	ldrh	r3, [r7, #32]
 8014934:	4618      	mov	r0, r3
 8014936:	f7f8 fbf7 	bl	800d128 <lwip_htons>
 801493a:	4603      	mov	r3, r0
 801493c:	461a      	mov	r2, r3
 801493e:	693b      	ldr	r3, [r7, #16]
 8014940:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014944:	4618      	mov	r0, r3
 8014946:	f7f8 fbef 	bl	800d128 <lwip_htons>
 801494a:	4603      	mov	r3, r0
 801494c:	461a      	mov	r2, r3
 801494e:	693b      	ldr	r3, [r7, #16]
 8014950:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014952:	693b      	ldr	r3, [r7, #16]
 8014954:	687a      	ldr	r2, [r7, #4]
 8014956:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014958:	68f8      	ldr	r0, [r7, #12]
 801495a:	f7f8 fbfa 	bl	800d152 <lwip_htonl>
 801495e:	4602      	mov	r2, r0
 8014960:	693b      	ldr	r3, [r7, #16]
 8014962:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014964:	897b      	ldrh	r3, [r7, #10]
 8014966:	089b      	lsrs	r3, r3, #2
 8014968:	b29b      	uxth	r3, r3
 801496a:	3305      	adds	r3, #5
 801496c:	b29b      	uxth	r3, r3
 801496e:	031b      	lsls	r3, r3, #12
 8014970:	b29a      	uxth	r2, r3
 8014972:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014976:	b29b      	uxth	r3, r3
 8014978:	4313      	orrs	r3, r2
 801497a:	b29b      	uxth	r3, r3
 801497c:	4618      	mov	r0, r3
 801497e:	f7f8 fbd3 	bl	800d128 <lwip_htons>
 8014982:	4603      	mov	r3, r0
 8014984:	461a      	mov	r2, r3
 8014986:	693b      	ldr	r3, [r7, #16]
 8014988:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801498a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801498c:	4618      	mov	r0, r3
 801498e:	f7f8 fbcb 	bl	800d128 <lwip_htons>
 8014992:	4603      	mov	r3, r0
 8014994:	461a      	mov	r2, r3
 8014996:	693b      	ldr	r3, [r7, #16]
 8014998:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801499a:	693b      	ldr	r3, [r7, #16]
 801499c:	2200      	movs	r2, #0
 801499e:	741a      	strb	r2, [r3, #16]
 80149a0:	2200      	movs	r2, #0
 80149a2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80149a4:	693b      	ldr	r3, [r7, #16]
 80149a6:	2200      	movs	r2, #0
 80149a8:	749a      	strb	r2, [r3, #18]
 80149aa:	2200      	movs	r2, #0
 80149ac:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80149ae:	697b      	ldr	r3, [r7, #20]
}
 80149b0:	4618      	mov	r0, r3
 80149b2:	3718      	adds	r7, #24
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd80      	pop	{r7, pc}
 80149b8:	08020a3c 	.word	0x08020a3c
 80149bc:	08021114 	.word	0x08021114
 80149c0:	08020a90 	.word	0x08020a90

080149c4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80149c4:	b5b0      	push	{r4, r5, r7, lr}
 80149c6:	b08a      	sub	sp, #40	; 0x28
 80149c8:	af04      	add	r7, sp, #16
 80149ca:	60f8      	str	r0, [r7, #12]
 80149cc:	607b      	str	r3, [r7, #4]
 80149ce:	460b      	mov	r3, r1
 80149d0:	817b      	strh	r3, [r7, #10]
 80149d2:	4613      	mov	r3, r2
 80149d4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d106      	bne.n	80149ea <tcp_output_alloc_header+0x26>
 80149dc:	4b15      	ldr	r3, [pc, #84]	; (8014a34 <tcp_output_alloc_header+0x70>)
 80149de:	f240 7242 	movw	r2, #1858	; 0x742
 80149e2:	4915      	ldr	r1, [pc, #84]	; (8014a38 <tcp_output_alloc_header+0x74>)
 80149e4:	4815      	ldr	r0, [pc, #84]	; (8014a3c <tcp_output_alloc_header+0x78>)
 80149e6:	f008 fe1b 	bl	801d620 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	8adb      	ldrh	r3, [r3, #22]
 80149f2:	68fa      	ldr	r2, [r7, #12]
 80149f4:	8b12      	ldrh	r2, [r2, #24]
 80149f6:	68f9      	ldr	r1, [r7, #12]
 80149f8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80149fa:	893d      	ldrh	r5, [r7, #8]
 80149fc:	897c      	ldrh	r4, [r7, #10]
 80149fe:	9103      	str	r1, [sp, #12]
 8014a00:	2110      	movs	r1, #16
 8014a02:	9102      	str	r1, [sp, #8]
 8014a04:	9201      	str	r2, [sp, #4]
 8014a06:	9300      	str	r3, [sp, #0]
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	462a      	mov	r2, r5
 8014a0c:	4621      	mov	r1, r4
 8014a0e:	f7ff ff67 	bl	80148e0 <tcp_output_alloc_header_common>
 8014a12:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d006      	beq.n	8014a28 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a1e:	68fa      	ldr	r2, [r7, #12]
 8014a20:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014a22:	441a      	add	r2, r3
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014a28:	697b      	ldr	r3, [r7, #20]
}
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	3718      	adds	r7, #24
 8014a2e:	46bd      	mov	sp, r7
 8014a30:	bdb0      	pop	{r4, r5, r7, pc}
 8014a32:	bf00      	nop
 8014a34:	08020a3c 	.word	0x08020a3c
 8014a38:	08021144 	.word	0x08021144
 8014a3c:	08020a90 	.word	0x08020a90

08014a40 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b088      	sub	sp, #32
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	60f8      	str	r0, [r7, #12]
 8014a48:	60b9      	str	r1, [r7, #8]
 8014a4a:	4611      	mov	r1, r2
 8014a4c:	461a      	mov	r2, r3
 8014a4e:	460b      	mov	r3, r1
 8014a50:	71fb      	strb	r3, [r7, #7]
 8014a52:	4613      	mov	r3, r2
 8014a54:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014a56:	2300      	movs	r3, #0
 8014a58:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014a5a:	68bb      	ldr	r3, [r7, #8]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d106      	bne.n	8014a6e <tcp_output_fill_options+0x2e>
 8014a60:	4b13      	ldr	r3, [pc, #76]	; (8014ab0 <tcp_output_fill_options+0x70>)
 8014a62:	f240 7256 	movw	r2, #1878	; 0x756
 8014a66:	4913      	ldr	r1, [pc, #76]	; (8014ab4 <tcp_output_fill_options+0x74>)
 8014a68:	4813      	ldr	r0, [pc, #76]	; (8014ab8 <tcp_output_fill_options+0x78>)
 8014a6a:	f008 fdd9 	bl	801d620 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014a6e:	68bb      	ldr	r3, [r7, #8]
 8014a70:	685b      	ldr	r3, [r3, #4]
 8014a72:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014a74:	69bb      	ldr	r3, [r7, #24]
 8014a76:	3314      	adds	r3, #20
 8014a78:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014a7a:	69bb      	ldr	r3, [r7, #24]
 8014a7c:	f103 0214 	add.w	r2, r3, #20
 8014a80:	8bfb      	ldrh	r3, [r7, #30]
 8014a82:	009b      	lsls	r3, r3, #2
 8014a84:	4619      	mov	r1, r3
 8014a86:	79fb      	ldrb	r3, [r7, #7]
 8014a88:	009b      	lsls	r3, r3, #2
 8014a8a:	f003 0304 	and.w	r3, r3, #4
 8014a8e:	440b      	add	r3, r1
 8014a90:	4413      	add	r3, r2
 8014a92:	697a      	ldr	r2, [r7, #20]
 8014a94:	429a      	cmp	r2, r3
 8014a96:	d006      	beq.n	8014aa6 <tcp_output_fill_options+0x66>
 8014a98:	4b05      	ldr	r3, [pc, #20]	; (8014ab0 <tcp_output_fill_options+0x70>)
 8014a9a:	f240 7275 	movw	r2, #1909	; 0x775
 8014a9e:	4907      	ldr	r1, [pc, #28]	; (8014abc <tcp_output_fill_options+0x7c>)
 8014aa0:	4805      	ldr	r0, [pc, #20]	; (8014ab8 <tcp_output_fill_options+0x78>)
 8014aa2:	f008 fdbd 	bl	801d620 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014aa6:	bf00      	nop
 8014aa8:	3720      	adds	r7, #32
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd80      	pop	{r7, pc}
 8014aae:	bf00      	nop
 8014ab0:	08020a3c 	.word	0x08020a3c
 8014ab4:	0802116c 	.word	0x0802116c
 8014ab8:	08020a90 	.word	0x08020a90
 8014abc:	08021064 	.word	0x08021064

08014ac0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b08a      	sub	sp, #40	; 0x28
 8014ac4:	af04      	add	r7, sp, #16
 8014ac6:	60f8      	str	r0, [r7, #12]
 8014ac8:	60b9      	str	r1, [r7, #8]
 8014aca:	607a      	str	r2, [r7, #4]
 8014acc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014ace:	68bb      	ldr	r3, [r7, #8]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d106      	bne.n	8014ae2 <tcp_output_control_segment+0x22>
 8014ad4:	4b1c      	ldr	r3, [pc, #112]	; (8014b48 <tcp_output_control_segment+0x88>)
 8014ad6:	f240 7287 	movw	r2, #1927	; 0x787
 8014ada:	491c      	ldr	r1, [pc, #112]	; (8014b4c <tcp_output_control_segment+0x8c>)
 8014adc:	481c      	ldr	r0, [pc, #112]	; (8014b50 <tcp_output_control_segment+0x90>)
 8014ade:	f008 fd9f 	bl	801d620 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014ae2:	683a      	ldr	r2, [r7, #0]
 8014ae4:	6879      	ldr	r1, [r7, #4]
 8014ae6:	68f8      	ldr	r0, [r7, #12]
 8014ae8:	f7fe fae8 	bl	80130bc <tcp_route>
 8014aec:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014aee:	693b      	ldr	r3, [r7, #16]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d102      	bne.n	8014afa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014af4:	23fc      	movs	r3, #252	; 0xfc
 8014af6:	75fb      	strb	r3, [r7, #23]
 8014af8:	e01c      	b.n	8014b34 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d006      	beq.n	8014b0e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	7adb      	ldrb	r3, [r3, #11]
 8014b04:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	7a9b      	ldrb	r3, [r3, #10]
 8014b0a:	757b      	strb	r3, [r7, #21]
 8014b0c:	e003      	b.n	8014b16 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014b0e:	23ff      	movs	r3, #255	; 0xff
 8014b10:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014b12:	2300      	movs	r3, #0
 8014b14:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014b16:	7dba      	ldrb	r2, [r7, #22]
 8014b18:	693b      	ldr	r3, [r7, #16]
 8014b1a:	9302      	str	r3, [sp, #8]
 8014b1c:	2306      	movs	r3, #6
 8014b1e:	9301      	str	r3, [sp, #4]
 8014b20:	7d7b      	ldrb	r3, [r7, #21]
 8014b22:	9300      	str	r3, [sp, #0]
 8014b24:	4613      	mov	r3, r2
 8014b26:	683a      	ldr	r2, [r7, #0]
 8014b28:	6879      	ldr	r1, [r7, #4]
 8014b2a:	68b8      	ldr	r0, [r7, #8]
 8014b2c:	f002 f954 	bl	8016dd8 <ip4_output_if>
 8014b30:	4603      	mov	r3, r0
 8014b32:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014b34:	68b8      	ldr	r0, [r7, #8]
 8014b36:	f7f9 fef9 	bl	800e92c <pbuf_free>
  return err;
 8014b3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b3e:	4618      	mov	r0, r3
 8014b40:	3718      	adds	r7, #24
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bd80      	pop	{r7, pc}
 8014b46:	bf00      	nop
 8014b48:	08020a3c 	.word	0x08020a3c
 8014b4c:	08021194 	.word	0x08021194
 8014b50:	08020a90 	.word	0x08020a90

08014b54 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014b54:	b590      	push	{r4, r7, lr}
 8014b56:	b08b      	sub	sp, #44	; 0x2c
 8014b58:	af04      	add	r7, sp, #16
 8014b5a:	60f8      	str	r0, [r7, #12]
 8014b5c:	60b9      	str	r1, [r7, #8]
 8014b5e:	607a      	str	r2, [r7, #4]
 8014b60:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014b62:	683b      	ldr	r3, [r7, #0]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d106      	bne.n	8014b76 <tcp_rst+0x22>
 8014b68:	4b1f      	ldr	r3, [pc, #124]	; (8014be8 <tcp_rst+0x94>)
 8014b6a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014b6e:	491f      	ldr	r1, [pc, #124]	; (8014bec <tcp_rst+0x98>)
 8014b70:	481f      	ldr	r0, [pc, #124]	; (8014bf0 <tcp_rst+0x9c>)
 8014b72:	f008 fd55 	bl	801d620 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d106      	bne.n	8014b8a <tcp_rst+0x36>
 8014b7c:	4b1a      	ldr	r3, [pc, #104]	; (8014be8 <tcp_rst+0x94>)
 8014b7e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014b82:	491c      	ldr	r1, [pc, #112]	; (8014bf4 <tcp_rst+0xa0>)
 8014b84:	481a      	ldr	r0, [pc, #104]	; (8014bf0 <tcp_rst+0x9c>)
 8014b86:	f008 fd4b 	bl	801d620 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014b8e:	f246 0308 	movw	r3, #24584	; 0x6008
 8014b92:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014b94:	7dfb      	ldrb	r3, [r7, #23]
 8014b96:	b29c      	uxth	r4, r3
 8014b98:	68b8      	ldr	r0, [r7, #8]
 8014b9a:	f7f8 fada 	bl	800d152 <lwip_htonl>
 8014b9e:	4602      	mov	r2, r0
 8014ba0:	8abb      	ldrh	r3, [r7, #20]
 8014ba2:	9303      	str	r3, [sp, #12]
 8014ba4:	2314      	movs	r3, #20
 8014ba6:	9302      	str	r3, [sp, #8]
 8014ba8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014baa:	9301      	str	r3, [sp, #4]
 8014bac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014bae:	9300      	str	r3, [sp, #0]
 8014bb0:	4613      	mov	r3, r2
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	4621      	mov	r1, r4
 8014bb6:	6878      	ldr	r0, [r7, #4]
 8014bb8:	f7ff fe92 	bl	80148e0 <tcp_output_alloc_header_common>
 8014bbc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014bbe:	693b      	ldr	r3, [r7, #16]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d00c      	beq.n	8014bde <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014bc4:	7dfb      	ldrb	r3, [r7, #23]
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	6939      	ldr	r1, [r7, #16]
 8014bca:	68f8      	ldr	r0, [r7, #12]
 8014bcc:	f7ff ff38 	bl	8014a40 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bd2:	683a      	ldr	r2, [r7, #0]
 8014bd4:	6939      	ldr	r1, [r7, #16]
 8014bd6:	68f8      	ldr	r0, [r7, #12]
 8014bd8:	f7ff ff72 	bl	8014ac0 <tcp_output_control_segment>
 8014bdc:	e000      	b.n	8014be0 <tcp_rst+0x8c>
    return;
 8014bde:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014be0:	371c      	adds	r7, #28
 8014be2:	46bd      	mov	sp, r7
 8014be4:	bd90      	pop	{r4, r7, pc}
 8014be6:	bf00      	nop
 8014be8:	08020a3c 	.word	0x08020a3c
 8014bec:	080211c0 	.word	0x080211c0
 8014bf0:	08020a90 	.word	0x08020a90
 8014bf4:	080211dc 	.word	0x080211dc

08014bf8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014bf8:	b590      	push	{r4, r7, lr}
 8014bfa:	b087      	sub	sp, #28
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014c00:	2300      	movs	r3, #0
 8014c02:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014c04:	2300      	movs	r3, #0
 8014c06:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d106      	bne.n	8014c1c <tcp_send_empty_ack+0x24>
 8014c0e:	4b28      	ldr	r3, [pc, #160]	; (8014cb0 <tcp_send_empty_ack+0xb8>)
 8014c10:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014c14:	4927      	ldr	r1, [pc, #156]	; (8014cb4 <tcp_send_empty_ack+0xbc>)
 8014c16:	4828      	ldr	r0, [pc, #160]	; (8014cb8 <tcp_send_empty_ack+0xc0>)
 8014c18:	f008 fd02 	bl	801d620 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014c1c:	7dfb      	ldrb	r3, [r7, #23]
 8014c1e:	009b      	lsls	r3, r3, #2
 8014c20:	b2db      	uxtb	r3, r3
 8014c22:	f003 0304 	and.w	r3, r3, #4
 8014c26:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014c28:	7d7b      	ldrb	r3, [r7, #21]
 8014c2a:	b29c      	uxth	r4, r3
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014c30:	4618      	mov	r0, r3
 8014c32:	f7f8 fa8e 	bl	800d152 <lwip_htonl>
 8014c36:	4603      	mov	r3, r0
 8014c38:	2200      	movs	r2, #0
 8014c3a:	4621      	mov	r1, r4
 8014c3c:	6878      	ldr	r0, [r7, #4]
 8014c3e:	f7ff fec1 	bl	80149c4 <tcp_output_alloc_header>
 8014c42:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014c44:	693b      	ldr	r3, [r7, #16]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d109      	bne.n	8014c5e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	8b5b      	ldrh	r3, [r3, #26]
 8014c4e:	f043 0303 	orr.w	r3, r3, #3
 8014c52:	b29a      	uxth	r2, r3
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014c58:	f06f 0301 	mvn.w	r3, #1
 8014c5c:	e023      	b.n	8014ca6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014c5e:	7dbb      	ldrb	r3, [r7, #22]
 8014c60:	7dfa      	ldrb	r2, [r7, #23]
 8014c62:	6939      	ldr	r1, [r7, #16]
 8014c64:	6878      	ldr	r0, [r7, #4]
 8014c66:	f7ff feeb 	bl	8014a40 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014c6a:	687a      	ldr	r2, [r7, #4]
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	3304      	adds	r3, #4
 8014c70:	6939      	ldr	r1, [r7, #16]
 8014c72:	6878      	ldr	r0, [r7, #4]
 8014c74:	f7ff ff24 	bl	8014ac0 <tcp_output_control_segment>
 8014c78:	4603      	mov	r3, r0
 8014c7a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d007      	beq.n	8014c94 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	8b5b      	ldrh	r3, [r3, #26]
 8014c88:	f043 0303 	orr.w	r3, r3, #3
 8014c8c:	b29a      	uxth	r2, r3
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	835a      	strh	r2, [r3, #26]
 8014c92:	e006      	b.n	8014ca2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	8b5b      	ldrh	r3, [r3, #26]
 8014c98:	f023 0303 	bic.w	r3, r3, #3
 8014c9c:	b29a      	uxth	r2, r3
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	371c      	adds	r7, #28
 8014caa:	46bd      	mov	sp, r7
 8014cac:	bd90      	pop	{r4, r7, pc}
 8014cae:	bf00      	nop
 8014cb0:	08020a3c 	.word	0x08020a3c
 8014cb4:	080211f8 	.word	0x080211f8
 8014cb8:	08020a90 	.word	0x08020a90

08014cbc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014cbc:	b590      	push	{r4, r7, lr}
 8014cbe:	b087      	sub	sp, #28
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d106      	bne.n	8014cdc <tcp_keepalive+0x20>
 8014cce:	4b18      	ldr	r3, [pc, #96]	; (8014d30 <tcp_keepalive+0x74>)
 8014cd0:	f640 0224 	movw	r2, #2084	; 0x824
 8014cd4:	4917      	ldr	r1, [pc, #92]	; (8014d34 <tcp_keepalive+0x78>)
 8014cd6:	4818      	ldr	r0, [pc, #96]	; (8014d38 <tcp_keepalive+0x7c>)
 8014cd8:	f008 fca2 	bl	801d620 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014cdc:	7dfb      	ldrb	r3, [r7, #23]
 8014cde:	b29c      	uxth	r4, r3
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ce4:	3b01      	subs	r3, #1
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	f7f8 fa33 	bl	800d152 <lwip_htonl>
 8014cec:	4603      	mov	r3, r0
 8014cee:	2200      	movs	r2, #0
 8014cf0:	4621      	mov	r1, r4
 8014cf2:	6878      	ldr	r0, [r7, #4]
 8014cf4:	f7ff fe66 	bl	80149c4 <tcp_output_alloc_header>
 8014cf8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014cfa:	693b      	ldr	r3, [r7, #16]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d102      	bne.n	8014d06 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d04:	e010      	b.n	8014d28 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014d06:	7dfb      	ldrb	r3, [r7, #23]
 8014d08:	2200      	movs	r2, #0
 8014d0a:	6939      	ldr	r1, [r7, #16]
 8014d0c:	6878      	ldr	r0, [r7, #4]
 8014d0e:	f7ff fe97 	bl	8014a40 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014d12:	687a      	ldr	r2, [r7, #4]
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	3304      	adds	r3, #4
 8014d18:	6939      	ldr	r1, [r7, #16]
 8014d1a:	6878      	ldr	r0, [r7, #4]
 8014d1c:	f7ff fed0 	bl	8014ac0 <tcp_output_control_segment>
 8014d20:	4603      	mov	r3, r0
 8014d22:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014d28:	4618      	mov	r0, r3
 8014d2a:	371c      	adds	r7, #28
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	bd90      	pop	{r4, r7, pc}
 8014d30:	08020a3c 	.word	0x08020a3c
 8014d34:	08021218 	.word	0x08021218
 8014d38:	08020a90 	.word	0x08020a90

08014d3c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014d3c:	b590      	push	{r4, r7, lr}
 8014d3e:	b08b      	sub	sp, #44	; 0x2c
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014d44:	2300      	movs	r3, #0
 8014d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d106      	bne.n	8014d5e <tcp_zero_window_probe+0x22>
 8014d50:	4b4c      	ldr	r3, [pc, #304]	; (8014e84 <tcp_zero_window_probe+0x148>)
 8014d52:	f640 024f 	movw	r2, #2127	; 0x84f
 8014d56:	494c      	ldr	r1, [pc, #304]	; (8014e88 <tcp_zero_window_probe+0x14c>)
 8014d58:	484c      	ldr	r0, [pc, #304]	; (8014e8c <tcp_zero_window_probe+0x150>)
 8014d5a:	f008 fc61 	bl	801d620 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d62:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014d64:	6a3b      	ldr	r3, [r7, #32]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d101      	bne.n	8014d6e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	e086      	b.n	8014e7c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014d74:	2bff      	cmp	r3, #255	; 0xff
 8014d76:	d007      	beq.n	8014d88 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014d7e:	3301      	adds	r3, #1
 8014d80:	b2da      	uxtb	r2, r3
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014d88:	6a3b      	ldr	r3, [r7, #32]
 8014d8a:	68db      	ldr	r3, [r3, #12]
 8014d8c:	899b      	ldrh	r3, [r3, #12]
 8014d8e:	b29b      	uxth	r3, r3
 8014d90:	4618      	mov	r0, r3
 8014d92:	f7f8 f9c9 	bl	800d128 <lwip_htons>
 8014d96:	4603      	mov	r3, r0
 8014d98:	b2db      	uxtb	r3, r3
 8014d9a:	f003 0301 	and.w	r3, r3, #1
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d005      	beq.n	8014dae <tcp_zero_window_probe+0x72>
 8014da2:	6a3b      	ldr	r3, [r7, #32]
 8014da4:	891b      	ldrh	r3, [r3, #8]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d101      	bne.n	8014dae <tcp_zero_window_probe+0x72>
 8014daa:	2301      	movs	r3, #1
 8014dac:	e000      	b.n	8014db0 <tcp_zero_window_probe+0x74>
 8014dae:	2300      	movs	r3, #0
 8014db0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014db2:	7ffb      	ldrb	r3, [r7, #31]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	bf0c      	ite	eq
 8014db8:	2301      	moveq	r3, #1
 8014dba:	2300      	movne	r3, #0
 8014dbc:	b2db      	uxtb	r3, r3
 8014dbe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014dc4:	b299      	uxth	r1, r3
 8014dc6:	6a3b      	ldr	r3, [r7, #32]
 8014dc8:	68db      	ldr	r3, [r3, #12]
 8014dca:	685b      	ldr	r3, [r3, #4]
 8014dcc:	8bba      	ldrh	r2, [r7, #28]
 8014dce:	6878      	ldr	r0, [r7, #4]
 8014dd0:	f7ff fdf8 	bl	80149c4 <tcp_output_alloc_header>
 8014dd4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014dd6:	69bb      	ldr	r3, [r7, #24]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d102      	bne.n	8014de2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014de0:	e04c      	b.n	8014e7c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014de2:	69bb      	ldr	r3, [r7, #24]
 8014de4:	685b      	ldr	r3, [r3, #4]
 8014de6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014de8:	7ffb      	ldrb	r3, [r7, #31]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d011      	beq.n	8014e12 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014dee:	697b      	ldr	r3, [r7, #20]
 8014df0:	899b      	ldrh	r3, [r3, #12]
 8014df2:	b29b      	uxth	r3, r3
 8014df4:	b21b      	sxth	r3, r3
 8014df6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014dfa:	b21c      	sxth	r4, r3
 8014dfc:	2011      	movs	r0, #17
 8014dfe:	f7f8 f993 	bl	800d128 <lwip_htons>
 8014e02:	4603      	mov	r3, r0
 8014e04:	b21b      	sxth	r3, r3
 8014e06:	4323      	orrs	r3, r4
 8014e08:	b21b      	sxth	r3, r3
 8014e0a:	b29a      	uxth	r2, r3
 8014e0c:	697b      	ldr	r3, [r7, #20]
 8014e0e:	819a      	strh	r2, [r3, #12]
 8014e10:	e010      	b.n	8014e34 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014e12:	69bb      	ldr	r3, [r7, #24]
 8014e14:	685b      	ldr	r3, [r3, #4]
 8014e16:	3314      	adds	r3, #20
 8014e18:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014e1a:	6a3b      	ldr	r3, [r7, #32]
 8014e1c:	6858      	ldr	r0, [r3, #4]
 8014e1e:	6a3b      	ldr	r3, [r7, #32]
 8014e20:	685b      	ldr	r3, [r3, #4]
 8014e22:	891a      	ldrh	r2, [r3, #8]
 8014e24:	6a3b      	ldr	r3, [r7, #32]
 8014e26:	891b      	ldrh	r3, [r3, #8]
 8014e28:	1ad3      	subs	r3, r2, r3
 8014e2a:	b29b      	uxth	r3, r3
 8014e2c:	2201      	movs	r2, #1
 8014e2e:	6939      	ldr	r1, [r7, #16]
 8014e30:	f7f9 ff72 	bl	800ed18 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014e34:	6a3b      	ldr	r3, [r7, #32]
 8014e36:	68db      	ldr	r3, [r3, #12]
 8014e38:	685b      	ldr	r3, [r3, #4]
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f7f8 f989 	bl	800d152 <lwip_htonl>
 8014e40:	4603      	mov	r3, r0
 8014e42:	3301      	adds	r3, #1
 8014e44:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	1ad3      	subs	r3, r2, r3
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	da02      	bge.n	8014e58 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	68fa      	ldr	r2, [r7, #12]
 8014e56:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	69b9      	ldr	r1, [r7, #24]
 8014e60:	6878      	ldr	r0, [r7, #4]
 8014e62:	f7ff fded 	bl	8014a40 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014e66:	687a      	ldr	r2, [r7, #4]
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	3304      	adds	r3, #4
 8014e6c:	69b9      	ldr	r1, [r7, #24]
 8014e6e:	6878      	ldr	r0, [r7, #4]
 8014e70:	f7ff fe26 	bl	8014ac0 <tcp_output_control_segment>
 8014e74:	4603      	mov	r3, r0
 8014e76:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014e78:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	372c      	adds	r7, #44	; 0x2c
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd90      	pop	{r4, r7, pc}
 8014e84:	08020a3c 	.word	0x08020a3c
 8014e88:	08021234 	.word	0x08021234
 8014e8c:	08020a90 	.word	0x08020a90

08014e90 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b082      	sub	sp, #8
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014e98:	f7fa f82c 	bl	800eef4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014e9c:	4b0a      	ldr	r3, [pc, #40]	; (8014ec8 <tcpip_tcp_timer+0x38>)
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d103      	bne.n	8014eac <tcpip_tcp_timer+0x1c>
 8014ea4:	4b09      	ldr	r3, [pc, #36]	; (8014ecc <tcpip_tcp_timer+0x3c>)
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d005      	beq.n	8014eb8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014eac:	2200      	movs	r2, #0
 8014eae:	4908      	ldr	r1, [pc, #32]	; (8014ed0 <tcpip_tcp_timer+0x40>)
 8014eb0:	20fa      	movs	r0, #250	; 0xfa
 8014eb2:	f000 f8f3 	bl	801509c <sys_timeout>
 8014eb6:	e003      	b.n	8014ec0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014eb8:	4b06      	ldr	r3, [pc, #24]	; (8014ed4 <tcpip_tcp_timer+0x44>)
 8014eba:	2200      	movs	r2, #0
 8014ebc:	601a      	str	r2, [r3, #0]
  }
}
 8014ebe:	bf00      	nop
 8014ec0:	bf00      	nop
 8014ec2:	3708      	adds	r7, #8
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	bd80      	pop	{r7, pc}
 8014ec8:	200113c4 	.word	0x200113c4
 8014ecc:	200113c8 	.word	0x200113c8
 8014ed0:	08014e91 	.word	0x08014e91
 8014ed4:	20011410 	.word	0x20011410

08014ed8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014edc:	4b0a      	ldr	r3, [pc, #40]	; (8014f08 <tcp_timer_needed+0x30>)
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d10f      	bne.n	8014f04 <tcp_timer_needed+0x2c>
 8014ee4:	4b09      	ldr	r3, [pc, #36]	; (8014f0c <tcp_timer_needed+0x34>)
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d103      	bne.n	8014ef4 <tcp_timer_needed+0x1c>
 8014eec:	4b08      	ldr	r3, [pc, #32]	; (8014f10 <tcp_timer_needed+0x38>)
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d007      	beq.n	8014f04 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014ef4:	4b04      	ldr	r3, [pc, #16]	; (8014f08 <tcp_timer_needed+0x30>)
 8014ef6:	2201      	movs	r2, #1
 8014ef8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014efa:	2200      	movs	r2, #0
 8014efc:	4905      	ldr	r1, [pc, #20]	; (8014f14 <tcp_timer_needed+0x3c>)
 8014efe:	20fa      	movs	r0, #250	; 0xfa
 8014f00:	f000 f8cc 	bl	801509c <sys_timeout>
  }
}
 8014f04:	bf00      	nop
 8014f06:	bd80      	pop	{r7, pc}
 8014f08:	20011410 	.word	0x20011410
 8014f0c:	200113c4 	.word	0x200113c4
 8014f10:	200113c8 	.word	0x200113c8
 8014f14:	08014e91 	.word	0x08014e91

08014f18 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b086      	sub	sp, #24
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	60f8      	str	r0, [r7, #12]
 8014f20:	60b9      	str	r1, [r7, #8]
 8014f22:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014f24:	200a      	movs	r0, #10
 8014f26:	f7f8 fde7 	bl	800daf8 <memp_malloc>
 8014f2a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014f2c:	693b      	ldr	r3, [r7, #16]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d109      	bne.n	8014f46 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014f32:	693b      	ldr	r3, [r7, #16]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d151      	bne.n	8014fdc <sys_timeout_abs+0xc4>
 8014f38:	4b2a      	ldr	r3, [pc, #168]	; (8014fe4 <sys_timeout_abs+0xcc>)
 8014f3a:	22be      	movs	r2, #190	; 0xbe
 8014f3c:	492a      	ldr	r1, [pc, #168]	; (8014fe8 <sys_timeout_abs+0xd0>)
 8014f3e:	482b      	ldr	r0, [pc, #172]	; (8014fec <sys_timeout_abs+0xd4>)
 8014f40:	f008 fb6e 	bl	801d620 <iprintf>
    return;
 8014f44:	e04a      	b.n	8014fdc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014f46:	693b      	ldr	r3, [r7, #16]
 8014f48:	2200      	movs	r2, #0
 8014f4a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014f4c:	693b      	ldr	r3, [r7, #16]
 8014f4e:	68ba      	ldr	r2, [r7, #8]
 8014f50:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014f52:	693b      	ldr	r3, [r7, #16]
 8014f54:	687a      	ldr	r2, [r7, #4]
 8014f56:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014f58:	693b      	ldr	r3, [r7, #16]
 8014f5a:	68fa      	ldr	r2, [r7, #12]
 8014f5c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014f5e:	4b24      	ldr	r3, [pc, #144]	; (8014ff0 <sys_timeout_abs+0xd8>)
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d103      	bne.n	8014f6e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014f66:	4a22      	ldr	r2, [pc, #136]	; (8014ff0 <sys_timeout_abs+0xd8>)
 8014f68:	693b      	ldr	r3, [r7, #16]
 8014f6a:	6013      	str	r3, [r2, #0]
    return;
 8014f6c:	e037      	b.n	8014fde <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014f6e:	693b      	ldr	r3, [r7, #16]
 8014f70:	685a      	ldr	r2, [r3, #4]
 8014f72:	4b1f      	ldr	r3, [pc, #124]	; (8014ff0 <sys_timeout_abs+0xd8>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	685b      	ldr	r3, [r3, #4]
 8014f78:	1ad3      	subs	r3, r2, r3
 8014f7a:	0fdb      	lsrs	r3, r3, #31
 8014f7c:	f003 0301 	and.w	r3, r3, #1
 8014f80:	b2db      	uxtb	r3, r3
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d007      	beq.n	8014f96 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014f86:	4b1a      	ldr	r3, [pc, #104]	; (8014ff0 <sys_timeout_abs+0xd8>)
 8014f88:	681a      	ldr	r2, [r3, #0]
 8014f8a:	693b      	ldr	r3, [r7, #16]
 8014f8c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014f8e:	4a18      	ldr	r2, [pc, #96]	; (8014ff0 <sys_timeout_abs+0xd8>)
 8014f90:	693b      	ldr	r3, [r7, #16]
 8014f92:	6013      	str	r3, [r2, #0]
 8014f94:	e023      	b.n	8014fde <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014f96:	4b16      	ldr	r3, [pc, #88]	; (8014ff0 <sys_timeout_abs+0xd8>)
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	617b      	str	r3, [r7, #20]
 8014f9c:	e01a      	b.n	8014fd4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014f9e:	697b      	ldr	r3, [r7, #20]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d00b      	beq.n	8014fbe <sys_timeout_abs+0xa6>
 8014fa6:	693b      	ldr	r3, [r7, #16]
 8014fa8:	685a      	ldr	r2, [r3, #4]
 8014faa:	697b      	ldr	r3, [r7, #20]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	685b      	ldr	r3, [r3, #4]
 8014fb0:	1ad3      	subs	r3, r2, r3
 8014fb2:	0fdb      	lsrs	r3, r3, #31
 8014fb4:	f003 0301 	and.w	r3, r3, #1
 8014fb8:	b2db      	uxtb	r3, r3
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d007      	beq.n	8014fce <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014fbe:	697b      	ldr	r3, [r7, #20]
 8014fc0:	681a      	ldr	r2, [r3, #0]
 8014fc2:	693b      	ldr	r3, [r7, #16]
 8014fc4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014fc6:	697b      	ldr	r3, [r7, #20]
 8014fc8:	693a      	ldr	r2, [r7, #16]
 8014fca:	601a      	str	r2, [r3, #0]
        break;
 8014fcc:	e007      	b.n	8014fde <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014fce:	697b      	ldr	r3, [r7, #20]
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	617b      	str	r3, [r7, #20]
 8014fd4:	697b      	ldr	r3, [r7, #20]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d1e1      	bne.n	8014f9e <sys_timeout_abs+0x86>
 8014fda:	e000      	b.n	8014fde <sys_timeout_abs+0xc6>
    return;
 8014fdc:	bf00      	nop
      }
    }
  }
}
 8014fde:	3718      	adds	r7, #24
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}
 8014fe4:	08021258 	.word	0x08021258
 8014fe8:	0802128c 	.word	0x0802128c
 8014fec:	080212cc 	.word	0x080212cc
 8014ff0:	20011408 	.word	0x20011408

08014ff4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b086      	sub	sp, #24
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015000:	697b      	ldr	r3, [r7, #20]
 8015002:	685b      	ldr	r3, [r3, #4]
 8015004:	4798      	blx	r3

  now = sys_now();
 8015006:	f7f2 fc9b 	bl	8007940 <sys_now>
 801500a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801500c:	697b      	ldr	r3, [r7, #20]
 801500e:	681a      	ldr	r2, [r3, #0]
 8015010:	4b0f      	ldr	r3, [pc, #60]	; (8015050 <lwip_cyclic_timer+0x5c>)
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	4413      	add	r3, r2
 8015016:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015018:	68fa      	ldr	r2, [r7, #12]
 801501a:	693b      	ldr	r3, [r7, #16]
 801501c:	1ad3      	subs	r3, r2, r3
 801501e:	0fdb      	lsrs	r3, r3, #31
 8015020:	f003 0301 	and.w	r3, r3, #1
 8015024:	b2db      	uxtb	r3, r3
 8015026:	2b00      	cmp	r3, #0
 8015028:	d009      	beq.n	801503e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801502a:	697b      	ldr	r3, [r7, #20]
 801502c:	681a      	ldr	r2, [r3, #0]
 801502e:	693b      	ldr	r3, [r7, #16]
 8015030:	4413      	add	r3, r2
 8015032:	687a      	ldr	r2, [r7, #4]
 8015034:	4907      	ldr	r1, [pc, #28]	; (8015054 <lwip_cyclic_timer+0x60>)
 8015036:	4618      	mov	r0, r3
 8015038:	f7ff ff6e 	bl	8014f18 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801503c:	e004      	b.n	8015048 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801503e:	687a      	ldr	r2, [r7, #4]
 8015040:	4904      	ldr	r1, [pc, #16]	; (8015054 <lwip_cyclic_timer+0x60>)
 8015042:	68f8      	ldr	r0, [r7, #12]
 8015044:	f7ff ff68 	bl	8014f18 <sys_timeout_abs>
}
 8015048:	bf00      	nop
 801504a:	3718      	adds	r7, #24
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}
 8015050:	2001140c 	.word	0x2001140c
 8015054:	08014ff5 	.word	0x08014ff5

08015058 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015058:	b580      	push	{r7, lr}
 801505a:	b082      	sub	sp, #8
 801505c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801505e:	2301      	movs	r3, #1
 8015060:	607b      	str	r3, [r7, #4]
 8015062:	e00e      	b.n	8015082 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015064:	4a0b      	ldr	r2, [pc, #44]	; (8015094 <sys_timeouts_init+0x3c>)
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	00db      	lsls	r3, r3, #3
 8015070:	4a08      	ldr	r2, [pc, #32]	; (8015094 <sys_timeouts_init+0x3c>)
 8015072:	4413      	add	r3, r2
 8015074:	461a      	mov	r2, r3
 8015076:	4908      	ldr	r1, [pc, #32]	; (8015098 <sys_timeouts_init+0x40>)
 8015078:	f000 f810 	bl	801509c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	3301      	adds	r3, #1
 8015080:	607b      	str	r3, [r7, #4]
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	2b02      	cmp	r3, #2
 8015086:	d9ed      	bls.n	8015064 <sys_timeouts_init+0xc>
  }
}
 8015088:	bf00      	nop
 801508a:	bf00      	nop
 801508c:	3708      	adds	r7, #8
 801508e:	46bd      	mov	sp, r7
 8015090:	bd80      	pop	{r7, pc}
 8015092:	bf00      	nop
 8015094:	08022224 	.word	0x08022224
 8015098:	08014ff5 	.word	0x08014ff5

0801509c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b086      	sub	sp, #24
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	60f8      	str	r0, [r7, #12]
 80150a4:	60b9      	str	r1, [r7, #8]
 80150a6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80150ae:	d306      	bcc.n	80150be <sys_timeout+0x22>
 80150b0:	4b0a      	ldr	r3, [pc, #40]	; (80150dc <sys_timeout+0x40>)
 80150b2:	f240 1229 	movw	r2, #297	; 0x129
 80150b6:	490a      	ldr	r1, [pc, #40]	; (80150e0 <sys_timeout+0x44>)
 80150b8:	480a      	ldr	r0, [pc, #40]	; (80150e4 <sys_timeout+0x48>)
 80150ba:	f008 fab1 	bl	801d620 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80150be:	f7f2 fc3f 	bl	8007940 <sys_now>
 80150c2:	4602      	mov	r2, r0
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	4413      	add	r3, r2
 80150c8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80150ca:	687a      	ldr	r2, [r7, #4]
 80150cc:	68b9      	ldr	r1, [r7, #8]
 80150ce:	6978      	ldr	r0, [r7, #20]
 80150d0:	f7ff ff22 	bl	8014f18 <sys_timeout_abs>
#endif
}
 80150d4:	bf00      	nop
 80150d6:	3718      	adds	r7, #24
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}
 80150dc:	08021258 	.word	0x08021258
 80150e0:	080212f4 	.word	0x080212f4
 80150e4:	080212cc 	.word	0x080212cc

080150e8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b084      	sub	sp, #16
 80150ec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80150ee:	f7f2 fc27 	bl	8007940 <sys_now>
 80150f2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80150f4:	4b17      	ldr	r3, [pc, #92]	; (8015154 <sys_check_timeouts+0x6c>)
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80150fa:	68bb      	ldr	r3, [r7, #8]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d022      	beq.n	8015146 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	685b      	ldr	r3, [r3, #4]
 8015104:	68fa      	ldr	r2, [r7, #12]
 8015106:	1ad3      	subs	r3, r2, r3
 8015108:	0fdb      	lsrs	r3, r3, #31
 801510a:	f003 0301 	and.w	r3, r3, #1
 801510e:	b2db      	uxtb	r3, r3
 8015110:	2b00      	cmp	r3, #0
 8015112:	d11a      	bne.n	801514a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015114:	68bb      	ldr	r3, [r7, #8]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	4a0e      	ldr	r2, [pc, #56]	; (8015154 <sys_check_timeouts+0x6c>)
 801511a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801511c:	68bb      	ldr	r3, [r7, #8]
 801511e:	689b      	ldr	r3, [r3, #8]
 8015120:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015122:	68bb      	ldr	r3, [r7, #8]
 8015124:	68db      	ldr	r3, [r3, #12]
 8015126:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015128:	68bb      	ldr	r3, [r7, #8]
 801512a:	685b      	ldr	r3, [r3, #4]
 801512c:	4a0a      	ldr	r2, [pc, #40]	; (8015158 <sys_check_timeouts+0x70>)
 801512e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015130:	68b9      	ldr	r1, [r7, #8]
 8015132:	200a      	movs	r0, #10
 8015134:	f7f8 fd56 	bl	800dbe4 <memp_free>
    if (handler != NULL) {
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d0da      	beq.n	80150f4 <sys_check_timeouts+0xc>
      handler(arg);
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	6838      	ldr	r0, [r7, #0]
 8015142:	4798      	blx	r3
  do {
 8015144:	e7d6      	b.n	80150f4 <sys_check_timeouts+0xc>
      return;
 8015146:	bf00      	nop
 8015148:	e000      	b.n	801514c <sys_check_timeouts+0x64>
      return;
 801514a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801514c:	3710      	adds	r7, #16
 801514e:	46bd      	mov	sp, r7
 8015150:	bd80      	pop	{r7, pc}
 8015152:	bf00      	nop
 8015154:	20011408 	.word	0x20011408
 8015158:	2001140c 	.word	0x2001140c

0801515c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	b082      	sub	sp, #8
 8015160:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015162:	4b16      	ldr	r3, [pc, #88]	; (80151bc <sys_timeouts_sleeptime+0x60>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d102      	bne.n	8015170 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801516a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801516e:	e020      	b.n	80151b2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015170:	f7f2 fbe6 	bl	8007940 <sys_now>
 8015174:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015176:	4b11      	ldr	r3, [pc, #68]	; (80151bc <sys_timeouts_sleeptime+0x60>)
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	685a      	ldr	r2, [r3, #4]
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	1ad3      	subs	r3, r2, r3
 8015180:	0fdb      	lsrs	r3, r3, #31
 8015182:	f003 0301 	and.w	r3, r3, #1
 8015186:	b2db      	uxtb	r3, r3
 8015188:	2b00      	cmp	r3, #0
 801518a:	d001      	beq.n	8015190 <sys_timeouts_sleeptime+0x34>
    return 0;
 801518c:	2300      	movs	r3, #0
 801518e:	e010      	b.n	80151b2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015190:	4b0a      	ldr	r3, [pc, #40]	; (80151bc <sys_timeouts_sleeptime+0x60>)
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	685a      	ldr	r2, [r3, #4]
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	1ad3      	subs	r3, r2, r3
 801519a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801519c:	683b      	ldr	r3, [r7, #0]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	da06      	bge.n	80151b0 <sys_timeouts_sleeptime+0x54>
 80151a2:	4b07      	ldr	r3, [pc, #28]	; (80151c0 <sys_timeouts_sleeptime+0x64>)
 80151a4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80151a8:	4906      	ldr	r1, [pc, #24]	; (80151c4 <sys_timeouts_sleeptime+0x68>)
 80151aa:	4807      	ldr	r0, [pc, #28]	; (80151c8 <sys_timeouts_sleeptime+0x6c>)
 80151ac:	f008 fa38 	bl	801d620 <iprintf>
    return ret;
 80151b0:	683b      	ldr	r3, [r7, #0]
  }
}
 80151b2:	4618      	mov	r0, r3
 80151b4:	3708      	adds	r7, #8
 80151b6:	46bd      	mov	sp, r7
 80151b8:	bd80      	pop	{r7, pc}
 80151ba:	bf00      	nop
 80151bc:	20011408 	.word	0x20011408
 80151c0:	08021258 	.word	0x08021258
 80151c4:	0802132c 	.word	0x0802132c
 80151c8:	080212cc 	.word	0x080212cc

080151cc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80151d0:	f008 fab4 	bl	801d73c <rand>
 80151d4:	4603      	mov	r3, r0
 80151d6:	b29b      	uxth	r3, r3
 80151d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80151dc:	b29b      	uxth	r3, r3
 80151de:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80151e2:	b29a      	uxth	r2, r3
 80151e4:	4b01      	ldr	r3, [pc, #4]	; (80151ec <udp_init+0x20>)
 80151e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80151e8:	bf00      	nop
 80151ea:	bd80      	pop	{r7, pc}
 80151ec:	2000002c 	.word	0x2000002c

080151f0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80151f0:	b480      	push	{r7}
 80151f2:	b083      	sub	sp, #12
 80151f4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80151f6:	2300      	movs	r3, #0
 80151f8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80151fa:	4b17      	ldr	r3, [pc, #92]	; (8015258 <udp_new_port+0x68>)
 80151fc:	881b      	ldrh	r3, [r3, #0]
 80151fe:	1c5a      	adds	r2, r3, #1
 8015200:	b291      	uxth	r1, r2
 8015202:	4a15      	ldr	r2, [pc, #84]	; (8015258 <udp_new_port+0x68>)
 8015204:	8011      	strh	r1, [r2, #0]
 8015206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801520a:	4293      	cmp	r3, r2
 801520c:	d103      	bne.n	8015216 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801520e:	4b12      	ldr	r3, [pc, #72]	; (8015258 <udp_new_port+0x68>)
 8015210:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015214:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015216:	4b11      	ldr	r3, [pc, #68]	; (801525c <udp_new_port+0x6c>)
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	603b      	str	r3, [r7, #0]
 801521c:	e011      	b.n	8015242 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801521e:	683b      	ldr	r3, [r7, #0]
 8015220:	8a5a      	ldrh	r2, [r3, #18]
 8015222:	4b0d      	ldr	r3, [pc, #52]	; (8015258 <udp_new_port+0x68>)
 8015224:	881b      	ldrh	r3, [r3, #0]
 8015226:	429a      	cmp	r2, r3
 8015228:	d108      	bne.n	801523c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801522a:	88fb      	ldrh	r3, [r7, #6]
 801522c:	3301      	adds	r3, #1
 801522e:	80fb      	strh	r3, [r7, #6]
 8015230:	88fb      	ldrh	r3, [r7, #6]
 8015232:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015236:	d3e0      	bcc.n	80151fa <udp_new_port+0xa>
        return 0;
 8015238:	2300      	movs	r3, #0
 801523a:	e007      	b.n	801524c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801523c:	683b      	ldr	r3, [r7, #0]
 801523e:	68db      	ldr	r3, [r3, #12]
 8015240:	603b      	str	r3, [r7, #0]
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d1ea      	bne.n	801521e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015248:	4b03      	ldr	r3, [pc, #12]	; (8015258 <udp_new_port+0x68>)
 801524a:	881b      	ldrh	r3, [r3, #0]
}
 801524c:	4618      	mov	r0, r3
 801524e:	370c      	adds	r7, #12
 8015250:	46bd      	mov	sp, r7
 8015252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015256:	4770      	bx	lr
 8015258:	2000002c 	.word	0x2000002c
 801525c:	20011414 	.word	0x20011414

08015260 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015260:	b580      	push	{r7, lr}
 8015262:	b084      	sub	sp, #16
 8015264:	af00      	add	r7, sp, #0
 8015266:	60f8      	str	r0, [r7, #12]
 8015268:	60b9      	str	r1, [r7, #8]
 801526a:	4613      	mov	r3, r2
 801526c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d105      	bne.n	8015280 <udp_input_local_match+0x20>
 8015274:	4b27      	ldr	r3, [pc, #156]	; (8015314 <udp_input_local_match+0xb4>)
 8015276:	2287      	movs	r2, #135	; 0x87
 8015278:	4927      	ldr	r1, [pc, #156]	; (8015318 <udp_input_local_match+0xb8>)
 801527a:	4828      	ldr	r0, [pc, #160]	; (801531c <udp_input_local_match+0xbc>)
 801527c:	f008 f9d0 	bl	801d620 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015280:	68bb      	ldr	r3, [r7, #8]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d105      	bne.n	8015292 <udp_input_local_match+0x32>
 8015286:	4b23      	ldr	r3, [pc, #140]	; (8015314 <udp_input_local_match+0xb4>)
 8015288:	2288      	movs	r2, #136	; 0x88
 801528a:	4925      	ldr	r1, [pc, #148]	; (8015320 <udp_input_local_match+0xc0>)
 801528c:	4823      	ldr	r0, [pc, #140]	; (801531c <udp_input_local_match+0xbc>)
 801528e:	f008 f9c7 	bl	801d620 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	7a1b      	ldrb	r3, [r3, #8]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d00b      	beq.n	80152b2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	7a1a      	ldrb	r2, [r3, #8]
 801529e:	4b21      	ldr	r3, [pc, #132]	; (8015324 <udp_input_local_match+0xc4>)
 80152a0:	685b      	ldr	r3, [r3, #4]
 80152a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80152a6:	3301      	adds	r3, #1
 80152a8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80152aa:	429a      	cmp	r2, r3
 80152ac:	d001      	beq.n	80152b2 <udp_input_local_match+0x52>
    return 0;
 80152ae:	2300      	movs	r3, #0
 80152b0:	e02b      	b.n	801530a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80152b2:	79fb      	ldrb	r3, [r7, #7]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d018      	beq.n	80152ea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d013      	beq.n	80152e6 <udp_input_local_match+0x86>
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d00f      	beq.n	80152e6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80152c6:	4b17      	ldr	r3, [pc, #92]	; (8015324 <udp_input_local_match+0xc4>)
 80152c8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80152ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80152ce:	d00a      	beq.n	80152e6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	681a      	ldr	r2, [r3, #0]
 80152d4:	4b13      	ldr	r3, [pc, #76]	; (8015324 <udp_input_local_match+0xc4>)
 80152d6:	695b      	ldr	r3, [r3, #20]
 80152d8:	405a      	eors	r2, r3
 80152da:	68bb      	ldr	r3, [r7, #8]
 80152dc:	3308      	adds	r3, #8
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d110      	bne.n	8015308 <udp_input_local_match+0xa8>
          return 1;
 80152e6:	2301      	movs	r3, #1
 80152e8:	e00f      	b.n	801530a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d009      	beq.n	8015304 <udp_input_local_match+0xa4>
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d005      	beq.n	8015304 <udp_input_local_match+0xa4>
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	681a      	ldr	r2, [r3, #0]
 80152fc:	4b09      	ldr	r3, [pc, #36]	; (8015324 <udp_input_local_match+0xc4>)
 80152fe:	695b      	ldr	r3, [r3, #20]
 8015300:	429a      	cmp	r2, r3
 8015302:	d101      	bne.n	8015308 <udp_input_local_match+0xa8>
        return 1;
 8015304:	2301      	movs	r3, #1
 8015306:	e000      	b.n	801530a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015308:	2300      	movs	r3, #0
}
 801530a:	4618      	mov	r0, r3
 801530c:	3710      	adds	r7, #16
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}
 8015312:	bf00      	nop
 8015314:	08021340 	.word	0x08021340
 8015318:	08021370 	.word	0x08021370
 801531c:	08021394 	.word	0x08021394
 8015320:	080213bc 	.word	0x080213bc
 8015324:	2000a2bc 	.word	0x2000a2bc

08015328 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015328:	b590      	push	{r4, r7, lr}
 801532a:	b08d      	sub	sp, #52	; 0x34
 801532c:	af02      	add	r7, sp, #8
 801532e:	6078      	str	r0, [r7, #4]
 8015330:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015332:	2300      	movs	r3, #0
 8015334:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d105      	bne.n	8015348 <udp_input+0x20>
 801533c:	4b7c      	ldr	r3, [pc, #496]	; (8015530 <udp_input+0x208>)
 801533e:	22cf      	movs	r2, #207	; 0xcf
 8015340:	497c      	ldr	r1, [pc, #496]	; (8015534 <udp_input+0x20c>)
 8015342:	487d      	ldr	r0, [pc, #500]	; (8015538 <udp_input+0x210>)
 8015344:	f008 f96c 	bl	801d620 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015348:	683b      	ldr	r3, [r7, #0]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d105      	bne.n	801535a <udp_input+0x32>
 801534e:	4b78      	ldr	r3, [pc, #480]	; (8015530 <udp_input+0x208>)
 8015350:	22d0      	movs	r2, #208	; 0xd0
 8015352:	497a      	ldr	r1, [pc, #488]	; (801553c <udp_input+0x214>)
 8015354:	4878      	ldr	r0, [pc, #480]	; (8015538 <udp_input+0x210>)
 8015356:	f008 f963 	bl	801d620 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	895b      	ldrh	r3, [r3, #10]
 801535e:	2b07      	cmp	r3, #7
 8015360:	d803      	bhi.n	801536a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015362:	6878      	ldr	r0, [r7, #4]
 8015364:	f7f9 fae2 	bl	800e92c <pbuf_free>
    goto end;
 8015368:	e0de      	b.n	8015528 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	685b      	ldr	r3, [r3, #4]
 801536e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015370:	4b73      	ldr	r3, [pc, #460]	; (8015540 <udp_input+0x218>)
 8015372:	695b      	ldr	r3, [r3, #20]
 8015374:	4a72      	ldr	r2, [pc, #456]	; (8015540 <udp_input+0x218>)
 8015376:	6812      	ldr	r2, [r2, #0]
 8015378:	4611      	mov	r1, r2
 801537a:	4618      	mov	r0, r3
 801537c:	f001 fe04 	bl	8016f88 <ip4_addr_isbroadcast_u32>
 8015380:	4603      	mov	r3, r0
 8015382:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015384:	697b      	ldr	r3, [r7, #20]
 8015386:	881b      	ldrh	r3, [r3, #0]
 8015388:	b29b      	uxth	r3, r3
 801538a:	4618      	mov	r0, r3
 801538c:	f7f7 fecc 	bl	800d128 <lwip_htons>
 8015390:	4603      	mov	r3, r0
 8015392:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015394:	697b      	ldr	r3, [r7, #20]
 8015396:	885b      	ldrh	r3, [r3, #2]
 8015398:	b29b      	uxth	r3, r3
 801539a:	4618      	mov	r0, r3
 801539c:	f7f7 fec4 	bl	800d128 <lwip_htons>
 80153a0:	4603      	mov	r3, r0
 80153a2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80153a4:	2300      	movs	r3, #0
 80153a6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80153a8:	2300      	movs	r3, #0
 80153aa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80153ac:	2300      	movs	r3, #0
 80153ae:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80153b0:	4b64      	ldr	r3, [pc, #400]	; (8015544 <udp_input+0x21c>)
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	627b      	str	r3, [r7, #36]	; 0x24
 80153b6:	e054      	b.n	8015462 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80153b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ba:	8a5b      	ldrh	r3, [r3, #18]
 80153bc:	89fa      	ldrh	r2, [r7, #14]
 80153be:	429a      	cmp	r2, r3
 80153c0:	d14a      	bne.n	8015458 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80153c2:	7cfb      	ldrb	r3, [r7, #19]
 80153c4:	461a      	mov	r2, r3
 80153c6:	6839      	ldr	r1, [r7, #0]
 80153c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80153ca:	f7ff ff49 	bl	8015260 <udp_input_local_match>
 80153ce:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d041      	beq.n	8015458 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80153d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153d6:	7c1b      	ldrb	r3, [r3, #16]
 80153d8:	f003 0304 	and.w	r3, r3, #4
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d11d      	bne.n	801541c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80153e0:	69fb      	ldr	r3, [r7, #28]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d102      	bne.n	80153ec <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80153e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153e8:	61fb      	str	r3, [r7, #28]
 80153ea:	e017      	b.n	801541c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80153ec:	7cfb      	ldrb	r3, [r7, #19]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d014      	beq.n	801541c <udp_input+0xf4>
 80153f2:	4b53      	ldr	r3, [pc, #332]	; (8015540 <udp_input+0x218>)
 80153f4:	695b      	ldr	r3, [r3, #20]
 80153f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80153fa:	d10f      	bne.n	801541c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80153fc:	69fb      	ldr	r3, [r7, #28]
 80153fe:	681a      	ldr	r2, [r3, #0]
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	3304      	adds	r3, #4
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	429a      	cmp	r2, r3
 8015408:	d008      	beq.n	801541c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801540c:	681a      	ldr	r2, [r3, #0]
 801540e:	683b      	ldr	r3, [r7, #0]
 8015410:	3304      	adds	r3, #4
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	429a      	cmp	r2, r3
 8015416:	d101      	bne.n	801541c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801541a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801541e:	8a9b      	ldrh	r3, [r3, #20]
 8015420:	8a3a      	ldrh	r2, [r7, #16]
 8015422:	429a      	cmp	r2, r3
 8015424:	d118      	bne.n	8015458 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015428:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801542a:	2b00      	cmp	r3, #0
 801542c:	d005      	beq.n	801543a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015430:	685a      	ldr	r2, [r3, #4]
 8015432:	4b43      	ldr	r3, [pc, #268]	; (8015540 <udp_input+0x218>)
 8015434:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015436:	429a      	cmp	r2, r3
 8015438:	d10e      	bne.n	8015458 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801543a:	6a3b      	ldr	r3, [r7, #32]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d014      	beq.n	801546a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015442:	68da      	ldr	r2, [r3, #12]
 8015444:	6a3b      	ldr	r3, [r7, #32]
 8015446:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015448:	4b3e      	ldr	r3, [pc, #248]	; (8015544 <udp_input+0x21c>)
 801544a:	681a      	ldr	r2, [r3, #0]
 801544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801544e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015450:	4a3c      	ldr	r2, [pc, #240]	; (8015544 <udp_input+0x21c>)
 8015452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015454:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015456:	e008      	b.n	801546a <udp_input+0x142>
      }
    }

    prev = pcb;
 8015458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801545a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801545e:	68db      	ldr	r3, [r3, #12]
 8015460:	627b      	str	r3, [r7, #36]	; 0x24
 8015462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015464:	2b00      	cmp	r3, #0
 8015466:	d1a7      	bne.n	80153b8 <udp_input+0x90>
 8015468:	e000      	b.n	801546c <udp_input+0x144>
        break;
 801546a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801546e:	2b00      	cmp	r3, #0
 8015470:	d101      	bne.n	8015476 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015472:	69fb      	ldr	r3, [r7, #28]
 8015474:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015478:	2b00      	cmp	r3, #0
 801547a:	d002      	beq.n	8015482 <udp_input+0x15a>
    for_us = 1;
 801547c:	2301      	movs	r3, #1
 801547e:	76fb      	strb	r3, [r7, #27]
 8015480:	e00a      	b.n	8015498 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015482:	683b      	ldr	r3, [r7, #0]
 8015484:	3304      	adds	r3, #4
 8015486:	681a      	ldr	r2, [r3, #0]
 8015488:	4b2d      	ldr	r3, [pc, #180]	; (8015540 <udp_input+0x218>)
 801548a:	695b      	ldr	r3, [r3, #20]
 801548c:	429a      	cmp	r2, r3
 801548e:	bf0c      	ite	eq
 8015490:	2301      	moveq	r3, #1
 8015492:	2300      	movne	r3, #0
 8015494:	b2db      	uxtb	r3, r3
 8015496:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015498:	7efb      	ldrb	r3, [r7, #27]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d041      	beq.n	8015522 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801549e:	2108      	movs	r1, #8
 80154a0:	6878      	ldr	r0, [r7, #4]
 80154a2:	f7f9 f9bd 	bl	800e820 <pbuf_remove_header>
 80154a6:	4603      	mov	r3, r0
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d00a      	beq.n	80154c2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80154ac:	4b20      	ldr	r3, [pc, #128]	; (8015530 <udp_input+0x208>)
 80154ae:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80154b2:	4925      	ldr	r1, [pc, #148]	; (8015548 <udp_input+0x220>)
 80154b4:	4820      	ldr	r0, [pc, #128]	; (8015538 <udp_input+0x210>)
 80154b6:	f008 f8b3 	bl	801d620 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80154ba:	6878      	ldr	r0, [r7, #4]
 80154bc:	f7f9 fa36 	bl	800e92c <pbuf_free>
      goto end;
 80154c0:	e032      	b.n	8015528 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80154c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d012      	beq.n	80154ee <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80154c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ca:	699b      	ldr	r3, [r3, #24]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d00a      	beq.n	80154e6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80154d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d2:	699c      	ldr	r4, [r3, #24]
 80154d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d6:	69d8      	ldr	r0, [r3, #28]
 80154d8:	8a3b      	ldrh	r3, [r7, #16]
 80154da:	9300      	str	r3, [sp, #0]
 80154dc:	4b1b      	ldr	r3, [pc, #108]	; (801554c <udp_input+0x224>)
 80154de:	687a      	ldr	r2, [r7, #4]
 80154e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80154e2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80154e4:	e021      	b.n	801552a <udp_input+0x202>
        pbuf_free(p);
 80154e6:	6878      	ldr	r0, [r7, #4]
 80154e8:	f7f9 fa20 	bl	800e92c <pbuf_free>
        goto end;
 80154ec:	e01c      	b.n	8015528 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80154ee:	7cfb      	ldrb	r3, [r7, #19]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d112      	bne.n	801551a <udp_input+0x1f2>
 80154f4:	4b12      	ldr	r3, [pc, #72]	; (8015540 <udp_input+0x218>)
 80154f6:	695b      	ldr	r3, [r3, #20]
 80154f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80154fc:	2be0      	cmp	r3, #224	; 0xe0
 80154fe:	d00c      	beq.n	801551a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015500:	4b0f      	ldr	r3, [pc, #60]	; (8015540 <udp_input+0x218>)
 8015502:	899b      	ldrh	r3, [r3, #12]
 8015504:	3308      	adds	r3, #8
 8015506:	b29b      	uxth	r3, r3
 8015508:	b21b      	sxth	r3, r3
 801550a:	4619      	mov	r1, r3
 801550c:	6878      	ldr	r0, [r7, #4]
 801550e:	f7f9 f9fa 	bl	800e906 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015512:	2103      	movs	r1, #3
 8015514:	6878      	ldr	r0, [r7, #4]
 8015516:	f001 fa17 	bl	8016948 <icmp_dest_unreach>
      pbuf_free(p);
 801551a:	6878      	ldr	r0, [r7, #4]
 801551c:	f7f9 fa06 	bl	800e92c <pbuf_free>
  return;
 8015520:	e003      	b.n	801552a <udp_input+0x202>
    pbuf_free(p);
 8015522:	6878      	ldr	r0, [r7, #4]
 8015524:	f7f9 fa02 	bl	800e92c <pbuf_free>
  return;
 8015528:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801552a:	372c      	adds	r7, #44	; 0x2c
 801552c:	46bd      	mov	sp, r7
 801552e:	bd90      	pop	{r4, r7, pc}
 8015530:	08021340 	.word	0x08021340
 8015534:	080213e4 	.word	0x080213e4
 8015538:	08021394 	.word	0x08021394
 801553c:	080213fc 	.word	0x080213fc
 8015540:	2000a2bc 	.word	0x2000a2bc
 8015544:	20011414 	.word	0x20011414
 8015548:	08021418 	.word	0x08021418
 801554c:	2000a2cc 	.word	0x2000a2cc

08015550 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015550:	b580      	push	{r7, lr}
 8015552:	b086      	sub	sp, #24
 8015554:	af00      	add	r7, sp, #0
 8015556:	60f8      	str	r0, [r7, #12]
 8015558:	60b9      	str	r1, [r7, #8]
 801555a:	4613      	mov	r3, r2
 801555c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801555e:	68bb      	ldr	r3, [r7, #8]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d101      	bne.n	8015568 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015564:	4b39      	ldr	r3, [pc, #228]	; (801564c <udp_bind+0xfc>)
 8015566:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d109      	bne.n	8015582 <udp_bind+0x32>
 801556e:	4b38      	ldr	r3, [pc, #224]	; (8015650 <udp_bind+0x100>)
 8015570:	f240 32b7 	movw	r2, #951	; 0x3b7
 8015574:	4937      	ldr	r1, [pc, #220]	; (8015654 <udp_bind+0x104>)
 8015576:	4838      	ldr	r0, [pc, #224]	; (8015658 <udp_bind+0x108>)
 8015578:	f008 f852 	bl	801d620 <iprintf>
 801557c:	f06f 030f 	mvn.w	r3, #15
 8015580:	e060      	b.n	8015644 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015582:	2300      	movs	r3, #0
 8015584:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015586:	4b35      	ldr	r3, [pc, #212]	; (801565c <udp_bind+0x10c>)
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	617b      	str	r3, [r7, #20]
 801558c:	e009      	b.n	80155a2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801558e:	68fa      	ldr	r2, [r7, #12]
 8015590:	697b      	ldr	r3, [r7, #20]
 8015592:	429a      	cmp	r2, r3
 8015594:	d102      	bne.n	801559c <udp_bind+0x4c>
      rebind = 1;
 8015596:	2301      	movs	r3, #1
 8015598:	74fb      	strb	r3, [r7, #19]
      break;
 801559a:	e005      	b.n	80155a8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801559c:	697b      	ldr	r3, [r7, #20]
 801559e:	68db      	ldr	r3, [r3, #12]
 80155a0:	617b      	str	r3, [r7, #20]
 80155a2:	697b      	ldr	r3, [r7, #20]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d1f2      	bne.n	801558e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80155a8:	88fb      	ldrh	r3, [r7, #6]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d109      	bne.n	80155c2 <udp_bind+0x72>
    port = udp_new_port();
 80155ae:	f7ff fe1f 	bl	80151f0 <udp_new_port>
 80155b2:	4603      	mov	r3, r0
 80155b4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80155b6:	88fb      	ldrh	r3, [r7, #6]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d12c      	bne.n	8015616 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80155bc:	f06f 0307 	mvn.w	r3, #7
 80155c0:	e040      	b.n	8015644 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80155c2:	4b26      	ldr	r3, [pc, #152]	; (801565c <udp_bind+0x10c>)
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	617b      	str	r3, [r7, #20]
 80155c8:	e022      	b.n	8015610 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80155ca:	68fa      	ldr	r2, [r7, #12]
 80155cc:	697b      	ldr	r3, [r7, #20]
 80155ce:	429a      	cmp	r2, r3
 80155d0:	d01b      	beq.n	801560a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80155d2:	697b      	ldr	r3, [r7, #20]
 80155d4:	8a5b      	ldrh	r3, [r3, #18]
 80155d6:	88fa      	ldrh	r2, [r7, #6]
 80155d8:	429a      	cmp	r2, r3
 80155da:	d116      	bne.n	801560a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80155dc:	697b      	ldr	r3, [r7, #20]
 80155de:	681a      	ldr	r2, [r3, #0]
 80155e0:	68bb      	ldr	r3, [r7, #8]
 80155e2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80155e4:	429a      	cmp	r2, r3
 80155e6:	d00d      	beq.n	8015604 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80155e8:	68bb      	ldr	r3, [r7, #8]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d00a      	beq.n	8015604 <udp_bind+0xb4>
 80155ee:	68bb      	ldr	r3, [r7, #8]
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d006      	beq.n	8015604 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80155f6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d003      	beq.n	8015604 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80155fc:	697b      	ldr	r3, [r7, #20]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d102      	bne.n	801560a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015604:	f06f 0307 	mvn.w	r3, #7
 8015608:	e01c      	b.n	8015644 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801560a:	697b      	ldr	r3, [r7, #20]
 801560c:	68db      	ldr	r3, [r3, #12]
 801560e:	617b      	str	r3, [r7, #20]
 8015610:	697b      	ldr	r3, [r7, #20]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d1d9      	bne.n	80155ca <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015616:	68bb      	ldr	r3, [r7, #8]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d002      	beq.n	8015622 <udp_bind+0xd2>
 801561c:	68bb      	ldr	r3, [r7, #8]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	e000      	b.n	8015624 <udp_bind+0xd4>
 8015622:	2300      	movs	r3, #0
 8015624:	68fa      	ldr	r2, [r7, #12]
 8015626:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	88fa      	ldrh	r2, [r7, #6]
 801562c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801562e:	7cfb      	ldrb	r3, [r7, #19]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d106      	bne.n	8015642 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015634:	4b09      	ldr	r3, [pc, #36]	; (801565c <udp_bind+0x10c>)
 8015636:	681a      	ldr	r2, [r3, #0]
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801563c:	4a07      	ldr	r2, [pc, #28]	; (801565c <udp_bind+0x10c>)
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015642:	2300      	movs	r3, #0
}
 8015644:	4618      	mov	r0, r3
 8015646:	3718      	adds	r7, #24
 8015648:	46bd      	mov	sp, r7
 801564a:	bd80      	pop	{r7, pc}
 801564c:	0802223c 	.word	0x0802223c
 8015650:	08021340 	.word	0x08021340
 8015654:	08021608 	.word	0x08021608
 8015658:	08021394 	.word	0x08021394
 801565c:	20011414 	.word	0x20011414

08015660 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015660:	b580      	push	{r7, lr}
 8015662:	b086      	sub	sp, #24
 8015664:	af00      	add	r7, sp, #0
 8015666:	60f8      	str	r0, [r7, #12]
 8015668:	60b9      	str	r1, [r7, #8]
 801566a:	4613      	mov	r3, r2
 801566c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d109      	bne.n	8015688 <udp_connect+0x28>
 8015674:	4b2c      	ldr	r3, [pc, #176]	; (8015728 <udp_connect+0xc8>)
 8015676:	f240 4235 	movw	r2, #1077	; 0x435
 801567a:	492c      	ldr	r1, [pc, #176]	; (801572c <udp_connect+0xcc>)
 801567c:	482c      	ldr	r0, [pc, #176]	; (8015730 <udp_connect+0xd0>)
 801567e:	f007 ffcf 	bl	801d620 <iprintf>
 8015682:	f06f 030f 	mvn.w	r3, #15
 8015686:	e04b      	b.n	8015720 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8015688:	68bb      	ldr	r3, [r7, #8]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d109      	bne.n	80156a2 <udp_connect+0x42>
 801568e:	4b26      	ldr	r3, [pc, #152]	; (8015728 <udp_connect+0xc8>)
 8015690:	f240 4236 	movw	r2, #1078	; 0x436
 8015694:	4927      	ldr	r1, [pc, #156]	; (8015734 <udp_connect+0xd4>)
 8015696:	4826      	ldr	r0, [pc, #152]	; (8015730 <udp_connect+0xd0>)
 8015698:	f007 ffc2 	bl	801d620 <iprintf>
 801569c:	f06f 030f 	mvn.w	r3, #15
 80156a0:	e03e      	b.n	8015720 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	8a5b      	ldrh	r3, [r3, #18]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d10f      	bne.n	80156ca <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80156aa:	68f9      	ldr	r1, [r7, #12]
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	8a5b      	ldrh	r3, [r3, #18]
 80156b0:	461a      	mov	r2, r3
 80156b2:	68f8      	ldr	r0, [r7, #12]
 80156b4:	f7ff ff4c 	bl	8015550 <udp_bind>
 80156b8:	4603      	mov	r3, r0
 80156ba:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80156bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d002      	beq.n	80156ca <udp_connect+0x6a>
      return err;
 80156c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80156c8:	e02a      	b.n	8015720 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80156ca:	68bb      	ldr	r3, [r7, #8]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d002      	beq.n	80156d6 <udp_connect+0x76>
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	e000      	b.n	80156d8 <udp_connect+0x78>
 80156d6:	2300      	movs	r3, #0
 80156d8:	68fa      	ldr	r2, [r7, #12]
 80156da:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	88fa      	ldrh	r2, [r7, #6]
 80156e0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	7c1b      	ldrb	r3, [r3, #16]
 80156e6:	f043 0304 	orr.w	r3, r3, #4
 80156ea:	b2da      	uxtb	r2, r3
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80156f0:	4b11      	ldr	r3, [pc, #68]	; (8015738 <udp_connect+0xd8>)
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	617b      	str	r3, [r7, #20]
 80156f6:	e008      	b.n	801570a <udp_connect+0xaa>
    if (pcb == ipcb) {
 80156f8:	68fa      	ldr	r2, [r7, #12]
 80156fa:	697b      	ldr	r3, [r7, #20]
 80156fc:	429a      	cmp	r2, r3
 80156fe:	d101      	bne.n	8015704 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8015700:	2300      	movs	r3, #0
 8015702:	e00d      	b.n	8015720 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015704:	697b      	ldr	r3, [r7, #20]
 8015706:	68db      	ldr	r3, [r3, #12]
 8015708:	617b      	str	r3, [r7, #20]
 801570a:	697b      	ldr	r3, [r7, #20]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d1f3      	bne.n	80156f8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8015710:	4b09      	ldr	r3, [pc, #36]	; (8015738 <udp_connect+0xd8>)
 8015712:	681a      	ldr	r2, [r3, #0]
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8015718:	4a07      	ldr	r2, [pc, #28]	; (8015738 <udp_connect+0xd8>)
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801571e:	2300      	movs	r3, #0
}
 8015720:	4618      	mov	r0, r3
 8015722:	3718      	adds	r7, #24
 8015724:	46bd      	mov	sp, r7
 8015726:	bd80      	pop	{r7, pc}
 8015728:	08021340 	.word	0x08021340
 801572c:	08021620 	.word	0x08021620
 8015730:	08021394 	.word	0x08021394
 8015734:	0802163c 	.word	0x0802163c
 8015738:	20011414 	.word	0x20011414

0801573c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801573c:	b580      	push	{r7, lr}
 801573e:	b084      	sub	sp, #16
 8015740:	af00      	add	r7, sp, #0
 8015742:	60f8      	str	r0, [r7, #12]
 8015744:	60b9      	str	r1, [r7, #8]
 8015746:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d107      	bne.n	801575e <udp_recv+0x22>
 801574e:	4b08      	ldr	r3, [pc, #32]	; (8015770 <udp_recv+0x34>)
 8015750:	f240 428a 	movw	r2, #1162	; 0x48a
 8015754:	4907      	ldr	r1, [pc, #28]	; (8015774 <udp_recv+0x38>)
 8015756:	4808      	ldr	r0, [pc, #32]	; (8015778 <udp_recv+0x3c>)
 8015758:	f007 ff62 	bl	801d620 <iprintf>
 801575c:	e005      	b.n	801576a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	68ba      	ldr	r2, [r7, #8]
 8015762:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	687a      	ldr	r2, [r7, #4]
 8015768:	61da      	str	r2, [r3, #28]
}
 801576a:	3710      	adds	r7, #16
 801576c:	46bd      	mov	sp, r7
 801576e:	bd80      	pop	{r7, pc}
 8015770:	08021340 	.word	0x08021340
 8015774:	08021674 	.word	0x08021674
 8015778:	08021394 	.word	0x08021394

0801577c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801577c:	b580      	push	{r7, lr}
 801577e:	b084      	sub	sp, #16
 8015780:	af00      	add	r7, sp, #0
 8015782:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d107      	bne.n	801579a <udp_remove+0x1e>
 801578a:	4b19      	ldr	r3, [pc, #100]	; (80157f0 <udp_remove+0x74>)
 801578c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015790:	4918      	ldr	r1, [pc, #96]	; (80157f4 <udp_remove+0x78>)
 8015792:	4819      	ldr	r0, [pc, #100]	; (80157f8 <udp_remove+0x7c>)
 8015794:	f007 ff44 	bl	801d620 <iprintf>
 8015798:	e026      	b.n	80157e8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801579a:	4b18      	ldr	r3, [pc, #96]	; (80157fc <udp_remove+0x80>)
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	687a      	ldr	r2, [r7, #4]
 80157a0:	429a      	cmp	r2, r3
 80157a2:	d105      	bne.n	80157b0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80157a4:	4b15      	ldr	r3, [pc, #84]	; (80157fc <udp_remove+0x80>)
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	68db      	ldr	r3, [r3, #12]
 80157aa:	4a14      	ldr	r2, [pc, #80]	; (80157fc <udp_remove+0x80>)
 80157ac:	6013      	str	r3, [r2, #0]
 80157ae:	e017      	b.n	80157e0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80157b0:	4b12      	ldr	r3, [pc, #72]	; (80157fc <udp_remove+0x80>)
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	60fb      	str	r3, [r7, #12]
 80157b6:	e010      	b.n	80157da <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	68db      	ldr	r3, [r3, #12]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d009      	beq.n	80157d4 <udp_remove+0x58>
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	68db      	ldr	r3, [r3, #12]
 80157c4:	687a      	ldr	r2, [r7, #4]
 80157c6:	429a      	cmp	r2, r3
 80157c8:	d104      	bne.n	80157d4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	68da      	ldr	r2, [r3, #12]
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	60da      	str	r2, [r3, #12]
        break;
 80157d2:	e005      	b.n	80157e0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	68db      	ldr	r3, [r3, #12]
 80157d8:	60fb      	str	r3, [r7, #12]
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d1eb      	bne.n	80157b8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80157e0:	6879      	ldr	r1, [r7, #4]
 80157e2:	2000      	movs	r0, #0
 80157e4:	f7f8 f9fe 	bl	800dbe4 <memp_free>
}
 80157e8:	3710      	adds	r7, #16
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bd80      	pop	{r7, pc}
 80157ee:	bf00      	nop
 80157f0:	08021340 	.word	0x08021340
 80157f4:	0802168c 	.word	0x0802168c
 80157f8:	08021394 	.word	0x08021394
 80157fc:	20011414 	.word	0x20011414

08015800 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b082      	sub	sp, #8
 8015804:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015806:	2000      	movs	r0, #0
 8015808:	f7f8 f976 	bl	800daf8 <memp_malloc>
 801580c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d007      	beq.n	8015824 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015814:	2220      	movs	r2, #32
 8015816:	2100      	movs	r1, #0
 8015818:	6878      	ldr	r0, [r7, #4]
 801581a:	f007 fef9 	bl	801d610 <memset>
    pcb->ttl = UDP_TTL;
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	22ff      	movs	r2, #255	; 0xff
 8015822:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015824:	687b      	ldr	r3, [r7, #4]
}
 8015826:	4618      	mov	r0, r3
 8015828:	3708      	adds	r7, #8
 801582a:	46bd      	mov	sp, r7
 801582c:	bd80      	pop	{r7, pc}

0801582e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801582e:	b580      	push	{r7, lr}
 8015830:	b084      	sub	sp, #16
 8015832:	af00      	add	r7, sp, #0
 8015834:	4603      	mov	r3, r0
 8015836:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8015838:	f7ff ffe2 	bl	8015800 <udp_new>
 801583c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801583e:	68fb      	ldr	r3, [r7, #12]
}
 8015840:	4618      	mov	r0, r3
 8015842:	3710      	adds	r7, #16
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}

08015848 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015848:	b480      	push	{r7}
 801584a:	b085      	sub	sp, #20
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
 8015850:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d01e      	beq.n	8015896 <udp_netif_ip_addr_changed+0x4e>
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d01a      	beq.n	8015896 <udp_netif_ip_addr_changed+0x4e>
 8015860:	683b      	ldr	r3, [r7, #0]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d017      	beq.n	8015896 <udp_netif_ip_addr_changed+0x4e>
 8015866:	683b      	ldr	r3, [r7, #0]
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d013      	beq.n	8015896 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801586e:	4b0d      	ldr	r3, [pc, #52]	; (80158a4 <udp_netif_ip_addr_changed+0x5c>)
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	60fb      	str	r3, [r7, #12]
 8015874:	e00c      	b.n	8015890 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	681a      	ldr	r2, [r3, #0]
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	429a      	cmp	r2, r3
 8015880:	d103      	bne.n	801588a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015882:	683b      	ldr	r3, [r7, #0]
 8015884:	681a      	ldr	r2, [r3, #0]
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	68db      	ldr	r3, [r3, #12]
 801588e:	60fb      	str	r3, [r7, #12]
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d1ef      	bne.n	8015876 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015896:	bf00      	nop
 8015898:	3714      	adds	r7, #20
 801589a:	46bd      	mov	sp, r7
 801589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a0:	4770      	bx	lr
 80158a2:	bf00      	nop
 80158a4:	20011414 	.word	0x20011414

080158a8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b082      	sub	sp, #8
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80158b0:	4915      	ldr	r1, [pc, #84]	; (8015908 <etharp_free_entry+0x60>)
 80158b2:	687a      	ldr	r2, [r7, #4]
 80158b4:	4613      	mov	r3, r2
 80158b6:	005b      	lsls	r3, r3, #1
 80158b8:	4413      	add	r3, r2
 80158ba:	00db      	lsls	r3, r3, #3
 80158bc:	440b      	add	r3, r1
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d013      	beq.n	80158ec <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80158c4:	4910      	ldr	r1, [pc, #64]	; (8015908 <etharp_free_entry+0x60>)
 80158c6:	687a      	ldr	r2, [r7, #4]
 80158c8:	4613      	mov	r3, r2
 80158ca:	005b      	lsls	r3, r3, #1
 80158cc:	4413      	add	r3, r2
 80158ce:	00db      	lsls	r3, r3, #3
 80158d0:	440b      	add	r3, r1
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	4618      	mov	r0, r3
 80158d6:	f7f9 f829 	bl	800e92c <pbuf_free>
    arp_table[i].q = NULL;
 80158da:	490b      	ldr	r1, [pc, #44]	; (8015908 <etharp_free_entry+0x60>)
 80158dc:	687a      	ldr	r2, [r7, #4]
 80158de:	4613      	mov	r3, r2
 80158e0:	005b      	lsls	r3, r3, #1
 80158e2:	4413      	add	r3, r2
 80158e4:	00db      	lsls	r3, r3, #3
 80158e6:	440b      	add	r3, r1
 80158e8:	2200      	movs	r2, #0
 80158ea:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80158ec:	4906      	ldr	r1, [pc, #24]	; (8015908 <etharp_free_entry+0x60>)
 80158ee:	687a      	ldr	r2, [r7, #4]
 80158f0:	4613      	mov	r3, r2
 80158f2:	005b      	lsls	r3, r3, #1
 80158f4:	4413      	add	r3, r2
 80158f6:	00db      	lsls	r3, r3, #3
 80158f8:	440b      	add	r3, r1
 80158fa:	3314      	adds	r3, #20
 80158fc:	2200      	movs	r2, #0
 80158fe:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015900:	bf00      	nop
 8015902:	3708      	adds	r7, #8
 8015904:	46bd      	mov	sp, r7
 8015906:	bd80      	pop	{r7, pc}
 8015908:	20011418 	.word	0x20011418

0801590c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b082      	sub	sp, #8
 8015910:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015912:	2300      	movs	r3, #0
 8015914:	607b      	str	r3, [r7, #4]
 8015916:	e096      	b.n	8015a46 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015918:	494f      	ldr	r1, [pc, #316]	; (8015a58 <etharp_tmr+0x14c>)
 801591a:	687a      	ldr	r2, [r7, #4]
 801591c:	4613      	mov	r3, r2
 801591e:	005b      	lsls	r3, r3, #1
 8015920:	4413      	add	r3, r2
 8015922:	00db      	lsls	r3, r3, #3
 8015924:	440b      	add	r3, r1
 8015926:	3314      	adds	r3, #20
 8015928:	781b      	ldrb	r3, [r3, #0]
 801592a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801592c:	78fb      	ldrb	r3, [r7, #3]
 801592e:	2b00      	cmp	r3, #0
 8015930:	f000 8086 	beq.w	8015a40 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015934:	4948      	ldr	r1, [pc, #288]	; (8015a58 <etharp_tmr+0x14c>)
 8015936:	687a      	ldr	r2, [r7, #4]
 8015938:	4613      	mov	r3, r2
 801593a:	005b      	lsls	r3, r3, #1
 801593c:	4413      	add	r3, r2
 801593e:	00db      	lsls	r3, r3, #3
 8015940:	440b      	add	r3, r1
 8015942:	3312      	adds	r3, #18
 8015944:	881b      	ldrh	r3, [r3, #0]
 8015946:	3301      	adds	r3, #1
 8015948:	b298      	uxth	r0, r3
 801594a:	4943      	ldr	r1, [pc, #268]	; (8015a58 <etharp_tmr+0x14c>)
 801594c:	687a      	ldr	r2, [r7, #4]
 801594e:	4613      	mov	r3, r2
 8015950:	005b      	lsls	r3, r3, #1
 8015952:	4413      	add	r3, r2
 8015954:	00db      	lsls	r3, r3, #3
 8015956:	440b      	add	r3, r1
 8015958:	3312      	adds	r3, #18
 801595a:	4602      	mov	r2, r0
 801595c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801595e:	493e      	ldr	r1, [pc, #248]	; (8015a58 <etharp_tmr+0x14c>)
 8015960:	687a      	ldr	r2, [r7, #4]
 8015962:	4613      	mov	r3, r2
 8015964:	005b      	lsls	r3, r3, #1
 8015966:	4413      	add	r3, r2
 8015968:	00db      	lsls	r3, r3, #3
 801596a:	440b      	add	r3, r1
 801596c:	3312      	adds	r3, #18
 801596e:	881b      	ldrh	r3, [r3, #0]
 8015970:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015974:	d215      	bcs.n	80159a2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015976:	4938      	ldr	r1, [pc, #224]	; (8015a58 <etharp_tmr+0x14c>)
 8015978:	687a      	ldr	r2, [r7, #4]
 801597a:	4613      	mov	r3, r2
 801597c:	005b      	lsls	r3, r3, #1
 801597e:	4413      	add	r3, r2
 8015980:	00db      	lsls	r3, r3, #3
 8015982:	440b      	add	r3, r1
 8015984:	3314      	adds	r3, #20
 8015986:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015988:	2b01      	cmp	r3, #1
 801598a:	d10e      	bne.n	80159aa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801598c:	4932      	ldr	r1, [pc, #200]	; (8015a58 <etharp_tmr+0x14c>)
 801598e:	687a      	ldr	r2, [r7, #4]
 8015990:	4613      	mov	r3, r2
 8015992:	005b      	lsls	r3, r3, #1
 8015994:	4413      	add	r3, r2
 8015996:	00db      	lsls	r3, r3, #3
 8015998:	440b      	add	r3, r1
 801599a:	3312      	adds	r3, #18
 801599c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801599e:	2b04      	cmp	r3, #4
 80159a0:	d903      	bls.n	80159aa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80159a2:	6878      	ldr	r0, [r7, #4]
 80159a4:	f7ff ff80 	bl	80158a8 <etharp_free_entry>
 80159a8:	e04a      	b.n	8015a40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80159aa:	492b      	ldr	r1, [pc, #172]	; (8015a58 <etharp_tmr+0x14c>)
 80159ac:	687a      	ldr	r2, [r7, #4]
 80159ae:	4613      	mov	r3, r2
 80159b0:	005b      	lsls	r3, r3, #1
 80159b2:	4413      	add	r3, r2
 80159b4:	00db      	lsls	r3, r3, #3
 80159b6:	440b      	add	r3, r1
 80159b8:	3314      	adds	r3, #20
 80159ba:	781b      	ldrb	r3, [r3, #0]
 80159bc:	2b03      	cmp	r3, #3
 80159be:	d10a      	bne.n	80159d6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80159c0:	4925      	ldr	r1, [pc, #148]	; (8015a58 <etharp_tmr+0x14c>)
 80159c2:	687a      	ldr	r2, [r7, #4]
 80159c4:	4613      	mov	r3, r2
 80159c6:	005b      	lsls	r3, r3, #1
 80159c8:	4413      	add	r3, r2
 80159ca:	00db      	lsls	r3, r3, #3
 80159cc:	440b      	add	r3, r1
 80159ce:	3314      	adds	r3, #20
 80159d0:	2204      	movs	r2, #4
 80159d2:	701a      	strb	r2, [r3, #0]
 80159d4:	e034      	b.n	8015a40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80159d6:	4920      	ldr	r1, [pc, #128]	; (8015a58 <etharp_tmr+0x14c>)
 80159d8:	687a      	ldr	r2, [r7, #4]
 80159da:	4613      	mov	r3, r2
 80159dc:	005b      	lsls	r3, r3, #1
 80159de:	4413      	add	r3, r2
 80159e0:	00db      	lsls	r3, r3, #3
 80159e2:	440b      	add	r3, r1
 80159e4:	3314      	adds	r3, #20
 80159e6:	781b      	ldrb	r3, [r3, #0]
 80159e8:	2b04      	cmp	r3, #4
 80159ea:	d10a      	bne.n	8015a02 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80159ec:	491a      	ldr	r1, [pc, #104]	; (8015a58 <etharp_tmr+0x14c>)
 80159ee:	687a      	ldr	r2, [r7, #4]
 80159f0:	4613      	mov	r3, r2
 80159f2:	005b      	lsls	r3, r3, #1
 80159f4:	4413      	add	r3, r2
 80159f6:	00db      	lsls	r3, r3, #3
 80159f8:	440b      	add	r3, r1
 80159fa:	3314      	adds	r3, #20
 80159fc:	2202      	movs	r2, #2
 80159fe:	701a      	strb	r2, [r3, #0]
 8015a00:	e01e      	b.n	8015a40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015a02:	4915      	ldr	r1, [pc, #84]	; (8015a58 <etharp_tmr+0x14c>)
 8015a04:	687a      	ldr	r2, [r7, #4]
 8015a06:	4613      	mov	r3, r2
 8015a08:	005b      	lsls	r3, r3, #1
 8015a0a:	4413      	add	r3, r2
 8015a0c:	00db      	lsls	r3, r3, #3
 8015a0e:	440b      	add	r3, r1
 8015a10:	3314      	adds	r3, #20
 8015a12:	781b      	ldrb	r3, [r3, #0]
 8015a14:	2b01      	cmp	r3, #1
 8015a16:	d113      	bne.n	8015a40 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015a18:	490f      	ldr	r1, [pc, #60]	; (8015a58 <etharp_tmr+0x14c>)
 8015a1a:	687a      	ldr	r2, [r7, #4]
 8015a1c:	4613      	mov	r3, r2
 8015a1e:	005b      	lsls	r3, r3, #1
 8015a20:	4413      	add	r3, r2
 8015a22:	00db      	lsls	r3, r3, #3
 8015a24:	440b      	add	r3, r1
 8015a26:	3308      	adds	r3, #8
 8015a28:	6818      	ldr	r0, [r3, #0]
 8015a2a:	687a      	ldr	r2, [r7, #4]
 8015a2c:	4613      	mov	r3, r2
 8015a2e:	005b      	lsls	r3, r3, #1
 8015a30:	4413      	add	r3, r2
 8015a32:	00db      	lsls	r3, r3, #3
 8015a34:	4a08      	ldr	r2, [pc, #32]	; (8015a58 <etharp_tmr+0x14c>)
 8015a36:	4413      	add	r3, r2
 8015a38:	3304      	adds	r3, #4
 8015a3a:	4619      	mov	r1, r3
 8015a3c:	f000 fe6e 	bl	801671c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	3301      	adds	r3, #1
 8015a44:	607b      	str	r3, [r7, #4]
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	2b09      	cmp	r3, #9
 8015a4a:	f77f af65 	ble.w	8015918 <etharp_tmr+0xc>
      }
    }
  }
}
 8015a4e:	bf00      	nop
 8015a50:	bf00      	nop
 8015a52:	3708      	adds	r7, #8
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd80      	pop	{r7, pc}
 8015a58:	20011418 	.word	0x20011418

08015a5c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b08a      	sub	sp, #40	; 0x28
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	60f8      	str	r0, [r7, #12]
 8015a64:	460b      	mov	r3, r1
 8015a66:	607a      	str	r2, [r7, #4]
 8015a68:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015a6a:	230a      	movs	r3, #10
 8015a6c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015a6e:	230a      	movs	r3, #10
 8015a70:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015a72:	230a      	movs	r3, #10
 8015a74:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015a76:	2300      	movs	r3, #0
 8015a78:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015a7a:	230a      	movs	r3, #10
 8015a7c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	83bb      	strh	r3, [r7, #28]
 8015a82:	2300      	movs	r3, #0
 8015a84:	837b      	strh	r3, [r7, #26]
 8015a86:	2300      	movs	r3, #0
 8015a88:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	843b      	strh	r3, [r7, #32]
 8015a8e:	e0ae      	b.n	8015bee <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015a90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a94:	49a6      	ldr	r1, [pc, #664]	; (8015d30 <etharp_find_entry+0x2d4>)
 8015a96:	4613      	mov	r3, r2
 8015a98:	005b      	lsls	r3, r3, #1
 8015a9a:	4413      	add	r3, r2
 8015a9c:	00db      	lsls	r3, r3, #3
 8015a9e:	440b      	add	r3, r1
 8015aa0:	3314      	adds	r3, #20
 8015aa2:	781b      	ldrb	r3, [r3, #0]
 8015aa4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015aa6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015aaa:	2b0a      	cmp	r3, #10
 8015aac:	d105      	bne.n	8015aba <etharp_find_entry+0x5e>
 8015aae:	7dfb      	ldrb	r3, [r7, #23]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d102      	bne.n	8015aba <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015ab4:	8c3b      	ldrh	r3, [r7, #32]
 8015ab6:	847b      	strh	r3, [r7, #34]	; 0x22
 8015ab8:	e095      	b.n	8015be6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015aba:	7dfb      	ldrb	r3, [r7, #23]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	f000 8092 	beq.w	8015be6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015ac2:	7dfb      	ldrb	r3, [r7, #23]
 8015ac4:	2b01      	cmp	r3, #1
 8015ac6:	d009      	beq.n	8015adc <etharp_find_entry+0x80>
 8015ac8:	7dfb      	ldrb	r3, [r7, #23]
 8015aca:	2b01      	cmp	r3, #1
 8015acc:	d806      	bhi.n	8015adc <etharp_find_entry+0x80>
 8015ace:	4b99      	ldr	r3, [pc, #612]	; (8015d34 <etharp_find_entry+0x2d8>)
 8015ad0:	f240 1223 	movw	r2, #291	; 0x123
 8015ad4:	4998      	ldr	r1, [pc, #608]	; (8015d38 <etharp_find_entry+0x2dc>)
 8015ad6:	4899      	ldr	r0, [pc, #612]	; (8015d3c <etharp_find_entry+0x2e0>)
 8015ad8:	f007 fda2 	bl	801d620 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d020      	beq.n	8015b24 <etharp_find_entry+0xc8>
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	6819      	ldr	r1, [r3, #0]
 8015ae6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015aea:	4891      	ldr	r0, [pc, #580]	; (8015d30 <etharp_find_entry+0x2d4>)
 8015aec:	4613      	mov	r3, r2
 8015aee:	005b      	lsls	r3, r3, #1
 8015af0:	4413      	add	r3, r2
 8015af2:	00db      	lsls	r3, r3, #3
 8015af4:	4403      	add	r3, r0
 8015af6:	3304      	adds	r3, #4
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	4299      	cmp	r1, r3
 8015afc:	d112      	bne.n	8015b24 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d00c      	beq.n	8015b1e <etharp_find_entry+0xc2>
 8015b04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b08:	4989      	ldr	r1, [pc, #548]	; (8015d30 <etharp_find_entry+0x2d4>)
 8015b0a:	4613      	mov	r3, r2
 8015b0c:	005b      	lsls	r3, r3, #1
 8015b0e:	4413      	add	r3, r2
 8015b10:	00db      	lsls	r3, r3, #3
 8015b12:	440b      	add	r3, r1
 8015b14:	3308      	adds	r3, #8
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	687a      	ldr	r2, [r7, #4]
 8015b1a:	429a      	cmp	r2, r3
 8015b1c:	d102      	bne.n	8015b24 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015b1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015b22:	e100      	b.n	8015d26 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015b24:	7dfb      	ldrb	r3, [r7, #23]
 8015b26:	2b01      	cmp	r3, #1
 8015b28:	d140      	bne.n	8015bac <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015b2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b2e:	4980      	ldr	r1, [pc, #512]	; (8015d30 <etharp_find_entry+0x2d4>)
 8015b30:	4613      	mov	r3, r2
 8015b32:	005b      	lsls	r3, r3, #1
 8015b34:	4413      	add	r3, r2
 8015b36:	00db      	lsls	r3, r3, #3
 8015b38:	440b      	add	r3, r1
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d01a      	beq.n	8015b76 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015b40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b44:	497a      	ldr	r1, [pc, #488]	; (8015d30 <etharp_find_entry+0x2d4>)
 8015b46:	4613      	mov	r3, r2
 8015b48:	005b      	lsls	r3, r3, #1
 8015b4a:	4413      	add	r3, r2
 8015b4c:	00db      	lsls	r3, r3, #3
 8015b4e:	440b      	add	r3, r1
 8015b50:	3312      	adds	r3, #18
 8015b52:	881b      	ldrh	r3, [r3, #0]
 8015b54:	8bba      	ldrh	r2, [r7, #28]
 8015b56:	429a      	cmp	r2, r3
 8015b58:	d845      	bhi.n	8015be6 <etharp_find_entry+0x18a>
            old_queue = i;
 8015b5a:	8c3b      	ldrh	r3, [r7, #32]
 8015b5c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015b5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b62:	4973      	ldr	r1, [pc, #460]	; (8015d30 <etharp_find_entry+0x2d4>)
 8015b64:	4613      	mov	r3, r2
 8015b66:	005b      	lsls	r3, r3, #1
 8015b68:	4413      	add	r3, r2
 8015b6a:	00db      	lsls	r3, r3, #3
 8015b6c:	440b      	add	r3, r1
 8015b6e:	3312      	adds	r3, #18
 8015b70:	881b      	ldrh	r3, [r3, #0]
 8015b72:	83bb      	strh	r3, [r7, #28]
 8015b74:	e037      	b.n	8015be6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015b76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b7a:	496d      	ldr	r1, [pc, #436]	; (8015d30 <etharp_find_entry+0x2d4>)
 8015b7c:	4613      	mov	r3, r2
 8015b7e:	005b      	lsls	r3, r3, #1
 8015b80:	4413      	add	r3, r2
 8015b82:	00db      	lsls	r3, r3, #3
 8015b84:	440b      	add	r3, r1
 8015b86:	3312      	adds	r3, #18
 8015b88:	881b      	ldrh	r3, [r3, #0]
 8015b8a:	8b7a      	ldrh	r2, [r7, #26]
 8015b8c:	429a      	cmp	r2, r3
 8015b8e:	d82a      	bhi.n	8015be6 <etharp_find_entry+0x18a>
            old_pending = i;
 8015b90:	8c3b      	ldrh	r3, [r7, #32]
 8015b92:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015b94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b98:	4965      	ldr	r1, [pc, #404]	; (8015d30 <etharp_find_entry+0x2d4>)
 8015b9a:	4613      	mov	r3, r2
 8015b9c:	005b      	lsls	r3, r3, #1
 8015b9e:	4413      	add	r3, r2
 8015ba0:	00db      	lsls	r3, r3, #3
 8015ba2:	440b      	add	r3, r1
 8015ba4:	3312      	adds	r3, #18
 8015ba6:	881b      	ldrh	r3, [r3, #0]
 8015ba8:	837b      	strh	r3, [r7, #26]
 8015baa:	e01c      	b.n	8015be6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015bac:	7dfb      	ldrb	r3, [r7, #23]
 8015bae:	2b01      	cmp	r3, #1
 8015bb0:	d919      	bls.n	8015be6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015bb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bb6:	495e      	ldr	r1, [pc, #376]	; (8015d30 <etharp_find_entry+0x2d4>)
 8015bb8:	4613      	mov	r3, r2
 8015bba:	005b      	lsls	r3, r3, #1
 8015bbc:	4413      	add	r3, r2
 8015bbe:	00db      	lsls	r3, r3, #3
 8015bc0:	440b      	add	r3, r1
 8015bc2:	3312      	adds	r3, #18
 8015bc4:	881b      	ldrh	r3, [r3, #0]
 8015bc6:	8b3a      	ldrh	r2, [r7, #24]
 8015bc8:	429a      	cmp	r2, r3
 8015bca:	d80c      	bhi.n	8015be6 <etharp_find_entry+0x18a>
            old_stable = i;
 8015bcc:	8c3b      	ldrh	r3, [r7, #32]
 8015bce:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015bd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bd4:	4956      	ldr	r1, [pc, #344]	; (8015d30 <etharp_find_entry+0x2d4>)
 8015bd6:	4613      	mov	r3, r2
 8015bd8:	005b      	lsls	r3, r3, #1
 8015bda:	4413      	add	r3, r2
 8015bdc:	00db      	lsls	r3, r3, #3
 8015bde:	440b      	add	r3, r1
 8015be0:	3312      	adds	r3, #18
 8015be2:	881b      	ldrh	r3, [r3, #0]
 8015be4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015be6:	8c3b      	ldrh	r3, [r7, #32]
 8015be8:	3301      	adds	r3, #1
 8015bea:	b29b      	uxth	r3, r3
 8015bec:	843b      	strh	r3, [r7, #32]
 8015bee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015bf2:	2b09      	cmp	r3, #9
 8015bf4:	f77f af4c 	ble.w	8015a90 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015bf8:	7afb      	ldrb	r3, [r7, #11]
 8015bfa:	f003 0302 	and.w	r3, r3, #2
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d108      	bne.n	8015c14 <etharp_find_entry+0x1b8>
 8015c02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015c06:	2b0a      	cmp	r3, #10
 8015c08:	d107      	bne.n	8015c1a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015c0a:	7afb      	ldrb	r3, [r7, #11]
 8015c0c:	f003 0301 	and.w	r3, r3, #1
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d102      	bne.n	8015c1a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c18:	e085      	b.n	8015d26 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015c1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015c1e:	2b09      	cmp	r3, #9
 8015c20:	dc02      	bgt.n	8015c28 <etharp_find_entry+0x1cc>
    i = empty;
 8015c22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c24:	843b      	strh	r3, [r7, #32]
 8015c26:	e039      	b.n	8015c9c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015c28:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015c2c:	2b09      	cmp	r3, #9
 8015c2e:	dc14      	bgt.n	8015c5a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c32:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015c34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c38:	493d      	ldr	r1, [pc, #244]	; (8015d30 <etharp_find_entry+0x2d4>)
 8015c3a:	4613      	mov	r3, r2
 8015c3c:	005b      	lsls	r3, r3, #1
 8015c3e:	4413      	add	r3, r2
 8015c40:	00db      	lsls	r3, r3, #3
 8015c42:	440b      	add	r3, r1
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d018      	beq.n	8015c7c <etharp_find_entry+0x220>
 8015c4a:	4b3a      	ldr	r3, [pc, #232]	; (8015d34 <etharp_find_entry+0x2d8>)
 8015c4c:	f240 126d 	movw	r2, #365	; 0x16d
 8015c50:	493b      	ldr	r1, [pc, #236]	; (8015d40 <etharp_find_entry+0x2e4>)
 8015c52:	483a      	ldr	r0, [pc, #232]	; (8015d3c <etharp_find_entry+0x2e0>)
 8015c54:	f007 fce4 	bl	801d620 <iprintf>
 8015c58:	e010      	b.n	8015c7c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015c5a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015c5e:	2b09      	cmp	r3, #9
 8015c60:	dc02      	bgt.n	8015c68 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015c62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015c64:	843b      	strh	r3, [r7, #32]
 8015c66:	e009      	b.n	8015c7c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015c68:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015c6c:	2b09      	cmp	r3, #9
 8015c6e:	dc02      	bgt.n	8015c76 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015c70:	8bfb      	ldrh	r3, [r7, #30]
 8015c72:	843b      	strh	r3, [r7, #32]
 8015c74:	e002      	b.n	8015c7c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c7a:	e054      	b.n	8015d26 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015c7c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c80:	2b09      	cmp	r3, #9
 8015c82:	dd06      	ble.n	8015c92 <etharp_find_entry+0x236>
 8015c84:	4b2b      	ldr	r3, [pc, #172]	; (8015d34 <etharp_find_entry+0x2d8>)
 8015c86:	f240 127f 	movw	r2, #383	; 0x17f
 8015c8a:	492e      	ldr	r1, [pc, #184]	; (8015d44 <etharp_find_entry+0x2e8>)
 8015c8c:	482b      	ldr	r0, [pc, #172]	; (8015d3c <etharp_find_entry+0x2e0>)
 8015c8e:	f007 fcc7 	bl	801d620 <iprintf>
    etharp_free_entry(i);
 8015c92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c96:	4618      	mov	r0, r3
 8015c98:	f7ff fe06 	bl	80158a8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015c9c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015ca0:	2b09      	cmp	r3, #9
 8015ca2:	dd06      	ble.n	8015cb2 <etharp_find_entry+0x256>
 8015ca4:	4b23      	ldr	r3, [pc, #140]	; (8015d34 <etharp_find_entry+0x2d8>)
 8015ca6:	f240 1283 	movw	r2, #387	; 0x183
 8015caa:	4926      	ldr	r1, [pc, #152]	; (8015d44 <etharp_find_entry+0x2e8>)
 8015cac:	4823      	ldr	r0, [pc, #140]	; (8015d3c <etharp_find_entry+0x2e0>)
 8015cae:	f007 fcb7 	bl	801d620 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015cb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cb6:	491e      	ldr	r1, [pc, #120]	; (8015d30 <etharp_find_entry+0x2d4>)
 8015cb8:	4613      	mov	r3, r2
 8015cba:	005b      	lsls	r3, r3, #1
 8015cbc:	4413      	add	r3, r2
 8015cbe:	00db      	lsls	r3, r3, #3
 8015cc0:	440b      	add	r3, r1
 8015cc2:	3314      	adds	r3, #20
 8015cc4:	781b      	ldrb	r3, [r3, #0]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d006      	beq.n	8015cd8 <etharp_find_entry+0x27c>
 8015cca:	4b1a      	ldr	r3, [pc, #104]	; (8015d34 <etharp_find_entry+0x2d8>)
 8015ccc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015cd0:	491d      	ldr	r1, [pc, #116]	; (8015d48 <etharp_find_entry+0x2ec>)
 8015cd2:	481a      	ldr	r0, [pc, #104]	; (8015d3c <etharp_find_entry+0x2e0>)
 8015cd4:	f007 fca4 	bl	801d620 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d00b      	beq.n	8015cf6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015cde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	6819      	ldr	r1, [r3, #0]
 8015ce6:	4812      	ldr	r0, [pc, #72]	; (8015d30 <etharp_find_entry+0x2d4>)
 8015ce8:	4613      	mov	r3, r2
 8015cea:	005b      	lsls	r3, r3, #1
 8015cec:	4413      	add	r3, r2
 8015cee:	00db      	lsls	r3, r3, #3
 8015cf0:	4403      	add	r3, r0
 8015cf2:	3304      	adds	r3, #4
 8015cf4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015cf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cfa:	490d      	ldr	r1, [pc, #52]	; (8015d30 <etharp_find_entry+0x2d4>)
 8015cfc:	4613      	mov	r3, r2
 8015cfe:	005b      	lsls	r3, r3, #1
 8015d00:	4413      	add	r3, r2
 8015d02:	00db      	lsls	r3, r3, #3
 8015d04:	440b      	add	r3, r1
 8015d06:	3312      	adds	r3, #18
 8015d08:	2200      	movs	r2, #0
 8015d0a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015d0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d10:	4907      	ldr	r1, [pc, #28]	; (8015d30 <etharp_find_entry+0x2d4>)
 8015d12:	4613      	mov	r3, r2
 8015d14:	005b      	lsls	r3, r3, #1
 8015d16:	4413      	add	r3, r2
 8015d18:	00db      	lsls	r3, r3, #3
 8015d1a:	440b      	add	r3, r1
 8015d1c:	3308      	adds	r3, #8
 8015d1e:	687a      	ldr	r2, [r7, #4]
 8015d20:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015d22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015d26:	4618      	mov	r0, r3
 8015d28:	3728      	adds	r7, #40	; 0x28
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	bd80      	pop	{r7, pc}
 8015d2e:	bf00      	nop
 8015d30:	20011418 	.word	0x20011418
 8015d34:	080216a4 	.word	0x080216a4
 8015d38:	080216dc 	.word	0x080216dc
 8015d3c:	0802171c 	.word	0x0802171c
 8015d40:	08021744 	.word	0x08021744
 8015d44:	0802175c 	.word	0x0802175c
 8015d48:	08021770 	.word	0x08021770

08015d4c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015d4c:	b580      	push	{r7, lr}
 8015d4e:	b088      	sub	sp, #32
 8015d50:	af02      	add	r7, sp, #8
 8015d52:	60f8      	str	r0, [r7, #12]
 8015d54:	60b9      	str	r1, [r7, #8]
 8015d56:	607a      	str	r2, [r7, #4]
 8015d58:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015d60:	2b06      	cmp	r3, #6
 8015d62:	d006      	beq.n	8015d72 <etharp_update_arp_entry+0x26>
 8015d64:	4b48      	ldr	r3, [pc, #288]	; (8015e88 <etharp_update_arp_entry+0x13c>)
 8015d66:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015d6a:	4948      	ldr	r1, [pc, #288]	; (8015e8c <etharp_update_arp_entry+0x140>)
 8015d6c:	4848      	ldr	r0, [pc, #288]	; (8015e90 <etharp_update_arp_entry+0x144>)
 8015d6e:	f007 fc57 	bl	801d620 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015d72:	68bb      	ldr	r3, [r7, #8]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d012      	beq.n	8015d9e <etharp_update_arp_entry+0x52>
 8015d78:	68bb      	ldr	r3, [r7, #8]
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d00e      	beq.n	8015d9e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015d80:	68bb      	ldr	r3, [r7, #8]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	68f9      	ldr	r1, [r7, #12]
 8015d86:	4618      	mov	r0, r3
 8015d88:	f001 f8fe 	bl	8016f88 <ip4_addr_isbroadcast_u32>
 8015d8c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d105      	bne.n	8015d9e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015d92:	68bb      	ldr	r3, [r7, #8]
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015d9a:	2be0      	cmp	r3, #224	; 0xe0
 8015d9c:	d102      	bne.n	8015da4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015d9e:	f06f 030f 	mvn.w	r3, #15
 8015da2:	e06c      	b.n	8015e7e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015da4:	78fb      	ldrb	r3, [r7, #3]
 8015da6:	68fa      	ldr	r2, [r7, #12]
 8015da8:	4619      	mov	r1, r3
 8015daa:	68b8      	ldr	r0, [r7, #8]
 8015dac:	f7ff fe56 	bl	8015a5c <etharp_find_entry>
 8015db0:	4603      	mov	r3, r0
 8015db2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015db4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	da02      	bge.n	8015dc2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015dbc:	8afb      	ldrh	r3, [r7, #22]
 8015dbe:	b25b      	sxtb	r3, r3
 8015dc0:	e05d      	b.n	8015e7e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015dc2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015dc6:	4933      	ldr	r1, [pc, #204]	; (8015e94 <etharp_update_arp_entry+0x148>)
 8015dc8:	4613      	mov	r3, r2
 8015dca:	005b      	lsls	r3, r3, #1
 8015dcc:	4413      	add	r3, r2
 8015dce:	00db      	lsls	r3, r3, #3
 8015dd0:	440b      	add	r3, r1
 8015dd2:	3314      	adds	r3, #20
 8015dd4:	2202      	movs	r2, #2
 8015dd6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015dd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ddc:	492d      	ldr	r1, [pc, #180]	; (8015e94 <etharp_update_arp_entry+0x148>)
 8015dde:	4613      	mov	r3, r2
 8015de0:	005b      	lsls	r3, r3, #1
 8015de2:	4413      	add	r3, r2
 8015de4:	00db      	lsls	r3, r3, #3
 8015de6:	440b      	add	r3, r1
 8015de8:	3308      	adds	r3, #8
 8015dea:	68fa      	ldr	r2, [r7, #12]
 8015dec:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015dee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015df2:	4613      	mov	r3, r2
 8015df4:	005b      	lsls	r3, r3, #1
 8015df6:	4413      	add	r3, r2
 8015df8:	00db      	lsls	r3, r3, #3
 8015dfa:	3308      	adds	r3, #8
 8015dfc:	4a25      	ldr	r2, [pc, #148]	; (8015e94 <etharp_update_arp_entry+0x148>)
 8015dfe:	4413      	add	r3, r2
 8015e00:	3304      	adds	r3, #4
 8015e02:	2206      	movs	r2, #6
 8015e04:	6879      	ldr	r1, [r7, #4]
 8015e06:	4618      	mov	r0, r3
 8015e08:	f007 fbf4 	bl	801d5f4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015e0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e10:	4920      	ldr	r1, [pc, #128]	; (8015e94 <etharp_update_arp_entry+0x148>)
 8015e12:	4613      	mov	r3, r2
 8015e14:	005b      	lsls	r3, r3, #1
 8015e16:	4413      	add	r3, r2
 8015e18:	00db      	lsls	r3, r3, #3
 8015e1a:	440b      	add	r3, r1
 8015e1c:	3312      	adds	r3, #18
 8015e1e:	2200      	movs	r2, #0
 8015e20:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015e22:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e26:	491b      	ldr	r1, [pc, #108]	; (8015e94 <etharp_update_arp_entry+0x148>)
 8015e28:	4613      	mov	r3, r2
 8015e2a:	005b      	lsls	r3, r3, #1
 8015e2c:	4413      	add	r3, r2
 8015e2e:	00db      	lsls	r3, r3, #3
 8015e30:	440b      	add	r3, r1
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d021      	beq.n	8015e7c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015e38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e3c:	4915      	ldr	r1, [pc, #84]	; (8015e94 <etharp_update_arp_entry+0x148>)
 8015e3e:	4613      	mov	r3, r2
 8015e40:	005b      	lsls	r3, r3, #1
 8015e42:	4413      	add	r3, r2
 8015e44:	00db      	lsls	r3, r3, #3
 8015e46:	440b      	add	r3, r1
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015e4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e50:	4910      	ldr	r1, [pc, #64]	; (8015e94 <etharp_update_arp_entry+0x148>)
 8015e52:	4613      	mov	r3, r2
 8015e54:	005b      	lsls	r3, r3, #1
 8015e56:	4413      	add	r3, r2
 8015e58:	00db      	lsls	r3, r3, #3
 8015e5a:	440b      	add	r3, r1
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015e66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015e6a:	9300      	str	r3, [sp, #0]
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	6939      	ldr	r1, [r7, #16]
 8015e70:	68f8      	ldr	r0, [r7, #12]
 8015e72:	f002 f8c1 	bl	8017ff8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015e76:	6938      	ldr	r0, [r7, #16]
 8015e78:	f7f8 fd58 	bl	800e92c <pbuf_free>
  }
  return ERR_OK;
 8015e7c:	2300      	movs	r3, #0
}
 8015e7e:	4618      	mov	r0, r3
 8015e80:	3718      	adds	r7, #24
 8015e82:	46bd      	mov	sp, r7
 8015e84:	bd80      	pop	{r7, pc}
 8015e86:	bf00      	nop
 8015e88:	080216a4 	.word	0x080216a4
 8015e8c:	0802179c 	.word	0x0802179c
 8015e90:	0802171c 	.word	0x0802171c
 8015e94:	20011418 	.word	0x20011418

08015e98 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b084      	sub	sp, #16
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	60fb      	str	r3, [r7, #12]
 8015ea4:	e01e      	b.n	8015ee4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015ea6:	4913      	ldr	r1, [pc, #76]	; (8015ef4 <etharp_cleanup_netif+0x5c>)
 8015ea8:	68fa      	ldr	r2, [r7, #12]
 8015eaa:	4613      	mov	r3, r2
 8015eac:	005b      	lsls	r3, r3, #1
 8015eae:	4413      	add	r3, r2
 8015eb0:	00db      	lsls	r3, r3, #3
 8015eb2:	440b      	add	r3, r1
 8015eb4:	3314      	adds	r3, #20
 8015eb6:	781b      	ldrb	r3, [r3, #0]
 8015eb8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015eba:	7afb      	ldrb	r3, [r7, #11]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d00e      	beq.n	8015ede <etharp_cleanup_netif+0x46>
 8015ec0:	490c      	ldr	r1, [pc, #48]	; (8015ef4 <etharp_cleanup_netif+0x5c>)
 8015ec2:	68fa      	ldr	r2, [r7, #12]
 8015ec4:	4613      	mov	r3, r2
 8015ec6:	005b      	lsls	r3, r3, #1
 8015ec8:	4413      	add	r3, r2
 8015eca:	00db      	lsls	r3, r3, #3
 8015ecc:	440b      	add	r3, r1
 8015ece:	3308      	adds	r3, #8
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	687a      	ldr	r2, [r7, #4]
 8015ed4:	429a      	cmp	r2, r3
 8015ed6:	d102      	bne.n	8015ede <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015ed8:	68f8      	ldr	r0, [r7, #12]
 8015eda:	f7ff fce5 	bl	80158a8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	3301      	adds	r3, #1
 8015ee2:	60fb      	str	r3, [r7, #12]
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	2b09      	cmp	r3, #9
 8015ee8:	dddd      	ble.n	8015ea6 <etharp_cleanup_netif+0xe>
    }
  }
}
 8015eea:	bf00      	nop
 8015eec:	bf00      	nop
 8015eee:	3710      	adds	r7, #16
 8015ef0:	46bd      	mov	sp, r7
 8015ef2:	bd80      	pop	{r7, pc}
 8015ef4:	20011418 	.word	0x20011418

08015ef8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015ef8:	b5b0      	push	{r4, r5, r7, lr}
 8015efa:	b08a      	sub	sp, #40	; 0x28
 8015efc:	af04      	add	r7, sp, #16
 8015efe:	6078      	str	r0, [r7, #4]
 8015f00:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015f02:	683b      	ldr	r3, [r7, #0]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d107      	bne.n	8015f18 <etharp_input+0x20>
 8015f08:	4b3d      	ldr	r3, [pc, #244]	; (8016000 <etharp_input+0x108>)
 8015f0a:	f240 228a 	movw	r2, #650	; 0x28a
 8015f0e:	493d      	ldr	r1, [pc, #244]	; (8016004 <etharp_input+0x10c>)
 8015f10:	483d      	ldr	r0, [pc, #244]	; (8016008 <etharp_input+0x110>)
 8015f12:	f007 fb85 	bl	801d620 <iprintf>
 8015f16:	e06f      	b.n	8015ff8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	685b      	ldr	r3, [r3, #4]
 8015f1c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015f1e:	693b      	ldr	r3, [r7, #16]
 8015f20:	881b      	ldrh	r3, [r3, #0]
 8015f22:	b29b      	uxth	r3, r3
 8015f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015f28:	d10c      	bne.n	8015f44 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015f2a:	693b      	ldr	r3, [r7, #16]
 8015f2c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015f2e:	2b06      	cmp	r3, #6
 8015f30:	d108      	bne.n	8015f44 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015f32:	693b      	ldr	r3, [r7, #16]
 8015f34:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015f36:	2b04      	cmp	r3, #4
 8015f38:	d104      	bne.n	8015f44 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015f3a:	693b      	ldr	r3, [r7, #16]
 8015f3c:	885b      	ldrh	r3, [r3, #2]
 8015f3e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015f40:	2b08      	cmp	r3, #8
 8015f42:	d003      	beq.n	8015f4c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015f44:	6878      	ldr	r0, [r7, #4]
 8015f46:	f7f8 fcf1 	bl	800e92c <pbuf_free>
    return;
 8015f4a:	e055      	b.n	8015ff8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015f4c:	693b      	ldr	r3, [r7, #16]
 8015f4e:	330e      	adds	r3, #14
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015f54:	693b      	ldr	r3, [r7, #16]
 8015f56:	3318      	adds	r3, #24
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015f5c:	683b      	ldr	r3, [r7, #0]
 8015f5e:	3304      	adds	r3, #4
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d102      	bne.n	8015f6c <etharp_input+0x74>
    for_us = 0;
 8015f66:	2300      	movs	r3, #0
 8015f68:	75fb      	strb	r3, [r7, #23]
 8015f6a:	e009      	b.n	8015f80 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015f6c:	68ba      	ldr	r2, [r7, #8]
 8015f6e:	683b      	ldr	r3, [r7, #0]
 8015f70:	3304      	adds	r3, #4
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	429a      	cmp	r2, r3
 8015f76:	bf0c      	ite	eq
 8015f78:	2301      	moveq	r3, #1
 8015f7a:	2300      	movne	r3, #0
 8015f7c:	b2db      	uxtb	r3, r3
 8015f7e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015f80:	693b      	ldr	r3, [r7, #16]
 8015f82:	f103 0208 	add.w	r2, r3, #8
 8015f86:	7dfb      	ldrb	r3, [r7, #23]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d001      	beq.n	8015f90 <etharp_input+0x98>
 8015f8c:	2301      	movs	r3, #1
 8015f8e:	e000      	b.n	8015f92 <etharp_input+0x9a>
 8015f90:	2302      	movs	r3, #2
 8015f92:	f107 010c 	add.w	r1, r7, #12
 8015f96:	6838      	ldr	r0, [r7, #0]
 8015f98:	f7ff fed8 	bl	8015d4c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015f9c:	693b      	ldr	r3, [r7, #16]
 8015f9e:	88db      	ldrh	r3, [r3, #6]
 8015fa0:	b29b      	uxth	r3, r3
 8015fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015fa6:	d003      	beq.n	8015fb0 <etharp_input+0xb8>
 8015fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015fac:	d01e      	beq.n	8015fec <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015fae:	e020      	b.n	8015ff2 <etharp_input+0xfa>
      if (for_us) {
 8015fb0:	7dfb      	ldrb	r3, [r7, #23]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d01c      	beq.n	8015ff0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015fb6:	683b      	ldr	r3, [r7, #0]
 8015fb8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015fbc:	693b      	ldr	r3, [r7, #16]
 8015fbe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015fc2:	683b      	ldr	r3, [r7, #0]
 8015fc4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015fc8:	683b      	ldr	r3, [r7, #0]
 8015fca:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015fcc:	693a      	ldr	r2, [r7, #16]
 8015fce:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015fd0:	2102      	movs	r1, #2
 8015fd2:	9103      	str	r1, [sp, #12]
 8015fd4:	f107 010c 	add.w	r1, r7, #12
 8015fd8:	9102      	str	r1, [sp, #8]
 8015fda:	9201      	str	r2, [sp, #4]
 8015fdc:	9300      	str	r3, [sp, #0]
 8015fde:	462b      	mov	r3, r5
 8015fe0:	4622      	mov	r2, r4
 8015fe2:	4601      	mov	r1, r0
 8015fe4:	6838      	ldr	r0, [r7, #0]
 8015fe6:	f000 faeb 	bl	80165c0 <etharp_raw>
      break;
 8015fea:	e001      	b.n	8015ff0 <etharp_input+0xf8>
      break;
 8015fec:	bf00      	nop
 8015fee:	e000      	b.n	8015ff2 <etharp_input+0xfa>
      break;
 8015ff0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015ff2:	6878      	ldr	r0, [r7, #4]
 8015ff4:	f7f8 fc9a 	bl	800e92c <pbuf_free>
}
 8015ff8:	3718      	adds	r7, #24
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8015ffe:	bf00      	nop
 8016000:	080216a4 	.word	0x080216a4
 8016004:	080217f4 	.word	0x080217f4
 8016008:	0802171c 	.word	0x0802171c

0801600c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801600c:	b580      	push	{r7, lr}
 801600e:	b086      	sub	sp, #24
 8016010:	af02      	add	r7, sp, #8
 8016012:	60f8      	str	r0, [r7, #12]
 8016014:	60b9      	str	r1, [r7, #8]
 8016016:	4613      	mov	r3, r2
 8016018:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801601a:	79fa      	ldrb	r2, [r7, #7]
 801601c:	4944      	ldr	r1, [pc, #272]	; (8016130 <etharp_output_to_arp_index+0x124>)
 801601e:	4613      	mov	r3, r2
 8016020:	005b      	lsls	r3, r3, #1
 8016022:	4413      	add	r3, r2
 8016024:	00db      	lsls	r3, r3, #3
 8016026:	440b      	add	r3, r1
 8016028:	3314      	adds	r3, #20
 801602a:	781b      	ldrb	r3, [r3, #0]
 801602c:	2b01      	cmp	r3, #1
 801602e:	d806      	bhi.n	801603e <etharp_output_to_arp_index+0x32>
 8016030:	4b40      	ldr	r3, [pc, #256]	; (8016134 <etharp_output_to_arp_index+0x128>)
 8016032:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016036:	4940      	ldr	r1, [pc, #256]	; (8016138 <etharp_output_to_arp_index+0x12c>)
 8016038:	4840      	ldr	r0, [pc, #256]	; (801613c <etharp_output_to_arp_index+0x130>)
 801603a:	f007 faf1 	bl	801d620 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801603e:	79fa      	ldrb	r2, [r7, #7]
 8016040:	493b      	ldr	r1, [pc, #236]	; (8016130 <etharp_output_to_arp_index+0x124>)
 8016042:	4613      	mov	r3, r2
 8016044:	005b      	lsls	r3, r3, #1
 8016046:	4413      	add	r3, r2
 8016048:	00db      	lsls	r3, r3, #3
 801604a:	440b      	add	r3, r1
 801604c:	3314      	adds	r3, #20
 801604e:	781b      	ldrb	r3, [r3, #0]
 8016050:	2b02      	cmp	r3, #2
 8016052:	d153      	bne.n	80160fc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016054:	79fa      	ldrb	r2, [r7, #7]
 8016056:	4936      	ldr	r1, [pc, #216]	; (8016130 <etharp_output_to_arp_index+0x124>)
 8016058:	4613      	mov	r3, r2
 801605a:	005b      	lsls	r3, r3, #1
 801605c:	4413      	add	r3, r2
 801605e:	00db      	lsls	r3, r3, #3
 8016060:	440b      	add	r3, r1
 8016062:	3312      	adds	r3, #18
 8016064:	881b      	ldrh	r3, [r3, #0]
 8016066:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801606a:	d919      	bls.n	80160a0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801606c:	79fa      	ldrb	r2, [r7, #7]
 801606e:	4613      	mov	r3, r2
 8016070:	005b      	lsls	r3, r3, #1
 8016072:	4413      	add	r3, r2
 8016074:	00db      	lsls	r3, r3, #3
 8016076:	4a2e      	ldr	r2, [pc, #184]	; (8016130 <etharp_output_to_arp_index+0x124>)
 8016078:	4413      	add	r3, r2
 801607a:	3304      	adds	r3, #4
 801607c:	4619      	mov	r1, r3
 801607e:	68f8      	ldr	r0, [r7, #12]
 8016080:	f000 fb4c 	bl	801671c <etharp_request>
 8016084:	4603      	mov	r3, r0
 8016086:	2b00      	cmp	r3, #0
 8016088:	d138      	bne.n	80160fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801608a:	79fa      	ldrb	r2, [r7, #7]
 801608c:	4928      	ldr	r1, [pc, #160]	; (8016130 <etharp_output_to_arp_index+0x124>)
 801608e:	4613      	mov	r3, r2
 8016090:	005b      	lsls	r3, r3, #1
 8016092:	4413      	add	r3, r2
 8016094:	00db      	lsls	r3, r3, #3
 8016096:	440b      	add	r3, r1
 8016098:	3314      	adds	r3, #20
 801609a:	2203      	movs	r2, #3
 801609c:	701a      	strb	r2, [r3, #0]
 801609e:	e02d      	b.n	80160fc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80160a0:	79fa      	ldrb	r2, [r7, #7]
 80160a2:	4923      	ldr	r1, [pc, #140]	; (8016130 <etharp_output_to_arp_index+0x124>)
 80160a4:	4613      	mov	r3, r2
 80160a6:	005b      	lsls	r3, r3, #1
 80160a8:	4413      	add	r3, r2
 80160aa:	00db      	lsls	r3, r3, #3
 80160ac:	440b      	add	r3, r1
 80160ae:	3312      	adds	r3, #18
 80160b0:	881b      	ldrh	r3, [r3, #0]
 80160b2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80160b6:	d321      	bcc.n	80160fc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80160b8:	79fa      	ldrb	r2, [r7, #7]
 80160ba:	4613      	mov	r3, r2
 80160bc:	005b      	lsls	r3, r3, #1
 80160be:	4413      	add	r3, r2
 80160c0:	00db      	lsls	r3, r3, #3
 80160c2:	4a1b      	ldr	r2, [pc, #108]	; (8016130 <etharp_output_to_arp_index+0x124>)
 80160c4:	4413      	add	r3, r2
 80160c6:	1d19      	adds	r1, r3, #4
 80160c8:	79fa      	ldrb	r2, [r7, #7]
 80160ca:	4613      	mov	r3, r2
 80160cc:	005b      	lsls	r3, r3, #1
 80160ce:	4413      	add	r3, r2
 80160d0:	00db      	lsls	r3, r3, #3
 80160d2:	3308      	adds	r3, #8
 80160d4:	4a16      	ldr	r2, [pc, #88]	; (8016130 <etharp_output_to_arp_index+0x124>)
 80160d6:	4413      	add	r3, r2
 80160d8:	3304      	adds	r3, #4
 80160da:	461a      	mov	r2, r3
 80160dc:	68f8      	ldr	r0, [r7, #12]
 80160de:	f000 fafb 	bl	80166d8 <etharp_request_dst>
 80160e2:	4603      	mov	r3, r0
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d109      	bne.n	80160fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80160e8:	79fa      	ldrb	r2, [r7, #7]
 80160ea:	4911      	ldr	r1, [pc, #68]	; (8016130 <etharp_output_to_arp_index+0x124>)
 80160ec:	4613      	mov	r3, r2
 80160ee:	005b      	lsls	r3, r3, #1
 80160f0:	4413      	add	r3, r2
 80160f2:	00db      	lsls	r3, r3, #3
 80160f4:	440b      	add	r3, r1
 80160f6:	3314      	adds	r3, #20
 80160f8:	2203      	movs	r2, #3
 80160fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8016102:	79fa      	ldrb	r2, [r7, #7]
 8016104:	4613      	mov	r3, r2
 8016106:	005b      	lsls	r3, r3, #1
 8016108:	4413      	add	r3, r2
 801610a:	00db      	lsls	r3, r3, #3
 801610c:	3308      	adds	r3, #8
 801610e:	4a08      	ldr	r2, [pc, #32]	; (8016130 <etharp_output_to_arp_index+0x124>)
 8016110:	4413      	add	r3, r2
 8016112:	3304      	adds	r3, #4
 8016114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016118:	9200      	str	r2, [sp, #0]
 801611a:	460a      	mov	r2, r1
 801611c:	68b9      	ldr	r1, [r7, #8]
 801611e:	68f8      	ldr	r0, [r7, #12]
 8016120:	f001 ff6a 	bl	8017ff8 <ethernet_output>
 8016124:	4603      	mov	r3, r0
}
 8016126:	4618      	mov	r0, r3
 8016128:	3710      	adds	r7, #16
 801612a:	46bd      	mov	sp, r7
 801612c:	bd80      	pop	{r7, pc}
 801612e:	bf00      	nop
 8016130:	20011418 	.word	0x20011418
 8016134:	080216a4 	.word	0x080216a4
 8016138:	08021814 	.word	0x08021814
 801613c:	0802171c 	.word	0x0802171c

08016140 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b08a      	sub	sp, #40	; 0x28
 8016144:	af02      	add	r7, sp, #8
 8016146:	60f8      	str	r0, [r7, #12]
 8016148:	60b9      	str	r1, [r7, #8]
 801614a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d106      	bne.n	8016164 <etharp_output+0x24>
 8016156:	4b73      	ldr	r3, [pc, #460]	; (8016324 <etharp_output+0x1e4>)
 8016158:	f240 321e 	movw	r2, #798	; 0x31e
 801615c:	4972      	ldr	r1, [pc, #456]	; (8016328 <etharp_output+0x1e8>)
 801615e:	4873      	ldr	r0, [pc, #460]	; (801632c <etharp_output+0x1ec>)
 8016160:	f007 fa5e 	bl	801d620 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016164:	68bb      	ldr	r3, [r7, #8]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d106      	bne.n	8016178 <etharp_output+0x38>
 801616a:	4b6e      	ldr	r3, [pc, #440]	; (8016324 <etharp_output+0x1e4>)
 801616c:	f240 321f 	movw	r2, #799	; 0x31f
 8016170:	496f      	ldr	r1, [pc, #444]	; (8016330 <etharp_output+0x1f0>)
 8016172:	486e      	ldr	r0, [pc, #440]	; (801632c <etharp_output+0x1ec>)
 8016174:	f007 fa54 	bl	801d620 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d106      	bne.n	801618c <etharp_output+0x4c>
 801617e:	4b69      	ldr	r3, [pc, #420]	; (8016324 <etharp_output+0x1e4>)
 8016180:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016184:	496b      	ldr	r1, [pc, #428]	; (8016334 <etharp_output+0x1f4>)
 8016186:	4869      	ldr	r0, [pc, #420]	; (801632c <etharp_output+0x1ec>)
 8016188:	f007 fa4a 	bl	801d620 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	68f9      	ldr	r1, [r7, #12]
 8016192:	4618      	mov	r0, r3
 8016194:	f000 fef8 	bl	8016f88 <ip4_addr_isbroadcast_u32>
 8016198:	4603      	mov	r3, r0
 801619a:	2b00      	cmp	r3, #0
 801619c:	d002      	beq.n	80161a4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801619e:	4b66      	ldr	r3, [pc, #408]	; (8016338 <etharp_output+0x1f8>)
 80161a0:	61fb      	str	r3, [r7, #28]
 80161a2:	e0af      	b.n	8016304 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80161ac:	2be0      	cmp	r3, #224	; 0xe0
 80161ae:	d118      	bne.n	80161e2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80161b0:	2301      	movs	r3, #1
 80161b2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80161b4:	2300      	movs	r3, #0
 80161b6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80161b8:	235e      	movs	r3, #94	; 0x5e
 80161ba:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	3301      	adds	r3, #1
 80161c0:	781b      	ldrb	r3, [r3, #0]
 80161c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80161c6:	b2db      	uxtb	r3, r3
 80161c8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	3302      	adds	r3, #2
 80161ce:	781b      	ldrb	r3, [r3, #0]
 80161d0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	3303      	adds	r3, #3
 80161d6:	781b      	ldrb	r3, [r3, #0]
 80161d8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80161da:	f107 0310 	add.w	r3, r7, #16
 80161de:	61fb      	str	r3, [r7, #28]
 80161e0:	e090      	b.n	8016304 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	681a      	ldr	r2, [r3, #0]
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	3304      	adds	r3, #4
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	405a      	eors	r2, r3
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	3308      	adds	r3, #8
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	4013      	ands	r3, r2
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d012      	beq.n	8016220 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016200:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016204:	4293      	cmp	r3, r2
 8016206:	d00b      	beq.n	8016220 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	330c      	adds	r3, #12
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d003      	beq.n	801621a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	330c      	adds	r3, #12
 8016216:	61bb      	str	r3, [r7, #24]
 8016218:	e002      	b.n	8016220 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801621a:	f06f 0303 	mvn.w	r3, #3
 801621e:	e07d      	b.n	801631c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016220:	4b46      	ldr	r3, [pc, #280]	; (801633c <etharp_output+0x1fc>)
 8016222:	781b      	ldrb	r3, [r3, #0]
 8016224:	4619      	mov	r1, r3
 8016226:	4a46      	ldr	r2, [pc, #280]	; (8016340 <etharp_output+0x200>)
 8016228:	460b      	mov	r3, r1
 801622a:	005b      	lsls	r3, r3, #1
 801622c:	440b      	add	r3, r1
 801622e:	00db      	lsls	r3, r3, #3
 8016230:	4413      	add	r3, r2
 8016232:	3314      	adds	r3, #20
 8016234:	781b      	ldrb	r3, [r3, #0]
 8016236:	2b01      	cmp	r3, #1
 8016238:	d925      	bls.n	8016286 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801623a:	4b40      	ldr	r3, [pc, #256]	; (801633c <etharp_output+0x1fc>)
 801623c:	781b      	ldrb	r3, [r3, #0]
 801623e:	4619      	mov	r1, r3
 8016240:	4a3f      	ldr	r2, [pc, #252]	; (8016340 <etharp_output+0x200>)
 8016242:	460b      	mov	r3, r1
 8016244:	005b      	lsls	r3, r3, #1
 8016246:	440b      	add	r3, r1
 8016248:	00db      	lsls	r3, r3, #3
 801624a:	4413      	add	r3, r2
 801624c:	3308      	adds	r3, #8
 801624e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016250:	68fa      	ldr	r2, [r7, #12]
 8016252:	429a      	cmp	r2, r3
 8016254:	d117      	bne.n	8016286 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016256:	69bb      	ldr	r3, [r7, #24]
 8016258:	681a      	ldr	r2, [r3, #0]
 801625a:	4b38      	ldr	r3, [pc, #224]	; (801633c <etharp_output+0x1fc>)
 801625c:	781b      	ldrb	r3, [r3, #0]
 801625e:	4618      	mov	r0, r3
 8016260:	4937      	ldr	r1, [pc, #220]	; (8016340 <etharp_output+0x200>)
 8016262:	4603      	mov	r3, r0
 8016264:	005b      	lsls	r3, r3, #1
 8016266:	4403      	add	r3, r0
 8016268:	00db      	lsls	r3, r3, #3
 801626a:	440b      	add	r3, r1
 801626c:	3304      	adds	r3, #4
 801626e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016270:	429a      	cmp	r2, r3
 8016272:	d108      	bne.n	8016286 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016274:	4b31      	ldr	r3, [pc, #196]	; (801633c <etharp_output+0x1fc>)
 8016276:	781b      	ldrb	r3, [r3, #0]
 8016278:	461a      	mov	r2, r3
 801627a:	68b9      	ldr	r1, [r7, #8]
 801627c:	68f8      	ldr	r0, [r7, #12]
 801627e:	f7ff fec5 	bl	801600c <etharp_output_to_arp_index>
 8016282:	4603      	mov	r3, r0
 8016284:	e04a      	b.n	801631c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016286:	2300      	movs	r3, #0
 8016288:	75fb      	strb	r3, [r7, #23]
 801628a:	e031      	b.n	80162f0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801628c:	7dfa      	ldrb	r2, [r7, #23]
 801628e:	492c      	ldr	r1, [pc, #176]	; (8016340 <etharp_output+0x200>)
 8016290:	4613      	mov	r3, r2
 8016292:	005b      	lsls	r3, r3, #1
 8016294:	4413      	add	r3, r2
 8016296:	00db      	lsls	r3, r3, #3
 8016298:	440b      	add	r3, r1
 801629a:	3314      	adds	r3, #20
 801629c:	781b      	ldrb	r3, [r3, #0]
 801629e:	2b01      	cmp	r3, #1
 80162a0:	d923      	bls.n	80162ea <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80162a2:	7dfa      	ldrb	r2, [r7, #23]
 80162a4:	4926      	ldr	r1, [pc, #152]	; (8016340 <etharp_output+0x200>)
 80162a6:	4613      	mov	r3, r2
 80162a8:	005b      	lsls	r3, r3, #1
 80162aa:	4413      	add	r3, r2
 80162ac:	00db      	lsls	r3, r3, #3
 80162ae:	440b      	add	r3, r1
 80162b0:	3308      	adds	r3, #8
 80162b2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80162b4:	68fa      	ldr	r2, [r7, #12]
 80162b6:	429a      	cmp	r2, r3
 80162b8:	d117      	bne.n	80162ea <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80162ba:	69bb      	ldr	r3, [r7, #24]
 80162bc:	6819      	ldr	r1, [r3, #0]
 80162be:	7dfa      	ldrb	r2, [r7, #23]
 80162c0:	481f      	ldr	r0, [pc, #124]	; (8016340 <etharp_output+0x200>)
 80162c2:	4613      	mov	r3, r2
 80162c4:	005b      	lsls	r3, r3, #1
 80162c6:	4413      	add	r3, r2
 80162c8:	00db      	lsls	r3, r3, #3
 80162ca:	4403      	add	r3, r0
 80162cc:	3304      	adds	r3, #4
 80162ce:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80162d0:	4299      	cmp	r1, r3
 80162d2:	d10a      	bne.n	80162ea <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80162d4:	4a19      	ldr	r2, [pc, #100]	; (801633c <etharp_output+0x1fc>)
 80162d6:	7dfb      	ldrb	r3, [r7, #23]
 80162d8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80162da:	7dfb      	ldrb	r3, [r7, #23]
 80162dc:	461a      	mov	r2, r3
 80162de:	68b9      	ldr	r1, [r7, #8]
 80162e0:	68f8      	ldr	r0, [r7, #12]
 80162e2:	f7ff fe93 	bl	801600c <etharp_output_to_arp_index>
 80162e6:	4603      	mov	r3, r0
 80162e8:	e018      	b.n	801631c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80162ea:	7dfb      	ldrb	r3, [r7, #23]
 80162ec:	3301      	adds	r3, #1
 80162ee:	75fb      	strb	r3, [r7, #23]
 80162f0:	7dfb      	ldrb	r3, [r7, #23]
 80162f2:	2b09      	cmp	r3, #9
 80162f4:	d9ca      	bls.n	801628c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80162f6:	68ba      	ldr	r2, [r7, #8]
 80162f8:	69b9      	ldr	r1, [r7, #24]
 80162fa:	68f8      	ldr	r0, [r7, #12]
 80162fc:	f000 f822 	bl	8016344 <etharp_query>
 8016300:	4603      	mov	r3, r0
 8016302:	e00b      	b.n	801631c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801630a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801630e:	9300      	str	r3, [sp, #0]
 8016310:	69fb      	ldr	r3, [r7, #28]
 8016312:	68b9      	ldr	r1, [r7, #8]
 8016314:	68f8      	ldr	r0, [r7, #12]
 8016316:	f001 fe6f 	bl	8017ff8 <ethernet_output>
 801631a:	4603      	mov	r3, r0
}
 801631c:	4618      	mov	r0, r3
 801631e:	3720      	adds	r7, #32
 8016320:	46bd      	mov	sp, r7
 8016322:	bd80      	pop	{r7, pc}
 8016324:	080216a4 	.word	0x080216a4
 8016328:	080217f4 	.word	0x080217f4
 801632c:	0802171c 	.word	0x0802171c
 8016330:	08021844 	.word	0x08021844
 8016334:	080217e4 	.word	0x080217e4
 8016338:	08022240 	.word	0x08022240
 801633c:	20011508 	.word	0x20011508
 8016340:	20011418 	.word	0x20011418

08016344 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016344:	b580      	push	{r7, lr}
 8016346:	b08c      	sub	sp, #48	; 0x30
 8016348:	af02      	add	r7, sp, #8
 801634a:	60f8      	str	r0, [r7, #12]
 801634c:	60b9      	str	r1, [r7, #8]
 801634e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	3326      	adds	r3, #38	; 0x26
 8016354:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016356:	23ff      	movs	r3, #255	; 0xff
 8016358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801635c:	2300      	movs	r3, #0
 801635e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016360:	68bb      	ldr	r3, [r7, #8]
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	68f9      	ldr	r1, [r7, #12]
 8016366:	4618      	mov	r0, r3
 8016368:	f000 fe0e 	bl	8016f88 <ip4_addr_isbroadcast_u32>
 801636c:	4603      	mov	r3, r0
 801636e:	2b00      	cmp	r3, #0
 8016370:	d10c      	bne.n	801638c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016372:	68bb      	ldr	r3, [r7, #8]
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801637a:	2be0      	cmp	r3, #224	; 0xe0
 801637c:	d006      	beq.n	801638c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801637e:	68bb      	ldr	r3, [r7, #8]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d003      	beq.n	801638c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016384:	68bb      	ldr	r3, [r7, #8]
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d102      	bne.n	8016392 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801638c:	f06f 030f 	mvn.w	r3, #15
 8016390:	e101      	b.n	8016596 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016392:	68fa      	ldr	r2, [r7, #12]
 8016394:	2101      	movs	r1, #1
 8016396:	68b8      	ldr	r0, [r7, #8]
 8016398:	f7ff fb60 	bl	8015a5c <etharp_find_entry>
 801639c:	4603      	mov	r3, r0
 801639e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80163a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	da02      	bge.n	80163ae <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80163a8:	8a7b      	ldrh	r3, [r7, #18]
 80163aa:	b25b      	sxtb	r3, r3
 80163ac:	e0f3      	b.n	8016596 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80163ae:	8a7b      	ldrh	r3, [r7, #18]
 80163b0:	2b7e      	cmp	r3, #126	; 0x7e
 80163b2:	d906      	bls.n	80163c2 <etharp_query+0x7e>
 80163b4:	4b7a      	ldr	r3, [pc, #488]	; (80165a0 <etharp_query+0x25c>)
 80163b6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80163ba:	497a      	ldr	r1, [pc, #488]	; (80165a4 <etharp_query+0x260>)
 80163bc:	487a      	ldr	r0, [pc, #488]	; (80165a8 <etharp_query+0x264>)
 80163be:	f007 f92f 	bl	801d620 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80163c2:	8a7b      	ldrh	r3, [r7, #18]
 80163c4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80163c6:	7c7a      	ldrb	r2, [r7, #17]
 80163c8:	4978      	ldr	r1, [pc, #480]	; (80165ac <etharp_query+0x268>)
 80163ca:	4613      	mov	r3, r2
 80163cc:	005b      	lsls	r3, r3, #1
 80163ce:	4413      	add	r3, r2
 80163d0:	00db      	lsls	r3, r3, #3
 80163d2:	440b      	add	r3, r1
 80163d4:	3314      	adds	r3, #20
 80163d6:	781b      	ldrb	r3, [r3, #0]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d115      	bne.n	8016408 <etharp_query+0xc4>
    is_new_entry = 1;
 80163dc:	2301      	movs	r3, #1
 80163de:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80163e0:	7c7a      	ldrb	r2, [r7, #17]
 80163e2:	4972      	ldr	r1, [pc, #456]	; (80165ac <etharp_query+0x268>)
 80163e4:	4613      	mov	r3, r2
 80163e6:	005b      	lsls	r3, r3, #1
 80163e8:	4413      	add	r3, r2
 80163ea:	00db      	lsls	r3, r3, #3
 80163ec:	440b      	add	r3, r1
 80163ee:	3314      	adds	r3, #20
 80163f0:	2201      	movs	r2, #1
 80163f2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80163f4:	7c7a      	ldrb	r2, [r7, #17]
 80163f6:	496d      	ldr	r1, [pc, #436]	; (80165ac <etharp_query+0x268>)
 80163f8:	4613      	mov	r3, r2
 80163fa:	005b      	lsls	r3, r3, #1
 80163fc:	4413      	add	r3, r2
 80163fe:	00db      	lsls	r3, r3, #3
 8016400:	440b      	add	r3, r1
 8016402:	3308      	adds	r3, #8
 8016404:	68fa      	ldr	r2, [r7, #12]
 8016406:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016408:	7c7a      	ldrb	r2, [r7, #17]
 801640a:	4968      	ldr	r1, [pc, #416]	; (80165ac <etharp_query+0x268>)
 801640c:	4613      	mov	r3, r2
 801640e:	005b      	lsls	r3, r3, #1
 8016410:	4413      	add	r3, r2
 8016412:	00db      	lsls	r3, r3, #3
 8016414:	440b      	add	r3, r1
 8016416:	3314      	adds	r3, #20
 8016418:	781b      	ldrb	r3, [r3, #0]
 801641a:	2b01      	cmp	r3, #1
 801641c:	d011      	beq.n	8016442 <etharp_query+0xfe>
 801641e:	7c7a      	ldrb	r2, [r7, #17]
 8016420:	4962      	ldr	r1, [pc, #392]	; (80165ac <etharp_query+0x268>)
 8016422:	4613      	mov	r3, r2
 8016424:	005b      	lsls	r3, r3, #1
 8016426:	4413      	add	r3, r2
 8016428:	00db      	lsls	r3, r3, #3
 801642a:	440b      	add	r3, r1
 801642c:	3314      	adds	r3, #20
 801642e:	781b      	ldrb	r3, [r3, #0]
 8016430:	2b01      	cmp	r3, #1
 8016432:	d806      	bhi.n	8016442 <etharp_query+0xfe>
 8016434:	4b5a      	ldr	r3, [pc, #360]	; (80165a0 <etharp_query+0x25c>)
 8016436:	f240 32cd 	movw	r2, #973	; 0x3cd
 801643a:	495d      	ldr	r1, [pc, #372]	; (80165b0 <etharp_query+0x26c>)
 801643c:	485a      	ldr	r0, [pc, #360]	; (80165a8 <etharp_query+0x264>)
 801643e:	f007 f8ef 	bl	801d620 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016442:	6a3b      	ldr	r3, [r7, #32]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d102      	bne.n	801644e <etharp_query+0x10a>
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d10c      	bne.n	8016468 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801644e:	68b9      	ldr	r1, [r7, #8]
 8016450:	68f8      	ldr	r0, [r7, #12]
 8016452:	f000 f963 	bl	801671c <etharp_request>
 8016456:	4603      	mov	r3, r0
 8016458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d102      	bne.n	8016468 <etharp_query+0x124>
      return result;
 8016462:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016466:	e096      	b.n	8016596 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d106      	bne.n	801647c <etharp_query+0x138>
 801646e:	4b4c      	ldr	r3, [pc, #304]	; (80165a0 <etharp_query+0x25c>)
 8016470:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016474:	494f      	ldr	r1, [pc, #316]	; (80165b4 <etharp_query+0x270>)
 8016476:	484c      	ldr	r0, [pc, #304]	; (80165a8 <etharp_query+0x264>)
 8016478:	f007 f8d2 	bl	801d620 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801647c:	7c7a      	ldrb	r2, [r7, #17]
 801647e:	494b      	ldr	r1, [pc, #300]	; (80165ac <etharp_query+0x268>)
 8016480:	4613      	mov	r3, r2
 8016482:	005b      	lsls	r3, r3, #1
 8016484:	4413      	add	r3, r2
 8016486:	00db      	lsls	r3, r3, #3
 8016488:	440b      	add	r3, r1
 801648a:	3314      	adds	r3, #20
 801648c:	781b      	ldrb	r3, [r3, #0]
 801648e:	2b01      	cmp	r3, #1
 8016490:	d917      	bls.n	80164c2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016492:	4a49      	ldr	r2, [pc, #292]	; (80165b8 <etharp_query+0x274>)
 8016494:	7c7b      	ldrb	r3, [r7, #17]
 8016496:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016498:	7c7a      	ldrb	r2, [r7, #17]
 801649a:	4613      	mov	r3, r2
 801649c:	005b      	lsls	r3, r3, #1
 801649e:	4413      	add	r3, r2
 80164a0:	00db      	lsls	r3, r3, #3
 80164a2:	3308      	adds	r3, #8
 80164a4:	4a41      	ldr	r2, [pc, #260]	; (80165ac <etharp_query+0x268>)
 80164a6:	4413      	add	r3, r2
 80164a8:	3304      	adds	r3, #4
 80164aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80164ae:	9200      	str	r2, [sp, #0]
 80164b0:	697a      	ldr	r2, [r7, #20]
 80164b2:	6879      	ldr	r1, [r7, #4]
 80164b4:	68f8      	ldr	r0, [r7, #12]
 80164b6:	f001 fd9f 	bl	8017ff8 <ethernet_output>
 80164ba:	4603      	mov	r3, r0
 80164bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80164c0:	e067      	b.n	8016592 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80164c2:	7c7a      	ldrb	r2, [r7, #17]
 80164c4:	4939      	ldr	r1, [pc, #228]	; (80165ac <etharp_query+0x268>)
 80164c6:	4613      	mov	r3, r2
 80164c8:	005b      	lsls	r3, r3, #1
 80164ca:	4413      	add	r3, r2
 80164cc:	00db      	lsls	r3, r3, #3
 80164ce:	440b      	add	r3, r1
 80164d0:	3314      	adds	r3, #20
 80164d2:	781b      	ldrb	r3, [r3, #0]
 80164d4:	2b01      	cmp	r3, #1
 80164d6:	d15c      	bne.n	8016592 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80164d8:	2300      	movs	r3, #0
 80164da:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	61fb      	str	r3, [r7, #28]
    while (p) {
 80164e0:	e01c      	b.n	801651c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80164e2:	69fb      	ldr	r3, [r7, #28]
 80164e4:	895a      	ldrh	r2, [r3, #10]
 80164e6:	69fb      	ldr	r3, [r7, #28]
 80164e8:	891b      	ldrh	r3, [r3, #8]
 80164ea:	429a      	cmp	r2, r3
 80164ec:	d10a      	bne.n	8016504 <etharp_query+0x1c0>
 80164ee:	69fb      	ldr	r3, [r7, #28]
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d006      	beq.n	8016504 <etharp_query+0x1c0>
 80164f6:	4b2a      	ldr	r3, [pc, #168]	; (80165a0 <etharp_query+0x25c>)
 80164f8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80164fc:	492f      	ldr	r1, [pc, #188]	; (80165bc <etharp_query+0x278>)
 80164fe:	482a      	ldr	r0, [pc, #168]	; (80165a8 <etharp_query+0x264>)
 8016500:	f007 f88e 	bl	801d620 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016504:	69fb      	ldr	r3, [r7, #28]
 8016506:	7b1b      	ldrb	r3, [r3, #12]
 8016508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801650c:	2b00      	cmp	r3, #0
 801650e:	d002      	beq.n	8016516 <etharp_query+0x1d2>
        copy_needed = 1;
 8016510:	2301      	movs	r3, #1
 8016512:	61bb      	str	r3, [r7, #24]
        break;
 8016514:	e005      	b.n	8016522 <etharp_query+0x1de>
      }
      p = p->next;
 8016516:	69fb      	ldr	r3, [r7, #28]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801651c:	69fb      	ldr	r3, [r7, #28]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d1df      	bne.n	80164e2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016522:	69bb      	ldr	r3, [r7, #24]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d007      	beq.n	8016538 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016528:	687a      	ldr	r2, [r7, #4]
 801652a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801652e:	200e      	movs	r0, #14
 8016530:	f7f8 fc64 	bl	800edfc <pbuf_clone>
 8016534:	61f8      	str	r0, [r7, #28]
 8016536:	e004      	b.n	8016542 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801653c:	69f8      	ldr	r0, [r7, #28]
 801653e:	f7f8 fa9b 	bl	800ea78 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016542:	69fb      	ldr	r3, [r7, #28]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d021      	beq.n	801658c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016548:	7c7a      	ldrb	r2, [r7, #17]
 801654a:	4918      	ldr	r1, [pc, #96]	; (80165ac <etharp_query+0x268>)
 801654c:	4613      	mov	r3, r2
 801654e:	005b      	lsls	r3, r3, #1
 8016550:	4413      	add	r3, r2
 8016552:	00db      	lsls	r3, r3, #3
 8016554:	440b      	add	r3, r1
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d00a      	beq.n	8016572 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801655c:	7c7a      	ldrb	r2, [r7, #17]
 801655e:	4913      	ldr	r1, [pc, #76]	; (80165ac <etharp_query+0x268>)
 8016560:	4613      	mov	r3, r2
 8016562:	005b      	lsls	r3, r3, #1
 8016564:	4413      	add	r3, r2
 8016566:	00db      	lsls	r3, r3, #3
 8016568:	440b      	add	r3, r1
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	4618      	mov	r0, r3
 801656e:	f7f8 f9dd 	bl	800e92c <pbuf_free>
      }
      arp_table[i].q = p;
 8016572:	7c7a      	ldrb	r2, [r7, #17]
 8016574:	490d      	ldr	r1, [pc, #52]	; (80165ac <etharp_query+0x268>)
 8016576:	4613      	mov	r3, r2
 8016578:	005b      	lsls	r3, r3, #1
 801657a:	4413      	add	r3, r2
 801657c:	00db      	lsls	r3, r3, #3
 801657e:	440b      	add	r3, r1
 8016580:	69fa      	ldr	r2, [r7, #28]
 8016582:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016584:	2300      	movs	r3, #0
 8016586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801658a:	e002      	b.n	8016592 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801658c:	23ff      	movs	r3, #255	; 0xff
 801658e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016592:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016596:	4618      	mov	r0, r3
 8016598:	3728      	adds	r7, #40	; 0x28
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}
 801659e:	bf00      	nop
 80165a0:	080216a4 	.word	0x080216a4
 80165a4:	08021850 	.word	0x08021850
 80165a8:	0802171c 	.word	0x0802171c
 80165ac:	20011418 	.word	0x20011418
 80165b0:	08021860 	.word	0x08021860
 80165b4:	08021844 	.word	0x08021844
 80165b8:	20011508 	.word	0x20011508
 80165bc:	08021888 	.word	0x08021888

080165c0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b08a      	sub	sp, #40	; 0x28
 80165c4:	af02      	add	r7, sp, #8
 80165c6:	60f8      	str	r0, [r7, #12]
 80165c8:	60b9      	str	r1, [r7, #8]
 80165ca:	607a      	str	r2, [r7, #4]
 80165cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80165ce:	2300      	movs	r3, #0
 80165d0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d106      	bne.n	80165e6 <etharp_raw+0x26>
 80165d8:	4b3a      	ldr	r3, [pc, #232]	; (80166c4 <etharp_raw+0x104>)
 80165da:	f240 4257 	movw	r2, #1111	; 0x457
 80165de:	493a      	ldr	r1, [pc, #232]	; (80166c8 <etharp_raw+0x108>)
 80165e0:	483a      	ldr	r0, [pc, #232]	; (80166cc <etharp_raw+0x10c>)
 80165e2:	f007 f81d 	bl	801d620 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80165e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80165ea:	211c      	movs	r1, #28
 80165ec:	200e      	movs	r0, #14
 80165ee:	f7f7 feb9 	bl	800e364 <pbuf_alloc>
 80165f2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80165f4:	69bb      	ldr	r3, [r7, #24]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d102      	bne.n	8016600 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80165fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80165fe:	e05d      	b.n	80166bc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016600:	69bb      	ldr	r3, [r7, #24]
 8016602:	895b      	ldrh	r3, [r3, #10]
 8016604:	2b1b      	cmp	r3, #27
 8016606:	d806      	bhi.n	8016616 <etharp_raw+0x56>
 8016608:	4b2e      	ldr	r3, [pc, #184]	; (80166c4 <etharp_raw+0x104>)
 801660a:	f240 4262 	movw	r2, #1122	; 0x462
 801660e:	4930      	ldr	r1, [pc, #192]	; (80166d0 <etharp_raw+0x110>)
 8016610:	482e      	ldr	r0, [pc, #184]	; (80166cc <etharp_raw+0x10c>)
 8016612:	f007 f805 	bl	801d620 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016616:	69bb      	ldr	r3, [r7, #24]
 8016618:	685b      	ldr	r3, [r3, #4]
 801661a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801661c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801661e:	4618      	mov	r0, r3
 8016620:	f7f6 fd82 	bl	800d128 <lwip_htons>
 8016624:	4603      	mov	r3, r0
 8016626:	461a      	mov	r2, r3
 8016628:	697b      	ldr	r3, [r7, #20]
 801662a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016632:	2b06      	cmp	r3, #6
 8016634:	d006      	beq.n	8016644 <etharp_raw+0x84>
 8016636:	4b23      	ldr	r3, [pc, #140]	; (80166c4 <etharp_raw+0x104>)
 8016638:	f240 4269 	movw	r2, #1129	; 0x469
 801663c:	4925      	ldr	r1, [pc, #148]	; (80166d4 <etharp_raw+0x114>)
 801663e:	4823      	ldr	r0, [pc, #140]	; (80166cc <etharp_raw+0x10c>)
 8016640:	f006 ffee 	bl	801d620 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016644:	697b      	ldr	r3, [r7, #20]
 8016646:	3308      	adds	r3, #8
 8016648:	2206      	movs	r2, #6
 801664a:	6839      	ldr	r1, [r7, #0]
 801664c:	4618      	mov	r0, r3
 801664e:	f006 ffd1 	bl	801d5f4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016652:	697b      	ldr	r3, [r7, #20]
 8016654:	3312      	adds	r3, #18
 8016656:	2206      	movs	r2, #6
 8016658:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801665a:	4618      	mov	r0, r3
 801665c:	f006 ffca 	bl	801d5f4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016660:	697b      	ldr	r3, [r7, #20]
 8016662:	330e      	adds	r3, #14
 8016664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016666:	6812      	ldr	r2, [r2, #0]
 8016668:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801666a:	697b      	ldr	r3, [r7, #20]
 801666c:	3318      	adds	r3, #24
 801666e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016670:	6812      	ldr	r2, [r2, #0]
 8016672:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016674:	697b      	ldr	r3, [r7, #20]
 8016676:	2200      	movs	r2, #0
 8016678:	701a      	strb	r2, [r3, #0]
 801667a:	2200      	movs	r2, #0
 801667c:	f042 0201 	orr.w	r2, r2, #1
 8016680:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016682:	697b      	ldr	r3, [r7, #20]
 8016684:	2200      	movs	r2, #0
 8016686:	f042 0208 	orr.w	r2, r2, #8
 801668a:	709a      	strb	r2, [r3, #2]
 801668c:	2200      	movs	r2, #0
 801668e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016690:	697b      	ldr	r3, [r7, #20]
 8016692:	2206      	movs	r2, #6
 8016694:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016696:	697b      	ldr	r3, [r7, #20]
 8016698:	2204      	movs	r2, #4
 801669a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801669c:	f640 0306 	movw	r3, #2054	; 0x806
 80166a0:	9300      	str	r3, [sp, #0]
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	68ba      	ldr	r2, [r7, #8]
 80166a6:	69b9      	ldr	r1, [r7, #24]
 80166a8:	68f8      	ldr	r0, [r7, #12]
 80166aa:	f001 fca5 	bl	8017ff8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80166ae:	69b8      	ldr	r0, [r7, #24]
 80166b0:	f7f8 f93c 	bl	800e92c <pbuf_free>
  p = NULL;
 80166b4:	2300      	movs	r3, #0
 80166b6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80166b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80166bc:	4618      	mov	r0, r3
 80166be:	3720      	adds	r7, #32
 80166c0:	46bd      	mov	sp, r7
 80166c2:	bd80      	pop	{r7, pc}
 80166c4:	080216a4 	.word	0x080216a4
 80166c8:	080217f4 	.word	0x080217f4
 80166cc:	0802171c 	.word	0x0802171c
 80166d0:	080218a4 	.word	0x080218a4
 80166d4:	080218d8 	.word	0x080218d8

080166d8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80166d8:	b580      	push	{r7, lr}
 80166da:	b088      	sub	sp, #32
 80166dc:	af04      	add	r7, sp, #16
 80166de:	60f8      	str	r0, [r7, #12]
 80166e0:	60b9      	str	r1, [r7, #8]
 80166e2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80166f4:	2201      	movs	r2, #1
 80166f6:	9203      	str	r2, [sp, #12]
 80166f8:	68ba      	ldr	r2, [r7, #8]
 80166fa:	9202      	str	r2, [sp, #8]
 80166fc:	4a06      	ldr	r2, [pc, #24]	; (8016718 <etharp_request_dst+0x40>)
 80166fe:	9201      	str	r2, [sp, #4]
 8016700:	9300      	str	r3, [sp, #0]
 8016702:	4603      	mov	r3, r0
 8016704:	687a      	ldr	r2, [r7, #4]
 8016706:	68f8      	ldr	r0, [r7, #12]
 8016708:	f7ff ff5a 	bl	80165c0 <etharp_raw>
 801670c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801670e:	4618      	mov	r0, r3
 8016710:	3710      	adds	r7, #16
 8016712:	46bd      	mov	sp, r7
 8016714:	bd80      	pop	{r7, pc}
 8016716:	bf00      	nop
 8016718:	08022248 	.word	0x08022248

0801671c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b082      	sub	sp, #8
 8016720:	af00      	add	r7, sp, #0
 8016722:	6078      	str	r0, [r7, #4]
 8016724:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016726:	4a05      	ldr	r2, [pc, #20]	; (801673c <etharp_request+0x20>)
 8016728:	6839      	ldr	r1, [r7, #0]
 801672a:	6878      	ldr	r0, [r7, #4]
 801672c:	f7ff ffd4 	bl	80166d8 <etharp_request_dst>
 8016730:	4603      	mov	r3, r0
}
 8016732:	4618      	mov	r0, r3
 8016734:	3708      	adds	r7, #8
 8016736:	46bd      	mov	sp, r7
 8016738:	bd80      	pop	{r7, pc}
 801673a:	bf00      	nop
 801673c:	08022240 	.word	0x08022240

08016740 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b08e      	sub	sp, #56	; 0x38
 8016744:	af04      	add	r7, sp, #16
 8016746:	6078      	str	r0, [r7, #4]
 8016748:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801674a:	4b79      	ldr	r3, [pc, #484]	; (8016930 <icmp_input+0x1f0>)
 801674c:	689b      	ldr	r3, [r3, #8]
 801674e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016752:	781b      	ldrb	r3, [r3, #0]
 8016754:	f003 030f 	and.w	r3, r3, #15
 8016758:	b2db      	uxtb	r3, r3
 801675a:	009b      	lsls	r3, r3, #2
 801675c:	b2db      	uxtb	r3, r3
 801675e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016760:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016762:	2b13      	cmp	r3, #19
 8016764:	f240 80cd 	bls.w	8016902 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	895b      	ldrh	r3, [r3, #10]
 801676c:	2b03      	cmp	r3, #3
 801676e:	f240 80ca 	bls.w	8016906 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	685b      	ldr	r3, [r3, #4]
 8016776:	781b      	ldrb	r3, [r3, #0]
 8016778:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801677c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016780:	2b00      	cmp	r3, #0
 8016782:	f000 80b7 	beq.w	80168f4 <icmp_input+0x1b4>
 8016786:	2b08      	cmp	r3, #8
 8016788:	f040 80b7 	bne.w	80168fa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801678c:	4b69      	ldr	r3, [pc, #420]	; (8016934 <icmp_input+0x1f4>)
 801678e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016790:	4b67      	ldr	r3, [pc, #412]	; (8016930 <icmp_input+0x1f0>)
 8016792:	695b      	ldr	r3, [r3, #20]
 8016794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016798:	2be0      	cmp	r3, #224	; 0xe0
 801679a:	f000 80bb 	beq.w	8016914 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801679e:	4b64      	ldr	r3, [pc, #400]	; (8016930 <icmp_input+0x1f0>)
 80167a0:	695b      	ldr	r3, [r3, #20]
 80167a2:	4a63      	ldr	r2, [pc, #396]	; (8016930 <icmp_input+0x1f0>)
 80167a4:	6812      	ldr	r2, [r2, #0]
 80167a6:	4611      	mov	r1, r2
 80167a8:	4618      	mov	r0, r3
 80167aa:	f000 fbed 	bl	8016f88 <ip4_addr_isbroadcast_u32>
 80167ae:	4603      	mov	r3, r0
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	f040 80b1 	bne.w	8016918 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	891b      	ldrh	r3, [r3, #8]
 80167ba:	2b07      	cmp	r3, #7
 80167bc:	f240 80a5 	bls.w	801690a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80167c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80167c2:	330e      	adds	r3, #14
 80167c4:	4619      	mov	r1, r3
 80167c6:	6878      	ldr	r0, [r7, #4]
 80167c8:	f7f8 f81a 	bl	800e800 <pbuf_add_header>
 80167cc:	4603      	mov	r3, r0
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d04b      	beq.n	801686a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	891a      	ldrh	r2, [r3, #8]
 80167d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80167d8:	4413      	add	r3, r2
 80167da:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	891b      	ldrh	r3, [r3, #8]
 80167e0:	8b7a      	ldrh	r2, [r7, #26]
 80167e2:	429a      	cmp	r2, r3
 80167e4:	f0c0 809a 	bcc.w	801691c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80167e8:	8b7b      	ldrh	r3, [r7, #26]
 80167ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80167ee:	4619      	mov	r1, r3
 80167f0:	200e      	movs	r0, #14
 80167f2:	f7f7 fdb7 	bl	800e364 <pbuf_alloc>
 80167f6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80167f8:	697b      	ldr	r3, [r7, #20]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	f000 8090 	beq.w	8016920 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016800:	697b      	ldr	r3, [r7, #20]
 8016802:	895b      	ldrh	r3, [r3, #10]
 8016804:	461a      	mov	r2, r3
 8016806:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016808:	3308      	adds	r3, #8
 801680a:	429a      	cmp	r2, r3
 801680c:	d203      	bcs.n	8016816 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801680e:	6978      	ldr	r0, [r7, #20]
 8016810:	f7f8 f88c 	bl	800e92c <pbuf_free>
          goto icmperr;
 8016814:	e085      	b.n	8016922 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016816:	697b      	ldr	r3, [r7, #20]
 8016818:	685b      	ldr	r3, [r3, #4]
 801681a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801681c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801681e:	4618      	mov	r0, r3
 8016820:	f006 fee8 	bl	801d5f4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016824:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016826:	4619      	mov	r1, r3
 8016828:	6978      	ldr	r0, [r7, #20]
 801682a:	f7f7 fff9 	bl	800e820 <pbuf_remove_header>
 801682e:	4603      	mov	r3, r0
 8016830:	2b00      	cmp	r3, #0
 8016832:	d009      	beq.n	8016848 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016834:	4b40      	ldr	r3, [pc, #256]	; (8016938 <icmp_input+0x1f8>)
 8016836:	22b6      	movs	r2, #182	; 0xb6
 8016838:	4940      	ldr	r1, [pc, #256]	; (801693c <icmp_input+0x1fc>)
 801683a:	4841      	ldr	r0, [pc, #260]	; (8016940 <icmp_input+0x200>)
 801683c:	f006 fef0 	bl	801d620 <iprintf>
          pbuf_free(r);
 8016840:	6978      	ldr	r0, [r7, #20]
 8016842:	f7f8 f873 	bl	800e92c <pbuf_free>
          goto icmperr;
 8016846:	e06c      	b.n	8016922 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016848:	6879      	ldr	r1, [r7, #4]
 801684a:	6978      	ldr	r0, [r7, #20]
 801684c:	f7f8 f992 	bl	800eb74 <pbuf_copy>
 8016850:	4603      	mov	r3, r0
 8016852:	2b00      	cmp	r3, #0
 8016854:	d003      	beq.n	801685e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016856:	6978      	ldr	r0, [r7, #20]
 8016858:	f7f8 f868 	bl	800e92c <pbuf_free>
          goto icmperr;
 801685c:	e061      	b.n	8016922 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801685e:	6878      	ldr	r0, [r7, #4]
 8016860:	f7f8 f864 	bl	800e92c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016864:	697b      	ldr	r3, [r7, #20]
 8016866:	607b      	str	r3, [r7, #4]
 8016868:	e00f      	b.n	801688a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801686a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801686c:	330e      	adds	r3, #14
 801686e:	4619      	mov	r1, r3
 8016870:	6878      	ldr	r0, [r7, #4]
 8016872:	f7f7 ffd5 	bl	800e820 <pbuf_remove_header>
 8016876:	4603      	mov	r3, r0
 8016878:	2b00      	cmp	r3, #0
 801687a:	d006      	beq.n	801688a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801687c:	4b2e      	ldr	r3, [pc, #184]	; (8016938 <icmp_input+0x1f8>)
 801687e:	22c7      	movs	r2, #199	; 0xc7
 8016880:	4930      	ldr	r1, [pc, #192]	; (8016944 <icmp_input+0x204>)
 8016882:	482f      	ldr	r0, [pc, #188]	; (8016940 <icmp_input+0x200>)
 8016884:	f006 fecc 	bl	801d620 <iprintf>
          goto icmperr;
 8016888:	e04b      	b.n	8016922 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	685b      	ldr	r3, [r3, #4]
 801688e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016890:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016892:	4619      	mov	r1, r3
 8016894:	6878      	ldr	r0, [r7, #4]
 8016896:	f7f7 ffb3 	bl	800e800 <pbuf_add_header>
 801689a:	4603      	mov	r3, r0
 801689c:	2b00      	cmp	r3, #0
 801689e:	d12b      	bne.n	80168f8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	685b      	ldr	r3, [r3, #4]
 80168a4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80168a6:	69fb      	ldr	r3, [r7, #28]
 80168a8:	681a      	ldr	r2, [r3, #0]
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80168ae:	4b20      	ldr	r3, [pc, #128]	; (8016930 <icmp_input+0x1f0>)
 80168b0:	691a      	ldr	r2, [r3, #16]
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80168b6:	693b      	ldr	r3, [r7, #16]
 80168b8:	2200      	movs	r2, #0
 80168ba:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80168bc:	693b      	ldr	r3, [r7, #16]
 80168be:	2200      	movs	r2, #0
 80168c0:	709a      	strb	r2, [r3, #2]
 80168c2:	2200      	movs	r2, #0
 80168c4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	22ff      	movs	r2, #255	; 0xff
 80168ca:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	2200      	movs	r2, #0
 80168d0:	729a      	strb	r2, [r3, #10]
 80168d2:	2200      	movs	r2, #0
 80168d4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80168d6:	683b      	ldr	r3, [r7, #0]
 80168d8:	9302      	str	r3, [sp, #8]
 80168da:	2301      	movs	r3, #1
 80168dc:	9301      	str	r3, [sp, #4]
 80168de:	2300      	movs	r3, #0
 80168e0:	9300      	str	r3, [sp, #0]
 80168e2:	23ff      	movs	r3, #255	; 0xff
 80168e4:	2200      	movs	r2, #0
 80168e6:	69f9      	ldr	r1, [r7, #28]
 80168e8:	6878      	ldr	r0, [r7, #4]
 80168ea:	f000 fa75 	bl	8016dd8 <ip4_output_if>
 80168ee:	4603      	mov	r3, r0
 80168f0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80168f2:	e001      	b.n	80168f8 <icmp_input+0x1b8>
      break;
 80168f4:	bf00      	nop
 80168f6:	e000      	b.n	80168fa <icmp_input+0x1ba>
      break;
 80168f8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80168fa:	6878      	ldr	r0, [r7, #4]
 80168fc:	f7f8 f816 	bl	800e92c <pbuf_free>
  return;
 8016900:	e013      	b.n	801692a <icmp_input+0x1ea>
    goto lenerr;
 8016902:	bf00      	nop
 8016904:	e002      	b.n	801690c <icmp_input+0x1cc>
    goto lenerr;
 8016906:	bf00      	nop
 8016908:	e000      	b.n	801690c <icmp_input+0x1cc>
        goto lenerr;
 801690a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801690c:	6878      	ldr	r0, [r7, #4]
 801690e:	f7f8 f80d 	bl	800e92c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016912:	e00a      	b.n	801692a <icmp_input+0x1ea>
        goto icmperr;
 8016914:	bf00      	nop
 8016916:	e004      	b.n	8016922 <icmp_input+0x1e2>
        goto icmperr;
 8016918:	bf00      	nop
 801691a:	e002      	b.n	8016922 <icmp_input+0x1e2>
          goto icmperr;
 801691c:	bf00      	nop
 801691e:	e000      	b.n	8016922 <icmp_input+0x1e2>
          goto icmperr;
 8016920:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016922:	6878      	ldr	r0, [r7, #4]
 8016924:	f7f8 f802 	bl	800e92c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016928:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801692a:	3728      	adds	r7, #40	; 0x28
 801692c:	46bd      	mov	sp, r7
 801692e:	bd80      	pop	{r7, pc}
 8016930:	2000a2bc 	.word	0x2000a2bc
 8016934:	2000a2d0 	.word	0x2000a2d0
 8016938:	0802191c 	.word	0x0802191c
 801693c:	08021954 	.word	0x08021954
 8016940:	0802198c 	.word	0x0802198c
 8016944:	080219b4 	.word	0x080219b4

08016948 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b082      	sub	sp, #8
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
 8016950:	460b      	mov	r3, r1
 8016952:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016954:	78fb      	ldrb	r3, [r7, #3]
 8016956:	461a      	mov	r2, r3
 8016958:	2103      	movs	r1, #3
 801695a:	6878      	ldr	r0, [r7, #4]
 801695c:	f000 f814 	bl	8016988 <icmp_send_response>
}
 8016960:	bf00      	nop
 8016962:	3708      	adds	r7, #8
 8016964:	46bd      	mov	sp, r7
 8016966:	bd80      	pop	{r7, pc}

08016968 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b082      	sub	sp, #8
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
 8016970:	460b      	mov	r3, r1
 8016972:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016974:	78fb      	ldrb	r3, [r7, #3]
 8016976:	461a      	mov	r2, r3
 8016978:	210b      	movs	r1, #11
 801697a:	6878      	ldr	r0, [r7, #4]
 801697c:	f000 f804 	bl	8016988 <icmp_send_response>
}
 8016980:	bf00      	nop
 8016982:	3708      	adds	r7, #8
 8016984:	46bd      	mov	sp, r7
 8016986:	bd80      	pop	{r7, pc}

08016988 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016988:	b580      	push	{r7, lr}
 801698a:	b08c      	sub	sp, #48	; 0x30
 801698c:	af04      	add	r7, sp, #16
 801698e:	6078      	str	r0, [r7, #4]
 8016990:	460b      	mov	r3, r1
 8016992:	70fb      	strb	r3, [r7, #3]
 8016994:	4613      	mov	r3, r2
 8016996:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016998:	f44f 7220 	mov.w	r2, #640	; 0x280
 801699c:	2124      	movs	r1, #36	; 0x24
 801699e:	2022      	movs	r0, #34	; 0x22
 80169a0:	f7f7 fce0 	bl	800e364 <pbuf_alloc>
 80169a4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80169a6:	69fb      	ldr	r3, [r7, #28]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d04c      	beq.n	8016a46 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80169ac:	69fb      	ldr	r3, [r7, #28]
 80169ae:	895b      	ldrh	r3, [r3, #10]
 80169b0:	2b23      	cmp	r3, #35	; 0x23
 80169b2:	d806      	bhi.n	80169c2 <icmp_send_response+0x3a>
 80169b4:	4b26      	ldr	r3, [pc, #152]	; (8016a50 <icmp_send_response+0xc8>)
 80169b6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80169ba:	4926      	ldr	r1, [pc, #152]	; (8016a54 <icmp_send_response+0xcc>)
 80169bc:	4826      	ldr	r0, [pc, #152]	; (8016a58 <icmp_send_response+0xd0>)
 80169be:	f006 fe2f 	bl	801d620 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	685b      	ldr	r3, [r3, #4]
 80169c6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80169c8:	69fb      	ldr	r3, [r7, #28]
 80169ca:	685b      	ldr	r3, [r3, #4]
 80169cc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80169ce:	697b      	ldr	r3, [r7, #20]
 80169d0:	78fa      	ldrb	r2, [r7, #3]
 80169d2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80169d4:	697b      	ldr	r3, [r7, #20]
 80169d6:	78ba      	ldrb	r2, [r7, #2]
 80169d8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80169da:	697b      	ldr	r3, [r7, #20]
 80169dc:	2200      	movs	r2, #0
 80169de:	711a      	strb	r2, [r3, #4]
 80169e0:	2200      	movs	r2, #0
 80169e2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80169e4:	697b      	ldr	r3, [r7, #20]
 80169e6:	2200      	movs	r2, #0
 80169e8:	719a      	strb	r2, [r3, #6]
 80169ea:	2200      	movs	r2, #0
 80169ec:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80169ee:	69fb      	ldr	r3, [r7, #28]
 80169f0:	685b      	ldr	r3, [r3, #4]
 80169f2:	f103 0008 	add.w	r0, r3, #8
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	685b      	ldr	r3, [r3, #4]
 80169fa:	221c      	movs	r2, #28
 80169fc:	4619      	mov	r1, r3
 80169fe:	f006 fdf9 	bl	801d5f4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016a02:	69bb      	ldr	r3, [r7, #24]
 8016a04:	68db      	ldr	r3, [r3, #12]
 8016a06:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016a08:	f107 030c 	add.w	r3, r7, #12
 8016a0c:	4618      	mov	r0, r3
 8016a0e:	f000 f825 	bl	8016a5c <ip4_route>
 8016a12:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016a14:	693b      	ldr	r3, [r7, #16]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d011      	beq.n	8016a3e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016a1a:	697b      	ldr	r3, [r7, #20]
 8016a1c:	2200      	movs	r2, #0
 8016a1e:	709a      	strb	r2, [r3, #2]
 8016a20:	2200      	movs	r2, #0
 8016a22:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016a24:	f107 020c 	add.w	r2, r7, #12
 8016a28:	693b      	ldr	r3, [r7, #16]
 8016a2a:	9302      	str	r3, [sp, #8]
 8016a2c:	2301      	movs	r3, #1
 8016a2e:	9301      	str	r3, [sp, #4]
 8016a30:	2300      	movs	r3, #0
 8016a32:	9300      	str	r3, [sp, #0]
 8016a34:	23ff      	movs	r3, #255	; 0xff
 8016a36:	2100      	movs	r1, #0
 8016a38:	69f8      	ldr	r0, [r7, #28]
 8016a3a:	f000 f9cd 	bl	8016dd8 <ip4_output_if>
  }
  pbuf_free(q);
 8016a3e:	69f8      	ldr	r0, [r7, #28]
 8016a40:	f7f7 ff74 	bl	800e92c <pbuf_free>
 8016a44:	e000      	b.n	8016a48 <icmp_send_response+0xc0>
    return;
 8016a46:	bf00      	nop
}
 8016a48:	3720      	adds	r7, #32
 8016a4a:	46bd      	mov	sp, r7
 8016a4c:	bd80      	pop	{r7, pc}
 8016a4e:	bf00      	nop
 8016a50:	0802191c 	.word	0x0802191c
 8016a54:	080219e8 	.word	0x080219e8
 8016a58:	0802198c 	.word	0x0802198c

08016a5c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016a5c:	b480      	push	{r7}
 8016a5e:	b085      	sub	sp, #20
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016a64:	4b33      	ldr	r3, [pc, #204]	; (8016b34 <ip4_route+0xd8>)
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	60fb      	str	r3, [r7, #12]
 8016a6a:	e036      	b.n	8016ada <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a72:	f003 0301 	and.w	r3, r3, #1
 8016a76:	b2db      	uxtb	r3, r3
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d02b      	beq.n	8016ad4 <ip4_route+0x78>
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a82:	089b      	lsrs	r3, r3, #2
 8016a84:	f003 0301 	and.w	r3, r3, #1
 8016a88:	b2db      	uxtb	r3, r3
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d022      	beq.n	8016ad4 <ip4_route+0x78>
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	3304      	adds	r3, #4
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d01d      	beq.n	8016ad4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	681a      	ldr	r2, [r3, #0]
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	3304      	adds	r3, #4
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	405a      	eors	r2, r3
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	3308      	adds	r3, #8
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	4013      	ands	r3, r2
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d101      	bne.n	8016ab4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	e038      	b.n	8016b26 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016aba:	f003 0302 	and.w	r3, r3, #2
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d108      	bne.n	8016ad4 <ip4_route+0x78>
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	681a      	ldr	r2, [r3, #0]
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	330c      	adds	r3, #12
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	429a      	cmp	r2, r3
 8016ace:	d101      	bne.n	8016ad4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	e028      	b.n	8016b26 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	60fb      	str	r3, [r7, #12]
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d1c5      	bne.n	8016a6c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016ae0:	4b15      	ldr	r3, [pc, #84]	; (8016b38 <ip4_route+0xdc>)
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d01a      	beq.n	8016b1e <ip4_route+0xc2>
 8016ae8:	4b13      	ldr	r3, [pc, #76]	; (8016b38 <ip4_route+0xdc>)
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016af0:	f003 0301 	and.w	r3, r3, #1
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d012      	beq.n	8016b1e <ip4_route+0xc2>
 8016af8:	4b0f      	ldr	r3, [pc, #60]	; (8016b38 <ip4_route+0xdc>)
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016b00:	f003 0304 	and.w	r3, r3, #4
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d00a      	beq.n	8016b1e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016b08:	4b0b      	ldr	r3, [pc, #44]	; (8016b38 <ip4_route+0xdc>)
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	3304      	adds	r3, #4
 8016b0e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d004      	beq.n	8016b1e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	b2db      	uxtb	r3, r3
 8016b1a:	2b7f      	cmp	r3, #127	; 0x7f
 8016b1c:	d101      	bne.n	8016b22 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016b1e:	2300      	movs	r3, #0
 8016b20:	e001      	b.n	8016b26 <ip4_route+0xca>
  }

  return netif_default;
 8016b22:	4b05      	ldr	r3, [pc, #20]	; (8016b38 <ip4_route+0xdc>)
 8016b24:	681b      	ldr	r3, [r3, #0]
}
 8016b26:	4618      	mov	r0, r3
 8016b28:	3714      	adds	r7, #20
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b30:	4770      	bx	lr
 8016b32:	bf00      	nop
 8016b34:	200113ac 	.word	0x200113ac
 8016b38:	200113b0 	.word	0x200113b0

08016b3c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b082      	sub	sp, #8
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016b4a:	f003 0301 	and.w	r3, r3, #1
 8016b4e:	b2db      	uxtb	r3, r3
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d016      	beq.n	8016b82 <ip4_input_accept+0x46>
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	3304      	adds	r3, #4
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d011      	beq.n	8016b82 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016b5e:	4b0b      	ldr	r3, [pc, #44]	; (8016b8c <ip4_input_accept+0x50>)
 8016b60:	695a      	ldr	r2, [r3, #20]
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	3304      	adds	r3, #4
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	429a      	cmp	r2, r3
 8016b6a:	d008      	beq.n	8016b7e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016b6c:	4b07      	ldr	r3, [pc, #28]	; (8016b8c <ip4_input_accept+0x50>)
 8016b6e:	695b      	ldr	r3, [r3, #20]
 8016b70:	6879      	ldr	r1, [r7, #4]
 8016b72:	4618      	mov	r0, r3
 8016b74:	f000 fa08 	bl	8016f88 <ip4_addr_isbroadcast_u32>
 8016b78:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d001      	beq.n	8016b82 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016b7e:	2301      	movs	r3, #1
 8016b80:	e000      	b.n	8016b84 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016b82:	2300      	movs	r3, #0
}
 8016b84:	4618      	mov	r0, r3
 8016b86:	3708      	adds	r7, #8
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	bd80      	pop	{r7, pc}
 8016b8c:	2000a2bc 	.word	0x2000a2bc

08016b90 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b086      	sub	sp, #24
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	6078      	str	r0, [r7, #4]
 8016b98:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	685b      	ldr	r3, [r3, #4]
 8016b9e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016ba0:	697b      	ldr	r3, [r7, #20]
 8016ba2:	781b      	ldrb	r3, [r3, #0]
 8016ba4:	091b      	lsrs	r3, r3, #4
 8016ba6:	b2db      	uxtb	r3, r3
 8016ba8:	2b04      	cmp	r3, #4
 8016baa:	d004      	beq.n	8016bb6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016bac:	6878      	ldr	r0, [r7, #4]
 8016bae:	f7f7 febd 	bl	800e92c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016bb2:	2300      	movs	r3, #0
 8016bb4:	e107      	b.n	8016dc6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016bb6:	697b      	ldr	r3, [r7, #20]
 8016bb8:	781b      	ldrb	r3, [r3, #0]
 8016bba:	f003 030f 	and.w	r3, r3, #15
 8016bbe:	b2db      	uxtb	r3, r3
 8016bc0:	009b      	lsls	r3, r3, #2
 8016bc2:	b2db      	uxtb	r3, r3
 8016bc4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016bc6:	697b      	ldr	r3, [r7, #20]
 8016bc8:	885b      	ldrh	r3, [r3, #2]
 8016bca:	b29b      	uxth	r3, r3
 8016bcc:	4618      	mov	r0, r3
 8016bce:	f7f6 faab 	bl	800d128 <lwip_htons>
 8016bd2:	4603      	mov	r3, r0
 8016bd4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	891b      	ldrh	r3, [r3, #8]
 8016bda:	89ba      	ldrh	r2, [r7, #12]
 8016bdc:	429a      	cmp	r2, r3
 8016bde:	d204      	bcs.n	8016bea <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016be0:	89bb      	ldrh	r3, [r7, #12]
 8016be2:	4619      	mov	r1, r3
 8016be4:	6878      	ldr	r0, [r7, #4]
 8016be6:	f7f7 fd1b 	bl	800e620 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	895b      	ldrh	r3, [r3, #10]
 8016bee:	89fa      	ldrh	r2, [r7, #14]
 8016bf0:	429a      	cmp	r2, r3
 8016bf2:	d807      	bhi.n	8016c04 <ip4_input+0x74>
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	891b      	ldrh	r3, [r3, #8]
 8016bf8:	89ba      	ldrh	r2, [r7, #12]
 8016bfa:	429a      	cmp	r2, r3
 8016bfc:	d802      	bhi.n	8016c04 <ip4_input+0x74>
 8016bfe:	89fb      	ldrh	r3, [r7, #14]
 8016c00:	2b13      	cmp	r3, #19
 8016c02:	d804      	bhi.n	8016c0e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016c04:	6878      	ldr	r0, [r7, #4]
 8016c06:	f7f7 fe91 	bl	800e92c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	e0db      	b.n	8016dc6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016c0e:	697b      	ldr	r3, [r7, #20]
 8016c10:	691b      	ldr	r3, [r3, #16]
 8016c12:	4a6f      	ldr	r2, [pc, #444]	; (8016dd0 <ip4_input+0x240>)
 8016c14:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016c16:	697b      	ldr	r3, [r7, #20]
 8016c18:	68db      	ldr	r3, [r3, #12]
 8016c1a:	4a6d      	ldr	r2, [pc, #436]	; (8016dd0 <ip4_input+0x240>)
 8016c1c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016c1e:	4b6c      	ldr	r3, [pc, #432]	; (8016dd0 <ip4_input+0x240>)
 8016c20:	695b      	ldr	r3, [r3, #20]
 8016c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016c26:	2be0      	cmp	r3, #224	; 0xe0
 8016c28:	d112      	bne.n	8016c50 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016c2a:	683b      	ldr	r3, [r7, #0]
 8016c2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c30:	f003 0301 	and.w	r3, r3, #1
 8016c34:	b2db      	uxtb	r3, r3
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d007      	beq.n	8016c4a <ip4_input+0xba>
 8016c3a:	683b      	ldr	r3, [r7, #0]
 8016c3c:	3304      	adds	r3, #4
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d002      	beq.n	8016c4a <ip4_input+0xba>
      netif = inp;
 8016c44:	683b      	ldr	r3, [r7, #0]
 8016c46:	613b      	str	r3, [r7, #16]
 8016c48:	e02a      	b.n	8016ca0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	613b      	str	r3, [r7, #16]
 8016c4e:	e027      	b.n	8016ca0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016c50:	6838      	ldr	r0, [r7, #0]
 8016c52:	f7ff ff73 	bl	8016b3c <ip4_input_accept>
 8016c56:	4603      	mov	r3, r0
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d002      	beq.n	8016c62 <ip4_input+0xd2>
      netif = inp;
 8016c5c:	683b      	ldr	r3, [r7, #0]
 8016c5e:	613b      	str	r3, [r7, #16]
 8016c60:	e01e      	b.n	8016ca0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016c62:	2300      	movs	r3, #0
 8016c64:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016c66:	4b5a      	ldr	r3, [pc, #360]	; (8016dd0 <ip4_input+0x240>)
 8016c68:	695b      	ldr	r3, [r3, #20]
 8016c6a:	b2db      	uxtb	r3, r3
 8016c6c:	2b7f      	cmp	r3, #127	; 0x7f
 8016c6e:	d017      	beq.n	8016ca0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016c70:	4b58      	ldr	r3, [pc, #352]	; (8016dd4 <ip4_input+0x244>)
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	613b      	str	r3, [r7, #16]
 8016c76:	e00e      	b.n	8016c96 <ip4_input+0x106>
          if (netif == inp) {
 8016c78:	693a      	ldr	r2, [r7, #16]
 8016c7a:	683b      	ldr	r3, [r7, #0]
 8016c7c:	429a      	cmp	r2, r3
 8016c7e:	d006      	beq.n	8016c8e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016c80:	6938      	ldr	r0, [r7, #16]
 8016c82:	f7ff ff5b 	bl	8016b3c <ip4_input_accept>
 8016c86:	4603      	mov	r3, r0
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d108      	bne.n	8016c9e <ip4_input+0x10e>
 8016c8c:	e000      	b.n	8016c90 <ip4_input+0x100>
            continue;
 8016c8e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016c90:	693b      	ldr	r3, [r7, #16]
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	613b      	str	r3, [r7, #16]
 8016c96:	693b      	ldr	r3, [r7, #16]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d1ed      	bne.n	8016c78 <ip4_input+0xe8>
 8016c9c:	e000      	b.n	8016ca0 <ip4_input+0x110>
            break;
 8016c9e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016ca0:	4b4b      	ldr	r3, [pc, #300]	; (8016dd0 <ip4_input+0x240>)
 8016ca2:	691b      	ldr	r3, [r3, #16]
 8016ca4:	6839      	ldr	r1, [r7, #0]
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	f000 f96e 	bl	8016f88 <ip4_addr_isbroadcast_u32>
 8016cac:	4603      	mov	r3, r0
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d105      	bne.n	8016cbe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016cb2:	4b47      	ldr	r3, [pc, #284]	; (8016dd0 <ip4_input+0x240>)
 8016cb4:	691b      	ldr	r3, [r3, #16]
 8016cb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016cba:	2be0      	cmp	r3, #224	; 0xe0
 8016cbc:	d104      	bne.n	8016cc8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016cbe:	6878      	ldr	r0, [r7, #4]
 8016cc0:	f7f7 fe34 	bl	800e92c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	e07e      	b.n	8016dc6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016cc8:	693b      	ldr	r3, [r7, #16]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d104      	bne.n	8016cd8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016cce:	6878      	ldr	r0, [r7, #4]
 8016cd0:	f7f7 fe2c 	bl	800e92c <pbuf_free>
    return ERR_OK;
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	e076      	b.n	8016dc6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016cd8:	697b      	ldr	r3, [r7, #20]
 8016cda:	88db      	ldrh	r3, [r3, #6]
 8016cdc:	b29b      	uxth	r3, r3
 8016cde:	461a      	mov	r2, r3
 8016ce0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016ce4:	4013      	ands	r3, r2
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d00b      	beq.n	8016d02 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016cea:	6878      	ldr	r0, [r7, #4]
 8016cec:	f000 fdbc 	bl	8017868 <ip4_reass>
 8016cf0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d101      	bne.n	8016cfc <ip4_input+0x16c>
      return ERR_OK;
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	e064      	b.n	8016dc6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	685b      	ldr	r3, [r3, #4]
 8016d00:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016d02:	4a33      	ldr	r2, [pc, #204]	; (8016dd0 <ip4_input+0x240>)
 8016d04:	693b      	ldr	r3, [r7, #16]
 8016d06:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016d08:	4a31      	ldr	r2, [pc, #196]	; (8016dd0 <ip4_input+0x240>)
 8016d0a:	683b      	ldr	r3, [r7, #0]
 8016d0c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016d0e:	4a30      	ldr	r2, [pc, #192]	; (8016dd0 <ip4_input+0x240>)
 8016d10:	697b      	ldr	r3, [r7, #20]
 8016d12:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016d14:	697b      	ldr	r3, [r7, #20]
 8016d16:	781b      	ldrb	r3, [r3, #0]
 8016d18:	f003 030f 	and.w	r3, r3, #15
 8016d1c:	b2db      	uxtb	r3, r3
 8016d1e:	009b      	lsls	r3, r3, #2
 8016d20:	b2db      	uxtb	r3, r3
 8016d22:	b29a      	uxth	r2, r3
 8016d24:	4b2a      	ldr	r3, [pc, #168]	; (8016dd0 <ip4_input+0x240>)
 8016d26:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016d28:	89fb      	ldrh	r3, [r7, #14]
 8016d2a:	4619      	mov	r1, r3
 8016d2c:	6878      	ldr	r0, [r7, #4]
 8016d2e:	f7f7 fd77 	bl	800e820 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016d32:	697b      	ldr	r3, [r7, #20]
 8016d34:	7a5b      	ldrb	r3, [r3, #9]
 8016d36:	2b11      	cmp	r3, #17
 8016d38:	d006      	beq.n	8016d48 <ip4_input+0x1b8>
 8016d3a:	2b11      	cmp	r3, #17
 8016d3c:	dc13      	bgt.n	8016d66 <ip4_input+0x1d6>
 8016d3e:	2b01      	cmp	r3, #1
 8016d40:	d00c      	beq.n	8016d5c <ip4_input+0x1cc>
 8016d42:	2b06      	cmp	r3, #6
 8016d44:	d005      	beq.n	8016d52 <ip4_input+0x1c2>
 8016d46:	e00e      	b.n	8016d66 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016d48:	6839      	ldr	r1, [r7, #0]
 8016d4a:	6878      	ldr	r0, [r7, #4]
 8016d4c:	f7fe faec 	bl	8015328 <udp_input>
        break;
 8016d50:	e026      	b.n	8016da0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016d52:	6839      	ldr	r1, [r7, #0]
 8016d54:	6878      	ldr	r0, [r7, #4]
 8016d56:	f7f9 fea5 	bl	8010aa4 <tcp_input>
        break;
 8016d5a:	e021      	b.n	8016da0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016d5c:	6839      	ldr	r1, [r7, #0]
 8016d5e:	6878      	ldr	r0, [r7, #4]
 8016d60:	f7ff fcee 	bl	8016740 <icmp_input>
        break;
 8016d64:	e01c      	b.n	8016da0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016d66:	4b1a      	ldr	r3, [pc, #104]	; (8016dd0 <ip4_input+0x240>)
 8016d68:	695b      	ldr	r3, [r3, #20]
 8016d6a:	6939      	ldr	r1, [r7, #16]
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	f000 f90b 	bl	8016f88 <ip4_addr_isbroadcast_u32>
 8016d72:	4603      	mov	r3, r0
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d10f      	bne.n	8016d98 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016d78:	4b15      	ldr	r3, [pc, #84]	; (8016dd0 <ip4_input+0x240>)
 8016d7a:	695b      	ldr	r3, [r3, #20]
 8016d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016d80:	2be0      	cmp	r3, #224	; 0xe0
 8016d82:	d009      	beq.n	8016d98 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016d84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016d88:	4619      	mov	r1, r3
 8016d8a:	6878      	ldr	r0, [r7, #4]
 8016d8c:	f7f7 fdbb 	bl	800e906 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016d90:	2102      	movs	r1, #2
 8016d92:	6878      	ldr	r0, [r7, #4]
 8016d94:	f7ff fdd8 	bl	8016948 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016d98:	6878      	ldr	r0, [r7, #4]
 8016d9a:	f7f7 fdc7 	bl	800e92c <pbuf_free>
        break;
 8016d9e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016da0:	4b0b      	ldr	r3, [pc, #44]	; (8016dd0 <ip4_input+0x240>)
 8016da2:	2200      	movs	r2, #0
 8016da4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016da6:	4b0a      	ldr	r3, [pc, #40]	; (8016dd0 <ip4_input+0x240>)
 8016da8:	2200      	movs	r2, #0
 8016daa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016dac:	4b08      	ldr	r3, [pc, #32]	; (8016dd0 <ip4_input+0x240>)
 8016dae:	2200      	movs	r2, #0
 8016db0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016db2:	4b07      	ldr	r3, [pc, #28]	; (8016dd0 <ip4_input+0x240>)
 8016db4:	2200      	movs	r2, #0
 8016db6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016db8:	4b05      	ldr	r3, [pc, #20]	; (8016dd0 <ip4_input+0x240>)
 8016dba:	2200      	movs	r2, #0
 8016dbc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016dbe:	4b04      	ldr	r3, [pc, #16]	; (8016dd0 <ip4_input+0x240>)
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016dc4:	2300      	movs	r3, #0
}
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	3718      	adds	r7, #24
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	bd80      	pop	{r7, pc}
 8016dce:	bf00      	nop
 8016dd0:	2000a2bc 	.word	0x2000a2bc
 8016dd4:	200113ac 	.word	0x200113ac

08016dd8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016dd8:	b580      	push	{r7, lr}
 8016dda:	b08a      	sub	sp, #40	; 0x28
 8016ddc:	af04      	add	r7, sp, #16
 8016dde:	60f8      	str	r0, [r7, #12]
 8016de0:	60b9      	str	r1, [r7, #8]
 8016de2:	607a      	str	r2, [r7, #4]
 8016de4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016de6:	68bb      	ldr	r3, [r7, #8]
 8016de8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d009      	beq.n	8016e04 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016df0:	68bb      	ldr	r3, [r7, #8]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d003      	beq.n	8016dfe <ip4_output_if+0x26>
 8016df6:	68bb      	ldr	r3, [r7, #8]
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d102      	bne.n	8016e04 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e00:	3304      	adds	r3, #4
 8016e02:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016e04:	78fa      	ldrb	r2, [r7, #3]
 8016e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e08:	9302      	str	r3, [sp, #8]
 8016e0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016e0e:	9301      	str	r3, [sp, #4]
 8016e10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016e14:	9300      	str	r3, [sp, #0]
 8016e16:	4613      	mov	r3, r2
 8016e18:	687a      	ldr	r2, [r7, #4]
 8016e1a:	6979      	ldr	r1, [r7, #20]
 8016e1c:	68f8      	ldr	r0, [r7, #12]
 8016e1e:	f000 f805 	bl	8016e2c <ip4_output_if_src>
 8016e22:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016e24:	4618      	mov	r0, r3
 8016e26:	3718      	adds	r7, #24
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	bd80      	pop	{r7, pc}

08016e2c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	b088      	sub	sp, #32
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	60f8      	str	r0, [r7, #12]
 8016e34:	60b9      	str	r1, [r7, #8]
 8016e36:	607a      	str	r2, [r7, #4]
 8016e38:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	7b9b      	ldrb	r3, [r3, #14]
 8016e3e:	2b01      	cmp	r3, #1
 8016e40:	d006      	beq.n	8016e50 <ip4_output_if_src+0x24>
 8016e42:	4b4b      	ldr	r3, [pc, #300]	; (8016f70 <ip4_output_if_src+0x144>)
 8016e44:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016e48:	494a      	ldr	r1, [pc, #296]	; (8016f74 <ip4_output_if_src+0x148>)
 8016e4a:	484b      	ldr	r0, [pc, #300]	; (8016f78 <ip4_output_if_src+0x14c>)
 8016e4c:	f006 fbe8 	bl	801d620 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d060      	beq.n	8016f18 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016e56:	2314      	movs	r3, #20
 8016e58:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016e5a:	2114      	movs	r1, #20
 8016e5c:	68f8      	ldr	r0, [r7, #12]
 8016e5e:	f7f7 fccf 	bl	800e800 <pbuf_add_header>
 8016e62:	4603      	mov	r3, r0
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d002      	beq.n	8016e6e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016e68:	f06f 0301 	mvn.w	r3, #1
 8016e6c:	e07c      	b.n	8016f68 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	685b      	ldr	r3, [r3, #4]
 8016e72:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	895b      	ldrh	r3, [r3, #10]
 8016e78:	2b13      	cmp	r3, #19
 8016e7a:	d806      	bhi.n	8016e8a <ip4_output_if_src+0x5e>
 8016e7c:	4b3c      	ldr	r3, [pc, #240]	; (8016f70 <ip4_output_if_src+0x144>)
 8016e7e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016e82:	493e      	ldr	r1, [pc, #248]	; (8016f7c <ip4_output_if_src+0x150>)
 8016e84:	483c      	ldr	r0, [pc, #240]	; (8016f78 <ip4_output_if_src+0x14c>)
 8016e86:	f006 fbcb 	bl	801d620 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016e8a:	69fb      	ldr	r3, [r7, #28]
 8016e8c:	78fa      	ldrb	r2, [r7, #3]
 8016e8e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016e90:	69fb      	ldr	r3, [r7, #28]
 8016e92:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016e96:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	681a      	ldr	r2, [r3, #0]
 8016e9c:	69fb      	ldr	r3, [r7, #28]
 8016e9e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016ea0:	8b7b      	ldrh	r3, [r7, #26]
 8016ea2:	089b      	lsrs	r3, r3, #2
 8016ea4:	b29b      	uxth	r3, r3
 8016ea6:	b2db      	uxtb	r3, r3
 8016ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016eac:	b2da      	uxtb	r2, r3
 8016eae:	69fb      	ldr	r3, [r7, #28]
 8016eb0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016eb2:	69fb      	ldr	r3, [r7, #28]
 8016eb4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016eb8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	891b      	ldrh	r3, [r3, #8]
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	f7f6 f932 	bl	800d128 <lwip_htons>
 8016ec4:	4603      	mov	r3, r0
 8016ec6:	461a      	mov	r2, r3
 8016ec8:	69fb      	ldr	r3, [r7, #28]
 8016eca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016ecc:	69fb      	ldr	r3, [r7, #28]
 8016ece:	2200      	movs	r2, #0
 8016ed0:	719a      	strb	r2, [r3, #6]
 8016ed2:	2200      	movs	r2, #0
 8016ed4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016ed6:	4b2a      	ldr	r3, [pc, #168]	; (8016f80 <ip4_output_if_src+0x154>)
 8016ed8:	881b      	ldrh	r3, [r3, #0]
 8016eda:	4618      	mov	r0, r3
 8016edc:	f7f6 f924 	bl	800d128 <lwip_htons>
 8016ee0:	4603      	mov	r3, r0
 8016ee2:	461a      	mov	r2, r3
 8016ee4:	69fb      	ldr	r3, [r7, #28]
 8016ee6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016ee8:	4b25      	ldr	r3, [pc, #148]	; (8016f80 <ip4_output_if_src+0x154>)
 8016eea:	881b      	ldrh	r3, [r3, #0]
 8016eec:	3301      	adds	r3, #1
 8016eee:	b29a      	uxth	r2, r3
 8016ef0:	4b23      	ldr	r3, [pc, #140]	; (8016f80 <ip4_output_if_src+0x154>)
 8016ef2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016ef4:	68bb      	ldr	r3, [r7, #8]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d104      	bne.n	8016f04 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016efa:	4b22      	ldr	r3, [pc, #136]	; (8016f84 <ip4_output_if_src+0x158>)
 8016efc:	681a      	ldr	r2, [r3, #0]
 8016efe:	69fb      	ldr	r3, [r7, #28]
 8016f00:	60da      	str	r2, [r3, #12]
 8016f02:	e003      	b.n	8016f0c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016f04:	68bb      	ldr	r3, [r7, #8]
 8016f06:	681a      	ldr	r2, [r3, #0]
 8016f08:	69fb      	ldr	r3, [r7, #28]
 8016f0a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016f0c:	69fb      	ldr	r3, [r7, #28]
 8016f0e:	2200      	movs	r2, #0
 8016f10:	729a      	strb	r2, [r3, #10]
 8016f12:	2200      	movs	r2, #0
 8016f14:	72da      	strb	r2, [r3, #11]
 8016f16:	e00f      	b.n	8016f38 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	895b      	ldrh	r3, [r3, #10]
 8016f1c:	2b13      	cmp	r3, #19
 8016f1e:	d802      	bhi.n	8016f26 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016f20:	f06f 0301 	mvn.w	r3, #1
 8016f24:	e020      	b.n	8016f68 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	685b      	ldr	r3, [r3, #4]
 8016f2a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016f2c:	69fb      	ldr	r3, [r7, #28]
 8016f2e:	691b      	ldr	r3, [r3, #16]
 8016f30:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016f32:	f107 0314 	add.w	r3, r7, #20
 8016f36:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d00c      	beq.n	8016f5a <ip4_output_if_src+0x12e>
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	891a      	ldrh	r2, [r3, #8]
 8016f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016f48:	429a      	cmp	r2, r3
 8016f4a:	d906      	bls.n	8016f5a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016f4c:	687a      	ldr	r2, [r7, #4]
 8016f4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016f50:	68f8      	ldr	r0, [r7, #12]
 8016f52:	f000 fe7d 	bl	8017c50 <ip4_frag>
 8016f56:	4603      	mov	r3, r0
 8016f58:	e006      	b.n	8016f68 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f5c:	695b      	ldr	r3, [r3, #20]
 8016f5e:	687a      	ldr	r2, [r7, #4]
 8016f60:	68f9      	ldr	r1, [r7, #12]
 8016f62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f64:	4798      	blx	r3
 8016f66:	4603      	mov	r3, r0
}
 8016f68:	4618      	mov	r0, r3
 8016f6a:	3720      	adds	r7, #32
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	bd80      	pop	{r7, pc}
 8016f70:	08021a14 	.word	0x08021a14
 8016f74:	08021a48 	.word	0x08021a48
 8016f78:	08021a54 	.word	0x08021a54
 8016f7c:	08021a7c 	.word	0x08021a7c
 8016f80:	2001150a 	.word	0x2001150a
 8016f84:	0802223c 	.word	0x0802223c

08016f88 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016f88:	b480      	push	{r7}
 8016f8a:	b085      	sub	sp, #20
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	6078      	str	r0, [r7, #4]
 8016f90:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016f9c:	d002      	beq.n	8016fa4 <ip4_addr_isbroadcast_u32+0x1c>
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d101      	bne.n	8016fa8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016fa4:	2301      	movs	r3, #1
 8016fa6:	e02a      	b.n	8016ffe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016fa8:	683b      	ldr	r3, [r7, #0]
 8016faa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016fae:	f003 0302 	and.w	r3, r3, #2
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d101      	bne.n	8016fba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	e021      	b.n	8016ffe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016fba:	683b      	ldr	r3, [r7, #0]
 8016fbc:	3304      	adds	r3, #4
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	687a      	ldr	r2, [r7, #4]
 8016fc2:	429a      	cmp	r2, r3
 8016fc4:	d101      	bne.n	8016fca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	e019      	b.n	8016ffe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016fca:	68fa      	ldr	r2, [r7, #12]
 8016fcc:	683b      	ldr	r3, [r7, #0]
 8016fce:	3304      	adds	r3, #4
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	405a      	eors	r2, r3
 8016fd4:	683b      	ldr	r3, [r7, #0]
 8016fd6:	3308      	adds	r3, #8
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	4013      	ands	r3, r2
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d10d      	bne.n	8016ffc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016fe0:	683b      	ldr	r3, [r7, #0]
 8016fe2:	3308      	adds	r3, #8
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	43da      	mvns	r2, r3
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016fec:	683b      	ldr	r3, [r7, #0]
 8016fee:	3308      	adds	r3, #8
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016ff4:	429a      	cmp	r2, r3
 8016ff6:	d101      	bne.n	8016ffc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016ff8:	2301      	movs	r3, #1
 8016ffa:	e000      	b.n	8016ffe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016ffc:	2300      	movs	r3, #0
  }
}
 8016ffe:	4618      	mov	r0, r3
 8017000:	3714      	adds	r7, #20
 8017002:	46bd      	mov	sp, r7
 8017004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017008:	4770      	bx	lr
	...

0801700c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801700c:	b580      	push	{r7, lr}
 801700e:	b08a      	sub	sp, #40	; 0x28
 8017010:	af00      	add	r7, sp, #0
 8017012:	6078      	str	r0, [r7, #4]
 8017014:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8017016:	f107 030c 	add.w	r3, r7, #12
 801701a:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	781b      	ldrb	r3, [r3, #0]
 8017020:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8017024:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017028:	3301      	adds	r3, #1
 801702a:	4a89      	ldr	r2, [pc, #548]	; (8017250 <ip4addr_aton+0x244>)
 801702c:	4413      	add	r3, r2
 801702e:	781b      	ldrb	r3, [r3, #0]
 8017030:	f003 0304 	and.w	r3, r3, #4
 8017034:	2b00      	cmp	r3, #0
 8017036:	d101      	bne.n	801703c <ip4addr_aton+0x30>
      return 0;
 8017038:	2300      	movs	r3, #0
 801703a:	e105      	b.n	8017248 <ip4addr_aton+0x23c>
    }
    val = 0;
 801703c:	2300      	movs	r3, #0
 801703e:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8017040:	230a      	movs	r3, #10
 8017042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8017046:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801704a:	2b30      	cmp	r3, #48	; 0x30
 801704c:	d11c      	bne.n	8017088 <ip4addr_aton+0x7c>
      c = *++cp;
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	3301      	adds	r3, #1
 8017052:	607b      	str	r3, [r7, #4]
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	781b      	ldrb	r3, [r3, #0]
 8017058:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801705c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017060:	2b78      	cmp	r3, #120	; 0x78
 8017062:	d003      	beq.n	801706c <ip4addr_aton+0x60>
 8017064:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017068:	2b58      	cmp	r3, #88	; 0x58
 801706a:	d10a      	bne.n	8017082 <ip4addr_aton+0x76>
        base = 16;
 801706c:	2310      	movs	r3, #16
 801706e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	3301      	adds	r3, #1
 8017076:	607b      	str	r3, [r7, #4]
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	781b      	ldrb	r3, [r3, #0]
 801707c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8017080:	e002      	b.n	8017088 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8017082:	2308      	movs	r3, #8
 8017084:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8017088:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801708c:	3301      	adds	r3, #1
 801708e:	4a70      	ldr	r2, [pc, #448]	; (8017250 <ip4addr_aton+0x244>)
 8017090:	4413      	add	r3, r2
 8017092:	781b      	ldrb	r3, [r3, #0]
 8017094:	f003 0304 	and.w	r3, r3, #4
 8017098:	2b00      	cmp	r3, #0
 801709a:	d011      	beq.n	80170c0 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801709c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80170a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80170a2:	fb03 f202 	mul.w	r2, r3, r2
 80170a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80170aa:	4413      	add	r3, r2
 80170ac:	3b30      	subs	r3, #48	; 0x30
 80170ae:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	3301      	adds	r3, #1
 80170b4:	607b      	str	r3, [r7, #4]
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	781b      	ldrb	r3, [r3, #0]
 80170ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80170be:	e7e3      	b.n	8017088 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 80170c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80170c4:	2b10      	cmp	r3, #16
 80170c6:	d127      	bne.n	8017118 <ip4addr_aton+0x10c>
 80170c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80170cc:	3301      	adds	r3, #1
 80170ce:	4a60      	ldr	r2, [pc, #384]	; (8017250 <ip4addr_aton+0x244>)
 80170d0:	4413      	add	r3, r2
 80170d2:	781b      	ldrb	r3, [r3, #0]
 80170d4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d01d      	beq.n	8017118 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80170dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170de:	011b      	lsls	r3, r3, #4
 80170e0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80170e4:	f102 010a 	add.w	r1, r2, #10
 80170e8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80170ec:	3201      	adds	r2, #1
 80170ee:	4858      	ldr	r0, [pc, #352]	; (8017250 <ip4addr_aton+0x244>)
 80170f0:	4402      	add	r2, r0
 80170f2:	7812      	ldrb	r2, [r2, #0]
 80170f4:	f002 0203 	and.w	r2, r2, #3
 80170f8:	2a02      	cmp	r2, #2
 80170fa:	d101      	bne.n	8017100 <ip4addr_aton+0xf4>
 80170fc:	2261      	movs	r2, #97	; 0x61
 80170fe:	e000      	b.n	8017102 <ip4addr_aton+0xf6>
 8017100:	2241      	movs	r2, #65	; 0x41
 8017102:	1a8a      	subs	r2, r1, r2
 8017104:	4313      	orrs	r3, r2
 8017106:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	3301      	adds	r3, #1
 801710c:	607b      	str	r3, [r7, #4]
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	781b      	ldrb	r3, [r3, #0]
 8017112:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8017116:	e7b7      	b.n	8017088 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8017118:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801711c:	2b2e      	cmp	r3, #46	; 0x2e
 801711e:	d114      	bne.n	801714a <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8017120:	f107 030c 	add.w	r3, r7, #12
 8017124:	330c      	adds	r3, #12
 8017126:	69fa      	ldr	r2, [r7, #28]
 8017128:	429a      	cmp	r2, r3
 801712a:	d301      	bcc.n	8017130 <ip4addr_aton+0x124>
        return 0;
 801712c:	2300      	movs	r3, #0
 801712e:	e08b      	b.n	8017248 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8017130:	69fb      	ldr	r3, [r7, #28]
 8017132:	1d1a      	adds	r2, r3, #4
 8017134:	61fa      	str	r2, [r7, #28]
 8017136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017138:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	3301      	adds	r3, #1
 801713e:	607b      	str	r3, [r7, #4]
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	781b      	ldrb	r3, [r3, #0]
 8017144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8017148:	e76c      	b.n	8017024 <ip4addr_aton+0x18>
    } else {
      break;
 801714a:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801714c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017150:	2b00      	cmp	r3, #0
 8017152:	d00b      	beq.n	801716c <ip4addr_aton+0x160>
 8017154:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017158:	3301      	adds	r3, #1
 801715a:	4a3d      	ldr	r2, [pc, #244]	; (8017250 <ip4addr_aton+0x244>)
 801715c:	4413      	add	r3, r2
 801715e:	781b      	ldrb	r3, [r3, #0]
 8017160:	f003 0308 	and.w	r3, r3, #8
 8017164:	2b00      	cmp	r3, #0
 8017166:	d101      	bne.n	801716c <ip4addr_aton+0x160>
    return 0;
 8017168:	2300      	movs	r3, #0
 801716a:	e06d      	b.n	8017248 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801716c:	f107 030c 	add.w	r3, r7, #12
 8017170:	69fa      	ldr	r2, [r7, #28]
 8017172:	1ad3      	subs	r3, r2, r3
 8017174:	109b      	asrs	r3, r3, #2
 8017176:	3301      	adds	r3, #1
 8017178:	2b04      	cmp	r3, #4
 801717a:	d853      	bhi.n	8017224 <ip4addr_aton+0x218>
 801717c:	a201      	add	r2, pc, #4	; (adr r2, 8017184 <ip4addr_aton+0x178>)
 801717e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017182:	bf00      	nop
 8017184:	08017199 	.word	0x08017199
 8017188:	08017233 	.word	0x08017233
 801718c:	0801719d 	.word	0x0801719d
 8017190:	080171bf 	.word	0x080171bf
 8017194:	080171ed 	.word	0x080171ed

    case 0:
      return 0;       /* initial nondigit */
 8017198:	2300      	movs	r3, #0
 801719a:	e055      	b.n	8017248 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801719e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80171a2:	d301      	bcc.n	80171a8 <ip4addr_aton+0x19c>
        return 0;
 80171a4:	2300      	movs	r3, #0
 80171a6:	e04f      	b.n	8017248 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	2bff      	cmp	r3, #255	; 0xff
 80171ac:	d901      	bls.n	80171b2 <ip4addr_aton+0x1a6>
        return 0;
 80171ae:	2300      	movs	r3, #0
 80171b0:	e04a      	b.n	8017248 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 80171b2:	68fb      	ldr	r3, [r7, #12]
 80171b4:	061b      	lsls	r3, r3, #24
 80171b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171b8:	4313      	orrs	r3, r2
 80171ba:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80171bc:	e03a      	b.n	8017234 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 80171be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80171c4:	d301      	bcc.n	80171ca <ip4addr_aton+0x1be>
        return 0;
 80171c6:	2300      	movs	r3, #0
 80171c8:	e03e      	b.n	8017248 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	2bff      	cmp	r3, #255	; 0xff
 80171ce:	d802      	bhi.n	80171d6 <ip4addr_aton+0x1ca>
 80171d0:	693b      	ldr	r3, [r7, #16]
 80171d2:	2bff      	cmp	r3, #255	; 0xff
 80171d4:	d901      	bls.n	80171da <ip4addr_aton+0x1ce>
        return 0;
 80171d6:	2300      	movs	r3, #0
 80171d8:	e036      	b.n	8017248 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	061a      	lsls	r2, r3, #24
 80171de:	693b      	ldr	r3, [r7, #16]
 80171e0:	041b      	lsls	r3, r3, #16
 80171e2:	4313      	orrs	r3, r2
 80171e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171e6:	4313      	orrs	r3, r2
 80171e8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80171ea:	e023      	b.n	8017234 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 80171ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ee:	2bff      	cmp	r3, #255	; 0xff
 80171f0:	d901      	bls.n	80171f6 <ip4addr_aton+0x1ea>
        return 0;
 80171f2:	2300      	movs	r3, #0
 80171f4:	e028      	b.n	8017248 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	2bff      	cmp	r3, #255	; 0xff
 80171fa:	d805      	bhi.n	8017208 <ip4addr_aton+0x1fc>
 80171fc:	693b      	ldr	r3, [r7, #16]
 80171fe:	2bff      	cmp	r3, #255	; 0xff
 8017200:	d802      	bhi.n	8017208 <ip4addr_aton+0x1fc>
 8017202:	697b      	ldr	r3, [r7, #20]
 8017204:	2bff      	cmp	r3, #255	; 0xff
 8017206:	d901      	bls.n	801720c <ip4addr_aton+0x200>
        return 0;
 8017208:	2300      	movs	r3, #0
 801720a:	e01d      	b.n	8017248 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	061a      	lsls	r2, r3, #24
 8017210:	693b      	ldr	r3, [r7, #16]
 8017212:	041b      	lsls	r3, r3, #16
 8017214:	431a      	orrs	r2, r3
 8017216:	697b      	ldr	r3, [r7, #20]
 8017218:	021b      	lsls	r3, r3, #8
 801721a:	4313      	orrs	r3, r2
 801721c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801721e:	4313      	orrs	r3, r2
 8017220:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8017222:	e007      	b.n	8017234 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8017224:	4b0b      	ldr	r3, [pc, #44]	; (8017254 <ip4addr_aton+0x248>)
 8017226:	22f9      	movs	r2, #249	; 0xf9
 8017228:	490b      	ldr	r1, [pc, #44]	; (8017258 <ip4addr_aton+0x24c>)
 801722a:	480c      	ldr	r0, [pc, #48]	; (801725c <ip4addr_aton+0x250>)
 801722c:	f006 f9f8 	bl	801d620 <iprintf>
      break;
 8017230:	e000      	b.n	8017234 <ip4addr_aton+0x228>
      break;
 8017232:	bf00      	nop
  }
  if (addr) {
 8017234:	683b      	ldr	r3, [r7, #0]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d005      	beq.n	8017246 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801723a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801723c:	f7f5 ff89 	bl	800d152 <lwip_htonl>
 8017240:	4602      	mov	r2, r0
 8017242:	683b      	ldr	r3, [r7, #0]
 8017244:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8017246:	2301      	movs	r3, #1
}
 8017248:	4618      	mov	r0, r3
 801724a:	3728      	adds	r7, #40	; 0x28
 801724c:	46bd      	mov	sp, r7
 801724e:	bd80      	pop	{r7, pc}
 8017250:	0802228c 	.word	0x0802228c
 8017254:	08021aac 	.word	0x08021aac
 8017258:	08021ae8 	.word	0x08021ae8
 801725c:	08021af4 	.word	0x08021af4

08017260 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017260:	b580      	push	{r7, lr}
 8017262:	b084      	sub	sp, #16
 8017264:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017266:	2300      	movs	r3, #0
 8017268:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801726a:	4b12      	ldr	r3, [pc, #72]	; (80172b4 <ip_reass_tmr+0x54>)
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017270:	e018      	b.n	80172a4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	7fdb      	ldrb	r3, [r3, #31]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d00b      	beq.n	8017292 <ip_reass_tmr+0x32>
      r->timer--;
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	7fdb      	ldrb	r3, [r3, #31]
 801727e:	3b01      	subs	r3, #1
 8017280:	b2da      	uxtb	r2, r3
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	60fb      	str	r3, [r7, #12]
 8017290:	e008      	b.n	80172a4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801729c:	68b9      	ldr	r1, [r7, #8]
 801729e:	6878      	ldr	r0, [r7, #4]
 80172a0:	f000 f80a 	bl	80172b8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d1e3      	bne.n	8017272 <ip_reass_tmr+0x12>
    }
  }
}
 80172aa:	bf00      	nop
 80172ac:	bf00      	nop
 80172ae:	3710      	adds	r7, #16
 80172b0:	46bd      	mov	sp, r7
 80172b2:	bd80      	pop	{r7, pc}
 80172b4:	2001150c 	.word	0x2001150c

080172b8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b088      	sub	sp, #32
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
 80172c0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80172c2:	2300      	movs	r3, #0
 80172c4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80172c6:	683a      	ldr	r2, [r7, #0]
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	429a      	cmp	r2, r3
 80172cc:	d105      	bne.n	80172da <ip_reass_free_complete_datagram+0x22>
 80172ce:	4b45      	ldr	r3, [pc, #276]	; (80173e4 <ip_reass_free_complete_datagram+0x12c>)
 80172d0:	22ab      	movs	r2, #171	; 0xab
 80172d2:	4945      	ldr	r1, [pc, #276]	; (80173e8 <ip_reass_free_complete_datagram+0x130>)
 80172d4:	4845      	ldr	r0, [pc, #276]	; (80173ec <ip_reass_free_complete_datagram+0x134>)
 80172d6:	f006 f9a3 	bl	801d620 <iprintf>
  if (prev != NULL) {
 80172da:	683b      	ldr	r3, [r7, #0]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d00a      	beq.n	80172f6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80172e0:	683b      	ldr	r3, [r7, #0]
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	687a      	ldr	r2, [r7, #4]
 80172e6:	429a      	cmp	r2, r3
 80172e8:	d005      	beq.n	80172f6 <ip_reass_free_complete_datagram+0x3e>
 80172ea:	4b3e      	ldr	r3, [pc, #248]	; (80173e4 <ip_reass_free_complete_datagram+0x12c>)
 80172ec:	22ad      	movs	r2, #173	; 0xad
 80172ee:	4940      	ldr	r1, [pc, #256]	; (80173f0 <ip_reass_free_complete_datagram+0x138>)
 80172f0:	483e      	ldr	r0, [pc, #248]	; (80173ec <ip_reass_free_complete_datagram+0x134>)
 80172f2:	f006 f995 	bl	801d620 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	685b      	ldr	r3, [r3, #4]
 80172fa:	685b      	ldr	r3, [r3, #4]
 80172fc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80172fe:	697b      	ldr	r3, [r7, #20]
 8017300:	889b      	ldrh	r3, [r3, #4]
 8017302:	b29b      	uxth	r3, r3
 8017304:	2b00      	cmp	r3, #0
 8017306:	d12a      	bne.n	801735e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	685b      	ldr	r3, [r3, #4]
 801730c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801730e:	697b      	ldr	r3, [r7, #20]
 8017310:	681a      	ldr	r2, [r3, #0]
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017316:	69bb      	ldr	r3, [r7, #24]
 8017318:	6858      	ldr	r0, [r3, #4]
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	3308      	adds	r3, #8
 801731e:	2214      	movs	r2, #20
 8017320:	4619      	mov	r1, r3
 8017322:	f006 f967 	bl	801d5f4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017326:	2101      	movs	r1, #1
 8017328:	69b8      	ldr	r0, [r7, #24]
 801732a:	f7ff fb1d 	bl	8016968 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801732e:	69b8      	ldr	r0, [r7, #24]
 8017330:	f7f7 fb8a 	bl	800ea48 <pbuf_clen>
 8017334:	4603      	mov	r3, r0
 8017336:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017338:	8bfa      	ldrh	r2, [r7, #30]
 801733a:	8a7b      	ldrh	r3, [r7, #18]
 801733c:	4413      	add	r3, r2
 801733e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017342:	db05      	blt.n	8017350 <ip_reass_free_complete_datagram+0x98>
 8017344:	4b27      	ldr	r3, [pc, #156]	; (80173e4 <ip_reass_free_complete_datagram+0x12c>)
 8017346:	22bc      	movs	r2, #188	; 0xbc
 8017348:	492a      	ldr	r1, [pc, #168]	; (80173f4 <ip_reass_free_complete_datagram+0x13c>)
 801734a:	4828      	ldr	r0, [pc, #160]	; (80173ec <ip_reass_free_complete_datagram+0x134>)
 801734c:	f006 f968 	bl	801d620 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017350:	8bfa      	ldrh	r2, [r7, #30]
 8017352:	8a7b      	ldrh	r3, [r7, #18]
 8017354:	4413      	add	r3, r2
 8017356:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017358:	69b8      	ldr	r0, [r7, #24]
 801735a:	f7f7 fae7 	bl	800e92c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	685b      	ldr	r3, [r3, #4]
 8017362:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017364:	e01f      	b.n	80173a6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017366:	69bb      	ldr	r3, [r7, #24]
 8017368:	685b      	ldr	r3, [r3, #4]
 801736a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801736c:	69bb      	ldr	r3, [r7, #24]
 801736e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017370:	697b      	ldr	r3, [r7, #20]
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017376:	68f8      	ldr	r0, [r7, #12]
 8017378:	f7f7 fb66 	bl	800ea48 <pbuf_clen>
 801737c:	4603      	mov	r3, r0
 801737e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017380:	8bfa      	ldrh	r2, [r7, #30]
 8017382:	8a7b      	ldrh	r3, [r7, #18]
 8017384:	4413      	add	r3, r2
 8017386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801738a:	db05      	blt.n	8017398 <ip_reass_free_complete_datagram+0xe0>
 801738c:	4b15      	ldr	r3, [pc, #84]	; (80173e4 <ip_reass_free_complete_datagram+0x12c>)
 801738e:	22cc      	movs	r2, #204	; 0xcc
 8017390:	4918      	ldr	r1, [pc, #96]	; (80173f4 <ip_reass_free_complete_datagram+0x13c>)
 8017392:	4816      	ldr	r0, [pc, #88]	; (80173ec <ip_reass_free_complete_datagram+0x134>)
 8017394:	f006 f944 	bl	801d620 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017398:	8bfa      	ldrh	r2, [r7, #30]
 801739a:	8a7b      	ldrh	r3, [r7, #18]
 801739c:	4413      	add	r3, r2
 801739e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80173a0:	68f8      	ldr	r0, [r7, #12]
 80173a2:	f7f7 fac3 	bl	800e92c <pbuf_free>
  while (p != NULL) {
 80173a6:	69bb      	ldr	r3, [r7, #24]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d1dc      	bne.n	8017366 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80173ac:	6839      	ldr	r1, [r7, #0]
 80173ae:	6878      	ldr	r0, [r7, #4]
 80173b0:	f000 f8c2 	bl	8017538 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80173b4:	4b10      	ldr	r3, [pc, #64]	; (80173f8 <ip_reass_free_complete_datagram+0x140>)
 80173b6:	881b      	ldrh	r3, [r3, #0]
 80173b8:	8bfa      	ldrh	r2, [r7, #30]
 80173ba:	429a      	cmp	r2, r3
 80173bc:	d905      	bls.n	80173ca <ip_reass_free_complete_datagram+0x112>
 80173be:	4b09      	ldr	r3, [pc, #36]	; (80173e4 <ip_reass_free_complete_datagram+0x12c>)
 80173c0:	22d2      	movs	r2, #210	; 0xd2
 80173c2:	490e      	ldr	r1, [pc, #56]	; (80173fc <ip_reass_free_complete_datagram+0x144>)
 80173c4:	4809      	ldr	r0, [pc, #36]	; (80173ec <ip_reass_free_complete_datagram+0x134>)
 80173c6:	f006 f92b 	bl	801d620 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80173ca:	4b0b      	ldr	r3, [pc, #44]	; (80173f8 <ip_reass_free_complete_datagram+0x140>)
 80173cc:	881a      	ldrh	r2, [r3, #0]
 80173ce:	8bfb      	ldrh	r3, [r7, #30]
 80173d0:	1ad3      	subs	r3, r2, r3
 80173d2:	b29a      	uxth	r2, r3
 80173d4:	4b08      	ldr	r3, [pc, #32]	; (80173f8 <ip_reass_free_complete_datagram+0x140>)
 80173d6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80173d8:	8bfb      	ldrh	r3, [r7, #30]
}
 80173da:	4618      	mov	r0, r3
 80173dc:	3720      	adds	r7, #32
 80173de:	46bd      	mov	sp, r7
 80173e0:	bd80      	pop	{r7, pc}
 80173e2:	bf00      	nop
 80173e4:	08021b1c 	.word	0x08021b1c
 80173e8:	08021b58 	.word	0x08021b58
 80173ec:	08021b64 	.word	0x08021b64
 80173f0:	08021b8c 	.word	0x08021b8c
 80173f4:	08021ba0 	.word	0x08021ba0
 80173f8:	20011510 	.word	0x20011510
 80173fc:	08021bc0 	.word	0x08021bc0

08017400 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017400:	b580      	push	{r7, lr}
 8017402:	b08a      	sub	sp, #40	; 0x28
 8017404:	af00      	add	r7, sp, #0
 8017406:	6078      	str	r0, [r7, #4]
 8017408:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801740a:	2300      	movs	r3, #0
 801740c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801740e:	2300      	movs	r3, #0
 8017410:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017412:	2300      	movs	r3, #0
 8017414:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017416:	2300      	movs	r3, #0
 8017418:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801741a:	2300      	movs	r3, #0
 801741c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801741e:	4b28      	ldr	r3, [pc, #160]	; (80174c0 <ip_reass_remove_oldest_datagram+0xc0>)
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017424:	e030      	b.n	8017488 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017428:	695a      	ldr	r2, [r3, #20]
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	68db      	ldr	r3, [r3, #12]
 801742e:	429a      	cmp	r2, r3
 8017430:	d10c      	bne.n	801744c <ip_reass_remove_oldest_datagram+0x4c>
 8017432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017434:	699a      	ldr	r2, [r3, #24]
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	691b      	ldr	r3, [r3, #16]
 801743a:	429a      	cmp	r2, r3
 801743c:	d106      	bne.n	801744c <ip_reass_remove_oldest_datagram+0x4c>
 801743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017440:	899a      	ldrh	r2, [r3, #12]
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	889b      	ldrh	r3, [r3, #4]
 8017446:	b29b      	uxth	r3, r3
 8017448:	429a      	cmp	r2, r3
 801744a:	d014      	beq.n	8017476 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801744c:	693b      	ldr	r3, [r7, #16]
 801744e:	3301      	adds	r3, #1
 8017450:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017452:	6a3b      	ldr	r3, [r7, #32]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d104      	bne.n	8017462 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801745a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801745c:	69fb      	ldr	r3, [r7, #28]
 801745e:	61bb      	str	r3, [r7, #24]
 8017460:	e009      	b.n	8017476 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017464:	7fda      	ldrb	r2, [r3, #31]
 8017466:	6a3b      	ldr	r3, [r7, #32]
 8017468:	7fdb      	ldrb	r3, [r3, #31]
 801746a:	429a      	cmp	r2, r3
 801746c:	d803      	bhi.n	8017476 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017470:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017472:	69fb      	ldr	r3, [r7, #28]
 8017474:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d001      	beq.n	8017482 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017480:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801748a:	2b00      	cmp	r3, #0
 801748c:	d1cb      	bne.n	8017426 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801748e:	6a3b      	ldr	r3, [r7, #32]
 8017490:	2b00      	cmp	r3, #0
 8017492:	d008      	beq.n	80174a6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017494:	69b9      	ldr	r1, [r7, #24]
 8017496:	6a38      	ldr	r0, [r7, #32]
 8017498:	f7ff ff0e 	bl	80172b8 <ip_reass_free_complete_datagram>
 801749c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801749e:	697a      	ldr	r2, [r7, #20]
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	4413      	add	r3, r2
 80174a4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80174a6:	697a      	ldr	r2, [r7, #20]
 80174a8:	683b      	ldr	r3, [r7, #0]
 80174aa:	429a      	cmp	r2, r3
 80174ac:	da02      	bge.n	80174b4 <ip_reass_remove_oldest_datagram+0xb4>
 80174ae:	693b      	ldr	r3, [r7, #16]
 80174b0:	2b01      	cmp	r3, #1
 80174b2:	dcac      	bgt.n	801740e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80174b4:	697b      	ldr	r3, [r7, #20]
}
 80174b6:	4618      	mov	r0, r3
 80174b8:	3728      	adds	r7, #40	; 0x28
 80174ba:	46bd      	mov	sp, r7
 80174bc:	bd80      	pop	{r7, pc}
 80174be:	bf00      	nop
 80174c0:	2001150c 	.word	0x2001150c

080174c4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b084      	sub	sp, #16
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	6078      	str	r0, [r7, #4]
 80174cc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80174ce:	2004      	movs	r0, #4
 80174d0:	f7f6 fb12 	bl	800daf8 <memp_malloc>
 80174d4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d110      	bne.n	80174fe <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80174dc:	6839      	ldr	r1, [r7, #0]
 80174de:	6878      	ldr	r0, [r7, #4]
 80174e0:	f7ff ff8e 	bl	8017400 <ip_reass_remove_oldest_datagram>
 80174e4:	4602      	mov	r2, r0
 80174e6:	683b      	ldr	r3, [r7, #0]
 80174e8:	4293      	cmp	r3, r2
 80174ea:	dc03      	bgt.n	80174f4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80174ec:	2004      	movs	r0, #4
 80174ee:	f7f6 fb03 	bl	800daf8 <memp_malloc>
 80174f2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d101      	bne.n	80174fe <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80174fa:	2300      	movs	r3, #0
 80174fc:	e016      	b.n	801752c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80174fe:	2220      	movs	r2, #32
 8017500:	2100      	movs	r1, #0
 8017502:	68f8      	ldr	r0, [r7, #12]
 8017504:	f006 f884 	bl	801d610 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	220f      	movs	r2, #15
 801750c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801750e:	4b09      	ldr	r3, [pc, #36]	; (8017534 <ip_reass_enqueue_new_datagram+0x70>)
 8017510:	681a      	ldr	r2, [r3, #0]
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017516:	4a07      	ldr	r2, [pc, #28]	; (8017534 <ip_reass_enqueue_new_datagram+0x70>)
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	3308      	adds	r3, #8
 8017520:	2214      	movs	r2, #20
 8017522:	6879      	ldr	r1, [r7, #4]
 8017524:	4618      	mov	r0, r3
 8017526:	f006 f865 	bl	801d5f4 <memcpy>
  return ipr;
 801752a:	68fb      	ldr	r3, [r7, #12]
}
 801752c:	4618      	mov	r0, r3
 801752e:	3710      	adds	r7, #16
 8017530:	46bd      	mov	sp, r7
 8017532:	bd80      	pop	{r7, pc}
 8017534:	2001150c 	.word	0x2001150c

08017538 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017538:	b580      	push	{r7, lr}
 801753a:	b082      	sub	sp, #8
 801753c:	af00      	add	r7, sp, #0
 801753e:	6078      	str	r0, [r7, #4]
 8017540:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017542:	4b10      	ldr	r3, [pc, #64]	; (8017584 <ip_reass_dequeue_datagram+0x4c>)
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	687a      	ldr	r2, [r7, #4]
 8017548:	429a      	cmp	r2, r3
 801754a:	d104      	bne.n	8017556 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	4a0c      	ldr	r2, [pc, #48]	; (8017584 <ip_reass_dequeue_datagram+0x4c>)
 8017552:	6013      	str	r3, [r2, #0]
 8017554:	e00d      	b.n	8017572 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017556:	683b      	ldr	r3, [r7, #0]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d106      	bne.n	801756a <ip_reass_dequeue_datagram+0x32>
 801755c:	4b0a      	ldr	r3, [pc, #40]	; (8017588 <ip_reass_dequeue_datagram+0x50>)
 801755e:	f240 1245 	movw	r2, #325	; 0x145
 8017562:	490a      	ldr	r1, [pc, #40]	; (801758c <ip_reass_dequeue_datagram+0x54>)
 8017564:	480a      	ldr	r0, [pc, #40]	; (8017590 <ip_reass_dequeue_datagram+0x58>)
 8017566:	f006 f85b 	bl	801d620 <iprintf>
    prev->next = ipr->next;
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	681a      	ldr	r2, [r3, #0]
 801756e:	683b      	ldr	r3, [r7, #0]
 8017570:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017572:	6879      	ldr	r1, [r7, #4]
 8017574:	2004      	movs	r0, #4
 8017576:	f7f6 fb35 	bl	800dbe4 <memp_free>
}
 801757a:	bf00      	nop
 801757c:	3708      	adds	r7, #8
 801757e:	46bd      	mov	sp, r7
 8017580:	bd80      	pop	{r7, pc}
 8017582:	bf00      	nop
 8017584:	2001150c 	.word	0x2001150c
 8017588:	08021b1c 	.word	0x08021b1c
 801758c:	08021be4 	.word	0x08021be4
 8017590:	08021b64 	.word	0x08021b64

08017594 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017594:	b580      	push	{r7, lr}
 8017596:	b08c      	sub	sp, #48	; 0x30
 8017598:	af00      	add	r7, sp, #0
 801759a:	60f8      	str	r0, [r7, #12]
 801759c:	60b9      	str	r1, [r7, #8]
 801759e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80175a0:	2300      	movs	r3, #0
 80175a2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80175a4:	2301      	movs	r3, #1
 80175a6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80175a8:	68bb      	ldr	r3, [r7, #8]
 80175aa:	685b      	ldr	r3, [r3, #4]
 80175ac:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80175ae:	69fb      	ldr	r3, [r7, #28]
 80175b0:	885b      	ldrh	r3, [r3, #2]
 80175b2:	b29b      	uxth	r3, r3
 80175b4:	4618      	mov	r0, r3
 80175b6:	f7f5 fdb7 	bl	800d128 <lwip_htons>
 80175ba:	4603      	mov	r3, r0
 80175bc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80175be:	69fb      	ldr	r3, [r7, #28]
 80175c0:	781b      	ldrb	r3, [r3, #0]
 80175c2:	f003 030f 	and.w	r3, r3, #15
 80175c6:	b2db      	uxtb	r3, r3
 80175c8:	009b      	lsls	r3, r3, #2
 80175ca:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80175cc:	7e7b      	ldrb	r3, [r7, #25]
 80175ce:	b29b      	uxth	r3, r3
 80175d0:	8b7a      	ldrh	r2, [r7, #26]
 80175d2:	429a      	cmp	r2, r3
 80175d4:	d202      	bcs.n	80175dc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80175d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80175da:	e135      	b.n	8017848 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80175dc:	7e7b      	ldrb	r3, [r7, #25]
 80175de:	b29b      	uxth	r3, r3
 80175e0:	8b7a      	ldrh	r2, [r7, #26]
 80175e2:	1ad3      	subs	r3, r2, r3
 80175e4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80175e6:	69fb      	ldr	r3, [r7, #28]
 80175e8:	88db      	ldrh	r3, [r3, #6]
 80175ea:	b29b      	uxth	r3, r3
 80175ec:	4618      	mov	r0, r3
 80175ee:	f7f5 fd9b 	bl	800d128 <lwip_htons>
 80175f2:	4603      	mov	r3, r0
 80175f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80175f8:	b29b      	uxth	r3, r3
 80175fa:	00db      	lsls	r3, r3, #3
 80175fc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80175fe:	68bb      	ldr	r3, [r7, #8]
 8017600:	685b      	ldr	r3, [r3, #4]
 8017602:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017606:	2200      	movs	r2, #0
 8017608:	701a      	strb	r2, [r3, #0]
 801760a:	2200      	movs	r2, #0
 801760c:	705a      	strb	r2, [r3, #1]
 801760e:	2200      	movs	r2, #0
 8017610:	709a      	strb	r2, [r3, #2]
 8017612:	2200      	movs	r2, #0
 8017614:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017618:	8afa      	ldrh	r2, [r7, #22]
 801761a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801761c:	8afa      	ldrh	r2, [r7, #22]
 801761e:	8b7b      	ldrh	r3, [r7, #26]
 8017620:	4413      	add	r3, r2
 8017622:	b29a      	uxth	r2, r3
 8017624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017626:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801762a:	88db      	ldrh	r3, [r3, #6]
 801762c:	b29b      	uxth	r3, r3
 801762e:	8afa      	ldrh	r2, [r7, #22]
 8017630:	429a      	cmp	r2, r3
 8017632:	d902      	bls.n	801763a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017638:	e106      	b.n	8017848 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	685b      	ldr	r3, [r3, #4]
 801763e:	627b      	str	r3, [r7, #36]	; 0x24
 8017640:	e068      	b.n	8017714 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017644:	685b      	ldr	r3, [r3, #4]
 8017646:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801764a:	889b      	ldrh	r3, [r3, #4]
 801764c:	b29a      	uxth	r2, r3
 801764e:	693b      	ldr	r3, [r7, #16]
 8017650:	889b      	ldrh	r3, [r3, #4]
 8017652:	b29b      	uxth	r3, r3
 8017654:	429a      	cmp	r2, r3
 8017656:	d235      	bcs.n	80176c4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801765a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801765c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801765e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017660:	2b00      	cmp	r3, #0
 8017662:	d020      	beq.n	80176a6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017666:	889b      	ldrh	r3, [r3, #4]
 8017668:	b29a      	uxth	r2, r3
 801766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801766c:	88db      	ldrh	r3, [r3, #6]
 801766e:	b29b      	uxth	r3, r3
 8017670:	429a      	cmp	r2, r3
 8017672:	d307      	bcc.n	8017684 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017676:	88db      	ldrh	r3, [r3, #6]
 8017678:	b29a      	uxth	r2, r3
 801767a:	693b      	ldr	r3, [r7, #16]
 801767c:	889b      	ldrh	r3, [r3, #4]
 801767e:	b29b      	uxth	r3, r3
 8017680:	429a      	cmp	r2, r3
 8017682:	d902      	bls.n	801768a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017688:	e0de      	b.n	8017848 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801768c:	68ba      	ldr	r2, [r7, #8]
 801768e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017692:	88db      	ldrh	r3, [r3, #6]
 8017694:	b29a      	uxth	r2, r3
 8017696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017698:	889b      	ldrh	r3, [r3, #4]
 801769a:	b29b      	uxth	r3, r3
 801769c:	429a      	cmp	r2, r3
 801769e:	d03d      	beq.n	801771c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80176a0:	2300      	movs	r3, #0
 80176a2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80176a4:	e03a      	b.n	801771c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80176a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176a8:	88db      	ldrh	r3, [r3, #6]
 80176aa:	b29a      	uxth	r2, r3
 80176ac:	693b      	ldr	r3, [r7, #16]
 80176ae:	889b      	ldrh	r3, [r3, #4]
 80176b0:	b29b      	uxth	r3, r3
 80176b2:	429a      	cmp	r2, r3
 80176b4:	d902      	bls.n	80176bc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80176b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80176ba:	e0c5      	b.n	8017848 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	68ba      	ldr	r2, [r7, #8]
 80176c0:	605a      	str	r2, [r3, #4]
      break;
 80176c2:	e02b      	b.n	801771c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80176c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176c6:	889b      	ldrh	r3, [r3, #4]
 80176c8:	b29a      	uxth	r2, r3
 80176ca:	693b      	ldr	r3, [r7, #16]
 80176cc:	889b      	ldrh	r3, [r3, #4]
 80176ce:	b29b      	uxth	r3, r3
 80176d0:	429a      	cmp	r2, r3
 80176d2:	d102      	bne.n	80176da <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80176d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80176d8:	e0b6      	b.n	8017848 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80176da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176dc:	889b      	ldrh	r3, [r3, #4]
 80176de:	b29a      	uxth	r2, r3
 80176e0:	693b      	ldr	r3, [r7, #16]
 80176e2:	88db      	ldrh	r3, [r3, #6]
 80176e4:	b29b      	uxth	r3, r3
 80176e6:	429a      	cmp	r2, r3
 80176e8:	d202      	bcs.n	80176f0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80176ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80176ee:	e0ab      	b.n	8017848 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80176f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d009      	beq.n	801770a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80176f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176f8:	88db      	ldrh	r3, [r3, #6]
 80176fa:	b29a      	uxth	r2, r3
 80176fc:	693b      	ldr	r3, [r7, #16]
 80176fe:	889b      	ldrh	r3, [r3, #4]
 8017700:	b29b      	uxth	r3, r3
 8017702:	429a      	cmp	r2, r3
 8017704:	d001      	beq.n	801770a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017706:	2300      	movs	r3, #0
 8017708:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801770a:	693b      	ldr	r3, [r7, #16]
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017710:	693b      	ldr	r3, [r7, #16]
 8017712:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017716:	2b00      	cmp	r3, #0
 8017718:	d193      	bne.n	8017642 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801771a:	e000      	b.n	801771e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801771c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017720:	2b00      	cmp	r3, #0
 8017722:	d12d      	bne.n	8017780 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017726:	2b00      	cmp	r3, #0
 8017728:	d01c      	beq.n	8017764 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801772a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801772c:	88db      	ldrh	r3, [r3, #6]
 801772e:	b29a      	uxth	r2, r3
 8017730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017732:	889b      	ldrh	r3, [r3, #4]
 8017734:	b29b      	uxth	r3, r3
 8017736:	429a      	cmp	r2, r3
 8017738:	d906      	bls.n	8017748 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801773a:	4b45      	ldr	r3, [pc, #276]	; (8017850 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801773c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017740:	4944      	ldr	r1, [pc, #272]	; (8017854 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017742:	4845      	ldr	r0, [pc, #276]	; (8017858 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017744:	f005 ff6c 	bl	801d620 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801774a:	68ba      	ldr	r2, [r7, #8]
 801774c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017750:	88db      	ldrh	r3, [r3, #6]
 8017752:	b29a      	uxth	r2, r3
 8017754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017756:	889b      	ldrh	r3, [r3, #4]
 8017758:	b29b      	uxth	r3, r3
 801775a:	429a      	cmp	r2, r3
 801775c:	d010      	beq.n	8017780 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801775e:	2300      	movs	r3, #0
 8017760:	623b      	str	r3, [r7, #32]
 8017762:	e00d      	b.n	8017780 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	685b      	ldr	r3, [r3, #4]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d006      	beq.n	801777a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801776c:	4b38      	ldr	r3, [pc, #224]	; (8017850 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801776e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017772:	493a      	ldr	r1, [pc, #232]	; (801785c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017774:	4838      	ldr	r0, [pc, #224]	; (8017858 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017776:	f005 ff53 	bl	801d620 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	68ba      	ldr	r2, [r7, #8]
 801777e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	2b00      	cmp	r3, #0
 8017784:	d105      	bne.n	8017792 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	7f9b      	ldrb	r3, [r3, #30]
 801778a:	f003 0301 	and.w	r3, r3, #1
 801778e:	2b00      	cmp	r3, #0
 8017790:	d059      	beq.n	8017846 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017792:	6a3b      	ldr	r3, [r7, #32]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d04f      	beq.n	8017838 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	685b      	ldr	r3, [r3, #4]
 801779c:	2b00      	cmp	r3, #0
 801779e:	d006      	beq.n	80177ae <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	685b      	ldr	r3, [r3, #4]
 80177a4:	685b      	ldr	r3, [r3, #4]
 80177a6:	889b      	ldrh	r3, [r3, #4]
 80177a8:	b29b      	uxth	r3, r3
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d002      	beq.n	80177b4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80177ae:	2300      	movs	r3, #0
 80177b0:	623b      	str	r3, [r7, #32]
 80177b2:	e041      	b.n	8017838 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80177b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177b6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80177b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80177be:	e012      	b.n	80177e6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80177c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177c2:	685b      	ldr	r3, [r3, #4]
 80177c4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80177c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177c8:	88db      	ldrh	r3, [r3, #6]
 80177ca:	b29a      	uxth	r2, r3
 80177cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177ce:	889b      	ldrh	r3, [r3, #4]
 80177d0:	b29b      	uxth	r3, r3
 80177d2:	429a      	cmp	r2, r3
 80177d4:	d002      	beq.n	80177dc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80177d6:	2300      	movs	r3, #0
 80177d8:	623b      	str	r3, [r7, #32]
            break;
 80177da:	e007      	b.n	80177ec <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80177dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177de:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80177e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80177e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d1e9      	bne.n	80177c0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80177ec:	6a3b      	ldr	r3, [r7, #32]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d022      	beq.n	8017838 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	685b      	ldr	r3, [r3, #4]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d106      	bne.n	8017808 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80177fa:	4b15      	ldr	r3, [pc, #84]	; (8017850 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80177fc:	f240 12df 	movw	r2, #479	; 0x1df
 8017800:	4917      	ldr	r1, [pc, #92]	; (8017860 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017802:	4815      	ldr	r0, [pc, #84]	; (8017858 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017804:	f005 ff0c 	bl	801d620 <iprintf>
          LWIP_ASSERT("sanity check",
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	685b      	ldr	r3, [r3, #4]
 801780c:	685b      	ldr	r3, [r3, #4]
 801780e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017810:	429a      	cmp	r2, r3
 8017812:	d106      	bne.n	8017822 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017814:	4b0e      	ldr	r3, [pc, #56]	; (8017850 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017816:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801781a:	4911      	ldr	r1, [pc, #68]	; (8017860 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801781c:	480e      	ldr	r0, [pc, #56]	; (8017858 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801781e:	f005 feff 	bl	801d620 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	2b00      	cmp	r3, #0
 8017828:	d006      	beq.n	8017838 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801782a:	4b09      	ldr	r3, [pc, #36]	; (8017850 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801782c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017830:	490c      	ldr	r1, [pc, #48]	; (8017864 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017832:	4809      	ldr	r0, [pc, #36]	; (8017858 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017834:	f005 fef4 	bl	801d620 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017838:	6a3b      	ldr	r3, [r7, #32]
 801783a:	2b00      	cmp	r3, #0
 801783c:	bf14      	ite	ne
 801783e:	2301      	movne	r3, #1
 8017840:	2300      	moveq	r3, #0
 8017842:	b2db      	uxtb	r3, r3
 8017844:	e000      	b.n	8017848 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017846:	2300      	movs	r3, #0
}
 8017848:	4618      	mov	r0, r3
 801784a:	3730      	adds	r7, #48	; 0x30
 801784c:	46bd      	mov	sp, r7
 801784e:	bd80      	pop	{r7, pc}
 8017850:	08021b1c 	.word	0x08021b1c
 8017854:	08021c00 	.word	0x08021c00
 8017858:	08021b64 	.word	0x08021b64
 801785c:	08021c20 	.word	0x08021c20
 8017860:	08021c58 	.word	0x08021c58
 8017864:	08021c68 	.word	0x08021c68

08017868 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017868:	b580      	push	{r7, lr}
 801786a:	b08e      	sub	sp, #56	; 0x38
 801786c:	af00      	add	r7, sp, #0
 801786e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	685b      	ldr	r3, [r3, #4]
 8017874:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017878:	781b      	ldrb	r3, [r3, #0]
 801787a:	f003 030f 	and.w	r3, r3, #15
 801787e:	b2db      	uxtb	r3, r3
 8017880:	009b      	lsls	r3, r3, #2
 8017882:	b2db      	uxtb	r3, r3
 8017884:	2b14      	cmp	r3, #20
 8017886:	f040 8171 	bne.w	8017b6c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801788c:	88db      	ldrh	r3, [r3, #6]
 801788e:	b29b      	uxth	r3, r3
 8017890:	4618      	mov	r0, r3
 8017892:	f7f5 fc49 	bl	800d128 <lwip_htons>
 8017896:	4603      	mov	r3, r0
 8017898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801789c:	b29b      	uxth	r3, r3
 801789e:	00db      	lsls	r3, r3, #3
 80178a0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80178a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178a4:	885b      	ldrh	r3, [r3, #2]
 80178a6:	b29b      	uxth	r3, r3
 80178a8:	4618      	mov	r0, r3
 80178aa:	f7f5 fc3d 	bl	800d128 <lwip_htons>
 80178ae:	4603      	mov	r3, r0
 80178b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80178b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178b4:	781b      	ldrb	r3, [r3, #0]
 80178b6:	f003 030f 	and.w	r3, r3, #15
 80178ba:	b2db      	uxtb	r3, r3
 80178bc:	009b      	lsls	r3, r3, #2
 80178be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80178c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80178c6:	b29b      	uxth	r3, r3
 80178c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80178ca:	429a      	cmp	r2, r3
 80178cc:	f0c0 8150 	bcc.w	8017b70 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80178d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80178d4:	b29b      	uxth	r3, r3
 80178d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80178d8:	1ad3      	subs	r3, r2, r3
 80178da:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80178dc:	6878      	ldr	r0, [r7, #4]
 80178de:	f7f7 f8b3 	bl	800ea48 <pbuf_clen>
 80178e2:	4603      	mov	r3, r0
 80178e4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80178e6:	4b8c      	ldr	r3, [pc, #560]	; (8017b18 <ip4_reass+0x2b0>)
 80178e8:	881b      	ldrh	r3, [r3, #0]
 80178ea:	461a      	mov	r2, r3
 80178ec:	8c3b      	ldrh	r3, [r7, #32]
 80178ee:	4413      	add	r3, r2
 80178f0:	2b0a      	cmp	r3, #10
 80178f2:	dd10      	ble.n	8017916 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80178f4:	8c3b      	ldrh	r3, [r7, #32]
 80178f6:	4619      	mov	r1, r3
 80178f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80178fa:	f7ff fd81 	bl	8017400 <ip_reass_remove_oldest_datagram>
 80178fe:	4603      	mov	r3, r0
 8017900:	2b00      	cmp	r3, #0
 8017902:	f000 8137 	beq.w	8017b74 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017906:	4b84      	ldr	r3, [pc, #528]	; (8017b18 <ip4_reass+0x2b0>)
 8017908:	881b      	ldrh	r3, [r3, #0]
 801790a:	461a      	mov	r2, r3
 801790c:	8c3b      	ldrh	r3, [r7, #32]
 801790e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017910:	2b0a      	cmp	r3, #10
 8017912:	f300 812f 	bgt.w	8017b74 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017916:	4b81      	ldr	r3, [pc, #516]	; (8017b1c <ip4_reass+0x2b4>)
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	633b      	str	r3, [r7, #48]	; 0x30
 801791c:	e015      	b.n	801794a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017920:	695a      	ldr	r2, [r3, #20]
 8017922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017924:	68db      	ldr	r3, [r3, #12]
 8017926:	429a      	cmp	r2, r3
 8017928:	d10c      	bne.n	8017944 <ip4_reass+0xdc>
 801792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801792c:	699a      	ldr	r2, [r3, #24]
 801792e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017930:	691b      	ldr	r3, [r3, #16]
 8017932:	429a      	cmp	r2, r3
 8017934:	d106      	bne.n	8017944 <ip4_reass+0xdc>
 8017936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017938:	899a      	ldrh	r2, [r3, #12]
 801793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801793c:	889b      	ldrh	r3, [r3, #4]
 801793e:	b29b      	uxth	r3, r3
 8017940:	429a      	cmp	r2, r3
 8017942:	d006      	beq.n	8017952 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	633b      	str	r3, [r7, #48]	; 0x30
 801794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801794c:	2b00      	cmp	r3, #0
 801794e:	d1e6      	bne.n	801791e <ip4_reass+0xb6>
 8017950:	e000      	b.n	8017954 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017952:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017956:	2b00      	cmp	r3, #0
 8017958:	d109      	bne.n	801796e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801795a:	8c3b      	ldrh	r3, [r7, #32]
 801795c:	4619      	mov	r1, r3
 801795e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017960:	f7ff fdb0 	bl	80174c4 <ip_reass_enqueue_new_datagram>
 8017964:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017968:	2b00      	cmp	r3, #0
 801796a:	d11c      	bne.n	80179a6 <ip4_reass+0x13e>
      goto nullreturn;
 801796c:	e105      	b.n	8017b7a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017970:	88db      	ldrh	r3, [r3, #6]
 8017972:	b29b      	uxth	r3, r3
 8017974:	4618      	mov	r0, r3
 8017976:	f7f5 fbd7 	bl	800d128 <lwip_htons>
 801797a:	4603      	mov	r3, r0
 801797c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017980:	2b00      	cmp	r3, #0
 8017982:	d110      	bne.n	80179a6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017986:	89db      	ldrh	r3, [r3, #14]
 8017988:	4618      	mov	r0, r3
 801798a:	f7f5 fbcd 	bl	800d128 <lwip_htons>
 801798e:	4603      	mov	r3, r0
 8017990:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017994:	2b00      	cmp	r3, #0
 8017996:	d006      	beq.n	80179a6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801799a:	3308      	adds	r3, #8
 801799c:	2214      	movs	r2, #20
 801799e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80179a0:	4618      	mov	r0, r3
 80179a2:	f005 fe27 	bl	801d5f4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80179a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179a8:	88db      	ldrh	r3, [r3, #6]
 80179aa:	b29b      	uxth	r3, r3
 80179ac:	f003 0320 	and.w	r3, r3, #32
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	bf0c      	ite	eq
 80179b4:	2301      	moveq	r3, #1
 80179b6:	2300      	movne	r3, #0
 80179b8:	b2db      	uxtb	r3, r3
 80179ba:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80179bc:	69fb      	ldr	r3, [r7, #28]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d00e      	beq.n	80179e0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80179c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80179c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80179c6:	4413      	add	r3, r2
 80179c8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80179ca:	8b7a      	ldrh	r2, [r7, #26]
 80179cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80179ce:	429a      	cmp	r2, r3
 80179d0:	f0c0 80a0 	bcc.w	8017b14 <ip4_reass+0x2ac>
 80179d4:	8b7b      	ldrh	r3, [r7, #26]
 80179d6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80179da:	4293      	cmp	r3, r2
 80179dc:	f200 809a 	bhi.w	8017b14 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80179e0:	69fa      	ldr	r2, [r7, #28]
 80179e2:	6879      	ldr	r1, [r7, #4]
 80179e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80179e6:	f7ff fdd5 	bl	8017594 <ip_reass_chain_frag_into_datagram_and_validate>
 80179ea:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80179ec:	697b      	ldr	r3, [r7, #20]
 80179ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80179f2:	f000 809b 	beq.w	8017b2c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80179f6:	4b48      	ldr	r3, [pc, #288]	; (8017b18 <ip4_reass+0x2b0>)
 80179f8:	881a      	ldrh	r2, [r3, #0]
 80179fa:	8c3b      	ldrh	r3, [r7, #32]
 80179fc:	4413      	add	r3, r2
 80179fe:	b29a      	uxth	r2, r3
 8017a00:	4b45      	ldr	r3, [pc, #276]	; (8017b18 <ip4_reass+0x2b0>)
 8017a02:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017a04:	69fb      	ldr	r3, [r7, #28]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d00d      	beq.n	8017a26 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017a0a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017a0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017a0e:	4413      	add	r3, r2
 8017a10:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a14:	8a7a      	ldrh	r2, [r7, #18]
 8017a16:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a1a:	7f9b      	ldrb	r3, [r3, #30]
 8017a1c:	f043 0301 	orr.w	r3, r3, #1
 8017a20:	b2da      	uxtb	r2, r3
 8017a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a24:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017a26:	697b      	ldr	r3, [r7, #20]
 8017a28:	2b01      	cmp	r3, #1
 8017a2a:	d171      	bne.n	8017b10 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a2e:	8b9b      	ldrh	r3, [r3, #28]
 8017a30:	3314      	adds	r3, #20
 8017a32:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a36:	685b      	ldr	r3, [r3, #4]
 8017a38:	685b      	ldr	r3, [r3, #4]
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a40:	685b      	ldr	r3, [r3, #4]
 8017a42:	685b      	ldr	r3, [r3, #4]
 8017a44:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a48:	3308      	adds	r3, #8
 8017a4a:	2214      	movs	r2, #20
 8017a4c:	4619      	mov	r1, r3
 8017a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a50:	f005 fdd0 	bl	801d5f4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017a54:	8a3b      	ldrh	r3, [r7, #16]
 8017a56:	4618      	mov	r0, r3
 8017a58:	f7f5 fb66 	bl	800d128 <lwip_htons>
 8017a5c:	4603      	mov	r3, r0
 8017a5e:	461a      	mov	r2, r3
 8017a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a62:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a66:	2200      	movs	r2, #0
 8017a68:	719a      	strb	r2, [r3, #6]
 8017a6a:	2200      	movs	r2, #0
 8017a6c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a70:	2200      	movs	r2, #0
 8017a72:	729a      	strb	r2, [r3, #10]
 8017a74:	2200      	movs	r2, #0
 8017a76:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a7a:	685b      	ldr	r3, [r3, #4]
 8017a7c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017a7e:	e00d      	b.n	8017a9c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a82:	685b      	ldr	r3, [r3, #4]
 8017a84:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017a86:	2114      	movs	r1, #20
 8017a88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017a8a:	f7f6 fec9 	bl	800e820 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017a8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017a90:	6878      	ldr	r0, [r7, #4]
 8017a92:	f7f7 f819 	bl	800eac8 <pbuf_cat>
      r = iprh->next_pbuf;
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d1ee      	bne.n	8017a80 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017aa2:	4b1e      	ldr	r3, [pc, #120]	; (8017b1c <ip4_reass+0x2b4>)
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017aa8:	429a      	cmp	r2, r3
 8017aaa:	d102      	bne.n	8017ab2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017aac:	2300      	movs	r3, #0
 8017aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017ab0:	e010      	b.n	8017ad4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017ab2:	4b1a      	ldr	r3, [pc, #104]	; (8017b1c <ip4_reass+0x2b4>)
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017ab8:	e007      	b.n	8017aca <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ac0:	429a      	cmp	r2, r3
 8017ac2:	d006      	beq.n	8017ad2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d1f4      	bne.n	8017aba <ip4_reass+0x252>
 8017ad0:	e000      	b.n	8017ad4 <ip4_reass+0x26c>
          break;
 8017ad2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017ad4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017ad6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ad8:	f7ff fd2e 	bl	8017538 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017adc:	6878      	ldr	r0, [r7, #4]
 8017ade:	f7f6 ffb3 	bl	800ea48 <pbuf_clen>
 8017ae2:	4603      	mov	r3, r0
 8017ae4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017ae6:	4b0c      	ldr	r3, [pc, #48]	; (8017b18 <ip4_reass+0x2b0>)
 8017ae8:	881b      	ldrh	r3, [r3, #0]
 8017aea:	8c3a      	ldrh	r2, [r7, #32]
 8017aec:	429a      	cmp	r2, r3
 8017aee:	d906      	bls.n	8017afe <ip4_reass+0x296>
 8017af0:	4b0b      	ldr	r3, [pc, #44]	; (8017b20 <ip4_reass+0x2b8>)
 8017af2:	f240 229b 	movw	r2, #667	; 0x29b
 8017af6:	490b      	ldr	r1, [pc, #44]	; (8017b24 <ip4_reass+0x2bc>)
 8017af8:	480b      	ldr	r0, [pc, #44]	; (8017b28 <ip4_reass+0x2c0>)
 8017afa:	f005 fd91 	bl	801d620 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017afe:	4b06      	ldr	r3, [pc, #24]	; (8017b18 <ip4_reass+0x2b0>)
 8017b00:	881a      	ldrh	r2, [r3, #0]
 8017b02:	8c3b      	ldrh	r3, [r7, #32]
 8017b04:	1ad3      	subs	r3, r2, r3
 8017b06:	b29a      	uxth	r2, r3
 8017b08:	4b03      	ldr	r3, [pc, #12]	; (8017b18 <ip4_reass+0x2b0>)
 8017b0a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	e038      	b.n	8017b82 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017b10:	2300      	movs	r3, #0
 8017b12:	e036      	b.n	8017b82 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017b14:	bf00      	nop
 8017b16:	e00a      	b.n	8017b2e <ip4_reass+0x2c6>
 8017b18:	20011510 	.word	0x20011510
 8017b1c:	2001150c 	.word	0x2001150c
 8017b20:	08021b1c 	.word	0x08021b1c
 8017b24:	08021c8c 	.word	0x08021c8c
 8017b28:	08021b64 	.word	0x08021b64
    goto nullreturn_ipr;
 8017b2c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d106      	bne.n	8017b42 <ip4_reass+0x2da>
 8017b34:	4b15      	ldr	r3, [pc, #84]	; (8017b8c <ip4_reass+0x324>)
 8017b36:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017b3a:	4915      	ldr	r1, [pc, #84]	; (8017b90 <ip4_reass+0x328>)
 8017b3c:	4815      	ldr	r0, [pc, #84]	; (8017b94 <ip4_reass+0x32c>)
 8017b3e:	f005 fd6f 	bl	801d620 <iprintf>
  if (ipr->p == NULL) {
 8017b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b44:	685b      	ldr	r3, [r3, #4]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d116      	bne.n	8017b78 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017b4a:	4b13      	ldr	r3, [pc, #76]	; (8017b98 <ip4_reass+0x330>)
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b50:	429a      	cmp	r2, r3
 8017b52:	d006      	beq.n	8017b62 <ip4_reass+0x2fa>
 8017b54:	4b0d      	ldr	r3, [pc, #52]	; (8017b8c <ip4_reass+0x324>)
 8017b56:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017b5a:	4910      	ldr	r1, [pc, #64]	; (8017b9c <ip4_reass+0x334>)
 8017b5c:	480d      	ldr	r0, [pc, #52]	; (8017b94 <ip4_reass+0x32c>)
 8017b5e:	f005 fd5f 	bl	801d620 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017b62:	2100      	movs	r1, #0
 8017b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b66:	f7ff fce7 	bl	8017538 <ip_reass_dequeue_datagram>
 8017b6a:	e006      	b.n	8017b7a <ip4_reass+0x312>
    goto nullreturn;
 8017b6c:	bf00      	nop
 8017b6e:	e004      	b.n	8017b7a <ip4_reass+0x312>
    goto nullreturn;
 8017b70:	bf00      	nop
 8017b72:	e002      	b.n	8017b7a <ip4_reass+0x312>
      goto nullreturn;
 8017b74:	bf00      	nop
 8017b76:	e000      	b.n	8017b7a <ip4_reass+0x312>
  }

nullreturn:
 8017b78:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017b7a:	6878      	ldr	r0, [r7, #4]
 8017b7c:	f7f6 fed6 	bl	800e92c <pbuf_free>
  return NULL;
 8017b80:	2300      	movs	r3, #0
}
 8017b82:	4618      	mov	r0, r3
 8017b84:	3738      	adds	r7, #56	; 0x38
 8017b86:	46bd      	mov	sp, r7
 8017b88:	bd80      	pop	{r7, pc}
 8017b8a:	bf00      	nop
 8017b8c:	08021b1c 	.word	0x08021b1c
 8017b90:	08021ca8 	.word	0x08021ca8
 8017b94:	08021b64 	.word	0x08021b64
 8017b98:	2001150c 	.word	0x2001150c
 8017b9c:	08021cb4 	.word	0x08021cb4

08017ba0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017ba4:	2005      	movs	r0, #5
 8017ba6:	f7f5 ffa7 	bl	800daf8 <memp_malloc>
 8017baa:	4603      	mov	r3, r0
}
 8017bac:	4618      	mov	r0, r3
 8017bae:	bd80      	pop	{r7, pc}

08017bb0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017bb0:	b580      	push	{r7, lr}
 8017bb2:	b082      	sub	sp, #8
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d106      	bne.n	8017bcc <ip_frag_free_pbuf_custom_ref+0x1c>
 8017bbe:	4b07      	ldr	r3, [pc, #28]	; (8017bdc <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017bc0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017bc4:	4906      	ldr	r1, [pc, #24]	; (8017be0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017bc6:	4807      	ldr	r0, [pc, #28]	; (8017be4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017bc8:	f005 fd2a 	bl	801d620 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017bcc:	6879      	ldr	r1, [r7, #4]
 8017bce:	2005      	movs	r0, #5
 8017bd0:	f7f6 f808 	bl	800dbe4 <memp_free>
}
 8017bd4:	bf00      	nop
 8017bd6:	3708      	adds	r7, #8
 8017bd8:	46bd      	mov	sp, r7
 8017bda:	bd80      	pop	{r7, pc}
 8017bdc:	08021b1c 	.word	0x08021b1c
 8017be0:	08021cd4 	.word	0x08021cd4
 8017be4:	08021b64 	.word	0x08021b64

08017be8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b084      	sub	sp, #16
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d106      	bne.n	8017c08 <ipfrag_free_pbuf_custom+0x20>
 8017bfa:	4b11      	ldr	r3, [pc, #68]	; (8017c40 <ipfrag_free_pbuf_custom+0x58>)
 8017bfc:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017c00:	4910      	ldr	r1, [pc, #64]	; (8017c44 <ipfrag_free_pbuf_custom+0x5c>)
 8017c02:	4811      	ldr	r0, [pc, #68]	; (8017c48 <ipfrag_free_pbuf_custom+0x60>)
 8017c04:	f005 fd0c 	bl	801d620 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017c08:	68fa      	ldr	r2, [r7, #12]
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	429a      	cmp	r2, r3
 8017c0e:	d006      	beq.n	8017c1e <ipfrag_free_pbuf_custom+0x36>
 8017c10:	4b0b      	ldr	r3, [pc, #44]	; (8017c40 <ipfrag_free_pbuf_custom+0x58>)
 8017c12:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017c16:	490d      	ldr	r1, [pc, #52]	; (8017c4c <ipfrag_free_pbuf_custom+0x64>)
 8017c18:	480b      	ldr	r0, [pc, #44]	; (8017c48 <ipfrag_free_pbuf_custom+0x60>)
 8017c1a:	f005 fd01 	bl	801d620 <iprintf>
  if (pcr->original != NULL) {
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	695b      	ldr	r3, [r3, #20]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d004      	beq.n	8017c30 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	695b      	ldr	r3, [r3, #20]
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f7f6 fe7e 	bl	800e92c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017c30:	68f8      	ldr	r0, [r7, #12]
 8017c32:	f7ff ffbd 	bl	8017bb0 <ip_frag_free_pbuf_custom_ref>
}
 8017c36:	bf00      	nop
 8017c38:	3710      	adds	r7, #16
 8017c3a:	46bd      	mov	sp, r7
 8017c3c:	bd80      	pop	{r7, pc}
 8017c3e:	bf00      	nop
 8017c40:	08021b1c 	.word	0x08021b1c
 8017c44:	08021ce0 	.word	0x08021ce0
 8017c48:	08021b64 	.word	0x08021b64
 8017c4c:	08021cec 	.word	0x08021cec

08017c50 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b094      	sub	sp, #80	; 0x50
 8017c54:	af02      	add	r7, sp, #8
 8017c56:	60f8      	str	r0, [r7, #12]
 8017c58:	60b9      	str	r1, [r7, #8]
 8017c5a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017c62:	68bb      	ldr	r3, [r7, #8]
 8017c64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017c66:	3b14      	subs	r3, #20
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	da00      	bge.n	8017c6e <ip4_frag+0x1e>
 8017c6c:	3307      	adds	r3, #7
 8017c6e:	10db      	asrs	r3, r3, #3
 8017c70:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017c72:	2314      	movs	r3, #20
 8017c74:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	685b      	ldr	r3, [r3, #4]
 8017c7a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c7e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c82:	781b      	ldrb	r3, [r3, #0]
 8017c84:	f003 030f 	and.w	r3, r3, #15
 8017c88:	b2db      	uxtb	r3, r3
 8017c8a:	009b      	lsls	r3, r3, #2
 8017c8c:	b2db      	uxtb	r3, r3
 8017c8e:	2b14      	cmp	r3, #20
 8017c90:	d002      	beq.n	8017c98 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017c92:	f06f 0305 	mvn.w	r3, #5
 8017c96:	e110      	b.n	8017eba <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	895b      	ldrh	r3, [r3, #10]
 8017c9c:	2b13      	cmp	r3, #19
 8017c9e:	d809      	bhi.n	8017cb4 <ip4_frag+0x64>
 8017ca0:	4b88      	ldr	r3, [pc, #544]	; (8017ec4 <ip4_frag+0x274>)
 8017ca2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017ca6:	4988      	ldr	r1, [pc, #544]	; (8017ec8 <ip4_frag+0x278>)
 8017ca8:	4888      	ldr	r0, [pc, #544]	; (8017ecc <ip4_frag+0x27c>)
 8017caa:	f005 fcb9 	bl	801d620 <iprintf>
 8017cae:	f06f 0305 	mvn.w	r3, #5
 8017cb2:	e102      	b.n	8017eba <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cb6:	88db      	ldrh	r3, [r3, #6]
 8017cb8:	b29b      	uxth	r3, r3
 8017cba:	4618      	mov	r0, r3
 8017cbc:	f7f5 fa34 	bl	800d128 <lwip_htons>
 8017cc0:	4603      	mov	r3, r0
 8017cc2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017cc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017cc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017cca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017cce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017cd4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	891b      	ldrh	r3, [r3, #8]
 8017cda:	3b14      	subs	r3, #20
 8017cdc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017ce0:	e0e1      	b.n	8017ea6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017ce2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017ce4:	00db      	lsls	r3, r3, #3
 8017ce6:	b29b      	uxth	r3, r3
 8017ce8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017cec:	4293      	cmp	r3, r2
 8017cee:	bf28      	it	cs
 8017cf0:	4613      	movcs	r3, r2
 8017cf2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017cf4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017cf8:	2114      	movs	r1, #20
 8017cfa:	200e      	movs	r0, #14
 8017cfc:	f7f6 fb32 	bl	800e364 <pbuf_alloc>
 8017d00:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	f000 80d5 	beq.w	8017eb4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d0c:	895b      	ldrh	r3, [r3, #10]
 8017d0e:	2b13      	cmp	r3, #19
 8017d10:	d806      	bhi.n	8017d20 <ip4_frag+0xd0>
 8017d12:	4b6c      	ldr	r3, [pc, #432]	; (8017ec4 <ip4_frag+0x274>)
 8017d14:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017d18:	496d      	ldr	r1, [pc, #436]	; (8017ed0 <ip4_frag+0x280>)
 8017d1a:	486c      	ldr	r0, [pc, #432]	; (8017ecc <ip4_frag+0x27c>)
 8017d1c:	f005 fc80 	bl	801d620 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d22:	685b      	ldr	r3, [r3, #4]
 8017d24:	2214      	movs	r2, #20
 8017d26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017d28:	4618      	mov	r0, r3
 8017d2a:	f005 fc63 	bl	801d5f4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d30:	685b      	ldr	r3, [r3, #4]
 8017d32:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017d34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017d36:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017d3a:	e064      	b.n	8017e06 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	895a      	ldrh	r2, [r3, #10]
 8017d40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017d42:	1ad3      	subs	r3, r2, r3
 8017d44:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	895b      	ldrh	r3, [r3, #10]
 8017d4a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017d4c:	429a      	cmp	r2, r3
 8017d4e:	d906      	bls.n	8017d5e <ip4_frag+0x10e>
 8017d50:	4b5c      	ldr	r3, [pc, #368]	; (8017ec4 <ip4_frag+0x274>)
 8017d52:	f240 322d 	movw	r2, #813	; 0x32d
 8017d56:	495f      	ldr	r1, [pc, #380]	; (8017ed4 <ip4_frag+0x284>)
 8017d58:	485c      	ldr	r0, [pc, #368]	; (8017ecc <ip4_frag+0x27c>)
 8017d5a:	f005 fc61 	bl	801d620 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017d5e:	8bfa      	ldrh	r2, [r7, #30]
 8017d60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017d64:	4293      	cmp	r3, r2
 8017d66:	bf28      	it	cs
 8017d68:	4613      	movcs	r3, r2
 8017d6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017d6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d105      	bne.n	8017d82 <ip4_frag+0x132>
        poff = 0;
 8017d76:	2300      	movs	r3, #0
 8017d78:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	60fb      	str	r3, [r7, #12]
        continue;
 8017d80:	e041      	b.n	8017e06 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017d82:	f7ff ff0d 	bl	8017ba0 <ip_frag_alloc_pbuf_custom_ref>
 8017d86:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017d88:	69bb      	ldr	r3, [r7, #24]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d103      	bne.n	8017d96 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017d8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017d90:	f7f6 fdcc 	bl	800e92c <pbuf_free>
        goto memerr;
 8017d94:	e08f      	b.n	8017eb6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017d96:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017d9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017d9e:	4413      	add	r3, r2
 8017da0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017da4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017da8:	9201      	str	r2, [sp, #4]
 8017daa:	9300      	str	r3, [sp, #0]
 8017dac:	4603      	mov	r3, r0
 8017dae:	2241      	movs	r2, #65	; 0x41
 8017db0:	2000      	movs	r0, #0
 8017db2:	f7f6 fc01 	bl	800e5b8 <pbuf_alloced_custom>
 8017db6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017db8:	697b      	ldr	r3, [r7, #20]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d106      	bne.n	8017dcc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017dbe:	69b8      	ldr	r0, [r7, #24]
 8017dc0:	f7ff fef6 	bl	8017bb0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017dc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017dc6:	f7f6 fdb1 	bl	800e92c <pbuf_free>
        goto memerr;
 8017dca:	e074      	b.n	8017eb6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017dcc:	68f8      	ldr	r0, [r7, #12]
 8017dce:	f7f6 fe53 	bl	800ea78 <pbuf_ref>
      pcr->original = p;
 8017dd2:	69bb      	ldr	r3, [r7, #24]
 8017dd4:	68fa      	ldr	r2, [r7, #12]
 8017dd6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017dd8:	69bb      	ldr	r3, [r7, #24]
 8017dda:	4a3f      	ldr	r2, [pc, #252]	; (8017ed8 <ip4_frag+0x288>)
 8017ddc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017dde:	6979      	ldr	r1, [r7, #20]
 8017de0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017de2:	f7f6 fe71 	bl	800eac8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017de6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017dea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017dee:	1ad3      	subs	r3, r2, r3
 8017df0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017df4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d004      	beq.n	8017e06 <ip4_frag+0x1b6>
        poff = 0;
 8017dfc:	2300      	movs	r3, #0
 8017dfe:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017e06:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d196      	bne.n	8017d3c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017e0e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017e10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017e14:	4413      	add	r3, r2
 8017e16:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017e18:	68bb      	ldr	r3, [r7, #8]
 8017e1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017e1c:	f1a3 0213 	sub.w	r2, r3, #19
 8017e20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017e24:	429a      	cmp	r2, r3
 8017e26:	bfcc      	ite	gt
 8017e28:	2301      	movgt	r3, #1
 8017e2a:	2300      	movle	r3, #0
 8017e2c:	b2db      	uxtb	r3, r3
 8017e2e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017e30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017e34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017e38:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017e3a:	6a3b      	ldr	r3, [r7, #32]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d002      	beq.n	8017e46 <ip4_frag+0x1f6>
 8017e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d003      	beq.n	8017e4e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017e46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017e48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017e4c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017e4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017e50:	4618      	mov	r0, r3
 8017e52:	f7f5 f969 	bl	800d128 <lwip_htons>
 8017e56:	4603      	mov	r3, r0
 8017e58:	461a      	mov	r2, r3
 8017e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e5c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017e5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017e60:	3314      	adds	r3, #20
 8017e62:	b29b      	uxth	r3, r3
 8017e64:	4618      	mov	r0, r3
 8017e66:	f7f5 f95f 	bl	800d128 <lwip_htons>
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	461a      	mov	r2, r3
 8017e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e70:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e74:	2200      	movs	r2, #0
 8017e76:	729a      	strb	r2, [r3, #10]
 8017e78:	2200      	movs	r2, #0
 8017e7a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017e7c:	68bb      	ldr	r3, [r7, #8]
 8017e7e:	695b      	ldr	r3, [r3, #20]
 8017e80:	687a      	ldr	r2, [r7, #4]
 8017e82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017e84:	68b8      	ldr	r0, [r7, #8]
 8017e86:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017e8a:	f7f6 fd4f 	bl	800e92c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017e8e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017e92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017e94:	1ad3      	subs	r3, r2, r3
 8017e96:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017e9a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017e9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017ea0:	4413      	add	r3, r2
 8017ea2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017ea6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	f47f af19 	bne.w	8017ce2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	e002      	b.n	8017eba <ip4_frag+0x26a>
      goto memerr;
 8017eb4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017eba:	4618      	mov	r0, r3
 8017ebc:	3748      	adds	r7, #72	; 0x48
 8017ebe:	46bd      	mov	sp, r7
 8017ec0:	bd80      	pop	{r7, pc}
 8017ec2:	bf00      	nop
 8017ec4:	08021b1c 	.word	0x08021b1c
 8017ec8:	08021cf8 	.word	0x08021cf8
 8017ecc:	08021b64 	.word	0x08021b64
 8017ed0:	08021d14 	.word	0x08021d14
 8017ed4:	08021d34 	.word	0x08021d34
 8017ed8:	08017be9 	.word	0x08017be9

08017edc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b086      	sub	sp, #24
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	6078      	str	r0, [r7, #4]
 8017ee4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017ee6:	230e      	movs	r3, #14
 8017ee8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	895b      	ldrh	r3, [r3, #10]
 8017eee:	2b0e      	cmp	r3, #14
 8017ef0:	d96e      	bls.n	8017fd0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	7bdb      	ldrb	r3, [r3, #15]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d106      	bne.n	8017f08 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017efa:	683b      	ldr	r3, [r7, #0]
 8017efc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017f00:	3301      	adds	r3, #1
 8017f02:	b2da      	uxtb	r2, r3
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	685b      	ldr	r3, [r3, #4]
 8017f0c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017f0e:	693b      	ldr	r3, [r7, #16]
 8017f10:	7b1a      	ldrb	r2, [r3, #12]
 8017f12:	7b5b      	ldrb	r3, [r3, #13]
 8017f14:	021b      	lsls	r3, r3, #8
 8017f16:	4313      	orrs	r3, r2
 8017f18:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017f1a:	693b      	ldr	r3, [r7, #16]
 8017f1c:	781b      	ldrb	r3, [r3, #0]
 8017f1e:	f003 0301 	and.w	r3, r3, #1
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d023      	beq.n	8017f6e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017f26:	693b      	ldr	r3, [r7, #16]
 8017f28:	781b      	ldrb	r3, [r3, #0]
 8017f2a:	2b01      	cmp	r3, #1
 8017f2c:	d10f      	bne.n	8017f4e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017f2e:	693b      	ldr	r3, [r7, #16]
 8017f30:	785b      	ldrb	r3, [r3, #1]
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d11b      	bne.n	8017f6e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017f36:	693b      	ldr	r3, [r7, #16]
 8017f38:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017f3a:	2b5e      	cmp	r3, #94	; 0x5e
 8017f3c:	d117      	bne.n	8017f6e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	7b5b      	ldrb	r3, [r3, #13]
 8017f42:	f043 0310 	orr.w	r3, r3, #16
 8017f46:	b2da      	uxtb	r2, r3
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	735a      	strb	r2, [r3, #13]
 8017f4c:	e00f      	b.n	8017f6e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017f4e:	693b      	ldr	r3, [r7, #16]
 8017f50:	2206      	movs	r2, #6
 8017f52:	4928      	ldr	r1, [pc, #160]	; (8017ff4 <ethernet_input+0x118>)
 8017f54:	4618      	mov	r0, r3
 8017f56:	f005 fb3d 	bl	801d5d4 <memcmp>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d106      	bne.n	8017f6e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	7b5b      	ldrb	r3, [r3, #13]
 8017f64:	f043 0308 	orr.w	r3, r3, #8
 8017f68:	b2da      	uxtb	r2, r3
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017f6e:	89fb      	ldrh	r3, [r7, #14]
 8017f70:	2b08      	cmp	r3, #8
 8017f72:	d003      	beq.n	8017f7c <ethernet_input+0xa0>
 8017f74:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017f78:	d014      	beq.n	8017fa4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017f7a:	e032      	b.n	8017fe2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017f7c:	683b      	ldr	r3, [r7, #0]
 8017f7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017f82:	f003 0308 	and.w	r3, r3, #8
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d024      	beq.n	8017fd4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017f8a:	8afb      	ldrh	r3, [r7, #22]
 8017f8c:	4619      	mov	r1, r3
 8017f8e:	6878      	ldr	r0, [r7, #4]
 8017f90:	f7f6 fc46 	bl	800e820 <pbuf_remove_header>
 8017f94:	4603      	mov	r3, r0
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d11e      	bne.n	8017fd8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017f9a:	6839      	ldr	r1, [r7, #0]
 8017f9c:	6878      	ldr	r0, [r7, #4]
 8017f9e:	f7fe fdf7 	bl	8016b90 <ip4_input>
      break;
 8017fa2:	e013      	b.n	8017fcc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017fa4:	683b      	ldr	r3, [r7, #0]
 8017fa6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017faa:	f003 0308 	and.w	r3, r3, #8
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d014      	beq.n	8017fdc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017fb2:	8afb      	ldrh	r3, [r7, #22]
 8017fb4:	4619      	mov	r1, r3
 8017fb6:	6878      	ldr	r0, [r7, #4]
 8017fb8:	f7f6 fc32 	bl	800e820 <pbuf_remove_header>
 8017fbc:	4603      	mov	r3, r0
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d10e      	bne.n	8017fe0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017fc2:	6839      	ldr	r1, [r7, #0]
 8017fc4:	6878      	ldr	r0, [r7, #4]
 8017fc6:	f7fd ff97 	bl	8015ef8 <etharp_input>
      break;
 8017fca:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017fcc:	2300      	movs	r3, #0
 8017fce:	e00c      	b.n	8017fea <ethernet_input+0x10e>
    goto free_and_return;
 8017fd0:	bf00      	nop
 8017fd2:	e006      	b.n	8017fe2 <ethernet_input+0x106>
        goto free_and_return;
 8017fd4:	bf00      	nop
 8017fd6:	e004      	b.n	8017fe2 <ethernet_input+0x106>
        goto free_and_return;
 8017fd8:	bf00      	nop
 8017fda:	e002      	b.n	8017fe2 <ethernet_input+0x106>
        goto free_and_return;
 8017fdc:	bf00      	nop
 8017fde:	e000      	b.n	8017fe2 <ethernet_input+0x106>
        goto free_and_return;
 8017fe0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017fe2:	6878      	ldr	r0, [r7, #4]
 8017fe4:	f7f6 fca2 	bl	800e92c <pbuf_free>
  return ERR_OK;
 8017fe8:	2300      	movs	r3, #0
}
 8017fea:	4618      	mov	r0, r3
 8017fec:	3718      	adds	r7, #24
 8017fee:	46bd      	mov	sp, r7
 8017ff0:	bd80      	pop	{r7, pc}
 8017ff2:	bf00      	nop
 8017ff4:	08022240 	.word	0x08022240

08017ff8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017ff8:	b580      	push	{r7, lr}
 8017ffa:	b086      	sub	sp, #24
 8017ffc:	af00      	add	r7, sp, #0
 8017ffe:	60f8      	str	r0, [r7, #12]
 8018000:	60b9      	str	r1, [r7, #8]
 8018002:	607a      	str	r2, [r7, #4]
 8018004:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018006:	8c3b      	ldrh	r3, [r7, #32]
 8018008:	4618      	mov	r0, r3
 801800a:	f7f5 f88d 	bl	800d128 <lwip_htons>
 801800e:	4603      	mov	r3, r0
 8018010:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018012:	210e      	movs	r1, #14
 8018014:	68b8      	ldr	r0, [r7, #8]
 8018016:	f7f6 fbf3 	bl	800e800 <pbuf_add_header>
 801801a:	4603      	mov	r3, r0
 801801c:	2b00      	cmp	r3, #0
 801801e:	d125      	bne.n	801806c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018020:	68bb      	ldr	r3, [r7, #8]
 8018022:	685b      	ldr	r3, [r3, #4]
 8018024:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018026:	693b      	ldr	r3, [r7, #16]
 8018028:	8afa      	ldrh	r2, [r7, #22]
 801802a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801802c:	693b      	ldr	r3, [r7, #16]
 801802e:	2206      	movs	r2, #6
 8018030:	6839      	ldr	r1, [r7, #0]
 8018032:	4618      	mov	r0, r3
 8018034:	f005 fade 	bl	801d5f4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018038:	693b      	ldr	r3, [r7, #16]
 801803a:	3306      	adds	r3, #6
 801803c:	2206      	movs	r2, #6
 801803e:	6879      	ldr	r1, [r7, #4]
 8018040:	4618      	mov	r0, r3
 8018042:	f005 fad7 	bl	801d5f4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801804c:	2b06      	cmp	r3, #6
 801804e:	d006      	beq.n	801805e <ethernet_output+0x66>
 8018050:	4b0a      	ldr	r3, [pc, #40]	; (801807c <ethernet_output+0x84>)
 8018052:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018056:	490a      	ldr	r1, [pc, #40]	; (8018080 <ethernet_output+0x88>)
 8018058:	480a      	ldr	r0, [pc, #40]	; (8018084 <ethernet_output+0x8c>)
 801805a:	f005 fae1 	bl	801d620 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	699b      	ldr	r3, [r3, #24]
 8018062:	68b9      	ldr	r1, [r7, #8]
 8018064:	68f8      	ldr	r0, [r7, #12]
 8018066:	4798      	blx	r3
 8018068:	4603      	mov	r3, r0
 801806a:	e002      	b.n	8018072 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801806c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801806e:	f06f 0301 	mvn.w	r3, #1
}
 8018072:	4618      	mov	r0, r3
 8018074:	3718      	adds	r7, #24
 8018076:	46bd      	mov	sp, r7
 8018078:	bd80      	pop	{r7, pc}
 801807a:	bf00      	nop
 801807c:	08021d44 	.word	0x08021d44
 8018080:	08021d7c 	.word	0x08021d7c
 8018084:	08021db0 	.word	0x08021db0

08018088 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018088:	b580      	push	{r7, lr}
 801808a:	b086      	sub	sp, #24
 801808c:	af00      	add	r7, sp, #0
 801808e:	6078      	str	r0, [r7, #4]
 8018090:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8018092:	683b      	ldr	r3, [r7, #0]
 8018094:	60bb      	str	r3, [r7, #8]
 8018096:	2304      	movs	r3, #4
 8018098:	60fb      	str	r3, [r7, #12]
 801809a:	2300      	movs	r3, #0
 801809c:	613b      	str	r3, [r7, #16]
 801809e:	2300      	movs	r3, #0
 80180a0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80180a2:	f107 0308 	add.w	r3, r7, #8
 80180a6:	2100      	movs	r1, #0
 80180a8:	4618      	mov	r0, r3
 80180aa:	f7f0 f870 	bl	800818e <osMessageCreate>
 80180ae:	4602      	mov	r2, r0
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d102      	bne.n	80180c2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80180bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80180c0:	e000      	b.n	80180c4 <sys_mbox_new+0x3c>

  return ERR_OK;
 80180c2:	2300      	movs	r3, #0
}
 80180c4:	4618      	mov	r0, r3
 80180c6:	3718      	adds	r7, #24
 80180c8:	46bd      	mov	sp, r7
 80180ca:	bd80      	pop	{r7, pc}

080180cc <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b082      	sub	sp, #8
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	4618      	mov	r0, r3
 80180da:	f7f0 f935 	bl	8008348 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	4618      	mov	r0, r3
 80180e4:	f7f0 f946 	bl	8008374 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80180e8:	bf00      	nop
 80180ea:	3708      	adds	r7, #8
 80180ec:	46bd      	mov	sp, r7
 80180ee:	bd80      	pop	{r7, pc}

080180f0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b084      	sub	sp, #16
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
 80180f8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	6839      	ldr	r1, [r7, #0]
 8018100:	2200      	movs	r2, #0
 8018102:	4618      	mov	r0, r3
 8018104:	f7f0 f86c 	bl	80081e0 <osMessagePut>
 8018108:	4603      	mov	r3, r0
 801810a:	2b00      	cmp	r3, #0
 801810c:	d102      	bne.n	8018114 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801810e:	2300      	movs	r3, #0
 8018110:	73fb      	strb	r3, [r7, #15]
 8018112:	e001      	b.n	8018118 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018114:	23ff      	movs	r3, #255	; 0xff
 8018116:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018118:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801811c:	4618      	mov	r0, r3
 801811e:	3710      	adds	r7, #16
 8018120:	46bd      	mov	sp, r7
 8018122:	bd80      	pop	{r7, pc}

08018124 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018124:	b580      	push	{r7, lr}
 8018126:	b08c      	sub	sp, #48	; 0x30
 8018128:	af00      	add	r7, sp, #0
 801812a:	61f8      	str	r0, [r7, #28]
 801812c:	61b9      	str	r1, [r7, #24]
 801812e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018130:	f7ef fe58 	bl	8007de4 <osKernelSysTick>
 8018134:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018136:	697b      	ldr	r3, [r7, #20]
 8018138:	2b00      	cmp	r3, #0
 801813a:	d017      	beq.n	801816c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801813c:	69fb      	ldr	r3, [r7, #28]
 801813e:	6819      	ldr	r1, [r3, #0]
 8018140:	f107 0320 	add.w	r3, r7, #32
 8018144:	697a      	ldr	r2, [r7, #20]
 8018146:	4618      	mov	r0, r3
 8018148:	f7f0 f88a 	bl	8008260 <osMessageGet>

    if(event.status == osEventMessage)
 801814c:	6a3b      	ldr	r3, [r7, #32]
 801814e:	2b10      	cmp	r3, #16
 8018150:	d109      	bne.n	8018166 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018154:	461a      	mov	r2, r3
 8018156:	69bb      	ldr	r3, [r7, #24]
 8018158:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801815a:	f7ef fe43 	bl	8007de4 <osKernelSysTick>
 801815e:	4602      	mov	r2, r0
 8018160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018162:	1ad3      	subs	r3, r2, r3
 8018164:	e019      	b.n	801819a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801816a:	e016      	b.n	801819a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801816c:	69fb      	ldr	r3, [r7, #28]
 801816e:	6819      	ldr	r1, [r3, #0]
 8018170:	463b      	mov	r3, r7
 8018172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018176:	4618      	mov	r0, r3
 8018178:	f7f0 f872 	bl	8008260 <osMessageGet>
 801817c:	f107 0320 	add.w	r3, r7, #32
 8018180:	463a      	mov	r2, r7
 8018182:	ca07      	ldmia	r2, {r0, r1, r2}
 8018184:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801818a:	461a      	mov	r2, r3
 801818c:	69bb      	ldr	r3, [r7, #24]
 801818e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018190:	f7ef fe28 	bl	8007de4 <osKernelSysTick>
 8018194:	4602      	mov	r2, r0
 8018196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018198:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801819a:	4618      	mov	r0, r3
 801819c:	3730      	adds	r7, #48	; 0x30
 801819e:	46bd      	mov	sp, r7
 80181a0:	bd80      	pop	{r7, pc}

080181a2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80181a2:	b580      	push	{r7, lr}
 80181a4:	b086      	sub	sp, #24
 80181a6:	af00      	add	r7, sp, #0
 80181a8:	6078      	str	r0, [r7, #4]
 80181aa:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	6819      	ldr	r1, [r3, #0]
 80181b0:	f107 030c 	add.w	r3, r7, #12
 80181b4:	2200      	movs	r2, #0
 80181b6:	4618      	mov	r0, r3
 80181b8:	f7f0 f852 	bl	8008260 <osMessageGet>

  if(event.status == osEventMessage)
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	2b10      	cmp	r3, #16
 80181c0:	d105      	bne.n	80181ce <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80181c2:	693b      	ldr	r3, [r7, #16]
 80181c4:	461a      	mov	r2, r3
 80181c6:	683b      	ldr	r3, [r7, #0]
 80181c8:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80181ca:	2300      	movs	r3, #0
 80181cc:	e001      	b.n	80181d2 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80181ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 80181d2:	4618      	mov	r0, r3
 80181d4:	3718      	adds	r7, #24
 80181d6:	46bd      	mov	sp, r7
 80181d8:	bd80      	pop	{r7, pc}

080181da <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80181da:	b480      	push	{r7}
 80181dc:	b083      	sub	sp, #12
 80181de:	af00      	add	r7, sp, #0
 80181e0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d101      	bne.n	80181ee <sys_mbox_valid+0x14>
    return 0;
 80181ea:	2300      	movs	r3, #0
 80181ec:	e000      	b.n	80181f0 <sys_mbox_valid+0x16>
  else
    return 1;
 80181ee:	2301      	movs	r3, #1
}
 80181f0:	4618      	mov	r0, r3
 80181f2:	370c      	adds	r7, #12
 80181f4:	46bd      	mov	sp, r7
 80181f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181fa:	4770      	bx	lr

080181fc <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80181fc:	b480      	push	{r7}
 80181fe:	b083      	sub	sp, #12
 8018200:	af00      	add	r7, sp, #0
 8018202:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	2200      	movs	r2, #0
 8018208:	601a      	str	r2, [r3, #0]
}
 801820a:	bf00      	nop
 801820c:	370c      	adds	r7, #12
 801820e:	46bd      	mov	sp, r7
 8018210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018214:	4770      	bx	lr

08018216 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018216:	b580      	push	{r7, lr}
 8018218:	b084      	sub	sp, #16
 801821a:	af00      	add	r7, sp, #0
 801821c:	6078      	str	r0, [r7, #4]
 801821e:	460b      	mov	r3, r1
 8018220:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018222:	2300      	movs	r3, #0
 8018224:	60bb      	str	r3, [r7, #8]
 8018226:	2300      	movs	r3, #0
 8018228:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801822a:	f107 0308 	add.w	r3, r7, #8
 801822e:	2101      	movs	r1, #1
 8018230:	4618      	mov	r0, r3
 8018232:	f7ef fee3 	bl	8007ffc <osSemaphoreCreate>
 8018236:	4602      	mov	r2, r0
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d102      	bne.n	801824a <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018248:	e009      	b.n	801825e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801824a:	78fb      	ldrb	r3, [r7, #3]
 801824c:	2b00      	cmp	r3, #0
 801824e:	d105      	bne.n	801825c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	2100      	movs	r1, #0
 8018256:	4618      	mov	r0, r3
 8018258:	f7ef ff02 	bl	8008060 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801825c:	2300      	movs	r3, #0
}
 801825e:	4618      	mov	r0, r3
 8018260:	3710      	adds	r7, #16
 8018262:	46bd      	mov	sp, r7
 8018264:	bd80      	pop	{r7, pc}

08018266 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018266:	b580      	push	{r7, lr}
 8018268:	b084      	sub	sp, #16
 801826a:	af00      	add	r7, sp, #0
 801826c:	6078      	str	r0, [r7, #4]
 801826e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018270:	f7ef fdb8 	bl	8007de4 <osKernelSysTick>
 8018274:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018276:	683b      	ldr	r3, [r7, #0]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d011      	beq.n	80182a0 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	6839      	ldr	r1, [r7, #0]
 8018282:	4618      	mov	r0, r3
 8018284:	f7ef feec 	bl	8008060 <osSemaphoreWait>
 8018288:	4603      	mov	r3, r0
 801828a:	2b00      	cmp	r3, #0
 801828c:	d105      	bne.n	801829a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801828e:	f7ef fda9 	bl	8007de4 <osKernelSysTick>
 8018292:	4602      	mov	r2, r0
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	1ad3      	subs	r3, r2, r3
 8018298:	e012      	b.n	80182c0 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801829a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801829e:	e00f      	b.n	80182c0 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80182a0:	bf00      	nop
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80182aa:	4618      	mov	r0, r3
 80182ac:	f7ef fed8 	bl	8008060 <osSemaphoreWait>
 80182b0:	4603      	mov	r3, r0
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d1f5      	bne.n	80182a2 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80182b6:	f7ef fd95 	bl	8007de4 <osKernelSysTick>
 80182ba:	4602      	mov	r2, r0
 80182bc:	68fb      	ldr	r3, [r7, #12]
 80182be:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80182c0:	4618      	mov	r0, r3
 80182c2:	3710      	adds	r7, #16
 80182c4:	46bd      	mov	sp, r7
 80182c6:	bd80      	pop	{r7, pc}

080182c8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b082      	sub	sp, #8
 80182cc:	af00      	add	r7, sp, #0
 80182ce:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	4618      	mov	r0, r3
 80182d6:	f7ef ff11 	bl	80080fc <osSemaphoreRelease>
}
 80182da:	bf00      	nop
 80182dc:	3708      	adds	r7, #8
 80182de:	46bd      	mov	sp, r7
 80182e0:	bd80      	pop	{r7, pc}

080182e2 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80182e2:	b580      	push	{r7, lr}
 80182e4:	b082      	sub	sp, #8
 80182e6:	af00      	add	r7, sp, #0
 80182e8:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	4618      	mov	r0, r3
 80182f0:	f7ef ff3a 	bl	8008168 <osSemaphoreDelete>
}
 80182f4:	bf00      	nop
 80182f6:	3708      	adds	r7, #8
 80182f8:	46bd      	mov	sp, r7
 80182fa:	bd80      	pop	{r7, pc}

080182fc <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80182fc:	b480      	push	{r7}
 80182fe:	b083      	sub	sp, #12
 8018300:	af00      	add	r7, sp, #0
 8018302:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	2b00      	cmp	r3, #0
 801830a:	d101      	bne.n	8018310 <sys_sem_valid+0x14>
    return 0;
 801830c:	2300      	movs	r3, #0
 801830e:	e000      	b.n	8018312 <sys_sem_valid+0x16>
  else
    return 1;
 8018310:	2301      	movs	r3, #1
}
 8018312:	4618      	mov	r0, r3
 8018314:	370c      	adds	r7, #12
 8018316:	46bd      	mov	sp, r7
 8018318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801831c:	4770      	bx	lr

0801831e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801831e:	b480      	push	{r7}
 8018320:	b083      	sub	sp, #12
 8018322:	af00      	add	r7, sp, #0
 8018324:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	2200      	movs	r2, #0
 801832a:	601a      	str	r2, [r3, #0]
}
 801832c:	bf00      	nop
 801832e:	370c      	adds	r7, #12
 8018330:	46bd      	mov	sp, r7
 8018332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018336:	4770      	bx	lr

08018338 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018338:	b580      	push	{r7, lr}
 801833a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801833c:	4803      	ldr	r0, [pc, #12]	; (801834c <sys_init+0x14>)
 801833e:	f7ef fdc1 	bl	8007ec4 <osMutexCreate>
 8018342:	4603      	mov	r3, r0
 8018344:	4a02      	ldr	r2, [pc, #8]	; (8018350 <sys_init+0x18>)
 8018346:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018348:	bf00      	nop
 801834a:	bd80      	pop	{r7, pc}
 801834c:	08022250 	.word	0x08022250
 8018350:	20011514 	.word	0x20011514

08018354 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018354:	b580      	push	{r7, lr}
 8018356:	b084      	sub	sp, #16
 8018358:	af00      	add	r7, sp, #0
 801835a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801835c:	2300      	movs	r3, #0
 801835e:	60bb      	str	r3, [r7, #8]
 8018360:	2300      	movs	r3, #0
 8018362:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018364:	f107 0308 	add.w	r3, r7, #8
 8018368:	4618      	mov	r0, r3
 801836a:	f7ef fdab 	bl	8007ec4 <osMutexCreate>
 801836e:	4602      	mov	r2, r0
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	2b00      	cmp	r3, #0
 801837a:	d102      	bne.n	8018382 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801837c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018380:	e000      	b.n	8018384 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018382:	2300      	movs	r3, #0
}
 8018384:	4618      	mov	r0, r3
 8018386:	3710      	adds	r7, #16
 8018388:	46bd      	mov	sp, r7
 801838a:	bd80      	pop	{r7, pc}

0801838c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801838c:	b580      	push	{r7, lr}
 801838e:	b082      	sub	sp, #8
 8018390:	af00      	add	r7, sp, #0
 8018392:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801839c:	4618      	mov	r0, r3
 801839e:	f7ef fda9 	bl	8007ef4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80183a2:	bf00      	nop
 80183a4:	3708      	adds	r7, #8
 80183a6:	46bd      	mov	sp, r7
 80183a8:	bd80      	pop	{r7, pc}

080183aa <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80183aa:	b580      	push	{r7, lr}
 80183ac:	b082      	sub	sp, #8
 80183ae:	af00      	add	r7, sp, #0
 80183b0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	4618      	mov	r0, r3
 80183b8:	f7ef fdea 	bl	8007f90 <osMutexRelease>
}
 80183bc:	bf00      	nop
 80183be:	3708      	adds	r7, #8
 80183c0:	46bd      	mov	sp, r7
 80183c2:	bd80      	pop	{r7, pc}

080183c4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80183c4:	b580      	push	{r7, lr}
 80183c6:	b08c      	sub	sp, #48	; 0x30
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	60f8      	str	r0, [r7, #12]
 80183cc:	60b9      	str	r1, [r7, #8]
 80183ce:	607a      	str	r2, [r7, #4]
 80183d0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80183d2:	f107 0314 	add.w	r3, r7, #20
 80183d6:	2200      	movs	r2, #0
 80183d8:	601a      	str	r2, [r3, #0]
 80183da:	605a      	str	r2, [r3, #4]
 80183dc:	609a      	str	r2, [r3, #8]
 80183de:	60da      	str	r2, [r3, #12]
 80183e0:	611a      	str	r2, [r3, #16]
 80183e2:	615a      	str	r2, [r3, #20]
 80183e4:	619a      	str	r2, [r3, #24]
 80183e6:	68fb      	ldr	r3, [r7, #12]
 80183e8:	617b      	str	r3, [r7, #20]
 80183ea:	68bb      	ldr	r3, [r7, #8]
 80183ec:	61bb      	str	r3, [r7, #24]
 80183ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183f0:	b21b      	sxth	r3, r3
 80183f2:	83bb      	strh	r3, [r7, #28]
 80183f4:	683b      	ldr	r3, [r7, #0]
 80183f6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80183f8:	f107 0314 	add.w	r3, r7, #20
 80183fc:	6879      	ldr	r1, [r7, #4]
 80183fe:	4618      	mov	r0, r3
 8018400:	f7ef fd00 	bl	8007e04 <osThreadCreate>
 8018404:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018406:	4618      	mov	r0, r3
 8018408:	3730      	adds	r7, #48	; 0x30
 801840a:	46bd      	mov	sp, r7
 801840c:	bd80      	pop	{r7, pc}
	...

08018410 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018410:	b580      	push	{r7, lr}
 8018412:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018414:	4b04      	ldr	r3, [pc, #16]	; (8018428 <sys_arch_protect+0x18>)
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801841c:	4618      	mov	r0, r3
 801841e:	f7ef fd69 	bl	8007ef4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018422:	2301      	movs	r3, #1
}
 8018424:	4618      	mov	r0, r3
 8018426:	bd80      	pop	{r7, pc}
 8018428:	20011514 	.word	0x20011514

0801842c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801842c:	b580      	push	{r7, lr}
 801842e:	b082      	sub	sp, #8
 8018430:	af00      	add	r7, sp, #0
 8018432:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018434:	4b04      	ldr	r3, [pc, #16]	; (8018448 <sys_arch_unprotect+0x1c>)
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	4618      	mov	r0, r3
 801843a:	f7ef fda9 	bl	8007f90 <osMutexRelease>
}
 801843e:	bf00      	nop
 8018440:	3708      	adds	r7, #8
 8018442:	46bd      	mov	sp, r7
 8018444:	bd80      	pop	{r7, pc}
 8018446:	bf00      	nop
 8018448:	20011514 	.word	0x20011514

0801844c <NewMessageData>:
#include "MQTTClient.h"

#include <stdio.h>
#include <string.h>

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 801844c:	b480      	push	{r7}
 801844e:	b085      	sub	sp, #20
 8018450:	af00      	add	r7, sp, #0
 8018452:	60f8      	str	r0, [r7, #12]
 8018454:	60b9      	str	r1, [r7, #8]
 8018456:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	68ba      	ldr	r2, [r7, #8]
 801845c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	687a      	ldr	r2, [r7, #4]
 8018462:	601a      	str	r2, [r3, #0]
}
 8018464:	bf00      	nop
 8018466:	3714      	adds	r7, #20
 8018468:	46bd      	mov	sp, r7
 801846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801846e:	4770      	bx	lr

08018470 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8018470:	b480      	push	{r7}
 8018472:	b083      	sub	sp, #12
 8018474:	af00      	add	r7, sp, #0
 8018476:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018480:	4293      	cmp	r3, r2
 8018482:	d003      	beq.n	801848c <getNextPacketId+0x1c>
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	3301      	adds	r3, #1
 801848a:	e000      	b.n	801848e <getNextPacketId+0x1e>
 801848c:	2301      	movs	r3, #1
 801848e:	687a      	ldr	r2, [r7, #4]
 8018490:	6013      	str	r3, [r2, #0]
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	681b      	ldr	r3, [r3, #0]
}
 8018496:	4618      	mov	r0, r3
 8018498:	370c      	adds	r7, #12
 801849a:	46bd      	mov	sp, r7
 801849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184a0:	4770      	bx	lr

080184a2 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 80184a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184a4:	b087      	sub	sp, #28
 80184a6:	af00      	add	r7, sp, #0
 80184a8:	60f8      	str	r0, [r7, #12]
 80184aa:	60b9      	str	r1, [r7, #8]
 80184ac:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 80184ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80184b2:	617b      	str	r3, [r7, #20]
        sent = 0;
 80184b4:	2300      	movs	r3, #0
 80184b6:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 80184b8:	e018      	b.n	80184ec <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 80184ba:	68fb      	ldr	r3, [r7, #12]
 80184bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80184be:	691c      	ldr	r4, [r3, #16]
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	691a      	ldr	r2, [r3, #16]
 80184c8:	693b      	ldr	r3, [r7, #16]
 80184ca:	18d6      	adds	r6, r2, r3
 80184cc:	6878      	ldr	r0, [r7, #4]
 80184ce:	f000 fecb 	bl	8019268 <TimerLeftMS>
 80184d2:	4603      	mov	r3, r0
 80184d4:	68ba      	ldr	r2, [r7, #8]
 80184d6:	4631      	mov	r1, r6
 80184d8:	4628      	mov	r0, r5
 80184da:	47a0      	blx	r4
 80184dc:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 80184de:	697b      	ldr	r3, [r7, #20]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	db0e      	blt.n	8018502 <sendPacket+0x60>
            break;
        sent += rc;
 80184e4:	693a      	ldr	r2, [r7, #16]
 80184e6:	697b      	ldr	r3, [r7, #20]
 80184e8:	4413      	add	r3, r2
 80184ea:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 80184ec:	693a      	ldr	r2, [r7, #16]
 80184ee:	68bb      	ldr	r3, [r7, #8]
 80184f0:	429a      	cmp	r2, r3
 80184f2:	da07      	bge.n	8018504 <sendPacket+0x62>
 80184f4:	6878      	ldr	r0, [r7, #4]
 80184f6:	f000 fe75 	bl	80191e4 <TimerIsExpired>
 80184fa:	4603      	mov	r3, r0
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d0dc      	beq.n	80184ba <sendPacket+0x18>
 8018500:	e000      	b.n	8018504 <sendPacket+0x62>
            break;
 8018502:	bf00      	nop
    }
    if (sent == length)
 8018504:	693a      	ldr	r2, [r7, #16]
 8018506:	68bb      	ldr	r3, [r7, #8]
 8018508:	429a      	cmp	r2, r3
 801850a:	d10b      	bne.n	8018524 <sendPacket+0x82>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	699b      	ldr	r3, [r3, #24]
 8018516:	4619      	mov	r1, r3
 8018518:	4610      	mov	r0, r2
 801851a:	f000 fe8d 	bl	8019238 <TimerCountdown>
        rc = MQTT_SUCCESS;
 801851e:	2300      	movs	r3, #0
 8018520:	617b      	str	r3, [r7, #20]
 8018522:	e002      	b.n	801852a <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8018524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018528:	617b      	str	r3, [r7, #20]
    return rc;
 801852a:	697b      	ldr	r3, [r7, #20]
}
 801852c:	4618      	mov	r0, r3
 801852e:	371c      	adds	r7, #28
 8018530:	46bd      	mov	sp, r7
 8018532:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018534 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8018534:	b580      	push	{r7, lr}
 8018536:	b086      	sub	sp, #24
 8018538:	af00      	add	r7, sp, #0
 801853a:	60f8      	str	r0, [r7, #12]
 801853c:	60b9      	str	r1, [r7, #8]
 801853e:	607a      	str	r2, [r7, #4]
 8018540:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	68ba      	ldr	r2, [r7, #8]
 8018546:	655a      	str	r2, [r3, #84]	; 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018548:	2300      	movs	r3, #0
 801854a:	617b      	str	r3, [r7, #20]
 801854c:	e008      	b.n	8018560 <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 801854e:	68fb      	ldr	r3, [r7, #12]
 8018550:	697a      	ldr	r2, [r7, #20]
 8018552:	3205      	adds	r2, #5
 8018554:	2100      	movs	r1, #0
 8018556:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801855a:	697b      	ldr	r3, [r7, #20]
 801855c:	3301      	adds	r3, #1
 801855e:	617b      	str	r3, [r7, #20]
 8018560:	697b      	ldr	r3, [r7, #20]
 8018562:	2b04      	cmp	r3, #4
 8018564:	ddf3      	ble.n	801854e <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8018566:	68fb      	ldr	r3, [r7, #12]
 8018568:	687a      	ldr	r2, [r7, #4]
 801856a:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	683a      	ldr	r2, [r7, #0]
 8018570:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	6a3a      	ldr	r2, [r7, #32]
 8018576:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801857c:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018582:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	2200      	movs	r2, #0
 8018588:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	2200      	movs	r2, #0
 801858e:	625a      	str	r2, [r3, #36]	; 0x24
    c->ping_outstanding = 0;
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	2200      	movs	r2, #0
 8018594:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8018596:	68fb      	ldr	r3, [r7, #12]
 8018598:	2200      	movs	r2, #0
 801859a:	651a      	str	r2, [r3, #80]	; 0x50
	  c->next_packetid = 1;
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	2201      	movs	r2, #1
 80185a0:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	3358      	adds	r3, #88	; 0x58
 80185a6:	4618      	mov	r0, r3
 80185a8:	f000 fe74 	bl	8019294 <TimerInit>
    TimerInit(&c->last_received);
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	3360      	adds	r3, #96	; 0x60
 80185b0:	4618      	mov	r0, r3
 80185b2:	f000 fe6f 	bl	8019294 <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 80185b6:	bf00      	nop
 80185b8:	3718      	adds	r7, #24
 80185ba:	46bd      	mov	sp, r7
 80185bc:	bd80      	pop	{r7, pc}

080185be <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 80185be:	b590      	push	{r4, r7, lr}
 80185c0:	b08b      	sub	sp, #44	; 0x2c
 80185c2:	af00      	add	r7, sp, #0
 80185c4:	60f8      	str	r0, [r7, #12]
 80185c6:	60b9      	str	r1, [r7, #8]
 80185c8:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 80185ca:	2301      	movs	r3, #1
 80185cc:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 80185ce:	2300      	movs	r3, #0
 80185d0:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 80185d2:	2304      	movs	r3, #4
 80185d4:	61fb      	str	r3, [r7, #28]

    *value = 0;
 80185d6:	68bb      	ldr	r3, [r7, #8]
 80185d8:	2200      	movs	r2, #0
 80185da:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 80185dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80185e0:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80185e2:	6a3b      	ldr	r3, [r7, #32]
 80185e4:	3301      	adds	r3, #1
 80185e6:	623b      	str	r3, [r7, #32]
 80185e8:	6a3a      	ldr	r2, [r7, #32]
 80185ea:	69fb      	ldr	r3, [r7, #28]
 80185ec:	429a      	cmp	r2, r3
 80185ee:	dd03      	ble.n	80185f8 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 80185f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80185f4:	61bb      	str	r3, [r7, #24]
            goto exit;
 80185f6:	e021      	b.n	801863c <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80185fc:	68dc      	ldr	r4, [r3, #12]
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8018602:	f107 0117 	add.w	r1, r7, #23
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	2201      	movs	r2, #1
 801860a:	47a0      	blx	r4
 801860c:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 801860e:	69bb      	ldr	r3, [r7, #24]
 8018610:	2b01      	cmp	r3, #1
 8018612:	d112      	bne.n	801863a <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8018614:	68bb      	ldr	r3, [r7, #8]
 8018616:	681a      	ldr	r2, [r3, #0]
 8018618:	7dfb      	ldrb	r3, [r7, #23]
 801861a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801861e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018620:	fb01 f303 	mul.w	r3, r1, r3
 8018624:	441a      	add	r2, r3
 8018626:	68bb      	ldr	r3, [r7, #8]
 8018628:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 801862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801862c:	01db      	lsls	r3, r3, #7
 801862e:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 8018630:	7dfb      	ldrb	r3, [r7, #23]
 8018632:	b25b      	sxtb	r3, r3
 8018634:	2b00      	cmp	r3, #0
 8018636:	dbd1      	blt.n	80185dc <decodePacket+0x1e>
exit:
 8018638:	e000      	b.n	801863c <decodePacket+0x7e>
            goto exit;
 801863a:	bf00      	nop
    return len;
 801863c:	6a3b      	ldr	r3, [r7, #32]
}
 801863e:	4618      	mov	r0, r3
 8018640:	372c      	adds	r7, #44	; 0x2c
 8018642:	46bd      	mov	sp, r7
 8018644:	bd90      	pop	{r4, r7, pc}

08018646 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8018646:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018648:	b089      	sub	sp, #36	; 0x24
 801864a:	af00      	add	r7, sp, #0
 801864c:	60f8      	str	r0, [r7, #12]
 801864e:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 8018650:	2300      	movs	r3, #0
 8018652:	617b      	str	r3, [r7, #20]
    int len = 0;
 8018654:	2300      	movs	r3, #0
 8018656:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8018658:	2300      	movs	r3, #0
 801865a:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018660:	68dc      	ldr	r4, [r3, #12]
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	695e      	ldr	r6, [r3, #20]
 801866a:	68b8      	ldr	r0, [r7, #8]
 801866c:	f000 fdfc 	bl	8019268 <TimerLeftMS>
 8018670:	4603      	mov	r3, r0
 8018672:	2201      	movs	r2, #1
 8018674:	4631      	mov	r1, r6
 8018676:	4628      	mov	r0, r5
 8018678:	47a0      	blx	r4
 801867a:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 801867c:	69fb      	ldr	r3, [r7, #28]
 801867e:	2b01      	cmp	r3, #1
 8018680:	d15d      	bne.n	801873e <readPacket+0xf8>
        goto exit;

    len = 1;
 8018682:	2301      	movs	r3, #1
 8018684:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8018686:	68b8      	ldr	r0, [r7, #8]
 8018688:	f000 fdee 	bl	8019268 <TimerLeftMS>
 801868c:	4602      	mov	r2, r0
 801868e:	f107 0310 	add.w	r3, r7, #16
 8018692:	4619      	mov	r1, r3
 8018694:	68f8      	ldr	r0, [r7, #12]
 8018696:	f7ff ff92 	bl	80185be <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	695b      	ldr	r3, [r3, #20]
 801869e:	3301      	adds	r3, #1
 80186a0:	693a      	ldr	r2, [r7, #16]
 80186a2:	4611      	mov	r1, r2
 80186a4:	4618      	mov	r0, r3
 80186a6:	f001 f9bd 	bl	8019a24 <MQTTPacket_encode>
 80186aa:	4602      	mov	r2, r0
 80186ac:	69bb      	ldr	r3, [r7, #24]
 80186ae:	4413      	add	r3, r2
 80186b0:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	68da      	ldr	r2, [r3, #12]
 80186b6:	69bb      	ldr	r3, [r7, #24]
 80186b8:	1ad3      	subs	r3, r2, r3
 80186ba:	693a      	ldr	r2, [r7, #16]
 80186bc:	4293      	cmp	r3, r2
 80186be:	d203      	bcs.n	80186c8 <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 80186c0:	f06f 0301 	mvn.w	r3, #1
 80186c4:	61fb      	str	r3, [r7, #28]
        goto exit;
 80186c6:	e03d      	b.n	8018744 <readPacket+0xfe>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 80186c8:	693b      	ldr	r3, [r7, #16]
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	dd20      	ble.n	8018710 <readPacket+0xca>
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80186d2:	68dc      	ldr	r4, [r3, #12]
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	695a      	ldr	r2, [r3, #20]
 80186dc:	69bb      	ldr	r3, [r7, #24]
 80186de:	18d6      	adds	r6, r2, r3
 80186e0:	693b      	ldr	r3, [r7, #16]
 80186e2:	607b      	str	r3, [r7, #4]
 80186e4:	68b8      	ldr	r0, [r7, #8]
 80186e6:	f000 fdbf 	bl	8019268 <TimerLeftMS>
 80186ea:	4603      	mov	r3, r0
 80186ec:	687a      	ldr	r2, [r7, #4]
 80186ee:	4631      	mov	r1, r6
 80186f0:	4628      	mov	r0, r5
 80186f2:	47a0      	blx	r4
 80186f4:	4602      	mov	r2, r0
 80186f6:	693b      	ldr	r3, [r7, #16]
 80186f8:	429a      	cmp	r2, r3
 80186fa:	bf14      	ite	ne
 80186fc:	2301      	movne	r3, #1
 80186fe:	2300      	moveq	r3, #0
 8018700:	b2db      	uxtb	r3, r3
 8018702:	61fb      	str	r3, [r7, #28]
 8018704:	69fb      	ldr	r3, [r7, #28]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d002      	beq.n	8018710 <readPacket+0xca>
        rc = 0;
 801870a:	2300      	movs	r3, #0
 801870c:	61fb      	str	r3, [r7, #28]
        goto exit;
 801870e:	e019      	b.n	8018744 <readPacket+0xfe>
    }

    header.byte = c->readbuf[0];
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	695b      	ldr	r3, [r3, #20]
 8018714:	781b      	ldrb	r3, [r3, #0]
 8018716:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8018718:	7d3b      	ldrb	r3, [r7, #20]
 801871a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801871e:	b2db      	uxtb	r3, r3
 8018720:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	699b      	ldr	r3, [r3, #24]
 8018726:	2b00      	cmp	r3, #0
 8018728:	d00b      	beq.n	8018742 <readPacket+0xfc>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have successfully received a packet
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	699b      	ldr	r3, [r3, #24]
 8018734:	4619      	mov	r1, r3
 8018736:	4610      	mov	r0, r2
 8018738:	f000 fd7e 	bl	8019238 <TimerCountdown>
 801873c:	e002      	b.n	8018744 <readPacket+0xfe>
        goto exit;
 801873e:	bf00      	nop
 8018740:	e000      	b.n	8018744 <readPacket+0xfe>
exit:
 8018742:	bf00      	nop
    return rc;
 8018744:	69fb      	ldr	r3, [r7, #28]
}
 8018746:	4618      	mov	r0, r3
 8018748:	3724      	adds	r7, #36	; 0x24
 801874a:	46bd      	mov	sp, r7
 801874c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801874e <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 801874e:	b480      	push	{r7}
 8018750:	b087      	sub	sp, #28
 8018752:	af00      	add	r7, sp, #0
 8018754:	6078      	str	r0, [r7, #4]
 8018756:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 801875c:	683b      	ldr	r3, [r7, #0]
 801875e:	689b      	ldr	r3, [r3, #8]
 8018760:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8018762:	683b      	ldr	r3, [r7, #0]
 8018764:	685b      	ldr	r3, [r3, #4]
 8018766:	461a      	mov	r2, r3
 8018768:	693b      	ldr	r3, [r7, #16]
 801876a:	4413      	add	r3, r2
 801876c:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 801876e:	e039      	b.n	80187e4 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8018770:	693b      	ldr	r3, [r7, #16]
 8018772:	781b      	ldrb	r3, [r3, #0]
 8018774:	2b2f      	cmp	r3, #47	; 0x2f
 8018776:	d103      	bne.n	8018780 <isTopicMatched+0x32>
 8018778:	697b      	ldr	r3, [r7, #20]
 801877a:	781b      	ldrb	r3, [r3, #0]
 801877c:	2b2f      	cmp	r3, #47	; 0x2f
 801877e:	d13a      	bne.n	80187f6 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8018780:	697b      	ldr	r3, [r7, #20]
 8018782:	781b      	ldrb	r3, [r3, #0]
 8018784:	2b2b      	cmp	r3, #43	; 0x2b
 8018786:	d009      	beq.n	801879c <isTopicMatched+0x4e>
 8018788:	697b      	ldr	r3, [r7, #20]
 801878a:	781b      	ldrb	r3, [r3, #0]
 801878c:	2b23      	cmp	r3, #35	; 0x23
 801878e:	d005      	beq.n	801879c <isTopicMatched+0x4e>
 8018790:	697b      	ldr	r3, [r7, #20]
 8018792:	781a      	ldrb	r2, [r3, #0]
 8018794:	693b      	ldr	r3, [r7, #16]
 8018796:	781b      	ldrb	r3, [r3, #0]
 8018798:	429a      	cmp	r2, r3
 801879a:	d12e      	bne.n	80187fa <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 801879c:	697b      	ldr	r3, [r7, #20]
 801879e:	781b      	ldrb	r3, [r3, #0]
 80187a0:	2b2b      	cmp	r3, #43	; 0x2b
 80187a2:	d112      	bne.n	80187ca <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 80187a4:	693b      	ldr	r3, [r7, #16]
 80187a6:	3301      	adds	r3, #1
 80187a8:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 80187aa:	e005      	b.n	80187b8 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 80187ac:	693b      	ldr	r3, [r7, #16]
 80187ae:	3301      	adds	r3, #1
 80187b0:	613b      	str	r3, [r7, #16]
 80187b2:	693b      	ldr	r3, [r7, #16]
 80187b4:	3301      	adds	r3, #1
 80187b6:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 80187b8:	68fa      	ldr	r2, [r7, #12]
 80187ba:	68bb      	ldr	r3, [r7, #8]
 80187bc:	429a      	cmp	r2, r3
 80187be:	d20b      	bcs.n	80187d8 <isTopicMatched+0x8a>
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	781b      	ldrb	r3, [r3, #0]
 80187c4:	2b2f      	cmp	r3, #47	; 0x2f
 80187c6:	d1f1      	bne.n	80187ac <isTopicMatched+0x5e>
 80187c8:	e006      	b.n	80187d8 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 80187ca:	697b      	ldr	r3, [r7, #20]
 80187cc:	781b      	ldrb	r3, [r3, #0]
 80187ce:	2b23      	cmp	r3, #35	; 0x23
 80187d0:	d102      	bne.n	80187d8 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 80187d2:	68bb      	ldr	r3, [r7, #8]
 80187d4:	3b01      	subs	r3, #1
 80187d6:	613b      	str	r3, [r7, #16]
        curf++;
 80187d8:	697b      	ldr	r3, [r7, #20]
 80187da:	3301      	adds	r3, #1
 80187dc:	617b      	str	r3, [r7, #20]
        curn++;
 80187de:	693b      	ldr	r3, [r7, #16]
 80187e0:	3301      	adds	r3, #1
 80187e2:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 80187e4:	697b      	ldr	r3, [r7, #20]
 80187e6:	781b      	ldrb	r3, [r3, #0]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d007      	beq.n	80187fc <isTopicMatched+0xae>
 80187ec:	693a      	ldr	r2, [r7, #16]
 80187ee:	68bb      	ldr	r3, [r7, #8]
 80187f0:	429a      	cmp	r2, r3
 80187f2:	d3bd      	bcc.n	8018770 <isTopicMatched+0x22>
 80187f4:	e002      	b.n	80187fc <isTopicMatched+0xae>
            break;
 80187f6:	bf00      	nop
 80187f8:	e000      	b.n	80187fc <isTopicMatched+0xae>
            break;
 80187fa:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 80187fc:	693a      	ldr	r2, [r7, #16]
 80187fe:	68bb      	ldr	r3, [r7, #8]
 8018800:	429a      	cmp	r2, r3
 8018802:	d105      	bne.n	8018810 <isTopicMatched+0xc2>
 8018804:	697b      	ldr	r3, [r7, #20]
 8018806:	781b      	ldrb	r3, [r3, #0]
 8018808:	2b00      	cmp	r3, #0
 801880a:	d101      	bne.n	8018810 <isTopicMatched+0xc2>
 801880c:	2301      	movs	r3, #1
 801880e:	e000      	b.n	8018812 <isTopicMatched+0xc4>
 8018810:	2300      	movs	r3, #0
 8018812:	b2db      	uxtb	r3, r3
}
 8018814:	4618      	mov	r0, r3
 8018816:	371c      	adds	r7, #28
 8018818:	46bd      	mov	sp, r7
 801881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801881e:	4770      	bx	lr

08018820 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8018820:	b580      	push	{r7, lr}
 8018822:	b08a      	sub	sp, #40	; 0x28
 8018824:	af00      	add	r7, sp, #0
 8018826:	60f8      	str	r0, [r7, #12]
 8018828:	60b9      	str	r1, [r7, #8]
 801882a:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 801882c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018830:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018832:	2300      	movs	r3, #0
 8018834:	627b      	str	r3, [r7, #36]	; 0x24
 8018836:	e03c      	b.n	80188b2 <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801883c:	3205      	adds	r2, #5
 801883e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018842:	2b00      	cmp	r3, #0
 8018844:	d032      	beq.n	80188ac <deliverMessage+0x8c>
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801884a:	3205      	adds	r2, #5
 801884c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018850:	4619      	mov	r1, r3
 8018852:	68b8      	ldr	r0, [r7, #8]
 8018854:	f001 fab6 	bl	8019dc4 <MQTTPacket_equals>
 8018858:	4603      	mov	r3, r0
 801885a:	2b00      	cmp	r3, #0
 801885c:	d10b      	bne.n	8018876 <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 801885e:	68fb      	ldr	r3, [r7, #12]
 8018860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018862:	3205      	adds	r2, #5
 8018864:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018868:	68b9      	ldr	r1, [r7, #8]
 801886a:	4618      	mov	r0, r3
 801886c:	f7ff ff6f 	bl	801874e <isTopicMatched>
 8018870:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8018872:	2b00      	cmp	r3, #0
 8018874:	d01a      	beq.n	80188ac <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 8018876:	68fa      	ldr	r2, [r7, #12]
 8018878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801887a:	3305      	adds	r3, #5
 801887c:	00db      	lsls	r3, r3, #3
 801887e:	4413      	add	r3, r2
 8018880:	685b      	ldr	r3, [r3, #4]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d012      	beq.n	80188ac <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8018886:	f107 0318 	add.w	r3, r7, #24
 801888a:	687a      	ldr	r2, [r7, #4]
 801888c:	68b9      	ldr	r1, [r7, #8]
 801888e:	4618      	mov	r0, r3
 8018890:	f7ff fddc 	bl	801844c <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8018894:	68fa      	ldr	r2, [r7, #12]
 8018896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018898:	3305      	adds	r3, #5
 801889a:	00db      	lsls	r3, r3, #3
 801889c:	4413      	add	r3, r2
 801889e:	685b      	ldr	r3, [r3, #4]
 80188a0:	f107 0218 	add.w	r2, r7, #24
 80188a4:	4610      	mov	r0, r2
 80188a6:	4798      	blx	r3
                rc = MQTT_SUCCESS;
 80188a8:	2300      	movs	r3, #0
 80188aa:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80188ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188ae:	3301      	adds	r3, #1
 80188b0:	627b      	str	r3, [r7, #36]	; 0x24
 80188b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188b4:	2b04      	cmp	r3, #4
 80188b6:	ddbf      	ble.n	8018838 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 80188b8:	6a3b      	ldr	r3, [r7, #32]
 80188ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80188be:	d112      	bne.n	80188e6 <deliverMessage+0xc6>
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d00e      	beq.n	80188e6 <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 80188c8:	f107 0310 	add.w	r3, r7, #16
 80188cc:	687a      	ldr	r2, [r7, #4]
 80188ce:	68b9      	ldr	r1, [r7, #8]
 80188d0:	4618      	mov	r0, r3
 80188d2:	f7ff fdbb 	bl	801844c <NewMessageData>
        c->defaultMessageHandler(&md);
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80188da:	f107 0210 	add.w	r2, r7, #16
 80188de:	4610      	mov	r0, r2
 80188e0:	4798      	blx	r3
        rc = MQTT_SUCCESS;
 80188e2:	2300      	movs	r3, #0
 80188e4:	623b      	str	r3, [r7, #32]
    }

    return rc;
 80188e6:	6a3b      	ldr	r3, [r7, #32]
}
 80188e8:	4618      	mov	r0, r3
 80188ea:	3728      	adds	r7, #40	; 0x28
 80188ec:	46bd      	mov	sp, r7
 80188ee:	bd80      	pop	{r7, pc}

080188f0 <keepalive>:


int keepalive(MQTTClient* c)
{
 80188f0:	b580      	push	{r7, lr}
 80188f2:	b086      	sub	sp, #24
 80188f4:	af00      	add	r7, sp, #0
 80188f6:	6078      	str	r0, [r7, #4]
    int rc = MQTT_SUCCESS;
 80188f8:	2300      	movs	r3, #0
 80188fa:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	699b      	ldr	r3, [r3, #24]
 8018900:	2b00      	cmp	r3, #0
 8018902:	d03e      	beq.n	8018982 <keepalive+0x92>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	3358      	adds	r3, #88	; 0x58
 8018908:	4618      	mov	r0, r3
 801890a:	f000 fc6b 	bl	80191e4 <TimerIsExpired>
 801890e:	4603      	mov	r3, r0
 8018910:	2b00      	cmp	r3, #0
 8018912:	d107      	bne.n	8018924 <keepalive+0x34>
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	3360      	adds	r3, #96	; 0x60
 8018918:	4618      	mov	r0, r3
 801891a:	f000 fc63 	bl	80191e4 <TimerIsExpired>
 801891e:	4603      	mov	r3, r0
 8018920:	2b00      	cmp	r3, #0
 8018922:	d030      	beq.n	8018986 <keepalive+0x96>
    {
        if (c->ping_outstanding)
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	7f1b      	ldrb	r3, [r3, #28]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d003      	beq.n	8018934 <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 801892c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018930:	617b      	str	r3, [r7, #20]
 8018932:	e029      	b.n	8018988 <keepalive+0x98>
        else
        {
            Timer timer;
            TimerInit(&timer);
 8018934:	f107 0308 	add.w	r3, r7, #8
 8018938:	4618      	mov	r0, r3
 801893a:	f000 fcab 	bl	8019294 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 801893e:	f107 0308 	add.w	r3, r7, #8
 8018942:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018946:	4618      	mov	r0, r3
 8018948:	f000 fc62 	bl	8019210 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	691a      	ldr	r2, [r3, #16]
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	689b      	ldr	r3, [r3, #8]
 8018954:	4619      	mov	r1, r3
 8018956:	4610      	mov	r0, r2
 8018958:	f000 ff98 	bl	801988c <MQTTSerialize_pingreq>
 801895c:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTT_SUCCESS) // send the ping packet
 801895e:	693b      	ldr	r3, [r7, #16]
 8018960:	2b00      	cmp	r3, #0
 8018962:	dd11      	ble.n	8018988 <keepalive+0x98>
 8018964:	f107 0308 	add.w	r3, r7, #8
 8018968:	461a      	mov	r2, r3
 801896a:	6939      	ldr	r1, [r7, #16]
 801896c:	6878      	ldr	r0, [r7, #4]
 801896e:	f7ff fd98 	bl	80184a2 <sendPacket>
 8018972:	6178      	str	r0, [r7, #20]
 8018974:	697b      	ldr	r3, [r7, #20]
 8018976:	2b00      	cmp	r3, #0
 8018978:	d106      	bne.n	8018988 <keepalive+0x98>
                c->ping_outstanding = 1;
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	2201      	movs	r2, #1
 801897e:	771a      	strb	r2, [r3, #28]
 8018980:	e002      	b.n	8018988 <keepalive+0x98>
        goto exit;
 8018982:	bf00      	nop
 8018984:	e000      	b.n	8018988 <keepalive+0x98>
        }
    }

exit:
 8018986:	bf00      	nop
    return rc;
 8018988:	697b      	ldr	r3, [r7, #20]
}
 801898a:	4618      	mov	r0, r3
 801898c:	3718      	adds	r7, #24
 801898e:	46bd      	mov	sp, r7
 8018990:	bd80      	pop	{r7, pc}

08018992 <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 8018992:	b480      	push	{r7}
 8018994:	b085      	sub	sp, #20
 8018996:	af00      	add	r7, sp, #0
 8018998:	6078      	str	r0, [r7, #4]
    int i = 0;
 801899a:	2300      	movs	r3, #0
 801899c:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801899e:	2300      	movs	r3, #0
 80189a0:	60fb      	str	r3, [r7, #12]
 80189a2:	e008      	b.n	80189b6 <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	68fa      	ldr	r2, [r7, #12]
 80189a8:	3205      	adds	r2, #5
 80189aa:	2100      	movs	r1, #0
 80189ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	3301      	adds	r3, #1
 80189b4:	60fb      	str	r3, [r7, #12]
 80189b6:	68fb      	ldr	r3, [r7, #12]
 80189b8:	2b04      	cmp	r3, #4
 80189ba:	ddf3      	ble.n	80189a4 <MQTTCleanSession+0x12>
}
 80189bc:	bf00      	nop
 80189be:	bf00      	nop
 80189c0:	3714      	adds	r7, #20
 80189c2:	46bd      	mov	sp, r7
 80189c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189c8:	4770      	bx	lr

080189ca <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 80189ca:	b580      	push	{r7, lr}
 80189cc:	b082      	sub	sp, #8
 80189ce:	af00      	add	r7, sp, #0
 80189d0:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	2200      	movs	r2, #0
 80189d6:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	2200      	movs	r2, #0
 80189dc:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d002      	beq.n	80189ec <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 80189e6:	6878      	ldr	r0, [r7, #4]
 80189e8:	f7ff ffd3 	bl	8018992 <MQTTCleanSession>
}
 80189ec:	bf00      	nop
 80189ee:	3708      	adds	r7, #8
 80189f0:	46bd      	mov	sp, r7
 80189f2:	bd80      	pop	{r7, pc}

080189f4 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 80189f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189f6:	b095      	sub	sp, #84	; 0x54
 80189f8:	af06      	add	r7, sp, #24
 80189fa:	6078      	str	r0, [r7, #4]
 80189fc:	6039      	str	r1, [r7, #0]
    int len = 0,
 80189fe:	2300      	movs	r3, #0
 8018a00:	637b      	str	r3, [r7, #52]	; 0x34
        rc = MQTT_SUCCESS;
 8018a02:	2300      	movs	r3, #0
 8018a04:	633b      	str	r3, [r7, #48]	; 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 8018a06:	6839      	ldr	r1, [r7, #0]
 8018a08:	6878      	ldr	r0, [r7, #4]
 8018a0a:	f7ff fe1c 	bl	8018646 <readPacket>
 8018a0e:	62f8      	str	r0, [r7, #44]	; 0x2c

    switch (packet_type)
 8018a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a12:	2b0d      	cmp	r3, #13
 8018a14:	d81e      	bhi.n	8018a54 <cycle+0x60>
 8018a16:	a201      	add	r2, pc, #4	; (adr r2, 8018a1c <cycle+0x28>)
 8018a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a1c:	08018bab 	.word	0x08018bab
 8018a20:	08018a55 	.word	0x08018a55
 8018a24:	08018bab 	.word	0x08018bab
 8018a28:	08018a5b 	.word	0x08018a5b
 8018a2c:	08018bab 	.word	0x08018bab
 8018a30:	08018b27 	.word	0x08018b27
 8018a34:	08018b27 	.word	0x08018b27
 8018a38:	08018bab 	.word	0x08018bab
 8018a3c:	08018a55 	.word	0x08018a55
 8018a40:	08018bab 	.word	0x08018bab
 8018a44:	08018a55 	.word	0x08018a55
 8018a48:	08018bab 	.word	0x08018bab
 8018a4c:	08018a55 	.word	0x08018a55
 8018a50:	08018ba3 	.word	0x08018ba3
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 8018a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a56:	633b      	str	r3, [r7, #48]	; 0x30
            goto exit;
 8018a58:	e0b9      	b.n	8018bce <cycle+0x1da>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 8018a5a:	2300      	movs	r3, #0
 8018a5c:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8018a62:	687a      	ldr	r2, [r7, #4]
 8018a64:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8018a66:	4616      	mov	r6, r2
 8018a68:	f107 0210 	add.w	r2, r7, #16
 8018a6c:	1d15      	adds	r5, r2, #4
 8018a6e:	f107 0210 	add.w	r2, r7, #16
 8018a72:	1c54      	adds	r4, r2, #1
 8018a74:	f107 010c 	add.w	r1, r7, #12
 8018a78:	f107 0210 	add.w	r2, r7, #16
 8018a7c:	1c90      	adds	r0, r2, #2
 8018a7e:	9604      	str	r6, [sp, #16]
 8018a80:	9303      	str	r3, [sp, #12]
 8018a82:	f107 0310 	add.w	r3, r7, #16
 8018a86:	330c      	adds	r3, #12
 8018a88:	9302      	str	r3, [sp, #8]
 8018a8a:	f107 0310 	add.w	r3, r7, #16
 8018a8e:	3308      	adds	r3, #8
 8018a90:	9301      	str	r3, [sp, #4]
 8018a92:	f107 0320 	add.w	r3, r7, #32
 8018a96:	9300      	str	r3, [sp, #0]
 8018a98:	462b      	mov	r3, r5
 8018a9a:	4622      	mov	r2, r4
 8018a9c:	f000 ff05 	bl	80198aa <MQTTDeserialize_publish>
 8018aa0:	4603      	mov	r3, r0
 8018aa2:	2b01      	cmp	r3, #1
 8018aa4:	f040 8090 	bne.w	8018bc8 <cycle+0x1d4>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	b2db      	uxtb	r3, r3
 8018aac:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 8018aae:	f107 0210 	add.w	r2, r7, #16
 8018ab2:	f107 0320 	add.w	r3, r7, #32
 8018ab6:	4619      	mov	r1, r3
 8018ab8:	6878      	ldr	r0, [r7, #4]
 8018aba:	f7ff feb1 	bl	8018820 <deliverMessage>
            if (msg.qos != QOS0)
 8018abe:	7c3b      	ldrb	r3, [r7, #16]
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d074      	beq.n	8018bae <cycle+0x1ba>
            {
                if (msg.qos == QOS1)
 8018ac4:	7c3b      	ldrb	r3, [r7, #16]
 8018ac6:	2b01      	cmp	r3, #1
 8018ac8:	d10c      	bne.n	8018ae4 <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	6918      	ldr	r0, [r3, #16]
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	689b      	ldr	r3, [r3, #8]
 8018ad2:	4619      	mov	r1, r3
 8018ad4:	8abb      	ldrh	r3, [r7, #20]
 8018ad6:	9300      	str	r3, [sp, #0]
 8018ad8:	2300      	movs	r3, #0
 8018ada:	2204      	movs	r2, #4
 8018adc:	f001 fa3f 	bl	8019f5e <MQTTSerialize_ack>
 8018ae0:	6378      	str	r0, [r7, #52]	; 0x34
 8018ae2:	e00e      	b.n	8018b02 <cycle+0x10e>
                else if (msg.qos == QOS2)
 8018ae4:	7c3b      	ldrb	r3, [r7, #16]
 8018ae6:	2b02      	cmp	r3, #2
 8018ae8:	d10b      	bne.n	8018b02 <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	6918      	ldr	r0, [r3, #16]
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	689b      	ldr	r3, [r3, #8]
 8018af2:	4619      	mov	r1, r3
 8018af4:	8abb      	ldrh	r3, [r7, #20]
 8018af6:	9300      	str	r3, [sp, #0]
 8018af8:	2300      	movs	r3, #0
 8018afa:	2205      	movs	r2, #5
 8018afc:	f001 fa2f 	bl	8019f5e <MQTTSerialize_ack>
 8018b00:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 8018b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	dc03      	bgt.n	8018b10 <cycle+0x11c>
                    rc = FAILURE;
 8018b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8018b0e:	e005      	b.n	8018b1c <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 8018b10:	683a      	ldr	r2, [r7, #0]
 8018b12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018b14:	6878      	ldr	r0, [r7, #4]
 8018b16:	f7ff fcc4 	bl	80184a2 <sendPacket>
 8018b1a:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 8018b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018b22:	d144      	bne.n	8018bae <cycle+0x1ba>
                    goto exit; // there was a problem
 8018b24:	e053      	b.n	8018bce <cycle+0x1da>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	695c      	ldr	r4, [r3, #20]
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	68db      	ldr	r3, [r3, #12]
 8018b2e:	f107 020a 	add.w	r2, r7, #10
 8018b32:	f107 0109 	add.w	r1, r7, #9
 8018b36:	f107 0008 	add.w	r0, r7, #8
 8018b3a:	9300      	str	r3, [sp, #0]
 8018b3c:	4623      	mov	r3, r4
 8018b3e:	f000 ff26 	bl	801998e <MQTTDeserialize_ack>
 8018b42:	4603      	mov	r3, r0
 8018b44:	2b01      	cmp	r3, #1
 8018b46:	d003      	beq.n	8018b50 <cycle+0x15c>
                rc = FAILURE;
 8018b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8018b4e:	e023      	b.n	8018b98 <cycle+0x1a4>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	6918      	ldr	r0, [r3, #16]
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	689b      	ldr	r3, [r3, #8]
 8018b58:	4619      	mov	r1, r3
 8018b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b5c:	2b05      	cmp	r3, #5
 8018b5e:	d101      	bne.n	8018b64 <cycle+0x170>
 8018b60:	2206      	movs	r2, #6
 8018b62:	e000      	b.n	8018b66 <cycle+0x172>
 8018b64:	2207      	movs	r2, #7
 8018b66:	897b      	ldrh	r3, [r7, #10]
 8018b68:	9300      	str	r3, [sp, #0]
 8018b6a:	2300      	movs	r3, #0
 8018b6c:	f001 f9f7 	bl	8019f5e <MQTTSerialize_ack>
 8018b70:	6378      	str	r0, [r7, #52]	; 0x34
 8018b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	dc03      	bgt.n	8018b80 <cycle+0x18c>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 8018b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8018b7e:	e00b      	b.n	8018b98 <cycle+0x1a4>
            else if ((rc = sendPacket(c, len, timer)) != MQTT_SUCCESS) // send the PUBREL packet
 8018b80:	683a      	ldr	r2, [r7, #0]
 8018b82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018b84:	6878      	ldr	r0, [r7, #4]
 8018b86:	f7ff fc8c 	bl	80184a2 <sendPacket>
 8018b8a:	6338      	str	r0, [r7, #48]	; 0x30
 8018b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d002      	beq.n	8018b98 <cycle+0x1a4>
                rc = FAILURE; // there was a problem
 8018b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018b96:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 8018b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018b9e:	d108      	bne.n	8018bb2 <cycle+0x1be>
                goto exit; // there was a problem
 8018ba0:	e015      	b.n	8018bce <cycle+0x1da>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	2200      	movs	r2, #0
 8018ba6:	771a      	strb	r2, [r3, #28]
            break;
 8018ba8:	e004      	b.n	8018bb4 <cycle+0x1c0>
            break;
 8018baa:	bf00      	nop
 8018bac:	e002      	b.n	8018bb4 <cycle+0x1c0>
            break;
 8018bae:	bf00      	nop
 8018bb0:	e000      	b.n	8018bb4 <cycle+0x1c0>
            break;
 8018bb2:	bf00      	nop
    }

    if (keepalive(c) != MQTT_SUCCESS) {
 8018bb4:	6878      	ldr	r0, [r7, #4]
 8018bb6:	f7ff fe9b 	bl	80188f0 <keepalive>
 8018bba:	4603      	mov	r3, r0
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d005      	beq.n	8018bcc <cycle+0x1d8>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 8018bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8018bc6:	e002      	b.n	8018bce <cycle+0x1da>
                goto exit;
 8018bc8:	bf00      	nop
 8018bca:	e000      	b.n	8018bce <cycle+0x1da>
    }

exit:
 8018bcc:	bf00      	nop
    if (rc == MQTT_SUCCESS)
 8018bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d102      	bne.n	8018bda <cycle+0x1e6>
        rc = packet_type;
 8018bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bd6:	633b      	str	r3, [r7, #48]	; 0x30
 8018bd8:	e006      	b.n	8018be8 <cycle+0x1f4>
    else if (c->isconnected)
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	6a1b      	ldr	r3, [r3, #32]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d002      	beq.n	8018be8 <cycle+0x1f4>
        MQTTCloseSession(c);
 8018be2:	6878      	ldr	r0, [r7, #4]
 8018be4:	f7ff fef1 	bl	80189ca <MQTTCloseSession>
    return rc;
 8018be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8018bea:	4618      	mov	r0, r3
 8018bec:	373c      	adds	r7, #60	; 0x3c
 8018bee:	46bd      	mov	sp, r7
 8018bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bf2:	bf00      	nop

08018bf4 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8018bf4:	b580      	push	{r7, lr}
 8018bf6:	b086      	sub	sp, #24
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	6078      	str	r0, [r7, #4]
 8018bfc:	6039      	str	r1, [r7, #0]
    int rc = MQTT_SUCCESS;
 8018bfe:	2300      	movs	r3, #0
 8018c00:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8018c02:	f107 030c 	add.w	r3, r7, #12
 8018c06:	4618      	mov	r0, r3
 8018c08:	f000 fb44 	bl	8019294 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 8018c0c:	683a      	ldr	r2, [r7, #0]
 8018c0e:	f107 030c 	add.w	r3, r7, #12
 8018c12:	4611      	mov	r1, r2
 8018c14:	4618      	mov	r0, r3
 8018c16:	f000 fafb 	bl	8019210 <TimerCountdownMS>

	  do
    {
        if (cycle(c, &timer) < 0)
 8018c1a:	f107 030c 	add.w	r3, r7, #12
 8018c1e:	4619      	mov	r1, r3
 8018c20:	6878      	ldr	r0, [r7, #4]
 8018c22:	f7ff fee7 	bl	80189f4 <cycle>
 8018c26:	4603      	mov	r3, r0
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	da03      	bge.n	8018c34 <MQTTYield+0x40>
        {
            rc = FAILURE;
 8018c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c30:	617b      	str	r3, [r7, #20]
            break;
 8018c32:	e007      	b.n	8018c44 <MQTTYield+0x50>
        }
  	} while (!TimerIsExpired(&timer));
 8018c34:	f107 030c 	add.w	r3, r7, #12
 8018c38:	4618      	mov	r0, r3
 8018c3a:	f000 fad3 	bl	80191e4 <TimerIsExpired>
 8018c3e:	4603      	mov	r3, r0
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d0ea      	beq.n	8018c1a <MQTTYield+0x26>

    return rc;
 8018c44:	697b      	ldr	r3, [r7, #20]
}
 8018c46:	4618      	mov	r0, r3
 8018c48:	3718      	adds	r7, #24
 8018c4a:	46bd      	mov	sp, r7
 8018c4c:	bd80      	pop	{r7, pc}

08018c4e <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8018c4e:	b580      	push	{r7, lr}
 8018c50:	b086      	sub	sp, #24
 8018c52:	af00      	add	r7, sp, #0
 8018c54:	60f8      	str	r0, [r7, #12]
 8018c56:	60b9      	str	r1, [r7, #8]
 8018c58:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8018c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c5e:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8018c60:	6878      	ldr	r0, [r7, #4]
 8018c62:	f000 fabf 	bl	80191e4 <TimerIsExpired>
 8018c66:	4603      	mov	r3, r0
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d10c      	bne.n	8018c86 <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 8018c6c:	6879      	ldr	r1, [r7, #4]
 8018c6e:	68f8      	ldr	r0, [r7, #12]
 8018c70:	f7ff fec0 	bl	80189f4 <cycle>
 8018c74:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 8018c76:	697a      	ldr	r2, [r7, #20]
 8018c78:	68bb      	ldr	r3, [r7, #8]
 8018c7a:	429a      	cmp	r2, r3
 8018c7c:	d004      	beq.n	8018c88 <waitfor+0x3a>
 8018c7e:	697b      	ldr	r3, [r7, #20]
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	daed      	bge.n	8018c60 <waitfor+0x12>
 8018c84:	e000      	b.n	8018c88 <waitfor+0x3a>
            break; // we timed out
 8018c86:	bf00      	nop

    return rc;
 8018c88:	697b      	ldr	r3, [r7, #20]
}
 8018c8a:	4618      	mov	r0, r3
 8018c8c:	3718      	adds	r7, #24
 8018c8e:	46bd      	mov	sp, r7
 8018c90:	bd80      	pop	{r7, pc}
	...

08018c94 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 8018c94:	b580      	push	{r7, lr}
 8018c96:	b09e      	sub	sp, #120	; 0x78
 8018c98:	af00      	add	r7, sp, #0
 8018c9a:	60f8      	str	r0, [r7, #12]
 8018c9c:	60b9      	str	r1, [r7, #8]
 8018c9e:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 8018ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ca4:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8018ca6:	4a43      	ldr	r2, [pc, #268]	; (8018db4 <MQTTConnectWithResults+0x120>)
 8018ca8:	f107 0310 	add.w	r3, r7, #16
 8018cac:	4611      	mov	r1, r2
 8018cae:	2258      	movs	r2, #88	; 0x58
 8018cb0:	4618      	mov	r0, r3
 8018cb2:	f004 fc9f 	bl	801d5f4 <memcpy>
    int len = 0;
 8018cb6:	2300      	movs	r3, #0
 8018cb8:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 8018cba:	68fb      	ldr	r3, [r7, #12]
 8018cbc:	6a1b      	ldr	r3, [r3, #32]
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d164      	bne.n	8018d8c <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 8018cc2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	f000 fae4 	bl	8019294 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8018ccc:	68fb      	ldr	r3, [r7, #12]
 8018cce:	685a      	ldr	r2, [r3, #4]
 8018cd0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018cd4:	4611      	mov	r1, r2
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	f000 fa9a 	bl	8019210 <TimerCountdownMS>

    if (options == 0)
 8018cdc:	68bb      	ldr	r3, [r7, #8]
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d102      	bne.n	8018ce8 <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 8018ce2:	f107 0310 	add.w	r3, r7, #16
 8018ce6:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 8018ce8:	68bb      	ldr	r3, [r7, #8]
 8018cea:	8b1b      	ldrh	r3, [r3, #24]
 8018cec:	461a      	mov	r2, r3
 8018cee:	68fb      	ldr	r3, [r7, #12]
 8018cf0:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 8018cf2:	68bb      	ldr	r3, [r7, #8]
 8018cf4:	7e9b      	ldrb	r3, [r3, #26]
 8018cf6:	461a      	mov	r2, r3
 8018cf8:	68fb      	ldr	r3, [r7, #12]
 8018cfa:	625a      	str	r2, [r3, #36]	; 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	699b      	ldr	r3, [r3, #24]
 8018d06:	4619      	mov	r1, r3
 8018d08:	4610      	mov	r0, r2
 8018d0a:	f000 fa95 	bl	8019238 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	6918      	ldr	r0, [r3, #16]
 8018d12:	68fb      	ldr	r3, [r7, #12]
 8018d14:	689b      	ldr	r3, [r3, #8]
 8018d16:	68ba      	ldr	r2, [r7, #8]
 8018d18:	4619      	mov	r1, r3
 8018d1a:	f000 fc2f 	bl	801957c <MQTTSerialize_connect>
 8018d1e:	6738      	str	r0, [r7, #112]	; 0x70
 8018d20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	dd34      	ble.n	8018d90 <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTT_SUCCESS)  // send the connect packet
 8018d26:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018d2a:	461a      	mov	r2, r3
 8018d2c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8018d2e:	68f8      	ldr	r0, [r7, #12]
 8018d30:	f7ff fbb7 	bl	80184a2 <sendPacket>
 8018d34:	6778      	str	r0, [r7, #116]	; 0x74
 8018d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d12b      	bne.n	8018d94 <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8018d3c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018d40:	461a      	mov	r2, r3
 8018d42:	2102      	movs	r1, #2
 8018d44:	68f8      	ldr	r0, [r7, #12]
 8018d46:	f7ff ff82 	bl	8018c4e <waitfor>
 8018d4a:	4603      	mov	r3, r0
 8018d4c:	2b02      	cmp	r3, #2
 8018d4e:	d119      	bne.n	8018d84 <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	2200      	movs	r2, #0
 8018d54:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	2200      	movs	r2, #0
 8018d5a:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	1c58      	adds	r0, r3, #1
 8018d60:	6879      	ldr	r1, [r7, #4]
 8018d62:	68fb      	ldr	r3, [r7, #12]
 8018d64:	695a      	ldr	r2, [r3, #20]
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	68db      	ldr	r3, [r3, #12]
 8018d6a:	f000 fcf3 	bl	8019754 <MQTTDeserialize_connack>
 8018d6e:	4603      	mov	r3, r0
 8018d70:	2b01      	cmp	r3, #1
 8018d72:	d103      	bne.n	8018d7c <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	781b      	ldrb	r3, [r3, #0]
 8018d78:	677b      	str	r3, [r7, #116]	; 0x74
 8018d7a:	e00c      	b.n	8018d96 <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 8018d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d80:	677b      	str	r3, [r7, #116]	; 0x74
 8018d82:	e008      	b.n	8018d96 <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 8018d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d88:	677b      	str	r3, [r7, #116]	; 0x74
 8018d8a:	e004      	b.n	8018d96 <MQTTConnectWithResults+0x102>
		  goto exit;
 8018d8c:	bf00      	nop
 8018d8e:	e002      	b.n	8018d96 <MQTTConnectWithResults+0x102>
        goto exit;
 8018d90:	bf00      	nop
 8018d92:	e000      	b.n	8018d96 <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 8018d94:	bf00      	nop

exit:
    if (rc == MQTT_SUCCESS)
 8018d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d105      	bne.n	8018da8 <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 8018d9c:	68fb      	ldr	r3, [r7, #12]
 8018d9e:	2201      	movs	r2, #1
 8018da0:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	2200      	movs	r2, #0
 8018da6:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 8018da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8018daa:	4618      	mov	r0, r3
 8018dac:	3778      	adds	r7, #120	; 0x78
 8018dae:	46bd      	mov	sp, r7
 8018db0:	bd80      	pop	{r7, pc}
 8018db2:	bf00      	nop
 8018db4:	08021dd8 	.word	0x08021dd8

08018db8 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8018db8:	b580      	push	{r7, lr}
 8018dba:	b084      	sub	sp, #16
 8018dbc:	af00      	add	r7, sp, #0
 8018dbe:	6078      	str	r0, [r7, #4]
 8018dc0:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 8018dc2:	f107 030c 	add.w	r3, r7, #12
 8018dc6:	461a      	mov	r2, r3
 8018dc8:	6839      	ldr	r1, [r7, #0]
 8018dca:	6878      	ldr	r0, [r7, #4]
 8018dcc:	f7ff ff62 	bl	8018c94 <MQTTConnectWithResults>
 8018dd0:	4603      	mov	r3, r0
}
 8018dd2:	4618      	mov	r0, r3
 8018dd4:	3710      	adds	r7, #16
 8018dd6:	46bd      	mov	sp, r7
 8018dd8:	bd80      	pop	{r7, pc}

08018dda <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 8018dda:	b580      	push	{r7, lr}
 8018ddc:	b086      	sub	sp, #24
 8018dde:	af00      	add	r7, sp, #0
 8018de0:	60f8      	str	r0, [r7, #12]
 8018de2:	60b9      	str	r1, [r7, #8]
 8018de4:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8018de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018dea:	617b      	str	r3, [r7, #20]
    int i = -1;
 8018dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018df0:	613b      	str	r3, [r7, #16]

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018df2:	2300      	movs	r3, #0
 8018df4:	613b      	str	r3, [r7, #16]
 8018df6:	e028      	b.n	8018e4a <MQTTSetMessageHandler+0x70>
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 8018df8:	68fb      	ldr	r3, [r7, #12]
 8018dfa:	693a      	ldr	r2, [r7, #16]
 8018dfc:	3205      	adds	r2, #5
 8018dfe:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d01e      	beq.n	8018e44 <MQTTSetMessageHandler+0x6a>
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	693a      	ldr	r2, [r7, #16]
 8018e0a:	3205      	adds	r2, #5
 8018e0c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018e10:	68b9      	ldr	r1, [r7, #8]
 8018e12:	4618      	mov	r0, r3
 8018e14:	f7e7 fa14 	bl	8000240 <strcmp>
 8018e18:	4603      	mov	r3, r0
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d112      	bne.n	8018e44 <MQTTSetMessageHandler+0x6a>
        {
            if (messageHandler == NULL) /* remove existing */
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d10c      	bne.n	8018e3e <MQTTSetMessageHandler+0x64>
            {
                c->messageHandlers[i].topicFilter = NULL;
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	693a      	ldr	r2, [r7, #16]
 8018e28:	3205      	adds	r2, #5
 8018e2a:	2100      	movs	r1, #0
 8018e2c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                c->messageHandlers[i].fp = NULL;
 8018e30:	68fa      	ldr	r2, [r7, #12]
 8018e32:	693b      	ldr	r3, [r7, #16]
 8018e34:	3305      	adds	r3, #5
 8018e36:	00db      	lsls	r3, r3, #3
 8018e38:	4413      	add	r3, r2
 8018e3a:	2200      	movs	r2, #0
 8018e3c:	605a      	str	r2, [r3, #4]
            }
            rc = MQTT_SUCCESS; /* return i when adding new subscription */
 8018e3e:	2300      	movs	r3, #0
 8018e40:	617b      	str	r3, [r7, #20]
            break;
 8018e42:	e005      	b.n	8018e50 <MQTTSetMessageHandler+0x76>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018e44:	693b      	ldr	r3, [r7, #16]
 8018e46:	3301      	adds	r3, #1
 8018e48:	613b      	str	r3, [r7, #16]
 8018e4a:	693b      	ldr	r3, [r7, #16]
 8018e4c:	2b04      	cmp	r3, #4
 8018e4e:	ddd3      	ble.n	8018df8 <MQTTSetMessageHandler+0x1e>
        }
    }
    /* if no existing, look for empty slot (unless we are removing) */
    if (messageHandler != NULL) {
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d026      	beq.n	8018ea4 <MQTTSetMessageHandler+0xca>
        if (rc == FAILURE)
 8018e56:	697b      	ldr	r3, [r7, #20]
 8018e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018e5c:	d112      	bne.n	8018e84 <MQTTSetMessageHandler+0xaa>
        {
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018e5e:	2300      	movs	r3, #0
 8018e60:	613b      	str	r3, [r7, #16]
 8018e62:	e00c      	b.n	8018e7e <MQTTSetMessageHandler+0xa4>
            {
                if (c->messageHandlers[i].topicFilter == NULL)
 8018e64:	68fb      	ldr	r3, [r7, #12]
 8018e66:	693a      	ldr	r2, [r7, #16]
 8018e68:	3205      	adds	r2, #5
 8018e6a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d102      	bne.n	8018e78 <MQTTSetMessageHandler+0x9e>
                {
                    rc = MQTT_SUCCESS;
 8018e72:	2300      	movs	r3, #0
 8018e74:	617b      	str	r3, [r7, #20]
                    break;
 8018e76:	e005      	b.n	8018e84 <MQTTSetMessageHandler+0xaa>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018e78:	693b      	ldr	r3, [r7, #16]
 8018e7a:	3301      	adds	r3, #1
 8018e7c:	613b      	str	r3, [r7, #16]
 8018e7e:	693b      	ldr	r3, [r7, #16]
 8018e80:	2b04      	cmp	r3, #4
 8018e82:	ddef      	ble.n	8018e64 <MQTTSetMessageHandler+0x8a>
                }
            }
        }
        if (i < MAX_MESSAGE_HANDLERS)
 8018e84:	693b      	ldr	r3, [r7, #16]
 8018e86:	2b04      	cmp	r3, #4
 8018e88:	dc0c      	bgt.n	8018ea4 <MQTTSetMessageHandler+0xca>
        {
            c->messageHandlers[i].topicFilter = topicFilter;
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	693a      	ldr	r2, [r7, #16]
 8018e8e:	3205      	adds	r2, #5
 8018e90:	68b9      	ldr	r1, [r7, #8]
 8018e92:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            c->messageHandlers[i].fp = messageHandler;
 8018e96:	68fa      	ldr	r2, [r7, #12]
 8018e98:	693b      	ldr	r3, [r7, #16]
 8018e9a:	3305      	adds	r3, #5
 8018e9c:	00db      	lsls	r3, r3, #3
 8018e9e:	4413      	add	r3, r2
 8018ea0:	687a      	ldr	r2, [r7, #4]
 8018ea2:	605a      	str	r2, [r3, #4]
        }
    }
    return rc;
 8018ea4:	697b      	ldr	r3, [r7, #20]
}
 8018ea6:	4618      	mov	r0, r3
 8018ea8:	3718      	adds	r7, #24
 8018eaa:	46bd      	mov	sp, r7
 8018eac:	bd80      	pop	{r7, pc}

08018eae <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 8018eae:	b5b0      	push	{r4, r5, r7, lr}
 8018eb0:	b092      	sub	sp, #72	; 0x48
 8018eb2:	af04      	add	r7, sp, #16
 8018eb4:	60f8      	str	r0, [r7, #12]
 8018eb6:	60b9      	str	r1, [r7, #8]
 8018eb8:	603b      	str	r3, [r7, #0]
 8018eba:	4613      	mov	r3, r2
 8018ebc:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8018ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ec2:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    int len = 0;
 8018ec4:	2300      	movs	r3, #0
 8018ec6:	633b      	str	r3, [r7, #48]	; 0x30
    MQTTString topic = MQTTString_initializer;
 8018ec8:	2300      	movs	r3, #0
 8018eca:	61fb      	str	r3, [r7, #28]
 8018ecc:	2300      	movs	r3, #0
 8018ece:	623b      	str	r3, [r7, #32]
 8018ed0:	2300      	movs	r3, #0
 8018ed2:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicFilter;
 8018ed4:	68bb      	ldr	r3, [r7, #8]
 8018ed6:	61fb      	str	r3, [r7, #28]

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 8018ed8:	68fb      	ldr	r3, [r7, #12]
 8018eda:	6a1b      	ldr	r3, [r3, #32]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d062      	beq.n	8018fa6 <MQTTSubscribeWithResults+0xf8>
		    goto exit;

    TimerInit(&timer);
 8018ee0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	f000 f9d5 	bl	8019294 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	685a      	ldr	r2, [r3, #4]
 8018eee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018ef2:	4611      	mov	r1, r2
 8018ef4:	4618      	mov	r0, r3
 8018ef6:	f000 f98b 	bl	8019210 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic,(int*)&qos);
 8018efa:	68fb      	ldr	r3, [r7, #12]
 8018efc:	691c      	ldr	r4, [r3, #16]
 8018efe:	68fb      	ldr	r3, [r7, #12]
 8018f00:	689b      	ldr	r3, [r3, #8]
 8018f02:	461d      	mov	r5, r3
 8018f04:	68f8      	ldr	r0, [r7, #12]
 8018f06:	f7ff fab3 	bl	8018470 <getNextPacketId>
 8018f0a:	4603      	mov	r3, r0
 8018f0c:	b29a      	uxth	r2, r3
 8018f0e:	1dfb      	adds	r3, r7, #7
 8018f10:	9302      	str	r3, [sp, #8]
 8018f12:	f107 031c 	add.w	r3, r7, #28
 8018f16:	9301      	str	r3, [sp, #4]
 8018f18:	2301      	movs	r3, #1
 8018f1a:	9300      	str	r3, [sp, #0]
 8018f1c:	4613      	mov	r3, r2
 8018f1e:	2200      	movs	r2, #0
 8018f20:	4629      	mov	r1, r5
 8018f22:	4620      	mov	r0, r4
 8018f24:	f001 f897 	bl	801a056 <MQTTSerialize_subscribe>
 8018f28:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 8018f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	dd3c      	ble.n	8018faa <MQTTSubscribeWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 8018f30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018f34:	461a      	mov	r2, r3
 8018f36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018f38:	68f8      	ldr	r0, [r7, #12]
 8018f3a:	f7ff fab2 	bl	80184a2 <sendPacket>
 8018f3e:	6378      	str	r0, [r7, #52]	; 0x34
 8018f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d133      	bne.n	8018fae <MQTTSubscribeWithResults+0x100>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 8018f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018f4a:	461a      	mov	r2, r3
 8018f4c:	2109      	movs	r1, #9
 8018f4e:	68f8      	ldr	r0, [r7, #12]
 8018f50:	f7ff fe7d 	bl	8018c4e <waitfor>
 8018f54:	4603      	mov	r3, r0
 8018f56:	2b09      	cmp	r3, #9
 8018f58:	d121      	bne.n	8018f9e <MQTTSubscribeWithResults+0xf0>
    {
        int count = 0;
 8018f5a:	2300      	movs	r3, #0
 8018f5c:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        data->grantedQoS = QOS0;
 8018f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018f60:	2200      	movs	r2, #0
 8018f62:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, 0, c->readbuf, c->readbuf_size) == 1)
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	695b      	ldr	r3, [r3, #20]
 8018f68:	68fa      	ldr	r2, [r7, #12]
 8018f6a:	68d2      	ldr	r2, [r2, #12]
 8018f6c:	4611      	mov	r1, r2
 8018f6e:	f107 0218 	add.w	r2, r7, #24
 8018f72:	f107 0016 	add.w	r0, r7, #22
 8018f76:	9101      	str	r1, [sp, #4]
 8018f78:	9300      	str	r3, [sp, #0]
 8018f7a:	2300      	movs	r3, #0
 8018f7c:	2101      	movs	r1, #1
 8018f7e:	f001 f8e6 	bl	801a14e <MQTTDeserialize_suback>
 8018f82:	4603      	mov	r3, r0
 8018f84:	2b01      	cmp	r3, #1
 8018f86:	d113      	bne.n	8018fb0 <MQTTSubscribeWithResults+0x102>
        {
            if (data->grantedQoS != 0x80)
 8018f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018f8a:	781b      	ldrb	r3, [r3, #0]
 8018f8c:	2b80      	cmp	r3, #128	; 0x80
 8018f8e:	d00f      	beq.n	8018fb0 <MQTTSubscribeWithResults+0x102>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 8018f90:	683a      	ldr	r2, [r7, #0]
 8018f92:	68b9      	ldr	r1, [r7, #8]
 8018f94:	68f8      	ldr	r0, [r7, #12]
 8018f96:	f7ff ff20 	bl	8018dda <MQTTSetMessageHandler>
 8018f9a:	6378      	str	r0, [r7, #52]	; 0x34
 8018f9c:	e008      	b.n	8018fb0 <MQTTSubscribeWithResults+0x102>
        }
    }
    else
        rc = FAILURE;
 8018f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8018fa4:	e004      	b.n	8018fb0 <MQTTSubscribeWithResults+0x102>
		    goto exit;
 8018fa6:	bf00      	nop
 8018fa8:	e002      	b.n	8018fb0 <MQTTSubscribeWithResults+0x102>
        goto exit;
 8018faa:	bf00      	nop
 8018fac:	e000      	b.n	8018fb0 <MQTTSubscribeWithResults+0x102>
        goto exit;             // there was a problem
 8018fae:	bf00      	nop

exit:
    if (rc == FAILURE)
 8018fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018fb6:	d102      	bne.n	8018fbe <MQTTSubscribeWithResults+0x110>
        MQTTCloseSession(c);
 8018fb8:	68f8      	ldr	r0, [r7, #12]
 8018fba:	f7ff fd06 	bl	80189ca <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8018fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	3738      	adds	r7, #56	; 0x38
 8018fc4:	46bd      	mov	sp, r7
 8018fc6:	bdb0      	pop	{r4, r5, r7, pc}

08018fc8 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 8018fc8:	b580      	push	{r7, lr}
 8018fca:	b088      	sub	sp, #32
 8018fcc:	af02      	add	r7, sp, #8
 8018fce:	60f8      	str	r0, [r7, #12]
 8018fd0:	60b9      	str	r1, [r7, #8]
 8018fd2:	603b      	str	r3, [r7, #0]
 8018fd4:	4613      	mov	r3, r2
 8018fd6:	71fb      	strb	r3, [r7, #7]
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 8018fd8:	79fa      	ldrb	r2, [r7, #7]
 8018fda:	f107 0314 	add.w	r3, r7, #20
 8018fde:	9300      	str	r3, [sp, #0]
 8018fe0:	683b      	ldr	r3, [r7, #0]
 8018fe2:	68b9      	ldr	r1, [r7, #8]
 8018fe4:	68f8      	ldr	r0, [r7, #12]
 8018fe6:	f7ff ff62 	bl	8018eae <MQTTSubscribeWithResults>
 8018fea:	4603      	mov	r3, r0
}
 8018fec:	4618      	mov	r0, r3
 8018fee:	3718      	adds	r7, #24
 8018ff0:	46bd      	mov	sp, r7
 8018ff2:	bd80      	pop	{r7, pc}

08018ff4 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 8018ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ff6:	b097      	sub	sp, #92	; 0x5c
 8018ff8:	af08      	add	r7, sp, #32
 8018ffa:	60f8      	str	r0, [r7, #12]
 8018ffc:	60b9      	str	r1, [r7, #8]
 8018ffe:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8019000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019004:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 8019006:	2300      	movs	r3, #0
 8019008:	61fb      	str	r3, [r7, #28]
 801900a:	2300      	movs	r3, #0
 801900c:	623b      	str	r3, [r7, #32]
 801900e:	2300      	movs	r3, #0
 8019010:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 8019012:	68bb      	ldr	r3, [r7, #8]
 8019014:	61fb      	str	r3, [r7, #28]
    int len = 0;
 8019016:	2300      	movs	r3, #0
 8019018:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	6a1b      	ldr	r3, [r3, #32]
 801901e:	2b00      	cmp	r3, #0
 8019020:	f000 809b 	beq.w	801915a <MQTTPublish+0x166>
		    goto exit;

    TimerInit(&timer);
 8019024:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019028:	4618      	mov	r0, r3
 801902a:	f000 f933 	bl	8019294 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801902e:	68fb      	ldr	r3, [r7, #12]
 8019030:	685a      	ldr	r2, [r3, #4]
 8019032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019036:	4611      	mov	r1, r2
 8019038:	4618      	mov	r0, r3
 801903a:	f000 f8e9 	bl	8019210 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	781b      	ldrb	r3, [r3, #0]
 8019042:	2b01      	cmp	r3, #1
 8019044:	d003      	beq.n	801904e <MQTTPublish+0x5a>
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	781b      	ldrb	r3, [r3, #0]
 801904a:	2b02      	cmp	r3, #2
 801904c:	d106      	bne.n	801905c <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 801904e:	68f8      	ldr	r0, [r7, #12]
 8019050:	f7ff fa0e 	bl	8018470 <getNextPacketId>
 8019054:	4603      	mov	r3, r0
 8019056:	b29a      	uxth	r2, r3
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801905c:	68fb      	ldr	r3, [r7, #12]
 801905e:	691b      	ldr	r3, [r3, #16]
 8019060:	603b      	str	r3, [r7, #0]
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	689b      	ldr	r3, [r3, #8]
 8019066:	469c      	mov	ip, r3
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	781b      	ldrb	r3, [r3, #0]
 801906c:	469e      	mov	lr, r3
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	785d      	ldrb	r5, [r3, #1]
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	689b      	ldr	r3, [r3, #8]
 801907a:	687a      	ldr	r2, [r7, #4]
 801907c:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801907e:	9206      	str	r2, [sp, #24]
 8019080:	9305      	str	r3, [sp, #20]
 8019082:	ac02      	add	r4, sp, #8
 8019084:	f107 031c 	add.w	r3, r7, #28
 8019088:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801908c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019090:	9601      	str	r6, [sp, #4]
 8019092:	9500      	str	r5, [sp, #0]
 8019094:	4673      	mov	r3, lr
 8019096:	2200      	movs	r2, #0
 8019098:	4661      	mov	r1, ip
 801909a:	6838      	ldr	r0, [r7, #0]
 801909c:	f000 fee9 	bl	8019e72 <MQTTSerialize_publish>
 80190a0:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 80190a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	dd5a      	ble.n	801915e <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 80190a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80190ac:	461a      	mov	r2, r3
 80190ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80190b0:	68f8      	ldr	r0, [r7, #12]
 80190b2:	f7ff f9f6 	bl	80184a2 <sendPacket>
 80190b6:	6378      	str	r0, [r7, #52]	; 0x34
 80190b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d151      	bne.n	8019162 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	781b      	ldrb	r3, [r3, #0]
 80190c2:	2b01      	cmp	r3, #1
 80190c4:	d122      	bne.n	801910c <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 80190c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80190ca:	461a      	mov	r2, r3
 80190cc:	2104      	movs	r1, #4
 80190ce:	68f8      	ldr	r0, [r7, #12]
 80190d0:	f7ff fdbd 	bl	8018c4e <waitfor>
 80190d4:	4603      	mov	r3, r0
 80190d6:	2b04      	cmp	r3, #4
 80190d8:	d114      	bne.n	8019104 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	695c      	ldr	r4, [r3, #20]
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	68db      	ldr	r3, [r3, #12]
 80190e2:	f107 021a 	add.w	r2, r7, #26
 80190e6:	f107 0119 	add.w	r1, r7, #25
 80190ea:	f107 0018 	add.w	r0, r7, #24
 80190ee:	9300      	str	r3, [sp, #0]
 80190f0:	4623      	mov	r3, r4
 80190f2:	f000 fc4c 	bl	801998e <MQTTDeserialize_ack>
 80190f6:	4603      	mov	r3, r0
 80190f8:	2b01      	cmp	r3, #1
 80190fa:	d035      	beq.n	8019168 <MQTTPublish+0x174>
                rc = FAILURE;
 80190fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019100:	637b      	str	r3, [r7, #52]	; 0x34
 8019102:	e031      	b.n	8019168 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8019104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019108:	637b      	str	r3, [r7, #52]	; 0x34
 801910a:	e02d      	b.n	8019168 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	781b      	ldrb	r3, [r3, #0]
 8019110:	2b02      	cmp	r3, #2
 8019112:	d128      	bne.n	8019166 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 8019114:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019118:	461a      	mov	r2, r3
 801911a:	2107      	movs	r1, #7
 801911c:	68f8      	ldr	r0, [r7, #12]
 801911e:	f7ff fd96 	bl	8018c4e <waitfor>
 8019122:	4603      	mov	r3, r0
 8019124:	2b07      	cmp	r3, #7
 8019126:	d114      	bne.n	8019152 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8019128:	68fb      	ldr	r3, [r7, #12]
 801912a:	695c      	ldr	r4, [r3, #20]
 801912c:	68fb      	ldr	r3, [r7, #12]
 801912e:	68db      	ldr	r3, [r3, #12]
 8019130:	f107 0216 	add.w	r2, r7, #22
 8019134:	f107 0115 	add.w	r1, r7, #21
 8019138:	f107 0014 	add.w	r0, r7, #20
 801913c:	9300      	str	r3, [sp, #0]
 801913e:	4623      	mov	r3, r4
 8019140:	f000 fc25 	bl	801998e <MQTTDeserialize_ack>
 8019144:	4603      	mov	r3, r0
 8019146:	2b01      	cmp	r3, #1
 8019148:	d00e      	beq.n	8019168 <MQTTPublish+0x174>
                rc = FAILURE;
 801914a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801914e:	637b      	str	r3, [r7, #52]	; 0x34
 8019150:	e00a      	b.n	8019168 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8019152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019156:	637b      	str	r3, [r7, #52]	; 0x34
 8019158:	e006      	b.n	8019168 <MQTTPublish+0x174>
		    goto exit;
 801915a:	bf00      	nop
 801915c:	e004      	b.n	8019168 <MQTTPublish+0x174>
        goto exit;
 801915e:	bf00      	nop
 8019160:	e002      	b.n	8019168 <MQTTPublish+0x174>
        goto exit; // there was a problem
 8019162:	bf00      	nop
 8019164:	e000      	b.n	8019168 <MQTTPublish+0x174>
    }

exit:
 8019166:	bf00      	nop
    if (rc == FAILURE)
 8019168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801916a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801916e:	d102      	bne.n	8019176 <MQTTPublish+0x182>
        MQTTCloseSession(c);
 8019170:	68f8      	ldr	r0, [r7, #12]
 8019172:	f7ff fc2a 	bl	80189ca <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8019176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019178:	4618      	mov	r0, r3
 801917a:	373c      	adds	r7, #60	; 0x3c
 801917c:	46bd      	mov	sp, r7
 801917e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019180 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 8019180:	b580      	push	{r7, lr}
 8019182:	b086      	sub	sp, #24
 8019184:	af00      	add	r7, sp, #0
 8019186:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8019188:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801918c:	617b      	str	r3, [r7, #20]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
 801918e:	2300      	movs	r3, #0
 8019190:	613b      	str	r3, [r7, #16]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 8019192:	f107 0308 	add.w	r3, r7, #8
 8019196:	4618      	mov	r0, r3
 8019198:	f000 f87c 	bl	8019294 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	685a      	ldr	r2, [r3, #4]
 80191a0:	f107 0308 	add.w	r3, r7, #8
 80191a4:	4611      	mov	r1, r2
 80191a6:	4618      	mov	r0, r3
 80191a8:	f000 f832 	bl	8019210 <TimerCountdownMS>

	  len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	691a      	ldr	r2, [r3, #16]
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	689b      	ldr	r3, [r3, #8]
 80191b4:	4619      	mov	r1, r3
 80191b6:	4610      	mov	r0, r2
 80191b8:	f000 fb59 	bl	801986e <MQTTSerialize_disconnect>
 80191bc:	6138      	str	r0, [r7, #16]
    if (len > 0)
 80191be:	693b      	ldr	r3, [r7, #16]
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	dd07      	ble.n	80191d4 <MQTTDisconnect+0x54>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 80191c4:	f107 0308 	add.w	r3, r7, #8
 80191c8:	461a      	mov	r2, r3
 80191ca:	6939      	ldr	r1, [r7, #16]
 80191cc:	6878      	ldr	r0, [r7, #4]
 80191ce:	f7ff f968 	bl	80184a2 <sendPacket>
 80191d2:	6178      	str	r0, [r7, #20]
    MQTTCloseSession(c);
 80191d4:	6878      	ldr	r0, [r7, #4]
 80191d6:	f7ff fbf8 	bl	80189ca <MQTTCloseSession>

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 80191da:	697b      	ldr	r3, [r7, #20]
}
 80191dc:	4618      	mov	r0, r3
 80191de:	3718      	adds	r7, #24
 80191e0:	46bd      	mov	sp, r7
 80191e2:	bd80      	pop	{r7, pc}

080191e4 <TimerIsExpired>:
//#define SERVER_IP4	84

uint32_t MilliTimer;

//Timer functions
char TimerIsExpired(Timer *timer) {
 80191e4:	b480      	push	{r7}
 80191e6:	b085      	sub	sp, #20
 80191e8:	af00      	add	r7, sp, #0
 80191ea:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	685a      	ldr	r2, [r3, #4]
 80191f0:	4b06      	ldr	r3, [pc, #24]	; (801920c <TimerIsExpired+0x28>)
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	1ad3      	subs	r3, r2, r3
 80191f6:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	0fdb      	lsrs	r3, r3, #31
 80191fc:	b2db      	uxtb	r3, r3
}
 80191fe:	4618      	mov	r0, r3
 8019200:	3714      	adds	r7, #20
 8019202:	46bd      	mov	sp, r7
 8019204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019208:	4770      	bx	lr
 801920a:	bf00      	nop
 801920c:	20011518 	.word	0x20011518

08019210 <TimerCountdownMS>:

void TimerCountdownMS(Timer *timer, unsigned int timeout) {
 8019210:	b480      	push	{r7}
 8019212:	b083      	sub	sp, #12
 8019214:	af00      	add	r7, sp, #0
 8019216:	6078      	str	r0, [r7, #4]
 8019218:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 801921a:	4b06      	ldr	r3, [pc, #24]	; (8019234 <TimerCountdownMS+0x24>)
 801921c:	681a      	ldr	r2, [r3, #0]
 801921e:	683b      	ldr	r3, [r7, #0]
 8019220:	441a      	add	r2, r3
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	605a      	str	r2, [r3, #4]
}
 8019226:	bf00      	nop
 8019228:	370c      	adds	r7, #12
 801922a:	46bd      	mov	sp, r7
 801922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019230:	4770      	bx	lr
 8019232:	bf00      	nop
 8019234:	20011518 	.word	0x20011518

08019238 <TimerCountdown>:

void TimerCountdown(Timer *timer, unsigned int timeout) {
 8019238:	b480      	push	{r7}
 801923a:	b083      	sub	sp, #12
 801923c:	af00      	add	r7, sp, #0
 801923e:	6078      	str	r0, [r7, #4]
 8019240:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8019242:	683b      	ldr	r3, [r7, #0]
 8019244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019248:	fb03 f202 	mul.w	r2, r3, r2
 801924c:	4b05      	ldr	r3, [pc, #20]	; (8019264 <TimerCountdown+0x2c>)
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	441a      	add	r2, r3
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	605a      	str	r2, [r3, #4]
}
 8019256:	bf00      	nop
 8019258:	370c      	adds	r7, #12
 801925a:	46bd      	mov	sp, r7
 801925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019260:	4770      	bx	lr
 8019262:	bf00      	nop
 8019264:	20011518 	.word	0x20011518

08019268 <TimerLeftMS>:

int TimerLeftMS(Timer *timer) {
 8019268:	b480      	push	{r7}
 801926a:	b085      	sub	sp, #20
 801926c:	af00      	add	r7, sp, #0
 801926e:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	685a      	ldr	r2, [r3, #4]
 8019274:	4b06      	ldr	r3, [pc, #24]	; (8019290 <TimerLeftMS+0x28>)
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	1ad3      	subs	r3, r2, r3
 801927a:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8019282:	4618      	mov	r0, r3
 8019284:	3714      	adds	r7, #20
 8019286:	46bd      	mov	sp, r7
 8019288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801928c:	4770      	bx	lr
 801928e:	bf00      	nop
 8019290:	20011518 	.word	0x20011518

08019294 <TimerInit>:

void TimerInit(Timer *timer) {
 8019294:	b480      	push	{r7}
 8019296:	b083      	sub	sp, #12
 8019298:	af00      	add	r7, sp, #0
 801929a:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	2200      	movs	r2, #0
 80192a0:	605a      	str	r2, [r3, #4]
}
 80192a2:	bf00      	nop
 80192a4:	370c      	adds	r7, #12
 80192a6:	46bd      	mov	sp, r7
 80192a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ac:	4770      	bx	lr
	...

080192b0 <NewNetwork>:
	close(n->socket);
	n->socket = 0;
}

#elif defined(MQTT_LWIP_NETCONN)
void NewNetwork(Network *n) {
 80192b0:	b480      	push	{r7}
 80192b2:	b083      	sub	sp, #12
 80192b4:	af00      	add	r7, sp, #0
 80192b6:	6078      	str	r0, [r7, #4]
	n->conn = NULL;
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	2200      	movs	r2, #0
 80192bc:	601a      	str	r2, [r3, #0]
	n->buf = NULL;
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	2200      	movs	r2, #0
 80192c2:	605a      	str	r2, [r3, #4]
	n->offset = 0;
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	2200      	movs	r2, #0
 80192c8:	609a      	str	r2, [r3, #8]

	n->mqttread = net_read;
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	4a06      	ldr	r2, [pc, #24]	; (80192e8 <NewNetwork+0x38>)
 80192ce:	60da      	str	r2, [r3, #12]
	n->mqttwrite = net_write;
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	4a06      	ldr	r2, [pc, #24]	; (80192ec <NewNetwork+0x3c>)
 80192d4:	611a      	str	r2, [r3, #16]
	n->disconnect = net_disconnect;
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	4a05      	ldr	r2, [pc, #20]	; (80192f0 <NewNetwork+0x40>)
 80192da:	615a      	str	r2, [r3, #20]
}
 80192dc:	bf00      	nop
 80192de:	370c      	adds	r7, #12
 80192e0:	46bd      	mov	sp, r7
 80192e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e6:	4770      	bx	lr
 80192e8:	0801935d 	.word	0x0801935d
 80192ec:	08019457 	.word	0x08019457
 80192f0:	08019491 	.word	0x08019491

080192f4 <ConnectNetwork>:

int ConnectNetwork(Network *n, char *ip, int port) {
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b086      	sub	sp, #24
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	60f8      	str	r0, [r7, #12]
 80192fc:	60b9      	str	r1, [r7, #8]
 80192fe:	607a      	str	r2, [r7, #4]
	err_t err;
	ip_addr_t server_ip;

	ipaddr_aton(ip, &server_ip);
 8019300:	f107 0310 	add.w	r3, r7, #16
 8019304:	4619      	mov	r1, r3
 8019306:	68b8      	ldr	r0, [r7, #8]
 8019308:	f7fd fe80 	bl	801700c <ip4addr_aton>

	n->conn = netconn_new(NETCONN_TCP);
 801930c:	2200      	movs	r2, #0
 801930e:	2100      	movs	r1, #0
 8019310:	2010      	movs	r0, #16
 8019312:	f7f1 fd89 	bl	800ae28 <netconn_new_with_proto_and_callback>
 8019316:	4602      	mov	r2, r0
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	601a      	str	r2, [r3, #0]
	if (n->conn != NULL) {
 801931c:	68fb      	ldr	r3, [r7, #12]
 801931e:	681b      	ldr	r3, [r3, #0]
 8019320:	2b00      	cmp	r3, #0
 8019322:	d016      	beq.n	8019352 <ConnectNetwork+0x5e>
		err = netconn_connect(n->conn, &server_ip, port);
 8019324:	68fb      	ldr	r3, [r7, #12]
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	687a      	ldr	r2, [r7, #4]
 801932a:	b292      	uxth	r2, r2
 801932c:	f107 0110 	add.w	r1, r7, #16
 8019330:	4618      	mov	r0, r3
 8019332:	f7f1 fe33 	bl	800af9c <netconn_connect>
 8019336:	4603      	mov	r3, r0
 8019338:	75fb      	strb	r3, [r7, #23]

		if (err != ERR_OK) {
 801933a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801933e:	2b00      	cmp	r3, #0
 8019340:	d007      	beq.n	8019352 <ConnectNetwork+0x5e>
			netconn_delete(n->conn); //free memory
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	4618      	mov	r0, r3
 8019348:	f7f1 fe0c 	bl	800af64 <netconn_delete>
			return -1;
 801934c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019350:	e000      	b.n	8019354 <ConnectNetwork+0x60>
		}
	}

	return 0;
 8019352:	2300      	movs	r3, #0
}
 8019354:	4618      	mov	r0, r3
 8019356:	3718      	adds	r7, #24
 8019358:	46bd      	mov	sp, r7
 801935a:	bd80      	pop	{r7, pc}

0801935c <net_read>:

int net_read(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 801935c:	b580      	push	{r7, lr}
 801935e:	b08a      	sub	sp, #40	; 0x28
 8019360:	af00      	add	r7, sp, #0
 8019362:	60f8      	str	r0, [r7, #12]
 8019364:	60b9      	str	r1, [r7, #8]
 8019366:	607a      	str	r2, [r7, #4]
 8019368:	603b      	str	r3, [r7, #0]
	int rc;
	struct netbuf *inbuf;
	int offset = 0;
 801936a:	2300      	movs	r3, #0
 801936c:	623b      	str	r3, [r7, #32]
	int bytes = 0;
 801936e:	2300      	movs	r3, #0
 8019370:	61fb      	str	r3, [r7, #28]

	while(bytes < len) {
 8019372:	e065      	b.n	8019440 <net_read+0xe4>
		if(n->buf != NULL) {
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	685b      	ldr	r3, [r3, #4]
 8019378:	2b00      	cmp	r3, #0
 801937a:	d008      	beq.n	801938e <net_read+0x32>
			inbuf = n->buf;
 801937c:	68fb      	ldr	r3, [r7, #12]
 801937e:	685b      	ldr	r3, [r3, #4]
 8019380:	617b      	str	r3, [r7, #20]
			offset = n->offset;
 8019382:	68fb      	ldr	r3, [r7, #12]
 8019384:	689b      	ldr	r3, [r3, #8]
 8019386:	623b      	str	r3, [r7, #32]
			rc = ERR_OK;
 8019388:	2300      	movs	r3, #0
 801938a:	627b      	str	r3, [r7, #36]	; 0x24
 801938c:	e00b      	b.n	80193a6 <net_read+0x4a>
		} else {
			rc = netconn_recv(n->conn, &inbuf);
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	f107 0214 	add.w	r2, r7, #20
 8019396:	4611      	mov	r1, r2
 8019398:	4618      	mov	r0, r3
 801939a:	f7f1 ffb3 	bl	800b304 <netconn_recv>
 801939e:	4603      	mov	r3, r0
 80193a0:	627b      	str	r3, [r7, #36]	; 0x24
			offset = 0;
 80193a2:	2300      	movs	r3, #0
 80193a4:	623b      	str	r3, [r7, #32]
		}

		if(rc != ERR_OK) {
 80193a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d007      	beq.n	80193bc <net_read+0x60>
			if(rc != ERR_TIMEOUT) {
 80193ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193ae:	f113 0f03 	cmn.w	r3, #3
 80193b2:	d04a      	beq.n	801944a <net_read+0xee>
				bytes = -1;
 80193b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80193b8:	61fb      	str	r3, [r7, #28]
			}
			break;
 80193ba:	e046      	b.n	801944a <net_read+0xee>
		} else {
			int nblen = netbuf_len(inbuf) - offset;
 80193bc:	697b      	ldr	r3, [r7, #20]
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	891b      	ldrh	r3, [r3, #8]
 80193c2:	461a      	mov	r2, r3
 80193c4:	6a3b      	ldr	r3, [r7, #32]
 80193c6:	1ad3      	subs	r3, r2, r3
 80193c8:	61bb      	str	r3, [r7, #24]
			if((bytes+nblen) > len) {
 80193ca:	69fa      	ldr	r2, [r7, #28]
 80193cc:	69bb      	ldr	r3, [r7, #24]
 80193ce:	4413      	add	r3, r2
 80193d0:	687a      	ldr	r2, [r7, #4]
 80193d2:	429a      	cmp	r2, r3
 80193d4:	da1b      	bge.n	801940e <net_read+0xb2>
				netbuf_copy_partial(inbuf, buffer+bytes, len-bytes,offset);
 80193d6:	697b      	ldr	r3, [r7, #20]
 80193d8:	6818      	ldr	r0, [r3, #0]
 80193da:	69fb      	ldr	r3, [r7, #28]
 80193dc:	68ba      	ldr	r2, [r7, #8]
 80193de:	18d1      	adds	r1, r2, r3
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	b29a      	uxth	r2, r3
 80193e4:	69fb      	ldr	r3, [r7, #28]
 80193e6:	b29b      	uxth	r3, r3
 80193e8:	1ad3      	subs	r3, r2, r3
 80193ea:	b29a      	uxth	r2, r3
 80193ec:	6a3b      	ldr	r3, [r7, #32]
 80193ee:	b29b      	uxth	r3, r3
 80193f0:	f7f5 fc92 	bl	800ed18 <pbuf_copy_partial>
				n->buf = inbuf;
 80193f4:	697a      	ldr	r2, [r7, #20]
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	605a      	str	r2, [r3, #4]
				n->offset = offset + len - bytes;
 80193fa:	6a3a      	ldr	r2, [r7, #32]
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	441a      	add	r2, r3
 8019400:	69fb      	ldr	r3, [r7, #28]
 8019402:	1ad2      	subs	r2, r2, r3
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	609a      	str	r2, [r3, #8]
				bytes = len;
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	61fb      	str	r3, [r7, #28]
 801940c:	e018      	b.n	8019440 <net_read+0xe4>
			} else {
				netbuf_copy_partial(inbuf, buffer+bytes, nblen, offset);
 801940e:	697b      	ldr	r3, [r7, #20]
 8019410:	6818      	ldr	r0, [r3, #0]
 8019412:	69fb      	ldr	r3, [r7, #28]
 8019414:	68ba      	ldr	r2, [r7, #8]
 8019416:	18d1      	adds	r1, r2, r3
 8019418:	69bb      	ldr	r3, [r7, #24]
 801941a:	b29a      	uxth	r2, r3
 801941c:	6a3b      	ldr	r3, [r7, #32]
 801941e:	b29b      	uxth	r3, r3
 8019420:	f7f5 fc7a 	bl	800ed18 <pbuf_copy_partial>
				bytes += nblen;
 8019424:	69fa      	ldr	r2, [r7, #28]
 8019426:	69bb      	ldr	r3, [r7, #24]
 8019428:	4413      	add	r3, r2
 801942a:	61fb      	str	r3, [r7, #28]
				netbuf_delete(inbuf);
 801942c:	697b      	ldr	r3, [r7, #20]
 801942e:	4618      	mov	r0, r3
 8019430:	f7f3 fca2 	bl	800cd78 <netbuf_delete>
				n->buf = NULL;
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	2200      	movs	r2, #0
 8019438:	605a      	str	r2, [r3, #4]
				n->offset = 0;
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	2200      	movs	r2, #0
 801943e:	609a      	str	r2, [r3, #8]
	while(bytes < len) {
 8019440:	69fa      	ldr	r2, [r7, #28]
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	429a      	cmp	r2, r3
 8019446:	db95      	blt.n	8019374 <net_read+0x18>
 8019448:	e000      	b.n	801944c <net_read+0xf0>
			break;
 801944a:	bf00      	nop
			}
		}
	}
	return bytes;
 801944c:	69fb      	ldr	r3, [r7, #28]
}
 801944e:	4618      	mov	r0, r3
 8019450:	3728      	adds	r7, #40	; 0x28
 8019452:	46bd      	mov	sp, r7
 8019454:	bd80      	pop	{r7, pc}

08019456 <net_write>:

int net_write(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 8019456:	b580      	push	{r7, lr}
 8019458:	b088      	sub	sp, #32
 801945a:	af02      	add	r7, sp, #8
 801945c:	60f8      	str	r0, [r7, #12]
 801945e:	60b9      	str	r1, [r7, #8]
 8019460:	607a      	str	r2, [r7, #4]
 8019462:	603b      	str	r3, [r7, #0]
	int rc = netconn_write(n->conn, buffer, len, NETCONN_NOCOPY);
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	6818      	ldr	r0, [r3, #0]
 8019468:	687a      	ldr	r2, [r7, #4]
 801946a:	2300      	movs	r3, #0
 801946c:	9300      	str	r3, [sp, #0]
 801946e:	2300      	movs	r3, #0
 8019470:	68b9      	ldr	r1, [r7, #8]
 8019472:	f7f1 ffc1 	bl	800b3f8 <netconn_write_partly>
 8019476:	4603      	mov	r3, r0
 8019478:	617b      	str	r3, [r7, #20]
	if(rc != ERR_OK) return -1;
 801947a:	697b      	ldr	r3, [r7, #20]
 801947c:	2b00      	cmp	r3, #0
 801947e:	d002      	beq.n	8019486 <net_write+0x30>
 8019480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019484:	e000      	b.n	8019488 <net_write+0x32>
	return len;
 8019486:	687b      	ldr	r3, [r7, #4]
}
 8019488:	4618      	mov	r0, r3
 801948a:	3718      	adds	r7, #24
 801948c:	46bd      	mov	sp, r7
 801948e:	bd80      	pop	{r7, pc}

08019490 <net_disconnect>:

void net_disconnect(Network *n) {
 8019490:	b580      	push	{r7, lr}
 8019492:	b082      	sub	sp, #8
 8019494:	af00      	add	r7, sp, #0
 8019496:	6078      	str	r0, [r7, #4]
	netconn_close(n->conn); //close session
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	4618      	mov	r0, r3
 801949e:	f7f2 f8ad 	bl	800b5fc <netconn_close>
	netconn_delete(n->conn); //free memory
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	4618      	mov	r0, r3
 80194a8:	f7f1 fd5c 	bl	800af64 <netconn_delete>
	n->conn = NULL;
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	2200      	movs	r2, #0
 80194b0:	601a      	str	r2, [r3, #0]
}
 80194b2:	bf00      	nop
 80194b4:	3708      	adds	r7, #8
 80194b6:	46bd      	mov	sp, r7
 80194b8:	bd80      	pop	{r7, pc}

080194ba <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 80194ba:	b590      	push	{r4, r7, lr}
 80194bc:	b085      	sub	sp, #20
 80194be:	af00      	add	r7, sp, #0
 80194c0:	6078      	str	r0, [r7, #4]
	int len = 0;
 80194c2:	2300      	movs	r3, #0
 80194c4:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	7a1b      	ldrb	r3, [r3, #8]
 80194ca:	2b03      	cmp	r3, #3
 80194cc:	d102      	bne.n	80194d4 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 80194ce:	230c      	movs	r3, #12
 80194d0:	60fb      	str	r3, [r7, #12]
 80194d2:	e005      	b.n	80194e0 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	7a1b      	ldrb	r3, [r3, #8]
 80194d8:	2b04      	cmp	r3, #4
 80194da:	d101      	bne.n	80194e0 <MQTTSerialize_connectLength+0x26>
		len = 10;
 80194dc:	230a      	movs	r3, #10
 80194de:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	330c      	adds	r3, #12
 80194e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80194e8:	f000 fc53 	bl	8019d92 <MQTTstrlen>
 80194ec:	4603      	mov	r3, r0
 80194ee:	3302      	adds	r3, #2
 80194f0:	68fa      	ldr	r2, [r7, #12]
 80194f2:	4413      	add	r3, r2
 80194f4:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	7edb      	ldrb	r3, [r3, #27]
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d013      	beq.n	8019526 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	3324      	adds	r3, #36	; 0x24
 8019502:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019506:	f000 fc44 	bl	8019d92 <MQTTstrlen>
 801950a:	4603      	mov	r3, r0
 801950c:	1c9c      	adds	r4, r3, #2
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	3330      	adds	r3, #48	; 0x30
 8019512:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019516:	f000 fc3c 	bl	8019d92 <MQTTstrlen>
 801951a:	4603      	mov	r3, r0
 801951c:	4423      	add	r3, r4
 801951e:	3302      	adds	r3, #2
 8019520:	68fa      	ldr	r2, [r7, #12]
 8019522:	4413      	add	r3, r2
 8019524:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801952a:	2b00      	cmp	r3, #0
 801952c:	d103      	bne.n	8019536 <MQTTSerialize_connectLength+0x7c>
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019532:	2b00      	cmp	r3, #0
 8019534:	d00a      	beq.n	801954c <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	3340      	adds	r3, #64	; 0x40
 801953a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801953e:	f000 fc28 	bl	8019d92 <MQTTstrlen>
 8019542:	4603      	mov	r3, r0
 8019544:	3302      	adds	r3, #2
 8019546:	68fa      	ldr	r2, [r7, #12]
 8019548:	4413      	add	r3, r2
 801954a:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019550:	2b00      	cmp	r3, #0
 8019552:	d103      	bne.n	801955c <MQTTSerialize_connectLength+0xa2>
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019558:	2b00      	cmp	r3, #0
 801955a:	d00a      	beq.n	8019572 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	334c      	adds	r3, #76	; 0x4c
 8019560:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019564:	f000 fc15 	bl	8019d92 <MQTTstrlen>
 8019568:	4603      	mov	r3, r0
 801956a:	3302      	adds	r3, #2
 801956c:	68fa      	ldr	r2, [r7, #12]
 801956e:	4413      	add	r3, r2
 8019570:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8019572:	68fb      	ldr	r3, [r7, #12]
}
 8019574:	4618      	mov	r0, r3
 8019576:	3714      	adds	r7, #20
 8019578:	46bd      	mov	sp, r7
 801957a:	bd90      	pop	{r4, r7, pc}

0801957c <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 801957c:	b580      	push	{r7, lr}
 801957e:	b08a      	sub	sp, #40	; 0x28
 8019580:	af00      	add	r7, sp, #0
 8019582:	60f8      	str	r0, [r7, #12]
 8019584:	60b9      	str	r1, [r7, #8]
 8019586:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 801958c:	2300      	movs	r3, #0
 801958e:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8019590:	2300      	movs	r3, #0
 8019592:	617b      	str	r3, [r7, #20]
	int len = 0;
 8019594:	2300      	movs	r3, #0
 8019596:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8019598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801959c:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 801959e:	6878      	ldr	r0, [r7, #4]
 80195a0:	f7ff ff8b 	bl	80194ba <MQTTSerialize_connectLength>
 80195a4:	6238      	str	r0, [r7, #32]
 80195a6:	6a38      	ldr	r0, [r7, #32]
 80195a8:	f000 faa8 	bl	8019afc <MQTTPacket_len>
 80195ac:	4602      	mov	r2, r0
 80195ae:	68bb      	ldr	r3, [r7, #8]
 80195b0:	4293      	cmp	r3, r2
 80195b2:	da03      	bge.n	80195bc <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80195b4:	f06f 0301 	mvn.w	r3, #1
 80195b8:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 80195ba:	e0c2      	b.n	8019742 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 80195bc:	2300      	movs	r3, #0
 80195be:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 80195c0:	7e3b      	ldrb	r3, [r7, #24]
 80195c2:	2201      	movs	r2, #1
 80195c4:	f362 1307 	bfi	r3, r2, #4, #4
 80195c8:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80195ca:	7e3a      	ldrb	r2, [r7, #24]
 80195cc:	f107 031c 	add.w	r3, r7, #28
 80195d0:	4611      	mov	r1, r2
 80195d2:	4618      	mov	r0, r3
 80195d4:	f000 fb21 	bl	8019c1a <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 80195d8:	69fb      	ldr	r3, [r7, #28]
 80195da:	6a39      	ldr	r1, [r7, #32]
 80195dc:	4618      	mov	r0, r3
 80195de:	f000 fa21 	bl	8019a24 <MQTTPacket_encode>
 80195e2:	4602      	mov	r2, r0
 80195e4:	69fb      	ldr	r3, [r7, #28]
 80195e6:	4413      	add	r3, r2
 80195e8:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	7a1b      	ldrb	r3, [r3, #8]
 80195ee:	2b04      	cmp	r3, #4
 80195f0:	d10c      	bne.n	801960c <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 80195f2:	f107 031c 	add.w	r3, r7, #28
 80195f6:	4955      	ldr	r1, [pc, #340]	; (801974c <MQTTSerialize_connect+0x1d0>)
 80195f8:	4618      	mov	r0, r3
 80195fa:	f000 fb4c 	bl	8019c96 <writeCString>
		writeChar(&ptr, (char) 4);
 80195fe:	f107 031c 	add.w	r3, r7, #28
 8019602:	2104      	movs	r1, #4
 8019604:	4618      	mov	r0, r3
 8019606:	f000 fb08 	bl	8019c1a <writeChar>
 801960a:	e00b      	b.n	8019624 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 801960c:	f107 031c 	add.w	r3, r7, #28
 8019610:	494f      	ldr	r1, [pc, #316]	; (8019750 <MQTTSerialize_connect+0x1d4>)
 8019612:	4618      	mov	r0, r3
 8019614:	f000 fb3f 	bl	8019c96 <writeCString>
		writeChar(&ptr, (char) 3);
 8019618:	f107 031c 	add.w	r3, r7, #28
 801961c:	2103      	movs	r1, #3
 801961e:	4618      	mov	r0, r3
 8019620:	f000 fafb 	bl	8019c1a <writeChar>
	}

	flags.all = 0;
 8019624:	2300      	movs	r3, #0
 8019626:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	7e9b      	ldrb	r3, [r3, #26]
 801962c:	f003 0301 	and.w	r3, r3, #1
 8019630:	b2da      	uxtb	r2, r3
 8019632:	7d3b      	ldrb	r3, [r7, #20]
 8019634:	f362 0341 	bfi	r3, r2, #1, #1
 8019638:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	7edb      	ldrb	r3, [r3, #27]
 801963e:	2b00      	cmp	r3, #0
 8019640:	bf14      	ite	ne
 8019642:	2301      	movne	r3, #1
 8019644:	2300      	moveq	r3, #0
 8019646:	b2da      	uxtb	r2, r3
 8019648:	7d3b      	ldrb	r3, [r7, #20]
 801964a:	f362 0382 	bfi	r3, r2, #2, #1
 801964e:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8019650:	7d3b      	ldrb	r3, [r7, #20]
 8019652:	f003 0304 	and.w	r3, r3, #4
 8019656:	b2db      	uxtb	r3, r3
 8019658:	2b00      	cmp	r3, #0
 801965a:	d013      	beq.n	8019684 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019662:	f003 0303 	and.w	r3, r3, #3
 8019666:	b2da      	uxtb	r2, r3
 8019668:	7d3b      	ldrb	r3, [r7, #20]
 801966a:	f362 03c4 	bfi	r3, r2, #3, #2
 801966e:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8019676:	f003 0301 	and.w	r3, r3, #1
 801967a:	b2da      	uxtb	r2, r3
 801967c:	7d3b      	ldrb	r3, [r7, #20]
 801967e:	f362 1345 	bfi	r3, r2, #5, #1
 8019682:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019688:	2b00      	cmp	r3, #0
 801968a:	d103      	bne.n	8019694 <MQTTSerialize_connect+0x118>
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019690:	2b00      	cmp	r3, #0
 8019692:	d003      	beq.n	801969c <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8019694:	7d3b      	ldrb	r3, [r7, #20]
 8019696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801969a:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d103      	bne.n	80196ac <MQTTSerialize_connect+0x130>
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d003      	beq.n	80196b4 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 80196ac:	7d3b      	ldrb	r3, [r7, #20]
 80196ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80196b2:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 80196b4:	7d3a      	ldrb	r2, [r7, #20]
 80196b6:	f107 031c 	add.w	r3, r7, #28
 80196ba:	4611      	mov	r1, r2
 80196bc:	4618      	mov	r0, r3
 80196be:	f000 faac 	bl	8019c1a <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	8b1b      	ldrh	r3, [r3, #24]
 80196c6:	461a      	mov	r2, r3
 80196c8:	f107 031c 	add.w	r3, r7, #28
 80196cc:	4611      	mov	r1, r2
 80196ce:	4618      	mov	r0, r3
 80196d0:	f000 fab8 	bl	8019c44 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	f107 001c 	add.w	r0, r7, #28
 80196da:	330c      	adds	r3, #12
 80196dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80196de:	f000 faf9 	bl	8019cd4 <writeMQTTString>
	if (options->willFlag)
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	7edb      	ldrb	r3, [r3, #27]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d00d      	beq.n	8019706 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	f107 001c 	add.w	r0, r7, #28
 80196f0:	3324      	adds	r3, #36	; 0x24
 80196f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80196f4:	f000 faee 	bl	8019cd4 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	f107 001c 	add.w	r0, r7, #28
 80196fe:	3330      	adds	r3, #48	; 0x30
 8019700:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019702:	f000 fae7 	bl	8019cd4 <writeMQTTString>
	}
	if (flags.bits.username)
 8019706:	7d3b      	ldrb	r3, [r7, #20]
 8019708:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801970c:	b2db      	uxtb	r3, r3
 801970e:	2b00      	cmp	r3, #0
 8019710:	d006      	beq.n	8019720 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	f107 001c 	add.w	r0, r7, #28
 8019718:	3340      	adds	r3, #64	; 0x40
 801971a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801971c:	f000 fada 	bl	8019cd4 <writeMQTTString>
	if (flags.bits.password)
 8019720:	7d3b      	ldrb	r3, [r7, #20]
 8019722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019726:	b2db      	uxtb	r3, r3
 8019728:	2b00      	cmp	r3, #0
 801972a:	d006      	beq.n	801973a <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	f107 001c 	add.w	r0, r7, #28
 8019732:	334c      	adds	r3, #76	; 0x4c
 8019734:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019736:	f000 facd 	bl	8019cd4 <writeMQTTString>

	rc = ptr - buf;
 801973a:	69fa      	ldr	r2, [r7, #28]
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	1ad3      	subs	r3, r2, r3
 8019740:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8019742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019744:	4618      	mov	r0, r3
 8019746:	3728      	adds	r7, #40	; 0x28
 8019748:	46bd      	mov	sp, r7
 801974a:	bd80      	pop	{r7, pc}
 801974c:	08021e30 	.word	0x08021e30
 8019750:	08021e38 	.word	0x08021e38

08019754 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8019754:	b580      	push	{r7, lr}
 8019756:	b08a      	sub	sp, #40	; 0x28
 8019758:	af00      	add	r7, sp, #0
 801975a:	60f8      	str	r0, [r7, #12]
 801975c:	60b9      	str	r1, [r7, #8]
 801975e:	607a      	str	r2, [r7, #4]
 8019760:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8019762:	2300      	movs	r3, #0
 8019764:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801976a:	2300      	movs	r3, #0
 801976c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801976e:	2300      	movs	r3, #0
 8019770:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8019772:	2300      	movs	r3, #0
 8019774:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8019776:	f107 0318 	add.w	r3, r7, #24
 801977a:	4618      	mov	r0, r3
 801977c:	f000 fa39 	bl	8019bf2 <readChar>
 8019780:	4603      	mov	r3, r0
 8019782:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8019784:	7f3b      	ldrb	r3, [r7, #28]
 8019786:	f023 030f 	bic.w	r3, r3, #15
 801978a:	b2db      	uxtb	r3, r3
 801978c:	2b20      	cmp	r3, #32
 801978e:	d12e      	bne.n	80197ee <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8019790:	69bb      	ldr	r3, [r7, #24]
 8019792:	f107 0214 	add.w	r2, r7, #20
 8019796:	4611      	mov	r1, r2
 8019798:	4618      	mov	r0, r3
 801979a:	f000 f9f9 	bl	8019b90 <MQTTPacket_decodeBuf>
 801979e:	6278      	str	r0, [r7, #36]	; 0x24
 80197a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197a2:	69bb      	ldr	r3, [r7, #24]
 80197a4:	4413      	add	r3, r2
 80197a6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80197a8:	69bb      	ldr	r3, [r7, #24]
 80197aa:	697a      	ldr	r2, [r7, #20]
 80197ac:	4413      	add	r3, r2
 80197ae:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 80197b0:	69bb      	ldr	r3, [r7, #24]
 80197b2:	6a3a      	ldr	r2, [r7, #32]
 80197b4:	1ad3      	subs	r3, r2, r3
 80197b6:	2b01      	cmp	r3, #1
 80197b8:	dd1b      	ble.n	80197f2 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 80197ba:	f107 0318 	add.w	r3, r7, #24
 80197be:	4618      	mov	r0, r3
 80197c0:	f000 fa17 	bl	8019bf2 <readChar>
 80197c4:	4603      	mov	r3, r0
 80197c6:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 80197c8:	7c3b      	ldrb	r3, [r7, #16]
 80197ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80197ce:	b2db      	uxtb	r3, r3
 80197d0:	461a      	mov	r2, r3
 80197d2:	68fb      	ldr	r3, [r7, #12]
 80197d4:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 80197d6:	f107 0318 	add.w	r3, r7, #24
 80197da:	4618      	mov	r0, r3
 80197dc:	f000 fa09 	bl	8019bf2 <readChar>
 80197e0:	4603      	mov	r3, r0
 80197e2:	461a      	mov	r2, r3
 80197e4:	68bb      	ldr	r3, [r7, #8]
 80197e6:	701a      	strb	r2, [r3, #0]

	rc = 1;
 80197e8:	2301      	movs	r3, #1
 80197ea:	627b      	str	r3, [r7, #36]	; 0x24
 80197ec:	e002      	b.n	80197f4 <MQTTDeserialize_connack+0xa0>
		goto exit;
 80197ee:	bf00      	nop
 80197f0:	e000      	b.n	80197f4 <MQTTDeserialize_connack+0xa0>
		goto exit;
 80197f2:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80197f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80197f6:	4618      	mov	r0, r3
 80197f8:	3728      	adds	r7, #40	; 0x28
 80197fa:	46bd      	mov	sp, r7
 80197fc:	bd80      	pop	{r7, pc}

080197fe <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 80197fe:	b580      	push	{r7, lr}
 8019800:	b088      	sub	sp, #32
 8019802:	af00      	add	r7, sp, #0
 8019804:	60f8      	str	r0, [r7, #12]
 8019806:	60b9      	str	r1, [r7, #8]
 8019808:	4613      	mov	r3, r2
 801980a:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 801980c:	2300      	movs	r3, #0
 801980e:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8019810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019814:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8019816:	68fb      	ldr	r3, [r7, #12]
 8019818:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 801981a:	68bb      	ldr	r3, [r7, #8]
 801981c:	2b01      	cmp	r3, #1
 801981e:	dc03      	bgt.n	8019828 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8019820:	f06f 0301 	mvn.w	r3, #1
 8019824:	61fb      	str	r3, [r7, #28]
		goto exit;
 8019826:	e01d      	b.n	8019864 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 8019828:	2300      	movs	r3, #0
 801982a:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 801982c:	79fb      	ldrb	r3, [r7, #7]
 801982e:	f003 030f 	and.w	r3, r3, #15
 8019832:	b2da      	uxtb	r2, r3
 8019834:	7e3b      	ldrb	r3, [r7, #24]
 8019836:	f362 1307 	bfi	r3, r2, #4, #4
 801983a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801983c:	7e3a      	ldrb	r2, [r7, #24]
 801983e:	f107 0314 	add.w	r3, r7, #20
 8019842:	4611      	mov	r1, r2
 8019844:	4618      	mov	r0, r3
 8019846:	f000 f9e8 	bl	8019c1a <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 801984a:	697b      	ldr	r3, [r7, #20]
 801984c:	2100      	movs	r1, #0
 801984e:	4618      	mov	r0, r3
 8019850:	f000 f8e8 	bl	8019a24 <MQTTPacket_encode>
 8019854:	4602      	mov	r2, r0
 8019856:	697b      	ldr	r3, [r7, #20]
 8019858:	4413      	add	r3, r2
 801985a:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 801985c:	697a      	ldr	r2, [r7, #20]
 801985e:	68fb      	ldr	r3, [r7, #12]
 8019860:	1ad3      	subs	r3, r2, r3
 8019862:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019864:	69fb      	ldr	r3, [r7, #28]
}
 8019866:	4618      	mov	r0, r3
 8019868:	3720      	adds	r7, #32
 801986a:	46bd      	mov	sp, r7
 801986c:	bd80      	pop	{r7, pc}

0801986e <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 801986e:	b580      	push	{r7, lr}
 8019870:	b082      	sub	sp, #8
 8019872:	af00      	add	r7, sp, #0
 8019874:	6078      	str	r0, [r7, #4]
 8019876:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 8019878:	220e      	movs	r2, #14
 801987a:	6839      	ldr	r1, [r7, #0]
 801987c:	6878      	ldr	r0, [r7, #4]
 801987e:	f7ff ffbe 	bl	80197fe <MQTTSerialize_zero>
 8019882:	4603      	mov	r3, r0
}
 8019884:	4618      	mov	r0, r3
 8019886:	3708      	adds	r7, #8
 8019888:	46bd      	mov	sp, r7
 801988a:	bd80      	pop	{r7, pc}

0801988c <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 801988c:	b580      	push	{r7, lr}
 801988e:	b082      	sub	sp, #8
 8019890:	af00      	add	r7, sp, #0
 8019892:	6078      	str	r0, [r7, #4]
 8019894:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8019896:	220c      	movs	r2, #12
 8019898:	6839      	ldr	r1, [r7, #0]
 801989a:	6878      	ldr	r0, [r7, #4]
 801989c:	f7ff ffaf 	bl	80197fe <MQTTSerialize_zero>
 80198a0:	4603      	mov	r3, r0
}
 80198a2:	4618      	mov	r0, r3
 80198a4:	3708      	adds	r7, #8
 80198a6:	46bd      	mov	sp, r7
 80198a8:	bd80      	pop	{r7, pc}

080198aa <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 80198aa:	b580      	push	{r7, lr}
 80198ac:	b08a      	sub	sp, #40	; 0x28
 80198ae:	af00      	add	r7, sp, #0
 80198b0:	60f8      	str	r0, [r7, #12]
 80198b2:	60b9      	str	r1, [r7, #8]
 80198b4:	607a      	str	r2, [r7, #4]
 80198b6:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80198b8:	2300      	movs	r3, #0
 80198ba:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80198bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80198be:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80198c0:	2300      	movs	r3, #0
 80198c2:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80198c4:	2300      	movs	r3, #0
 80198c6:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 80198c8:	2300      	movs	r3, #0
 80198ca:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80198cc:	f107 0318 	add.w	r3, r7, #24
 80198d0:	4618      	mov	r0, r3
 80198d2:	f000 f98e 	bl	8019bf2 <readChar>
 80198d6:	4603      	mov	r3, r0
 80198d8:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 80198da:	7f3b      	ldrb	r3, [r7, #28]
 80198dc:	f023 030f 	bic.w	r3, r3, #15
 80198e0:	b2db      	uxtb	r3, r3
 80198e2:	2b30      	cmp	r3, #48	; 0x30
 80198e4:	d14b      	bne.n	801997e <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 80198e6:	7f3b      	ldrb	r3, [r7, #28]
 80198e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80198ec:	b2db      	uxtb	r3, r3
 80198ee:	461a      	mov	r2, r3
 80198f0:	68fb      	ldr	r3, [r7, #12]
 80198f2:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 80198f4:	7f3b      	ldrb	r3, [r7, #28]
 80198f6:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80198fa:	b2db      	uxtb	r3, r3
 80198fc:	461a      	mov	r2, r3
 80198fe:	68bb      	ldr	r3, [r7, #8]
 8019900:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8019902:	7f3b      	ldrb	r3, [r7, #28]
 8019904:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019908:	b2db      	uxtb	r3, r3
 801990a:	461a      	mov	r2, r3
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8019910:	69bb      	ldr	r3, [r7, #24]
 8019912:	f107 0214 	add.w	r2, r7, #20
 8019916:	4611      	mov	r1, r2
 8019918:	4618      	mov	r0, r3
 801991a:	f000 f939 	bl	8019b90 <MQTTPacket_decodeBuf>
 801991e:	6278      	str	r0, [r7, #36]	; 0x24
 8019920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019922:	69bb      	ldr	r3, [r7, #24]
 8019924:	4413      	add	r3, r2
 8019926:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8019928:	69bb      	ldr	r3, [r7, #24]
 801992a:	697a      	ldr	r2, [r7, #20]
 801992c:	4413      	add	r3, r2
 801992e:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8019930:	f107 0318 	add.w	r3, r7, #24
 8019934:	6a3a      	ldr	r2, [r7, #32]
 8019936:	4619      	mov	r1, r3
 8019938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801993a:	f000 f9f9 	bl	8019d30 <readMQTTLenString>
 801993e:	4603      	mov	r3, r0
 8019940:	2b00      	cmp	r3, #0
 8019942:	d01e      	beq.n	8019982 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8019944:	69bb      	ldr	r3, [r7, #24]
 8019946:	6a3a      	ldr	r2, [r7, #32]
 8019948:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801994a:	2b00      	cmp	r3, #0
 801994c:	db19      	blt.n	8019982 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 801994e:	68bb      	ldr	r3, [r7, #8]
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	2b00      	cmp	r3, #0
 8019954:	dd08      	ble.n	8019968 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8019956:	f107 0318 	add.w	r3, r7, #24
 801995a:	4618      	mov	r0, r3
 801995c:	f000 f92e 	bl	8019bbc <readInt>
 8019960:	4603      	mov	r3, r0
 8019962:	b29a      	uxth	r2, r3
 8019964:	683b      	ldr	r3, [r7, #0]
 8019966:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8019968:	69bb      	ldr	r3, [r7, #24]
 801996a:	6a3a      	ldr	r2, [r7, #32]
 801996c:	1ad2      	subs	r2, r2, r3
 801996e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019970:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8019972:	69ba      	ldr	r2, [r7, #24]
 8019974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019976:	601a      	str	r2, [r3, #0]
	rc = 1;
 8019978:	2301      	movs	r3, #1
 801997a:	627b      	str	r3, [r7, #36]	; 0x24
 801997c:	e002      	b.n	8019984 <MQTTDeserialize_publish+0xda>
		goto exit;
 801997e:	bf00      	nop
 8019980:	e000      	b.n	8019984 <MQTTDeserialize_publish+0xda>
		goto exit;
 8019982:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019986:	4618      	mov	r0, r3
 8019988:	3728      	adds	r7, #40	; 0x28
 801998a:	46bd      	mov	sp, r7
 801998c:	bd80      	pop	{r7, pc}

0801998e <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 801998e:	b580      	push	{r7, lr}
 8019990:	b08a      	sub	sp, #40	; 0x28
 8019992:	af00      	add	r7, sp, #0
 8019994:	60f8      	str	r0, [r7, #12]
 8019996:	60b9      	str	r1, [r7, #8]
 8019998:	607a      	str	r2, [r7, #4]
 801999a:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801999c:	2300      	movs	r3, #0
 801999e:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80199a0:	683b      	ldr	r3, [r7, #0]
 80199a2:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80199a4:	2300      	movs	r3, #0
 80199a6:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80199a8:	2300      	movs	r3, #0
 80199aa:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80199ac:	f107 0318 	add.w	r3, r7, #24
 80199b0:	4618      	mov	r0, r3
 80199b2:	f000 f91e 	bl	8019bf2 <readChar>
 80199b6:	4603      	mov	r3, r0
 80199b8:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 80199ba:	7f3b      	ldrb	r3, [r7, #28]
 80199bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80199c0:	b2db      	uxtb	r3, r3
 80199c2:	461a      	mov	r2, r3
 80199c4:	68bb      	ldr	r3, [r7, #8]
 80199c6:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 80199c8:	7f3b      	ldrb	r3, [r7, #28]
 80199ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80199ce:	b2db      	uxtb	r3, r3
 80199d0:	461a      	mov	r2, r3
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80199d6:	69bb      	ldr	r3, [r7, #24]
 80199d8:	f107 0214 	add.w	r2, r7, #20
 80199dc:	4611      	mov	r1, r2
 80199de:	4618      	mov	r0, r3
 80199e0:	f000 f8d6 	bl	8019b90 <MQTTPacket_decodeBuf>
 80199e4:	6278      	str	r0, [r7, #36]	; 0x24
 80199e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80199e8:	69bb      	ldr	r3, [r7, #24]
 80199ea:	4413      	add	r3, r2
 80199ec:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80199ee:	69bb      	ldr	r3, [r7, #24]
 80199f0:	697a      	ldr	r2, [r7, #20]
 80199f2:	4413      	add	r3, r2
 80199f4:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 80199f6:	69bb      	ldr	r3, [r7, #24]
 80199f8:	6a3a      	ldr	r2, [r7, #32]
 80199fa:	1ad3      	subs	r3, r2, r3
 80199fc:	2b01      	cmp	r3, #1
 80199fe:	dd0b      	ble.n	8019a18 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8019a00:	f107 0318 	add.w	r3, r7, #24
 8019a04:	4618      	mov	r0, r3
 8019a06:	f000 f8d9 	bl	8019bbc <readInt>
 8019a0a:	4603      	mov	r3, r0
 8019a0c:	b29a      	uxth	r2, r3
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8019a12:	2301      	movs	r3, #1
 8019a14:	627b      	str	r3, [r7, #36]	; 0x24
 8019a16:	e000      	b.n	8019a1a <MQTTDeserialize_ack+0x8c>
		goto exit;
 8019a18:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019a1c:	4618      	mov	r0, r3
 8019a1e:	3728      	adds	r7, #40	; 0x28
 8019a20:	46bd      	mov	sp, r7
 8019a22:	bd80      	pop	{r7, pc}

08019a24 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8019a24:	b480      	push	{r7}
 8019a26:	b085      	sub	sp, #20
 8019a28:	af00      	add	r7, sp, #0
 8019a2a:	6078      	str	r0, [r7, #4]
 8019a2c:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8019a2e:	2300      	movs	r3, #0
 8019a30:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8019a32:	683b      	ldr	r3, [r7, #0]
 8019a34:	425a      	negs	r2, r3
 8019a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019a3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8019a3e:	bf58      	it	pl
 8019a40:	4253      	negpl	r3, r2
 8019a42:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8019a44:	683b      	ldr	r3, [r7, #0]
 8019a46:	2b00      	cmp	r3, #0
 8019a48:	da00      	bge.n	8019a4c <MQTTPacket_encode+0x28>
 8019a4a:	337f      	adds	r3, #127	; 0x7f
 8019a4c:	11db      	asrs	r3, r3, #7
 8019a4e:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8019a50:	683b      	ldr	r3, [r7, #0]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	dd03      	ble.n	8019a5e <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8019a56:	7afb      	ldrb	r3, [r7, #11]
 8019a58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019a5c:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	1c5a      	adds	r2, r3, #1
 8019a62:	60fa      	str	r2, [r7, #12]
 8019a64:	461a      	mov	r2, r3
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	4413      	add	r3, r2
 8019a6a:	7afa      	ldrb	r2, [r7, #11]
 8019a6c:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8019a6e:	683b      	ldr	r3, [r7, #0]
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	dcde      	bgt.n	8019a32 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8019a74:	68fb      	ldr	r3, [r7, #12]
}
 8019a76:	4618      	mov	r0, r3
 8019a78:	3714      	adds	r7, #20
 8019a7a:	46bd      	mov	sp, r7
 8019a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a80:	4770      	bx	lr

08019a82 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8019a82:	b580      	push	{r7, lr}
 8019a84:	b086      	sub	sp, #24
 8019a86:	af00      	add	r7, sp, #0
 8019a88:	6078      	str	r0, [r7, #4]
 8019a8a:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8019a8c:	2301      	movs	r3, #1
 8019a8e:	617b      	str	r3, [r7, #20]
	int len = 0;
 8019a90:	2300      	movs	r3, #0
 8019a92:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8019a94:	683b      	ldr	r3, [r7, #0]
 8019a96:	2200      	movs	r2, #0
 8019a98:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8019a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019a9e:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8019aa0:	693b      	ldr	r3, [r7, #16]
 8019aa2:	3301      	adds	r3, #1
 8019aa4:	613b      	str	r3, [r7, #16]
 8019aa6:	693b      	ldr	r3, [r7, #16]
 8019aa8:	2b04      	cmp	r3, #4
 8019aaa:	dd03      	ble.n	8019ab4 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8019aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019ab0:	60fb      	str	r3, [r7, #12]
			goto exit;
 8019ab2:	e01d      	b.n	8019af0 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8019ab4:	f107 020b 	add.w	r2, r7, #11
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	2101      	movs	r1, #1
 8019abc:	4610      	mov	r0, r2
 8019abe:	4798      	blx	r3
 8019ac0:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	2b01      	cmp	r3, #1
 8019ac6:	d112      	bne.n	8019aee <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8019ac8:	683b      	ldr	r3, [r7, #0]
 8019aca:	681a      	ldr	r2, [r3, #0]
 8019acc:	7afb      	ldrb	r3, [r7, #11]
 8019ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019ad2:	6979      	ldr	r1, [r7, #20]
 8019ad4:	fb01 f303 	mul.w	r3, r1, r3
 8019ad8:	441a      	add	r2, r3
 8019ada:	683b      	ldr	r3, [r7, #0]
 8019adc:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8019ade:	697b      	ldr	r3, [r7, #20]
 8019ae0:	01db      	lsls	r3, r3, #7
 8019ae2:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8019ae4:	7afb      	ldrb	r3, [r7, #11]
 8019ae6:	b25b      	sxtb	r3, r3
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	dbd6      	blt.n	8019a9a <MQTTPacket_decode+0x18>
exit:
 8019aec:	e000      	b.n	8019af0 <MQTTPacket_decode+0x6e>
			goto exit;
 8019aee:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8019af0:	693b      	ldr	r3, [r7, #16]
}
 8019af2:	4618      	mov	r0, r3
 8019af4:	3718      	adds	r7, #24
 8019af6:	46bd      	mov	sp, r7
 8019af8:	bd80      	pop	{r7, pc}
	...

08019afc <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8019afc:	b480      	push	{r7}
 8019afe:	b083      	sub	sp, #12
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	3301      	adds	r3, #1
 8019b08:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8019b0e:	dc03      	bgt.n	8019b18 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	3301      	adds	r3, #1
 8019b14:	607b      	str	r3, [r7, #4]
 8019b16:	e012      	b.n	8019b3e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019b1e:	da03      	bge.n	8019b28 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	3302      	adds	r3, #2
 8019b24:	607b      	str	r3, [r7, #4]
 8019b26:	e00a      	b.n	8019b3e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	4a08      	ldr	r2, [pc, #32]	; (8019b4c <MQTTPacket_len+0x50>)
 8019b2c:	4293      	cmp	r3, r2
 8019b2e:	dc03      	bgt.n	8019b38 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	3303      	adds	r3, #3
 8019b34:	607b      	str	r3, [r7, #4]
 8019b36:	e002      	b.n	8019b3e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	3304      	adds	r3, #4
 8019b3c:	607b      	str	r3, [r7, #4]
	return rem_len;
 8019b3e:	687b      	ldr	r3, [r7, #4]
}
 8019b40:	4618      	mov	r0, r3
 8019b42:	370c      	adds	r7, #12
 8019b44:	46bd      	mov	sp, r7
 8019b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b4a:	4770      	bx	lr
 8019b4c:	001ffffe 	.word	0x001ffffe

08019b50 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8019b50:	b480      	push	{r7}
 8019b52:	b085      	sub	sp, #20
 8019b54:	af00      	add	r7, sp, #0
 8019b56:	6078      	str	r0, [r7, #4]
 8019b58:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8019b5a:	2300      	movs	r3, #0
 8019b5c:	60fb      	str	r3, [r7, #12]
 8019b5e:	e00a      	b.n	8019b76 <bufchar+0x26>
		*c = *bufptr++;
 8019b60:	4b0a      	ldr	r3, [pc, #40]	; (8019b8c <bufchar+0x3c>)
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	1c5a      	adds	r2, r3, #1
 8019b66:	4909      	ldr	r1, [pc, #36]	; (8019b8c <bufchar+0x3c>)
 8019b68:	600a      	str	r2, [r1, #0]
 8019b6a:	781a      	ldrb	r2, [r3, #0]
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8019b70:	68fb      	ldr	r3, [r7, #12]
 8019b72:	3301      	adds	r3, #1
 8019b74:	60fb      	str	r3, [r7, #12]
 8019b76:	68fa      	ldr	r2, [r7, #12]
 8019b78:	683b      	ldr	r3, [r7, #0]
 8019b7a:	429a      	cmp	r2, r3
 8019b7c:	dbf0      	blt.n	8019b60 <bufchar+0x10>
	return count;
 8019b7e:	683b      	ldr	r3, [r7, #0]
}
 8019b80:	4618      	mov	r0, r3
 8019b82:	3714      	adds	r7, #20
 8019b84:	46bd      	mov	sp, r7
 8019b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b8a:	4770      	bx	lr
 8019b8c:	2001151c 	.word	0x2001151c

08019b90 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8019b90:	b580      	push	{r7, lr}
 8019b92:	b082      	sub	sp, #8
 8019b94:	af00      	add	r7, sp, #0
 8019b96:	6078      	str	r0, [r7, #4]
 8019b98:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8019b9a:	4a06      	ldr	r2, [pc, #24]	; (8019bb4 <MQTTPacket_decodeBuf+0x24>)
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8019ba0:	6839      	ldr	r1, [r7, #0]
 8019ba2:	4805      	ldr	r0, [pc, #20]	; (8019bb8 <MQTTPacket_decodeBuf+0x28>)
 8019ba4:	f7ff ff6d 	bl	8019a82 <MQTTPacket_decode>
 8019ba8:	4603      	mov	r3, r0
}
 8019baa:	4618      	mov	r0, r3
 8019bac:	3708      	adds	r7, #8
 8019bae:	46bd      	mov	sp, r7
 8019bb0:	bd80      	pop	{r7, pc}
 8019bb2:	bf00      	nop
 8019bb4:	2001151c 	.word	0x2001151c
 8019bb8:	08019b51 	.word	0x08019b51

08019bbc <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8019bbc:	b480      	push	{r7}
 8019bbe:	b085      	sub	sp, #20
 8019bc0:	af00      	add	r7, sp, #0
 8019bc2:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	681b      	ldr	r3, [r3, #0]
 8019bc8:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	781b      	ldrb	r3, [r3, #0]
 8019bce:	021b      	lsls	r3, r3, #8
 8019bd0:	68fa      	ldr	r2, [r7, #12]
 8019bd2:	3201      	adds	r2, #1
 8019bd4:	7812      	ldrb	r2, [r2, #0]
 8019bd6:	4413      	add	r3, r2
 8019bd8:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	1c9a      	adds	r2, r3, #2
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	601a      	str	r2, [r3, #0]
	return len;
 8019be4:	68bb      	ldr	r3, [r7, #8]
}
 8019be6:	4618      	mov	r0, r3
 8019be8:	3714      	adds	r7, #20
 8019bea:	46bd      	mov	sp, r7
 8019bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bf0:	4770      	bx	lr

08019bf2 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8019bf2:	b480      	push	{r7}
 8019bf4:	b085      	sub	sp, #20
 8019bf6:	af00      	add	r7, sp, #0
 8019bf8:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	781b      	ldrb	r3, [r3, #0]
 8019c00:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	1c5a      	adds	r2, r3, #1
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	601a      	str	r2, [r3, #0]
	return c;
 8019c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c0e:	4618      	mov	r0, r3
 8019c10:	3714      	adds	r7, #20
 8019c12:	46bd      	mov	sp, r7
 8019c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c18:	4770      	bx	lr

08019c1a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8019c1a:	b480      	push	{r7}
 8019c1c:	b083      	sub	sp, #12
 8019c1e:	af00      	add	r7, sp, #0
 8019c20:	6078      	str	r0, [r7, #4]
 8019c22:	460b      	mov	r3, r1
 8019c24:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	78fa      	ldrb	r2, [r7, #3]
 8019c2c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	1c5a      	adds	r2, r3, #1
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	601a      	str	r2, [r3, #0]
}
 8019c38:	bf00      	nop
 8019c3a:	370c      	adds	r7, #12
 8019c3c:	46bd      	mov	sp, r7
 8019c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c42:	4770      	bx	lr

08019c44 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8019c44:	b480      	push	{r7}
 8019c46:	b083      	sub	sp, #12
 8019c48:	af00      	add	r7, sp, #0
 8019c4a:	6078      	str	r0, [r7, #4]
 8019c4c:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8019c4e:	683b      	ldr	r3, [r7, #0]
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	da00      	bge.n	8019c56 <writeInt+0x12>
 8019c54:	33ff      	adds	r3, #255	; 0xff
 8019c56:	121b      	asrs	r3, r3, #8
 8019c58:	461a      	mov	r2, r3
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	b2d2      	uxtb	r2, r2
 8019c60:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	1c5a      	adds	r2, r3, #1
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8019c6c:	683b      	ldr	r3, [r7, #0]
 8019c6e:	425a      	negs	r2, r3
 8019c70:	b2db      	uxtb	r3, r3
 8019c72:	b2d2      	uxtb	r2, r2
 8019c74:	bf58      	it	pl
 8019c76:	4253      	negpl	r3, r2
 8019c78:	687a      	ldr	r2, [r7, #4]
 8019c7a:	6812      	ldr	r2, [r2, #0]
 8019c7c:	b2db      	uxtb	r3, r3
 8019c7e:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	1c5a      	adds	r2, r3, #1
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	601a      	str	r2, [r3, #0]
}
 8019c8a:	bf00      	nop
 8019c8c:	370c      	adds	r7, #12
 8019c8e:	46bd      	mov	sp, r7
 8019c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c94:	4770      	bx	lr

08019c96 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8019c96:	b580      	push	{r7, lr}
 8019c98:	b084      	sub	sp, #16
 8019c9a:	af00      	add	r7, sp, #0
 8019c9c:	6078      	str	r0, [r7, #4]
 8019c9e:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8019ca0:	6838      	ldr	r0, [r7, #0]
 8019ca2:	f7e6 fad7 	bl	8000254 <strlen>
 8019ca6:	4603      	mov	r3, r0
 8019ca8:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8019caa:	68f9      	ldr	r1, [r7, #12]
 8019cac:	6878      	ldr	r0, [r7, #4]
 8019cae:	f7ff ffc9 	bl	8019c44 <writeInt>
	memcpy(*pptr, string, len);
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	68fa      	ldr	r2, [r7, #12]
 8019cb8:	6839      	ldr	r1, [r7, #0]
 8019cba:	4618      	mov	r0, r3
 8019cbc:	f003 fc9a 	bl	801d5f4 <memcpy>
	*pptr += len;
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	681a      	ldr	r2, [r3, #0]
 8019cc4:	68fb      	ldr	r3, [r7, #12]
 8019cc6:	441a      	add	r2, r3
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	601a      	str	r2, [r3, #0]
}
 8019ccc:	bf00      	nop
 8019cce:	3710      	adds	r7, #16
 8019cd0:	46bd      	mov	sp, r7
 8019cd2:	bd80      	pop	{r7, pc}

08019cd4 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8019cd4:	b580      	push	{r7, lr}
 8019cd6:	b084      	sub	sp, #16
 8019cd8:	af00      	add	r7, sp, #0
 8019cda:	60f8      	str	r0, [r7, #12]
 8019cdc:	4638      	mov	r0, r7
 8019cde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	dd12      	ble.n	8019d0e <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	4619      	mov	r1, r3
 8019cec:	68f8      	ldr	r0, [r7, #12]
 8019cee:	f7ff ffa9 	bl	8019c44 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	681b      	ldr	r3, [r3, #0]
 8019cf6:	68b9      	ldr	r1, [r7, #8]
 8019cf8:	687a      	ldr	r2, [r7, #4]
 8019cfa:	4618      	mov	r0, r3
 8019cfc:	f003 fc7a 	bl	801d5f4 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	687a      	ldr	r2, [r7, #4]
 8019d06:	441a      	add	r2, r3
 8019d08:	68fb      	ldr	r3, [r7, #12]
 8019d0a:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8019d0c:	e00c      	b.n	8019d28 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8019d0e:	683b      	ldr	r3, [r7, #0]
 8019d10:	2b00      	cmp	r3, #0
 8019d12:	d005      	beq.n	8019d20 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8019d14:	683b      	ldr	r3, [r7, #0]
 8019d16:	4619      	mov	r1, r3
 8019d18:	68f8      	ldr	r0, [r7, #12]
 8019d1a:	f7ff ffbc 	bl	8019c96 <writeCString>
}
 8019d1e:	e003      	b.n	8019d28 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8019d20:	2100      	movs	r1, #0
 8019d22:	68f8      	ldr	r0, [r7, #12]
 8019d24:	f7ff ff8e 	bl	8019c44 <writeInt>
}
 8019d28:	bf00      	nop
 8019d2a:	3710      	adds	r7, #16
 8019d2c:	46bd      	mov	sp, r7
 8019d2e:	bd80      	pop	{r7, pc}

08019d30 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8019d30:	b580      	push	{r7, lr}
 8019d32:	b086      	sub	sp, #24
 8019d34:	af00      	add	r7, sp, #0
 8019d36:	60f8      	str	r0, [r7, #12]
 8019d38:	60b9      	str	r1, [r7, #8]
 8019d3a:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8019d3c:	2300      	movs	r3, #0
 8019d3e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8019d40:	68bb      	ldr	r3, [r7, #8]
 8019d42:	681b      	ldr	r3, [r3, #0]
 8019d44:	687a      	ldr	r2, [r7, #4]
 8019d46:	1ad3      	subs	r3, r2, r3
 8019d48:	2b01      	cmp	r3, #1
 8019d4a:	dd1a      	ble.n	8019d82 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8019d4c:	68b8      	ldr	r0, [r7, #8]
 8019d4e:	f7ff ff35 	bl	8019bbc <readInt>
 8019d52:	4602      	mov	r2, r0
 8019d54:	68fb      	ldr	r3, [r7, #12]
 8019d56:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8019d58:	68bb      	ldr	r3, [r7, #8]
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	68fa      	ldr	r2, [r7, #12]
 8019d5e:	6852      	ldr	r2, [r2, #4]
 8019d60:	4413      	add	r3, r2
 8019d62:	687a      	ldr	r2, [r7, #4]
 8019d64:	429a      	cmp	r2, r3
 8019d66:	d30c      	bcc.n	8019d82 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8019d68:	68bb      	ldr	r3, [r7, #8]
 8019d6a:	681a      	ldr	r2, [r3, #0]
 8019d6c:	68fb      	ldr	r3, [r7, #12]
 8019d6e:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8019d70:	68bb      	ldr	r3, [r7, #8]
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	68fa      	ldr	r2, [r7, #12]
 8019d76:	6852      	ldr	r2, [r2, #4]
 8019d78:	441a      	add	r2, r3
 8019d7a:	68bb      	ldr	r3, [r7, #8]
 8019d7c:	601a      	str	r2, [r3, #0]
			rc = 1;
 8019d7e:	2301      	movs	r3, #1
 8019d80:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8019d82:	68fb      	ldr	r3, [r7, #12]
 8019d84:	2200      	movs	r2, #0
 8019d86:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8019d88:	697b      	ldr	r3, [r7, #20]
}
 8019d8a:	4618      	mov	r0, r3
 8019d8c:	3718      	adds	r7, #24
 8019d8e:	46bd      	mov	sp, r7
 8019d90:	bd80      	pop	{r7, pc}

08019d92 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8019d92:	b580      	push	{r7, lr}
 8019d94:	b086      	sub	sp, #24
 8019d96:	af00      	add	r7, sp, #0
 8019d98:	1d3b      	adds	r3, r7, #4
 8019d9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8019d9e:	2300      	movs	r3, #0
 8019da0:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d006      	beq.n	8019db6 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	4618      	mov	r0, r3
 8019dac:	f7e6 fa52 	bl	8000254 <strlen>
 8019db0:	4603      	mov	r3, r0
 8019db2:	617b      	str	r3, [r7, #20]
 8019db4:	e001      	b.n	8019dba <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8019db6:	68bb      	ldr	r3, [r7, #8]
 8019db8:	617b      	str	r3, [r7, #20]
	return rc;
 8019dba:	697b      	ldr	r3, [r7, #20]
}
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	3718      	adds	r7, #24
 8019dc0:	46bd      	mov	sp, r7
 8019dc2:	bd80      	pop	{r7, pc}

08019dc4 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8019dc4:	b580      	push	{r7, lr}
 8019dc6:	b086      	sub	sp, #24
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	6078      	str	r0, [r7, #4]
 8019dcc:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8019dce:	2300      	movs	r3, #0
 8019dd0:	617b      	str	r3, [r7, #20]
		blen = 0;
 8019dd2:	2300      	movs	r3, #0
 8019dd4:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d00a      	beq.n	8019df4 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	4618      	mov	r0, r3
 8019dea:	f7e6 fa33 	bl	8000254 <strlen>
 8019dee:	4603      	mov	r3, r0
 8019df0:	617b      	str	r3, [r7, #20]
 8019df2:	e005      	b.n	8019e00 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	689b      	ldr	r3, [r3, #8]
 8019df8:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	685b      	ldr	r3, [r3, #4]
 8019dfe:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8019e00:	6838      	ldr	r0, [r7, #0]
 8019e02:	f7e6 fa27 	bl	8000254 <strlen>
 8019e06:	4603      	mov	r3, r0
 8019e08:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 8019e0a:	697a      	ldr	r2, [r7, #20]
 8019e0c:	68fb      	ldr	r3, [r7, #12]
 8019e0e:	429a      	cmp	r2, r3
 8019e10:	d10a      	bne.n	8019e28 <MQTTPacket_equals+0x64>
 8019e12:	697b      	ldr	r3, [r7, #20]
 8019e14:	461a      	mov	r2, r3
 8019e16:	6839      	ldr	r1, [r7, #0]
 8019e18:	6938      	ldr	r0, [r7, #16]
 8019e1a:	f003 fcd5 	bl	801d7c8 <strncmp>
 8019e1e:	4603      	mov	r3, r0
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d101      	bne.n	8019e28 <MQTTPacket_equals+0x64>
 8019e24:	2301      	movs	r3, #1
 8019e26:	e000      	b.n	8019e2a <MQTTPacket_equals+0x66>
 8019e28:	2300      	movs	r3, #0
}
 8019e2a:	4618      	mov	r0, r3
 8019e2c:	3718      	adds	r7, #24
 8019e2e:	46bd      	mov	sp, r7
 8019e30:	bd80      	pop	{r7, pc}

08019e32 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8019e32:	b580      	push	{r7, lr}
 8019e34:	b086      	sub	sp, #24
 8019e36:	af00      	add	r7, sp, #0
 8019e38:	60f8      	str	r0, [r7, #12]
 8019e3a:	4638      	mov	r0, r7
 8019e3c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8019e40:	2300      	movs	r3, #0
 8019e42:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8019e44:	463b      	mov	r3, r7
 8019e46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019e4a:	f7ff ffa2 	bl	8019d92 <MQTTstrlen>
 8019e4e:	4603      	mov	r3, r0
 8019e50:	1c9a      	adds	r2, r3, #2
 8019e52:	6a3b      	ldr	r3, [r7, #32]
 8019e54:	4413      	add	r3, r2
 8019e56:	697a      	ldr	r2, [r7, #20]
 8019e58:	4413      	add	r3, r2
 8019e5a:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	dd02      	ble.n	8019e68 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8019e62:	697b      	ldr	r3, [r7, #20]
 8019e64:	3302      	adds	r3, #2
 8019e66:	617b      	str	r3, [r7, #20]
	return len;
 8019e68:	697b      	ldr	r3, [r7, #20]
}
 8019e6a:	4618      	mov	r0, r3
 8019e6c:	3718      	adds	r7, #24
 8019e6e:	46bd      	mov	sp, r7
 8019e70:	bd80      	pop	{r7, pc}

08019e72 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8019e72:	b580      	push	{r7, lr}
 8019e74:	b08a      	sub	sp, #40	; 0x28
 8019e76:	af02      	add	r7, sp, #8
 8019e78:	60f8      	str	r0, [r7, #12]
 8019e7a:	60b9      	str	r1, [r7, #8]
 8019e7c:	603b      	str	r3, [r7, #0]
 8019e7e:	4613      	mov	r3, r2
 8019e80:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8019e86:	2300      	movs	r3, #0
 8019e88:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8019e8a:	2300      	movs	r3, #0
 8019e8c:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8019e8e:	2300      	movs	r3, #0
 8019e90:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8019e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019e94:	9300      	str	r3, [sp, #0]
 8019e96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019e9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019e9c:	6838      	ldr	r0, [r7, #0]
 8019e9e:	f7ff ffc8 	bl	8019e32 <MQTTSerialize_publishLength>
 8019ea2:	61b8      	str	r0, [r7, #24]
 8019ea4:	69b8      	ldr	r0, [r7, #24]
 8019ea6:	f7ff fe29 	bl	8019afc <MQTTPacket_len>
 8019eaa:	4602      	mov	r2, r0
 8019eac:	68bb      	ldr	r3, [r7, #8]
 8019eae:	4293      	cmp	r3, r2
 8019eb0:	da03      	bge.n	8019eba <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8019eb2:	f06f 0301 	mvn.w	r3, #1
 8019eb6:	61fb      	str	r3, [r7, #28]
		goto exit;
 8019eb8:	e04c      	b.n	8019f54 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 8019eba:	7c3b      	ldrb	r3, [r7, #16]
 8019ebc:	2203      	movs	r2, #3
 8019ebe:	f362 1307 	bfi	r3, r2, #4, #4
 8019ec2:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8019ec4:	79fb      	ldrb	r3, [r7, #7]
 8019ec6:	f003 0301 	and.w	r3, r3, #1
 8019eca:	b2da      	uxtb	r2, r3
 8019ecc:	7c3b      	ldrb	r3, [r7, #16]
 8019ece:	f362 03c3 	bfi	r3, r2, #3, #1
 8019ed2:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8019ed4:	683b      	ldr	r3, [r7, #0]
 8019ed6:	f003 0303 	and.w	r3, r3, #3
 8019eda:	b2da      	uxtb	r2, r3
 8019edc:	7c3b      	ldrb	r3, [r7, #16]
 8019ede:	f362 0342 	bfi	r3, r2, #1, #2
 8019ee2:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8019ee4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019ee8:	f003 0301 	and.w	r3, r3, #1
 8019eec:	b2da      	uxtb	r2, r3
 8019eee:	7c3b      	ldrb	r3, [r7, #16]
 8019ef0:	f362 0300 	bfi	r3, r2, #0, #1
 8019ef4:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8019ef6:	7c3a      	ldrb	r2, [r7, #16]
 8019ef8:	f107 0314 	add.w	r3, r7, #20
 8019efc:	4611      	mov	r1, r2
 8019efe:	4618      	mov	r0, r3
 8019f00:	f7ff fe8b 	bl	8019c1a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8019f04:	697b      	ldr	r3, [r7, #20]
 8019f06:	69b9      	ldr	r1, [r7, #24]
 8019f08:	4618      	mov	r0, r3
 8019f0a:	f7ff fd8b 	bl	8019a24 <MQTTPacket_encode>
 8019f0e:	4602      	mov	r2, r0
 8019f10:	697b      	ldr	r3, [r7, #20]
 8019f12:	4413      	add	r3, r2
 8019f14:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8019f16:	f107 0014 	add.w	r0, r7, #20
 8019f1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019f20:	f7ff fed8 	bl	8019cd4 <writeMQTTString>

	if (qos > 0)
 8019f24:	683b      	ldr	r3, [r7, #0]
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	dd06      	ble.n	8019f38 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8019f2a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8019f2c:	f107 0314 	add.w	r3, r7, #20
 8019f30:	4611      	mov	r1, r2
 8019f32:	4618      	mov	r0, r3
 8019f34:	f7ff fe86 	bl	8019c44 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8019f38:	697b      	ldr	r3, [r7, #20]
 8019f3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019f3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019f3e:	4618      	mov	r0, r3
 8019f40:	f003 fb58 	bl	801d5f4 <memcpy>
	ptr += payloadlen;
 8019f44:	697a      	ldr	r2, [r7, #20]
 8019f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019f48:	4413      	add	r3, r2
 8019f4a:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8019f4c:	697a      	ldr	r2, [r7, #20]
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	1ad3      	subs	r3, r2, r3
 8019f52:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019f54:	69fb      	ldr	r3, [r7, #28]
}
 8019f56:	4618      	mov	r0, r3
 8019f58:	3720      	adds	r7, #32
 8019f5a:	46bd      	mov	sp, r7
 8019f5c:	bd80      	pop	{r7, pc}

08019f5e <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 8019f5e:	b580      	push	{r7, lr}
 8019f60:	b088      	sub	sp, #32
 8019f62:	af00      	add	r7, sp, #0
 8019f64:	60f8      	str	r0, [r7, #12]
 8019f66:	60b9      	str	r1, [r7, #8]
 8019f68:	4611      	mov	r1, r2
 8019f6a:	461a      	mov	r2, r3
 8019f6c:	460b      	mov	r3, r1
 8019f6e:	71fb      	strb	r3, [r7, #7]
 8019f70:	4613      	mov	r3, r2
 8019f72:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 8019f74:	2300      	movs	r3, #0
 8019f76:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8019f78:	2300      	movs	r3, #0
 8019f7a:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 8019f80:	68bb      	ldr	r3, [r7, #8]
 8019f82:	2b03      	cmp	r3, #3
 8019f84:	dc03      	bgt.n	8019f8e <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8019f86:	f06f 0301 	mvn.w	r3, #1
 8019f8a:	61fb      	str	r3, [r7, #28]
		goto exit;
 8019f8c:	e037      	b.n	8019ffe <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8019f8e:	79fb      	ldrb	r3, [r7, #7]
 8019f90:	f003 030f 	and.w	r3, r3, #15
 8019f94:	b2da      	uxtb	r2, r3
 8019f96:	7e3b      	ldrb	r3, [r7, #24]
 8019f98:	f362 1307 	bfi	r3, r2, #4, #4
 8019f9c:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8019f9e:	79bb      	ldrb	r3, [r7, #6]
 8019fa0:	f003 0301 	and.w	r3, r3, #1
 8019fa4:	b2da      	uxtb	r2, r3
 8019fa6:	7e3b      	ldrb	r3, [r7, #24]
 8019fa8:	f362 03c3 	bfi	r3, r2, #3, #1
 8019fac:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8019fae:	79fb      	ldrb	r3, [r7, #7]
 8019fb0:	2b06      	cmp	r3, #6
 8019fb2:	bf0c      	ite	eq
 8019fb4:	2301      	moveq	r3, #1
 8019fb6:	2300      	movne	r3, #0
 8019fb8:	b2db      	uxtb	r3, r3
 8019fba:	f003 0303 	and.w	r3, r3, #3
 8019fbe:	b2da      	uxtb	r2, r3
 8019fc0:	7e3b      	ldrb	r3, [r7, #24]
 8019fc2:	f362 0342 	bfi	r3, r2, #1, #2
 8019fc6:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8019fc8:	7e3a      	ldrb	r2, [r7, #24]
 8019fca:	f107 0314 	add.w	r3, r7, #20
 8019fce:	4611      	mov	r1, r2
 8019fd0:	4618      	mov	r0, r3
 8019fd2:	f7ff fe22 	bl	8019c1a <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 8019fd6:	697b      	ldr	r3, [r7, #20]
 8019fd8:	2102      	movs	r1, #2
 8019fda:	4618      	mov	r0, r3
 8019fdc:	f7ff fd22 	bl	8019a24 <MQTTPacket_encode>
 8019fe0:	4602      	mov	r2, r0
 8019fe2:	697b      	ldr	r3, [r7, #20]
 8019fe4:	4413      	add	r3, r2
 8019fe6:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8019fe8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8019fea:	f107 0314 	add.w	r3, r7, #20
 8019fee:	4611      	mov	r1, r2
 8019ff0:	4618      	mov	r0, r3
 8019ff2:	f7ff fe27 	bl	8019c44 <writeInt>
	rc = ptr - buf;
 8019ff6:	697a      	ldr	r2, [r7, #20]
 8019ff8:	68fb      	ldr	r3, [r7, #12]
 8019ffa:	1ad3      	subs	r3, r2, r3
 8019ffc:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019ffe:	69fb      	ldr	r3, [r7, #28]
}
 801a000:	4618      	mov	r0, r3
 801a002:	3720      	adds	r7, #32
 801a004:	46bd      	mov	sp, r7
 801a006:	bd80      	pop	{r7, pc}

0801a008 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b084      	sub	sp, #16
 801a00c:	af00      	add	r7, sp, #0
 801a00e:	6078      	str	r0, [r7, #4]
 801a010:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 801a012:	2302      	movs	r3, #2
 801a014:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 801a016:	2300      	movs	r3, #0
 801a018:	60fb      	str	r3, [r7, #12]
 801a01a:	e013      	b.n	801a044 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 801a01c:	68fa      	ldr	r2, [r7, #12]
 801a01e:	4613      	mov	r3, r2
 801a020:	005b      	lsls	r3, r3, #1
 801a022:	4413      	add	r3, r2
 801a024:	009b      	lsls	r3, r3, #2
 801a026:	461a      	mov	r2, r3
 801a028:	683b      	ldr	r3, [r7, #0]
 801a02a:	4413      	add	r3, r2
 801a02c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a030:	f7ff feaf 	bl	8019d92 <MQTTstrlen>
 801a034:	4603      	mov	r3, r0
 801a036:	3303      	adds	r3, #3
 801a038:	68ba      	ldr	r2, [r7, #8]
 801a03a:	4413      	add	r3, r2
 801a03c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 801a03e:	68fb      	ldr	r3, [r7, #12]
 801a040:	3301      	adds	r3, #1
 801a042:	60fb      	str	r3, [r7, #12]
 801a044:	68fa      	ldr	r2, [r7, #12]
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	429a      	cmp	r2, r3
 801a04a:	dbe7      	blt.n	801a01c <MQTTSerialize_subscribeLength+0x14>
	return len;
 801a04c:	68bb      	ldr	r3, [r7, #8]
}
 801a04e:	4618      	mov	r0, r3
 801a050:	3710      	adds	r7, #16
 801a052:	46bd      	mov	sp, r7
 801a054:	bd80      	pop	{r7, pc}

0801a056 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 801a056:	b580      	push	{r7, lr}
 801a058:	b08a      	sub	sp, #40	; 0x28
 801a05a:	af00      	add	r7, sp, #0
 801a05c:	60f8      	str	r0, [r7, #12]
 801a05e:	60b9      	str	r1, [r7, #8]
 801a060:	4611      	mov	r1, r2
 801a062:	461a      	mov	r2, r3
 801a064:	460b      	mov	r3, r1
 801a066:	71fb      	strb	r3, [r7, #7]
 801a068:	4613      	mov	r3, r2
 801a06a:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 801a070:	2300      	movs	r3, #0
 801a072:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 801a074:	2300      	movs	r3, #0
 801a076:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 801a078:	2300      	movs	r3, #0
 801a07a:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 801a07c:	2300      	movs	r3, #0
 801a07e:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 801a080:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a082:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a084:	f7ff ffc0 	bl	801a008 <MQTTSerialize_subscribeLength>
 801a088:	61f8      	str	r0, [r7, #28]
 801a08a:	69f8      	ldr	r0, [r7, #28]
 801a08c:	f7ff fd36 	bl	8019afc <MQTTPacket_len>
 801a090:	4602      	mov	r2, r0
 801a092:	68bb      	ldr	r3, [r7, #8]
 801a094:	4293      	cmp	r3, r2
 801a096:	da03      	bge.n	801a0a0 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801a098:	f06f 0301 	mvn.w	r3, #1
 801a09c:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 801a09e:	e051      	b.n	801a144 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 801a0a0:	2300      	movs	r3, #0
 801a0a2:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 801a0a4:	7d3b      	ldrb	r3, [r7, #20]
 801a0a6:	2208      	movs	r2, #8
 801a0a8:	f362 1307 	bfi	r3, r2, #4, #4
 801a0ac:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 801a0ae:	79fb      	ldrb	r3, [r7, #7]
 801a0b0:	f003 0301 	and.w	r3, r3, #1
 801a0b4:	b2da      	uxtb	r2, r3
 801a0b6:	7d3b      	ldrb	r3, [r7, #20]
 801a0b8:	f362 03c3 	bfi	r3, r2, #3, #1
 801a0bc:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 801a0be:	7d3b      	ldrb	r3, [r7, #20]
 801a0c0:	2201      	movs	r2, #1
 801a0c2:	f362 0342 	bfi	r3, r2, #1, #2
 801a0c6:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 801a0c8:	7d3a      	ldrb	r2, [r7, #20]
 801a0ca:	f107 0318 	add.w	r3, r7, #24
 801a0ce:	4611      	mov	r1, r2
 801a0d0:	4618      	mov	r0, r3
 801a0d2:	f7ff fda2 	bl	8019c1a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801a0d6:	69bb      	ldr	r3, [r7, #24]
 801a0d8:	69f9      	ldr	r1, [r7, #28]
 801a0da:	4618      	mov	r0, r3
 801a0dc:	f7ff fca2 	bl	8019a24 <MQTTPacket_encode>
 801a0e0:	4602      	mov	r2, r0
 801a0e2:	69bb      	ldr	r3, [r7, #24]
 801a0e4:	4413      	add	r3, r2
 801a0e6:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 801a0e8:	88ba      	ldrh	r2, [r7, #4]
 801a0ea:	f107 0318 	add.w	r3, r7, #24
 801a0ee:	4611      	mov	r1, r2
 801a0f0:	4618      	mov	r0, r3
 801a0f2:	f7ff fda7 	bl	8019c44 <writeInt>

	for (i = 0; i < count; ++i)
 801a0f6:	2300      	movs	r3, #0
 801a0f8:	623b      	str	r3, [r7, #32]
 801a0fa:	e01b      	b.n	801a134 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 801a0fc:	6a3a      	ldr	r2, [r7, #32]
 801a0fe:	4613      	mov	r3, r2
 801a100:	005b      	lsls	r3, r3, #1
 801a102:	4413      	add	r3, r2
 801a104:	009b      	lsls	r3, r3, #2
 801a106:	461a      	mov	r2, r3
 801a108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a10a:	4413      	add	r3, r2
 801a10c:	f107 0018 	add.w	r0, r7, #24
 801a110:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a112:	f7ff fddf 	bl	8019cd4 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 801a116:	6a3b      	ldr	r3, [r7, #32]
 801a118:	009b      	lsls	r3, r3, #2
 801a11a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a11c:	4413      	add	r3, r2
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	b2da      	uxtb	r2, r3
 801a122:	f107 0318 	add.w	r3, r7, #24
 801a126:	4611      	mov	r1, r2
 801a128:	4618      	mov	r0, r3
 801a12a:	f7ff fd76 	bl	8019c1a <writeChar>
	for (i = 0; i < count; ++i)
 801a12e:	6a3b      	ldr	r3, [r7, #32]
 801a130:	3301      	adds	r3, #1
 801a132:	623b      	str	r3, [r7, #32]
 801a134:	6a3a      	ldr	r2, [r7, #32]
 801a136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a138:	429a      	cmp	r2, r3
 801a13a:	dbdf      	blt.n	801a0fc <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 801a13c:	69ba      	ldr	r2, [r7, #24]
 801a13e:	68fb      	ldr	r3, [r7, #12]
 801a140:	1ad3      	subs	r3, r2, r3
 801a142:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a146:	4618      	mov	r0, r3
 801a148:	3728      	adds	r7, #40	; 0x28
 801a14a:	46bd      	mov	sp, r7
 801a14c:	bd80      	pop	{r7, pc}

0801a14e <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 801a14e:	b580      	push	{r7, lr}
 801a150:	b08a      	sub	sp, #40	; 0x28
 801a152:	af00      	add	r7, sp, #0
 801a154:	60f8      	str	r0, [r7, #12]
 801a156:	60b9      	str	r1, [r7, #8]
 801a158:	607a      	str	r2, [r7, #4]
 801a15a:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801a15c:	2300      	movs	r3, #0
 801a15e:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801a160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a162:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801a164:	2300      	movs	r3, #0
 801a166:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801a168:	2300      	movs	r3, #0
 801a16a:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801a16c:	f107 0318 	add.w	r3, r7, #24
 801a170:	4618      	mov	r0, r3
 801a172:	f7ff fd3e 	bl	8019bf2 <readChar>
 801a176:	4603      	mov	r3, r0
 801a178:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 801a17a:	7f3b      	ldrb	r3, [r7, #28]
 801a17c:	f023 030f 	bic.w	r3, r3, #15
 801a180:	b2db      	uxtb	r3, r3
 801a182:	2b90      	cmp	r3, #144	; 0x90
 801a184:	d142      	bne.n	801a20c <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801a186:	69bb      	ldr	r3, [r7, #24]
 801a188:	f107 0214 	add.w	r2, r7, #20
 801a18c:	4611      	mov	r1, r2
 801a18e:	4618      	mov	r0, r3
 801a190:	f7ff fcfe 	bl	8019b90 <MQTTPacket_decodeBuf>
 801a194:	6278      	str	r0, [r7, #36]	; 0x24
 801a196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a198:	69bb      	ldr	r3, [r7, #24]
 801a19a:	4413      	add	r3, r2
 801a19c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801a19e:	69bb      	ldr	r3, [r7, #24]
 801a1a0:	697a      	ldr	r2, [r7, #20]
 801a1a2:	4413      	add	r3, r2
 801a1a4:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 801a1a6:	69bb      	ldr	r3, [r7, #24]
 801a1a8:	6a3a      	ldr	r2, [r7, #32]
 801a1aa:	1ad3      	subs	r3, r2, r3
 801a1ac:	2b01      	cmp	r3, #1
 801a1ae:	dd2f      	ble.n	801a210 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 801a1b0:	f107 0318 	add.w	r3, r7, #24
 801a1b4:	4618      	mov	r0, r3
 801a1b6:	f7ff fd01 	bl	8019bbc <readInt>
 801a1ba:	4603      	mov	r3, r0
 801a1bc:	b29a      	uxth	r2, r3
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	801a      	strh	r2, [r3, #0]

	*count = 0;
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	2200      	movs	r2, #0
 801a1c6:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 801a1c8:	e019      	b.n	801a1fe <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	68ba      	ldr	r2, [r7, #8]
 801a1d0:	429a      	cmp	r2, r3
 801a1d2:	da03      	bge.n	801a1dc <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 801a1d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a1d8:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 801a1da:	e01a      	b.n	801a212 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 801a1dc:	f107 0318 	add.w	r3, r7, #24
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	f7ff fd06 	bl	8019bf2 <readChar>
 801a1e6:	4603      	mov	r3, r0
 801a1e8:	4618      	mov	r0, r3
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	1c59      	adds	r1, r3, #1
 801a1f0:	687a      	ldr	r2, [r7, #4]
 801a1f2:	6011      	str	r1, [r2, #0]
 801a1f4:	009b      	lsls	r3, r3, #2
 801a1f6:	683a      	ldr	r2, [r7, #0]
 801a1f8:	4413      	add	r3, r2
 801a1fa:	4602      	mov	r2, r0
 801a1fc:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 801a1fe:	69bb      	ldr	r3, [r7, #24]
 801a200:	6a3a      	ldr	r2, [r7, #32]
 801a202:	429a      	cmp	r2, r3
 801a204:	d8e1      	bhi.n	801a1ca <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 801a206:	2301      	movs	r3, #1
 801a208:	627b      	str	r3, [r7, #36]	; 0x24
 801a20a:	e002      	b.n	801a212 <MQTTDeserialize_suback+0xc4>
		goto exit;
 801a20c:	bf00      	nop
 801a20e:	e000      	b.n	801a212 <MQTTDeserialize_suback+0xc4>
		goto exit;
 801a210:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a214:	4618      	mov	r0, r3
 801a216:	3728      	adds	r7, #40	; 0x28
 801a218:	46bd      	mov	sp, r7
 801a21a:	bd80      	pop	{r7, pc}

0801a21c <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 801a21c:	b480      	push	{r7}
 801a21e:	b08f      	sub	sp, #60	; 0x3c
 801a220:	af00      	add	r7, sp, #0
 801a222:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	891a      	ldrh	r2, [r3, #8]
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	8a1b      	ldrh	r3, [r3, #16]
 801a22e:	429a      	cmp	r2, r3
 801a230:	d301      	bcc.n	801a236 <load_descriptor_values+0x1a>
        return false;
 801a232:	2300      	movs	r3, #0
 801a234:	e156      	b.n	801a4e4 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 801a236:	687b      	ldr	r3, [r7, #4]
 801a238:	681b      	ldr	r3, [r3, #0]
 801a23a:	681a      	ldr	r2, [r3, #0]
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	895b      	ldrh	r3, [r3, #10]
 801a240:	009b      	lsls	r3, r3, #2
 801a242:	4413      	add	r3, r2
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	62fb      	str	r3, [r7, #44]	; 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 801a248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a24a:	0a1b      	lsrs	r3, r3, #8
 801a24c:	b2da      	uxtb	r2, r3
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 801a252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a254:	f003 0303 	and.w	r3, r3, #3
 801a258:	2b02      	cmp	r3, #2
 801a25a:	d05a      	beq.n	801a312 <load_descriptor_values+0xf6>
 801a25c:	2b02      	cmp	r3, #2
 801a25e:	f200 8094 	bhi.w	801a38a <load_descriptor_values+0x16e>
 801a262:	2b00      	cmp	r3, #0
 801a264:	d002      	beq.n	801a26c <load_descriptor_values+0x50>
 801a266:	2b01      	cmp	r3, #1
 801a268:	d01f      	beq.n	801a2aa <load_descriptor_values+0x8e>
 801a26a:	e08e      	b.n	801a38a <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	2201      	movs	r2, #1
 801a270:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 801a272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a274:	089b      	lsrs	r3, r3, #2
 801a276:	b29b      	uxth	r3, r3
 801a278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a27c:	b29a      	uxth	r2, r3
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 801a282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a284:	0e1b      	lsrs	r3, r3, #24
 801a286:	b25b      	sxtb	r3, r3
 801a288:	f003 030f 	and.w	r3, r3, #15
 801a28c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = (word0 >> 16) & 0xFF;
 801a290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a292:	0c1b      	lsrs	r3, r3, #16
 801a294:	b2db      	uxtb	r3, r3
 801a296:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 801a298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a29a:	0f1b      	lsrs	r3, r3, #28
 801a29c:	b29b      	uxth	r3, r3
 801a29e:	f003 030f 	and.w	r3, r3, #15
 801a2a2:	b29a      	uxth	r2, r3
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	825a      	strh	r2, [r3, #18]
            break;
 801a2a8:	e0b4      	b.n	801a414 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	681a      	ldr	r2, [r3, #0]
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	895b      	ldrh	r3, [r3, #10]
 801a2b4:	3301      	adds	r3, #1
 801a2b6:	009b      	lsls	r3, r3, #2
 801a2b8:	4413      	add	r3, r2
 801a2ba:	681b      	ldr	r3, [r3, #0]
 801a2bc:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 801a2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2c0:	0c1b      	lsrs	r3, r3, #16
 801a2c2:	b29b      	uxth	r3, r3
 801a2c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a2c8:	b29a      	uxth	r2, r3
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 801a2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2d0:	089b      	lsrs	r3, r3, #2
 801a2d2:	b29b      	uxth	r3, r3
 801a2d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a2d8:	b29a      	uxth	r2, r3
 801a2da:	69fb      	ldr	r3, [r7, #28]
 801a2dc:	0f1b      	lsrs	r3, r3, #28
 801a2de:	b29b      	uxth	r3, r3
 801a2e0:	019b      	lsls	r3, r3, #6
 801a2e2:	b29b      	uxth	r3, r3
 801a2e4:	4313      	orrs	r3, r2
 801a2e6:	b29a      	uxth	r2, r3
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 801a2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2ee:	0f1b      	lsrs	r3, r3, #28
 801a2f0:	b25b      	sxtb	r3, r3
 801a2f2:	f003 030f 	and.w	r3, r3, #15
 801a2f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word1 & 0xFFFF;
 801a2fa:	69fb      	ldr	r3, [r7, #28]
 801a2fc:	b29b      	uxth	r3, r3
 801a2fe:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 801a300:	69fb      	ldr	r3, [r7, #28]
 801a302:	0c1b      	lsrs	r3, r3, #16
 801a304:	b29b      	uxth	r3, r3
 801a306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a30a:	b29a      	uxth	r2, r3
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	825a      	strh	r2, [r3, #18]
            break;
 801a310:	e080      	b.n	801a414 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	681a      	ldr	r2, [r3, #0]
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	895b      	ldrh	r3, [r3, #10]
 801a31c:	3301      	adds	r3, #1
 801a31e:	009b      	lsls	r3, r3, #2
 801a320:	4413      	add	r3, r2
 801a322:	681b      	ldr	r3, [r3, #0]
 801a324:	62bb      	str	r3, [r7, #40]	; 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	681a      	ldr	r2, [r3, #0]
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	895b      	ldrh	r3, [r3, #10]
 801a330:	3302      	adds	r3, #2
 801a332:	009b      	lsls	r3, r3, #2
 801a334:	4413      	add	r3, r2
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	681a      	ldr	r2, [r3, #0]
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	895b      	ldrh	r3, [r3, #10]
 801a344:	3303      	adds	r3, #3
 801a346:	009b      	lsls	r3, r3, #2
 801a348:	4413      	add	r3, r2
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 801a34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a350:	0c1b      	lsrs	r3, r3, #16
 801a352:	b29a      	uxth	r2, r3
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 801a358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a35a:	089b      	lsrs	r3, r3, #2
 801a35c:	b29b      	uxth	r3, r3
 801a35e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a362:	b29a      	uxth	r2, r3
 801a364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a366:	0a1b      	lsrs	r3, r3, #8
 801a368:	b29b      	uxth	r3, r3
 801a36a:	019b      	lsls	r3, r3, #6
 801a36c:	b29b      	uxth	r3, r3
 801a36e:	4313      	orrs	r3, r2
 801a370:	b29a      	uxth	r2, r3
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 801a376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a378:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 801a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a37e:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 801a380:	6a3b      	ldr	r3, [r7, #32]
 801a382:	b29a      	uxth	r2, r3
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	825a      	strh	r2, [r3, #18]
            break;
 801a388:	e044      	b.n	801a414 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	681b      	ldr	r3, [r3, #0]
 801a38e:	681a      	ldr	r2, [r3, #0]
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	895b      	ldrh	r3, [r3, #10]
 801a394:	3301      	adds	r3, #1
 801a396:	009b      	lsls	r3, r3, #2
 801a398:	4413      	add	r3, r2
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	681a      	ldr	r2, [r3, #0]
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	895b      	ldrh	r3, [r3, #10]
 801a3a8:	3302      	adds	r3, #2
 801a3aa:	009b      	lsls	r3, r3, #2
 801a3ac:	4413      	add	r3, r2
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	681a      	ldr	r2, [r3, #0]
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	895b      	ldrh	r3, [r3, #10]
 801a3bc:	3303      	adds	r3, #3
 801a3be:	009b      	lsls	r3, r3, #2
 801a3c0:	4413      	add	r3, r2
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	681a      	ldr	r2, [r3, #0]
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	895b      	ldrh	r3, [r3, #10]
 801a3d0:	3304      	adds	r3, #4
 801a3d2:	009b      	lsls	r3, r3, #2
 801a3d4:	4413      	add	r3, r2
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 801a3da:	68fb      	ldr	r3, [r7, #12]
 801a3dc:	b29a      	uxth	r2, r3
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 801a3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3e4:	089b      	lsrs	r3, r3, #2
 801a3e6:	b29b      	uxth	r3, r3
 801a3e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a3ec:	b29a      	uxth	r2, r3
 801a3ee:	69bb      	ldr	r3, [r7, #24]
 801a3f0:	0a1b      	lsrs	r3, r3, #8
 801a3f2:	b29b      	uxth	r3, r3
 801a3f4:	019b      	lsls	r3, r3, #6
 801a3f6:	b29b      	uxth	r3, r3
 801a3f8:	4313      	orrs	r3, r2
 801a3fa:	b29a      	uxth	r2, r3
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 801a400:	69bb      	ldr	r3, [r7, #24]
 801a402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 801a406:	697b      	ldr	r3, [r7, #20]
 801a408:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 801a40a:	693b      	ldr	r3, [r7, #16]
 801a40c:	b29a      	uxth	r2, r3
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	825a      	strh	r2, [r3, #18]
            break;
 801a412:	bf00      	nop
        }
    }

    if (!iter->message)
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	685b      	ldr	r3, [r3, #4]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d106      	bne.n	801a42a <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	2200      	movs	r2, #0
 801a420:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	2200      	movs	r2, #0
 801a426:	621a      	str	r2, [r3, #32]
 801a428:	e041      	b.n	801a4ae <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	685a      	ldr	r2, [r3, #4]
 801a42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a430:	441a      	add	r2, r3
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	619a      	str	r2, [r3, #24]

        if (size_offset)
 801a436:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d008      	beq.n	801a450 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	699a      	ldr	r2, [r3, #24]
 801a442:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801a446:	425b      	negs	r3, r3
 801a448:	441a      	add	r2, r3
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	621a      	str	r2, [r3, #32]
 801a44e:	e01a      	b.n	801a486 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	7d9b      	ldrb	r3, [r3, #22]
 801a454:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801a458:	2b20      	cmp	r3, #32
 801a45a:	d111      	bne.n	801a480 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	7d9b      	ldrb	r3, [r3, #22]
 801a460:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 801a464:	2b00      	cmp	r3, #0
 801a466:	d005      	beq.n	801a474 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	7d9b      	ldrb	r3, [r3, #22]
 801a46c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 801a470:	2b80      	cmp	r3, #128	; 0x80
 801a472:	d105      	bne.n	801a480 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	f103 0214 	add.w	r2, r3, #20
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	621a      	str	r2, [r3, #32]
 801a47e:	e002      	b.n	801a486 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	2200      	movs	r2, #0
 801a484:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	7d9b      	ldrb	r3, [r3, #22]
 801a48a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a48e:	2b80      	cmp	r3, #128	; 0x80
 801a490:	d109      	bne.n	801a4a6 <load_descriptor_values+0x28a>
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	699b      	ldr	r3, [r3, #24]
 801a496:	2b00      	cmp	r3, #0
 801a498:	d005      	beq.n	801a4a6 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	699b      	ldr	r3, [r3, #24]
 801a49e:	681a      	ldr	r2, [r3, #0]
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	61da      	str	r2, [r3, #28]
 801a4a4:	e003      	b.n	801a4ae <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	699a      	ldr	r2, [r3, #24]
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	7d9b      	ldrb	r3, [r3, #22]
 801a4b2:	f003 030f 	and.w	r3, r3, #15
 801a4b6:	2b08      	cmp	r3, #8
 801a4b8:	d005      	beq.n	801a4c6 <load_descriptor_values+0x2aa>
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	7d9b      	ldrb	r3, [r3, #22]
 801a4be:	f003 030f 	and.w	r3, r3, #15
 801a4c2:	2b09      	cmp	r3, #9
 801a4c4:	d10a      	bne.n	801a4dc <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	685a      	ldr	r2, [r3, #4]
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	89db      	ldrh	r3, [r3, #14]
 801a4d0:	009b      	lsls	r3, r3, #2
 801a4d2:	4413      	add	r3, r2
 801a4d4:	681a      	ldr	r2, [r3, #0]
 801a4d6:	687b      	ldr	r3, [r7, #4]
 801a4d8:	625a      	str	r2, [r3, #36]	; 0x24
 801a4da:	e002      	b.n	801a4e2 <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	2200      	movs	r2, #0
 801a4e0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return true;
 801a4e2:	2301      	movs	r3, #1
}
 801a4e4:	4618      	mov	r0, r3
 801a4e6:	373c      	adds	r7, #60	; 0x3c
 801a4e8:	46bd      	mov	sp, r7
 801a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ee:	4770      	bx	lr

0801a4f0 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 801a4f0:	b480      	push	{r7}
 801a4f2:	b085      	sub	sp, #20
 801a4f4:	af00      	add	r7, sp, #0
 801a4f6:	6078      	str	r0, [r7, #4]
    iter->index++;
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	891b      	ldrh	r3, [r3, #8]
 801a4fc:	3301      	adds	r3, #1
 801a4fe:	b29a      	uxth	r2, r3
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	891a      	ldrh	r2, [r3, #8]
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	8a1b      	ldrh	r3, [r3, #16]
 801a50e:	429a      	cmp	r2, r3
 801a510:	d30c      	bcc.n	801a52c <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	2200      	movs	r2, #0
 801a516:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	2200      	movs	r2, #0
 801a51c:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	2200      	movs	r2, #0
 801a522:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	2200      	movs	r2, #0
 801a528:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 801a52a:	e03c      	b.n	801a5a6 <advance_iterator+0xb6>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	681a      	ldr	r2, [r3, #0]
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	895b      	ldrh	r3, [r3, #10]
 801a536:	009b      	lsls	r3, r3, #2
 801a538:	4413      	add	r3, r2
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	0a1b      	lsrs	r3, r3, #8
 801a542:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 801a544:	68fb      	ldr	r3, [r7, #12]
 801a546:	f003 0303 	and.w	r3, r3, #3
 801a54a:	2201      	movs	r2, #1
 801a54c:	fa02 f303 	lsl.w	r3, r2, r3
 801a550:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	895a      	ldrh	r2, [r3, #10]
 801a556:	893b      	ldrh	r3, [r7, #8]
 801a558:	4413      	add	r3, r2
 801a55a:	b29a      	uxth	r2, r3
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	899a      	ldrh	r2, [r3, #12]
 801a564:	7afb      	ldrb	r3, [r7, #11]
 801a566:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	bf0c      	ite	eq
 801a56e:	2301      	moveq	r3, #1
 801a570:	2300      	movne	r3, #0
 801a572:	b2db      	uxtb	r3, r3
 801a574:	b29b      	uxth	r3, r3
 801a576:	4413      	add	r3, r2
 801a578:	b29a      	uxth	r2, r3
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	89da      	ldrh	r2, [r3, #14]
 801a582:	7afb      	ldrb	r3, [r7, #11]
 801a584:	f003 030f 	and.w	r3, r3, #15
 801a588:	2b08      	cmp	r3, #8
 801a58a:	d004      	beq.n	801a596 <advance_iterator+0xa6>
 801a58c:	7afb      	ldrb	r3, [r7, #11]
 801a58e:	f003 030f 	and.w	r3, r3, #15
 801a592:	2b09      	cmp	r3, #9
 801a594:	d101      	bne.n	801a59a <advance_iterator+0xaa>
 801a596:	2301      	movs	r3, #1
 801a598:	e000      	b.n	801a59c <advance_iterator+0xac>
 801a59a:	2300      	movs	r3, #0
 801a59c:	b29b      	uxth	r3, r3
 801a59e:	4413      	add	r3, r2
 801a5a0:	b29a      	uxth	r2, r3
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	81da      	strh	r2, [r3, #14]
}
 801a5a6:	bf00      	nop
 801a5a8:	3714      	adds	r7, #20
 801a5aa:	46bd      	mov	sp, r7
 801a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5b0:	4770      	bx	lr

0801a5b2 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 801a5b2:	b580      	push	{r7, lr}
 801a5b4:	b084      	sub	sp, #16
 801a5b6:	af00      	add	r7, sp, #0
 801a5b8:	60f8      	str	r0, [r7, #12]
 801a5ba:	60b9      	str	r1, [r7, #8]
 801a5bc:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 801a5be:	2228      	movs	r2, #40	; 0x28
 801a5c0:	2100      	movs	r1, #0
 801a5c2:	68f8      	ldr	r0, [r7, #12]
 801a5c4:	f003 f824 	bl	801d610 <memset>

    iter->descriptor = desc;
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	68ba      	ldr	r2, [r7, #8]
 801a5cc:	601a      	str	r2, [r3, #0]
    iter->message = message;
 801a5ce:	68fb      	ldr	r3, [r7, #12]
 801a5d0:	687a      	ldr	r2, [r7, #4]
 801a5d2:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 801a5d4:	68f8      	ldr	r0, [r7, #12]
 801a5d6:	f7ff fe21 	bl	801a21c <load_descriptor_values>
 801a5da:	4603      	mov	r3, r0
}
 801a5dc:	4618      	mov	r0, r3
 801a5de:	3710      	adds	r7, #16
 801a5e0:	46bd      	mov	sp, r7
 801a5e2:	bd80      	pop	{r7, pc}

0801a5e4 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 801a5e4:	b580      	push	{r7, lr}
 801a5e6:	b086      	sub	sp, #24
 801a5e8:	af00      	add	r7, sp, #0
 801a5ea:	6078      	str	r0, [r7, #4]
 801a5ec:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 801a5ee:	683b      	ldr	r3, [r7, #0]
 801a5f0:	681b      	ldr	r3, [r3, #0]
 801a5f2:	689b      	ldr	r3, [r3, #8]
 801a5f4:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 801a5f6:	693b      	ldr	r3, [r7, #16]
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	681b      	ldr	r3, [r3, #0]
 801a5fc:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 801a5fe:	68fb      	ldr	r3, [r7, #12]
 801a600:	0a1b      	lsrs	r3, r3, #8
 801a602:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a606:	2b80      	cmp	r3, #128	; 0x80
 801a608:	d109      	bne.n	801a61e <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 801a60a:	683b      	ldr	r3, [r7, #0]
 801a60c:	3304      	adds	r3, #4
 801a60e:	461a      	mov	r2, r3
 801a610:	6939      	ldr	r1, [r7, #16]
 801a612:	6878      	ldr	r0, [r7, #4]
 801a614:	f7ff ffcd 	bl	801a5b2 <pb_field_iter_begin>
 801a618:	4603      	mov	r3, r0
 801a61a:	75fb      	strb	r3, [r7, #23]
 801a61c:	e008      	b.n	801a630 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 801a61e:	683b      	ldr	r3, [r7, #0]
 801a620:	685b      	ldr	r3, [r3, #4]
 801a622:	461a      	mov	r2, r3
 801a624:	6939      	ldr	r1, [r7, #16]
 801a626:	6878      	ldr	r0, [r7, #4]
 801a628:	f7ff ffc3 	bl	801a5b2 <pb_field_iter_begin>
 801a62c:	4603      	mov	r3, r0
 801a62e:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 801a630:	683b      	ldr	r3, [r7, #0]
 801a632:	f103 020c 	add.w	r2, r3, #12
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	621a      	str	r2, [r3, #32]
    return status;
 801a63a:	7dfb      	ldrb	r3, [r7, #23]
}
 801a63c:	4618      	mov	r0, r3
 801a63e:	3718      	adds	r7, #24
 801a640:	46bd      	mov	sp, r7
 801a642:	bd80      	pop	{r7, pc}

0801a644 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 801a644:	b580      	push	{r7, lr}
 801a646:	b082      	sub	sp, #8
 801a648:	af00      	add	r7, sp, #0
 801a64a:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 801a64c:	6878      	ldr	r0, [r7, #4]
 801a64e:	f7ff ff4f 	bl	801a4f0 <advance_iterator>
    (void)load_descriptor_values(iter);
 801a652:	6878      	ldr	r0, [r7, #4]
 801a654:	f7ff fde2 	bl	801a21c <load_descriptor_values>
    return iter->index != 0;
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	891b      	ldrh	r3, [r3, #8]
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	bf14      	ite	ne
 801a660:	2301      	movne	r3, #1
 801a662:	2300      	moveq	r3, #0
 801a664:	b2db      	uxtb	r3, r3
}
 801a666:	4618      	mov	r0, r3
 801a668:	3708      	adds	r7, #8
 801a66a:	46bd      	mov	sp, r7
 801a66c:	bd80      	pop	{r7, pc}

0801a66e <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 801a66e:	b580      	push	{r7, lr}
 801a670:	b084      	sub	sp, #16
 801a672:	af00      	add	r7, sp, #0
 801a674:	6078      	str	r0, [r7, #4]
 801a676:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	8a1b      	ldrh	r3, [r3, #16]
 801a67c:	461a      	mov	r2, r3
 801a67e:	683b      	ldr	r3, [r7, #0]
 801a680:	4293      	cmp	r3, r2
 801a682:	d101      	bne.n	801a688 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 801a684:	2301      	movs	r3, #1
 801a686:	e044      	b.n	801a712 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	8a9b      	ldrh	r3, [r3, #20]
 801a68e:	461a      	mov	r2, r3
 801a690:	683b      	ldr	r3, [r7, #0]
 801a692:	4293      	cmp	r3, r2
 801a694:	d901      	bls.n	801a69a <pb_field_iter_find+0x2c>
    {
        return false;
 801a696:	2300      	movs	r3, #0
 801a698:	e03b      	b.n	801a712 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	891b      	ldrh	r3, [r3, #8]
 801a69e:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	8a1b      	ldrh	r3, [r3, #16]
 801a6a4:	461a      	mov	r2, r3
 801a6a6:	683b      	ldr	r3, [r7, #0]
 801a6a8:	4293      	cmp	r3, r2
 801a6aa:	d204      	bcs.n	801a6b6 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	681b      	ldr	r3, [r3, #0]
 801a6b0:	8a1a      	ldrh	r2, [r3, #16]
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 801a6b6:	6878      	ldr	r0, [r7, #4]
 801a6b8:	f7ff ff1a 	bl	801a4f0 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	681b      	ldr	r3, [r3, #0]
 801a6c0:	681a      	ldr	r2, [r3, #0]
 801a6c2:	687b      	ldr	r3, [r7, #4]
 801a6c4:	895b      	ldrh	r3, [r3, #10]
 801a6c6:	009b      	lsls	r3, r3, #2
 801a6c8:	4413      	add	r3, r2
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 801a6ce:	68bb      	ldr	r3, [r7, #8]
 801a6d0:	089a      	lsrs	r2, r3, #2
 801a6d2:	683b      	ldr	r3, [r7, #0]
 801a6d4:	4053      	eors	r3, r2
 801a6d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	d110      	bne.n	801a700 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 801a6de:	6878      	ldr	r0, [r7, #4]
 801a6e0:	f7ff fd9c 	bl	801a21c <load_descriptor_values>

                if (iter->tag == tag &&
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	8a1b      	ldrh	r3, [r3, #16]
 801a6e8:	461a      	mov	r2, r3
 801a6ea:	683b      	ldr	r3, [r7, #0]
 801a6ec:	4293      	cmp	r3, r2
 801a6ee:	d107      	bne.n	801a700 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	7d9b      	ldrb	r3, [r3, #22]
 801a6f4:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 801a6f8:	2b0a      	cmp	r3, #10
 801a6fa:	d001      	beq.n	801a700 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 801a6fc:	2301      	movs	r3, #1
 801a6fe:	e008      	b.n	801a712 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	891b      	ldrh	r3, [r3, #8]
 801a704:	89fa      	ldrh	r2, [r7, #14]
 801a706:	429a      	cmp	r2, r3
 801a708:	d1d5      	bne.n	801a6b6 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 801a70a:	6878      	ldr	r0, [r7, #4]
 801a70c:	f7ff fd86 	bl	801a21c <load_descriptor_values>
        return false;
 801a710:	2300      	movs	r3, #0
    }
}
 801a712:	4618      	mov	r0, r3
 801a714:	3710      	adds	r7, #16
 801a716:	46bd      	mov	sp, r7
 801a718:	bd80      	pop	{r7, pc}

0801a71a <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 801a71a:	b580      	push	{r7, lr}
 801a71c:	b084      	sub	sp, #16
 801a71e:	af00      	add	r7, sp, #0
 801a720:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	7d9b      	ldrb	r3, [r3, #22]
 801a726:	f003 030f 	and.w	r3, r3, #15
 801a72a:	2b0a      	cmp	r3, #10
 801a72c:	d101      	bne.n	801a732 <pb_field_iter_find_extension+0x18>
    {
        return true;
 801a72e:	2301      	movs	r3, #1
 801a730:	e022      	b.n	801a778 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	891b      	ldrh	r3, [r3, #8]
 801a736:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 801a738:	6878      	ldr	r0, [r7, #4]
 801a73a:	f7ff fed9 	bl	801a4f0 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	681a      	ldr	r2, [r3, #0]
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	895b      	ldrh	r3, [r3, #10]
 801a748:	009b      	lsls	r3, r3, #2
 801a74a:	4413      	add	r3, r2
 801a74c:	681b      	ldr	r3, [r3, #0]
 801a74e:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 801a750:	68bb      	ldr	r3, [r7, #8]
 801a752:	0a1b      	lsrs	r3, r3, #8
 801a754:	f003 030f 	and.w	r3, r3, #15
 801a758:	2b0a      	cmp	r3, #10
 801a75a:	d104      	bne.n	801a766 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 801a75c:	6878      	ldr	r0, [r7, #4]
 801a75e:	f7ff fd5d 	bl	801a21c <load_descriptor_values>
 801a762:	4603      	mov	r3, r0
 801a764:	e008      	b.n	801a778 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	891b      	ldrh	r3, [r3, #8]
 801a76a:	89fa      	ldrh	r2, [r7, #14]
 801a76c:	429a      	cmp	r2, r3
 801a76e:	d1e3      	bne.n	801a738 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 801a770:	6878      	ldr	r0, [r7, #4]
 801a772:	f7ff fd53 	bl	801a21c <load_descriptor_values>
        return false;
 801a776:	2300      	movs	r3, #0
    }
}
 801a778:	4618      	mov	r0, r3
 801a77a:	3710      	adds	r7, #16
 801a77c:	46bd      	mov	sp, r7
 801a77e:	bd80      	pop	{r7, pc}

0801a780 <pb_const_cast>:

static void *pb_const_cast(const void *p)
{
 801a780:	b480      	push	{r7}
 801a782:	b085      	sub	sp, #20
 801a784:	af00      	add	r7, sp, #0
 801a786:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	60fb      	str	r3, [r7, #12]
    return t.p1;
 801a78c:	68fb      	ldr	r3, [r7, #12]
}
 801a78e:	4618      	mov	r0, r3
 801a790:	3714      	adds	r7, #20
 801a792:	46bd      	mov	sp, r7
 801a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a798:	4770      	bx	lr

0801a79a <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 801a79a:	b580      	push	{r7, lr}
 801a79c:	b084      	sub	sp, #16
 801a79e:	af00      	add	r7, sp, #0
 801a7a0:	60f8      	str	r0, [r7, #12]
 801a7a2:	60b9      	str	r1, [r7, #8]
 801a7a4:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 801a7a6:	6878      	ldr	r0, [r7, #4]
 801a7a8:	f7ff ffea 	bl	801a780 <pb_const_cast>
 801a7ac:	4603      	mov	r3, r0
 801a7ae:	461a      	mov	r2, r3
 801a7b0:	68b9      	ldr	r1, [r7, #8]
 801a7b2:	68f8      	ldr	r0, [r7, #12]
 801a7b4:	f7ff fefd 	bl	801a5b2 <pb_field_iter_begin>
 801a7b8:	4603      	mov	r3, r0
}
 801a7ba:	4618      	mov	r0, r3
 801a7bc:	3710      	adds	r7, #16
 801a7be:	46bd      	mov	sp, r7
 801a7c0:	bd80      	pop	{r7, pc}

0801a7c2 <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 801a7c2:	b580      	push	{r7, lr}
 801a7c4:	b082      	sub	sp, #8
 801a7c6:	af00      	add	r7, sp, #0
 801a7c8:	6078      	str	r0, [r7, #4]
 801a7ca:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 801a7cc:	6838      	ldr	r0, [r7, #0]
 801a7ce:	f7ff ffd7 	bl	801a780 <pb_const_cast>
 801a7d2:	4603      	mov	r3, r0
 801a7d4:	4619      	mov	r1, r3
 801a7d6:	6878      	ldr	r0, [r7, #4]
 801a7d8:	f7ff ff04 	bl	801a5e4 <pb_field_iter_begin_extension>
 801a7dc:	4603      	mov	r3, r0
}
 801a7de:	4618      	mov	r0, r3
 801a7e0:	3708      	adds	r7, #8
 801a7e2:	46bd      	mov	sp, r7
 801a7e4:	bd80      	pop	{r7, pc}

0801a7e6 <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 801a7e6:	b580      	push	{r7, lr}
 801a7e8:	b086      	sub	sp, #24
 801a7ea:	af00      	add	r7, sp, #0
 801a7ec:	60f8      	str	r0, [r7, #12]
 801a7ee:	60b9      	str	r1, [r7, #8]
 801a7f0:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	8a5b      	ldrh	r3, [r3, #18]
 801a7f6:	2b08      	cmp	r3, #8
 801a7f8:	d125      	bne.n	801a846 <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	69db      	ldr	r3, [r3, #28]
 801a7fe:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 801a800:	697b      	ldr	r3, [r7, #20]
 801a802:	2b00      	cmp	r3, #0
 801a804:	d01f      	beq.n	801a846 <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 801a806:	68fb      	ldr	r3, [r7, #12]
 801a808:	2b00      	cmp	r3, #0
 801a80a:	d00c      	beq.n	801a826 <pb_default_field_callback+0x40>
 801a80c:	697b      	ldr	r3, [r7, #20]
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	2b00      	cmp	r3, #0
 801a812:	d008      	beq.n	801a826 <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 801a814:	697b      	ldr	r3, [r7, #20]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	697a      	ldr	r2, [r7, #20]
 801a81a:	3204      	adds	r2, #4
 801a81c:	6879      	ldr	r1, [r7, #4]
 801a81e:	68f8      	ldr	r0, [r7, #12]
 801a820:	4798      	blx	r3
 801a822:	4603      	mov	r3, r0
 801a824:	e010      	b.n	801a848 <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 801a826:	68bb      	ldr	r3, [r7, #8]
 801a828:	2b00      	cmp	r3, #0
 801a82a:	d00c      	beq.n	801a846 <pb_default_field_callback+0x60>
 801a82c:	697b      	ldr	r3, [r7, #20]
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	2b00      	cmp	r3, #0
 801a832:	d008      	beq.n	801a846 <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 801a834:	697b      	ldr	r3, [r7, #20]
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	697a      	ldr	r2, [r7, #20]
 801a83a:	3204      	adds	r2, #4
 801a83c:	6879      	ldr	r1, [r7, #4]
 801a83e:	68b8      	ldr	r0, [r7, #8]
 801a840:	4798      	blx	r3
 801a842:	4603      	mov	r3, r0
 801a844:	e000      	b.n	801a848 <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 801a846:	2301      	movs	r3, #1

}
 801a848:	4618      	mov	r0, r3
 801a84a:	3718      	adds	r7, #24
 801a84c:	46bd      	mov	sp, r7
 801a84e:	bd80      	pop	{r7, pc}

0801a850 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 801a850:	b580      	push	{r7, lr}
 801a852:	b086      	sub	sp, #24
 801a854:	af00      	add	r7, sp, #0
 801a856:	60f8      	str	r0, [r7, #12]
 801a858:	60b9      	str	r1, [r7, #8]
 801a85a:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 801a85c:	68fb      	ldr	r3, [r7, #12]
 801a85e:	685b      	ldr	r3, [r3, #4]
 801a860:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 801a862:	68fb      	ldr	r3, [r7, #12]
 801a864:	685a      	ldr	r2, [r3, #4]
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	441a      	add	r2, r3
 801a86a:	68fb      	ldr	r3, [r7, #12]
 801a86c:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 801a86e:	68bb      	ldr	r3, [r7, #8]
 801a870:	2b00      	cmp	r3, #0
 801a872:	d004      	beq.n	801a87e <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 801a874:	687a      	ldr	r2, [r7, #4]
 801a876:	6979      	ldr	r1, [r7, #20]
 801a878:	68b8      	ldr	r0, [r7, #8]
 801a87a:	f002 febb 	bl	801d5f4 <memcpy>
    }
    
    return true;
 801a87e:	2301      	movs	r3, #1
}
 801a880:	4618      	mov	r0, r3
 801a882:	3718      	adds	r7, #24
 801a884:	46bd      	mov	sp, r7
 801a886:	bd80      	pop	{r7, pc}

0801a888 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 801a888:	b580      	push	{r7, lr}
 801a88a:	b088      	sub	sp, #32
 801a88c:	af00      	add	r7, sp, #0
 801a88e:	60f8      	str	r0, [r7, #12]
 801a890:	60b9      	str	r1, [r7, #8]
 801a892:	607a      	str	r2, [r7, #4]
    if (count == 0)
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	2b00      	cmp	r3, #0
 801a898:	d101      	bne.n	801a89e <pb_read+0x16>
        return true;
 801a89a:	2301      	movs	r3, #1
 801a89c:	e05f      	b.n	801a95e <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 801a89e:	68bb      	ldr	r3, [r7, #8]
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d123      	bne.n	801a8ec <pb_read+0x64>
 801a8a4:	68fb      	ldr	r3, [r7, #12]
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	4a2f      	ldr	r2, [pc, #188]	; (801a968 <pb_read+0xe0>)
 801a8aa:	4293      	cmp	r3, r2
 801a8ac:	d01e      	beq.n	801a8ec <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 801a8ae:	e011      	b.n	801a8d4 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 801a8b0:	f107 0310 	add.w	r3, r7, #16
 801a8b4:	2210      	movs	r2, #16
 801a8b6:	4619      	mov	r1, r3
 801a8b8:	68f8      	ldr	r0, [r7, #12]
 801a8ba:	f7ff ffe5 	bl	801a888 <pb_read>
 801a8be:	4603      	mov	r3, r0
 801a8c0:	f083 0301 	eor.w	r3, r3, #1
 801a8c4:	b2db      	uxtb	r3, r3
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d001      	beq.n	801a8ce <pb_read+0x46>
				return false;
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	e047      	b.n	801a95e <pb_read+0xd6>
			
			count -= 16;
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	3b10      	subs	r3, #16
 801a8d2:	607b      	str	r3, [r7, #4]
		while (count > 16)
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	2b10      	cmp	r3, #16
 801a8d8:	d8ea      	bhi.n	801a8b0 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 801a8da:	f107 0310 	add.w	r3, r7, #16
 801a8de:	687a      	ldr	r2, [r7, #4]
 801a8e0:	4619      	mov	r1, r3
 801a8e2:	68f8      	ldr	r0, [r7, #12]
 801a8e4:	f7ff ffd0 	bl	801a888 <pb_read>
 801a8e8:	4603      	mov	r3, r0
 801a8ea:	e038      	b.n	801a95e <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 801a8ec:	68fb      	ldr	r3, [r7, #12]
 801a8ee:	689b      	ldr	r3, [r3, #8]
 801a8f0:	687a      	ldr	r2, [r7, #4]
 801a8f2:	429a      	cmp	r2, r3
 801a8f4:	d90b      	bls.n	801a90e <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 801a8f6:	68fb      	ldr	r3, [r7, #12]
 801a8f8:	68db      	ldr	r3, [r3, #12]
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d002      	beq.n	801a904 <pb_read+0x7c>
 801a8fe:	68fb      	ldr	r3, [r7, #12]
 801a900:	68db      	ldr	r3, [r3, #12]
 801a902:	e000      	b.n	801a906 <pb_read+0x7e>
 801a904:	4b19      	ldr	r3, [pc, #100]	; (801a96c <pb_read+0xe4>)
 801a906:	68fa      	ldr	r2, [r7, #12]
 801a908:	60d3      	str	r3, [r2, #12]
 801a90a:	2300      	movs	r3, #0
 801a90c:	e027      	b.n	801a95e <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 801a90e:	68fb      	ldr	r3, [r7, #12]
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	687a      	ldr	r2, [r7, #4]
 801a914:	68b9      	ldr	r1, [r7, #8]
 801a916:	68f8      	ldr	r0, [r7, #12]
 801a918:	4798      	blx	r3
 801a91a:	4603      	mov	r3, r0
 801a91c:	f083 0301 	eor.w	r3, r3, #1
 801a920:	b2db      	uxtb	r3, r3
 801a922:	2b00      	cmp	r3, #0
 801a924:	d00b      	beq.n	801a93e <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 801a926:	68fb      	ldr	r3, [r7, #12]
 801a928:	68db      	ldr	r3, [r3, #12]
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	d002      	beq.n	801a934 <pb_read+0xac>
 801a92e:	68fb      	ldr	r3, [r7, #12]
 801a930:	68db      	ldr	r3, [r3, #12]
 801a932:	e000      	b.n	801a936 <pb_read+0xae>
 801a934:	4b0e      	ldr	r3, [pc, #56]	; (801a970 <pb_read+0xe8>)
 801a936:	68fa      	ldr	r2, [r7, #12]
 801a938:	60d3      	str	r3, [r2, #12]
 801a93a:	2300      	movs	r3, #0
 801a93c:	e00f      	b.n	801a95e <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	689b      	ldr	r3, [r3, #8]
 801a942:	687a      	ldr	r2, [r7, #4]
 801a944:	429a      	cmp	r2, r3
 801a946:	d903      	bls.n	801a950 <pb_read+0xc8>
        stream->bytes_left = 0;
 801a948:	68fb      	ldr	r3, [r7, #12]
 801a94a:	2200      	movs	r2, #0
 801a94c:	609a      	str	r2, [r3, #8]
 801a94e:	e005      	b.n	801a95c <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 801a950:	68fb      	ldr	r3, [r7, #12]
 801a952:	689a      	ldr	r2, [r3, #8]
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	1ad2      	subs	r2, r2, r3
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	609a      	str	r2, [r3, #8]

    return true;
 801a95c:	2301      	movs	r3, #1
}
 801a95e:	4618      	mov	r0, r3
 801a960:	3720      	adds	r7, #32
 801a962:	46bd      	mov	sp, r7
 801a964:	bd80      	pop	{r7, pc}
 801a966:	bf00      	nop
 801a968:	0801a851 	.word	0x0801a851
 801a96c:	08021e40 	.word	0x08021e40
 801a970:	08021e50 	.word	0x08021e50

0801a974 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 801a974:	b580      	push	{r7, lr}
 801a976:	b082      	sub	sp, #8
 801a978:	af00      	add	r7, sp, #0
 801a97a:	6078      	str	r0, [r7, #4]
 801a97c:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	689b      	ldr	r3, [r3, #8]
 801a982:	2b00      	cmp	r3, #0
 801a984:	d10b      	bne.n	801a99e <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	68db      	ldr	r3, [r3, #12]
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d002      	beq.n	801a994 <pb_readbyte+0x20>
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	68db      	ldr	r3, [r3, #12]
 801a992:	e000      	b.n	801a996 <pb_readbyte+0x22>
 801a994:	4b13      	ldr	r3, [pc, #76]	; (801a9e4 <pb_readbyte+0x70>)
 801a996:	687a      	ldr	r2, [r7, #4]
 801a998:	60d3      	str	r3, [r2, #12]
 801a99a:	2300      	movs	r3, #0
 801a99c:	e01d      	b.n	801a9da <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	681b      	ldr	r3, [r3, #0]
 801a9a2:	2201      	movs	r2, #1
 801a9a4:	6839      	ldr	r1, [r7, #0]
 801a9a6:	6878      	ldr	r0, [r7, #4]
 801a9a8:	4798      	blx	r3
 801a9aa:	4603      	mov	r3, r0
 801a9ac:	f083 0301 	eor.w	r3, r3, #1
 801a9b0:	b2db      	uxtb	r3, r3
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d00b      	beq.n	801a9ce <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	68db      	ldr	r3, [r3, #12]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d002      	beq.n	801a9c4 <pb_readbyte+0x50>
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	68db      	ldr	r3, [r3, #12]
 801a9c2:	e000      	b.n	801a9c6 <pb_readbyte+0x52>
 801a9c4:	4b08      	ldr	r3, [pc, #32]	; (801a9e8 <pb_readbyte+0x74>)
 801a9c6:	687a      	ldr	r2, [r7, #4]
 801a9c8:	60d3      	str	r3, [r2, #12]
 801a9ca:	2300      	movs	r3, #0
 801a9cc:	e005      	b.n	801a9da <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	689b      	ldr	r3, [r3, #8]
 801a9d2:	1e5a      	subs	r2, r3, #1
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	609a      	str	r2, [r3, #8]
    
    return true;    
 801a9d8:	2301      	movs	r3, #1
}
 801a9da:	4618      	mov	r0, r3
 801a9dc:	3708      	adds	r7, #8
 801a9de:	46bd      	mov	sp, r7
 801a9e0:	bd80      	pop	{r7, pc}
 801a9e2:	bf00      	nop
 801a9e4:	08021e40 	.word	0x08021e40
 801a9e8:	08021e50 	.word	0x08021e50

0801a9ec <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 801a9ec:	b490      	push	{r4, r7}
 801a9ee:	b08a      	sub	sp, #40	; 0x28
 801a9f0:	af00      	add	r7, sp, #0
 801a9f2:	60f8      	str	r0, [r7, #12]
 801a9f4:	60b9      	str	r1, [r7, #8]
 801a9f6:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 801a9f8:	4b0a      	ldr	r3, [pc, #40]	; (801aa24 <pb_istream_from_buffer+0x38>)
 801a9fa:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 801a9fc:	68bb      	ldr	r3, [r7, #8]
 801a9fe:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 801aa00:	697b      	ldr	r3, [r7, #20]
 801aa02:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 801aa08:	2300      	movs	r3, #0
 801aa0a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	461c      	mov	r4, r3
 801aa10:	f107 0318 	add.w	r3, r7, #24
 801aa14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801aa16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801aa1a:	68f8      	ldr	r0, [r7, #12]
 801aa1c:	3728      	adds	r7, #40	; 0x28
 801aa1e:	46bd      	mov	sp, r7
 801aa20:	bc90      	pop	{r4, r7}
 801aa22:	4770      	bx	lr
 801aa24:	0801a851 	.word	0x0801a851

0801aa28 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 801aa28:	b580      	push	{r7, lr}
 801aa2a:	b088      	sub	sp, #32
 801aa2c:	af00      	add	r7, sp, #0
 801aa2e:	60f8      	str	r0, [r7, #12]
 801aa30:	60b9      	str	r1, [r7, #8]
 801aa32:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 801aa34:	f107 0315 	add.w	r3, r7, #21
 801aa38:	4619      	mov	r1, r3
 801aa3a:	68f8      	ldr	r0, [r7, #12]
 801aa3c:	f7ff ff9a 	bl	801a974 <pb_readbyte>
 801aa40:	4603      	mov	r3, r0
 801aa42:	f083 0301 	eor.w	r3, r3, #1
 801aa46:	b2db      	uxtb	r3, r3
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	d00b      	beq.n	801aa64 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 801aa4c:	68fb      	ldr	r3, [r7, #12]
 801aa4e:	689b      	ldr	r3, [r3, #8]
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d105      	bne.n	801aa60 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	d002      	beq.n	801aa60 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	2201      	movs	r2, #1
 801aa5e:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 801aa60:	2300      	movs	r3, #0
 801aa62:	e084      	b.n	801ab6e <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 801aa64:	7d7b      	ldrb	r3, [r7, #21]
 801aa66:	b25b      	sxtb	r3, r3
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	db02      	blt.n	801aa72 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 801aa6c:	7d7b      	ldrb	r3, [r7, #21]
 801aa6e:	61fb      	str	r3, [r7, #28]
 801aa70:	e079      	b.n	801ab66 <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 801aa72:	2307      	movs	r3, #7
 801aa74:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 801aa76:	7d7b      	ldrb	r3, [r7, #21]
 801aa78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801aa7c:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 801aa7e:	f107 0315 	add.w	r3, r7, #21
 801aa82:	4619      	mov	r1, r3
 801aa84:	68f8      	ldr	r0, [r7, #12]
 801aa86:	f7ff ff75 	bl	801a974 <pb_readbyte>
 801aa8a:	4603      	mov	r3, r0
 801aa8c:	f083 0301 	eor.w	r3, r3, #1
 801aa90:	b2db      	uxtb	r3, r3
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d001      	beq.n	801aa9a <pb_decode_varint32_eof+0x72>
                return false;
 801aa96:	2300      	movs	r3, #0
 801aa98:	e069      	b.n	801ab6e <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 801aa9a:	69bb      	ldr	r3, [r7, #24]
 801aa9c:	2b1f      	cmp	r3, #31
 801aa9e:	d92f      	bls.n	801ab00 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 801aaa0:	69bb      	ldr	r3, [r7, #24]
 801aaa2:	2b3e      	cmp	r3, #62	; 0x3e
 801aaa4:	d801      	bhi.n	801aaaa <pb_decode_varint32_eof+0x82>
 801aaa6:	23ff      	movs	r3, #255	; 0xff
 801aaa8:	e000      	b.n	801aaac <pb_decode_varint32_eof+0x84>
 801aaaa:	2301      	movs	r3, #1
 801aaac:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 801aaae:	7d7b      	ldrb	r3, [r7, #21]
 801aab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	d006      	beq.n	801aac6 <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 801aab8:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	da05      	bge.n	801aaca <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 801aabe:	7d7b      	ldrb	r3, [r7, #21]
 801aac0:	7dfa      	ldrb	r2, [r7, #23]
 801aac2:	429a      	cmp	r2, r3
 801aac4:	d101      	bne.n	801aaca <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 801aac6:	2301      	movs	r3, #1
 801aac8:	e000      	b.n	801aacc <pb_decode_varint32_eof+0xa4>
 801aaca:	2300      	movs	r3, #0
 801aacc:	75bb      	strb	r3, [r7, #22]
 801aace:	7dbb      	ldrb	r3, [r7, #22]
 801aad0:	f003 0301 	and.w	r3, r3, #1
 801aad4:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 801aad6:	69bb      	ldr	r3, [r7, #24]
 801aad8:	2b3f      	cmp	r3, #63	; 0x3f
 801aada:	d805      	bhi.n	801aae8 <pb_decode_varint32_eof+0xc0>
 801aadc:	7dbb      	ldrb	r3, [r7, #22]
 801aade:	f083 0301 	eor.w	r3, r3, #1
 801aae2:	b2db      	uxtb	r3, r3
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	d037      	beq.n	801ab58 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	68db      	ldr	r3, [r3, #12]
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d002      	beq.n	801aaf6 <pb_decode_varint32_eof+0xce>
 801aaf0:	68fb      	ldr	r3, [r7, #12]
 801aaf2:	68db      	ldr	r3, [r3, #12]
 801aaf4:	e000      	b.n	801aaf8 <pb_decode_varint32_eof+0xd0>
 801aaf6:	4b20      	ldr	r3, [pc, #128]	; (801ab78 <pb_decode_varint32_eof+0x150>)
 801aaf8:	68fa      	ldr	r2, [r7, #12]
 801aafa:	60d3      	str	r3, [r2, #12]
 801aafc:	2300      	movs	r3, #0
 801aafe:	e036      	b.n	801ab6e <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 801ab00:	69bb      	ldr	r3, [r7, #24]
 801ab02:	2b1c      	cmp	r3, #28
 801ab04:	d11f      	bne.n	801ab46 <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 801ab06:	7d7b      	ldrb	r3, [r7, #21]
 801ab08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	d010      	beq.n	801ab32 <pb_decode_varint32_eof+0x10a>
 801ab10:	7d7b      	ldrb	r3, [r7, #21]
 801ab12:	f003 0378 	and.w	r3, r3, #120	; 0x78
 801ab16:	2b78      	cmp	r3, #120	; 0x78
 801ab18:	d00b      	beq.n	801ab32 <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 801ab1a:	68fb      	ldr	r3, [r7, #12]
 801ab1c:	68db      	ldr	r3, [r3, #12]
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d002      	beq.n	801ab28 <pb_decode_varint32_eof+0x100>
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	68db      	ldr	r3, [r3, #12]
 801ab26:	e000      	b.n	801ab2a <pb_decode_varint32_eof+0x102>
 801ab28:	4b13      	ldr	r3, [pc, #76]	; (801ab78 <pb_decode_varint32_eof+0x150>)
 801ab2a:	68fa      	ldr	r2, [r7, #12]
 801ab2c:	60d3      	str	r3, [r2, #12]
 801ab2e:	2300      	movs	r3, #0
 801ab30:	e01d      	b.n	801ab6e <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 801ab32:	7d7b      	ldrb	r3, [r7, #21]
 801ab34:	f003 020f 	and.w	r2, r3, #15
 801ab38:	69bb      	ldr	r3, [r7, #24]
 801ab3a:	fa02 f303 	lsl.w	r3, r2, r3
 801ab3e:	69fa      	ldr	r2, [r7, #28]
 801ab40:	4313      	orrs	r3, r2
 801ab42:	61fb      	str	r3, [r7, #28]
 801ab44:	e008      	b.n	801ab58 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 801ab46:	7d7b      	ldrb	r3, [r7, #21]
 801ab48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ab4c:	69bb      	ldr	r3, [r7, #24]
 801ab4e:	fa02 f303 	lsl.w	r3, r2, r3
 801ab52:	69fa      	ldr	r2, [r7, #28]
 801ab54:	4313      	orrs	r3, r2
 801ab56:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 801ab58:	69bb      	ldr	r3, [r7, #24]
 801ab5a:	3307      	adds	r3, #7
 801ab5c:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 801ab5e:	7d7b      	ldrb	r3, [r7, #21]
 801ab60:	b25b      	sxtb	r3, r3
 801ab62:	2b00      	cmp	r3, #0
 801ab64:	db8b      	blt.n	801aa7e <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 801ab66:	68bb      	ldr	r3, [r7, #8]
 801ab68:	69fa      	ldr	r2, [r7, #28]
 801ab6a:	601a      	str	r2, [r3, #0]
   return true;
 801ab6c:	2301      	movs	r3, #1
}
 801ab6e:	4618      	mov	r0, r3
 801ab70:	3720      	adds	r7, #32
 801ab72:	46bd      	mov	sp, r7
 801ab74:	bd80      	pop	{r7, pc}
 801ab76:	bf00      	nop
 801ab78:	08021e5c 	.word	0x08021e5c

0801ab7c <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 801ab7c:	b580      	push	{r7, lr}
 801ab7e:	b082      	sub	sp, #8
 801ab80:	af00      	add	r7, sp, #0
 801ab82:	6078      	str	r0, [r7, #4]
 801ab84:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 801ab86:	2200      	movs	r2, #0
 801ab88:	6839      	ldr	r1, [r7, #0]
 801ab8a:	6878      	ldr	r0, [r7, #4]
 801ab8c:	f7ff ff4c 	bl	801aa28 <pb_decode_varint32_eof>
 801ab90:	4603      	mov	r3, r0
}
 801ab92:	4618      	mov	r0, r3
 801ab94:	3708      	adds	r7, #8
 801ab96:	46bd      	mov	sp, r7
 801ab98:	bd80      	pop	{r7, pc}
	...

0801ab9c <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 801ab9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801aba0:	b08a      	sub	sp, #40	; 0x28
 801aba2:	af00      	add	r7, sp, #0
 801aba4:	60f8      	str	r0, [r7, #12]
 801aba6:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 801aba8:	2300      	movs	r3, #0
 801abaa:	627b      	str	r3, [r7, #36]	; 0x24
    uint64_t result = 0;
 801abac:	f04f 0200 	mov.w	r2, #0
 801abb0:	f04f 0300 	mov.w	r3, #0
 801abb4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 801abb8:	f107 0317 	add.w	r3, r7, #23
 801abbc:	4619      	mov	r1, r3
 801abbe:	68f8      	ldr	r0, [r7, #12]
 801abc0:	f7ff fed8 	bl	801a974 <pb_readbyte>
 801abc4:	4603      	mov	r3, r0
 801abc6:	f083 0301 	eor.w	r3, r3, #1
 801abca:	b2db      	uxtb	r3, r3
 801abcc:	2b00      	cmp	r3, #0
 801abce:	d001      	beq.n	801abd4 <pb_decode_varint+0x38>
            return false;
 801abd0:	2300      	movs	r3, #0
 801abd2:	e041      	b.n	801ac58 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 801abd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abd6:	2b3e      	cmp	r3, #62	; 0x3e
 801abd8:	d910      	bls.n	801abfc <pb_decode_varint+0x60>
 801abda:	7dfb      	ldrb	r3, [r7, #23]
 801abdc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d00b      	beq.n	801abfc <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	68db      	ldr	r3, [r3, #12]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d002      	beq.n	801abf2 <pb_decode_varint+0x56>
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	68db      	ldr	r3, [r3, #12]
 801abf0:	e000      	b.n	801abf4 <pb_decode_varint+0x58>
 801abf2:	4b1c      	ldr	r3, [pc, #112]	; (801ac64 <pb_decode_varint+0xc8>)
 801abf4:	68fa      	ldr	r2, [r7, #12]
 801abf6:	60d3      	str	r3, [r2, #12]
 801abf8:	2300      	movs	r3, #0
 801abfa:	e02d      	b.n	801ac58 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 801abfc:	7dfb      	ldrb	r3, [r7, #23]
 801abfe:	b2db      	uxtb	r3, r3
 801ac00:	2200      	movs	r2, #0
 801ac02:	603b      	str	r3, [r7, #0]
 801ac04:	607a      	str	r2, [r7, #4]
 801ac06:	683b      	ldr	r3, [r7, #0]
 801ac08:	f003 087f 	and.w	r8, r3, #127	; 0x7f
 801ac0c:	f04f 0900 	mov.w	r9, #0
 801ac10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac12:	f1a3 0120 	sub.w	r1, r3, #32
 801ac16:	f1c3 0220 	rsb	r2, r3, #32
 801ac1a:	fa09 f503 	lsl.w	r5, r9, r3
 801ac1e:	fa08 f101 	lsl.w	r1, r8, r1
 801ac22:	430d      	orrs	r5, r1
 801ac24:	fa28 f202 	lsr.w	r2, r8, r2
 801ac28:	4315      	orrs	r5, r2
 801ac2a:	fa08 f403 	lsl.w	r4, r8, r3
 801ac2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ac32:	ea42 0a04 	orr.w	sl, r2, r4
 801ac36:	ea43 0b05 	orr.w	fp, r3, r5
 801ac3a:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 801ac3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac40:	3307      	adds	r3, #7
 801ac42:	627b      	str	r3, [r7, #36]	; 0x24
    } while (byte & 0x80);
 801ac44:	7dfb      	ldrb	r3, [r7, #23]
 801ac46:	b25b      	sxtb	r3, r3
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	dbb5      	blt.n	801abb8 <pb_decode_varint+0x1c>
    
    *dest = result;
 801ac4c:	68b9      	ldr	r1, [r7, #8]
 801ac4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ac52:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 801ac56:	2301      	movs	r3, #1
}
 801ac58:	4618      	mov	r0, r3
 801ac5a:	3728      	adds	r7, #40	; 0x28
 801ac5c:	46bd      	mov	sp, r7
 801ac5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801ac62:	bf00      	nop
 801ac64:	08021e5c 	.word	0x08021e5c

0801ac68 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 801ac68:	b580      	push	{r7, lr}
 801ac6a:	b084      	sub	sp, #16
 801ac6c:	af00      	add	r7, sp, #0
 801ac6e:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 801ac70:	f107 030f 	add.w	r3, r7, #15
 801ac74:	2201      	movs	r2, #1
 801ac76:	4619      	mov	r1, r3
 801ac78:	6878      	ldr	r0, [r7, #4]
 801ac7a:	f7ff fe05 	bl	801a888 <pb_read>
 801ac7e:	4603      	mov	r3, r0
 801ac80:	f083 0301 	eor.w	r3, r3, #1
 801ac84:	b2db      	uxtb	r3, r3
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d001      	beq.n	801ac8e <pb_skip_varint+0x26>
            return false;
 801ac8a:	2300      	movs	r3, #0
 801ac8c:	e004      	b.n	801ac98 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 801ac8e:	7bfb      	ldrb	r3, [r7, #15]
 801ac90:	b25b      	sxtb	r3, r3
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	dbec      	blt.n	801ac70 <pb_skip_varint+0x8>
    return true;
 801ac96:	2301      	movs	r3, #1
}
 801ac98:	4618      	mov	r0, r3
 801ac9a:	3710      	adds	r7, #16
 801ac9c:	46bd      	mov	sp, r7
 801ac9e:	bd80      	pop	{r7, pc}

0801aca0 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 801aca0:	b580      	push	{r7, lr}
 801aca2:	b084      	sub	sp, #16
 801aca4:	af00      	add	r7, sp, #0
 801aca6:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 801aca8:	f107 030c 	add.w	r3, r7, #12
 801acac:	4619      	mov	r1, r3
 801acae:	6878      	ldr	r0, [r7, #4]
 801acb0:	f7ff ff64 	bl	801ab7c <pb_decode_varint32>
 801acb4:	4603      	mov	r3, r0
 801acb6:	f083 0301 	eor.w	r3, r3, #1
 801acba:	b2db      	uxtb	r3, r3
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d001      	beq.n	801acc4 <pb_skip_string+0x24>
        return false;
 801acc0:	2300      	movs	r3, #0
 801acc2:	e006      	b.n	801acd2 <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	461a      	mov	r2, r3
 801acc8:	2100      	movs	r1, #0
 801acca:	6878      	ldr	r0, [r7, #4]
 801accc:	f7ff fddc 	bl	801a888 <pb_read>
 801acd0:	4603      	mov	r3, r0
}
 801acd2:	4618      	mov	r0, r3
 801acd4:	3710      	adds	r7, #16
 801acd6:	46bd      	mov	sp, r7
 801acd8:	bd80      	pop	{r7, pc}

0801acda <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 801acda:	b580      	push	{r7, lr}
 801acdc:	b086      	sub	sp, #24
 801acde:	af00      	add	r7, sp, #0
 801ace0:	60f8      	str	r0, [r7, #12]
 801ace2:	60b9      	str	r1, [r7, #8]
 801ace4:	607a      	str	r2, [r7, #4]
 801ace6:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 801ace8:	683b      	ldr	r3, [r7, #0]
 801acea:	2200      	movs	r2, #0
 801acec:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 801acee:	68bb      	ldr	r3, [r7, #8]
 801acf0:	2200      	movs	r2, #0
 801acf2:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	2200      	movs	r2, #0
 801acf8:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 801acfa:	f107 0314 	add.w	r3, r7, #20
 801acfe:	683a      	ldr	r2, [r7, #0]
 801ad00:	4619      	mov	r1, r3
 801ad02:	68f8      	ldr	r0, [r7, #12]
 801ad04:	f7ff fe90 	bl	801aa28 <pb_decode_varint32_eof>
 801ad08:	4603      	mov	r3, r0
 801ad0a:	f083 0301 	eor.w	r3, r3, #1
 801ad0e:	b2db      	uxtb	r3, r3
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d001      	beq.n	801ad18 <pb_decode_tag+0x3e>
    {
        return false;
 801ad14:	2300      	movs	r3, #0
 801ad16:	e00b      	b.n	801ad30 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 801ad18:	697b      	ldr	r3, [r7, #20]
 801ad1a:	08da      	lsrs	r2, r3, #3
 801ad1c:	687b      	ldr	r3, [r7, #4]
 801ad1e:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 801ad20:	697b      	ldr	r3, [r7, #20]
 801ad22:	b2db      	uxtb	r3, r3
 801ad24:	f003 0307 	and.w	r3, r3, #7
 801ad28:	b2da      	uxtb	r2, r3
 801ad2a:	68bb      	ldr	r3, [r7, #8]
 801ad2c:	701a      	strb	r2, [r3, #0]
    return true;
 801ad2e:	2301      	movs	r3, #1
}
 801ad30:	4618      	mov	r0, r3
 801ad32:	3718      	adds	r7, #24
 801ad34:	46bd      	mov	sp, r7
 801ad36:	bd80      	pop	{r7, pc}

0801ad38 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 801ad38:	b580      	push	{r7, lr}
 801ad3a:	b082      	sub	sp, #8
 801ad3c:	af00      	add	r7, sp, #0
 801ad3e:	6078      	str	r0, [r7, #4]
 801ad40:	460b      	mov	r3, r1
 801ad42:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 801ad44:	78fb      	ldrb	r3, [r7, #3]
 801ad46:	2b05      	cmp	r3, #5
 801ad48:	d826      	bhi.n	801ad98 <pb_skip_field+0x60>
 801ad4a:	a201      	add	r2, pc, #4	; (adr r2, 801ad50 <pb_skip_field+0x18>)
 801ad4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad50:	0801ad69 	.word	0x0801ad69
 801ad54:	0801ad73 	.word	0x0801ad73
 801ad58:	0801ad81 	.word	0x0801ad81
 801ad5c:	0801ad99 	.word	0x0801ad99
 801ad60:	0801ad99 	.word	0x0801ad99
 801ad64:	0801ad8b 	.word	0x0801ad8b
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 801ad68:	6878      	ldr	r0, [r7, #4]
 801ad6a:	f7ff ff7d 	bl	801ac68 <pb_skip_varint>
 801ad6e:	4603      	mov	r3, r0
 801ad70:	e01d      	b.n	801adae <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 801ad72:	2208      	movs	r2, #8
 801ad74:	2100      	movs	r1, #0
 801ad76:	6878      	ldr	r0, [r7, #4]
 801ad78:	f7ff fd86 	bl	801a888 <pb_read>
 801ad7c:	4603      	mov	r3, r0
 801ad7e:	e016      	b.n	801adae <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 801ad80:	6878      	ldr	r0, [r7, #4]
 801ad82:	f7ff ff8d 	bl	801aca0 <pb_skip_string>
 801ad86:	4603      	mov	r3, r0
 801ad88:	e011      	b.n	801adae <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 801ad8a:	2204      	movs	r2, #4
 801ad8c:	2100      	movs	r1, #0
 801ad8e:	6878      	ldr	r0, [r7, #4]
 801ad90:	f7ff fd7a 	bl	801a888 <pb_read>
 801ad94:	4603      	mov	r3, r0
 801ad96:	e00a      	b.n	801adae <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	68db      	ldr	r3, [r3, #12]
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	d002      	beq.n	801ada6 <pb_skip_field+0x6e>
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	68db      	ldr	r3, [r3, #12]
 801ada4:	e000      	b.n	801ada8 <pb_skip_field+0x70>
 801ada6:	4b04      	ldr	r3, [pc, #16]	; (801adb8 <pb_skip_field+0x80>)
 801ada8:	687a      	ldr	r2, [r7, #4]
 801adaa:	60d3      	str	r3, [r2, #12]
 801adac:	2300      	movs	r3, #0
    }
}
 801adae:	4618      	mov	r0, r3
 801adb0:	3708      	adds	r7, #8
 801adb2:	46bd      	mov	sp, r7
 801adb4:	bd80      	pop	{r7, pc}
 801adb6:	bf00      	nop
 801adb8:	08021e6c 	.word	0x08021e6c

0801adbc <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 801adbc:	b580      	push	{r7, lr}
 801adbe:	b086      	sub	sp, #24
 801adc0:	af00      	add	r7, sp, #0
 801adc2:	60f8      	str	r0, [r7, #12]
 801adc4:	607a      	str	r2, [r7, #4]
 801adc6:	603b      	str	r3, [r7, #0]
 801adc8:	460b      	mov	r3, r1
 801adca:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 801adcc:	683b      	ldr	r3, [r7, #0]
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 801add2:	7afb      	ldrb	r3, [r7, #11]
 801add4:	2b05      	cmp	r3, #5
 801add6:	d03f      	beq.n	801ae58 <read_raw_value+0x9c>
 801add8:	2b05      	cmp	r3, #5
 801adda:	dc47      	bgt.n	801ae6c <read_raw_value+0xb0>
 801addc:	2b00      	cmp	r3, #0
 801adde:	d002      	beq.n	801ade6 <read_raw_value+0x2a>
 801ade0:	2b01      	cmp	r3, #1
 801ade2:	d02f      	beq.n	801ae44 <read_raw_value+0x88>
 801ade4:	e042      	b.n	801ae6c <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 801ade6:	683b      	ldr	r3, [r7, #0]
 801ade8:	2200      	movs	r2, #0
 801adea:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 801adec:	683b      	ldr	r3, [r7, #0]
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	1c5a      	adds	r2, r3, #1
 801adf2:	683b      	ldr	r3, [r7, #0]
 801adf4:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 801adf6:	683b      	ldr	r3, [r7, #0]
 801adf8:	681b      	ldr	r3, [r3, #0]
 801adfa:	697a      	ldr	r2, [r7, #20]
 801adfc:	429a      	cmp	r2, r3
 801adfe:	d20b      	bcs.n	801ae18 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 801ae00:	68fb      	ldr	r3, [r7, #12]
 801ae02:	68db      	ldr	r3, [r3, #12]
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d002      	beq.n	801ae0e <read_raw_value+0x52>
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	68db      	ldr	r3, [r3, #12]
 801ae0c:	e000      	b.n	801ae10 <read_raw_value+0x54>
 801ae0e:	4b1f      	ldr	r3, [pc, #124]	; (801ae8c <read_raw_value+0xd0>)
 801ae10:	68fa      	ldr	r2, [r7, #12]
 801ae12:	60d3      	str	r3, [r2, #12]
 801ae14:	2300      	movs	r3, #0
 801ae16:	e034      	b.n	801ae82 <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 801ae18:	2201      	movs	r2, #1
 801ae1a:	6879      	ldr	r1, [r7, #4]
 801ae1c:	68f8      	ldr	r0, [r7, #12]
 801ae1e:	f7ff fd33 	bl	801a888 <pb_read>
 801ae22:	4603      	mov	r3, r0
 801ae24:	f083 0301 	eor.w	r3, r3, #1
 801ae28:	b2db      	uxtb	r3, r3
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	d001      	beq.n	801ae32 <read_raw_value+0x76>
                    return false;
 801ae2e:	2300      	movs	r3, #0
 801ae30:	e027      	b.n	801ae82 <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	1c5a      	adds	r2, r3, #1
 801ae36:	607a      	str	r2, [r7, #4]
 801ae38:	781b      	ldrb	r3, [r3, #0]
 801ae3a:	b25b      	sxtb	r3, r3
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	dbd5      	blt.n	801adec <read_raw_value+0x30>
            return true;
 801ae40:	2301      	movs	r3, #1
 801ae42:	e01e      	b.n	801ae82 <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 801ae44:	683b      	ldr	r3, [r7, #0]
 801ae46:	2208      	movs	r2, #8
 801ae48:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 801ae4a:	2208      	movs	r2, #8
 801ae4c:	6879      	ldr	r1, [r7, #4]
 801ae4e:	68f8      	ldr	r0, [r7, #12]
 801ae50:	f7ff fd1a 	bl	801a888 <pb_read>
 801ae54:	4603      	mov	r3, r0
 801ae56:	e014      	b.n	801ae82 <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 801ae58:	683b      	ldr	r3, [r7, #0]
 801ae5a:	2204      	movs	r2, #4
 801ae5c:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 801ae5e:	2204      	movs	r2, #4
 801ae60:	6879      	ldr	r1, [r7, #4]
 801ae62:	68f8      	ldr	r0, [r7, #12]
 801ae64:	f7ff fd10 	bl	801a888 <pb_read>
 801ae68:	4603      	mov	r3, r0
 801ae6a:	e00a      	b.n	801ae82 <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 801ae6c:	68fb      	ldr	r3, [r7, #12]
 801ae6e:	68db      	ldr	r3, [r3, #12]
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d002      	beq.n	801ae7a <read_raw_value+0xbe>
 801ae74:	68fb      	ldr	r3, [r7, #12]
 801ae76:	68db      	ldr	r3, [r3, #12]
 801ae78:	e000      	b.n	801ae7c <read_raw_value+0xc0>
 801ae7a:	4b05      	ldr	r3, [pc, #20]	; (801ae90 <read_raw_value+0xd4>)
 801ae7c:	68fa      	ldr	r2, [r7, #12]
 801ae7e:	60d3      	str	r3, [r2, #12]
 801ae80:	2300      	movs	r3, #0
    }
}
 801ae82:	4618      	mov	r0, r3
 801ae84:	3718      	adds	r7, #24
 801ae86:	46bd      	mov	sp, r7
 801ae88:	bd80      	pop	{r7, pc}
 801ae8a:	bf00      	nop
 801ae8c:	08021e5c 	.word	0x08021e5c
 801ae90:	08021e6c 	.word	0x08021e6c

0801ae94 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 801ae94:	b590      	push	{r4, r7, lr}
 801ae96:	b085      	sub	sp, #20
 801ae98:	af00      	add	r7, sp, #0
 801ae9a:	6078      	str	r0, [r7, #4]
 801ae9c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 801ae9e:	f107 030c 	add.w	r3, r7, #12
 801aea2:	4619      	mov	r1, r3
 801aea4:	6878      	ldr	r0, [r7, #4]
 801aea6:	f7ff fe69 	bl	801ab7c <pb_decode_varint32>
 801aeaa:	4603      	mov	r3, r0
 801aeac:	f083 0301 	eor.w	r3, r3, #1
 801aeb0:	b2db      	uxtb	r3, r3
 801aeb2:	2b00      	cmp	r3, #0
 801aeb4:	d001      	beq.n	801aeba <pb_make_string_substream+0x26>
        return false;
 801aeb6:	2300      	movs	r3, #0
 801aeb8:	e020      	b.n	801aefc <pb_make_string_substream+0x68>
    
    *substream = *stream;
 801aeba:	683a      	ldr	r2, [r7, #0]
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	4614      	mov	r4, r2
 801aec0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801aec2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 801aec6:	683b      	ldr	r3, [r7, #0]
 801aec8:	689a      	ldr	r2, [r3, #8]
 801aeca:	68fb      	ldr	r3, [r7, #12]
 801aecc:	429a      	cmp	r2, r3
 801aece:	d20b      	bcs.n	801aee8 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	68db      	ldr	r3, [r3, #12]
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d002      	beq.n	801aede <pb_make_string_substream+0x4a>
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	68db      	ldr	r3, [r3, #12]
 801aedc:	e000      	b.n	801aee0 <pb_make_string_substream+0x4c>
 801aede:	4b09      	ldr	r3, [pc, #36]	; (801af04 <pb_make_string_substream+0x70>)
 801aee0:	687a      	ldr	r2, [r7, #4]
 801aee2:	60d3      	str	r3, [r2, #12]
 801aee4:	2300      	movs	r3, #0
 801aee6:	e009      	b.n	801aefc <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 801aee8:	68fa      	ldr	r2, [r7, #12]
 801aeea:	683b      	ldr	r3, [r7, #0]
 801aeec:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	689a      	ldr	r2, [r3, #8]
 801aef2:	68fb      	ldr	r3, [r7, #12]
 801aef4:	1ad2      	subs	r2, r2, r3
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	609a      	str	r2, [r3, #8]
    return true;
 801aefa:	2301      	movs	r3, #1
}
 801aefc:	4618      	mov	r0, r3
 801aefe:	3714      	adds	r7, #20
 801af00:	46bd      	mov	sp, r7
 801af02:	bd90      	pop	{r4, r7, pc}
 801af04:	08021e80 	.word	0x08021e80

0801af08 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 801af08:	b580      	push	{r7, lr}
 801af0a:	b082      	sub	sp, #8
 801af0c:	af00      	add	r7, sp, #0
 801af0e:	6078      	str	r0, [r7, #4]
 801af10:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 801af12:	683b      	ldr	r3, [r7, #0]
 801af14:	689b      	ldr	r3, [r3, #8]
 801af16:	2b00      	cmp	r3, #0
 801af18:	d00e      	beq.n	801af38 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 801af1a:	683b      	ldr	r3, [r7, #0]
 801af1c:	689b      	ldr	r3, [r3, #8]
 801af1e:	461a      	mov	r2, r3
 801af20:	2100      	movs	r1, #0
 801af22:	6838      	ldr	r0, [r7, #0]
 801af24:	f7ff fcb0 	bl	801a888 <pb_read>
 801af28:	4603      	mov	r3, r0
 801af2a:	f083 0301 	eor.w	r3, r3, #1
 801af2e:	b2db      	uxtb	r3, r3
 801af30:	2b00      	cmp	r3, #0
 801af32:	d001      	beq.n	801af38 <pb_close_string_substream+0x30>
            return false;
 801af34:	2300      	movs	r3, #0
 801af36:	e008      	b.n	801af4a <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 801af38:	683b      	ldr	r3, [r7, #0]
 801af3a:	685a      	ldr	r2, [r3, #4]
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 801af40:	683b      	ldr	r3, [r7, #0]
 801af42:	68da      	ldr	r2, [r3, #12]
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	60da      	str	r2, [r3, #12]
#endif
    return true;
 801af48:	2301      	movs	r3, #1
}
 801af4a:	4618      	mov	r0, r3
 801af4c:	3708      	adds	r7, #8
 801af4e:	46bd      	mov	sp, r7
 801af50:	bd80      	pop	{r7, pc}
	...

0801af54 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 801af54:	b580      	push	{r7, lr}
 801af56:	b084      	sub	sp, #16
 801af58:	af00      	add	r7, sp, #0
 801af5a:	60f8      	str	r0, [r7, #12]
 801af5c:	460b      	mov	r3, r1
 801af5e:	607a      	str	r2, [r7, #4]
 801af60:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	7d9b      	ldrb	r3, [r3, #22]
 801af66:	f003 030f 	and.w	r3, r3, #15
 801af6a:	2b0b      	cmp	r3, #11
 801af6c:	f200 80d4 	bhi.w	801b118 <decode_basic_field+0x1c4>
 801af70:	a201      	add	r2, pc, #4	; (adr r2, 801af78 <decode_basic_field+0x24>)
 801af72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af76:	bf00      	nop
 801af78:	0801afa9 	.word	0x0801afa9
 801af7c:	0801afd9 	.word	0x0801afd9
 801af80:	0801afd9 	.word	0x0801afd9
 801af84:	0801afd9 	.word	0x0801afd9
 801af88:	0801b009 	.word	0x0801b009
 801af8c:	0801b03d 	.word	0x0801b03d
 801af90:	0801b071 	.word	0x0801b071
 801af94:	0801b09b 	.word	0x0801b09b
 801af98:	0801b0c5 	.word	0x0801b0c5
 801af9c:	0801b0c5 	.word	0x0801b0c5
 801afa0:	0801b119 	.word	0x0801b119
 801afa4:	0801b0ef 	.word	0x0801b0ef
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 801afa8:	7afb      	ldrb	r3, [r7, #11]
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d00e      	beq.n	801afcc <decode_basic_field+0x78>
 801afae:	7afb      	ldrb	r3, [r7, #11]
 801afb0:	2bff      	cmp	r3, #255	; 0xff
 801afb2:	d00b      	beq.n	801afcc <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801afb4:	68fb      	ldr	r3, [r7, #12]
 801afb6:	68db      	ldr	r3, [r3, #12]
 801afb8:	2b00      	cmp	r3, #0
 801afba:	d002      	beq.n	801afc2 <decode_basic_field+0x6e>
 801afbc:	68fb      	ldr	r3, [r7, #12]
 801afbe:	68db      	ldr	r3, [r3, #12]
 801afc0:	e000      	b.n	801afc4 <decode_basic_field+0x70>
 801afc2:	4b5d      	ldr	r3, [pc, #372]	; (801b138 <decode_basic_field+0x1e4>)
 801afc4:	68fa      	ldr	r2, [r7, #12]
 801afc6:	60d3      	str	r3, [r2, #12]
 801afc8:	2300      	movs	r3, #0
 801afca:	e0b0      	b.n	801b12e <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 801afcc:	6879      	ldr	r1, [r7, #4]
 801afce:	68f8      	ldr	r0, [r7, #12]
 801afd0:	f000 fef6 	bl	801bdc0 <pb_dec_bool>
 801afd4:	4603      	mov	r3, r0
 801afd6:	e0aa      	b.n	801b12e <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 801afd8:	7afb      	ldrb	r3, [r7, #11]
 801afda:	2b00      	cmp	r3, #0
 801afdc:	d00e      	beq.n	801affc <decode_basic_field+0xa8>
 801afde:	7afb      	ldrb	r3, [r7, #11]
 801afe0:	2bff      	cmp	r3, #255	; 0xff
 801afe2:	d00b      	beq.n	801affc <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801afe4:	68fb      	ldr	r3, [r7, #12]
 801afe6:	68db      	ldr	r3, [r3, #12]
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d002      	beq.n	801aff2 <decode_basic_field+0x9e>
 801afec:	68fb      	ldr	r3, [r7, #12]
 801afee:	68db      	ldr	r3, [r3, #12]
 801aff0:	e000      	b.n	801aff4 <decode_basic_field+0xa0>
 801aff2:	4b51      	ldr	r3, [pc, #324]	; (801b138 <decode_basic_field+0x1e4>)
 801aff4:	68fa      	ldr	r2, [r7, #12]
 801aff6:	60d3      	str	r3, [r2, #12]
 801aff8:	2300      	movs	r3, #0
 801affa:	e098      	b.n	801b12e <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 801affc:	6879      	ldr	r1, [r7, #4]
 801affe:	68f8      	ldr	r0, [r7, #12]
 801b000:	f000 feee 	bl	801bde0 <pb_dec_varint>
 801b004:	4603      	mov	r3, r0
 801b006:	e092      	b.n	801b12e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 801b008:	7afb      	ldrb	r3, [r7, #11]
 801b00a:	2b05      	cmp	r3, #5
 801b00c:	d00e      	beq.n	801b02c <decode_basic_field+0xd8>
 801b00e:	7afb      	ldrb	r3, [r7, #11]
 801b010:	2bff      	cmp	r3, #255	; 0xff
 801b012:	d00b      	beq.n	801b02c <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b014:	68fb      	ldr	r3, [r7, #12]
 801b016:	68db      	ldr	r3, [r3, #12]
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d002      	beq.n	801b022 <decode_basic_field+0xce>
 801b01c:	68fb      	ldr	r3, [r7, #12]
 801b01e:	68db      	ldr	r3, [r3, #12]
 801b020:	e000      	b.n	801b024 <decode_basic_field+0xd0>
 801b022:	4b45      	ldr	r3, [pc, #276]	; (801b138 <decode_basic_field+0x1e4>)
 801b024:	68fa      	ldr	r2, [r7, #12]
 801b026:	60d3      	str	r3, [r2, #12]
 801b028:	2300      	movs	r3, #0
 801b02a:	e080      	b.n	801b12e <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	69db      	ldr	r3, [r3, #28]
 801b030:	4619      	mov	r1, r3
 801b032:	68f8      	ldr	r0, [r7, #12]
 801b034:	f000 fe8a 	bl	801bd4c <pb_decode_fixed32>
 801b038:	4603      	mov	r3, r0
 801b03a:	e078      	b.n	801b12e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 801b03c:	7afb      	ldrb	r3, [r7, #11]
 801b03e:	2b01      	cmp	r3, #1
 801b040:	d00e      	beq.n	801b060 <decode_basic_field+0x10c>
 801b042:	7afb      	ldrb	r3, [r7, #11]
 801b044:	2bff      	cmp	r3, #255	; 0xff
 801b046:	d00b      	beq.n	801b060 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b048:	68fb      	ldr	r3, [r7, #12]
 801b04a:	68db      	ldr	r3, [r3, #12]
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d002      	beq.n	801b056 <decode_basic_field+0x102>
 801b050:	68fb      	ldr	r3, [r7, #12]
 801b052:	68db      	ldr	r3, [r3, #12]
 801b054:	e000      	b.n	801b058 <decode_basic_field+0x104>
 801b056:	4b38      	ldr	r3, [pc, #224]	; (801b138 <decode_basic_field+0x1e4>)
 801b058:	68fa      	ldr	r2, [r7, #12]
 801b05a:	60d3      	str	r3, [r2, #12]
 801b05c:	2300      	movs	r3, #0
 801b05e:	e066      	b.n	801b12e <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	69db      	ldr	r3, [r3, #28]
 801b064:	4619      	mov	r1, r3
 801b066:	68f8      	ldr	r0, [r7, #12]
 801b068:	f000 fe8c 	bl	801bd84 <pb_decode_fixed64>
 801b06c:	4603      	mov	r3, r0
 801b06e:	e05e      	b.n	801b12e <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 801b070:	7afb      	ldrb	r3, [r7, #11]
 801b072:	2b02      	cmp	r3, #2
 801b074:	d00b      	beq.n	801b08e <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b076:	68fb      	ldr	r3, [r7, #12]
 801b078:	68db      	ldr	r3, [r3, #12]
 801b07a:	2b00      	cmp	r3, #0
 801b07c:	d002      	beq.n	801b084 <decode_basic_field+0x130>
 801b07e:	68fb      	ldr	r3, [r7, #12]
 801b080:	68db      	ldr	r3, [r3, #12]
 801b082:	e000      	b.n	801b086 <decode_basic_field+0x132>
 801b084:	4b2c      	ldr	r3, [pc, #176]	; (801b138 <decode_basic_field+0x1e4>)
 801b086:	68fa      	ldr	r2, [r7, #12]
 801b088:	60d3      	str	r3, [r2, #12]
 801b08a:	2300      	movs	r3, #0
 801b08c:	e04f      	b.n	801b12e <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 801b08e:	6879      	ldr	r1, [r7, #4]
 801b090:	68f8      	ldr	r0, [r7, #12]
 801b092:	f000 ffd1 	bl	801c038 <pb_dec_bytes>
 801b096:	4603      	mov	r3, r0
 801b098:	e049      	b.n	801b12e <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 801b09a:	7afb      	ldrb	r3, [r7, #11]
 801b09c:	2b02      	cmp	r3, #2
 801b09e:	d00b      	beq.n	801b0b8 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b0a0:	68fb      	ldr	r3, [r7, #12]
 801b0a2:	68db      	ldr	r3, [r3, #12]
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	d002      	beq.n	801b0ae <decode_basic_field+0x15a>
 801b0a8:	68fb      	ldr	r3, [r7, #12]
 801b0aa:	68db      	ldr	r3, [r3, #12]
 801b0ac:	e000      	b.n	801b0b0 <decode_basic_field+0x15c>
 801b0ae:	4b22      	ldr	r3, [pc, #136]	; (801b138 <decode_basic_field+0x1e4>)
 801b0b0:	68fa      	ldr	r2, [r7, #12]
 801b0b2:	60d3      	str	r3, [r2, #12]
 801b0b4:	2300      	movs	r3, #0
 801b0b6:	e03a      	b.n	801b12e <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 801b0b8:	6879      	ldr	r1, [r7, #4]
 801b0ba:	68f8      	ldr	r0, [r7, #12]
 801b0bc:	f001 f830 	bl	801c120 <pb_dec_string>
 801b0c0:	4603      	mov	r3, r0
 801b0c2:	e034      	b.n	801b12e <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 801b0c4:	7afb      	ldrb	r3, [r7, #11]
 801b0c6:	2b02      	cmp	r3, #2
 801b0c8:	d00b      	beq.n	801b0e2 <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b0ca:	68fb      	ldr	r3, [r7, #12]
 801b0cc:	68db      	ldr	r3, [r3, #12]
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d002      	beq.n	801b0d8 <decode_basic_field+0x184>
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	68db      	ldr	r3, [r3, #12]
 801b0d6:	e000      	b.n	801b0da <decode_basic_field+0x186>
 801b0d8:	4b17      	ldr	r3, [pc, #92]	; (801b138 <decode_basic_field+0x1e4>)
 801b0da:	68fa      	ldr	r2, [r7, #12]
 801b0dc:	60d3      	str	r3, [r2, #12]
 801b0de:	2300      	movs	r3, #0
 801b0e0:	e025      	b.n	801b12e <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 801b0e2:	6879      	ldr	r1, [r7, #4]
 801b0e4:	68f8      	ldr	r0, [r7, #12]
 801b0e6:	f001 f897 	bl	801c218 <pb_dec_submessage>
 801b0ea:	4603      	mov	r3, r0
 801b0ec:	e01f      	b.n	801b12e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 801b0ee:	7afb      	ldrb	r3, [r7, #11]
 801b0f0:	2b02      	cmp	r3, #2
 801b0f2:	d00b      	beq.n	801b10c <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b0f4:	68fb      	ldr	r3, [r7, #12]
 801b0f6:	68db      	ldr	r3, [r3, #12]
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	d002      	beq.n	801b102 <decode_basic_field+0x1ae>
 801b0fc:	68fb      	ldr	r3, [r7, #12]
 801b0fe:	68db      	ldr	r3, [r3, #12]
 801b100:	e000      	b.n	801b104 <decode_basic_field+0x1b0>
 801b102:	4b0d      	ldr	r3, [pc, #52]	; (801b138 <decode_basic_field+0x1e4>)
 801b104:	68fa      	ldr	r2, [r7, #12]
 801b106:	60d3      	str	r3, [r2, #12]
 801b108:	2300      	movs	r3, #0
 801b10a:	e010      	b.n	801b12e <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 801b10c:	6879      	ldr	r1, [r7, #4]
 801b10e:	68f8      	ldr	r0, [r7, #12]
 801b110:	f001 f90c 	bl	801c32c <pb_dec_fixed_length_bytes>
 801b114:	4603      	mov	r3, r0
 801b116:	e00a      	b.n	801b12e <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 801b118:	68fb      	ldr	r3, [r7, #12]
 801b11a:	68db      	ldr	r3, [r3, #12]
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d002      	beq.n	801b126 <decode_basic_field+0x1d2>
 801b120:	68fb      	ldr	r3, [r7, #12]
 801b122:	68db      	ldr	r3, [r3, #12]
 801b124:	e000      	b.n	801b128 <decode_basic_field+0x1d4>
 801b126:	4b05      	ldr	r3, [pc, #20]	; (801b13c <decode_basic_field+0x1e8>)
 801b128:	68fa      	ldr	r2, [r7, #12]
 801b12a:	60d3      	str	r3, [r2, #12]
 801b12c:	2300      	movs	r3, #0
    }
}
 801b12e:	4618      	mov	r0, r3
 801b130:	3710      	adds	r7, #16
 801b132:	46bd      	mov	sp, r7
 801b134:	bd80      	pop	{r7, pc}
 801b136:	bf00      	nop
 801b138:	08021e98 	.word	0x08021e98
 801b13c:	08021ea8 	.word	0x08021ea8

0801b140 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 801b140:	b580      	push	{r7, lr}
 801b142:	b096      	sub	sp, #88	; 0x58
 801b144:	af00      	add	r7, sp, #0
 801b146:	60f8      	str	r0, [r7, #12]
 801b148:	460b      	mov	r3, r1
 801b14a:	607a      	str	r2, [r7, #4]
 801b14c:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	7d9b      	ldrb	r3, [r3, #22]
 801b152:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801b156:	2b30      	cmp	r3, #48	; 0x30
 801b158:	f000 80c2 	beq.w	801b2e0 <decode_static_field+0x1a0>
 801b15c:	2b30      	cmp	r3, #48	; 0x30
 801b15e:	f200 811a 	bhi.w	801b396 <decode_static_field+0x256>
 801b162:	2b20      	cmp	r3, #32
 801b164:	d01f      	beq.n	801b1a6 <decode_static_field+0x66>
 801b166:	2b20      	cmp	r3, #32
 801b168:	f200 8115 	bhi.w	801b396 <decode_static_field+0x256>
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d002      	beq.n	801b176 <decode_static_field+0x36>
 801b170:	2b10      	cmp	r3, #16
 801b172:	d008      	beq.n	801b186 <decode_static_field+0x46>
 801b174:	e10f      	b.n	801b396 <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 801b176:	7afb      	ldrb	r3, [r7, #11]
 801b178:	687a      	ldr	r2, [r7, #4]
 801b17a:	4619      	mov	r1, r3
 801b17c:	68f8      	ldr	r0, [r7, #12]
 801b17e:	f7ff fee9 	bl	801af54 <decode_basic_field>
 801b182:	4603      	mov	r3, r0
 801b184:	e112      	b.n	801b3ac <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 801b186:	687b      	ldr	r3, [r7, #4]
 801b188:	6a1b      	ldr	r3, [r3, #32]
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	d003      	beq.n	801b196 <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	6a1b      	ldr	r3, [r3, #32]
 801b192:	2201      	movs	r2, #1
 801b194:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 801b196:	7afb      	ldrb	r3, [r7, #11]
 801b198:	687a      	ldr	r2, [r7, #4]
 801b19a:	4619      	mov	r1, r3
 801b19c:	68f8      	ldr	r0, [r7, #12]
 801b19e:	f7ff fed9 	bl	801af54 <decode_basic_field>
 801b1a2:	4603      	mov	r3, r0
 801b1a4:	e102      	b.n	801b3ac <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 801b1a6:	7afb      	ldrb	r3, [r7, #11]
 801b1a8:	2b02      	cmp	r3, #2
 801b1aa:	d16c      	bne.n	801b286 <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	7d9b      	ldrb	r3, [r3, #22]
 801b1b0:	f003 030f 	and.w	r3, r3, #15
 801b1b4:	2b05      	cmp	r3, #5
 801b1b6:	d866      	bhi.n	801b286 <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 801b1b8:	2301      	movs	r3, #1
 801b1ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 801b1be:	687b      	ldr	r3, [r7, #4]
 801b1c0:	6a1b      	ldr	r3, [r3, #32]
 801b1c2:	653b      	str	r3, [r7, #80]	; 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	699b      	ldr	r3, [r3, #24]
 801b1c8:	687a      	ldr	r2, [r7, #4]
 801b1ca:	8a52      	ldrh	r2, [r2, #18]
 801b1cc:	4611      	mov	r1, r2
 801b1ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b1d0:	8812      	ldrh	r2, [r2, #0]
 801b1d2:	fb01 f202 	mul.w	r2, r1, r2
 801b1d6:	441a      	add	r2, r3
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 801b1dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b1e0:	4619      	mov	r1, r3
 801b1e2:	68f8      	ldr	r0, [r7, #12]
 801b1e4:	f7ff fe56 	bl	801ae94 <pb_make_string_substream>
 801b1e8:	4603      	mov	r3, r0
 801b1ea:	f083 0301 	eor.w	r3, r3, #1
 801b1ee:	b2db      	uxtb	r3, r3
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d01f      	beq.n	801b234 <decode_static_field+0xf4>
                    return false;
 801b1f4:	2300      	movs	r3, #0
 801b1f6:	e0d9      	b.n	801b3ac <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 801b1f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b1fc:	687a      	ldr	r2, [r7, #4]
 801b1fe:	21ff      	movs	r1, #255	; 0xff
 801b200:	4618      	mov	r0, r3
 801b202:	f7ff fea7 	bl	801af54 <decode_basic_field>
 801b206:	4603      	mov	r3, r0
 801b208:	f083 0301 	eor.w	r3, r3, #1
 801b20c:	b2db      	uxtb	r3, r3
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d003      	beq.n	801b21a <decode_static_field+0xda>
                    {
                        status = false;
 801b212:	2300      	movs	r3, #0
 801b214:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 801b218:	e015      	b.n	801b246 <decode_static_field+0x106>
                    }
                    (*size)++;
 801b21a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b21c:	881b      	ldrh	r3, [r3, #0]
 801b21e:	3301      	adds	r3, #1
 801b220:	b29a      	uxth	r2, r3
 801b222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b224:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	69db      	ldr	r3, [r3, #28]
 801b22a:	687a      	ldr	r2, [r7, #4]
 801b22c:	8a52      	ldrh	r2, [r2, #18]
 801b22e:	441a      	add	r2, r3
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 801b234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b236:	2b00      	cmp	r3, #0
 801b238:	d005      	beq.n	801b246 <decode_static_field+0x106>
 801b23a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b23c:	881a      	ldrh	r2, [r3, #0]
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	8a9b      	ldrh	r3, [r3, #20]
 801b242:	429a      	cmp	r2, r3
 801b244:	d3d8      	bcc.n	801b1f8 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 801b246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d00b      	beq.n	801b264 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 801b24c:	68fb      	ldr	r3, [r7, #12]
 801b24e:	68db      	ldr	r3, [r3, #12]
 801b250:	2b00      	cmp	r3, #0
 801b252:	d002      	beq.n	801b25a <decode_static_field+0x11a>
 801b254:	68fb      	ldr	r3, [r7, #12]
 801b256:	68db      	ldr	r3, [r3, #12]
 801b258:	e000      	b.n	801b25c <decode_static_field+0x11c>
 801b25a:	4b56      	ldr	r3, [pc, #344]	; (801b3b4 <decode_static_field+0x274>)
 801b25c:	68fa      	ldr	r2, [r7, #12]
 801b25e:	60d3      	str	r3, [r2, #12]
 801b260:	2300      	movs	r3, #0
 801b262:	e0a3      	b.n	801b3ac <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 801b264:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b268:	4619      	mov	r1, r3
 801b26a:	68f8      	ldr	r0, [r7, #12]
 801b26c:	f7ff fe4c 	bl	801af08 <pb_close_string_substream>
 801b270:	4603      	mov	r3, r0
 801b272:	f083 0301 	eor.w	r3, r3, #1
 801b276:	b2db      	uxtb	r3, r3
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d001      	beq.n	801b280 <decode_static_field+0x140>
                    return false;
 801b27c:	2300      	movs	r3, #0
 801b27e:	e095      	b.n	801b3ac <decode_static_field+0x26c>

                return status;
 801b280:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b284:	e092      	b.n	801b3ac <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	6a1b      	ldr	r3, [r3, #32]
 801b28a:	64fb      	str	r3, [r7, #76]	; 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	699b      	ldr	r3, [r3, #24]
 801b290:	687a      	ldr	r2, [r7, #4]
 801b292:	8a52      	ldrh	r2, [r2, #18]
 801b294:	4611      	mov	r1, r2
 801b296:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b298:	8812      	ldrh	r2, [r2, #0]
 801b29a:	fb01 f202 	mul.w	r2, r1, r2
 801b29e:	441a      	add	r2, r3
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 801b2a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b2a6:	881b      	ldrh	r3, [r3, #0]
 801b2a8:	1c5a      	adds	r2, r3, #1
 801b2aa:	b291      	uxth	r1, r2
 801b2ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b2ae:	8011      	strh	r1, [r2, #0]
 801b2b0:	687a      	ldr	r2, [r7, #4]
 801b2b2:	8a92      	ldrh	r2, [r2, #20]
 801b2b4:	4293      	cmp	r3, r2
 801b2b6:	d30b      	bcc.n	801b2d0 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 801b2b8:	68fb      	ldr	r3, [r7, #12]
 801b2ba:	68db      	ldr	r3, [r3, #12]
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d002      	beq.n	801b2c6 <decode_static_field+0x186>
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	68db      	ldr	r3, [r3, #12]
 801b2c4:	e000      	b.n	801b2c8 <decode_static_field+0x188>
 801b2c6:	4b3b      	ldr	r3, [pc, #236]	; (801b3b4 <decode_static_field+0x274>)
 801b2c8:	68fa      	ldr	r2, [r7, #12]
 801b2ca:	60d3      	str	r3, [r2, #12]
 801b2cc:	2300      	movs	r3, #0
 801b2ce:	e06d      	b.n	801b3ac <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 801b2d0:	7afb      	ldrb	r3, [r7, #11]
 801b2d2:	687a      	ldr	r2, [r7, #4]
 801b2d4:	4619      	mov	r1, r3
 801b2d6:	68f8      	ldr	r0, [r7, #12]
 801b2d8:	f7ff fe3c 	bl	801af54 <decode_basic_field>
 801b2dc:	4603      	mov	r3, r0
 801b2de:	e065      	b.n	801b3ac <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	7d9b      	ldrb	r3, [r3, #22]
 801b2e4:	f003 030f 	and.w	r3, r3, #15
 801b2e8:	2b08      	cmp	r3, #8
 801b2ea:	d005      	beq.n	801b2f8 <decode_static_field+0x1b8>
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	7d9b      	ldrb	r3, [r3, #22]
 801b2f0:	f003 030f 	and.w	r3, r3, #15
 801b2f4:	2b09      	cmp	r3, #9
 801b2f6:	d141      	bne.n	801b37c <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	6a1b      	ldr	r3, [r3, #32]
 801b2fc:	881a      	ldrh	r2, [r3, #0]
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 801b302:	429a      	cmp	r2, r3
 801b304:	d03a      	beq.n	801b37c <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	69d8      	ldr	r0, [r3, #28]
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	8a5b      	ldrh	r3, [r3, #18]
 801b30e:	461a      	mov	r2, r3
 801b310:	2100      	movs	r1, #0
 801b312:	f002 f97d 	bl	801d610 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b31a:	689b      	ldr	r3, [r3, #8]
 801b31c:	2b00      	cmp	r3, #0
 801b31e:	d10a      	bne.n	801b336 <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b324:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 801b326:	2b00      	cmp	r3, #0
 801b328:	d105      	bne.n	801b336 <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b32e:	685b      	ldr	r3, [r3, #4]
 801b330:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 801b332:	2b00      	cmp	r3, #0
 801b334:	d022      	beq.n	801b37c <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	69da      	ldr	r2, [r3, #28]
 801b33e:	f107 0314 	add.w	r3, r7, #20
 801b342:	4618      	mov	r0, r3
 801b344:	f7ff f935 	bl	801a5b2 <pb_field_iter_begin>
 801b348:	4603      	mov	r3, r0
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d016      	beq.n	801b37c <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 801b34e:	f107 0314 	add.w	r3, r7, #20
 801b352:	4618      	mov	r0, r3
 801b354:	f000 fa4d 	bl	801b7f2 <pb_message_set_to_defaults>
 801b358:	4603      	mov	r3, r0
 801b35a:	f083 0301 	eor.w	r3, r3, #1
 801b35e:	b2db      	uxtb	r3, r3
 801b360:	2b00      	cmp	r3, #0
 801b362:	d00b      	beq.n	801b37c <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 801b364:	68fb      	ldr	r3, [r7, #12]
 801b366:	68db      	ldr	r3, [r3, #12]
 801b368:	2b00      	cmp	r3, #0
 801b36a:	d002      	beq.n	801b372 <decode_static_field+0x232>
 801b36c:	68fb      	ldr	r3, [r7, #12]
 801b36e:	68db      	ldr	r3, [r3, #12]
 801b370:	e000      	b.n	801b374 <decode_static_field+0x234>
 801b372:	4b11      	ldr	r3, [pc, #68]	; (801b3b8 <decode_static_field+0x278>)
 801b374:	68fa      	ldr	r2, [r7, #12]
 801b376:	60d3      	str	r3, [r2, #12]
 801b378:	2300      	movs	r3, #0
 801b37a:	e017      	b.n	801b3ac <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	6a1b      	ldr	r3, [r3, #32]
 801b380:	687a      	ldr	r2, [r7, #4]
 801b382:	8a12      	ldrh	r2, [r2, #16]
 801b384:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 801b386:	7afb      	ldrb	r3, [r7, #11]
 801b388:	687a      	ldr	r2, [r7, #4]
 801b38a:	4619      	mov	r1, r3
 801b38c:	68f8      	ldr	r0, [r7, #12]
 801b38e:	f7ff fde1 	bl	801af54 <decode_basic_field>
 801b392:	4603      	mov	r3, r0
 801b394:	e00a      	b.n	801b3ac <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 801b396:	68fb      	ldr	r3, [r7, #12]
 801b398:	68db      	ldr	r3, [r3, #12]
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	d002      	beq.n	801b3a4 <decode_static_field+0x264>
 801b39e:	68fb      	ldr	r3, [r7, #12]
 801b3a0:	68db      	ldr	r3, [r3, #12]
 801b3a2:	e000      	b.n	801b3a6 <decode_static_field+0x266>
 801b3a4:	4b05      	ldr	r3, [pc, #20]	; (801b3bc <decode_static_field+0x27c>)
 801b3a6:	68fa      	ldr	r2, [r7, #12]
 801b3a8:	60d3      	str	r3, [r2, #12]
 801b3aa:	2300      	movs	r3, #0
    }
}
 801b3ac:	4618      	mov	r0, r3
 801b3ae:	3758      	adds	r7, #88	; 0x58
 801b3b0:	46bd      	mov	sp, r7
 801b3b2:	bd80      	pop	{r7, pc}
 801b3b4:	08021ebc 	.word	0x08021ebc
 801b3b8:	08021ecc 	.word	0x08021ecc
 801b3bc:	08021ea8 	.word	0x08021ea8

0801b3c0 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 801b3c0:	b480      	push	{r7}
 801b3c2:	b085      	sub	sp, #20
 801b3c4:	af00      	add	r7, sp, #0
 801b3c6:	60f8      	str	r0, [r7, #12]
 801b3c8:	460b      	mov	r3, r1
 801b3ca:	607a      	str	r2, [r7, #4]
 801b3cc:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 801b3ce:	68fb      	ldr	r3, [r7, #12]
 801b3d0:	68db      	ldr	r3, [r3, #12]
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	d002      	beq.n	801b3dc <decode_pointer_field+0x1c>
 801b3d6:	68fb      	ldr	r3, [r7, #12]
 801b3d8:	68db      	ldr	r3, [r3, #12]
 801b3da:	e000      	b.n	801b3de <decode_pointer_field+0x1e>
 801b3dc:	4b04      	ldr	r3, [pc, #16]	; (801b3f0 <decode_pointer_field+0x30>)
 801b3de:	68fa      	ldr	r2, [r7, #12]
 801b3e0:	60d3      	str	r3, [r2, #12]
 801b3e2:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 801b3e4:	4618      	mov	r0, r3
 801b3e6:	3714      	adds	r7, #20
 801b3e8:	46bd      	mov	sp, r7
 801b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ee:	4770      	bx	lr
 801b3f0:	08021ee4 	.word	0x08021ee4

0801b3f4 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 801b3f4:	b590      	push	{r4, r7, lr}
 801b3f6:	b097      	sub	sp, #92	; 0x5c
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	61f8      	str	r0, [r7, #28]
 801b3fc:	460b      	mov	r3, r1
 801b3fe:	617a      	str	r2, [r7, #20]
 801b400:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 801b402:	697b      	ldr	r3, [r7, #20]
 801b404:	681b      	ldr	r3, [r3, #0]
 801b406:	68db      	ldr	r3, [r3, #12]
 801b408:	2b00      	cmp	r3, #0
 801b40a:	d106      	bne.n	801b41a <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 801b40c:	7efb      	ldrb	r3, [r7, #27]
 801b40e:	4619      	mov	r1, r3
 801b410:	69f8      	ldr	r0, [r7, #28]
 801b412:	f7ff fc91 	bl	801ad38 <pb_skip_field>
 801b416:	4603      	mov	r3, r0
 801b418:	e070      	b.n	801b4fc <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 801b41a:	7efb      	ldrb	r3, [r7, #27]
 801b41c:	2b02      	cmp	r3, #2
 801b41e:	d145      	bne.n	801b4ac <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 801b420:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b424:	4619      	mov	r1, r3
 801b426:	69f8      	ldr	r0, [r7, #28]
 801b428:	f7ff fd34 	bl	801ae94 <pb_make_string_substream>
 801b42c:	4603      	mov	r3, r0
 801b42e:	f083 0301 	eor.w	r3, r3, #1
 801b432:	b2db      	uxtb	r3, r3
 801b434:	2b00      	cmp	r3, #0
 801b436:	d001      	beq.n	801b43c <decode_callback_field+0x48>
            return false;
 801b438:	2300      	movs	r3, #0
 801b43a:	e05f      	b.n	801b4fc <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 801b43c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b43e:	657b      	str	r3, [r7, #84]	; 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 801b440:	697b      	ldr	r3, [r7, #20]
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	68db      	ldr	r3, [r3, #12]
 801b446:	f107 0044 	add.w	r0, r7, #68	; 0x44
 801b44a:	697a      	ldr	r2, [r7, #20]
 801b44c:	2100      	movs	r1, #0
 801b44e:	4798      	blx	r3
 801b450:	4603      	mov	r3, r0
 801b452:	f083 0301 	eor.w	r3, r3, #1
 801b456:	b2db      	uxtb	r3, r3
 801b458:	2b00      	cmp	r3, #0
 801b45a:	d010      	beq.n	801b47e <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 801b45c:	69fb      	ldr	r3, [r7, #28]
 801b45e:	68db      	ldr	r3, [r3, #12]
 801b460:	2b00      	cmp	r3, #0
 801b462:	d002      	beq.n	801b46a <decode_callback_field+0x76>
 801b464:	69fb      	ldr	r3, [r7, #28]
 801b466:	68db      	ldr	r3, [r3, #12]
 801b468:	e005      	b.n	801b476 <decode_callback_field+0x82>
 801b46a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d001      	beq.n	801b474 <decode_callback_field+0x80>
 801b470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b472:	e000      	b.n	801b476 <decode_callback_field+0x82>
 801b474:	4b23      	ldr	r3, [pc, #140]	; (801b504 <decode_callback_field+0x110>)
 801b476:	69fa      	ldr	r2, [r7, #28]
 801b478:	60d3      	str	r3, [r2, #12]
                return false;
 801b47a:	2300      	movs	r3, #0
 801b47c:	e03e      	b.n	801b4fc <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 801b47e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b480:	2b00      	cmp	r3, #0
 801b482:	d003      	beq.n	801b48c <decode_callback_field+0x98>
 801b484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b486:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b488:	429a      	cmp	r2, r3
 801b48a:	d8d7      	bhi.n	801b43c <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 801b48c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b490:	4619      	mov	r1, r3
 801b492:	69f8      	ldr	r0, [r7, #28]
 801b494:	f7ff fd38 	bl	801af08 <pb_close_string_substream>
 801b498:	4603      	mov	r3, r0
 801b49a:	f083 0301 	eor.w	r3, r3, #1
 801b49e:	b2db      	uxtb	r3, r3
 801b4a0:	2b00      	cmp	r3, #0
 801b4a2:	d001      	beq.n	801b4a8 <decode_callback_field+0xb4>
            return false;
 801b4a4:	2300      	movs	r3, #0
 801b4a6:	e029      	b.n	801b4fc <decode_callback_field+0x108>

        return true;
 801b4a8:	2301      	movs	r3, #1
 801b4aa:	e027      	b.n	801b4fc <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 801b4ac:	230a      	movs	r3, #10
 801b4ae:	627b      	str	r3, [r7, #36]	; 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 801b4b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b4b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b4b8:	7ef9      	ldrb	r1, [r7, #27]
 801b4ba:	69f8      	ldr	r0, [r7, #28]
 801b4bc:	f7ff fc7e 	bl	801adbc <read_raw_value>
 801b4c0:	4603      	mov	r3, r0
 801b4c2:	f083 0301 	eor.w	r3, r3, #1
 801b4c6:	b2db      	uxtb	r3, r3
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d001      	beq.n	801b4d0 <decode_callback_field+0xdc>
            return false;
 801b4cc:	2300      	movs	r3, #0
 801b4ce:	e015      	b.n	801b4fc <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 801b4d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b4d2:	463b      	mov	r3, r7
 801b4d4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801b4d8:	4618      	mov	r0, r3
 801b4da:	f7ff fa87 	bl	801a9ec <pb_istream_from_buffer>
 801b4de:	f107 0434 	add.w	r4, r7, #52	; 0x34
 801b4e2:	463b      	mov	r3, r7
 801b4e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b4e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 801b4ea:	697b      	ldr	r3, [r7, #20]
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	68db      	ldr	r3, [r3, #12]
 801b4f0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b4f4:	697a      	ldr	r2, [r7, #20]
 801b4f6:	2100      	movs	r1, #0
 801b4f8:	4798      	blx	r3
 801b4fa:	4603      	mov	r3, r0
    }
}
 801b4fc:	4618      	mov	r0, r3
 801b4fe:	375c      	adds	r7, #92	; 0x5c
 801b500:	46bd      	mov	sp, r7
 801b502:	bd90      	pop	{r4, r7, pc}
 801b504:	08021ef8 	.word	0x08021ef8

0801b508 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 801b508:	b580      	push	{r7, lr}
 801b50a:	b084      	sub	sp, #16
 801b50c:	af00      	add	r7, sp, #0
 801b50e:	60f8      	str	r0, [r7, #12]
 801b510:	460b      	mov	r3, r1
 801b512:	607a      	str	r2, [r7, #4]
 801b514:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	7d9b      	ldrb	r3, [r3, #22]
 801b51a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801b51e:	2b80      	cmp	r3, #128	; 0x80
 801b520:	d00e      	beq.n	801b540 <decode_field+0x38>
 801b522:	2b80      	cmp	r3, #128	; 0x80
 801b524:	d81c      	bhi.n	801b560 <decode_field+0x58>
 801b526:	2b00      	cmp	r3, #0
 801b528:	d002      	beq.n	801b530 <decode_field+0x28>
 801b52a:	2b40      	cmp	r3, #64	; 0x40
 801b52c:	d010      	beq.n	801b550 <decode_field+0x48>
 801b52e:	e017      	b.n	801b560 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 801b530:	7afb      	ldrb	r3, [r7, #11]
 801b532:	687a      	ldr	r2, [r7, #4]
 801b534:	4619      	mov	r1, r3
 801b536:	68f8      	ldr	r0, [r7, #12]
 801b538:	f7ff fe02 	bl	801b140 <decode_static_field>
 801b53c:	4603      	mov	r3, r0
 801b53e:	e01a      	b.n	801b576 <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 801b540:	7afb      	ldrb	r3, [r7, #11]
 801b542:	687a      	ldr	r2, [r7, #4]
 801b544:	4619      	mov	r1, r3
 801b546:	68f8      	ldr	r0, [r7, #12]
 801b548:	f7ff ff3a 	bl	801b3c0 <decode_pointer_field>
 801b54c:	4603      	mov	r3, r0
 801b54e:	e012      	b.n	801b576 <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 801b550:	7afb      	ldrb	r3, [r7, #11]
 801b552:	687a      	ldr	r2, [r7, #4]
 801b554:	4619      	mov	r1, r3
 801b556:	68f8      	ldr	r0, [r7, #12]
 801b558:	f7ff ff4c 	bl	801b3f4 <decode_callback_field>
 801b55c:	4603      	mov	r3, r0
 801b55e:	e00a      	b.n	801b576 <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 801b560:	68fb      	ldr	r3, [r7, #12]
 801b562:	68db      	ldr	r3, [r3, #12]
 801b564:	2b00      	cmp	r3, #0
 801b566:	d002      	beq.n	801b56e <decode_field+0x66>
 801b568:	68fb      	ldr	r3, [r7, #12]
 801b56a:	68db      	ldr	r3, [r3, #12]
 801b56c:	e000      	b.n	801b570 <decode_field+0x68>
 801b56e:	4b04      	ldr	r3, [pc, #16]	; (801b580 <decode_field+0x78>)
 801b570:	68fa      	ldr	r2, [r7, #12]
 801b572:	60d3      	str	r3, [r2, #12]
 801b574:	2300      	movs	r3, #0
    }
}
 801b576:	4618      	mov	r0, r3
 801b578:	3710      	adds	r7, #16
 801b57a:	46bd      	mov	sp, r7
 801b57c:	bd80      	pop	{r7, pc}
 801b57e:	bf00      	nop
 801b580:	08021ea8 	.word	0x08021ea8

0801b584 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 801b584:	b580      	push	{r7, lr}
 801b586:	b08e      	sub	sp, #56	; 0x38
 801b588:	af00      	add	r7, sp, #0
 801b58a:	60f8      	str	r0, [r7, #12]
 801b58c:	60b9      	str	r1, [r7, #8]
 801b58e:	607a      	str	r2, [r7, #4]
 801b590:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 801b592:	f107 0310 	add.w	r3, r7, #16
 801b596:	68b9      	ldr	r1, [r7, #8]
 801b598:	4618      	mov	r0, r3
 801b59a:	f7ff f823 	bl	801a5e4 <pb_field_iter_begin_extension>
 801b59e:	4603      	mov	r3, r0
 801b5a0:	f083 0301 	eor.w	r3, r3, #1
 801b5a4:	b2db      	uxtb	r3, r3
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	d00b      	beq.n	801b5c2 <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 801b5aa:	68fb      	ldr	r3, [r7, #12]
 801b5ac:	68db      	ldr	r3, [r3, #12]
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d002      	beq.n	801b5b8 <default_extension_decoder+0x34>
 801b5b2:	68fb      	ldr	r3, [r7, #12]
 801b5b4:	68db      	ldr	r3, [r3, #12]
 801b5b6:	e000      	b.n	801b5ba <default_extension_decoder+0x36>
 801b5b8:	4b0e      	ldr	r3, [pc, #56]	; (801b5f4 <default_extension_decoder+0x70>)
 801b5ba:	68fa      	ldr	r2, [r7, #12]
 801b5bc:	60d3      	str	r3, [r2, #12]
 801b5be:	2300      	movs	r3, #0
 801b5c0:	e014      	b.n	801b5ec <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 801b5c2:	8c3b      	ldrh	r3, [r7, #32]
 801b5c4:	461a      	mov	r2, r3
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	4293      	cmp	r3, r2
 801b5ca:	d102      	bne.n	801b5d2 <default_extension_decoder+0x4e>
 801b5cc:	697b      	ldr	r3, [r7, #20]
 801b5ce:	2b00      	cmp	r3, #0
 801b5d0:	d101      	bne.n	801b5d6 <default_extension_decoder+0x52>
        return true;
 801b5d2:	2301      	movs	r3, #1
 801b5d4:	e00a      	b.n	801b5ec <default_extension_decoder+0x68>

    extension->found = true;
 801b5d6:	68bb      	ldr	r3, [r7, #8]
 801b5d8:	2201      	movs	r2, #1
 801b5da:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 801b5dc:	f107 0210 	add.w	r2, r7, #16
 801b5e0:	78fb      	ldrb	r3, [r7, #3]
 801b5e2:	4619      	mov	r1, r3
 801b5e4:	68f8      	ldr	r0, [r7, #12]
 801b5e6:	f7ff ff8f 	bl	801b508 <decode_field>
 801b5ea:	4603      	mov	r3, r0
}
 801b5ec:	4618      	mov	r0, r3
 801b5ee:	3738      	adds	r7, #56	; 0x38
 801b5f0:	46bd      	mov	sp, r7
 801b5f2:	bd80      	pop	{r7, pc}
 801b5f4:	08021f08 	.word	0x08021f08

0801b5f8 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 801b5f8:	b590      	push	{r4, r7, lr}
 801b5fa:	b087      	sub	sp, #28
 801b5fc:	af00      	add	r7, sp, #0
 801b5fe:	60f8      	str	r0, [r7, #12]
 801b600:	60b9      	str	r1, [r7, #8]
 801b602:	603b      	str	r3, [r7, #0]
 801b604:	4613      	mov	r3, r2
 801b606:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 801b608:	68fb      	ldr	r3, [r7, #12]
 801b60a:	689b      	ldr	r3, [r3, #8]
 801b60c:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 801b60e:	e022      	b.n	801b656 <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 801b610:	683b      	ldr	r3, [r7, #0]
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	681b      	ldr	r3, [r3, #0]
 801b616:	2b00      	cmp	r3, #0
 801b618:	d00a      	beq.n	801b630 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 801b61a:	683b      	ldr	r3, [r7, #0]
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	681c      	ldr	r4, [r3, #0]
 801b620:	79fb      	ldrb	r3, [r7, #7]
 801b622:	68ba      	ldr	r2, [r7, #8]
 801b624:	6839      	ldr	r1, [r7, #0]
 801b626:	68f8      	ldr	r0, [r7, #12]
 801b628:	47a0      	blx	r4
 801b62a:	4603      	mov	r3, r0
 801b62c:	75fb      	strb	r3, [r7, #23]
 801b62e:	e007      	b.n	801b640 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 801b630:	79fb      	ldrb	r3, [r7, #7]
 801b632:	68ba      	ldr	r2, [r7, #8]
 801b634:	6839      	ldr	r1, [r7, #0]
 801b636:	68f8      	ldr	r0, [r7, #12]
 801b638:	f7ff ffa4 	bl	801b584 <default_extension_decoder>
 801b63c:	4603      	mov	r3, r0
 801b63e:	75fb      	strb	r3, [r7, #23]

        if (!status)
 801b640:	7dfb      	ldrb	r3, [r7, #23]
 801b642:	f083 0301 	eor.w	r3, r3, #1
 801b646:	b2db      	uxtb	r3, r3
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d001      	beq.n	801b650 <decode_extension+0x58>
            return false;
 801b64c:	2300      	movs	r3, #0
 801b64e:	e00b      	b.n	801b668 <decode_extension+0x70>
        
        extension = extension->next;
 801b650:	683b      	ldr	r3, [r7, #0]
 801b652:	689b      	ldr	r3, [r3, #8]
 801b654:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 801b656:	683b      	ldr	r3, [r7, #0]
 801b658:	2b00      	cmp	r3, #0
 801b65a:	d004      	beq.n	801b666 <decode_extension+0x6e>
 801b65c:	68fb      	ldr	r3, [r7, #12]
 801b65e:	689b      	ldr	r3, [r3, #8]
 801b660:	693a      	ldr	r2, [r7, #16]
 801b662:	429a      	cmp	r2, r3
 801b664:	d0d4      	beq.n	801b610 <decode_extension+0x18>
    }
    
    return true;
 801b666:	2301      	movs	r3, #1
}
 801b668:	4618      	mov	r0, r3
 801b66a:	371c      	adds	r7, #28
 801b66c:	46bd      	mov	sp, r7
 801b66e:	bd90      	pop	{r4, r7, pc}

0801b670 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 801b670:	b580      	push	{r7, lr}
 801b672:	b08e      	sub	sp, #56	; 0x38
 801b674:	af00      	add	r7, sp, #0
 801b676:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	7d9b      	ldrb	r3, [r3, #22]
 801b67c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 801b680:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b684:	f003 030f 	and.w	r3, r3, #15
 801b688:	2b0a      	cmp	r3, #10
 801b68a:	d124      	bne.n	801b6d6 <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	69db      	ldr	r3, [r3, #28]
 801b690:	681b      	ldr	r3, [r3, #0]
 801b692:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 801b694:	e01b      	b.n	801b6ce <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 801b696:	f107 0308 	add.w	r3, r7, #8
 801b69a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b69c:	4618      	mov	r0, r3
 801b69e:	f7fe ffa1 	bl	801a5e4 <pb_field_iter_begin_extension>
 801b6a2:	4603      	mov	r3, r0
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	d00f      	beq.n	801b6c8 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 801b6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6aa:	2200      	movs	r2, #0
 801b6ac:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 801b6ae:	f107 0308 	add.w	r3, r7, #8
 801b6b2:	4618      	mov	r0, r3
 801b6b4:	f000 f89d 	bl	801b7f2 <pb_message_set_to_defaults>
 801b6b8:	4603      	mov	r3, r0
 801b6ba:	f083 0301 	eor.w	r3, r3, #1
 801b6be:	b2db      	uxtb	r3, r3
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	d001      	beq.n	801b6c8 <pb_field_set_to_default+0x58>
                    return false;
 801b6c4:	2300      	movs	r3, #0
 801b6c6:	e090      	b.n	801b7ea <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 801b6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6ca:	689b      	ldr	r3, [r3, #8]
 801b6cc:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 801b6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d1e0      	bne.n	801b696 <pb_field_set_to_default+0x26>
 801b6d4:	e088      	b.n	801b7e8 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 801b6d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b6da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	d166      	bne.n	801b7b0 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 801b6e2:	2301      	movs	r3, #1
 801b6e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 801b6e8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b6ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801b6f0:	2b10      	cmp	r3, #16
 801b6f2:	d108      	bne.n	801b706 <pb_field_set_to_default+0x96>
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	6a1b      	ldr	r3, [r3, #32]
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d004      	beq.n	801b706 <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	6a1b      	ldr	r3, [r3, #32]
 801b700:	2200      	movs	r2, #0
 801b702:	701a      	strb	r2, [r3, #0]
 801b704:	e012      	b.n	801b72c <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 801b706:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b70a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801b70e:	2b20      	cmp	r3, #32
 801b710:	d005      	beq.n	801b71e <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 801b712:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b716:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 801b71a:	2b30      	cmp	r3, #48	; 0x30
 801b71c:	d106      	bne.n	801b72c <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	6a1b      	ldr	r3, [r3, #32]
 801b722:	2200      	movs	r2, #0
 801b724:	801a      	strh	r2, [r3, #0]
            init_data = false;
 801b726:	2300      	movs	r3, #0
 801b728:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        if (init_data)
 801b72c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801b730:	2b00      	cmp	r3, #0
 801b732:	d059      	beq.n	801b7e8 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	7d9b      	ldrb	r3, [r3, #22]
 801b738:	f003 030f 	and.w	r3, r3, #15
 801b73c:	2b08      	cmp	r3, #8
 801b73e:	d005      	beq.n	801b74c <pb_field_set_to_default+0xdc>
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	7d9b      	ldrb	r3, [r3, #22]
 801b744:	f003 030f 	and.w	r3, r3, #15
 801b748:	2b09      	cmp	r3, #9
 801b74a:	d128      	bne.n	801b79e <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b750:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 801b752:	2b00      	cmp	r3, #0
 801b754:	d10a      	bne.n	801b76c <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b75a:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d105      	bne.n	801b76c <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b764:	685b      	ldr	r3, [r3, #4]
 801b766:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d018      	beq.n	801b79e <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	69da      	ldr	r2, [r3, #28]
 801b774:	f107 0308 	add.w	r3, r7, #8
 801b778:	4618      	mov	r0, r3
 801b77a:	f7fe ff1a 	bl	801a5b2 <pb_field_iter_begin>
 801b77e:	4603      	mov	r3, r0
 801b780:	2b00      	cmp	r3, #0
 801b782:	d030      	beq.n	801b7e6 <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 801b784:	f107 0308 	add.w	r3, r7, #8
 801b788:	4618      	mov	r0, r3
 801b78a:	f000 f832 	bl	801b7f2 <pb_message_set_to_defaults>
 801b78e:	4603      	mov	r3, r0
 801b790:	f083 0301 	eor.w	r3, r3, #1
 801b794:	b2db      	uxtb	r3, r3
 801b796:	2b00      	cmp	r3, #0
 801b798:	d025      	beq.n	801b7e6 <pb_field_set_to_default+0x176>
                        return false;
 801b79a:	2300      	movs	r3, #0
 801b79c:	e025      	b.n	801b7ea <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	69d8      	ldr	r0, [r3, #28]
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	8a5b      	ldrh	r3, [r3, #18]
 801b7a6:	461a      	mov	r2, r3
 801b7a8:	2100      	movs	r1, #0
 801b7aa:	f001 ff31 	bl	801d610 <memset>
 801b7ae:	e01b      	b.n	801b7e8 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 801b7b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b7b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801b7b8:	2b80      	cmp	r3, #128	; 0x80
 801b7ba:	d115      	bne.n	801b7e8 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	699b      	ldr	r3, [r3, #24]
 801b7c0:	2200      	movs	r2, #0
 801b7c2:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 801b7c4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b7c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801b7cc:	2b20      	cmp	r3, #32
 801b7ce:	d005      	beq.n	801b7dc <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 801b7d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b7d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 801b7d8:	2b30      	cmp	r3, #48	; 0x30
 801b7da:	d105      	bne.n	801b7e8 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	6a1b      	ldr	r3, [r3, #32]
 801b7e0:	2200      	movs	r2, #0
 801b7e2:	801a      	strh	r2, [r3, #0]
 801b7e4:	e000      	b.n	801b7e8 <pb_field_set_to_default+0x178>
            {
 801b7e6:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 801b7e8:	2301      	movs	r3, #1
}
 801b7ea:	4618      	mov	r0, r3
 801b7ec:	3738      	adds	r7, #56	; 0x38
 801b7ee:	46bd      	mov	sp, r7
 801b7f0:	bd80      	pop	{r7, pc}

0801b7f2 <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 801b7f2:	b590      	push	{r4, r7, lr}
 801b7f4:	b08d      	sub	sp, #52	; 0x34
 801b7f6:	af00      	add	r7, sp, #0
 801b7f8:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 801b7fa:	f107 0320 	add.w	r3, r7, #32
 801b7fe:	2200      	movs	r2, #0
 801b800:	601a      	str	r2, [r3, #0]
 801b802:	605a      	str	r2, [r3, #4]
 801b804:	609a      	str	r2, [r3, #8]
 801b806:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 801b808:	2300      	movs	r3, #0
 801b80a:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 801b80c:	2300      	movs	r3, #0
 801b80e:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 801b810:	697b      	ldr	r3, [r7, #20]
 801b812:	681b      	ldr	r3, [r3, #0]
 801b814:	689b      	ldr	r3, [r3, #8]
 801b816:	2b00      	cmp	r3, #0
 801b818:	d020      	beq.n	801b85c <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 801b81a:	697b      	ldr	r3, [r7, #20]
 801b81c:	681b      	ldr	r3, [r3, #0]
 801b81e:	6899      	ldr	r1, [r3, #8]
 801b820:	463b      	mov	r3, r7
 801b822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b826:	4618      	mov	r0, r3
 801b828:	f7ff f8e0 	bl	801a9ec <pb_istream_from_buffer>
 801b82c:	f107 0420 	add.w	r4, r7, #32
 801b830:	463b      	mov	r3, r7
 801b832:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b834:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 801b838:	f107 031a 	add.w	r3, r7, #26
 801b83c:	f107 021c 	add.w	r2, r7, #28
 801b840:	f107 011b 	add.w	r1, r7, #27
 801b844:	f107 0020 	add.w	r0, r7, #32
 801b848:	f7ff fa47 	bl	801acda <pb_decode_tag>
 801b84c:	4603      	mov	r3, r0
 801b84e:	f083 0301 	eor.w	r3, r3, #1
 801b852:	b2db      	uxtb	r3, r3
 801b854:	2b00      	cmp	r3, #0
 801b856:	d001      	beq.n	801b85c <pb_message_set_to_defaults+0x6a>
            return false;
 801b858:	2300      	movs	r3, #0
 801b85a:	e043      	b.n	801b8e4 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 801b85c:	6978      	ldr	r0, [r7, #20]
 801b85e:	f7ff ff07 	bl	801b670 <pb_field_set_to_default>
 801b862:	4603      	mov	r3, r0
 801b864:	f083 0301 	eor.w	r3, r3, #1
 801b868:	b2db      	uxtb	r3, r3
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d001      	beq.n	801b872 <pb_message_set_to_defaults+0x80>
            return false;
 801b86e:	2300      	movs	r3, #0
 801b870:	e038      	b.n	801b8e4 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 801b872:	69fb      	ldr	r3, [r7, #28]
 801b874:	2b00      	cmp	r3, #0
 801b876:	d02e      	beq.n	801b8d6 <pb_message_set_to_defaults+0xe4>
 801b878:	697b      	ldr	r3, [r7, #20]
 801b87a:	8a1b      	ldrh	r3, [r3, #16]
 801b87c:	461a      	mov	r2, r3
 801b87e:	69fb      	ldr	r3, [r7, #28]
 801b880:	429a      	cmp	r2, r3
 801b882:	d128      	bne.n	801b8d6 <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 801b884:	7ef9      	ldrb	r1, [r7, #27]
 801b886:	f107 0320 	add.w	r3, r7, #32
 801b88a:	697a      	ldr	r2, [r7, #20]
 801b88c:	4618      	mov	r0, r3
 801b88e:	f7ff fe3b 	bl	801b508 <decode_field>
 801b892:	4603      	mov	r3, r0
 801b894:	f083 0301 	eor.w	r3, r3, #1
 801b898:	b2db      	uxtb	r3, r3
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d001      	beq.n	801b8a2 <pb_message_set_to_defaults+0xb0>
                return false;
 801b89e:	2300      	movs	r3, #0
 801b8a0:	e020      	b.n	801b8e4 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 801b8a2:	f107 031a 	add.w	r3, r7, #26
 801b8a6:	f107 021c 	add.w	r2, r7, #28
 801b8aa:	f107 011b 	add.w	r1, r7, #27
 801b8ae:	f107 0020 	add.w	r0, r7, #32
 801b8b2:	f7ff fa12 	bl	801acda <pb_decode_tag>
 801b8b6:	4603      	mov	r3, r0
 801b8b8:	f083 0301 	eor.w	r3, r3, #1
 801b8bc:	b2db      	uxtb	r3, r3
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	d001      	beq.n	801b8c6 <pb_message_set_to_defaults+0xd4>
                return false;
 801b8c2:	2300      	movs	r3, #0
 801b8c4:	e00e      	b.n	801b8e4 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 801b8c6:	697b      	ldr	r3, [r7, #20]
 801b8c8:	6a1b      	ldr	r3, [r3, #32]
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	d003      	beq.n	801b8d6 <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 801b8ce:	697b      	ldr	r3, [r7, #20]
 801b8d0:	6a1b      	ldr	r3, [r3, #32]
 801b8d2:	2200      	movs	r2, #0
 801b8d4:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 801b8d6:	6978      	ldr	r0, [r7, #20]
 801b8d8:	f7fe feb4 	bl	801a644 <pb_field_iter_next>
 801b8dc:	4603      	mov	r3, r0
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	d1bc      	bne.n	801b85c <pb_message_set_to_defaults+0x6a>

    return true;
 801b8e2:	2301      	movs	r3, #1
}
 801b8e4:	4618      	mov	r0, r3
 801b8e6:	3734      	adds	r7, #52	; 0x34
 801b8e8:	46bd      	mov	sp, r7
 801b8ea:	bd90      	pop	{r4, r7, pc}

0801b8ec <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 801b8ec:	b580      	push	{r7, lr}
 801b8ee:	b09a      	sub	sp, #104	; 0x68
 801b8f0:	af00      	add	r7, sp, #0
 801b8f2:	60f8      	str	r0, [r7, #12]
 801b8f4:	60b9      	str	r1, [r7, #8]
 801b8f6:	607a      	str	r2, [r7, #4]
 801b8f8:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 801b8fa:	2300      	movs	r3, #0
 801b8fc:	667b      	str	r3, [r7, #100]	; 0x64
    pb_extension_t *extensions = NULL;
 801b8fe:	2300      	movs	r3, #0
 801b900:	663b      	str	r3, [r7, #96]	; 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 801b902:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b906:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    pb_size_t fixed_count_size = 0;
 801b90a:	2300      	movs	r3, #0
 801b90c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    pb_size_t fixed_count_total_size = 0;
 801b910:	2300      	movs	r3, #0
 801b912:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 801b916:	2300      	movs	r3, #0
 801b918:	643b      	str	r3, [r7, #64]	; 0x40
 801b91a:	2300      	movs	r3, #0
 801b91c:	647b      	str	r3, [r7, #68]	; 0x44
    const uint32_t allbits = ~(uint32_t)0;
 801b91e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b922:	657b      	str	r3, [r7, #84]	; 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 801b924:	f107 0318 	add.w	r3, r7, #24
 801b928:	687a      	ldr	r2, [r7, #4]
 801b92a:	68b9      	ldr	r1, [r7, #8]
 801b92c:	4618      	mov	r0, r3
 801b92e:	f7fe fe40 	bl	801a5b2 <pb_field_iter_begin>
 801b932:	4603      	mov	r3, r0
 801b934:	2b00      	cmp	r3, #0
 801b936:	f000 8102 	beq.w	801bb3e <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 801b93a:	683b      	ldr	r3, [r7, #0]
 801b93c:	f003 0301 	and.w	r3, r3, #1
 801b940:	2b00      	cmp	r3, #0
 801b942:	f040 80fc 	bne.w	801bb3e <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 801b946:	f107 0318 	add.w	r3, r7, #24
 801b94a:	4618      	mov	r0, r3
 801b94c:	f7ff ff51 	bl	801b7f2 <pb_message_set_to_defaults>
 801b950:	4603      	mov	r3, r0
 801b952:	f083 0301 	eor.w	r3, r3, #1
 801b956:	b2db      	uxtb	r3, r3
 801b958:	2b00      	cmp	r3, #0
 801b95a:	f000 80f0 	beq.w	801bb3e <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 801b95e:	68fb      	ldr	r3, [r7, #12]
 801b960:	68db      	ldr	r3, [r3, #12]
 801b962:	2b00      	cmp	r3, #0
 801b964:	d002      	beq.n	801b96c <pb_decode_inner+0x80>
 801b966:	68fb      	ldr	r3, [r7, #12]
 801b968:	68db      	ldr	r3, [r3, #12]
 801b96a:	e000      	b.n	801b96e <pb_decode_inner+0x82>
 801b96c:	4b99      	ldr	r3, [pc, #612]	; (801bbd4 <pb_decode_inner+0x2e8>)
 801b96e:	68fa      	ldr	r2, [r7, #12]
 801b970:	60d3      	str	r3, [r2, #12]
 801b972:	2300      	movs	r3, #0
 801b974:	e16d      	b.n	801bc52 <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 801b976:	f107 0312 	add.w	r3, r7, #18
 801b97a:	f107 0214 	add.w	r2, r7, #20
 801b97e:	f107 0113 	add.w	r1, r7, #19
 801b982:	68f8      	ldr	r0, [r7, #12]
 801b984:	f7ff f9a9 	bl	801acda <pb_decode_tag>
 801b988:	4603      	mov	r3, r0
 801b98a:	f083 0301 	eor.w	r3, r3, #1
 801b98e:	b2db      	uxtb	r3, r3
 801b990:	2b00      	cmp	r3, #0
 801b992:	d005      	beq.n	801b9a0 <pb_decode_inner+0xb4>
        {
            if (eof)
 801b994:	7cbb      	ldrb	r3, [r7, #18]
 801b996:	2b00      	cmp	r3, #0
 801b998:	f040 80d7 	bne.w	801bb4a <pb_decode_inner+0x25e>
                break;
            else
                return false;
 801b99c:	2300      	movs	r3, #0
 801b99e:	e158      	b.n	801bc52 <pb_decode_inner+0x366>
        }

        if (tag == 0)
 801b9a0:	697b      	ldr	r3, [r7, #20]
 801b9a2:	2b00      	cmp	r3, #0
 801b9a4:	d111      	bne.n	801b9ca <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 801b9a6:	683b      	ldr	r3, [r7, #0]
 801b9a8:	f003 0304 	and.w	r3, r3, #4
 801b9ac:	2b00      	cmp	r3, #0
 801b9ae:	f040 80ce 	bne.w	801bb4e <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 801b9b2:	68fb      	ldr	r3, [r7, #12]
 801b9b4:	68db      	ldr	r3, [r3, #12]
 801b9b6:	2b00      	cmp	r3, #0
 801b9b8:	d002      	beq.n	801b9c0 <pb_decode_inner+0xd4>
 801b9ba:	68fb      	ldr	r3, [r7, #12]
 801b9bc:	68db      	ldr	r3, [r3, #12]
 801b9be:	e000      	b.n	801b9c2 <pb_decode_inner+0xd6>
 801b9c0:	4b85      	ldr	r3, [pc, #532]	; (801bbd8 <pb_decode_inner+0x2ec>)
 801b9c2:	68fa      	ldr	r2, [r7, #12]
 801b9c4:	60d3      	str	r3, [r2, #12]
 801b9c6:	2300      	movs	r3, #0
 801b9c8:	e143      	b.n	801bc52 <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 801b9ca:	697a      	ldr	r2, [r7, #20]
 801b9cc:	f107 0318 	add.w	r3, r7, #24
 801b9d0:	4611      	mov	r1, r2
 801b9d2:	4618      	mov	r0, r3
 801b9d4:	f7fe fe4b 	bl	801a66e <pb_field_iter_find>
 801b9d8:	4603      	mov	r3, r0
 801b9da:	f083 0301 	eor.w	r3, r3, #1
 801b9de:	b2db      	uxtb	r3, r3
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	d105      	bne.n	801b9f0 <pb_decode_inner+0x104>
 801b9e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801b9e8:	f003 030f 	and.w	r3, r3, #15
 801b9ec:	2b0a      	cmp	r3, #10
 801b9ee:	d13c      	bne.n	801ba6a <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 801b9f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	d112      	bne.n	801ba1c <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 801b9f6:	f107 0318 	add.w	r3, r7, #24
 801b9fa:	4618      	mov	r0, r3
 801b9fc:	f7fe fe8d 	bl	801a71a <pb_field_iter_find_extension>
 801ba00:	4603      	mov	r3, r0
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d004      	beq.n	801ba10 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 801ba06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ba08:	681b      	ldr	r3, [r3, #0]
 801ba0a:	663b      	str	r3, [r7, #96]	; 0x60
                    extension_range_start = iter.tag;
 801ba0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801ba0e:	667b      	str	r3, [r7, #100]	; 0x64
                }

                if (!extensions)
 801ba10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d102      	bne.n	801ba1c <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 801ba16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ba1a:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            if (tag >= extension_range_start)
 801ba1c:	697b      	ldr	r3, [r7, #20]
 801ba1e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801ba20:	429a      	cmp	r2, r3
 801ba22:	d815      	bhi.n	801ba50 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 801ba24:	68fb      	ldr	r3, [r7, #12]
 801ba26:	689b      	ldr	r3, [r3, #8]
 801ba28:	64fb      	str	r3, [r7, #76]	; 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 801ba2a:	6979      	ldr	r1, [r7, #20]
 801ba2c:	7cfa      	ldrb	r2, [r7, #19]
 801ba2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ba30:	68f8      	ldr	r0, [r7, #12]
 801ba32:	f7ff fde1 	bl	801b5f8 <decode_extension>
 801ba36:	4603      	mov	r3, r0
 801ba38:	f083 0301 	eor.w	r3, r3, #1
 801ba3c:	b2db      	uxtb	r3, r3
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d001      	beq.n	801ba46 <pb_decode_inner+0x15a>
                    return false;
 801ba42:	2300      	movs	r3, #0
 801ba44:	e105      	b.n	801bc52 <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 801ba46:	68fb      	ldr	r3, [r7, #12]
 801ba48:	689b      	ldr	r3, [r3, #8]
 801ba4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ba4c:	429a      	cmp	r2, r3
 801ba4e:	d173      	bne.n	801bb38 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 801ba50:	7cfb      	ldrb	r3, [r7, #19]
 801ba52:	4619      	mov	r1, r3
 801ba54:	68f8      	ldr	r0, [r7, #12]
 801ba56:	f7ff f96f 	bl	801ad38 <pb_skip_field>
 801ba5a:	4603      	mov	r3, r0
 801ba5c:	f083 0301 	eor.w	r3, r3, #1
 801ba60:	b2db      	uxtb	r3, r3
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d06a      	beq.n	801bb3c <pb_decode_inner+0x250>
                return false;
 801ba66:	2300      	movs	r3, #0
 801ba68:	e0f3      	b.n	801bc52 <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 801ba6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801ba6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801ba72:	2b20      	cmp	r3, #32
 801ba74:	d12e      	bne.n	801bad4 <pb_decode_inner+0x1e8>
 801ba76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ba78:	f107 0318 	add.w	r3, r7, #24
 801ba7c:	3314      	adds	r3, #20
 801ba7e:	429a      	cmp	r2, r3
 801ba80:	d128      	bne.n	801bad4 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 801ba82:	8c3b      	ldrh	r3, [r7, #32]
 801ba84:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801ba88:	429a      	cmp	r2, r3
 801ba8a:	d020      	beq.n	801bace <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 801ba8c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801ba90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ba94:	4293      	cmp	r3, r2
 801ba96:	d011      	beq.n	801babc <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 801ba98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 801ba9c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801baa0:	429a      	cmp	r2, r3
 801baa2:	d00b      	beq.n	801babc <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 801baa4:	68fb      	ldr	r3, [r7, #12]
 801baa6:	68db      	ldr	r3, [r3, #12]
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	d002      	beq.n	801bab2 <pb_decode_inner+0x1c6>
 801baac:	68fb      	ldr	r3, [r7, #12]
 801baae:	68db      	ldr	r3, [r3, #12]
 801bab0:	e000      	b.n	801bab4 <pb_decode_inner+0x1c8>
 801bab2:	4b4a      	ldr	r3, [pc, #296]	; (801bbdc <pb_decode_inner+0x2f0>)
 801bab4:	68fa      	ldr	r2, [r7, #12]
 801bab6:	60d3      	str	r3, [r2, #12]
 801bab8:	2300      	movs	r3, #0
 801baba:	e0ca      	b.n	801bc52 <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 801babc:	8c3b      	ldrh	r3, [r7, #32]
 801babe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                fixed_count_size = 0;
 801bac2:	2300      	movs	r3, #0
 801bac4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                fixed_count_total_size = iter.array_size;
 801bac8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801baca:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }

            iter.pSize = &fixed_count_size;
 801bace:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 801bad2:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 801bad4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801bad8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801badc:	2b00      	cmp	r3, #0
 801bade:	d11c      	bne.n	801bb1a <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 801bae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bae2:	2b3f      	cmp	r3, #63	; 0x3f
 801bae4:	d819      	bhi.n	801bb1a <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 801bae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bae8:	f003 031f 	and.w	r3, r3, #31
 801baec:	2201      	movs	r2, #1
 801baee:	fa02 f303 	lsl.w	r3, r2, r3
 801baf2:	653b      	str	r3, [r7, #80]	; 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 801baf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801baf6:	095b      	lsrs	r3, r3, #5
 801baf8:	b29b      	uxth	r3, r3
 801bafa:	009b      	lsls	r3, r3, #2
 801bafc:	3368      	adds	r3, #104	; 0x68
 801bafe:	443b      	add	r3, r7
 801bb00:	f853 2c28 	ldr.w	r2, [r3, #-40]
 801bb04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bb06:	095b      	lsrs	r3, r3, #5
 801bb08:	b29b      	uxth	r3, r3
 801bb0a:	4619      	mov	r1, r3
 801bb0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb0e:	431a      	orrs	r2, r3
 801bb10:	008b      	lsls	r3, r1, #2
 801bb12:	3368      	adds	r3, #104	; 0x68
 801bb14:	443b      	add	r3, r7
 801bb16:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 801bb1a:	7cfb      	ldrb	r3, [r7, #19]
 801bb1c:	f107 0218 	add.w	r2, r7, #24
 801bb20:	4619      	mov	r1, r3
 801bb22:	68f8      	ldr	r0, [r7, #12]
 801bb24:	f7ff fcf0 	bl	801b508 <decode_field>
 801bb28:	4603      	mov	r3, r0
 801bb2a:	f083 0301 	eor.w	r3, r3, #1
 801bb2e:	b2db      	uxtb	r3, r3
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d004      	beq.n	801bb3e <pb_decode_inner+0x252>
            return false;
 801bb34:	2300      	movs	r3, #0
 801bb36:	e08c      	b.n	801bc52 <pb_decode_inner+0x366>
                    continue;
 801bb38:	bf00      	nop
 801bb3a:	e000      	b.n	801bb3e <pb_decode_inner+0x252>
            continue;
 801bb3c:	bf00      	nop
    while (stream->bytes_left)
 801bb3e:	68fb      	ldr	r3, [r7, #12]
 801bb40:	689b      	ldr	r3, [r3, #8]
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	f47f af17 	bne.w	801b976 <pb_decode_inner+0x8a>
 801bb48:	e002      	b.n	801bb50 <pb_decode_inner+0x264>
                break;
 801bb4a:	bf00      	nop
 801bb4c:	e000      	b.n	801bb50 <pb_decode_inner+0x264>
            break;
 801bb4e:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 801bb50:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801bb54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bb58:	4293      	cmp	r3, r2
 801bb5a:	d011      	beq.n	801bb80 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 801bb5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 801bb60:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801bb64:	429a      	cmp	r2, r3
 801bb66:	d00b      	beq.n	801bb80 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 801bb68:	68fb      	ldr	r3, [r7, #12]
 801bb6a:	68db      	ldr	r3, [r3, #12]
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d002      	beq.n	801bb76 <pb_decode_inner+0x28a>
 801bb70:	68fb      	ldr	r3, [r7, #12]
 801bb72:	68db      	ldr	r3, [r3, #12]
 801bb74:	e000      	b.n	801bb78 <pb_decode_inner+0x28c>
 801bb76:	4b19      	ldr	r3, [pc, #100]	; (801bbdc <pb_decode_inner+0x2f0>)
 801bb78:	68fa      	ldr	r2, [r7, #12]
 801bb7a:	60d3      	str	r3, [r2, #12]
 801bb7c:	2300      	movs	r3, #0
 801bb7e:	e068      	b.n	801bc52 <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 801bb80:	69bb      	ldr	r3, [r7, #24]
 801bb82:	8a5b      	ldrh	r3, [r3, #18]
 801bb84:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        if (req_field_count > 0)
 801bb88:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d05f      	beq.n	801bc50 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 801bb90:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801bb94:	2b40      	cmp	r3, #64	; 0x40
 801bb96:	d902      	bls.n	801bb9e <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 801bb98:	2340      	movs	r3, #64	; 0x40
 801bb9a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 801bb9e:	2300      	movs	r3, #0
 801bba0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 801bba4:	e023      	b.n	801bbee <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 801bba6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 801bbaa:	009b      	lsls	r3, r3, #2
 801bbac:	3368      	adds	r3, #104	; 0x68
 801bbae:	443b      	add	r3, r7
 801bbb0:	f853 3c28 	ldr.w	r3, [r3, #-40]
 801bbb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bbb6:	429a      	cmp	r2, r3
 801bbb8:	d014      	beq.n	801bbe4 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 801bbba:	68fb      	ldr	r3, [r7, #12]
 801bbbc:	68db      	ldr	r3, [r3, #12]
 801bbbe:	2b00      	cmp	r3, #0
 801bbc0:	d002      	beq.n	801bbc8 <pb_decode_inner+0x2dc>
 801bbc2:	68fb      	ldr	r3, [r7, #12]
 801bbc4:	68db      	ldr	r3, [r3, #12]
 801bbc6:	e000      	b.n	801bbca <pb_decode_inner+0x2de>
 801bbc8:	4b05      	ldr	r3, [pc, #20]	; (801bbe0 <pb_decode_inner+0x2f4>)
 801bbca:	68fa      	ldr	r2, [r7, #12]
 801bbcc:	60d3      	str	r3, [r2, #12]
 801bbce:	2300      	movs	r3, #0
 801bbd0:	e03f      	b.n	801bc52 <pb_decode_inner+0x366>
 801bbd2:	bf00      	nop
 801bbd4:	08021ecc 	.word	0x08021ecc
 801bbd8:	08021f1c 	.word	0x08021f1c
 801bbdc:	08021f28 	.word	0x08021f28
 801bbe0:	08021f4c 	.word	0x08021f4c
            for (i = 0; i < (req_field_count >> 5); i++)
 801bbe4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 801bbe8:	3301      	adds	r3, #1
 801bbea:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 801bbee:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801bbf2:	095b      	lsrs	r3, r3, #5
 801bbf4:	b29b      	uxth	r3, r3
 801bbf6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 801bbfa:	429a      	cmp	r2, r3
 801bbfc:	d3d3      	bcc.n	801bba6 <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 801bbfe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801bc02:	f003 031f 	and.w	r3, r3, #31
 801bc06:	2b00      	cmp	r3, #0
 801bc08:	d022      	beq.n	801bc50 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 801bc0a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801bc0e:	095b      	lsrs	r3, r3, #5
 801bc10:	b29b      	uxth	r3, r3
 801bc12:	009b      	lsls	r3, r3, #2
 801bc14:	3368      	adds	r3, #104	; 0x68
 801bc16:	443b      	add	r3, r7
 801bc18:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 801bc1c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801bc20:	b2db      	uxtb	r3, r3
 801bc22:	f003 031f 	and.w	r3, r3, #31
 801bc26:	b2db      	uxtb	r3, r3
 801bc28:	f1c3 0320 	rsb	r3, r3, #32
 801bc2c:	b2db      	uxtb	r3, r3
 801bc2e:	4619      	mov	r1, r3
 801bc30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bc32:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 801bc34:	429a      	cmp	r2, r3
 801bc36:	d00b      	beq.n	801bc50 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 801bc38:	68fb      	ldr	r3, [r7, #12]
 801bc3a:	68db      	ldr	r3, [r3, #12]
 801bc3c:	2b00      	cmp	r3, #0
 801bc3e:	d002      	beq.n	801bc46 <pb_decode_inner+0x35a>
 801bc40:	68fb      	ldr	r3, [r7, #12]
 801bc42:	68db      	ldr	r3, [r3, #12]
 801bc44:	e000      	b.n	801bc48 <pb_decode_inner+0x35c>
 801bc46:	4b05      	ldr	r3, [pc, #20]	; (801bc5c <pb_decode_inner+0x370>)
 801bc48:	68fa      	ldr	r2, [r7, #12]
 801bc4a:	60d3      	str	r3, [r2, #12]
 801bc4c:	2300      	movs	r3, #0
 801bc4e:	e000      	b.n	801bc52 <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 801bc50:	2301      	movs	r3, #1
}
 801bc52:	4618      	mov	r0, r3
 801bc54:	3768      	adds	r7, #104	; 0x68
 801bc56:	46bd      	mov	sp, r7
 801bc58:	bd80      	pop	{r7, pc}
 801bc5a:	bf00      	nop
 801bc5c:	08021f4c 	.word	0x08021f4c

0801bc60 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 801bc60:	b580      	push	{r7, lr}
 801bc62:	b086      	sub	sp, #24
 801bc64:	af00      	add	r7, sp, #0
 801bc66:	60f8      	str	r0, [r7, #12]
 801bc68:	60b9      	str	r1, [r7, #8]
 801bc6a:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 801bc6c:	2300      	movs	r3, #0
 801bc6e:	687a      	ldr	r2, [r7, #4]
 801bc70:	68b9      	ldr	r1, [r7, #8]
 801bc72:	68f8      	ldr	r0, [r7, #12]
 801bc74:	f7ff fe3a 	bl	801b8ec <pb_decode_inner>
 801bc78:	4603      	mov	r3, r0
 801bc7a:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 801bc7c:	7dfb      	ldrb	r3, [r7, #23]
}
 801bc7e:	4618      	mov	r0, r3
 801bc80:	3718      	adds	r7, #24
 801bc82:	46bd      	mov	sp, r7
 801bc84:	bd80      	pop	{r7, pc}

0801bc86 <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 801bc86:	b580      	push	{r7, lr}
 801bc88:	b084      	sub	sp, #16
 801bc8a:	af00      	add	r7, sp, #0
 801bc8c:	6078      	str	r0, [r7, #4]
 801bc8e:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 801bc90:	f107 030c 	add.w	r3, r7, #12
 801bc94:	4619      	mov	r1, r3
 801bc96:	6878      	ldr	r0, [r7, #4]
 801bc98:	f7fe ff70 	bl	801ab7c <pb_decode_varint32>
 801bc9c:	4603      	mov	r3, r0
 801bc9e:	f083 0301 	eor.w	r3, r3, #1
 801bca2:	b2db      	uxtb	r3, r3
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	d001      	beq.n	801bcac <pb_decode_bool+0x26>
        return false;
 801bca8:	2300      	movs	r3, #0
 801bcaa:	e008      	b.n	801bcbe <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 801bcac:	68fb      	ldr	r3, [r7, #12]
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	bf14      	ite	ne
 801bcb2:	2301      	movne	r3, #1
 801bcb4:	2300      	moveq	r3, #0
 801bcb6:	b2da      	uxtb	r2, r3
 801bcb8:	683b      	ldr	r3, [r7, #0]
 801bcba:	701a      	strb	r2, [r3, #0]
    return true;
 801bcbc:	2301      	movs	r3, #1
}
 801bcbe:	4618      	mov	r0, r3
 801bcc0:	3710      	adds	r7, #16
 801bcc2:	46bd      	mov	sp, r7
 801bcc4:	bd80      	pop	{r7, pc}

0801bcc6 <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 801bcc6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801bcca:	b084      	sub	sp, #16
 801bccc:	af00      	add	r7, sp, #0
 801bcce:	6078      	str	r0, [r7, #4]
 801bcd0:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 801bcd2:	f107 0308 	add.w	r3, r7, #8
 801bcd6:	4619      	mov	r1, r3
 801bcd8:	6878      	ldr	r0, [r7, #4]
 801bcda:	f7fe ff5f 	bl	801ab9c <pb_decode_varint>
 801bcde:	4603      	mov	r3, r0
 801bce0:	f083 0301 	eor.w	r3, r3, #1
 801bce4:	b2db      	uxtb	r3, r3
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d001      	beq.n	801bcee <pb_decode_svarint+0x28>
        return false;
 801bcea:	2300      	movs	r3, #0
 801bcec:	e029      	b.n	801bd42 <pb_decode_svarint+0x7c>
    
    if (value & 1)
 801bcee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801bcf2:	f002 0401 	and.w	r4, r2, #1
 801bcf6:	2500      	movs	r5, #0
 801bcf8:	ea54 0305 	orrs.w	r3, r4, r5
 801bcfc:	d013      	beq.n	801bd26 <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 801bcfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801bd02:	f04f 0200 	mov.w	r2, #0
 801bd06:	f04f 0300 	mov.w	r3, #0
 801bd0a:	0842      	lsrs	r2, r0, #1
 801bd0c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801bd10:	084b      	lsrs	r3, r1, #1
 801bd12:	ea6f 0802 	mvn.w	r8, r2
 801bd16:	ea6f 0903 	mvn.w	r9, r3
 801bd1a:	4642      	mov	r2, r8
 801bd1c:	464b      	mov	r3, r9
 801bd1e:	6839      	ldr	r1, [r7, #0]
 801bd20:	e9c1 2300 	strd	r2, r3, [r1]
 801bd24:	e00c      	b.n	801bd40 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 801bd26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801bd2a:	f04f 0200 	mov.w	r2, #0
 801bd2e:	f04f 0300 	mov.w	r3, #0
 801bd32:	0842      	lsrs	r2, r0, #1
 801bd34:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801bd38:	084b      	lsrs	r3, r1, #1
 801bd3a:	6839      	ldr	r1, [r7, #0]
 801bd3c:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 801bd40:	2301      	movs	r3, #1
}
 801bd42:	4618      	mov	r0, r3
 801bd44:	3710      	adds	r7, #16
 801bd46:	46bd      	mov	sp, r7
 801bd48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801bd4c <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 801bd4c:	b580      	push	{r7, lr}
 801bd4e:	b084      	sub	sp, #16
 801bd50:	af00      	add	r7, sp, #0
 801bd52:	6078      	str	r0, [r7, #4]
 801bd54:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 801bd56:	f107 030c 	add.w	r3, r7, #12
 801bd5a:	2204      	movs	r2, #4
 801bd5c:	4619      	mov	r1, r3
 801bd5e:	6878      	ldr	r0, [r7, #4]
 801bd60:	f7fe fd92 	bl	801a888 <pb_read>
 801bd64:	4603      	mov	r3, r0
 801bd66:	f083 0301 	eor.w	r3, r3, #1
 801bd6a:	b2db      	uxtb	r3, r3
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d001      	beq.n	801bd74 <pb_decode_fixed32+0x28>
        return false;
 801bd70:	2300      	movs	r3, #0
 801bd72:	e003      	b.n	801bd7c <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 801bd74:	68fa      	ldr	r2, [r7, #12]
 801bd76:	683b      	ldr	r3, [r7, #0]
 801bd78:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 801bd7a:	2301      	movs	r3, #1
}
 801bd7c:	4618      	mov	r0, r3
 801bd7e:	3710      	adds	r7, #16
 801bd80:	46bd      	mov	sp, r7
 801bd82:	bd80      	pop	{r7, pc}

0801bd84 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 801bd84:	b580      	push	{r7, lr}
 801bd86:	b084      	sub	sp, #16
 801bd88:	af00      	add	r7, sp, #0
 801bd8a:	6078      	str	r0, [r7, #4]
 801bd8c:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 801bd8e:	f107 0308 	add.w	r3, r7, #8
 801bd92:	2208      	movs	r2, #8
 801bd94:	4619      	mov	r1, r3
 801bd96:	6878      	ldr	r0, [r7, #4]
 801bd98:	f7fe fd76 	bl	801a888 <pb_read>
 801bd9c:	4603      	mov	r3, r0
 801bd9e:	f083 0301 	eor.w	r3, r3, #1
 801bda2:	b2db      	uxtb	r3, r3
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	d001      	beq.n	801bdac <pb_decode_fixed64+0x28>
        return false;
 801bda8:	2300      	movs	r3, #0
 801bdaa:	e005      	b.n	801bdb8 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 801bdac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801bdb0:	6839      	ldr	r1, [r7, #0]
 801bdb2:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 801bdb6:	2301      	movs	r3, #1
}
 801bdb8:	4618      	mov	r0, r3
 801bdba:	3710      	adds	r7, #16
 801bdbc:	46bd      	mov	sp, r7
 801bdbe:	bd80      	pop	{r7, pc}

0801bdc0 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801bdc0:	b580      	push	{r7, lr}
 801bdc2:	b082      	sub	sp, #8
 801bdc4:	af00      	add	r7, sp, #0
 801bdc6:	6078      	str	r0, [r7, #4]
 801bdc8:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 801bdca:	683b      	ldr	r3, [r7, #0]
 801bdcc:	69db      	ldr	r3, [r3, #28]
 801bdce:	4619      	mov	r1, r3
 801bdd0:	6878      	ldr	r0, [r7, #4]
 801bdd2:	f7ff ff58 	bl	801bc86 <pb_decode_bool>
 801bdd6:	4603      	mov	r3, r0
}
 801bdd8:	4618      	mov	r0, r3
 801bdda:	3708      	adds	r7, #8
 801bddc:	46bd      	mov	sp, r7
 801bdde:	bd80      	pop	{r7, pc}

0801bde0 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801bde0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bde4:	b094      	sub	sp, #80	; 0x50
 801bde6:	af00      	add	r7, sp, #0
 801bde8:	6278      	str	r0, [r7, #36]	; 0x24
 801bdea:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 801bdec:	6a3b      	ldr	r3, [r7, #32]
 801bdee:	7d9b      	ldrb	r3, [r3, #22]
 801bdf0:	f003 030f 	and.w	r3, r3, #15
 801bdf4:	2b02      	cmp	r3, #2
 801bdf6:	d179      	bne.n	801beec <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 801bdf8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bdfc:	4619      	mov	r1, r3
 801bdfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801be00:	f7fe fecc 	bl	801ab9c <pb_decode_varint>
 801be04:	4603      	mov	r3, r0
 801be06:	f083 0301 	eor.w	r3, r3, #1
 801be0a:	b2db      	uxtb	r3, r3
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	d001      	beq.n	801be14 <pb_dec_varint+0x34>
            return false;
 801be10:	2300      	movs	r3, #0
 801be12:	e107      	b.n	801c024 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 801be14:	6a3b      	ldr	r3, [r7, #32]
 801be16:	8a5b      	ldrh	r3, [r3, #18]
 801be18:	2b08      	cmp	r3, #8
 801be1a:	d10a      	bne.n	801be32 <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 801be1c:	6a3b      	ldr	r3, [r7, #32]
 801be1e:	69d9      	ldr	r1, [r3, #28]
 801be20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801be24:	e9c1 2300 	strd	r2, r3, [r1]
 801be28:	e9d1 2300 	ldrd	r2, r3, [r1]
 801be2c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 801be30:	e046      	b.n	801bec0 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 801be32:	6a3b      	ldr	r3, [r7, #32]
 801be34:	8a5b      	ldrh	r3, [r3, #18]
 801be36:	2b04      	cmp	r3, #4
 801be38:	d10e      	bne.n	801be58 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 801be3a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801be3e:	6a3b      	ldr	r3, [r7, #32]
 801be40:	69db      	ldr	r3, [r3, #28]
 801be42:	4602      	mov	r2, r0
 801be44:	601a      	str	r2, [r3, #0]
 801be46:	681b      	ldr	r3, [r3, #0]
 801be48:	2200      	movs	r2, #0
 801be4a:	613b      	str	r3, [r7, #16]
 801be4c:	617a      	str	r2, [r7, #20]
 801be4e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801be52:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801be56:	e033      	b.n	801bec0 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 801be58:	6a3b      	ldr	r3, [r7, #32]
 801be5a:	8a5b      	ldrh	r3, [r3, #18]
 801be5c:	2b02      	cmp	r3, #2
 801be5e:	d10f      	bne.n	801be80 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 801be60:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801be64:	6a3b      	ldr	r3, [r7, #32]
 801be66:	69db      	ldr	r3, [r3, #28]
 801be68:	b282      	uxth	r2, r0
 801be6a:	801a      	strh	r2, [r3, #0]
 801be6c:	881b      	ldrh	r3, [r3, #0]
 801be6e:	b29b      	uxth	r3, r3
 801be70:	2200      	movs	r2, #0
 801be72:	60bb      	str	r3, [r7, #8]
 801be74:	60fa      	str	r2, [r7, #12]
 801be76:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801be7a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801be7e:	e01f      	b.n	801bec0 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 801be80:	6a3b      	ldr	r3, [r7, #32]
 801be82:	8a5b      	ldrh	r3, [r3, #18]
 801be84:	2b01      	cmp	r3, #1
 801be86:	d10f      	bne.n	801bea8 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 801be88:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801be8c:	6a3b      	ldr	r3, [r7, #32]
 801be8e:	69db      	ldr	r3, [r3, #28]
 801be90:	b2c2      	uxtb	r2, r0
 801be92:	701a      	strb	r2, [r3, #0]
 801be94:	781b      	ldrb	r3, [r3, #0]
 801be96:	b2db      	uxtb	r3, r3
 801be98:	2200      	movs	r2, #0
 801be9a:	603b      	str	r3, [r7, #0]
 801be9c:	607a      	str	r2, [r7, #4]
 801be9e:	e9d7 3400 	ldrd	r3, r4, [r7]
 801bea2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801bea6:	e00b      	b.n	801bec0 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 801bea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801beaa:	68db      	ldr	r3, [r3, #12]
 801beac:	2b00      	cmp	r3, #0
 801beae:	d002      	beq.n	801beb6 <pb_dec_varint+0xd6>
 801beb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801beb2:	68db      	ldr	r3, [r3, #12]
 801beb4:	e000      	b.n	801beb8 <pb_dec_varint+0xd8>
 801beb6:	4b5e      	ldr	r3, [pc, #376]	; (801c030 <pb_dec_varint+0x250>)
 801beb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801beba:	60d3      	str	r3, [r2, #12]
 801bebc:	2300      	movs	r3, #0
 801bebe:	e0b1      	b.n	801c024 <pb_dec_varint+0x244>

        if (clamped != value)
 801bec0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801bec4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801bec8:	4299      	cmp	r1, r3
 801beca:	bf08      	it	eq
 801becc:	4290      	cmpeq	r0, r2
 801bece:	d00b      	beq.n	801bee8 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 801bed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bed2:	68db      	ldr	r3, [r3, #12]
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	d002      	beq.n	801bede <pb_dec_varint+0xfe>
 801bed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801beda:	68db      	ldr	r3, [r3, #12]
 801bedc:	e000      	b.n	801bee0 <pb_dec_varint+0x100>
 801bede:	4b55      	ldr	r3, [pc, #340]	; (801c034 <pb_dec_varint+0x254>)
 801bee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bee2:	60d3      	str	r3, [r2, #12]
 801bee4:	2300      	movs	r3, #0
 801bee6:	e09d      	b.n	801c024 <pb_dec_varint+0x244>

        return true;
 801bee8:	2301      	movs	r3, #1
 801beea:	e09b      	b.n	801c024 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 801beec:	6a3b      	ldr	r3, [r7, #32]
 801beee:	7d9b      	ldrb	r3, [r3, #22]
 801bef0:	f003 030f 	and.w	r3, r3, #15
 801bef4:	2b03      	cmp	r3, #3
 801bef6:	d10d      	bne.n	801bf14 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 801bef8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801befc:	4619      	mov	r1, r3
 801befe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bf00:	f7ff fee1 	bl	801bcc6 <pb_decode_svarint>
 801bf04:	4603      	mov	r3, r0
 801bf06:	f083 0301 	eor.w	r3, r3, #1
 801bf0a:	b2db      	uxtb	r3, r3
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	d022      	beq.n	801bf56 <pb_dec_varint+0x176>
                return false;
 801bf10:	2300      	movs	r3, #0
 801bf12:	e087      	b.n	801c024 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 801bf14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bf18:	4619      	mov	r1, r3
 801bf1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bf1c:	f7fe fe3e 	bl	801ab9c <pb_decode_varint>
 801bf20:	4603      	mov	r3, r0
 801bf22:	f083 0301 	eor.w	r3, r3, #1
 801bf26:	b2db      	uxtb	r3, r3
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	d001      	beq.n	801bf30 <pb_dec_varint+0x150>
                return false;
 801bf2c:	2300      	movs	r3, #0
 801bf2e:	e079      	b.n	801c024 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 801bf30:	6a3b      	ldr	r3, [r7, #32]
 801bf32:	8a5b      	ldrh	r3, [r3, #18]
 801bf34:	2b08      	cmp	r3, #8
 801bf36:	d104      	bne.n	801bf42 <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 801bf38:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801bf3c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801bf40:	e009      	b.n	801bf56 <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 801bf42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801bf46:	4613      	mov	r3, r2
 801bf48:	17da      	asrs	r2, r3, #31
 801bf4a:	61bb      	str	r3, [r7, #24]
 801bf4c:	61fa      	str	r2, [r7, #28]
 801bf4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801bf52:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 801bf56:	6a3b      	ldr	r3, [r7, #32]
 801bf58:	8a5b      	ldrh	r3, [r3, #18]
 801bf5a:	2b08      	cmp	r3, #8
 801bf5c:	d10a      	bne.n	801bf74 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 801bf5e:	6a3b      	ldr	r3, [r7, #32]
 801bf60:	69d9      	ldr	r1, [r3, #28]
 801bf62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801bf66:	e9c1 2300 	strd	r2, r3, [r1]
 801bf6a:	e9d1 2300 	ldrd	r2, r3, [r1]
 801bf6e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 801bf72:	e042      	b.n	801bffa <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 801bf74:	6a3b      	ldr	r3, [r7, #32]
 801bf76:	8a5b      	ldrh	r3, [r3, #18]
 801bf78:	2b04      	cmp	r3, #4
 801bf7a:	d10c      	bne.n	801bf96 <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 801bf7c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801bf80:	6a3b      	ldr	r3, [r7, #32]
 801bf82:	69db      	ldr	r3, [r3, #28]
 801bf84:	4602      	mov	r2, r0
 801bf86:	601a      	str	r2, [r3, #0]
 801bf88:	681b      	ldr	r3, [r3, #0]
 801bf8a:	17da      	asrs	r2, r3, #31
 801bf8c:	469a      	mov	sl, r3
 801bf8e:	4693      	mov	fp, r2
 801bf90:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
 801bf94:	e031      	b.n	801bffa <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 801bf96:	6a3b      	ldr	r3, [r7, #32]
 801bf98:	8a5b      	ldrh	r3, [r3, #18]
 801bf9a:	2b02      	cmp	r3, #2
 801bf9c:	d10e      	bne.n	801bfbc <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 801bf9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801bfa2:	6a3b      	ldr	r3, [r7, #32]
 801bfa4:	69db      	ldr	r3, [r3, #28]
 801bfa6:	b202      	sxth	r2, r0
 801bfa8:	801a      	strh	r2, [r3, #0]
 801bfaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bfae:	b21b      	sxth	r3, r3
 801bfb0:	17da      	asrs	r2, r3, #31
 801bfb2:	4698      	mov	r8, r3
 801bfb4:	4691      	mov	r9, r2
 801bfb6:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
 801bfba:	e01e      	b.n	801bffa <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 801bfbc:	6a3b      	ldr	r3, [r7, #32]
 801bfbe:	8a5b      	ldrh	r3, [r3, #18]
 801bfc0:	2b01      	cmp	r3, #1
 801bfc2:	d10e      	bne.n	801bfe2 <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 801bfc4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801bfc8:	6a3b      	ldr	r3, [r7, #32]
 801bfca:	69db      	ldr	r3, [r3, #28]
 801bfcc:	b242      	sxtb	r2, r0
 801bfce:	701a      	strb	r2, [r3, #0]
 801bfd0:	f993 3000 	ldrsb.w	r3, [r3]
 801bfd4:	b25b      	sxtb	r3, r3
 801bfd6:	17da      	asrs	r2, r3, #31
 801bfd8:	461c      	mov	r4, r3
 801bfda:	4615      	mov	r5, r2
 801bfdc:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 801bfe0:	e00b      	b.n	801bffa <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 801bfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfe4:	68db      	ldr	r3, [r3, #12]
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d002      	beq.n	801bff0 <pb_dec_varint+0x210>
 801bfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfec:	68db      	ldr	r3, [r3, #12]
 801bfee:	e000      	b.n	801bff2 <pb_dec_varint+0x212>
 801bff0:	4b0f      	ldr	r3, [pc, #60]	; (801c030 <pb_dec_varint+0x250>)
 801bff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bff4:	60d3      	str	r3, [r2, #12]
 801bff6:	2300      	movs	r3, #0
 801bff8:	e014      	b.n	801c024 <pb_dec_varint+0x244>

        if (clamped != svalue)
 801bffa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801bffe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801c002:	4299      	cmp	r1, r3
 801c004:	bf08      	it	eq
 801c006:	4290      	cmpeq	r0, r2
 801c008:	d00b      	beq.n	801c022 <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 801c00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c00c:	68db      	ldr	r3, [r3, #12]
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d002      	beq.n	801c018 <pb_dec_varint+0x238>
 801c012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c014:	68db      	ldr	r3, [r3, #12]
 801c016:	e000      	b.n	801c01a <pb_dec_varint+0x23a>
 801c018:	4b06      	ldr	r3, [pc, #24]	; (801c034 <pb_dec_varint+0x254>)
 801c01a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c01c:	60d3      	str	r3, [r2, #12]
 801c01e:	2300      	movs	r3, #0
 801c020:	e000      	b.n	801c024 <pb_dec_varint+0x244>

        return true;
 801c022:	2301      	movs	r3, #1
    }
}
 801c024:	4618      	mov	r0, r3
 801c026:	3750      	adds	r7, #80	; 0x50
 801c028:	46bd      	mov	sp, r7
 801c02a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801c02e:	bf00      	nop
 801c030:	08021f64 	.word	0x08021f64
 801c034:	08021f78 	.word	0x08021f78

0801c038 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801c038:	b580      	push	{r7, lr}
 801c03a:	b086      	sub	sp, #24
 801c03c:	af00      	add	r7, sp, #0
 801c03e:	6078      	str	r0, [r7, #4]
 801c040:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 801c042:	f107 030c 	add.w	r3, r7, #12
 801c046:	4619      	mov	r1, r3
 801c048:	6878      	ldr	r0, [r7, #4]
 801c04a:	f7fe fd97 	bl	801ab7c <pb_decode_varint32>
 801c04e:	4603      	mov	r3, r0
 801c050:	f083 0301 	eor.w	r3, r3, #1
 801c054:	b2db      	uxtb	r3, r3
 801c056:	2b00      	cmp	r3, #0
 801c058:	d001      	beq.n	801c05e <pb_dec_bytes+0x26>
        return false;
 801c05a:	2300      	movs	r3, #0
 801c05c:	e055      	b.n	801c10a <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 801c05e:	68fb      	ldr	r3, [r7, #12]
 801c060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c064:	d30b      	bcc.n	801c07e <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	68db      	ldr	r3, [r3, #12]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d002      	beq.n	801c074 <pb_dec_bytes+0x3c>
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	68db      	ldr	r3, [r3, #12]
 801c072:	e000      	b.n	801c076 <pb_dec_bytes+0x3e>
 801c074:	4b27      	ldr	r3, [pc, #156]	; (801c114 <pb_dec_bytes+0xdc>)
 801c076:	687a      	ldr	r2, [r7, #4]
 801c078:	60d3      	str	r3, [r2, #12]
 801c07a:	2300      	movs	r3, #0
 801c07c:	e045      	b.n	801c10a <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 801c07e:	68fb      	ldr	r3, [r7, #12]
 801c080:	3302      	adds	r3, #2
 801c082:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 801c084:	68fb      	ldr	r3, [r7, #12]
 801c086:	697a      	ldr	r2, [r7, #20]
 801c088:	429a      	cmp	r2, r3
 801c08a:	d20b      	bcs.n	801c0a4 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 801c08c:	687b      	ldr	r3, [r7, #4]
 801c08e:	68db      	ldr	r3, [r3, #12]
 801c090:	2b00      	cmp	r3, #0
 801c092:	d002      	beq.n	801c09a <pb_dec_bytes+0x62>
 801c094:	687b      	ldr	r3, [r7, #4]
 801c096:	68db      	ldr	r3, [r3, #12]
 801c098:	e000      	b.n	801c09c <pb_dec_bytes+0x64>
 801c09a:	4b1f      	ldr	r3, [pc, #124]	; (801c118 <pb_dec_bytes+0xe0>)
 801c09c:	687a      	ldr	r2, [r7, #4]
 801c09e:	60d3      	str	r3, [r2, #12]
 801c0a0:	2300      	movs	r3, #0
 801c0a2:	e032      	b.n	801c10a <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 801c0a4:	683b      	ldr	r3, [r7, #0]
 801c0a6:	7d9b      	ldrb	r3, [r3, #22]
 801c0a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c0ac:	2b80      	cmp	r3, #128	; 0x80
 801c0ae:	d10b      	bne.n	801c0c8 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	68db      	ldr	r3, [r3, #12]
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	d002      	beq.n	801c0be <pb_dec_bytes+0x86>
 801c0b8:	687b      	ldr	r3, [r7, #4]
 801c0ba:	68db      	ldr	r3, [r3, #12]
 801c0bc:	e000      	b.n	801c0c0 <pb_dec_bytes+0x88>
 801c0be:	4b17      	ldr	r3, [pc, #92]	; (801c11c <pb_dec_bytes+0xe4>)
 801c0c0:	687a      	ldr	r2, [r7, #4]
 801c0c2:	60d3      	str	r3, [r2, #12]
 801c0c4:	2300      	movs	r3, #0
 801c0c6:	e020      	b.n	801c10a <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 801c0c8:	683b      	ldr	r3, [r7, #0]
 801c0ca:	8a5b      	ldrh	r3, [r3, #18]
 801c0cc:	461a      	mov	r2, r3
 801c0ce:	697b      	ldr	r3, [r7, #20]
 801c0d0:	4293      	cmp	r3, r2
 801c0d2:	d90b      	bls.n	801c0ec <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	68db      	ldr	r3, [r3, #12]
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d002      	beq.n	801c0e2 <pb_dec_bytes+0xaa>
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	68db      	ldr	r3, [r3, #12]
 801c0e0:	e000      	b.n	801c0e4 <pb_dec_bytes+0xac>
 801c0e2:	4b0c      	ldr	r3, [pc, #48]	; (801c114 <pb_dec_bytes+0xdc>)
 801c0e4:	687a      	ldr	r2, [r7, #4]
 801c0e6:	60d3      	str	r3, [r2, #12]
 801c0e8:	2300      	movs	r3, #0
 801c0ea:	e00e      	b.n	801c10a <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 801c0ec:	683b      	ldr	r3, [r7, #0]
 801c0ee:	69db      	ldr	r3, [r3, #28]
 801c0f0:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 801c0f2:	68fb      	ldr	r3, [r7, #12]
 801c0f4:	b29a      	uxth	r2, r3
 801c0f6:	693b      	ldr	r3, [r7, #16]
 801c0f8:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 801c0fa:	693b      	ldr	r3, [r7, #16]
 801c0fc:	3302      	adds	r3, #2
 801c0fe:	68fa      	ldr	r2, [r7, #12]
 801c100:	4619      	mov	r1, r3
 801c102:	6878      	ldr	r0, [r7, #4]
 801c104:	f7fe fbc0 	bl	801a888 <pb_read>
 801c108:	4603      	mov	r3, r0
}
 801c10a:	4618      	mov	r0, r3
 801c10c:	3718      	adds	r7, #24
 801c10e:	46bd      	mov	sp, r7
 801c110:	bd80      	pop	{r7, pc}
 801c112:	bf00      	nop
 801c114:	08021f8c 	.word	0x08021f8c
 801c118:	08021f9c 	.word	0x08021f9c
 801c11c:	08021ee4 	.word	0x08021ee4

0801c120 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801c120:	b580      	push	{r7, lr}
 801c122:	b086      	sub	sp, #24
 801c124:	af00      	add	r7, sp, #0
 801c126:	6078      	str	r0, [r7, #4]
 801c128:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 801c12a:	683b      	ldr	r3, [r7, #0]
 801c12c:	69db      	ldr	r3, [r3, #28]
 801c12e:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 801c130:	f107 030c 	add.w	r3, r7, #12
 801c134:	4619      	mov	r1, r3
 801c136:	6878      	ldr	r0, [r7, #4]
 801c138:	f7fe fd20 	bl	801ab7c <pb_decode_varint32>
 801c13c:	4603      	mov	r3, r0
 801c13e:	f083 0301 	eor.w	r3, r3, #1
 801c142:	b2db      	uxtb	r3, r3
 801c144:	2b00      	cmp	r3, #0
 801c146:	d001      	beq.n	801c14c <pb_dec_string+0x2c>
        return false;
 801c148:	2300      	movs	r3, #0
 801c14a:	e05a      	b.n	801c202 <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 801c14c:	68fb      	ldr	r3, [r7, #12]
 801c14e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c152:	d10b      	bne.n	801c16c <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	68db      	ldr	r3, [r3, #12]
 801c158:	2b00      	cmp	r3, #0
 801c15a:	d002      	beq.n	801c162 <pb_dec_string+0x42>
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	68db      	ldr	r3, [r3, #12]
 801c160:	e000      	b.n	801c164 <pb_dec_string+0x44>
 801c162:	4b2a      	ldr	r3, [pc, #168]	; (801c20c <pb_dec_string+0xec>)
 801c164:	687a      	ldr	r2, [r7, #4]
 801c166:	60d3      	str	r3, [r2, #12]
 801c168:	2300      	movs	r3, #0
 801c16a:	e04a      	b.n	801c202 <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 801c16c:	68fb      	ldr	r3, [r7, #12]
 801c16e:	3301      	adds	r3, #1
 801c170:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 801c172:	68fb      	ldr	r3, [r7, #12]
 801c174:	693a      	ldr	r2, [r7, #16]
 801c176:	429a      	cmp	r2, r3
 801c178:	d20b      	bcs.n	801c192 <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	68db      	ldr	r3, [r3, #12]
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d002      	beq.n	801c188 <pb_dec_string+0x68>
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	68db      	ldr	r3, [r3, #12]
 801c186:	e000      	b.n	801c18a <pb_dec_string+0x6a>
 801c188:	4b20      	ldr	r3, [pc, #128]	; (801c20c <pb_dec_string+0xec>)
 801c18a:	687a      	ldr	r2, [r7, #4]
 801c18c:	60d3      	str	r3, [r2, #12]
 801c18e:	2300      	movs	r3, #0
 801c190:	e037      	b.n	801c202 <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 801c192:	683b      	ldr	r3, [r7, #0]
 801c194:	7d9b      	ldrb	r3, [r3, #22]
 801c196:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c19a:	2b80      	cmp	r3, #128	; 0x80
 801c19c:	d10b      	bne.n	801c1b6 <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 801c19e:	687b      	ldr	r3, [r7, #4]
 801c1a0:	68db      	ldr	r3, [r3, #12]
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d002      	beq.n	801c1ac <pb_dec_string+0x8c>
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	68db      	ldr	r3, [r3, #12]
 801c1aa:	e000      	b.n	801c1ae <pb_dec_string+0x8e>
 801c1ac:	4b18      	ldr	r3, [pc, #96]	; (801c210 <pb_dec_string+0xf0>)
 801c1ae:	687a      	ldr	r2, [r7, #4]
 801c1b0:	60d3      	str	r3, [r2, #12]
 801c1b2:	2300      	movs	r3, #0
 801c1b4:	e025      	b.n	801c202 <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 801c1b6:	683b      	ldr	r3, [r7, #0]
 801c1b8:	8a5b      	ldrh	r3, [r3, #18]
 801c1ba:	461a      	mov	r2, r3
 801c1bc:	693b      	ldr	r3, [r7, #16]
 801c1be:	4293      	cmp	r3, r2
 801c1c0:	d90b      	bls.n	801c1da <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	68db      	ldr	r3, [r3, #12]
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	d002      	beq.n	801c1d0 <pb_dec_string+0xb0>
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	68db      	ldr	r3, [r3, #12]
 801c1ce:	e000      	b.n	801c1d2 <pb_dec_string+0xb2>
 801c1d0:	4b10      	ldr	r3, [pc, #64]	; (801c214 <pb_dec_string+0xf4>)
 801c1d2:	687a      	ldr	r2, [r7, #4]
 801c1d4:	60d3      	str	r3, [r2, #12]
 801c1d6:	2300      	movs	r3, #0
 801c1d8:	e013      	b.n	801c202 <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 801c1da:	68fb      	ldr	r3, [r7, #12]
 801c1dc:	697a      	ldr	r2, [r7, #20]
 801c1de:	4413      	add	r3, r2
 801c1e0:	2200      	movs	r2, #0
 801c1e2:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 801c1e4:	68fb      	ldr	r3, [r7, #12]
 801c1e6:	461a      	mov	r2, r3
 801c1e8:	6979      	ldr	r1, [r7, #20]
 801c1ea:	6878      	ldr	r0, [r7, #4]
 801c1ec:	f7fe fb4c 	bl	801a888 <pb_read>
 801c1f0:	4603      	mov	r3, r0
 801c1f2:	f083 0301 	eor.w	r3, r3, #1
 801c1f6:	b2db      	uxtb	r3, r3
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d001      	beq.n	801c200 <pb_dec_string+0xe0>
        return false;
 801c1fc:	2300      	movs	r3, #0
 801c1fe:	e000      	b.n	801c202 <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 801c200:	2301      	movs	r3, #1
}
 801c202:	4618      	mov	r0, r3
 801c204:	3718      	adds	r7, #24
 801c206:	46bd      	mov	sp, r7
 801c208:	bd80      	pop	{r7, pc}
 801c20a:	bf00      	nop
 801c20c:	08021f9c 	.word	0x08021f9c
 801c210:	08021ee4 	.word	0x08021ee4
 801c214:	08021fac 	.word	0x08021fac

0801c218 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801c218:	b580      	push	{r7, lr}
 801c21a:	b08a      	sub	sp, #40	; 0x28
 801c21c:	af00      	add	r7, sp, #0
 801c21e:	6078      	str	r0, [r7, #4]
 801c220:	6039      	str	r1, [r7, #0]
    bool status = true;
 801c222:	2301      	movs	r3, #1
 801c224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool submsg_consumed = false;
 801c228:	2300      	movs	r3, #0
 801c22a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 801c22e:	f107 030c 	add.w	r3, r7, #12
 801c232:	4619      	mov	r1, r3
 801c234:	6878      	ldr	r0, [r7, #4]
 801c236:	f7fe fe2d 	bl	801ae94 <pb_make_string_substream>
 801c23a:	4603      	mov	r3, r0
 801c23c:	f083 0301 	eor.w	r3, r3, #1
 801c240:	b2db      	uxtb	r3, r3
 801c242:	2b00      	cmp	r3, #0
 801c244:	d001      	beq.n	801c24a <pb_dec_submessage+0x32>
        return false;
 801c246:	2300      	movs	r3, #0
 801c248:	e069      	b.n	801c31e <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 801c24a:	683b      	ldr	r3, [r7, #0]
 801c24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d10b      	bne.n	801c26a <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	68db      	ldr	r3, [r3, #12]
 801c256:	2b00      	cmp	r3, #0
 801c258:	d002      	beq.n	801c260 <pb_dec_submessage+0x48>
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	68db      	ldr	r3, [r3, #12]
 801c25e:	e000      	b.n	801c262 <pb_dec_submessage+0x4a>
 801c260:	4b31      	ldr	r3, [pc, #196]	; (801c328 <pb_dec_submessage+0x110>)
 801c262:	687a      	ldr	r2, [r7, #4]
 801c264:	60d3      	str	r3, [r2, #12]
 801c266:	2300      	movs	r3, #0
 801c268:	e059      	b.n	801c31e <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 801c26a:	683b      	ldr	r3, [r7, #0]
 801c26c:	7d9b      	ldrb	r3, [r3, #22]
 801c26e:	f003 030f 	and.w	r3, r3, #15
 801c272:	2b09      	cmp	r3, #9
 801c274:	d11c      	bne.n	801c2b0 <pb_dec_submessage+0x98>
 801c276:	683b      	ldr	r3, [r7, #0]
 801c278:	6a1b      	ldr	r3, [r3, #32]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d018      	beq.n	801c2b0 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 801c27e:	683b      	ldr	r3, [r7, #0]
 801c280:	6a1b      	ldr	r3, [r3, #32]
 801c282:	3b08      	subs	r3, #8
 801c284:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 801c286:	69fb      	ldr	r3, [r7, #28]
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d010      	beq.n	801c2b0 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 801c28e:	69fb      	ldr	r3, [r7, #28]
 801c290:	681b      	ldr	r3, [r3, #0]
 801c292:	69fa      	ldr	r2, [r7, #28]
 801c294:	3204      	adds	r2, #4
 801c296:	f107 000c 	add.w	r0, r7, #12
 801c29a:	6839      	ldr	r1, [r7, #0]
 801c29c:	4798      	blx	r3
 801c29e:	4603      	mov	r3, r0
 801c2a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (substream.bytes_left == 0)
 801c2a4:	697b      	ldr	r3, [r7, #20]
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d102      	bne.n	801c2b0 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 801c2aa:	2301      	movs	r3, #1
 801c2ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 801c2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d022      	beq.n	801c2fe <pb_dec_submessage+0xe6>
 801c2b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c2bc:	f083 0301 	eor.w	r3, r3, #1
 801c2c0:	b2db      	uxtb	r3, r3
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	d01b      	beq.n	801c2fe <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 801c2c6:	2300      	movs	r3, #0
 801c2c8:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 801c2ca:	683b      	ldr	r3, [r7, #0]
 801c2cc:	7d9b      	ldrb	r3, [r3, #22]
 801c2ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c2d2:	2b00      	cmp	r3, #0
 801c2d4:	d107      	bne.n	801c2e6 <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 801c2d6:	683b      	ldr	r3, [r7, #0]
 801c2d8:	7d9b      	ldrb	r3, [r3, #22]
 801c2da:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 801c2de:	2b20      	cmp	r3, #32
 801c2e0:	d001      	beq.n	801c2e6 <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 801c2e2:	2301      	movs	r3, #1
 801c2e4:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 801c2e6:	683b      	ldr	r3, [r7, #0]
 801c2e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801c2ea:	683b      	ldr	r3, [r7, #0]
 801c2ec:	69da      	ldr	r2, [r3, #28]
 801c2ee:	f107 000c 	add.w	r0, r7, #12
 801c2f2:	6a3b      	ldr	r3, [r7, #32]
 801c2f4:	f7ff fafa 	bl	801b8ec <pb_decode_inner>
 801c2f8:	4603      	mov	r3, r0
 801c2fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 801c2fe:	f107 030c 	add.w	r3, r7, #12
 801c302:	4619      	mov	r1, r3
 801c304:	6878      	ldr	r0, [r7, #4]
 801c306:	f7fe fdff 	bl	801af08 <pb_close_string_substream>
 801c30a:	4603      	mov	r3, r0
 801c30c:	f083 0301 	eor.w	r3, r3, #1
 801c310:	b2db      	uxtb	r3, r3
 801c312:	2b00      	cmp	r3, #0
 801c314:	d001      	beq.n	801c31a <pb_dec_submessage+0x102>
        return false;
 801c316:	2300      	movs	r3, #0
 801c318:	e001      	b.n	801c31e <pb_dec_submessage+0x106>

    return status;
 801c31a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801c31e:	4618      	mov	r0, r3
 801c320:	3728      	adds	r7, #40	; 0x28
 801c322:	46bd      	mov	sp, r7
 801c324:	bd80      	pop	{r7, pc}
 801c326:	bf00      	nop
 801c328:	08021fbc 	.word	0x08021fbc

0801c32c <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801c32c:	b580      	push	{r7, lr}
 801c32e:	b084      	sub	sp, #16
 801c330:	af00      	add	r7, sp, #0
 801c332:	6078      	str	r0, [r7, #4]
 801c334:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 801c336:	f107 030c 	add.w	r3, r7, #12
 801c33a:	4619      	mov	r1, r3
 801c33c:	6878      	ldr	r0, [r7, #4]
 801c33e:	f7fe fc1d 	bl	801ab7c <pb_decode_varint32>
 801c342:	4603      	mov	r3, r0
 801c344:	f083 0301 	eor.w	r3, r3, #1
 801c348:	b2db      	uxtb	r3, r3
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	d001      	beq.n	801c352 <pb_dec_fixed_length_bytes+0x26>
        return false;
 801c34e:	2300      	movs	r3, #0
 801c350:	e037      	b.n	801c3c2 <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 801c352:	68fb      	ldr	r3, [r7, #12]
 801c354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c358:	d30b      	bcc.n	801c372 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 801c35a:	687b      	ldr	r3, [r7, #4]
 801c35c:	68db      	ldr	r3, [r3, #12]
 801c35e:	2b00      	cmp	r3, #0
 801c360:	d002      	beq.n	801c368 <pb_dec_fixed_length_bytes+0x3c>
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	68db      	ldr	r3, [r3, #12]
 801c366:	e000      	b.n	801c36a <pb_dec_fixed_length_bytes+0x3e>
 801c368:	4b18      	ldr	r3, [pc, #96]	; (801c3cc <pb_dec_fixed_length_bytes+0xa0>)
 801c36a:	687a      	ldr	r2, [r7, #4]
 801c36c:	60d3      	str	r3, [r2, #12]
 801c36e:	2300      	movs	r3, #0
 801c370:	e027      	b.n	801c3c2 <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	2b00      	cmp	r3, #0
 801c376:	d109      	bne.n	801c38c <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 801c378:	683b      	ldr	r3, [r7, #0]
 801c37a:	69d8      	ldr	r0, [r3, #28]
 801c37c:	683b      	ldr	r3, [r7, #0]
 801c37e:	8a5b      	ldrh	r3, [r3, #18]
 801c380:	461a      	mov	r2, r3
 801c382:	2100      	movs	r1, #0
 801c384:	f001 f944 	bl	801d610 <memset>
        return true;
 801c388:	2301      	movs	r3, #1
 801c38a:	e01a      	b.n	801c3c2 <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 801c38c:	683b      	ldr	r3, [r7, #0]
 801c38e:	8a5b      	ldrh	r3, [r3, #18]
 801c390:	461a      	mov	r2, r3
 801c392:	68fb      	ldr	r3, [r7, #12]
 801c394:	429a      	cmp	r2, r3
 801c396:	d00b      	beq.n	801c3b0 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 801c398:	687b      	ldr	r3, [r7, #4]
 801c39a:	68db      	ldr	r3, [r3, #12]
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	d002      	beq.n	801c3a6 <pb_dec_fixed_length_bytes+0x7a>
 801c3a0:	687b      	ldr	r3, [r7, #4]
 801c3a2:	68db      	ldr	r3, [r3, #12]
 801c3a4:	e000      	b.n	801c3a8 <pb_dec_fixed_length_bytes+0x7c>
 801c3a6:	4b0a      	ldr	r3, [pc, #40]	; (801c3d0 <pb_dec_fixed_length_bytes+0xa4>)
 801c3a8:	687a      	ldr	r2, [r7, #4]
 801c3aa:	60d3      	str	r3, [r2, #12]
 801c3ac:	2300      	movs	r3, #0
 801c3ae:	e008      	b.n	801c3c2 <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 801c3b0:	683b      	ldr	r3, [r7, #0]
 801c3b2:	69d9      	ldr	r1, [r3, #28]
 801c3b4:	683b      	ldr	r3, [r7, #0]
 801c3b6:	8a5b      	ldrh	r3, [r3, #18]
 801c3b8:	461a      	mov	r2, r3
 801c3ba:	6878      	ldr	r0, [r7, #4]
 801c3bc:	f7fe fa64 	bl	801a888 <pb_read>
 801c3c0:	4603      	mov	r3, r0
}
 801c3c2:	4618      	mov	r0, r3
 801c3c4:	3710      	adds	r7, #16
 801c3c6:	46bd      	mov	sp, r7
 801c3c8:	bd80      	pop	{r7, pc}
 801c3ca:	bf00      	nop
 801c3cc:	08021f8c 	.word	0x08021f8c
 801c3d0:	08021fd8 	.word	0x08021fd8

0801c3d4 <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 801c3d4:	b580      	push	{r7, lr}
 801c3d6:	b086      	sub	sp, #24
 801c3d8:	af00      	add	r7, sp, #0
 801c3da:	60f8      	str	r0, [r7, #12]
 801c3dc:	60b9      	str	r1, [r7, #8]
 801c3de:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 801c3e0:	68fb      	ldr	r3, [r7, #12]
 801c3e2:	685b      	ldr	r3, [r3, #4]
 801c3e4:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 801c3e6:	697a      	ldr	r2, [r7, #20]
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	441a      	add	r2, r3
 801c3ec:	68fb      	ldr	r3, [r7, #12]
 801c3ee:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 801c3f0:	687a      	ldr	r2, [r7, #4]
 801c3f2:	68b9      	ldr	r1, [r7, #8]
 801c3f4:	6978      	ldr	r0, [r7, #20]
 801c3f6:	f001 f8fd 	bl	801d5f4 <memcpy>
    
    return true;
 801c3fa:	2301      	movs	r3, #1
}
 801c3fc:	4618      	mov	r0, r3
 801c3fe:	3718      	adds	r7, #24
 801c400:	46bd      	mov	sp, r7
 801c402:	bd80      	pop	{r7, pc}

0801c404 <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 801c404:	b4b0      	push	{r4, r5, r7}
 801c406:	b08b      	sub	sp, #44	; 0x2c
 801c408:	af00      	add	r7, sp, #0
 801c40a:	60f8      	str	r0, [r7, #12]
 801c40c:	60b9      	str	r1, [r7, #8]
 801c40e:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 801c410:	4b0b      	ldr	r3, [pc, #44]	; (801c440 <pb_ostream_from_buffer+0x3c>)
 801c412:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 801c414:	68bb      	ldr	r3, [r7, #8]
 801c416:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 801c41c:	2300      	movs	r3, #0
 801c41e:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 801c420:	2300      	movs	r3, #0
 801c422:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 801c424:	68fb      	ldr	r3, [r7, #12]
 801c426:	461d      	mov	r5, r3
 801c428:	f107 0414 	add.w	r4, r7, #20
 801c42c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c42e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c430:	6823      	ldr	r3, [r4, #0]
 801c432:	602b      	str	r3, [r5, #0]
}
 801c434:	68f8      	ldr	r0, [r7, #12]
 801c436:	372c      	adds	r7, #44	; 0x2c
 801c438:	46bd      	mov	sp, r7
 801c43a:	bcb0      	pop	{r4, r5, r7}
 801c43c:	4770      	bx	lr
 801c43e:	bf00      	nop
 801c440:	0801c3d5 	.word	0x0801c3d5

0801c444 <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 801c444:	b580      	push	{r7, lr}
 801c446:	b084      	sub	sp, #16
 801c448:	af00      	add	r7, sp, #0
 801c44a:	60f8      	str	r0, [r7, #12]
 801c44c:	60b9      	str	r1, [r7, #8]
 801c44e:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 801c450:	687b      	ldr	r3, [r7, #4]
 801c452:	2b00      	cmp	r3, #0
 801c454:	d037      	beq.n	801c4c6 <pb_write+0x82>
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	681b      	ldr	r3, [r3, #0]
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	d033      	beq.n	801c4c6 <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 801c45e:	68fb      	ldr	r3, [r7, #12]
 801c460:	68da      	ldr	r2, [r3, #12]
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	441a      	add	r2, r3
 801c466:	68fb      	ldr	r3, [r7, #12]
 801c468:	68db      	ldr	r3, [r3, #12]
 801c46a:	429a      	cmp	r2, r3
 801c46c:	d307      	bcc.n	801c47e <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 801c46e:	68fb      	ldr	r3, [r7, #12]
 801c470:	68da      	ldr	r2, [r3, #12]
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	441a      	add	r2, r3
 801c476:	68fb      	ldr	r3, [r7, #12]
 801c478:	689b      	ldr	r3, [r3, #8]
        if (stream->bytes_written + count < stream->bytes_written ||
 801c47a:	429a      	cmp	r2, r3
 801c47c:	d90b      	bls.n	801c496 <pb_write+0x52>
        {
            PB_RETURN_ERROR(stream, "stream full");
 801c47e:	68fb      	ldr	r3, [r7, #12]
 801c480:	691b      	ldr	r3, [r3, #16]
 801c482:	2b00      	cmp	r3, #0
 801c484:	d002      	beq.n	801c48c <pb_write+0x48>
 801c486:	68fb      	ldr	r3, [r7, #12]
 801c488:	691b      	ldr	r3, [r3, #16]
 801c48a:	e000      	b.n	801c48e <pb_write+0x4a>
 801c48c:	4b13      	ldr	r3, [pc, #76]	; (801c4dc <pb_write+0x98>)
 801c48e:	68fa      	ldr	r2, [r7, #12]
 801c490:	6113      	str	r3, [r2, #16]
 801c492:	2300      	movs	r3, #0
 801c494:	e01e      	b.n	801c4d4 <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 801c496:	68fb      	ldr	r3, [r7, #12]
 801c498:	681b      	ldr	r3, [r3, #0]
 801c49a:	687a      	ldr	r2, [r7, #4]
 801c49c:	68b9      	ldr	r1, [r7, #8]
 801c49e:	68f8      	ldr	r0, [r7, #12]
 801c4a0:	4798      	blx	r3
 801c4a2:	4603      	mov	r3, r0
 801c4a4:	f083 0301 	eor.w	r3, r3, #1
 801c4a8:	b2db      	uxtb	r3, r3
 801c4aa:	2b00      	cmp	r3, #0
 801c4ac:	d00b      	beq.n	801c4c6 <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 801c4ae:	68fb      	ldr	r3, [r7, #12]
 801c4b0:	691b      	ldr	r3, [r3, #16]
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d002      	beq.n	801c4bc <pb_write+0x78>
 801c4b6:	68fb      	ldr	r3, [r7, #12]
 801c4b8:	691b      	ldr	r3, [r3, #16]
 801c4ba:	e000      	b.n	801c4be <pb_write+0x7a>
 801c4bc:	4b08      	ldr	r3, [pc, #32]	; (801c4e0 <pb_write+0x9c>)
 801c4be:	68fa      	ldr	r2, [r7, #12]
 801c4c0:	6113      	str	r3, [r2, #16]
 801c4c2:	2300      	movs	r3, #0
 801c4c4:	e006      	b.n	801c4d4 <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 801c4c6:	68fb      	ldr	r3, [r7, #12]
 801c4c8:	68da      	ldr	r2, [r3, #12]
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	441a      	add	r2, r3
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	60da      	str	r2, [r3, #12]
    return true;
 801c4d2:	2301      	movs	r3, #1
}
 801c4d4:	4618      	mov	r0, r3
 801c4d6:	3710      	adds	r7, #16
 801c4d8:	46bd      	mov	sp, r7
 801c4da:	bd80      	pop	{r7, pc}
 801c4dc:	08021ffc 	.word	0x08021ffc
 801c4e0:	08022008 	.word	0x08022008

0801c4e4 <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 801c4e4:	b480      	push	{r7}
 801c4e6:	b085      	sub	sp, #20
 801c4e8:	af00      	add	r7, sp, #0
 801c4ea:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 801c4f0:	2300      	movs	r3, #0
 801c4f2:	60fb      	str	r3, [r7, #12]
 801c4f4:	e00a      	b.n	801c50c <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 801c4f6:	68ba      	ldr	r2, [r7, #8]
 801c4f8:	68fb      	ldr	r3, [r7, #12]
 801c4fa:	4413      	add	r3, r2
 801c4fc:	781b      	ldrb	r3, [r3, #0]
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d001      	beq.n	801c506 <safe_read_bool+0x22>
            return true;
 801c502:	2301      	movs	r3, #1
 801c504:	e006      	b.n	801c514 <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 801c506:	68fb      	ldr	r3, [r7, #12]
 801c508:	3301      	adds	r3, #1
 801c50a:	60fb      	str	r3, [r7, #12]
 801c50c:	68fb      	ldr	r3, [r7, #12]
 801c50e:	2b00      	cmp	r3, #0
 801c510:	d0f1      	beq.n	801c4f6 <safe_read_bool+0x12>
    }
    return false;
 801c512:	2300      	movs	r3, #0
}
 801c514:	4618      	mov	r0, r3
 801c516:	3714      	adds	r7, #20
 801c518:	46bd      	mov	sp, r7
 801c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c51e:	4770      	bx	lr

0801c520 <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 801c520:	b5b0      	push	{r4, r5, r7, lr}
 801c522:	b08c      	sub	sp, #48	; 0x30
 801c524:	af00      	add	r7, sp, #0
 801c526:	6078      	str	r0, [r7, #4]
 801c528:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 801c52a:	683b      	ldr	r3, [r7, #0]
 801c52c:	6a1b      	ldr	r3, [r3, #32]
 801c52e:	881b      	ldrh	r3, [r3, #0]
 801c530:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (count == 0)
 801c532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c534:	2b00      	cmp	r3, #0
 801c536:	d101      	bne.n	801c53c <encode_array+0x1c>
        return true;
 801c538:	2301      	movs	r3, #1
 801c53a:	e13d      	b.n	801c7b8 <encode_array+0x298>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 801c53c:	683b      	ldr	r3, [r7, #0]
 801c53e:	7d9b      	ldrb	r3, [r3, #22]
 801c540:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c544:	2b80      	cmp	r3, #128	; 0x80
 801c546:	d010      	beq.n	801c56a <encode_array+0x4a>
 801c548:	683b      	ldr	r3, [r7, #0]
 801c54a:	8a9b      	ldrh	r3, [r3, #20]
 801c54c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c54e:	429a      	cmp	r2, r3
 801c550:	d90b      	bls.n	801c56a <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	691b      	ldr	r3, [r3, #16]
 801c556:	2b00      	cmp	r3, #0
 801c558:	d002      	beq.n	801c560 <encode_array+0x40>
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	691b      	ldr	r3, [r3, #16]
 801c55e:	e000      	b.n	801c562 <encode_array+0x42>
 801c560:	4b97      	ldr	r3, [pc, #604]	; (801c7c0 <encode_array+0x2a0>)
 801c562:	687a      	ldr	r2, [r7, #4]
 801c564:	6113      	str	r3, [r2, #16]
 801c566:	2300      	movs	r3, #0
 801c568:	e126      	b.n	801c7b8 <encode_array+0x298>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 801c56a:	683b      	ldr	r3, [r7, #0]
 801c56c:	7d9b      	ldrb	r3, [r3, #22]
 801c56e:	f003 030f 	and.w	r3, r3, #15
 801c572:	2b05      	cmp	r3, #5
 801c574:	f200 80b3 	bhi.w	801c6de <encode_array+0x1be>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 801c578:	683b      	ldr	r3, [r7, #0]
 801c57a:	8a1b      	ldrh	r3, [r3, #16]
 801c57c:	461a      	mov	r2, r3
 801c57e:	2102      	movs	r1, #2
 801c580:	6878      	ldr	r0, [r7, #4]
 801c582:	f000 fcdd 	bl	801cf40 <pb_encode_tag>
 801c586:	4603      	mov	r3, r0
 801c588:	f083 0301 	eor.w	r3, r3, #1
 801c58c:	b2db      	uxtb	r3, r3
 801c58e:	2b00      	cmp	r3, #0
 801c590:	d001      	beq.n	801c596 <encode_array+0x76>
            return false;
 801c592:	2300      	movs	r3, #0
 801c594:	e110      	b.n	801c7b8 <encode_array+0x298>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 801c596:	683b      	ldr	r3, [r7, #0]
 801c598:	7d9b      	ldrb	r3, [r3, #22]
 801c59a:	f003 030f 	and.w	r3, r3, #15
 801c59e:	2b04      	cmp	r3, #4
 801c5a0:	d103      	bne.n	801c5aa <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 801c5a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c5a4:	009b      	lsls	r3, r3, #2
 801c5a6:	62bb      	str	r3, [r7, #40]	; 0x28
 801c5a8:	e047      	b.n	801c63a <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 801c5aa:	683b      	ldr	r3, [r7, #0]
 801c5ac:	7d9b      	ldrb	r3, [r3, #22]
 801c5ae:	f003 030f 	and.w	r3, r3, #15
 801c5b2:	2b05      	cmp	r3, #5
 801c5b4:	d103      	bne.n	801c5be <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 801c5b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c5b8:	00db      	lsls	r3, r3, #3
 801c5ba:	62bb      	str	r3, [r7, #40]	; 0x28
 801c5bc:	e03d      	b.n	801c63a <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 801c5be:	f107 0308 	add.w	r3, r7, #8
 801c5c2:	2200      	movs	r2, #0
 801c5c4:	601a      	str	r2, [r3, #0]
 801c5c6:	605a      	str	r2, [r3, #4]
 801c5c8:	609a      	str	r2, [r3, #8]
 801c5ca:	60da      	str	r2, [r3, #12]
 801c5cc:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 801c5ce:	683b      	ldr	r3, [r7, #0]
 801c5d0:	69db      	ldr	r3, [r3, #28]
 801c5d2:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 801c5d4:	2300      	movs	r3, #0
 801c5d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c5d8:	e026      	b.n	801c628 <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 801c5da:	f107 0308 	add.w	r3, r7, #8
 801c5de:	6839      	ldr	r1, [r7, #0]
 801c5e0:	4618      	mov	r0, r3
 801c5e2:	f000 fdef 	bl	801d1c4 <pb_enc_varint>
 801c5e6:	4603      	mov	r3, r0
 801c5e8:	f083 0301 	eor.w	r3, r3, #1
 801c5ec:	b2db      	uxtb	r3, r3
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	d010      	beq.n	801c614 <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	691b      	ldr	r3, [r3, #16]
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	d002      	beq.n	801c600 <encode_array+0xe0>
 801c5fa:	687b      	ldr	r3, [r7, #4]
 801c5fc:	691b      	ldr	r3, [r3, #16]
 801c5fe:	e005      	b.n	801c60c <encode_array+0xec>
 801c600:	69bb      	ldr	r3, [r7, #24]
 801c602:	2b00      	cmp	r3, #0
 801c604:	d001      	beq.n	801c60a <encode_array+0xea>
 801c606:	69bb      	ldr	r3, [r7, #24]
 801c608:	e000      	b.n	801c60c <encode_array+0xec>
 801c60a:	4b6e      	ldr	r3, [pc, #440]	; (801c7c4 <encode_array+0x2a4>)
 801c60c:	687a      	ldr	r2, [r7, #4]
 801c60e:	6113      	str	r3, [r2, #16]
 801c610:	2300      	movs	r3, #0
 801c612:	e0d1      	b.n	801c7b8 <encode_array+0x298>
                field->pData = (char*)field->pData + field->data_size;
 801c614:	683b      	ldr	r3, [r7, #0]
 801c616:	69db      	ldr	r3, [r3, #28]
 801c618:	683a      	ldr	r2, [r7, #0]
 801c61a:	8a52      	ldrh	r2, [r2, #18]
 801c61c:	441a      	add	r2, r3
 801c61e:	683b      	ldr	r3, [r7, #0]
 801c620:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 801c622:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c624:	3301      	adds	r3, #1
 801c626:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c628:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c62a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c62c:	429a      	cmp	r2, r3
 801c62e:	d3d4      	bcc.n	801c5da <encode_array+0xba>
            }
            field->pData = pData_orig;
 801c630:	683b      	ldr	r3, [r7, #0]
 801c632:	69fa      	ldr	r2, [r7, #28]
 801c634:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 801c636:	697b      	ldr	r3, [r7, #20]
 801c638:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 801c63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c63c:	2200      	movs	r2, #0
 801c63e:	461c      	mov	r4, r3
 801c640:	4615      	mov	r5, r2
 801c642:	4622      	mov	r2, r4
 801c644:	462b      	mov	r3, r5
 801c646:	6878      	ldr	r0, [r7, #4]
 801c648:	f000 fbf7 	bl	801ce3a <pb_encode_varint>
 801c64c:	4603      	mov	r3, r0
 801c64e:	f083 0301 	eor.w	r3, r3, #1
 801c652:	b2db      	uxtb	r3, r3
 801c654:	2b00      	cmp	r3, #0
 801c656:	d001      	beq.n	801c65c <encode_array+0x13c>
            return false;
 801c658:	2300      	movs	r3, #0
 801c65a:	e0ad      	b.n	801c7b8 <encode_array+0x298>
        
        if (stream->callback == NULL)
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	681b      	ldr	r3, [r3, #0]
 801c660:	2b00      	cmp	r3, #0
 801c662:	d106      	bne.n	801c672 <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 801c664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c666:	2100      	movs	r1, #0
 801c668:	6878      	ldr	r0, [r7, #4]
 801c66a:	f7ff feeb 	bl	801c444 <pb_write>
 801c66e:	4603      	mov	r3, r0
 801c670:	e0a2      	b.n	801c7b8 <encode_array+0x298>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 801c672:	2300      	movs	r3, #0
 801c674:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c676:	e02d      	b.n	801c6d4 <encode_array+0x1b4>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 801c678:	683b      	ldr	r3, [r7, #0]
 801c67a:	7d9b      	ldrb	r3, [r3, #22]
 801c67c:	f003 030f 	and.w	r3, r3, #15
 801c680:	2b04      	cmp	r3, #4
 801c682:	d005      	beq.n	801c690 <encode_array+0x170>
 801c684:	683b      	ldr	r3, [r7, #0]
 801c686:	7d9b      	ldrb	r3, [r3, #22]
 801c688:	f003 030f 	and.w	r3, r3, #15
 801c68c:	2b05      	cmp	r3, #5
 801c68e:	d10b      	bne.n	801c6a8 <encode_array+0x188>
            {
                if (!pb_enc_fixed(stream, field))
 801c690:	6839      	ldr	r1, [r7, #0]
 801c692:	6878      	ldr	r0, [r7, #4]
 801c694:	f000 fe58 	bl	801d348 <pb_enc_fixed>
 801c698:	4603      	mov	r3, r0
 801c69a:	f083 0301 	eor.w	r3, r3, #1
 801c69e:	b2db      	uxtb	r3, r3
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d00d      	beq.n	801c6c0 <encode_array+0x1a0>
                    return false;
 801c6a4:	2300      	movs	r3, #0
 801c6a6:	e087      	b.n	801c7b8 <encode_array+0x298>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 801c6a8:	6839      	ldr	r1, [r7, #0]
 801c6aa:	6878      	ldr	r0, [r7, #4]
 801c6ac:	f000 fd8a 	bl	801d1c4 <pb_enc_varint>
 801c6b0:	4603      	mov	r3, r0
 801c6b2:	f083 0301 	eor.w	r3, r3, #1
 801c6b6:	b2db      	uxtb	r3, r3
 801c6b8:	2b00      	cmp	r3, #0
 801c6ba:	d001      	beq.n	801c6c0 <encode_array+0x1a0>
                    return false;
 801c6bc:	2300      	movs	r3, #0
 801c6be:	e07b      	b.n	801c7b8 <encode_array+0x298>
            }

            field->pData = (char*)field->pData + field->data_size;
 801c6c0:	683b      	ldr	r3, [r7, #0]
 801c6c2:	69db      	ldr	r3, [r3, #28]
 801c6c4:	683a      	ldr	r2, [r7, #0]
 801c6c6:	8a52      	ldrh	r2, [r2, #18]
 801c6c8:	441a      	add	r2, r3
 801c6ca:	683b      	ldr	r3, [r7, #0]
 801c6cc:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 801c6ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c6d0:	3301      	adds	r3, #1
 801c6d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c6d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c6d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c6d8:	429a      	cmp	r2, r3
 801c6da:	d3cd      	bcc.n	801c678 <encode_array+0x158>
 801c6dc:	e06b      	b.n	801c7b6 <encode_array+0x296>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 801c6de:	2300      	movs	r3, #0
 801c6e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c6e2:	e064      	b.n	801c7ae <encode_array+0x28e>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 801c6e4:	683b      	ldr	r3, [r7, #0]
 801c6e6:	7d9b      	ldrb	r3, [r3, #22]
 801c6e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c6ec:	2b80      	cmp	r3, #128	; 0x80
 801c6ee:	d147      	bne.n	801c780 <encode_array+0x260>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 801c6f0:	683b      	ldr	r3, [r7, #0]
 801c6f2:	7d9b      	ldrb	r3, [r3, #22]
 801c6f4:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 801c6f8:	2b07      	cmp	r3, #7
 801c6fa:	d005      	beq.n	801c708 <encode_array+0x1e8>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 801c6fc:	683b      	ldr	r3, [r7, #0]
 801c6fe:	7d9b      	ldrb	r3, [r3, #22]
 801c700:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 801c704:	2b06      	cmp	r3, #6
 801c706:	d13b      	bne.n	801c780 <encode_array+0x260>
            {
                bool status;
                void *pData_orig = field->pData;
 801c708:	683b      	ldr	r3, [r7, #0]
 801c70a:	69db      	ldr	r3, [r3, #28]
 801c70c:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 801c70e:	683b      	ldr	r3, [r7, #0]
 801c710:	69db      	ldr	r3, [r3, #28]
 801c712:	681a      	ldr	r2, [r3, #0]
 801c714:	683b      	ldr	r3, [r7, #0]
 801c716:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 801c718:	683b      	ldr	r3, [r7, #0]
 801c71a:	69db      	ldr	r3, [r3, #28]
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	d11c      	bne.n	801c75a <encode_array+0x23a>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 801c720:	6839      	ldr	r1, [r7, #0]
 801c722:	6878      	ldr	r0, [r7, #4]
 801c724:	f000 fc36 	bl	801cf94 <pb_encode_tag_for_field>
 801c728:	4603      	mov	r3, r0
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d00b      	beq.n	801c746 <encode_array+0x226>
                             pb_encode_varint(stream, 0);
 801c72e:	f04f 0200 	mov.w	r2, #0
 801c732:	f04f 0300 	mov.w	r3, #0
 801c736:	6878      	ldr	r0, [r7, #4]
 801c738:	f000 fb7f 	bl	801ce3a <pb_encode_varint>
 801c73c:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d001      	beq.n	801c746 <encode_array+0x226>
 801c742:	2301      	movs	r3, #1
 801c744:	e000      	b.n	801c748 <encode_array+0x228>
 801c746:	2300      	movs	r3, #0
 801c748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c74c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c750:	f003 0301 	and.w	r3, r3, #1
 801c754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c758:	e006      	b.n	801c768 <encode_array+0x248>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 801c75a:	6839      	ldr	r1, [r7, #0]
 801c75c:	6878      	ldr	r0, [r7, #4]
 801c75e:	f000 f951 	bl	801ca04 <encode_basic_field>
 801c762:	4603      	mov	r3, r0
 801c764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }

                field->pData = pData_orig;
 801c768:	683b      	ldr	r3, [r7, #0]
 801c76a:	6a3a      	ldr	r2, [r7, #32]
 801c76c:	61da      	str	r2, [r3, #28]

                if (!status)
 801c76e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c772:	f083 0301 	eor.w	r3, r3, #1
 801c776:	b2db      	uxtb	r3, r3
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d00d      	beq.n	801c798 <encode_array+0x278>
                    return false;
 801c77c:	2300      	movs	r3, #0
 801c77e:	e01b      	b.n	801c7b8 <encode_array+0x298>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 801c780:	6839      	ldr	r1, [r7, #0]
 801c782:	6878      	ldr	r0, [r7, #4]
 801c784:	f000 f93e 	bl	801ca04 <encode_basic_field>
 801c788:	4603      	mov	r3, r0
 801c78a:	f083 0301 	eor.w	r3, r3, #1
 801c78e:	b2db      	uxtb	r3, r3
 801c790:	2b00      	cmp	r3, #0
 801c792:	d002      	beq.n	801c79a <encode_array+0x27a>
                    return false;
 801c794:	2300      	movs	r3, #0
 801c796:	e00f      	b.n	801c7b8 <encode_array+0x298>
            {
 801c798:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 801c79a:	683b      	ldr	r3, [r7, #0]
 801c79c:	69db      	ldr	r3, [r3, #28]
 801c79e:	683a      	ldr	r2, [r7, #0]
 801c7a0:	8a52      	ldrh	r2, [r2, #18]
 801c7a2:	441a      	add	r2, r3
 801c7a4:	683b      	ldr	r3, [r7, #0]
 801c7a6:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 801c7a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c7aa:	3301      	adds	r3, #1
 801c7ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c7ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c7b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c7b2:	429a      	cmp	r2, r3
 801c7b4:	d396      	bcc.n	801c6e4 <encode_array+0x1c4>
        }
    }
    
    return true;
 801c7b6:	2301      	movs	r3, #1
}
 801c7b8:	4618      	mov	r0, r3
 801c7ba:	3730      	adds	r7, #48	; 0x30
 801c7bc:	46bd      	mov	sp, r7
 801c7be:	bdb0      	pop	{r4, r5, r7, pc}
 801c7c0:	08022014 	.word	0x08022014
 801c7c4:	0802202c 	.word	0x0802202c

0801c7c8 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 801c7c8:	b580      	push	{r7, lr}
 801c7ca:	b092      	sub	sp, #72	; 0x48
 801c7cc:	af00      	add	r7, sp, #0
 801c7ce:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 801c7d0:	687b      	ldr	r3, [r7, #4]
 801c7d2:	7d9b      	ldrb	r3, [r3, #22]
 801c7d4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 801c7d8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c7dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c7e0:	2b00      	cmp	r3, #0
 801c7e2:	f040 80c9 	bne.w	801c978 <pb_check_proto3_default_value+0x1b0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 801c7e6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c7ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d101      	bne.n	801c7f6 <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 801c7f2:	2300      	movs	r3, #0
 801c7f4:	e100      	b.n	801c9f8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 801c7f6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c7fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801c7fe:	2b20      	cmp	r3, #32
 801c800:	d108      	bne.n	801c814 <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	6a1b      	ldr	r3, [r3, #32]
 801c806:	881b      	ldrh	r3, [r3, #0]
 801c808:	2b00      	cmp	r3, #0
 801c80a:	bf0c      	ite	eq
 801c80c:	2301      	moveq	r3, #1
 801c80e:	2300      	movne	r3, #0
 801c810:	b2db      	uxtb	r3, r3
 801c812:	e0f1      	b.n	801c9f8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 801c814:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c818:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801c81c:	2b30      	cmp	r3, #48	; 0x30
 801c81e:	d108      	bne.n	801c832 <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	6a1b      	ldr	r3, [r3, #32]
 801c824:	881b      	ldrh	r3, [r3, #0]
 801c826:	2b00      	cmp	r3, #0
 801c828:	bf0c      	ite	eq
 801c82a:	2301      	moveq	r3, #1
 801c82c:	2300      	movne	r3, #0
 801c82e:	b2db      	uxtb	r3, r3
 801c830:	e0e2      	b.n	801c9f8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 801c832:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c836:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801c83a:	2b10      	cmp	r3, #16
 801c83c:	d115      	bne.n	801c86a <pb_check_proto3_default_value+0xa2>
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	6a1b      	ldr	r3, [r3, #32]
 801c842:	2b00      	cmp	r3, #0
 801c844:	d011      	beq.n	801c86a <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	6a1b      	ldr	r3, [r3, #32]
 801c84a:	4618      	mov	r0, r3
 801c84c:	f7ff fe4a 	bl	801c4e4 <safe_read_bool>
 801c850:	4603      	mov	r3, r0
 801c852:	2b00      	cmp	r3, #0
 801c854:	bf14      	ite	ne
 801c856:	2301      	movne	r3, #1
 801c858:	2300      	moveq	r3, #0
 801c85a:	b2db      	uxtb	r3, r3
 801c85c:	f083 0301 	eor.w	r3, r3, #1
 801c860:	b2db      	uxtb	r3, r3
 801c862:	f003 0301 	and.w	r3, r3, #1
 801c866:	b2db      	uxtb	r3, r3
 801c868:	e0c6      	b.n	801c9f8 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->default_value)
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	681b      	ldr	r3, [r3, #0]
 801c86e:	689b      	ldr	r3, [r3, #8]
 801c870:	2b00      	cmp	r3, #0
 801c872:	d001      	beq.n	801c878 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 801c874:	2300      	movs	r3, #0
 801c876:	e0bf      	b.n	801c9f8 <pb_check_proto3_default_value+0x230>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 801c878:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c87c:	f003 030f 	and.w	r3, r3, #15
 801c880:	2b05      	cmp	r3, #5
 801c882:	d81c      	bhi.n	801c8be <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	69db      	ldr	r3, [r3, #28]
 801c888:	637b      	str	r3, [r7, #52]	; 0x34
            for (i = 0; i < field->data_size; i++)
 801c88a:	2300      	movs	r3, #0
 801c88c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801c890:	e00d      	b.n	801c8ae <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 801c892:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c898:	4413      	add	r3, r2
 801c89a:	781b      	ldrb	r3, [r3, #0]
 801c89c:	2b00      	cmp	r3, #0
 801c89e:	d001      	beq.n	801c8a4 <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 801c8a0:	2300      	movs	r3, #0
 801c8a2:	e0a9      	b.n	801c9f8 <pb_check_proto3_default_value+0x230>
            for (i = 0; i < field->data_size; i++)
 801c8a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c8a8:	3301      	adds	r3, #1
 801c8aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801c8ae:	687b      	ldr	r3, [r7, #4]
 801c8b0:	8a5b      	ldrh	r3, [r3, #18]
 801c8b2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801c8b6:	429a      	cmp	r2, r3
 801c8b8:	d3eb      	bcc.n	801c892 <pb_check_proto3_default_value+0xca>
                }
            }

            return true;
 801c8ba:	2301      	movs	r3, #1
 801c8bc:	e09c      	b.n	801c9f8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 801c8be:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c8c2:	f003 030f 	and.w	r3, r3, #15
 801c8c6:	2b06      	cmp	r3, #6
 801c8c8:	d10a      	bne.n	801c8e0 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 801c8ca:	687b      	ldr	r3, [r7, #4]
 801c8cc:	69db      	ldr	r3, [r3, #28]
 801c8ce:	63bb      	str	r3, [r7, #56]	; 0x38
            return bytes->size == 0;
 801c8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8d2:	881b      	ldrh	r3, [r3, #0]
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	bf0c      	ite	eq
 801c8d8:	2301      	moveq	r3, #1
 801c8da:	2300      	movne	r3, #0
 801c8dc:	b2db      	uxtb	r3, r3
 801c8de:	e08b      	b.n	801c9f8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 801c8e0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c8e4:	f003 030f 	and.w	r3, r3, #15
 801c8e8:	2b07      	cmp	r3, #7
 801c8ea:	d108      	bne.n	801c8fe <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 801c8ec:	687b      	ldr	r3, [r7, #4]
 801c8ee:	69db      	ldr	r3, [r3, #28]
 801c8f0:	781b      	ldrb	r3, [r3, #0]
 801c8f2:	2b00      	cmp	r3, #0
 801c8f4:	bf0c      	ite	eq
 801c8f6:	2301      	moveq	r3, #1
 801c8f8:	2300      	movne	r3, #0
 801c8fa:	b2db      	uxtb	r3, r3
 801c8fc:	e07c      	b.n	801c9f8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 801c8fe:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c902:	f003 030f 	and.w	r3, r3, #15
 801c906:	2b0b      	cmp	r3, #11
 801c908:	d107      	bne.n	801c91a <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 801c90a:	687b      	ldr	r3, [r7, #4]
 801c90c:	8a5b      	ldrh	r3, [r3, #18]
 801c90e:	2b00      	cmp	r3, #0
 801c910:	bf0c      	ite	eq
 801c912:	2301      	moveq	r3, #1
 801c914:	2300      	movne	r3, #0
 801c916:	b2db      	uxtb	r3, r3
 801c918:	e06e      	b.n	801c9f8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 801c91a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c91e:	f003 030f 	and.w	r3, r3, #15
 801c922:	2b08      	cmp	r3, #8
 801c924:	d005      	beq.n	801c932 <pb_check_proto3_default_value+0x16a>
 801c926:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c92a:	f003 030f 	and.w	r3, r3, #15
 801c92e:	2b09      	cmp	r3, #9
 801c930:	d161      	bne.n	801c9f6 <pb_check_proto3_default_value+0x22e>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	69da      	ldr	r2, [r3, #28]
 801c93a:	f107 030c 	add.w	r3, r7, #12
 801c93e:	4618      	mov	r0, r3
 801c940:	f7fd fe37 	bl	801a5b2 <pb_field_iter_begin>
 801c944:	4603      	mov	r3, r0
 801c946:	2b00      	cmp	r3, #0
 801c948:	d014      	beq.n	801c974 <pb_check_proto3_default_value+0x1ac>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 801c94a:	f107 030c 	add.w	r3, r7, #12
 801c94e:	4618      	mov	r0, r3
 801c950:	f7ff ff3a 	bl	801c7c8 <pb_check_proto3_default_value>
 801c954:	4603      	mov	r3, r0
 801c956:	f083 0301 	eor.w	r3, r3, #1
 801c95a:	b2db      	uxtb	r3, r3
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	d001      	beq.n	801c964 <pb_check_proto3_default_value+0x19c>
                    {
                        return false;
 801c960:	2300      	movs	r3, #0
 801c962:	e049      	b.n	801c9f8 <pb_check_proto3_default_value+0x230>
                    }
                } while (pb_field_iter_next(&iter));
 801c964:	f107 030c 	add.w	r3, r7, #12
 801c968:	4618      	mov	r0, r3
 801c96a:	f7fd fe6b 	bl	801a644 <pb_field_iter_next>
 801c96e:	4603      	mov	r3, r0
 801c970:	2b00      	cmp	r3, #0
 801c972:	d1ea      	bne.n	801c94a <pb_check_proto3_default_value+0x182>
            }
            return true;
 801c974:	2301      	movs	r3, #1
 801c976:	e03f      	b.n	801c9f8 <pb_check_proto3_default_value+0x230>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 801c978:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c97c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c980:	2b80      	cmp	r3, #128	; 0x80
 801c982:	d107      	bne.n	801c994 <pb_check_proto3_default_value+0x1cc>
    {
        return field->pData == NULL;
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	69db      	ldr	r3, [r3, #28]
 801c988:	2b00      	cmp	r3, #0
 801c98a:	bf0c      	ite	eq
 801c98c:	2301      	moveq	r3, #1
 801c98e:	2300      	movne	r3, #0
 801c990:	b2db      	uxtb	r3, r3
 801c992:	e031      	b.n	801c9f8 <pb_check_proto3_default_value+0x230>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 801c994:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c998:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c99c:	2b40      	cmp	r3, #64	; 0x40
 801c99e:	d12a      	bne.n	801c9f6 <pb_check_proto3_default_value+0x22e>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 801c9a0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c9a4:	f003 030f 	and.w	r3, r3, #15
 801c9a8:	2b0a      	cmp	r3, #10
 801c9aa:	d10a      	bne.n	801c9c2 <pb_check_proto3_default_value+0x1fa>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	69db      	ldr	r3, [r3, #28]
 801c9b0:	681b      	ldr	r3, [r3, #0]
 801c9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
            return extension == NULL;
 801c9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	bf0c      	ite	eq
 801c9ba:	2301      	moveq	r3, #1
 801c9bc:	2300      	movne	r3, #0
 801c9be:	b2db      	uxtb	r3, r3
 801c9c0:	e01a      	b.n	801c9f8 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 801c9c2:	687b      	ldr	r3, [r7, #4]
 801c9c4:	681b      	ldr	r3, [r3, #0]
 801c9c6:	68db      	ldr	r3, [r3, #12]
 801c9c8:	4a0d      	ldr	r2, [pc, #52]	; (801ca00 <pb_check_proto3_default_value+0x238>)
 801c9ca:	4293      	cmp	r3, r2
 801c9cc:	d10a      	bne.n	801c9e4 <pb_check_proto3_default_value+0x21c>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	69db      	ldr	r3, [r3, #28]
 801c9d2:	643b      	str	r3, [r7, #64]	; 0x40
            return pCallback->funcs.encode == NULL;
 801c9d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c9d6:	681b      	ldr	r3, [r3, #0]
 801c9d8:	2b00      	cmp	r3, #0
 801c9da:	bf0c      	ite	eq
 801c9dc:	2301      	moveq	r3, #1
 801c9de:	2300      	movne	r3, #0
 801c9e0:	b2db      	uxtb	r3, r3
 801c9e2:	e009      	b.n	801c9f8 <pb_check_proto3_default_value+0x230>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	681b      	ldr	r3, [r3, #0]
 801c9e8:	68db      	ldr	r3, [r3, #12]
 801c9ea:	2b00      	cmp	r3, #0
 801c9ec:	bf0c      	ite	eq
 801c9ee:	2301      	moveq	r3, #1
 801c9f0:	2300      	movne	r3, #0
 801c9f2:	b2db      	uxtb	r3, r3
 801c9f4:	e000      	b.n	801c9f8 <pb_check_proto3_default_value+0x230>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 801c9f6:	2300      	movs	r3, #0
}
 801c9f8:	4618      	mov	r0, r3
 801c9fa:	3748      	adds	r7, #72	; 0x48
 801c9fc:	46bd      	mov	sp, r7
 801c9fe:	bd80      	pop	{r7, pc}
 801ca00:	0801a7e7 	.word	0x0801a7e7

0801ca04 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801ca04:	b580      	push	{r7, lr}
 801ca06:	b082      	sub	sp, #8
 801ca08:	af00      	add	r7, sp, #0
 801ca0a:	6078      	str	r0, [r7, #4]
 801ca0c:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 801ca0e:	683b      	ldr	r3, [r7, #0]
 801ca10:	69db      	ldr	r3, [r3, #28]
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d101      	bne.n	801ca1a <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 801ca16:	2301      	movs	r3, #1
 801ca18:	e061      	b.n	801cade <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 801ca1a:	6839      	ldr	r1, [r7, #0]
 801ca1c:	6878      	ldr	r0, [r7, #4]
 801ca1e:	f000 fab9 	bl	801cf94 <pb_encode_tag_for_field>
 801ca22:	4603      	mov	r3, r0
 801ca24:	f083 0301 	eor.w	r3, r3, #1
 801ca28:	b2db      	uxtb	r3, r3
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	d001      	beq.n	801ca32 <encode_basic_field+0x2e>
        return false;
 801ca2e:	2300      	movs	r3, #0
 801ca30:	e055      	b.n	801cade <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 801ca32:	683b      	ldr	r3, [r7, #0]
 801ca34:	7d9b      	ldrb	r3, [r3, #22]
 801ca36:	f003 030f 	and.w	r3, r3, #15
 801ca3a:	2b0b      	cmp	r3, #11
 801ca3c:	d844      	bhi.n	801cac8 <encode_basic_field+0xc4>
 801ca3e:	a201      	add	r2, pc, #4	; (adr r2, 801ca44 <encode_basic_field+0x40>)
 801ca40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ca44:	0801ca75 	.word	0x0801ca75
 801ca48:	0801ca81 	.word	0x0801ca81
 801ca4c:	0801ca81 	.word	0x0801ca81
 801ca50:	0801ca81 	.word	0x0801ca81
 801ca54:	0801ca8d 	.word	0x0801ca8d
 801ca58:	0801ca8d 	.word	0x0801ca8d
 801ca5c:	0801ca99 	.word	0x0801ca99
 801ca60:	0801caa5 	.word	0x0801caa5
 801ca64:	0801cab1 	.word	0x0801cab1
 801ca68:	0801cab1 	.word	0x0801cab1
 801ca6c:	0801cac9 	.word	0x0801cac9
 801ca70:	0801cabd 	.word	0x0801cabd
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 801ca74:	6839      	ldr	r1, [r7, #0]
 801ca76:	6878      	ldr	r0, [r7, #4]
 801ca78:	f000 fb8a 	bl	801d190 <pb_enc_bool>
 801ca7c:	4603      	mov	r3, r0
 801ca7e:	e02e      	b.n	801cade <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 801ca80:	6839      	ldr	r1, [r7, #0]
 801ca82:	6878      	ldr	r0, [r7, #4]
 801ca84:	f000 fb9e 	bl	801d1c4 <pb_enc_varint>
 801ca88:	4603      	mov	r3, r0
 801ca8a:	e028      	b.n	801cade <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 801ca8c:	6839      	ldr	r1, [r7, #0]
 801ca8e:	6878      	ldr	r0, [r7, #4]
 801ca90:	f000 fc5a 	bl	801d348 <pb_enc_fixed>
 801ca94:	4603      	mov	r3, r0
 801ca96:	e022      	b.n	801cade <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 801ca98:	6839      	ldr	r1, [r7, #0]
 801ca9a:	6878      	ldr	r0, [r7, #4]
 801ca9c:	f000 fc82 	bl	801d3a4 <pb_enc_bytes>
 801caa0:	4603      	mov	r3, r0
 801caa2:	e01c      	b.n	801cade <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 801caa4:	6839      	ldr	r1, [r7, #0]
 801caa6:	6878      	ldr	r0, [r7, #4]
 801caa8:	f000 fcba 	bl	801d420 <pb_enc_string>
 801caac:	4603      	mov	r3, r0
 801caae:	e016      	b.n	801cade <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 801cab0:	6839      	ldr	r1, [r7, #0]
 801cab2:	6878      	ldr	r0, [r7, #4]
 801cab4:	f000 fd12 	bl	801d4dc <pb_enc_submessage>
 801cab8:	4603      	mov	r3, r0
 801caba:	e010      	b.n	801cade <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 801cabc:	6839      	ldr	r1, [r7, #0]
 801cabe:	6878      	ldr	r0, [r7, #4]
 801cac0:	f000 fd52 	bl	801d568 <pb_enc_fixed_length_bytes>
 801cac4:	4603      	mov	r3, r0
 801cac6:	e00a      	b.n	801cade <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	691b      	ldr	r3, [r3, #16]
 801cacc:	2b00      	cmp	r3, #0
 801cace:	d002      	beq.n	801cad6 <encode_basic_field+0xd2>
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	691b      	ldr	r3, [r3, #16]
 801cad4:	e000      	b.n	801cad8 <encode_basic_field+0xd4>
 801cad6:	4b04      	ldr	r3, [pc, #16]	; (801cae8 <encode_basic_field+0xe4>)
 801cad8:	687a      	ldr	r2, [r7, #4]
 801cada:	6113      	str	r3, [r2, #16]
 801cadc:	2300      	movs	r3, #0
    }
}
 801cade:	4618      	mov	r0, r3
 801cae0:	3708      	adds	r7, #8
 801cae2:	46bd      	mov	sp, r7
 801cae4:	bd80      	pop	{r7, pc}
 801cae6:	bf00      	nop
 801cae8:	08022034 	.word	0x08022034

0801caec <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801caec:	b580      	push	{r7, lr}
 801caee:	b082      	sub	sp, #8
 801caf0:	af00      	add	r7, sp, #0
 801caf2:	6078      	str	r0, [r7, #4]
 801caf4:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 801caf6:	683b      	ldr	r3, [r7, #0]
 801caf8:	681b      	ldr	r3, [r3, #0]
 801cafa:	68db      	ldr	r3, [r3, #12]
 801cafc:	2b00      	cmp	r3, #0
 801cafe:	d018      	beq.n	801cb32 <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 801cb00:	683b      	ldr	r3, [r7, #0]
 801cb02:	681b      	ldr	r3, [r3, #0]
 801cb04:	68db      	ldr	r3, [r3, #12]
 801cb06:	683a      	ldr	r2, [r7, #0]
 801cb08:	6879      	ldr	r1, [r7, #4]
 801cb0a:	2000      	movs	r0, #0
 801cb0c:	4798      	blx	r3
 801cb0e:	4603      	mov	r3, r0
 801cb10:	f083 0301 	eor.w	r3, r3, #1
 801cb14:	b2db      	uxtb	r3, r3
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	d00b      	beq.n	801cb32 <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	691b      	ldr	r3, [r3, #16]
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	d002      	beq.n	801cb28 <encode_callback_field+0x3c>
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	691b      	ldr	r3, [r3, #16]
 801cb26:	e000      	b.n	801cb2a <encode_callback_field+0x3e>
 801cb28:	4b04      	ldr	r3, [pc, #16]	; (801cb3c <encode_callback_field+0x50>)
 801cb2a:	687a      	ldr	r2, [r7, #4]
 801cb2c:	6113      	str	r3, [r2, #16]
 801cb2e:	2300      	movs	r3, #0
 801cb30:	e000      	b.n	801cb34 <encode_callback_field+0x48>
    }
    return true;
 801cb32:	2301      	movs	r3, #1
}
 801cb34:	4618      	mov	r0, r3
 801cb36:	3708      	adds	r7, #8
 801cb38:	46bd      	mov	sp, r7
 801cb3a:	bd80      	pop	{r7, pc}
 801cb3c:	08022048 	.word	0x08022048

0801cb40 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 801cb40:	b580      	push	{r7, lr}
 801cb42:	b082      	sub	sp, #8
 801cb44:	af00      	add	r7, sp, #0
 801cb46:	6078      	str	r0, [r7, #4]
 801cb48:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 801cb4a:	683b      	ldr	r3, [r7, #0]
 801cb4c:	7d9b      	ldrb	r3, [r3, #22]
 801cb4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801cb52:	2b30      	cmp	r3, #48	; 0x30
 801cb54:	d108      	bne.n	801cb68 <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 801cb56:	683b      	ldr	r3, [r7, #0]
 801cb58:	6a1b      	ldr	r3, [r3, #32]
 801cb5a:	881a      	ldrh	r2, [r3, #0]
 801cb5c:	683b      	ldr	r3, [r7, #0]
 801cb5e:	8a1b      	ldrh	r3, [r3, #16]
 801cb60:	429a      	cmp	r2, r3
 801cb62:	d026      	beq.n	801cbb2 <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 801cb64:	2301      	movs	r3, #1
 801cb66:	e059      	b.n	801cc1c <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 801cb68:	683b      	ldr	r3, [r7, #0]
 801cb6a:	7d9b      	ldrb	r3, [r3, #22]
 801cb6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801cb70:	2b10      	cmp	r3, #16
 801cb72:	d11e      	bne.n	801cbb2 <encode_field+0x72>
    {
        if (field->pSize)
 801cb74:	683b      	ldr	r3, [r7, #0]
 801cb76:	6a1b      	ldr	r3, [r3, #32]
 801cb78:	2b00      	cmp	r3, #0
 801cb7a:	d00c      	beq.n	801cb96 <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 801cb7c:	683b      	ldr	r3, [r7, #0]
 801cb7e:	6a1b      	ldr	r3, [r3, #32]
 801cb80:	4618      	mov	r0, r3
 801cb82:	f7ff fcaf 	bl	801c4e4 <safe_read_bool>
 801cb86:	4603      	mov	r3, r0
 801cb88:	f083 0301 	eor.w	r3, r3, #1
 801cb8c:	b2db      	uxtb	r3, r3
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	d00f      	beq.n	801cbb2 <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 801cb92:	2301      	movs	r3, #1
 801cb94:	e042      	b.n	801cc1c <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 801cb96:	683b      	ldr	r3, [r7, #0]
 801cb98:	7d9b      	ldrb	r3, [r3, #22]
 801cb9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d107      	bne.n	801cbb2 <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 801cba2:	6838      	ldr	r0, [r7, #0]
 801cba4:	f7ff fe10 	bl	801c7c8 <pb_check_proto3_default_value>
 801cba8:	4603      	mov	r3, r0
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	d001      	beq.n	801cbb2 <encode_field+0x72>
                return true;
 801cbae:	2301      	movs	r3, #1
 801cbb0:	e034      	b.n	801cc1c <encode_field+0xdc>
        }
    }

    if (!field->pData)
 801cbb2:	683b      	ldr	r3, [r7, #0]
 801cbb4:	69db      	ldr	r3, [r3, #28]
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	d113      	bne.n	801cbe2 <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 801cbba:	683b      	ldr	r3, [r7, #0]
 801cbbc:	7d9b      	ldrb	r3, [r3, #22]
 801cbbe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	d10b      	bne.n	801cbde <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	691b      	ldr	r3, [r3, #16]
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d002      	beq.n	801cbd4 <encode_field+0x94>
 801cbce:	687b      	ldr	r3, [r7, #4]
 801cbd0:	691b      	ldr	r3, [r3, #16]
 801cbd2:	e000      	b.n	801cbd6 <encode_field+0x96>
 801cbd4:	4b13      	ldr	r3, [pc, #76]	; (801cc24 <encode_field+0xe4>)
 801cbd6:	687a      	ldr	r2, [r7, #4]
 801cbd8:	6113      	str	r3, [r2, #16]
 801cbda:	2300      	movs	r3, #0
 801cbdc:	e01e      	b.n	801cc1c <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 801cbde:	2301      	movs	r3, #1
 801cbe0:	e01c      	b.n	801cc1c <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 801cbe2:	683b      	ldr	r3, [r7, #0]
 801cbe4:	7d9b      	ldrb	r3, [r3, #22]
 801cbe6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801cbea:	2b40      	cmp	r3, #64	; 0x40
 801cbec:	d105      	bne.n	801cbfa <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 801cbee:	6839      	ldr	r1, [r7, #0]
 801cbf0:	6878      	ldr	r0, [r7, #4]
 801cbf2:	f7ff ff7b 	bl	801caec <encode_callback_field>
 801cbf6:	4603      	mov	r3, r0
 801cbf8:	e010      	b.n	801cc1c <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 801cbfa:	683b      	ldr	r3, [r7, #0]
 801cbfc:	7d9b      	ldrb	r3, [r3, #22]
 801cbfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801cc02:	2b20      	cmp	r3, #32
 801cc04:	d105      	bne.n	801cc12 <encode_field+0xd2>
    {
        return encode_array(stream, field);
 801cc06:	6839      	ldr	r1, [r7, #0]
 801cc08:	6878      	ldr	r0, [r7, #4]
 801cc0a:	f7ff fc89 	bl	801c520 <encode_array>
 801cc0e:	4603      	mov	r3, r0
 801cc10:	e004      	b.n	801cc1c <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 801cc12:	6839      	ldr	r1, [r7, #0]
 801cc14:	6878      	ldr	r0, [r7, #4]
 801cc16:	f7ff fef5 	bl	801ca04 <encode_basic_field>
 801cc1a:	4603      	mov	r3, r0
    }
}
 801cc1c:	4618      	mov	r0, r3
 801cc1e:	3708      	adds	r7, #8
 801cc20:	46bd      	mov	sp, r7
 801cc22:	bd80      	pop	{r7, pc}
 801cc24:	08022058 	.word	0x08022058

0801cc28 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 801cc28:	b580      	push	{r7, lr}
 801cc2a:	b08c      	sub	sp, #48	; 0x30
 801cc2c:	af00      	add	r7, sp, #0
 801cc2e:	6078      	str	r0, [r7, #4]
 801cc30:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 801cc32:	f107 0308 	add.w	r3, r7, #8
 801cc36:	6839      	ldr	r1, [r7, #0]
 801cc38:	4618      	mov	r0, r3
 801cc3a:	f7fd fdc2 	bl	801a7c2 <pb_field_iter_begin_extension_const>
 801cc3e:	4603      	mov	r3, r0
 801cc40:	f083 0301 	eor.w	r3, r3, #1
 801cc44:	b2db      	uxtb	r3, r3
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d00b      	beq.n	801cc62 <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	691b      	ldr	r3, [r3, #16]
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	d002      	beq.n	801cc58 <default_extension_encoder+0x30>
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	691b      	ldr	r3, [r3, #16]
 801cc56:	e000      	b.n	801cc5a <default_extension_encoder+0x32>
 801cc58:	4b07      	ldr	r3, [pc, #28]	; (801cc78 <default_extension_encoder+0x50>)
 801cc5a:	687a      	ldr	r2, [r7, #4]
 801cc5c:	6113      	str	r3, [r2, #16]
 801cc5e:	2300      	movs	r3, #0
 801cc60:	e006      	b.n	801cc70 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 801cc62:	f107 0308 	add.w	r3, r7, #8
 801cc66:	4619      	mov	r1, r3
 801cc68:	6878      	ldr	r0, [r7, #4]
 801cc6a:	f7ff ff69 	bl	801cb40 <encode_field>
 801cc6e:	4603      	mov	r3, r0
}
 801cc70:	4618      	mov	r0, r3
 801cc72:	3730      	adds	r7, #48	; 0x30
 801cc74:	46bd      	mov	sp, r7
 801cc76:	bd80      	pop	{r7, pc}
 801cc78:	08022070 	.word	0x08022070

0801cc7c <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801cc7c:	b580      	push	{r7, lr}
 801cc7e:	b084      	sub	sp, #16
 801cc80:	af00      	add	r7, sp, #0
 801cc82:	6078      	str	r0, [r7, #4]
 801cc84:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 801cc86:	683b      	ldr	r3, [r7, #0]
 801cc88:	69db      	ldr	r3, [r3, #28]
 801cc8a:	681b      	ldr	r3, [r3, #0]
 801cc8c:	60fb      	str	r3, [r7, #12]

    while (extension)
 801cc8e:	e01e      	b.n	801ccce <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 801cc90:	68fb      	ldr	r3, [r7, #12]
 801cc92:	681b      	ldr	r3, [r3, #0]
 801cc94:	685b      	ldr	r3, [r3, #4]
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	d008      	beq.n	801ccac <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 801cc9a:	68fb      	ldr	r3, [r7, #12]
 801cc9c:	681b      	ldr	r3, [r3, #0]
 801cc9e:	685b      	ldr	r3, [r3, #4]
 801cca0:	68f9      	ldr	r1, [r7, #12]
 801cca2:	6878      	ldr	r0, [r7, #4]
 801cca4:	4798      	blx	r3
 801cca6:	4603      	mov	r3, r0
 801cca8:	72fb      	strb	r3, [r7, #11]
 801ccaa:	e005      	b.n	801ccb8 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 801ccac:	68f9      	ldr	r1, [r7, #12]
 801ccae:	6878      	ldr	r0, [r7, #4]
 801ccb0:	f7ff ffba 	bl	801cc28 <default_extension_encoder>
 801ccb4:	4603      	mov	r3, r0
 801ccb6:	72fb      	strb	r3, [r7, #11]

        if (!status)
 801ccb8:	7afb      	ldrb	r3, [r7, #11]
 801ccba:	f083 0301 	eor.w	r3, r3, #1
 801ccbe:	b2db      	uxtb	r3, r3
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	d001      	beq.n	801ccc8 <encode_extension_field+0x4c>
            return false;
 801ccc4:	2300      	movs	r3, #0
 801ccc6:	e006      	b.n	801ccd6 <encode_extension_field+0x5a>
        
        extension = extension->next;
 801ccc8:	68fb      	ldr	r3, [r7, #12]
 801ccca:	689b      	ldr	r3, [r3, #8]
 801cccc:	60fb      	str	r3, [r7, #12]
    while (extension)
 801ccce:	68fb      	ldr	r3, [r7, #12]
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	d1dd      	bne.n	801cc90 <encode_extension_field+0x14>
    }
    
    return true;
 801ccd4:	2301      	movs	r3, #1
}
 801ccd6:	4618      	mov	r0, r3
 801ccd8:	3710      	adds	r7, #16
 801ccda:	46bd      	mov	sp, r7
 801ccdc:	bd80      	pop	{r7, pc}

0801ccde <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 801ccde:	b580      	push	{r7, lr}
 801cce0:	b08e      	sub	sp, #56	; 0x38
 801cce2:	af00      	add	r7, sp, #0
 801cce4:	60f8      	str	r0, [r7, #12]
 801cce6:	60b9      	str	r1, [r7, #8]
 801cce8:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 801ccea:	f107 0310 	add.w	r3, r7, #16
 801ccee:	687a      	ldr	r2, [r7, #4]
 801ccf0:	68b9      	ldr	r1, [r7, #8]
 801ccf2:	4618      	mov	r0, r3
 801ccf4:	f7fd fd51 	bl	801a79a <pb_field_iter_begin_const>
 801ccf8:	4603      	mov	r3, r0
 801ccfa:	f083 0301 	eor.w	r3, r3, #1
 801ccfe:	b2db      	uxtb	r3, r3
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	d001      	beq.n	801cd08 <pb_encode+0x2a>
        return true; /* Empty message type */
 801cd04:	2301      	movs	r3, #1
 801cd06:	e02a      	b.n	801cd5e <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 801cd08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cd0c:	f003 030f 	and.w	r3, r3, #15
 801cd10:	2b0a      	cmp	r3, #10
 801cd12:	d10d      	bne.n	801cd30 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 801cd14:	f107 0310 	add.w	r3, r7, #16
 801cd18:	4619      	mov	r1, r3
 801cd1a:	68f8      	ldr	r0, [r7, #12]
 801cd1c:	f7ff ffae 	bl	801cc7c <encode_extension_field>
 801cd20:	4603      	mov	r3, r0
 801cd22:	f083 0301 	eor.w	r3, r3, #1
 801cd26:	b2db      	uxtb	r3, r3
 801cd28:	2b00      	cmp	r3, #0
 801cd2a:	d00f      	beq.n	801cd4c <pb_encode+0x6e>
                return false;
 801cd2c:	2300      	movs	r3, #0
 801cd2e:	e016      	b.n	801cd5e <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 801cd30:	f107 0310 	add.w	r3, r7, #16
 801cd34:	4619      	mov	r1, r3
 801cd36:	68f8      	ldr	r0, [r7, #12]
 801cd38:	f7ff ff02 	bl	801cb40 <encode_field>
 801cd3c:	4603      	mov	r3, r0
 801cd3e:	f083 0301 	eor.w	r3, r3, #1
 801cd42:	b2db      	uxtb	r3, r3
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	d001      	beq.n	801cd4c <pb_encode+0x6e>
                return false;
 801cd48:	2300      	movs	r3, #0
 801cd4a:	e008      	b.n	801cd5e <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 801cd4c:	f107 0310 	add.w	r3, r7, #16
 801cd50:	4618      	mov	r0, r3
 801cd52:	f7fd fc77 	bl	801a644 <pb_field_iter_next>
 801cd56:	4603      	mov	r3, r0
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	d1d5      	bne.n	801cd08 <pb_encode+0x2a>
    
    return true;
 801cd5c:	2301      	movs	r3, #1
}
 801cd5e:	4618      	mov	r0, r3
 801cd60:	3738      	adds	r7, #56	; 0x38
 801cd62:	46bd      	mov	sp, r7
 801cd64:	bd80      	pop	{r7, pc}

0801cd66 <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 801cd66:	b580      	push	{r7, lr}
 801cd68:	b088      	sub	sp, #32
 801cd6a:	af00      	add	r7, sp, #0
 801cd6c:	60f8      	str	r0, [r7, #12]
 801cd6e:	60b9      	str	r1, [r7, #8]
 801cd70:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 801cd72:	2300      	movs	r3, #0
 801cd74:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 801cd76:	68bb      	ldr	r3, [r7, #8]
 801cd78:	b2db      	uxtb	r3, r3
 801cd7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cd7e:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 801cd80:	68bb      	ldr	r3, [r7, #8]
 801cd82:	09db      	lsrs	r3, r3, #7
 801cd84:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 801cd86:	e013      	b.n	801cdb0 <pb_encode_varint_32+0x4a>
    {
        byte |= 0x80;
 801cd88:	7efb      	ldrb	r3, [r7, #27]
 801cd8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801cd8e:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 801cd90:	69fb      	ldr	r3, [r7, #28]
 801cd92:	1c5a      	adds	r2, r3, #1
 801cd94:	61fa      	str	r2, [r7, #28]
 801cd96:	3320      	adds	r3, #32
 801cd98:	443b      	add	r3, r7
 801cd9a:	7efa      	ldrb	r2, [r7, #27]
 801cd9c:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 801cda0:	68bb      	ldr	r3, [r7, #8]
 801cda2:	b2db      	uxtb	r3, r3
 801cda4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cda8:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 801cdaa:	68bb      	ldr	r3, [r7, #8]
 801cdac:	09db      	lsrs	r3, r3, #7
 801cdae:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 801cdb0:	69fb      	ldr	r3, [r7, #28]
 801cdb2:	2b03      	cmp	r3, #3
 801cdb4:	d805      	bhi.n	801cdc2 <pb_encode_varint_32+0x5c>
 801cdb6:	68bb      	ldr	r3, [r7, #8]
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	d1e5      	bne.n	801cd88 <pb_encode_varint_32+0x22>
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d1e2      	bne.n	801cd88 <pb_encode_varint_32+0x22>
    }

    if (high)
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d024      	beq.n	801ce12 <pb_encode_varint_32+0xac>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	b2db      	uxtb	r3, r3
 801cdcc:	011b      	lsls	r3, r3, #4
 801cdce:	b2db      	uxtb	r3, r3
 801cdd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801cdd4:	b2da      	uxtb	r2, r3
 801cdd6:	7efb      	ldrb	r3, [r7, #27]
 801cdd8:	4313      	orrs	r3, r2
 801cdda:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	08db      	lsrs	r3, r3, #3
 801cde0:	607b      	str	r3, [r7, #4]

        while (high)
 801cde2:	e013      	b.n	801ce0c <pb_encode_varint_32+0xa6>
        {
            byte |= 0x80;
 801cde4:	7efb      	ldrb	r3, [r7, #27]
 801cde6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801cdea:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 801cdec:	69fb      	ldr	r3, [r7, #28]
 801cdee:	1c5a      	adds	r2, r3, #1
 801cdf0:	61fa      	str	r2, [r7, #28]
 801cdf2:	3320      	adds	r3, #32
 801cdf4:	443b      	add	r3, r7
 801cdf6:	7efa      	ldrb	r2, [r7, #27]
 801cdf8:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	b2db      	uxtb	r3, r3
 801ce00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ce04:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 801ce06:	687b      	ldr	r3, [r7, #4]
 801ce08:	09db      	lsrs	r3, r3, #7
 801ce0a:	607b      	str	r3, [r7, #4]
        while (high)
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	d1e8      	bne.n	801cde4 <pb_encode_varint_32+0x7e>
        }
    }

    buffer[i++] = byte;
 801ce12:	69fb      	ldr	r3, [r7, #28]
 801ce14:	1c5a      	adds	r2, r3, #1
 801ce16:	61fa      	str	r2, [r7, #28]
 801ce18:	3320      	adds	r3, #32
 801ce1a:	443b      	add	r3, r7
 801ce1c:	7efa      	ldrb	r2, [r7, #27]
 801ce1e:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 801ce22:	f107 0310 	add.w	r3, r7, #16
 801ce26:	69fa      	ldr	r2, [r7, #28]
 801ce28:	4619      	mov	r1, r3
 801ce2a:	68f8      	ldr	r0, [r7, #12]
 801ce2c:	f7ff fb0a 	bl	801c444 <pb_write>
 801ce30:	4603      	mov	r3, r0
}
 801ce32:	4618      	mov	r0, r3
 801ce34:	3720      	adds	r7, #32
 801ce36:	46bd      	mov	sp, r7
 801ce38:	bd80      	pop	{r7, pc}

0801ce3a <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 801ce3a:	b590      	push	{r4, r7, lr}
 801ce3c:	b087      	sub	sp, #28
 801ce3e:	af00      	add	r7, sp, #0
 801ce40:	60f8      	str	r0, [r7, #12]
 801ce42:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 801ce46:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ce4a:	2a80      	cmp	r2, #128	; 0x80
 801ce4c:	f173 0300 	sbcs.w	r3, r3, #0
 801ce50:	d20a      	bcs.n	801ce68 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 801ce52:	783b      	ldrb	r3, [r7, #0]
 801ce54:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 801ce56:	f107 0317 	add.w	r3, r7, #23
 801ce5a:	2201      	movs	r2, #1
 801ce5c:	4619      	mov	r1, r3
 801ce5e:	68f8      	ldr	r0, [r7, #12]
 801ce60:	f7ff faf0 	bl	801c444 <pb_write>
 801ce64:	4603      	mov	r3, r0
 801ce66:	e00f      	b.n	801ce88 <pb_encode_varint+0x4e>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 801ce68:	683c      	ldr	r4, [r7, #0]
 801ce6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801ce6e:	f04f 0200 	mov.w	r2, #0
 801ce72:	f04f 0300 	mov.w	r3, #0
 801ce76:	000a      	movs	r2, r1
 801ce78:	2300      	movs	r3, #0
 801ce7a:	4613      	mov	r3, r2
 801ce7c:	461a      	mov	r2, r3
 801ce7e:	4621      	mov	r1, r4
 801ce80:	68f8      	ldr	r0, [r7, #12]
 801ce82:	f7ff ff70 	bl	801cd66 <pb_encode_varint_32>
 801ce86:	4603      	mov	r3, r0
#endif
    }
}
 801ce88:	4618      	mov	r0, r3
 801ce8a:	371c      	adds	r7, #28
 801ce8c:	46bd      	mov	sp, r7
 801ce8e:	bd90      	pop	{r4, r7, pc}

0801ce90 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 801ce90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ce94:	b08a      	sub	sp, #40	; 0x28
 801ce96:	af00      	add	r7, sp, #0
 801ce98:	6178      	str	r0, [r7, #20]
 801ce9a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 801ce9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cea2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801cea6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (value < 0)
 801ceaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	da15      	bge.n	801cede <pb_encode_svarint+0x4e>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 801ceb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801ceb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ceba:	ea00 0402 	and.w	r4, r0, r2
 801cebe:	ea01 0503 	and.w	r5, r1, r3
 801cec2:	1923      	adds	r3, r4, r4
 801cec4:	603b      	str	r3, [r7, #0]
 801cec6:	eb45 0305 	adc.w	r3, r5, r5
 801ceca:	607b      	str	r3, [r7, #4]
 801cecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ced0:	ea6f 0a02 	mvn.w	sl, r2
 801ced4:	ea6f 0b03 	mvn.w	fp, r3
 801ced8:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 801cedc:	e007      	b.n	801ceee <pb_encode_svarint+0x5e>
    else
        zigzagged = (pb_uint64_t)value << 1;
 801cede:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801cee2:	eb12 0802 	adds.w	r8, r2, r2
 801cee6:	eb43 0903 	adc.w	r9, r3, r3
 801ceea:	e9c7 8908 	strd	r8, r9, [r7, #32]
    
    return pb_encode_varint(stream, zigzagged);
 801ceee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801cef2:	6978      	ldr	r0, [r7, #20]
 801cef4:	f7ff ffa1 	bl	801ce3a <pb_encode_varint>
 801cef8:	4603      	mov	r3, r0
}
 801cefa:	4618      	mov	r0, r3
 801cefc:	3728      	adds	r7, #40	; 0x28
 801cefe:	46bd      	mov	sp, r7
 801cf00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801cf04 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 801cf04:	b580      	push	{r7, lr}
 801cf06:	b082      	sub	sp, #8
 801cf08:	af00      	add	r7, sp, #0
 801cf0a:	6078      	str	r0, [r7, #4]
 801cf0c:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 801cf0e:	2204      	movs	r2, #4
 801cf10:	6839      	ldr	r1, [r7, #0]
 801cf12:	6878      	ldr	r0, [r7, #4]
 801cf14:	f7ff fa96 	bl	801c444 <pb_write>
 801cf18:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 801cf1a:	4618      	mov	r0, r3
 801cf1c:	3708      	adds	r7, #8
 801cf1e:	46bd      	mov	sp, r7
 801cf20:	bd80      	pop	{r7, pc}

0801cf22 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 801cf22:	b580      	push	{r7, lr}
 801cf24:	b082      	sub	sp, #8
 801cf26:	af00      	add	r7, sp, #0
 801cf28:	6078      	str	r0, [r7, #4]
 801cf2a:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 801cf2c:	2208      	movs	r2, #8
 801cf2e:	6839      	ldr	r1, [r7, #0]
 801cf30:	6878      	ldr	r0, [r7, #4]
 801cf32:	f7ff fa87 	bl	801c444 <pb_write>
 801cf36:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 801cf38:	4618      	mov	r0, r3
 801cf3a:	3708      	adds	r7, #8
 801cf3c:	46bd      	mov	sp, r7
 801cf3e:	bd80      	pop	{r7, pc}

0801cf40 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 801cf40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801cf44:	b088      	sub	sp, #32
 801cf46:	af00      	add	r7, sp, #0
 801cf48:	6178      	str	r0, [r7, #20]
 801cf4a:	460b      	mov	r3, r1
 801cf4c:	60fa      	str	r2, [r7, #12]
 801cf4e:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 801cf50:	68fb      	ldr	r3, [r7, #12]
 801cf52:	2200      	movs	r2, #0
 801cf54:	469a      	mov	sl, r3
 801cf56:	4693      	mov	fp, r2
 801cf58:	ea4f 755a 	mov.w	r5, sl, lsr #29
 801cf5c:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 801cf60:	7cfb      	ldrb	r3, [r7, #19]
 801cf62:	2200      	movs	r2, #0
 801cf64:	4698      	mov	r8, r3
 801cf66:	4691      	mov	r9, r2
 801cf68:	ea44 0308 	orr.w	r3, r4, r8
 801cf6c:	603b      	str	r3, [r7, #0]
 801cf6e:	ea45 0309 	orr.w	r3, r5, r9
 801cf72:	607b      	str	r3, [r7, #4]
 801cf74:	e9d7 3400 	ldrd	r3, r4, [r7]
 801cf78:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 801cf7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801cf80:	6978      	ldr	r0, [r7, #20]
 801cf82:	f7ff ff5a 	bl	801ce3a <pb_encode_varint>
 801cf86:	4603      	mov	r3, r0
}
 801cf88:	4618      	mov	r0, r3
 801cf8a:	3720      	adds	r7, #32
 801cf8c:	46bd      	mov	sp, r7
 801cf8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0801cf94 <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 801cf94:	b580      	push	{r7, lr}
 801cf96:	b084      	sub	sp, #16
 801cf98:	af00      	add	r7, sp, #0
 801cf9a:	6078      	str	r0, [r7, #4]
 801cf9c:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 801cf9e:	683b      	ldr	r3, [r7, #0]
 801cfa0:	7d9b      	ldrb	r3, [r3, #22]
 801cfa2:	f003 030f 	and.w	r3, r3, #15
 801cfa6:	2b0b      	cmp	r3, #11
 801cfa8:	d826      	bhi.n	801cff8 <pb_encode_tag_for_field+0x64>
 801cfaa:	a201      	add	r2, pc, #4	; (adr r2, 801cfb0 <pb_encode_tag_for_field+0x1c>)
 801cfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cfb0:	0801cfe1 	.word	0x0801cfe1
 801cfb4:	0801cfe1 	.word	0x0801cfe1
 801cfb8:	0801cfe1 	.word	0x0801cfe1
 801cfbc:	0801cfe1 	.word	0x0801cfe1
 801cfc0:	0801cfe7 	.word	0x0801cfe7
 801cfc4:	0801cfed 	.word	0x0801cfed
 801cfc8:	0801cff3 	.word	0x0801cff3
 801cfcc:	0801cff3 	.word	0x0801cff3
 801cfd0:	0801cff3 	.word	0x0801cff3
 801cfd4:	0801cff3 	.word	0x0801cff3
 801cfd8:	0801cff9 	.word	0x0801cff9
 801cfdc:	0801cff3 	.word	0x0801cff3
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 801cfe0:	2300      	movs	r3, #0
 801cfe2:	73fb      	strb	r3, [r7, #15]
            break;
 801cfe4:	e014      	b.n	801d010 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 801cfe6:	2305      	movs	r3, #5
 801cfe8:	73fb      	strb	r3, [r7, #15]
            break;
 801cfea:	e011      	b.n	801d010 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 801cfec:	2301      	movs	r3, #1
 801cfee:	73fb      	strb	r3, [r7, #15]
            break;
 801cff0:	e00e      	b.n	801d010 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 801cff2:	2302      	movs	r3, #2
 801cff4:	73fb      	strb	r3, [r7, #15]
            break;
 801cff6:	e00b      	b.n	801d010 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	691b      	ldr	r3, [r3, #16]
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	d002      	beq.n	801d006 <pb_encode_tag_for_field+0x72>
 801d000:	687b      	ldr	r3, [r7, #4]
 801d002:	691b      	ldr	r3, [r3, #16]
 801d004:	e000      	b.n	801d008 <pb_encode_tag_for_field+0x74>
 801d006:	4b09      	ldr	r3, [pc, #36]	; (801d02c <pb_encode_tag_for_field+0x98>)
 801d008:	687a      	ldr	r2, [r7, #4]
 801d00a:	6113      	str	r3, [r2, #16]
 801d00c:	2300      	movs	r3, #0
 801d00e:	e008      	b.n	801d022 <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 801d010:	683b      	ldr	r3, [r7, #0]
 801d012:	8a1b      	ldrh	r3, [r3, #16]
 801d014:	461a      	mov	r2, r3
 801d016:	7bfb      	ldrb	r3, [r7, #15]
 801d018:	4619      	mov	r1, r3
 801d01a:	6878      	ldr	r0, [r7, #4]
 801d01c:	f7ff ff90 	bl	801cf40 <pb_encode_tag>
 801d020:	4603      	mov	r3, r0
}
 801d022:	4618      	mov	r0, r3
 801d024:	3710      	adds	r7, #16
 801d026:	46bd      	mov	sp, r7
 801d028:	bd80      	pop	{r7, pc}
 801d02a:	bf00      	nop
 801d02c:	08022034 	.word	0x08022034

0801d030 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 801d030:	b5b0      	push	{r4, r5, r7, lr}
 801d032:	b084      	sub	sp, #16
 801d034:	af00      	add	r7, sp, #0
 801d036:	60f8      	str	r0, [r7, #12]
 801d038:	60b9      	str	r1, [r7, #8]
 801d03a:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	2200      	movs	r2, #0
 801d040:	461c      	mov	r4, r3
 801d042:	4615      	mov	r5, r2
 801d044:	4622      	mov	r2, r4
 801d046:	462b      	mov	r3, r5
 801d048:	68f8      	ldr	r0, [r7, #12]
 801d04a:	f7ff fef6 	bl	801ce3a <pb_encode_varint>
 801d04e:	4603      	mov	r3, r0
 801d050:	f083 0301 	eor.w	r3, r3, #1
 801d054:	b2db      	uxtb	r3, r3
 801d056:	2b00      	cmp	r3, #0
 801d058:	d001      	beq.n	801d05e <pb_encode_string+0x2e>
        return false;
 801d05a:	2300      	movs	r3, #0
 801d05c:	e005      	b.n	801d06a <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 801d05e:	687a      	ldr	r2, [r7, #4]
 801d060:	68b9      	ldr	r1, [r7, #8]
 801d062:	68f8      	ldr	r0, [r7, #12]
 801d064:	f7ff f9ee 	bl	801c444 <pb_write>
 801d068:	4603      	mov	r3, r0
}
 801d06a:	4618      	mov	r0, r3
 801d06c:	3710      	adds	r7, #16
 801d06e:	46bd      	mov	sp, r7
 801d070:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801d074 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 801d074:	b5b0      	push	{r4, r5, r7, lr}
 801d076:	b08c      	sub	sp, #48	; 0x30
 801d078:	af00      	add	r7, sp, #0
 801d07a:	60f8      	str	r0, [r7, #12]
 801d07c:	60b9      	str	r1, [r7, #8]
 801d07e:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 801d080:	f107 0314 	add.w	r3, r7, #20
 801d084:	2200      	movs	r2, #0
 801d086:	601a      	str	r2, [r3, #0]
 801d088:	605a      	str	r2, [r3, #4]
 801d08a:	609a      	str	r2, [r3, #8]
 801d08c:	60da      	str	r2, [r3, #12]
 801d08e:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 801d090:	f107 0314 	add.w	r3, r7, #20
 801d094:	687a      	ldr	r2, [r7, #4]
 801d096:	68b9      	ldr	r1, [r7, #8]
 801d098:	4618      	mov	r0, r3
 801d09a:	f7ff fe20 	bl	801ccde <pb_encode>
 801d09e:	4603      	mov	r3, r0
 801d0a0:	f083 0301 	eor.w	r3, r3, #1
 801d0a4:	b2db      	uxtb	r3, r3
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	d004      	beq.n	801d0b4 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 801d0aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d0ac:	68fb      	ldr	r3, [r7, #12]
 801d0ae:	611a      	str	r2, [r3, #16]
#endif
        return false;
 801d0b0:	2300      	movs	r3, #0
 801d0b2:	e065      	b.n	801d180 <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 801d0b4:	6a3b      	ldr	r3, [r7, #32]
 801d0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 801d0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0ba:	2200      	movs	r2, #0
 801d0bc:	461c      	mov	r4, r3
 801d0be:	4615      	mov	r5, r2
 801d0c0:	4622      	mov	r2, r4
 801d0c2:	462b      	mov	r3, r5
 801d0c4:	68f8      	ldr	r0, [r7, #12]
 801d0c6:	f7ff feb8 	bl	801ce3a <pb_encode_varint>
 801d0ca:	4603      	mov	r3, r0
 801d0cc:	f083 0301 	eor.w	r3, r3, #1
 801d0d0:	b2db      	uxtb	r3, r3
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	d001      	beq.n	801d0da <pb_encode_submessage+0x66>
        return false;
 801d0d6:	2300      	movs	r3, #0
 801d0d8:	e052      	b.n	801d180 <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 801d0da:	68fb      	ldr	r3, [r7, #12]
 801d0dc:	681b      	ldr	r3, [r3, #0]
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	d106      	bne.n	801d0f0 <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 801d0e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d0e4:	2100      	movs	r1, #0
 801d0e6:	68f8      	ldr	r0, [r7, #12]
 801d0e8:	f7ff f9ac 	bl	801c444 <pb_write>
 801d0ec:	4603      	mov	r3, r0
 801d0ee:	e047      	b.n	801d180 <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 801d0f0:	68fb      	ldr	r3, [r7, #12]
 801d0f2:	68da      	ldr	r2, [r3, #12]
 801d0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0f6:	441a      	add	r2, r3
 801d0f8:	68fb      	ldr	r3, [r7, #12]
 801d0fa:	689b      	ldr	r3, [r3, #8]
 801d0fc:	429a      	cmp	r2, r3
 801d0fe:	d90b      	bls.n	801d118 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 801d100:	68fb      	ldr	r3, [r7, #12]
 801d102:	691b      	ldr	r3, [r3, #16]
 801d104:	2b00      	cmp	r3, #0
 801d106:	d002      	beq.n	801d10e <pb_encode_submessage+0x9a>
 801d108:	68fb      	ldr	r3, [r7, #12]
 801d10a:	691b      	ldr	r3, [r3, #16]
 801d10c:	e000      	b.n	801d110 <pb_encode_submessage+0x9c>
 801d10e:	4b1e      	ldr	r3, [pc, #120]	; (801d188 <pb_encode_submessage+0x114>)
 801d110:	68fa      	ldr	r2, [r7, #12]
 801d112:	6113      	str	r3, [r2, #16]
 801d114:	2300      	movs	r3, #0
 801d116:	e033      	b.n	801d180 <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 801d118:	68fb      	ldr	r3, [r7, #12]
 801d11a:	681b      	ldr	r3, [r3, #0]
 801d11c:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 801d11e:	68fb      	ldr	r3, [r7, #12]
 801d120:	685b      	ldr	r3, [r3, #4]
 801d122:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 801d124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d126:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 801d128:	2300      	movs	r3, #0
 801d12a:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 801d12c:	2300      	movs	r3, #0
 801d12e:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 801d130:	f107 0314 	add.w	r3, r7, #20
 801d134:	687a      	ldr	r2, [r7, #4]
 801d136:	68b9      	ldr	r1, [r7, #8]
 801d138:	4618      	mov	r0, r3
 801d13a:	f7ff fdd0 	bl	801ccde <pb_encode>
 801d13e:	4603      	mov	r3, r0
 801d140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 801d144:	68fb      	ldr	r3, [r7, #12]
 801d146:	68da      	ldr	r2, [r3, #12]
 801d148:	6a3b      	ldr	r3, [r7, #32]
 801d14a:	441a      	add	r2, r3
 801d14c:	68fb      	ldr	r3, [r7, #12]
 801d14e:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 801d150:	69ba      	ldr	r2, [r7, #24]
 801d152:	68fb      	ldr	r3, [r7, #12]
 801d154:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 801d156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d158:	68fb      	ldr	r3, [r7, #12]
 801d15a:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 801d15c:	6a3b      	ldr	r3, [r7, #32]
 801d15e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d160:	429a      	cmp	r2, r3
 801d162:	d00b      	beq.n	801d17c <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 801d164:	68fb      	ldr	r3, [r7, #12]
 801d166:	691b      	ldr	r3, [r3, #16]
 801d168:	2b00      	cmp	r3, #0
 801d16a:	d002      	beq.n	801d172 <pb_encode_submessage+0xfe>
 801d16c:	68fb      	ldr	r3, [r7, #12]
 801d16e:	691b      	ldr	r3, [r3, #16]
 801d170:	e000      	b.n	801d174 <pb_encode_submessage+0x100>
 801d172:	4b06      	ldr	r3, [pc, #24]	; (801d18c <pb_encode_submessage+0x118>)
 801d174:	68fa      	ldr	r2, [r7, #12]
 801d176:	6113      	str	r3, [r2, #16]
 801d178:	2300      	movs	r3, #0
 801d17a:	e001      	b.n	801d180 <pb_encode_submessage+0x10c>
    
    return status;
 801d17c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801d180:	4618      	mov	r0, r3
 801d182:	3730      	adds	r7, #48	; 0x30
 801d184:	46bd      	mov	sp, r7
 801d186:	bdb0      	pop	{r4, r5, r7, pc}
 801d188:	08021ffc 	.word	0x08021ffc
 801d18c:	08022084 	.word	0x08022084

0801d190 <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d190:	b5b0      	push	{r4, r5, r7, lr}
 801d192:	b084      	sub	sp, #16
 801d194:	af00      	add	r7, sp, #0
 801d196:	6078      	str	r0, [r7, #4]
 801d198:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 801d19a:	683b      	ldr	r3, [r7, #0]
 801d19c:	69db      	ldr	r3, [r3, #28]
 801d19e:	4618      	mov	r0, r3
 801d1a0:	f7ff f9a0 	bl	801c4e4 <safe_read_bool>
 801d1a4:	4603      	mov	r3, r0
 801d1a6:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 801d1a8:	68fb      	ldr	r3, [r7, #12]
 801d1aa:	2200      	movs	r2, #0
 801d1ac:	461c      	mov	r4, r3
 801d1ae:	4615      	mov	r5, r2
 801d1b0:	4622      	mov	r2, r4
 801d1b2:	462b      	mov	r3, r5
 801d1b4:	6878      	ldr	r0, [r7, #4]
 801d1b6:	f7ff fe40 	bl	801ce3a <pb_encode_varint>
 801d1ba:	4603      	mov	r3, r0
}
 801d1bc:	4618      	mov	r0, r3
 801d1be:	3710      	adds	r7, #16
 801d1c0:	46bd      	mov	sp, r7
 801d1c2:	bdb0      	pop	{r4, r5, r7, pc}

0801d1c4 <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d1c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d1c8:	b08c      	sub	sp, #48	; 0x30
 801d1ca:	af00      	add	r7, sp, #0
 801d1cc:	61f8      	str	r0, [r7, #28]
 801d1ce:	61b9      	str	r1, [r7, #24]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 801d1d0:	69bb      	ldr	r3, [r7, #24]
 801d1d2:	7d9b      	ldrb	r3, [r3, #22]
 801d1d4:	f003 030f 	and.w	r3, r3, #15
 801d1d8:	2b02      	cmp	r3, #2
 801d1da:	d152      	bne.n	801d282 <pb_enc_varint+0xbe>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 801d1dc:	f04f 0200 	mov.w	r2, #0
 801d1e0:	f04f 0300 	mov.w	r3, #0
 801d1e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

        if (field->data_size == sizeof(uint_least8_t))
 801d1e8:	69bb      	ldr	r3, [r7, #24]
 801d1ea:	8a5b      	ldrh	r3, [r3, #18]
 801d1ec:	2b01      	cmp	r3, #1
 801d1ee:	d10b      	bne.n	801d208 <pb_enc_varint+0x44>
            value = *(const uint_least8_t*)field->pData;
 801d1f0:	69bb      	ldr	r3, [r7, #24]
 801d1f2:	69db      	ldr	r3, [r3, #28]
 801d1f4:	781b      	ldrb	r3, [r3, #0]
 801d1f6:	b2db      	uxtb	r3, r3
 801d1f8:	2200      	movs	r2, #0
 801d1fa:	613b      	str	r3, [r7, #16]
 801d1fc:	617a      	str	r2, [r7, #20]
 801d1fe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801d202:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 801d206:	e035      	b.n	801d274 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint_least16_t))
 801d208:	69bb      	ldr	r3, [r7, #24]
 801d20a:	8a5b      	ldrh	r3, [r3, #18]
 801d20c:	2b02      	cmp	r3, #2
 801d20e:	d10b      	bne.n	801d228 <pb_enc_varint+0x64>
            value = *(const uint_least16_t*)field->pData;
 801d210:	69bb      	ldr	r3, [r7, #24]
 801d212:	69db      	ldr	r3, [r3, #28]
 801d214:	881b      	ldrh	r3, [r3, #0]
 801d216:	b29b      	uxth	r3, r3
 801d218:	2200      	movs	r2, #0
 801d21a:	60bb      	str	r3, [r7, #8]
 801d21c:	60fa      	str	r2, [r7, #12]
 801d21e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801d222:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 801d226:	e025      	b.n	801d274 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint32_t))
 801d228:	69bb      	ldr	r3, [r7, #24]
 801d22a:	8a5b      	ldrh	r3, [r3, #18]
 801d22c:	2b04      	cmp	r3, #4
 801d22e:	d10a      	bne.n	801d246 <pb_enc_varint+0x82>
            value = *(const uint32_t*)field->pData;
 801d230:	69bb      	ldr	r3, [r7, #24]
 801d232:	69db      	ldr	r3, [r3, #28]
 801d234:	681b      	ldr	r3, [r3, #0]
 801d236:	2200      	movs	r2, #0
 801d238:	603b      	str	r3, [r7, #0]
 801d23a:	607a      	str	r2, [r7, #4]
 801d23c:	e9d7 3400 	ldrd	r3, r4, [r7]
 801d240:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 801d244:	e016      	b.n	801d274 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(pb_uint64_t))
 801d246:	69bb      	ldr	r3, [r7, #24]
 801d248:	8a5b      	ldrh	r3, [r3, #18]
 801d24a:	2b08      	cmp	r3, #8
 801d24c:	d106      	bne.n	801d25c <pb_enc_varint+0x98>
            value = *(const pb_uint64_t*)field->pData;
 801d24e:	69bb      	ldr	r3, [r7, #24]
 801d250:	69db      	ldr	r3, [r3, #28]
 801d252:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d256:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801d25a:	e00b      	b.n	801d274 <pb_enc_varint+0xb0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 801d25c:	69fb      	ldr	r3, [r7, #28]
 801d25e:	691b      	ldr	r3, [r3, #16]
 801d260:	2b00      	cmp	r3, #0
 801d262:	d002      	beq.n	801d26a <pb_enc_varint+0xa6>
 801d264:	69fb      	ldr	r3, [r7, #28]
 801d266:	691b      	ldr	r3, [r3, #16]
 801d268:	e000      	b.n	801d26c <pb_enc_varint+0xa8>
 801d26a:	4b36      	ldr	r3, [pc, #216]	; (801d344 <pb_enc_varint+0x180>)
 801d26c:	69fa      	ldr	r2, [r7, #28]
 801d26e:	6113      	str	r3, [r2, #16]
 801d270:	2300      	movs	r3, #0
 801d272:	e061      	b.n	801d338 <pb_enc_varint+0x174>

        return pb_encode_varint(stream, value);
 801d274:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801d278:	69f8      	ldr	r0, [r7, #28]
 801d27a:	f7ff fdde 	bl	801ce3a <pb_encode_varint>
 801d27e:	4603      	mov	r3, r0
 801d280:	e05a      	b.n	801d338 <pb_enc_varint+0x174>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 801d282:	f04f 0200 	mov.w	r2, #0
 801d286:	f04f 0300 	mov.w	r3, #0
 801d28a:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (field->data_size == sizeof(int_least8_t))
 801d28e:	69bb      	ldr	r3, [r7, #24]
 801d290:	8a5b      	ldrh	r3, [r3, #18]
 801d292:	2b01      	cmp	r3, #1
 801d294:	d10a      	bne.n	801d2ac <pb_enc_varint+0xe8>
            value = *(const int_least8_t*)field->pData;
 801d296:	69bb      	ldr	r3, [r7, #24]
 801d298:	69db      	ldr	r3, [r3, #28]
 801d29a:	f993 3000 	ldrsb.w	r3, [r3]
 801d29e:	b25b      	sxtb	r3, r3
 801d2a0:	17da      	asrs	r2, r3, #31
 801d2a2:	469a      	mov	sl, r3
 801d2a4:	4693      	mov	fp, r2
 801d2a6:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 801d2aa:	e032      	b.n	801d312 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int_least16_t))
 801d2ac:	69bb      	ldr	r3, [r7, #24]
 801d2ae:	8a5b      	ldrh	r3, [r3, #18]
 801d2b0:	2b02      	cmp	r3, #2
 801d2b2:	d10a      	bne.n	801d2ca <pb_enc_varint+0x106>
            value = *(const int_least16_t*)field->pData;
 801d2b4:	69bb      	ldr	r3, [r7, #24]
 801d2b6:	69db      	ldr	r3, [r3, #28]
 801d2b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d2bc:	b21b      	sxth	r3, r3
 801d2be:	17da      	asrs	r2, r3, #31
 801d2c0:	4698      	mov	r8, r3
 801d2c2:	4691      	mov	r9, r2
 801d2c4:	e9c7 8908 	strd	r8, r9, [r7, #32]
 801d2c8:	e023      	b.n	801d312 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int32_t))
 801d2ca:	69bb      	ldr	r3, [r7, #24]
 801d2cc:	8a5b      	ldrh	r3, [r3, #18]
 801d2ce:	2b04      	cmp	r3, #4
 801d2d0:	d108      	bne.n	801d2e4 <pb_enc_varint+0x120>
            value = *(const int32_t*)field->pData;
 801d2d2:	69bb      	ldr	r3, [r7, #24]
 801d2d4:	69db      	ldr	r3, [r3, #28]
 801d2d6:	681b      	ldr	r3, [r3, #0]
 801d2d8:	17da      	asrs	r2, r3, #31
 801d2da:	461c      	mov	r4, r3
 801d2dc:	4615      	mov	r5, r2
 801d2de:	e9c7 4508 	strd	r4, r5, [r7, #32]
 801d2e2:	e016      	b.n	801d312 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(pb_int64_t))
 801d2e4:	69bb      	ldr	r3, [r7, #24]
 801d2e6:	8a5b      	ldrh	r3, [r3, #18]
 801d2e8:	2b08      	cmp	r3, #8
 801d2ea:	d106      	bne.n	801d2fa <pb_enc_varint+0x136>
            value = *(const pb_int64_t*)field->pData;
 801d2ec:	69bb      	ldr	r3, [r7, #24]
 801d2ee:	69db      	ldr	r3, [r3, #28]
 801d2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801d2f8:	e00b      	b.n	801d312 <pb_enc_varint+0x14e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 801d2fa:	69fb      	ldr	r3, [r7, #28]
 801d2fc:	691b      	ldr	r3, [r3, #16]
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d002      	beq.n	801d308 <pb_enc_varint+0x144>
 801d302:	69fb      	ldr	r3, [r7, #28]
 801d304:	691b      	ldr	r3, [r3, #16]
 801d306:	e000      	b.n	801d30a <pb_enc_varint+0x146>
 801d308:	4b0e      	ldr	r3, [pc, #56]	; (801d344 <pb_enc_varint+0x180>)
 801d30a:	69fa      	ldr	r2, [r7, #28]
 801d30c:	6113      	str	r3, [r2, #16]
 801d30e:	2300      	movs	r3, #0
 801d310:	e012      	b.n	801d338 <pb_enc_varint+0x174>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 801d312:	69bb      	ldr	r3, [r7, #24]
 801d314:	7d9b      	ldrb	r3, [r3, #22]
 801d316:	f003 030f 	and.w	r3, r3, #15
 801d31a:	2b03      	cmp	r3, #3
 801d31c:	d106      	bne.n	801d32c <pb_enc_varint+0x168>
            return pb_encode_svarint(stream, value);
 801d31e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d322:	69f8      	ldr	r0, [r7, #28]
 801d324:	f7ff fdb4 	bl	801ce90 <pb_encode_svarint>
 801d328:	4603      	mov	r3, r0
 801d32a:	e005      	b.n	801d338 <pb_enc_varint+0x174>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 801d32c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d330:	69f8      	ldr	r0, [r7, #28]
 801d332:	f7ff fd82 	bl	801ce3a <pb_encode_varint>
 801d336:	4603      	mov	r3, r0

    }
}
 801d338:	4618      	mov	r0, r3
 801d33a:	3730      	adds	r7, #48	; 0x30
 801d33c:	46bd      	mov	sp, r7
 801d33e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d342:	bf00      	nop
 801d344:	08022098 	.word	0x08022098

0801d348 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d348:	b580      	push	{r7, lr}
 801d34a:	b082      	sub	sp, #8
 801d34c:	af00      	add	r7, sp, #0
 801d34e:	6078      	str	r0, [r7, #4]
 801d350:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 801d352:	683b      	ldr	r3, [r7, #0]
 801d354:	8a5b      	ldrh	r3, [r3, #18]
 801d356:	2b04      	cmp	r3, #4
 801d358:	d107      	bne.n	801d36a <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 801d35a:	683b      	ldr	r3, [r7, #0]
 801d35c:	69db      	ldr	r3, [r3, #28]
 801d35e:	4619      	mov	r1, r3
 801d360:	6878      	ldr	r0, [r7, #4]
 801d362:	f7ff fdcf 	bl	801cf04 <pb_encode_fixed32>
 801d366:	4603      	mov	r3, r0
 801d368:	e016      	b.n	801d398 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 801d36a:	683b      	ldr	r3, [r7, #0]
 801d36c:	8a5b      	ldrh	r3, [r3, #18]
 801d36e:	2b08      	cmp	r3, #8
 801d370:	d107      	bne.n	801d382 <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 801d372:	683b      	ldr	r3, [r7, #0]
 801d374:	69db      	ldr	r3, [r3, #28]
 801d376:	4619      	mov	r1, r3
 801d378:	6878      	ldr	r0, [r7, #4]
 801d37a:	f7ff fdd2 	bl	801cf22 <pb_encode_fixed64>
 801d37e:	4603      	mov	r3, r0
 801d380:	e00a      	b.n	801d398 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	691b      	ldr	r3, [r3, #16]
 801d386:	2b00      	cmp	r3, #0
 801d388:	d002      	beq.n	801d390 <pb_enc_fixed+0x48>
 801d38a:	687b      	ldr	r3, [r7, #4]
 801d38c:	691b      	ldr	r3, [r3, #16]
 801d38e:	e000      	b.n	801d392 <pb_enc_fixed+0x4a>
 801d390:	4b03      	ldr	r3, [pc, #12]	; (801d3a0 <pb_enc_fixed+0x58>)
 801d392:	687a      	ldr	r2, [r7, #4]
 801d394:	6113      	str	r3, [r2, #16]
 801d396:	2300      	movs	r3, #0
    }
}
 801d398:	4618      	mov	r0, r3
 801d39a:	3708      	adds	r7, #8
 801d39c:	46bd      	mov	sp, r7
 801d39e:	bd80      	pop	{r7, pc}
 801d3a0:	08022098 	.word	0x08022098

0801d3a4 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d3a4:	b580      	push	{r7, lr}
 801d3a6:	b084      	sub	sp, #16
 801d3a8:	af00      	add	r7, sp, #0
 801d3aa:	6078      	str	r0, [r7, #4]
 801d3ac:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 801d3ae:	2300      	movs	r3, #0
 801d3b0:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 801d3b2:	683b      	ldr	r3, [r7, #0]
 801d3b4:	69db      	ldr	r3, [r3, #28]
 801d3b6:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 801d3b8:	68fb      	ldr	r3, [r7, #12]
 801d3ba:	2b00      	cmp	r3, #0
 801d3bc:	d106      	bne.n	801d3cc <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 801d3be:	2200      	movs	r2, #0
 801d3c0:	2100      	movs	r1, #0
 801d3c2:	6878      	ldr	r0, [r7, #4]
 801d3c4:	f7ff fe34 	bl	801d030 <pb_encode_string>
 801d3c8:	4603      	mov	r3, r0
 801d3ca:	e022      	b.n	801d412 <pb_enc_bytes+0x6e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 801d3cc:	683b      	ldr	r3, [r7, #0]
 801d3ce:	7d9b      	ldrb	r3, [r3, #22]
 801d3d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	d113      	bne.n	801d400 <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 801d3d8:	68fb      	ldr	r3, [r7, #12]
 801d3da:	881b      	ldrh	r3, [r3, #0]
 801d3dc:	461a      	mov	r2, r3
 801d3de:	683b      	ldr	r3, [r7, #0]
 801d3e0:	8a5b      	ldrh	r3, [r3, #18]
 801d3e2:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 801d3e4:	429a      	cmp	r2, r3
 801d3e6:	d90b      	bls.n	801d400 <pb_enc_bytes+0x5c>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	691b      	ldr	r3, [r3, #16]
 801d3ec:	2b00      	cmp	r3, #0
 801d3ee:	d002      	beq.n	801d3f6 <pb_enc_bytes+0x52>
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	691b      	ldr	r3, [r3, #16]
 801d3f4:	e000      	b.n	801d3f8 <pb_enc_bytes+0x54>
 801d3f6:	4b09      	ldr	r3, [pc, #36]	; (801d41c <pb_enc_bytes+0x78>)
 801d3f8:	687a      	ldr	r2, [r7, #4]
 801d3fa:	6113      	str	r3, [r2, #16]
 801d3fc:	2300      	movs	r3, #0
 801d3fe:	e008      	b.n	801d412 <pb_enc_bytes+0x6e>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 801d400:	68fb      	ldr	r3, [r7, #12]
 801d402:	1c99      	adds	r1, r3, #2
 801d404:	68fb      	ldr	r3, [r7, #12]
 801d406:	881b      	ldrh	r3, [r3, #0]
 801d408:	461a      	mov	r2, r3
 801d40a:	6878      	ldr	r0, [r7, #4]
 801d40c:	f7ff fe10 	bl	801d030 <pb_encode_string>
 801d410:	4603      	mov	r3, r0
}
 801d412:	4618      	mov	r0, r3
 801d414:	3710      	adds	r7, #16
 801d416:	46bd      	mov	sp, r7
 801d418:	bd80      	pop	{r7, pc}
 801d41a:	bf00      	nop
 801d41c:	080220ac 	.word	0x080220ac

0801d420 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d420:	b580      	push	{r7, lr}
 801d422:	b086      	sub	sp, #24
 801d424:	af00      	add	r7, sp, #0
 801d426:	6078      	str	r0, [r7, #4]
 801d428:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 801d42a:	2300      	movs	r3, #0
 801d42c:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 801d42e:	683b      	ldr	r3, [r7, #0]
 801d430:	8a5b      	ldrh	r3, [r3, #18]
 801d432:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 801d434:	683b      	ldr	r3, [r7, #0]
 801d436:	69db      	ldr	r3, [r3, #28]
 801d438:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 801d43a:	683b      	ldr	r3, [r7, #0]
 801d43c:	7d9b      	ldrb	r3, [r3, #22]
 801d43e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801d442:	2b80      	cmp	r3, #128	; 0x80
 801d444:	d103      	bne.n	801d44e <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 801d446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d44a:	613b      	str	r3, [r7, #16]
 801d44c:	e011      	b.n	801d472 <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 801d44e:	693b      	ldr	r3, [r7, #16]
 801d450:	2b00      	cmp	r3, #0
 801d452:	d10b      	bne.n	801d46c <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	691b      	ldr	r3, [r3, #16]
 801d458:	2b00      	cmp	r3, #0
 801d45a:	d002      	beq.n	801d462 <pb_enc_string+0x42>
 801d45c:	687b      	ldr	r3, [r7, #4]
 801d45e:	691b      	ldr	r3, [r3, #16]
 801d460:	e000      	b.n	801d464 <pb_enc_string+0x44>
 801d462:	4b1c      	ldr	r3, [pc, #112]	; (801d4d4 <pb_enc_string+0xb4>)
 801d464:	687a      	ldr	r2, [r7, #4]
 801d466:	6113      	str	r3, [r2, #16]
 801d468:	2300      	movs	r3, #0
 801d46a:	e02f      	b.n	801d4cc <pb_enc_string+0xac>

        max_size -= 1;
 801d46c:	693b      	ldr	r3, [r7, #16]
 801d46e:	3b01      	subs	r3, #1
 801d470:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 801d472:	68bb      	ldr	r3, [r7, #8]
 801d474:	2b00      	cmp	r3, #0
 801d476:	d102      	bne.n	801d47e <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 801d478:	2300      	movs	r3, #0
 801d47a:	617b      	str	r3, [r7, #20]
 801d47c:	e020      	b.n	801d4c0 <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 801d47e:	68bb      	ldr	r3, [r7, #8]
 801d480:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 801d482:	e005      	b.n	801d490 <pb_enc_string+0x70>
        {
            size++;
 801d484:	697b      	ldr	r3, [r7, #20]
 801d486:	3301      	adds	r3, #1
 801d488:	617b      	str	r3, [r7, #20]
            p++;
 801d48a:	68fb      	ldr	r3, [r7, #12]
 801d48c:	3301      	adds	r3, #1
 801d48e:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 801d490:	697a      	ldr	r2, [r7, #20]
 801d492:	693b      	ldr	r3, [r7, #16]
 801d494:	429a      	cmp	r2, r3
 801d496:	d203      	bcs.n	801d4a0 <pb_enc_string+0x80>
 801d498:	68fb      	ldr	r3, [r7, #12]
 801d49a:	781b      	ldrb	r3, [r3, #0]
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	d1f1      	bne.n	801d484 <pb_enc_string+0x64>
        }

        if (*p != '\0')
 801d4a0:	68fb      	ldr	r3, [r7, #12]
 801d4a2:	781b      	ldrb	r3, [r3, #0]
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	d00b      	beq.n	801d4c0 <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 801d4a8:	687b      	ldr	r3, [r7, #4]
 801d4aa:	691b      	ldr	r3, [r3, #16]
 801d4ac:	2b00      	cmp	r3, #0
 801d4ae:	d002      	beq.n	801d4b6 <pb_enc_string+0x96>
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	691b      	ldr	r3, [r3, #16]
 801d4b4:	e000      	b.n	801d4b8 <pb_enc_string+0x98>
 801d4b6:	4b08      	ldr	r3, [pc, #32]	; (801d4d8 <pb_enc_string+0xb8>)
 801d4b8:	687a      	ldr	r2, [r7, #4]
 801d4ba:	6113      	str	r3, [r2, #16]
 801d4bc:	2300      	movs	r3, #0
 801d4be:	e005      	b.n	801d4cc <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 801d4c0:	697a      	ldr	r2, [r7, #20]
 801d4c2:	68b9      	ldr	r1, [r7, #8]
 801d4c4:	6878      	ldr	r0, [r7, #4]
 801d4c6:	f7ff fdb3 	bl	801d030 <pb_encode_string>
 801d4ca:	4603      	mov	r3, r0
}
 801d4cc:	4618      	mov	r0, r3
 801d4ce:	3718      	adds	r7, #24
 801d4d0:	46bd      	mov	sp, r7
 801d4d2:	bd80      	pop	{r7, pc}
 801d4d4:	080220c0 	.word	0x080220c0
 801d4d8:	080220d4 	.word	0x080220d4

0801d4dc <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d4dc:	b580      	push	{r7, lr}
 801d4de:	b084      	sub	sp, #16
 801d4e0:	af00      	add	r7, sp, #0
 801d4e2:	6078      	str	r0, [r7, #4]
 801d4e4:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 801d4e6:	683b      	ldr	r3, [r7, #0]
 801d4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d4ea:	2b00      	cmp	r3, #0
 801d4ec:	d10b      	bne.n	801d506 <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 801d4ee:	687b      	ldr	r3, [r7, #4]
 801d4f0:	691b      	ldr	r3, [r3, #16]
 801d4f2:	2b00      	cmp	r3, #0
 801d4f4:	d002      	beq.n	801d4fc <pb_enc_submessage+0x20>
 801d4f6:	687b      	ldr	r3, [r7, #4]
 801d4f8:	691b      	ldr	r3, [r3, #16]
 801d4fa:	e000      	b.n	801d4fe <pb_enc_submessage+0x22>
 801d4fc:	4b19      	ldr	r3, [pc, #100]	; (801d564 <pb_enc_submessage+0x88>)
 801d4fe:	687a      	ldr	r2, [r7, #4]
 801d500:	6113      	str	r3, [r2, #16]
 801d502:	2300      	movs	r3, #0
 801d504:	e029      	b.n	801d55a <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 801d506:	683b      	ldr	r3, [r7, #0]
 801d508:	7d9b      	ldrb	r3, [r3, #22]
 801d50a:	f003 030f 	and.w	r3, r3, #15
 801d50e:	2b09      	cmp	r3, #9
 801d510:	d11a      	bne.n	801d548 <pb_enc_submessage+0x6c>
 801d512:	683b      	ldr	r3, [r7, #0]
 801d514:	6a1b      	ldr	r3, [r3, #32]
 801d516:	2b00      	cmp	r3, #0
 801d518:	d016      	beq.n	801d548 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 801d51a:	683b      	ldr	r3, [r7, #0]
 801d51c:	6a1b      	ldr	r3, [r3, #32]
 801d51e:	3b08      	subs	r3, #8
 801d520:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 801d522:	68fb      	ldr	r3, [r7, #12]
 801d524:	681b      	ldr	r3, [r3, #0]
 801d526:	2b00      	cmp	r3, #0
 801d528:	d00e      	beq.n	801d548 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 801d52a:	68fb      	ldr	r3, [r7, #12]
 801d52c:	681b      	ldr	r3, [r3, #0]
 801d52e:	68fa      	ldr	r2, [r7, #12]
 801d530:	3204      	adds	r2, #4
 801d532:	6839      	ldr	r1, [r7, #0]
 801d534:	6878      	ldr	r0, [r7, #4]
 801d536:	4798      	blx	r3
 801d538:	4603      	mov	r3, r0
 801d53a:	f083 0301 	eor.w	r3, r3, #1
 801d53e:	b2db      	uxtb	r3, r3
 801d540:	2b00      	cmp	r3, #0
 801d542:	d001      	beq.n	801d548 <pb_enc_submessage+0x6c>
                return false;
 801d544:	2300      	movs	r3, #0
 801d546:	e008      	b.n	801d55a <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 801d548:	683b      	ldr	r3, [r7, #0]
 801d54a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801d54c:	683b      	ldr	r3, [r7, #0]
 801d54e:	69db      	ldr	r3, [r3, #28]
 801d550:	461a      	mov	r2, r3
 801d552:	6878      	ldr	r0, [r7, #4]
 801d554:	f7ff fd8e 	bl	801d074 <pb_encode_submessage>
 801d558:	4603      	mov	r3, r0
}
 801d55a:	4618      	mov	r0, r3
 801d55c:	3710      	adds	r7, #16
 801d55e:	46bd      	mov	sp, r7
 801d560:	bd80      	pop	{r7, pc}
 801d562:	bf00      	nop
 801d564:	080220e8 	.word	0x080220e8

0801d568 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d568:	b580      	push	{r7, lr}
 801d56a:	b082      	sub	sp, #8
 801d56c:	af00      	add	r7, sp, #0
 801d56e:	6078      	str	r0, [r7, #4]
 801d570:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 801d572:	683b      	ldr	r3, [r7, #0]
 801d574:	69d9      	ldr	r1, [r3, #28]
 801d576:	683b      	ldr	r3, [r7, #0]
 801d578:	8a5b      	ldrh	r3, [r3, #18]
 801d57a:	461a      	mov	r2, r3
 801d57c:	6878      	ldr	r0, [r7, #4]
 801d57e:	f7ff fd57 	bl	801d030 <pb_encode_string>
 801d582:	4603      	mov	r3, r0
}
 801d584:	4618      	mov	r0, r3
 801d586:	3708      	adds	r7, #8
 801d588:	46bd      	mov	sp, r7
 801d58a:	bd80      	pop	{r7, pc}

0801d58c <__libc_init_array>:
 801d58c:	b570      	push	{r4, r5, r6, lr}
 801d58e:	4d0d      	ldr	r5, [pc, #52]	; (801d5c4 <__libc_init_array+0x38>)
 801d590:	4c0d      	ldr	r4, [pc, #52]	; (801d5c8 <__libc_init_array+0x3c>)
 801d592:	1b64      	subs	r4, r4, r5
 801d594:	10a4      	asrs	r4, r4, #2
 801d596:	2600      	movs	r6, #0
 801d598:	42a6      	cmp	r6, r4
 801d59a:	d109      	bne.n	801d5b0 <__libc_init_array+0x24>
 801d59c:	4d0b      	ldr	r5, [pc, #44]	; (801d5cc <__libc_init_array+0x40>)
 801d59e:	4c0c      	ldr	r4, [pc, #48]	; (801d5d0 <__libc_init_array+0x44>)
 801d5a0:	f001 f920 	bl	801e7e4 <_init>
 801d5a4:	1b64      	subs	r4, r4, r5
 801d5a6:	10a4      	asrs	r4, r4, #2
 801d5a8:	2600      	movs	r6, #0
 801d5aa:	42a6      	cmp	r6, r4
 801d5ac:	d105      	bne.n	801d5ba <__libc_init_array+0x2e>
 801d5ae:	bd70      	pop	{r4, r5, r6, pc}
 801d5b0:	f855 3b04 	ldr.w	r3, [r5], #4
 801d5b4:	4798      	blx	r3
 801d5b6:	3601      	adds	r6, #1
 801d5b8:	e7ee      	b.n	801d598 <__libc_init_array+0xc>
 801d5ba:	f855 3b04 	ldr.w	r3, [r5], #4
 801d5be:	4798      	blx	r3
 801d5c0:	3601      	adds	r6, #1
 801d5c2:	e7f2      	b.n	801d5aa <__libc_init_array+0x1e>
 801d5c4:	080224e0 	.word	0x080224e0
 801d5c8:	080224e0 	.word	0x080224e0
 801d5cc:	080224e0 	.word	0x080224e0
 801d5d0:	080224e4 	.word	0x080224e4

0801d5d4 <memcmp>:
 801d5d4:	b510      	push	{r4, lr}
 801d5d6:	3901      	subs	r1, #1
 801d5d8:	4402      	add	r2, r0
 801d5da:	4290      	cmp	r0, r2
 801d5dc:	d101      	bne.n	801d5e2 <memcmp+0xe>
 801d5de:	2000      	movs	r0, #0
 801d5e0:	e005      	b.n	801d5ee <memcmp+0x1a>
 801d5e2:	7803      	ldrb	r3, [r0, #0]
 801d5e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d5e8:	42a3      	cmp	r3, r4
 801d5ea:	d001      	beq.n	801d5f0 <memcmp+0x1c>
 801d5ec:	1b18      	subs	r0, r3, r4
 801d5ee:	bd10      	pop	{r4, pc}
 801d5f0:	3001      	adds	r0, #1
 801d5f2:	e7f2      	b.n	801d5da <memcmp+0x6>

0801d5f4 <memcpy>:
 801d5f4:	440a      	add	r2, r1
 801d5f6:	4291      	cmp	r1, r2
 801d5f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801d5fc:	d100      	bne.n	801d600 <memcpy+0xc>
 801d5fe:	4770      	bx	lr
 801d600:	b510      	push	{r4, lr}
 801d602:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d606:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d60a:	4291      	cmp	r1, r2
 801d60c:	d1f9      	bne.n	801d602 <memcpy+0xe>
 801d60e:	bd10      	pop	{r4, pc}

0801d610 <memset>:
 801d610:	4402      	add	r2, r0
 801d612:	4603      	mov	r3, r0
 801d614:	4293      	cmp	r3, r2
 801d616:	d100      	bne.n	801d61a <memset+0xa>
 801d618:	4770      	bx	lr
 801d61a:	f803 1b01 	strb.w	r1, [r3], #1
 801d61e:	e7f9      	b.n	801d614 <memset+0x4>

0801d620 <iprintf>:
 801d620:	b40f      	push	{r0, r1, r2, r3}
 801d622:	4b0a      	ldr	r3, [pc, #40]	; (801d64c <iprintf+0x2c>)
 801d624:	b513      	push	{r0, r1, r4, lr}
 801d626:	681c      	ldr	r4, [r3, #0]
 801d628:	b124      	cbz	r4, 801d634 <iprintf+0x14>
 801d62a:	69a3      	ldr	r3, [r4, #24]
 801d62c:	b913      	cbnz	r3, 801d634 <iprintf+0x14>
 801d62e:	4620      	mov	r0, r4
 801d630:	f000 fad6 	bl	801dbe0 <__sinit>
 801d634:	ab05      	add	r3, sp, #20
 801d636:	9a04      	ldr	r2, [sp, #16]
 801d638:	68a1      	ldr	r1, [r4, #8]
 801d63a:	9301      	str	r3, [sp, #4]
 801d63c:	4620      	mov	r0, r4
 801d63e:	f000 fcf9 	bl	801e034 <_vfiprintf_r>
 801d642:	b002      	add	sp, #8
 801d644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d648:	b004      	add	sp, #16
 801d64a:	4770      	bx	lr
 801d64c:	20000030 	.word	0x20000030

0801d650 <_puts_r>:
 801d650:	b570      	push	{r4, r5, r6, lr}
 801d652:	460e      	mov	r6, r1
 801d654:	4605      	mov	r5, r0
 801d656:	b118      	cbz	r0, 801d660 <_puts_r+0x10>
 801d658:	6983      	ldr	r3, [r0, #24]
 801d65a:	b90b      	cbnz	r3, 801d660 <_puts_r+0x10>
 801d65c:	f000 fac0 	bl	801dbe0 <__sinit>
 801d660:	69ab      	ldr	r3, [r5, #24]
 801d662:	68ac      	ldr	r4, [r5, #8]
 801d664:	b913      	cbnz	r3, 801d66c <_puts_r+0x1c>
 801d666:	4628      	mov	r0, r5
 801d668:	f000 faba 	bl	801dbe0 <__sinit>
 801d66c:	4b2c      	ldr	r3, [pc, #176]	; (801d720 <_puts_r+0xd0>)
 801d66e:	429c      	cmp	r4, r3
 801d670:	d120      	bne.n	801d6b4 <_puts_r+0x64>
 801d672:	686c      	ldr	r4, [r5, #4]
 801d674:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d676:	07db      	lsls	r3, r3, #31
 801d678:	d405      	bmi.n	801d686 <_puts_r+0x36>
 801d67a:	89a3      	ldrh	r3, [r4, #12]
 801d67c:	0598      	lsls	r0, r3, #22
 801d67e:	d402      	bmi.n	801d686 <_puts_r+0x36>
 801d680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d682:	f000 fb5d 	bl	801dd40 <__retarget_lock_acquire_recursive>
 801d686:	89a3      	ldrh	r3, [r4, #12]
 801d688:	0719      	lsls	r1, r3, #28
 801d68a:	d51d      	bpl.n	801d6c8 <_puts_r+0x78>
 801d68c:	6923      	ldr	r3, [r4, #16]
 801d68e:	b1db      	cbz	r3, 801d6c8 <_puts_r+0x78>
 801d690:	3e01      	subs	r6, #1
 801d692:	68a3      	ldr	r3, [r4, #8]
 801d694:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d698:	3b01      	subs	r3, #1
 801d69a:	60a3      	str	r3, [r4, #8]
 801d69c:	bb39      	cbnz	r1, 801d6ee <_puts_r+0x9e>
 801d69e:	2b00      	cmp	r3, #0
 801d6a0:	da38      	bge.n	801d714 <_puts_r+0xc4>
 801d6a2:	4622      	mov	r2, r4
 801d6a4:	210a      	movs	r1, #10
 801d6a6:	4628      	mov	r0, r5
 801d6a8:	f000 f8a2 	bl	801d7f0 <__swbuf_r>
 801d6ac:	3001      	adds	r0, #1
 801d6ae:	d011      	beq.n	801d6d4 <_puts_r+0x84>
 801d6b0:	250a      	movs	r5, #10
 801d6b2:	e011      	b.n	801d6d8 <_puts_r+0x88>
 801d6b4:	4b1b      	ldr	r3, [pc, #108]	; (801d724 <_puts_r+0xd4>)
 801d6b6:	429c      	cmp	r4, r3
 801d6b8:	d101      	bne.n	801d6be <_puts_r+0x6e>
 801d6ba:	68ac      	ldr	r4, [r5, #8]
 801d6bc:	e7da      	b.n	801d674 <_puts_r+0x24>
 801d6be:	4b1a      	ldr	r3, [pc, #104]	; (801d728 <_puts_r+0xd8>)
 801d6c0:	429c      	cmp	r4, r3
 801d6c2:	bf08      	it	eq
 801d6c4:	68ec      	ldreq	r4, [r5, #12]
 801d6c6:	e7d5      	b.n	801d674 <_puts_r+0x24>
 801d6c8:	4621      	mov	r1, r4
 801d6ca:	4628      	mov	r0, r5
 801d6cc:	f000 f8e2 	bl	801d894 <__swsetup_r>
 801d6d0:	2800      	cmp	r0, #0
 801d6d2:	d0dd      	beq.n	801d690 <_puts_r+0x40>
 801d6d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801d6d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d6da:	07da      	lsls	r2, r3, #31
 801d6dc:	d405      	bmi.n	801d6ea <_puts_r+0x9a>
 801d6de:	89a3      	ldrh	r3, [r4, #12]
 801d6e0:	059b      	lsls	r3, r3, #22
 801d6e2:	d402      	bmi.n	801d6ea <_puts_r+0x9a>
 801d6e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d6e6:	f000 fb2c 	bl	801dd42 <__retarget_lock_release_recursive>
 801d6ea:	4628      	mov	r0, r5
 801d6ec:	bd70      	pop	{r4, r5, r6, pc}
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	da04      	bge.n	801d6fc <_puts_r+0xac>
 801d6f2:	69a2      	ldr	r2, [r4, #24]
 801d6f4:	429a      	cmp	r2, r3
 801d6f6:	dc06      	bgt.n	801d706 <_puts_r+0xb6>
 801d6f8:	290a      	cmp	r1, #10
 801d6fa:	d004      	beq.n	801d706 <_puts_r+0xb6>
 801d6fc:	6823      	ldr	r3, [r4, #0]
 801d6fe:	1c5a      	adds	r2, r3, #1
 801d700:	6022      	str	r2, [r4, #0]
 801d702:	7019      	strb	r1, [r3, #0]
 801d704:	e7c5      	b.n	801d692 <_puts_r+0x42>
 801d706:	4622      	mov	r2, r4
 801d708:	4628      	mov	r0, r5
 801d70a:	f000 f871 	bl	801d7f0 <__swbuf_r>
 801d70e:	3001      	adds	r0, #1
 801d710:	d1bf      	bne.n	801d692 <_puts_r+0x42>
 801d712:	e7df      	b.n	801d6d4 <_puts_r+0x84>
 801d714:	6823      	ldr	r3, [r4, #0]
 801d716:	250a      	movs	r5, #10
 801d718:	1c5a      	adds	r2, r3, #1
 801d71a:	6022      	str	r2, [r4, #0]
 801d71c:	701d      	strb	r5, [r3, #0]
 801d71e:	e7db      	b.n	801d6d8 <_puts_r+0x88>
 801d720:	08022464 	.word	0x08022464
 801d724:	08022484 	.word	0x08022484
 801d728:	08022444 	.word	0x08022444

0801d72c <puts>:
 801d72c:	4b02      	ldr	r3, [pc, #8]	; (801d738 <puts+0xc>)
 801d72e:	4601      	mov	r1, r0
 801d730:	6818      	ldr	r0, [r3, #0]
 801d732:	f7ff bf8d 	b.w	801d650 <_puts_r>
 801d736:	bf00      	nop
 801d738:	20000030 	.word	0x20000030

0801d73c <rand>:
 801d73c:	4b16      	ldr	r3, [pc, #88]	; (801d798 <rand+0x5c>)
 801d73e:	b510      	push	{r4, lr}
 801d740:	681c      	ldr	r4, [r3, #0]
 801d742:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801d744:	b9b3      	cbnz	r3, 801d774 <rand+0x38>
 801d746:	2018      	movs	r0, #24
 801d748:	f000 fb62 	bl	801de10 <malloc>
 801d74c:	63a0      	str	r0, [r4, #56]	; 0x38
 801d74e:	b928      	cbnz	r0, 801d75c <rand+0x20>
 801d750:	4602      	mov	r2, r0
 801d752:	4b12      	ldr	r3, [pc, #72]	; (801d79c <rand+0x60>)
 801d754:	4812      	ldr	r0, [pc, #72]	; (801d7a0 <rand+0x64>)
 801d756:	214e      	movs	r1, #78	; 0x4e
 801d758:	f000 f90a 	bl	801d970 <__assert_func>
 801d75c:	4a11      	ldr	r2, [pc, #68]	; (801d7a4 <rand+0x68>)
 801d75e:	4b12      	ldr	r3, [pc, #72]	; (801d7a8 <rand+0x6c>)
 801d760:	e9c0 2300 	strd	r2, r3, [r0]
 801d764:	4b11      	ldr	r3, [pc, #68]	; (801d7ac <rand+0x70>)
 801d766:	6083      	str	r3, [r0, #8]
 801d768:	230b      	movs	r3, #11
 801d76a:	8183      	strh	r3, [r0, #12]
 801d76c:	2201      	movs	r2, #1
 801d76e:	2300      	movs	r3, #0
 801d770:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801d774:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801d776:	4a0e      	ldr	r2, [pc, #56]	; (801d7b0 <rand+0x74>)
 801d778:	6920      	ldr	r0, [r4, #16]
 801d77a:	6963      	ldr	r3, [r4, #20]
 801d77c:	490d      	ldr	r1, [pc, #52]	; (801d7b4 <rand+0x78>)
 801d77e:	4342      	muls	r2, r0
 801d780:	fb01 2203 	mla	r2, r1, r3, r2
 801d784:	fba0 0101 	umull	r0, r1, r0, r1
 801d788:	1c43      	adds	r3, r0, #1
 801d78a:	eb42 0001 	adc.w	r0, r2, r1
 801d78e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801d792:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801d796:	bd10      	pop	{r4, pc}
 801d798:	20000030 	.word	0x20000030
 801d79c:	08022394 	.word	0x08022394
 801d7a0:	080223ab 	.word	0x080223ab
 801d7a4:	abcd330e 	.word	0xabcd330e
 801d7a8:	e66d1234 	.word	0xe66d1234
 801d7ac:	0005deec 	.word	0x0005deec
 801d7b0:	5851f42d 	.word	0x5851f42d
 801d7b4:	4c957f2d 	.word	0x4c957f2d

0801d7b8 <strcpy>:
 801d7b8:	4603      	mov	r3, r0
 801d7ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d7be:	f803 2b01 	strb.w	r2, [r3], #1
 801d7c2:	2a00      	cmp	r2, #0
 801d7c4:	d1f9      	bne.n	801d7ba <strcpy+0x2>
 801d7c6:	4770      	bx	lr

0801d7c8 <strncmp>:
 801d7c8:	b510      	push	{r4, lr}
 801d7ca:	b17a      	cbz	r2, 801d7ec <strncmp+0x24>
 801d7cc:	4603      	mov	r3, r0
 801d7ce:	3901      	subs	r1, #1
 801d7d0:	1884      	adds	r4, r0, r2
 801d7d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d7d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d7da:	4290      	cmp	r0, r2
 801d7dc:	d101      	bne.n	801d7e2 <strncmp+0x1a>
 801d7de:	42a3      	cmp	r3, r4
 801d7e0:	d101      	bne.n	801d7e6 <strncmp+0x1e>
 801d7e2:	1a80      	subs	r0, r0, r2
 801d7e4:	bd10      	pop	{r4, pc}
 801d7e6:	2800      	cmp	r0, #0
 801d7e8:	d1f3      	bne.n	801d7d2 <strncmp+0xa>
 801d7ea:	e7fa      	b.n	801d7e2 <strncmp+0x1a>
 801d7ec:	4610      	mov	r0, r2
 801d7ee:	e7f9      	b.n	801d7e4 <strncmp+0x1c>

0801d7f0 <__swbuf_r>:
 801d7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7f2:	460e      	mov	r6, r1
 801d7f4:	4614      	mov	r4, r2
 801d7f6:	4605      	mov	r5, r0
 801d7f8:	b118      	cbz	r0, 801d802 <__swbuf_r+0x12>
 801d7fa:	6983      	ldr	r3, [r0, #24]
 801d7fc:	b90b      	cbnz	r3, 801d802 <__swbuf_r+0x12>
 801d7fe:	f000 f9ef 	bl	801dbe0 <__sinit>
 801d802:	4b21      	ldr	r3, [pc, #132]	; (801d888 <__swbuf_r+0x98>)
 801d804:	429c      	cmp	r4, r3
 801d806:	d12b      	bne.n	801d860 <__swbuf_r+0x70>
 801d808:	686c      	ldr	r4, [r5, #4]
 801d80a:	69a3      	ldr	r3, [r4, #24]
 801d80c:	60a3      	str	r3, [r4, #8]
 801d80e:	89a3      	ldrh	r3, [r4, #12]
 801d810:	071a      	lsls	r2, r3, #28
 801d812:	d52f      	bpl.n	801d874 <__swbuf_r+0x84>
 801d814:	6923      	ldr	r3, [r4, #16]
 801d816:	b36b      	cbz	r3, 801d874 <__swbuf_r+0x84>
 801d818:	6923      	ldr	r3, [r4, #16]
 801d81a:	6820      	ldr	r0, [r4, #0]
 801d81c:	1ac0      	subs	r0, r0, r3
 801d81e:	6963      	ldr	r3, [r4, #20]
 801d820:	b2f6      	uxtb	r6, r6
 801d822:	4283      	cmp	r3, r0
 801d824:	4637      	mov	r7, r6
 801d826:	dc04      	bgt.n	801d832 <__swbuf_r+0x42>
 801d828:	4621      	mov	r1, r4
 801d82a:	4628      	mov	r0, r5
 801d82c:	f000 f944 	bl	801dab8 <_fflush_r>
 801d830:	bb30      	cbnz	r0, 801d880 <__swbuf_r+0x90>
 801d832:	68a3      	ldr	r3, [r4, #8]
 801d834:	3b01      	subs	r3, #1
 801d836:	60a3      	str	r3, [r4, #8]
 801d838:	6823      	ldr	r3, [r4, #0]
 801d83a:	1c5a      	adds	r2, r3, #1
 801d83c:	6022      	str	r2, [r4, #0]
 801d83e:	701e      	strb	r6, [r3, #0]
 801d840:	6963      	ldr	r3, [r4, #20]
 801d842:	3001      	adds	r0, #1
 801d844:	4283      	cmp	r3, r0
 801d846:	d004      	beq.n	801d852 <__swbuf_r+0x62>
 801d848:	89a3      	ldrh	r3, [r4, #12]
 801d84a:	07db      	lsls	r3, r3, #31
 801d84c:	d506      	bpl.n	801d85c <__swbuf_r+0x6c>
 801d84e:	2e0a      	cmp	r6, #10
 801d850:	d104      	bne.n	801d85c <__swbuf_r+0x6c>
 801d852:	4621      	mov	r1, r4
 801d854:	4628      	mov	r0, r5
 801d856:	f000 f92f 	bl	801dab8 <_fflush_r>
 801d85a:	b988      	cbnz	r0, 801d880 <__swbuf_r+0x90>
 801d85c:	4638      	mov	r0, r7
 801d85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d860:	4b0a      	ldr	r3, [pc, #40]	; (801d88c <__swbuf_r+0x9c>)
 801d862:	429c      	cmp	r4, r3
 801d864:	d101      	bne.n	801d86a <__swbuf_r+0x7a>
 801d866:	68ac      	ldr	r4, [r5, #8]
 801d868:	e7cf      	b.n	801d80a <__swbuf_r+0x1a>
 801d86a:	4b09      	ldr	r3, [pc, #36]	; (801d890 <__swbuf_r+0xa0>)
 801d86c:	429c      	cmp	r4, r3
 801d86e:	bf08      	it	eq
 801d870:	68ec      	ldreq	r4, [r5, #12]
 801d872:	e7ca      	b.n	801d80a <__swbuf_r+0x1a>
 801d874:	4621      	mov	r1, r4
 801d876:	4628      	mov	r0, r5
 801d878:	f000 f80c 	bl	801d894 <__swsetup_r>
 801d87c:	2800      	cmp	r0, #0
 801d87e:	d0cb      	beq.n	801d818 <__swbuf_r+0x28>
 801d880:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d884:	e7ea      	b.n	801d85c <__swbuf_r+0x6c>
 801d886:	bf00      	nop
 801d888:	08022464 	.word	0x08022464
 801d88c:	08022484 	.word	0x08022484
 801d890:	08022444 	.word	0x08022444

0801d894 <__swsetup_r>:
 801d894:	4b32      	ldr	r3, [pc, #200]	; (801d960 <__swsetup_r+0xcc>)
 801d896:	b570      	push	{r4, r5, r6, lr}
 801d898:	681d      	ldr	r5, [r3, #0]
 801d89a:	4606      	mov	r6, r0
 801d89c:	460c      	mov	r4, r1
 801d89e:	b125      	cbz	r5, 801d8aa <__swsetup_r+0x16>
 801d8a0:	69ab      	ldr	r3, [r5, #24]
 801d8a2:	b913      	cbnz	r3, 801d8aa <__swsetup_r+0x16>
 801d8a4:	4628      	mov	r0, r5
 801d8a6:	f000 f99b 	bl	801dbe0 <__sinit>
 801d8aa:	4b2e      	ldr	r3, [pc, #184]	; (801d964 <__swsetup_r+0xd0>)
 801d8ac:	429c      	cmp	r4, r3
 801d8ae:	d10f      	bne.n	801d8d0 <__swsetup_r+0x3c>
 801d8b0:	686c      	ldr	r4, [r5, #4]
 801d8b2:	89a3      	ldrh	r3, [r4, #12]
 801d8b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d8b8:	0719      	lsls	r1, r3, #28
 801d8ba:	d42c      	bmi.n	801d916 <__swsetup_r+0x82>
 801d8bc:	06dd      	lsls	r5, r3, #27
 801d8be:	d411      	bmi.n	801d8e4 <__swsetup_r+0x50>
 801d8c0:	2309      	movs	r3, #9
 801d8c2:	6033      	str	r3, [r6, #0]
 801d8c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d8c8:	81a3      	strh	r3, [r4, #12]
 801d8ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d8ce:	e03e      	b.n	801d94e <__swsetup_r+0xba>
 801d8d0:	4b25      	ldr	r3, [pc, #148]	; (801d968 <__swsetup_r+0xd4>)
 801d8d2:	429c      	cmp	r4, r3
 801d8d4:	d101      	bne.n	801d8da <__swsetup_r+0x46>
 801d8d6:	68ac      	ldr	r4, [r5, #8]
 801d8d8:	e7eb      	b.n	801d8b2 <__swsetup_r+0x1e>
 801d8da:	4b24      	ldr	r3, [pc, #144]	; (801d96c <__swsetup_r+0xd8>)
 801d8dc:	429c      	cmp	r4, r3
 801d8de:	bf08      	it	eq
 801d8e0:	68ec      	ldreq	r4, [r5, #12]
 801d8e2:	e7e6      	b.n	801d8b2 <__swsetup_r+0x1e>
 801d8e4:	0758      	lsls	r0, r3, #29
 801d8e6:	d512      	bpl.n	801d90e <__swsetup_r+0x7a>
 801d8e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d8ea:	b141      	cbz	r1, 801d8fe <__swsetup_r+0x6a>
 801d8ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d8f0:	4299      	cmp	r1, r3
 801d8f2:	d002      	beq.n	801d8fa <__swsetup_r+0x66>
 801d8f4:	4630      	mov	r0, r6
 801d8f6:	f000 fa93 	bl	801de20 <_free_r>
 801d8fa:	2300      	movs	r3, #0
 801d8fc:	6363      	str	r3, [r4, #52]	; 0x34
 801d8fe:	89a3      	ldrh	r3, [r4, #12]
 801d900:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d904:	81a3      	strh	r3, [r4, #12]
 801d906:	2300      	movs	r3, #0
 801d908:	6063      	str	r3, [r4, #4]
 801d90a:	6923      	ldr	r3, [r4, #16]
 801d90c:	6023      	str	r3, [r4, #0]
 801d90e:	89a3      	ldrh	r3, [r4, #12]
 801d910:	f043 0308 	orr.w	r3, r3, #8
 801d914:	81a3      	strh	r3, [r4, #12]
 801d916:	6923      	ldr	r3, [r4, #16]
 801d918:	b94b      	cbnz	r3, 801d92e <__swsetup_r+0x9a>
 801d91a:	89a3      	ldrh	r3, [r4, #12]
 801d91c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d924:	d003      	beq.n	801d92e <__swsetup_r+0x9a>
 801d926:	4621      	mov	r1, r4
 801d928:	4630      	mov	r0, r6
 801d92a:	f000 fa31 	bl	801dd90 <__smakebuf_r>
 801d92e:	89a0      	ldrh	r0, [r4, #12]
 801d930:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d934:	f010 0301 	ands.w	r3, r0, #1
 801d938:	d00a      	beq.n	801d950 <__swsetup_r+0xbc>
 801d93a:	2300      	movs	r3, #0
 801d93c:	60a3      	str	r3, [r4, #8]
 801d93e:	6963      	ldr	r3, [r4, #20]
 801d940:	425b      	negs	r3, r3
 801d942:	61a3      	str	r3, [r4, #24]
 801d944:	6923      	ldr	r3, [r4, #16]
 801d946:	b943      	cbnz	r3, 801d95a <__swsetup_r+0xc6>
 801d948:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d94c:	d1ba      	bne.n	801d8c4 <__swsetup_r+0x30>
 801d94e:	bd70      	pop	{r4, r5, r6, pc}
 801d950:	0781      	lsls	r1, r0, #30
 801d952:	bf58      	it	pl
 801d954:	6963      	ldrpl	r3, [r4, #20]
 801d956:	60a3      	str	r3, [r4, #8]
 801d958:	e7f4      	b.n	801d944 <__swsetup_r+0xb0>
 801d95a:	2000      	movs	r0, #0
 801d95c:	e7f7      	b.n	801d94e <__swsetup_r+0xba>
 801d95e:	bf00      	nop
 801d960:	20000030 	.word	0x20000030
 801d964:	08022464 	.word	0x08022464
 801d968:	08022484 	.word	0x08022484
 801d96c:	08022444 	.word	0x08022444

0801d970 <__assert_func>:
 801d970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d972:	4614      	mov	r4, r2
 801d974:	461a      	mov	r2, r3
 801d976:	4b09      	ldr	r3, [pc, #36]	; (801d99c <__assert_func+0x2c>)
 801d978:	681b      	ldr	r3, [r3, #0]
 801d97a:	4605      	mov	r5, r0
 801d97c:	68d8      	ldr	r0, [r3, #12]
 801d97e:	b14c      	cbz	r4, 801d994 <__assert_func+0x24>
 801d980:	4b07      	ldr	r3, [pc, #28]	; (801d9a0 <__assert_func+0x30>)
 801d982:	9100      	str	r1, [sp, #0]
 801d984:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d988:	4906      	ldr	r1, [pc, #24]	; (801d9a4 <__assert_func+0x34>)
 801d98a:	462b      	mov	r3, r5
 801d98c:	f000 f9a6 	bl	801dcdc <fiprintf>
 801d990:	f000 fe7a 	bl	801e688 <abort>
 801d994:	4b04      	ldr	r3, [pc, #16]	; (801d9a8 <__assert_func+0x38>)
 801d996:	461c      	mov	r4, r3
 801d998:	e7f3      	b.n	801d982 <__assert_func+0x12>
 801d99a:	bf00      	nop
 801d99c:	20000030 	.word	0x20000030
 801d9a0:	08022406 	.word	0x08022406
 801d9a4:	08022413 	.word	0x08022413
 801d9a8:	08022441 	.word	0x08022441

0801d9ac <__sflush_r>:
 801d9ac:	898a      	ldrh	r2, [r1, #12]
 801d9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9b2:	4605      	mov	r5, r0
 801d9b4:	0710      	lsls	r0, r2, #28
 801d9b6:	460c      	mov	r4, r1
 801d9b8:	d458      	bmi.n	801da6c <__sflush_r+0xc0>
 801d9ba:	684b      	ldr	r3, [r1, #4]
 801d9bc:	2b00      	cmp	r3, #0
 801d9be:	dc05      	bgt.n	801d9cc <__sflush_r+0x20>
 801d9c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d9c2:	2b00      	cmp	r3, #0
 801d9c4:	dc02      	bgt.n	801d9cc <__sflush_r+0x20>
 801d9c6:	2000      	movs	r0, #0
 801d9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d9ce:	2e00      	cmp	r6, #0
 801d9d0:	d0f9      	beq.n	801d9c6 <__sflush_r+0x1a>
 801d9d2:	2300      	movs	r3, #0
 801d9d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d9d8:	682f      	ldr	r7, [r5, #0]
 801d9da:	602b      	str	r3, [r5, #0]
 801d9dc:	d032      	beq.n	801da44 <__sflush_r+0x98>
 801d9de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d9e0:	89a3      	ldrh	r3, [r4, #12]
 801d9e2:	075a      	lsls	r2, r3, #29
 801d9e4:	d505      	bpl.n	801d9f2 <__sflush_r+0x46>
 801d9e6:	6863      	ldr	r3, [r4, #4]
 801d9e8:	1ac0      	subs	r0, r0, r3
 801d9ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d9ec:	b10b      	cbz	r3, 801d9f2 <__sflush_r+0x46>
 801d9ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d9f0:	1ac0      	subs	r0, r0, r3
 801d9f2:	2300      	movs	r3, #0
 801d9f4:	4602      	mov	r2, r0
 801d9f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d9f8:	6a21      	ldr	r1, [r4, #32]
 801d9fa:	4628      	mov	r0, r5
 801d9fc:	47b0      	blx	r6
 801d9fe:	1c43      	adds	r3, r0, #1
 801da00:	89a3      	ldrh	r3, [r4, #12]
 801da02:	d106      	bne.n	801da12 <__sflush_r+0x66>
 801da04:	6829      	ldr	r1, [r5, #0]
 801da06:	291d      	cmp	r1, #29
 801da08:	d82c      	bhi.n	801da64 <__sflush_r+0xb8>
 801da0a:	4a2a      	ldr	r2, [pc, #168]	; (801dab4 <__sflush_r+0x108>)
 801da0c:	40ca      	lsrs	r2, r1
 801da0e:	07d6      	lsls	r6, r2, #31
 801da10:	d528      	bpl.n	801da64 <__sflush_r+0xb8>
 801da12:	2200      	movs	r2, #0
 801da14:	6062      	str	r2, [r4, #4]
 801da16:	04d9      	lsls	r1, r3, #19
 801da18:	6922      	ldr	r2, [r4, #16]
 801da1a:	6022      	str	r2, [r4, #0]
 801da1c:	d504      	bpl.n	801da28 <__sflush_r+0x7c>
 801da1e:	1c42      	adds	r2, r0, #1
 801da20:	d101      	bne.n	801da26 <__sflush_r+0x7a>
 801da22:	682b      	ldr	r3, [r5, #0]
 801da24:	b903      	cbnz	r3, 801da28 <__sflush_r+0x7c>
 801da26:	6560      	str	r0, [r4, #84]	; 0x54
 801da28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801da2a:	602f      	str	r7, [r5, #0]
 801da2c:	2900      	cmp	r1, #0
 801da2e:	d0ca      	beq.n	801d9c6 <__sflush_r+0x1a>
 801da30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801da34:	4299      	cmp	r1, r3
 801da36:	d002      	beq.n	801da3e <__sflush_r+0x92>
 801da38:	4628      	mov	r0, r5
 801da3a:	f000 f9f1 	bl	801de20 <_free_r>
 801da3e:	2000      	movs	r0, #0
 801da40:	6360      	str	r0, [r4, #52]	; 0x34
 801da42:	e7c1      	b.n	801d9c8 <__sflush_r+0x1c>
 801da44:	6a21      	ldr	r1, [r4, #32]
 801da46:	2301      	movs	r3, #1
 801da48:	4628      	mov	r0, r5
 801da4a:	47b0      	blx	r6
 801da4c:	1c41      	adds	r1, r0, #1
 801da4e:	d1c7      	bne.n	801d9e0 <__sflush_r+0x34>
 801da50:	682b      	ldr	r3, [r5, #0]
 801da52:	2b00      	cmp	r3, #0
 801da54:	d0c4      	beq.n	801d9e0 <__sflush_r+0x34>
 801da56:	2b1d      	cmp	r3, #29
 801da58:	d001      	beq.n	801da5e <__sflush_r+0xb2>
 801da5a:	2b16      	cmp	r3, #22
 801da5c:	d101      	bne.n	801da62 <__sflush_r+0xb6>
 801da5e:	602f      	str	r7, [r5, #0]
 801da60:	e7b1      	b.n	801d9c6 <__sflush_r+0x1a>
 801da62:	89a3      	ldrh	r3, [r4, #12]
 801da64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801da68:	81a3      	strh	r3, [r4, #12]
 801da6a:	e7ad      	b.n	801d9c8 <__sflush_r+0x1c>
 801da6c:	690f      	ldr	r7, [r1, #16]
 801da6e:	2f00      	cmp	r7, #0
 801da70:	d0a9      	beq.n	801d9c6 <__sflush_r+0x1a>
 801da72:	0793      	lsls	r3, r2, #30
 801da74:	680e      	ldr	r6, [r1, #0]
 801da76:	bf08      	it	eq
 801da78:	694b      	ldreq	r3, [r1, #20]
 801da7a:	600f      	str	r7, [r1, #0]
 801da7c:	bf18      	it	ne
 801da7e:	2300      	movne	r3, #0
 801da80:	eba6 0807 	sub.w	r8, r6, r7
 801da84:	608b      	str	r3, [r1, #8]
 801da86:	f1b8 0f00 	cmp.w	r8, #0
 801da8a:	dd9c      	ble.n	801d9c6 <__sflush_r+0x1a>
 801da8c:	6a21      	ldr	r1, [r4, #32]
 801da8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801da90:	4643      	mov	r3, r8
 801da92:	463a      	mov	r2, r7
 801da94:	4628      	mov	r0, r5
 801da96:	47b0      	blx	r6
 801da98:	2800      	cmp	r0, #0
 801da9a:	dc06      	bgt.n	801daaa <__sflush_r+0xfe>
 801da9c:	89a3      	ldrh	r3, [r4, #12]
 801da9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801daa2:	81a3      	strh	r3, [r4, #12]
 801daa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801daa8:	e78e      	b.n	801d9c8 <__sflush_r+0x1c>
 801daaa:	4407      	add	r7, r0
 801daac:	eba8 0800 	sub.w	r8, r8, r0
 801dab0:	e7e9      	b.n	801da86 <__sflush_r+0xda>
 801dab2:	bf00      	nop
 801dab4:	20400001 	.word	0x20400001

0801dab8 <_fflush_r>:
 801dab8:	b538      	push	{r3, r4, r5, lr}
 801daba:	690b      	ldr	r3, [r1, #16]
 801dabc:	4605      	mov	r5, r0
 801dabe:	460c      	mov	r4, r1
 801dac0:	b913      	cbnz	r3, 801dac8 <_fflush_r+0x10>
 801dac2:	2500      	movs	r5, #0
 801dac4:	4628      	mov	r0, r5
 801dac6:	bd38      	pop	{r3, r4, r5, pc}
 801dac8:	b118      	cbz	r0, 801dad2 <_fflush_r+0x1a>
 801daca:	6983      	ldr	r3, [r0, #24]
 801dacc:	b90b      	cbnz	r3, 801dad2 <_fflush_r+0x1a>
 801dace:	f000 f887 	bl	801dbe0 <__sinit>
 801dad2:	4b14      	ldr	r3, [pc, #80]	; (801db24 <_fflush_r+0x6c>)
 801dad4:	429c      	cmp	r4, r3
 801dad6:	d11b      	bne.n	801db10 <_fflush_r+0x58>
 801dad8:	686c      	ldr	r4, [r5, #4]
 801dada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dade:	2b00      	cmp	r3, #0
 801dae0:	d0ef      	beq.n	801dac2 <_fflush_r+0xa>
 801dae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dae4:	07d0      	lsls	r0, r2, #31
 801dae6:	d404      	bmi.n	801daf2 <_fflush_r+0x3a>
 801dae8:	0599      	lsls	r1, r3, #22
 801daea:	d402      	bmi.n	801daf2 <_fflush_r+0x3a>
 801daec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801daee:	f000 f927 	bl	801dd40 <__retarget_lock_acquire_recursive>
 801daf2:	4628      	mov	r0, r5
 801daf4:	4621      	mov	r1, r4
 801daf6:	f7ff ff59 	bl	801d9ac <__sflush_r>
 801dafa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dafc:	07da      	lsls	r2, r3, #31
 801dafe:	4605      	mov	r5, r0
 801db00:	d4e0      	bmi.n	801dac4 <_fflush_r+0xc>
 801db02:	89a3      	ldrh	r3, [r4, #12]
 801db04:	059b      	lsls	r3, r3, #22
 801db06:	d4dd      	bmi.n	801dac4 <_fflush_r+0xc>
 801db08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801db0a:	f000 f91a 	bl	801dd42 <__retarget_lock_release_recursive>
 801db0e:	e7d9      	b.n	801dac4 <_fflush_r+0xc>
 801db10:	4b05      	ldr	r3, [pc, #20]	; (801db28 <_fflush_r+0x70>)
 801db12:	429c      	cmp	r4, r3
 801db14:	d101      	bne.n	801db1a <_fflush_r+0x62>
 801db16:	68ac      	ldr	r4, [r5, #8]
 801db18:	e7df      	b.n	801dada <_fflush_r+0x22>
 801db1a:	4b04      	ldr	r3, [pc, #16]	; (801db2c <_fflush_r+0x74>)
 801db1c:	429c      	cmp	r4, r3
 801db1e:	bf08      	it	eq
 801db20:	68ec      	ldreq	r4, [r5, #12]
 801db22:	e7da      	b.n	801dada <_fflush_r+0x22>
 801db24:	08022464 	.word	0x08022464
 801db28:	08022484 	.word	0x08022484
 801db2c:	08022444 	.word	0x08022444

0801db30 <std>:
 801db30:	2300      	movs	r3, #0
 801db32:	b510      	push	{r4, lr}
 801db34:	4604      	mov	r4, r0
 801db36:	e9c0 3300 	strd	r3, r3, [r0]
 801db3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801db3e:	6083      	str	r3, [r0, #8]
 801db40:	8181      	strh	r1, [r0, #12]
 801db42:	6643      	str	r3, [r0, #100]	; 0x64
 801db44:	81c2      	strh	r2, [r0, #14]
 801db46:	6183      	str	r3, [r0, #24]
 801db48:	4619      	mov	r1, r3
 801db4a:	2208      	movs	r2, #8
 801db4c:	305c      	adds	r0, #92	; 0x5c
 801db4e:	f7ff fd5f 	bl	801d610 <memset>
 801db52:	4b05      	ldr	r3, [pc, #20]	; (801db68 <std+0x38>)
 801db54:	6263      	str	r3, [r4, #36]	; 0x24
 801db56:	4b05      	ldr	r3, [pc, #20]	; (801db6c <std+0x3c>)
 801db58:	62a3      	str	r3, [r4, #40]	; 0x28
 801db5a:	4b05      	ldr	r3, [pc, #20]	; (801db70 <std+0x40>)
 801db5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801db5e:	4b05      	ldr	r3, [pc, #20]	; (801db74 <std+0x44>)
 801db60:	6224      	str	r4, [r4, #32]
 801db62:	6323      	str	r3, [r4, #48]	; 0x30
 801db64:	bd10      	pop	{r4, pc}
 801db66:	bf00      	nop
 801db68:	0801e5dd 	.word	0x0801e5dd
 801db6c:	0801e5ff 	.word	0x0801e5ff
 801db70:	0801e637 	.word	0x0801e637
 801db74:	0801e65b 	.word	0x0801e65b

0801db78 <_cleanup_r>:
 801db78:	4901      	ldr	r1, [pc, #4]	; (801db80 <_cleanup_r+0x8>)
 801db7a:	f000 b8c1 	b.w	801dd00 <_fwalk_reent>
 801db7e:	bf00      	nop
 801db80:	0801dab9 	.word	0x0801dab9

0801db84 <__sfmoreglue>:
 801db84:	b570      	push	{r4, r5, r6, lr}
 801db86:	2268      	movs	r2, #104	; 0x68
 801db88:	1e4d      	subs	r5, r1, #1
 801db8a:	4355      	muls	r5, r2
 801db8c:	460e      	mov	r6, r1
 801db8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801db92:	f000 f9b1 	bl	801def8 <_malloc_r>
 801db96:	4604      	mov	r4, r0
 801db98:	b140      	cbz	r0, 801dbac <__sfmoreglue+0x28>
 801db9a:	2100      	movs	r1, #0
 801db9c:	e9c0 1600 	strd	r1, r6, [r0]
 801dba0:	300c      	adds	r0, #12
 801dba2:	60a0      	str	r0, [r4, #8]
 801dba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801dba8:	f7ff fd32 	bl	801d610 <memset>
 801dbac:	4620      	mov	r0, r4
 801dbae:	bd70      	pop	{r4, r5, r6, pc}

0801dbb0 <__sfp_lock_acquire>:
 801dbb0:	4801      	ldr	r0, [pc, #4]	; (801dbb8 <__sfp_lock_acquire+0x8>)
 801dbb2:	f000 b8c5 	b.w	801dd40 <__retarget_lock_acquire_recursive>
 801dbb6:	bf00      	nop
 801dbb8:	20011525 	.word	0x20011525

0801dbbc <__sfp_lock_release>:
 801dbbc:	4801      	ldr	r0, [pc, #4]	; (801dbc4 <__sfp_lock_release+0x8>)
 801dbbe:	f000 b8c0 	b.w	801dd42 <__retarget_lock_release_recursive>
 801dbc2:	bf00      	nop
 801dbc4:	20011525 	.word	0x20011525

0801dbc8 <__sinit_lock_acquire>:
 801dbc8:	4801      	ldr	r0, [pc, #4]	; (801dbd0 <__sinit_lock_acquire+0x8>)
 801dbca:	f000 b8b9 	b.w	801dd40 <__retarget_lock_acquire_recursive>
 801dbce:	bf00      	nop
 801dbd0:	20011526 	.word	0x20011526

0801dbd4 <__sinit_lock_release>:
 801dbd4:	4801      	ldr	r0, [pc, #4]	; (801dbdc <__sinit_lock_release+0x8>)
 801dbd6:	f000 b8b4 	b.w	801dd42 <__retarget_lock_release_recursive>
 801dbda:	bf00      	nop
 801dbdc:	20011526 	.word	0x20011526

0801dbe0 <__sinit>:
 801dbe0:	b510      	push	{r4, lr}
 801dbe2:	4604      	mov	r4, r0
 801dbe4:	f7ff fff0 	bl	801dbc8 <__sinit_lock_acquire>
 801dbe8:	69a3      	ldr	r3, [r4, #24]
 801dbea:	b11b      	cbz	r3, 801dbf4 <__sinit+0x14>
 801dbec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dbf0:	f7ff bff0 	b.w	801dbd4 <__sinit_lock_release>
 801dbf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801dbf8:	6523      	str	r3, [r4, #80]	; 0x50
 801dbfa:	4b13      	ldr	r3, [pc, #76]	; (801dc48 <__sinit+0x68>)
 801dbfc:	4a13      	ldr	r2, [pc, #76]	; (801dc4c <__sinit+0x6c>)
 801dbfe:	681b      	ldr	r3, [r3, #0]
 801dc00:	62a2      	str	r2, [r4, #40]	; 0x28
 801dc02:	42a3      	cmp	r3, r4
 801dc04:	bf04      	itt	eq
 801dc06:	2301      	moveq	r3, #1
 801dc08:	61a3      	streq	r3, [r4, #24]
 801dc0a:	4620      	mov	r0, r4
 801dc0c:	f000 f820 	bl	801dc50 <__sfp>
 801dc10:	6060      	str	r0, [r4, #4]
 801dc12:	4620      	mov	r0, r4
 801dc14:	f000 f81c 	bl	801dc50 <__sfp>
 801dc18:	60a0      	str	r0, [r4, #8]
 801dc1a:	4620      	mov	r0, r4
 801dc1c:	f000 f818 	bl	801dc50 <__sfp>
 801dc20:	2200      	movs	r2, #0
 801dc22:	60e0      	str	r0, [r4, #12]
 801dc24:	2104      	movs	r1, #4
 801dc26:	6860      	ldr	r0, [r4, #4]
 801dc28:	f7ff ff82 	bl	801db30 <std>
 801dc2c:	68a0      	ldr	r0, [r4, #8]
 801dc2e:	2201      	movs	r2, #1
 801dc30:	2109      	movs	r1, #9
 801dc32:	f7ff ff7d 	bl	801db30 <std>
 801dc36:	68e0      	ldr	r0, [r4, #12]
 801dc38:	2202      	movs	r2, #2
 801dc3a:	2112      	movs	r1, #18
 801dc3c:	f7ff ff78 	bl	801db30 <std>
 801dc40:	2301      	movs	r3, #1
 801dc42:	61a3      	str	r3, [r4, #24]
 801dc44:	e7d2      	b.n	801dbec <__sinit+0xc>
 801dc46:	bf00      	nop
 801dc48:	08022390 	.word	0x08022390
 801dc4c:	0801db79 	.word	0x0801db79

0801dc50 <__sfp>:
 801dc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc52:	4607      	mov	r7, r0
 801dc54:	f7ff ffac 	bl	801dbb0 <__sfp_lock_acquire>
 801dc58:	4b1e      	ldr	r3, [pc, #120]	; (801dcd4 <__sfp+0x84>)
 801dc5a:	681e      	ldr	r6, [r3, #0]
 801dc5c:	69b3      	ldr	r3, [r6, #24]
 801dc5e:	b913      	cbnz	r3, 801dc66 <__sfp+0x16>
 801dc60:	4630      	mov	r0, r6
 801dc62:	f7ff ffbd 	bl	801dbe0 <__sinit>
 801dc66:	3648      	adds	r6, #72	; 0x48
 801dc68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801dc6c:	3b01      	subs	r3, #1
 801dc6e:	d503      	bpl.n	801dc78 <__sfp+0x28>
 801dc70:	6833      	ldr	r3, [r6, #0]
 801dc72:	b30b      	cbz	r3, 801dcb8 <__sfp+0x68>
 801dc74:	6836      	ldr	r6, [r6, #0]
 801dc76:	e7f7      	b.n	801dc68 <__sfp+0x18>
 801dc78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dc7c:	b9d5      	cbnz	r5, 801dcb4 <__sfp+0x64>
 801dc7e:	4b16      	ldr	r3, [pc, #88]	; (801dcd8 <__sfp+0x88>)
 801dc80:	60e3      	str	r3, [r4, #12]
 801dc82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dc86:	6665      	str	r5, [r4, #100]	; 0x64
 801dc88:	f000 f859 	bl	801dd3e <__retarget_lock_init_recursive>
 801dc8c:	f7ff ff96 	bl	801dbbc <__sfp_lock_release>
 801dc90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801dc94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801dc98:	6025      	str	r5, [r4, #0]
 801dc9a:	61a5      	str	r5, [r4, #24]
 801dc9c:	2208      	movs	r2, #8
 801dc9e:	4629      	mov	r1, r5
 801dca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801dca4:	f7ff fcb4 	bl	801d610 <memset>
 801dca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801dcac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801dcb0:	4620      	mov	r0, r4
 801dcb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dcb4:	3468      	adds	r4, #104	; 0x68
 801dcb6:	e7d9      	b.n	801dc6c <__sfp+0x1c>
 801dcb8:	2104      	movs	r1, #4
 801dcba:	4638      	mov	r0, r7
 801dcbc:	f7ff ff62 	bl	801db84 <__sfmoreglue>
 801dcc0:	4604      	mov	r4, r0
 801dcc2:	6030      	str	r0, [r6, #0]
 801dcc4:	2800      	cmp	r0, #0
 801dcc6:	d1d5      	bne.n	801dc74 <__sfp+0x24>
 801dcc8:	f7ff ff78 	bl	801dbbc <__sfp_lock_release>
 801dccc:	230c      	movs	r3, #12
 801dcce:	603b      	str	r3, [r7, #0]
 801dcd0:	e7ee      	b.n	801dcb0 <__sfp+0x60>
 801dcd2:	bf00      	nop
 801dcd4:	08022390 	.word	0x08022390
 801dcd8:	ffff0001 	.word	0xffff0001

0801dcdc <fiprintf>:
 801dcdc:	b40e      	push	{r1, r2, r3}
 801dcde:	b503      	push	{r0, r1, lr}
 801dce0:	4601      	mov	r1, r0
 801dce2:	ab03      	add	r3, sp, #12
 801dce4:	4805      	ldr	r0, [pc, #20]	; (801dcfc <fiprintf+0x20>)
 801dce6:	f853 2b04 	ldr.w	r2, [r3], #4
 801dcea:	6800      	ldr	r0, [r0, #0]
 801dcec:	9301      	str	r3, [sp, #4]
 801dcee:	f000 f9a1 	bl	801e034 <_vfiprintf_r>
 801dcf2:	b002      	add	sp, #8
 801dcf4:	f85d eb04 	ldr.w	lr, [sp], #4
 801dcf8:	b003      	add	sp, #12
 801dcfa:	4770      	bx	lr
 801dcfc:	20000030 	.word	0x20000030

0801dd00 <_fwalk_reent>:
 801dd00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd04:	4606      	mov	r6, r0
 801dd06:	4688      	mov	r8, r1
 801dd08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801dd0c:	2700      	movs	r7, #0
 801dd0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dd12:	f1b9 0901 	subs.w	r9, r9, #1
 801dd16:	d505      	bpl.n	801dd24 <_fwalk_reent+0x24>
 801dd18:	6824      	ldr	r4, [r4, #0]
 801dd1a:	2c00      	cmp	r4, #0
 801dd1c:	d1f7      	bne.n	801dd0e <_fwalk_reent+0xe>
 801dd1e:	4638      	mov	r0, r7
 801dd20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd24:	89ab      	ldrh	r3, [r5, #12]
 801dd26:	2b01      	cmp	r3, #1
 801dd28:	d907      	bls.n	801dd3a <_fwalk_reent+0x3a>
 801dd2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dd2e:	3301      	adds	r3, #1
 801dd30:	d003      	beq.n	801dd3a <_fwalk_reent+0x3a>
 801dd32:	4629      	mov	r1, r5
 801dd34:	4630      	mov	r0, r6
 801dd36:	47c0      	blx	r8
 801dd38:	4307      	orrs	r7, r0
 801dd3a:	3568      	adds	r5, #104	; 0x68
 801dd3c:	e7e9      	b.n	801dd12 <_fwalk_reent+0x12>

0801dd3e <__retarget_lock_init_recursive>:
 801dd3e:	4770      	bx	lr

0801dd40 <__retarget_lock_acquire_recursive>:
 801dd40:	4770      	bx	lr

0801dd42 <__retarget_lock_release_recursive>:
 801dd42:	4770      	bx	lr

0801dd44 <__swhatbuf_r>:
 801dd44:	b570      	push	{r4, r5, r6, lr}
 801dd46:	460e      	mov	r6, r1
 801dd48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd4c:	2900      	cmp	r1, #0
 801dd4e:	b096      	sub	sp, #88	; 0x58
 801dd50:	4614      	mov	r4, r2
 801dd52:	461d      	mov	r5, r3
 801dd54:	da08      	bge.n	801dd68 <__swhatbuf_r+0x24>
 801dd56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801dd5a:	2200      	movs	r2, #0
 801dd5c:	602a      	str	r2, [r5, #0]
 801dd5e:	061a      	lsls	r2, r3, #24
 801dd60:	d410      	bmi.n	801dd84 <__swhatbuf_r+0x40>
 801dd62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801dd66:	e00e      	b.n	801dd86 <__swhatbuf_r+0x42>
 801dd68:	466a      	mov	r2, sp
 801dd6a:	f000 fca5 	bl	801e6b8 <_fstat_r>
 801dd6e:	2800      	cmp	r0, #0
 801dd70:	dbf1      	blt.n	801dd56 <__swhatbuf_r+0x12>
 801dd72:	9a01      	ldr	r2, [sp, #4]
 801dd74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dd78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801dd7c:	425a      	negs	r2, r3
 801dd7e:	415a      	adcs	r2, r3
 801dd80:	602a      	str	r2, [r5, #0]
 801dd82:	e7ee      	b.n	801dd62 <__swhatbuf_r+0x1e>
 801dd84:	2340      	movs	r3, #64	; 0x40
 801dd86:	2000      	movs	r0, #0
 801dd88:	6023      	str	r3, [r4, #0]
 801dd8a:	b016      	add	sp, #88	; 0x58
 801dd8c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801dd90 <__smakebuf_r>:
 801dd90:	898b      	ldrh	r3, [r1, #12]
 801dd92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dd94:	079d      	lsls	r5, r3, #30
 801dd96:	4606      	mov	r6, r0
 801dd98:	460c      	mov	r4, r1
 801dd9a:	d507      	bpl.n	801ddac <__smakebuf_r+0x1c>
 801dd9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801dda0:	6023      	str	r3, [r4, #0]
 801dda2:	6123      	str	r3, [r4, #16]
 801dda4:	2301      	movs	r3, #1
 801dda6:	6163      	str	r3, [r4, #20]
 801dda8:	b002      	add	sp, #8
 801ddaa:	bd70      	pop	{r4, r5, r6, pc}
 801ddac:	ab01      	add	r3, sp, #4
 801ddae:	466a      	mov	r2, sp
 801ddb0:	f7ff ffc8 	bl	801dd44 <__swhatbuf_r>
 801ddb4:	9900      	ldr	r1, [sp, #0]
 801ddb6:	4605      	mov	r5, r0
 801ddb8:	4630      	mov	r0, r6
 801ddba:	f000 f89d 	bl	801def8 <_malloc_r>
 801ddbe:	b948      	cbnz	r0, 801ddd4 <__smakebuf_r+0x44>
 801ddc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ddc4:	059a      	lsls	r2, r3, #22
 801ddc6:	d4ef      	bmi.n	801dda8 <__smakebuf_r+0x18>
 801ddc8:	f023 0303 	bic.w	r3, r3, #3
 801ddcc:	f043 0302 	orr.w	r3, r3, #2
 801ddd0:	81a3      	strh	r3, [r4, #12]
 801ddd2:	e7e3      	b.n	801dd9c <__smakebuf_r+0xc>
 801ddd4:	4b0d      	ldr	r3, [pc, #52]	; (801de0c <__smakebuf_r+0x7c>)
 801ddd6:	62b3      	str	r3, [r6, #40]	; 0x28
 801ddd8:	89a3      	ldrh	r3, [r4, #12]
 801ddda:	6020      	str	r0, [r4, #0]
 801dddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dde0:	81a3      	strh	r3, [r4, #12]
 801dde2:	9b00      	ldr	r3, [sp, #0]
 801dde4:	6163      	str	r3, [r4, #20]
 801dde6:	9b01      	ldr	r3, [sp, #4]
 801dde8:	6120      	str	r0, [r4, #16]
 801ddea:	b15b      	cbz	r3, 801de04 <__smakebuf_r+0x74>
 801ddec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ddf0:	4630      	mov	r0, r6
 801ddf2:	f000 fc73 	bl	801e6dc <_isatty_r>
 801ddf6:	b128      	cbz	r0, 801de04 <__smakebuf_r+0x74>
 801ddf8:	89a3      	ldrh	r3, [r4, #12]
 801ddfa:	f023 0303 	bic.w	r3, r3, #3
 801ddfe:	f043 0301 	orr.w	r3, r3, #1
 801de02:	81a3      	strh	r3, [r4, #12]
 801de04:	89a0      	ldrh	r0, [r4, #12]
 801de06:	4305      	orrs	r5, r0
 801de08:	81a5      	strh	r5, [r4, #12]
 801de0a:	e7cd      	b.n	801dda8 <__smakebuf_r+0x18>
 801de0c:	0801db79 	.word	0x0801db79

0801de10 <malloc>:
 801de10:	4b02      	ldr	r3, [pc, #8]	; (801de1c <malloc+0xc>)
 801de12:	4601      	mov	r1, r0
 801de14:	6818      	ldr	r0, [r3, #0]
 801de16:	f000 b86f 	b.w	801def8 <_malloc_r>
 801de1a:	bf00      	nop
 801de1c:	20000030 	.word	0x20000030

0801de20 <_free_r>:
 801de20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801de22:	2900      	cmp	r1, #0
 801de24:	d044      	beq.n	801deb0 <_free_r+0x90>
 801de26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801de2a:	9001      	str	r0, [sp, #4]
 801de2c:	2b00      	cmp	r3, #0
 801de2e:	f1a1 0404 	sub.w	r4, r1, #4
 801de32:	bfb8      	it	lt
 801de34:	18e4      	addlt	r4, r4, r3
 801de36:	f000 fc73 	bl	801e720 <__malloc_lock>
 801de3a:	4a1e      	ldr	r2, [pc, #120]	; (801deb4 <_free_r+0x94>)
 801de3c:	9801      	ldr	r0, [sp, #4]
 801de3e:	6813      	ldr	r3, [r2, #0]
 801de40:	b933      	cbnz	r3, 801de50 <_free_r+0x30>
 801de42:	6063      	str	r3, [r4, #4]
 801de44:	6014      	str	r4, [r2, #0]
 801de46:	b003      	add	sp, #12
 801de48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801de4c:	f000 bc6e 	b.w	801e72c <__malloc_unlock>
 801de50:	42a3      	cmp	r3, r4
 801de52:	d908      	bls.n	801de66 <_free_r+0x46>
 801de54:	6825      	ldr	r5, [r4, #0]
 801de56:	1961      	adds	r1, r4, r5
 801de58:	428b      	cmp	r3, r1
 801de5a:	bf01      	itttt	eq
 801de5c:	6819      	ldreq	r1, [r3, #0]
 801de5e:	685b      	ldreq	r3, [r3, #4]
 801de60:	1949      	addeq	r1, r1, r5
 801de62:	6021      	streq	r1, [r4, #0]
 801de64:	e7ed      	b.n	801de42 <_free_r+0x22>
 801de66:	461a      	mov	r2, r3
 801de68:	685b      	ldr	r3, [r3, #4]
 801de6a:	b10b      	cbz	r3, 801de70 <_free_r+0x50>
 801de6c:	42a3      	cmp	r3, r4
 801de6e:	d9fa      	bls.n	801de66 <_free_r+0x46>
 801de70:	6811      	ldr	r1, [r2, #0]
 801de72:	1855      	adds	r5, r2, r1
 801de74:	42a5      	cmp	r5, r4
 801de76:	d10b      	bne.n	801de90 <_free_r+0x70>
 801de78:	6824      	ldr	r4, [r4, #0]
 801de7a:	4421      	add	r1, r4
 801de7c:	1854      	adds	r4, r2, r1
 801de7e:	42a3      	cmp	r3, r4
 801de80:	6011      	str	r1, [r2, #0]
 801de82:	d1e0      	bne.n	801de46 <_free_r+0x26>
 801de84:	681c      	ldr	r4, [r3, #0]
 801de86:	685b      	ldr	r3, [r3, #4]
 801de88:	6053      	str	r3, [r2, #4]
 801de8a:	4421      	add	r1, r4
 801de8c:	6011      	str	r1, [r2, #0]
 801de8e:	e7da      	b.n	801de46 <_free_r+0x26>
 801de90:	d902      	bls.n	801de98 <_free_r+0x78>
 801de92:	230c      	movs	r3, #12
 801de94:	6003      	str	r3, [r0, #0]
 801de96:	e7d6      	b.n	801de46 <_free_r+0x26>
 801de98:	6825      	ldr	r5, [r4, #0]
 801de9a:	1961      	adds	r1, r4, r5
 801de9c:	428b      	cmp	r3, r1
 801de9e:	bf04      	itt	eq
 801dea0:	6819      	ldreq	r1, [r3, #0]
 801dea2:	685b      	ldreq	r3, [r3, #4]
 801dea4:	6063      	str	r3, [r4, #4]
 801dea6:	bf04      	itt	eq
 801dea8:	1949      	addeq	r1, r1, r5
 801deaa:	6021      	streq	r1, [r4, #0]
 801deac:	6054      	str	r4, [r2, #4]
 801deae:	e7ca      	b.n	801de46 <_free_r+0x26>
 801deb0:	b003      	add	sp, #12
 801deb2:	bd30      	pop	{r4, r5, pc}
 801deb4:	20011528 	.word	0x20011528

0801deb8 <sbrk_aligned>:
 801deb8:	b570      	push	{r4, r5, r6, lr}
 801deba:	4e0e      	ldr	r6, [pc, #56]	; (801def4 <sbrk_aligned+0x3c>)
 801debc:	460c      	mov	r4, r1
 801debe:	6831      	ldr	r1, [r6, #0]
 801dec0:	4605      	mov	r5, r0
 801dec2:	b911      	cbnz	r1, 801deca <sbrk_aligned+0x12>
 801dec4:	f000 fb7a 	bl	801e5bc <_sbrk_r>
 801dec8:	6030      	str	r0, [r6, #0]
 801deca:	4621      	mov	r1, r4
 801decc:	4628      	mov	r0, r5
 801dece:	f000 fb75 	bl	801e5bc <_sbrk_r>
 801ded2:	1c43      	adds	r3, r0, #1
 801ded4:	d00a      	beq.n	801deec <sbrk_aligned+0x34>
 801ded6:	1cc4      	adds	r4, r0, #3
 801ded8:	f024 0403 	bic.w	r4, r4, #3
 801dedc:	42a0      	cmp	r0, r4
 801dede:	d007      	beq.n	801def0 <sbrk_aligned+0x38>
 801dee0:	1a21      	subs	r1, r4, r0
 801dee2:	4628      	mov	r0, r5
 801dee4:	f000 fb6a 	bl	801e5bc <_sbrk_r>
 801dee8:	3001      	adds	r0, #1
 801deea:	d101      	bne.n	801def0 <sbrk_aligned+0x38>
 801deec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801def0:	4620      	mov	r0, r4
 801def2:	bd70      	pop	{r4, r5, r6, pc}
 801def4:	2001152c 	.word	0x2001152c

0801def8 <_malloc_r>:
 801def8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801defc:	1ccd      	adds	r5, r1, #3
 801defe:	f025 0503 	bic.w	r5, r5, #3
 801df02:	3508      	adds	r5, #8
 801df04:	2d0c      	cmp	r5, #12
 801df06:	bf38      	it	cc
 801df08:	250c      	movcc	r5, #12
 801df0a:	2d00      	cmp	r5, #0
 801df0c:	4607      	mov	r7, r0
 801df0e:	db01      	blt.n	801df14 <_malloc_r+0x1c>
 801df10:	42a9      	cmp	r1, r5
 801df12:	d905      	bls.n	801df20 <_malloc_r+0x28>
 801df14:	230c      	movs	r3, #12
 801df16:	603b      	str	r3, [r7, #0]
 801df18:	2600      	movs	r6, #0
 801df1a:	4630      	mov	r0, r6
 801df1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df20:	4e2e      	ldr	r6, [pc, #184]	; (801dfdc <_malloc_r+0xe4>)
 801df22:	f000 fbfd 	bl	801e720 <__malloc_lock>
 801df26:	6833      	ldr	r3, [r6, #0]
 801df28:	461c      	mov	r4, r3
 801df2a:	bb34      	cbnz	r4, 801df7a <_malloc_r+0x82>
 801df2c:	4629      	mov	r1, r5
 801df2e:	4638      	mov	r0, r7
 801df30:	f7ff ffc2 	bl	801deb8 <sbrk_aligned>
 801df34:	1c43      	adds	r3, r0, #1
 801df36:	4604      	mov	r4, r0
 801df38:	d14d      	bne.n	801dfd6 <_malloc_r+0xde>
 801df3a:	6834      	ldr	r4, [r6, #0]
 801df3c:	4626      	mov	r6, r4
 801df3e:	2e00      	cmp	r6, #0
 801df40:	d140      	bne.n	801dfc4 <_malloc_r+0xcc>
 801df42:	6823      	ldr	r3, [r4, #0]
 801df44:	4631      	mov	r1, r6
 801df46:	4638      	mov	r0, r7
 801df48:	eb04 0803 	add.w	r8, r4, r3
 801df4c:	f000 fb36 	bl	801e5bc <_sbrk_r>
 801df50:	4580      	cmp	r8, r0
 801df52:	d13a      	bne.n	801dfca <_malloc_r+0xd2>
 801df54:	6821      	ldr	r1, [r4, #0]
 801df56:	3503      	adds	r5, #3
 801df58:	1a6d      	subs	r5, r5, r1
 801df5a:	f025 0503 	bic.w	r5, r5, #3
 801df5e:	3508      	adds	r5, #8
 801df60:	2d0c      	cmp	r5, #12
 801df62:	bf38      	it	cc
 801df64:	250c      	movcc	r5, #12
 801df66:	4629      	mov	r1, r5
 801df68:	4638      	mov	r0, r7
 801df6a:	f7ff ffa5 	bl	801deb8 <sbrk_aligned>
 801df6e:	3001      	adds	r0, #1
 801df70:	d02b      	beq.n	801dfca <_malloc_r+0xd2>
 801df72:	6823      	ldr	r3, [r4, #0]
 801df74:	442b      	add	r3, r5
 801df76:	6023      	str	r3, [r4, #0]
 801df78:	e00e      	b.n	801df98 <_malloc_r+0xa0>
 801df7a:	6822      	ldr	r2, [r4, #0]
 801df7c:	1b52      	subs	r2, r2, r5
 801df7e:	d41e      	bmi.n	801dfbe <_malloc_r+0xc6>
 801df80:	2a0b      	cmp	r2, #11
 801df82:	d916      	bls.n	801dfb2 <_malloc_r+0xba>
 801df84:	1961      	adds	r1, r4, r5
 801df86:	42a3      	cmp	r3, r4
 801df88:	6025      	str	r5, [r4, #0]
 801df8a:	bf18      	it	ne
 801df8c:	6059      	strne	r1, [r3, #4]
 801df8e:	6863      	ldr	r3, [r4, #4]
 801df90:	bf08      	it	eq
 801df92:	6031      	streq	r1, [r6, #0]
 801df94:	5162      	str	r2, [r4, r5]
 801df96:	604b      	str	r3, [r1, #4]
 801df98:	4638      	mov	r0, r7
 801df9a:	f104 060b 	add.w	r6, r4, #11
 801df9e:	f000 fbc5 	bl	801e72c <__malloc_unlock>
 801dfa2:	f026 0607 	bic.w	r6, r6, #7
 801dfa6:	1d23      	adds	r3, r4, #4
 801dfa8:	1af2      	subs	r2, r6, r3
 801dfaa:	d0b6      	beq.n	801df1a <_malloc_r+0x22>
 801dfac:	1b9b      	subs	r3, r3, r6
 801dfae:	50a3      	str	r3, [r4, r2]
 801dfb0:	e7b3      	b.n	801df1a <_malloc_r+0x22>
 801dfb2:	6862      	ldr	r2, [r4, #4]
 801dfb4:	42a3      	cmp	r3, r4
 801dfb6:	bf0c      	ite	eq
 801dfb8:	6032      	streq	r2, [r6, #0]
 801dfba:	605a      	strne	r2, [r3, #4]
 801dfbc:	e7ec      	b.n	801df98 <_malloc_r+0xa0>
 801dfbe:	4623      	mov	r3, r4
 801dfc0:	6864      	ldr	r4, [r4, #4]
 801dfc2:	e7b2      	b.n	801df2a <_malloc_r+0x32>
 801dfc4:	4634      	mov	r4, r6
 801dfc6:	6876      	ldr	r6, [r6, #4]
 801dfc8:	e7b9      	b.n	801df3e <_malloc_r+0x46>
 801dfca:	230c      	movs	r3, #12
 801dfcc:	603b      	str	r3, [r7, #0]
 801dfce:	4638      	mov	r0, r7
 801dfd0:	f000 fbac 	bl	801e72c <__malloc_unlock>
 801dfd4:	e7a1      	b.n	801df1a <_malloc_r+0x22>
 801dfd6:	6025      	str	r5, [r4, #0]
 801dfd8:	e7de      	b.n	801df98 <_malloc_r+0xa0>
 801dfda:	bf00      	nop
 801dfdc:	20011528 	.word	0x20011528

0801dfe0 <__sfputc_r>:
 801dfe0:	6893      	ldr	r3, [r2, #8]
 801dfe2:	3b01      	subs	r3, #1
 801dfe4:	2b00      	cmp	r3, #0
 801dfe6:	b410      	push	{r4}
 801dfe8:	6093      	str	r3, [r2, #8]
 801dfea:	da08      	bge.n	801dffe <__sfputc_r+0x1e>
 801dfec:	6994      	ldr	r4, [r2, #24]
 801dfee:	42a3      	cmp	r3, r4
 801dff0:	db01      	blt.n	801dff6 <__sfputc_r+0x16>
 801dff2:	290a      	cmp	r1, #10
 801dff4:	d103      	bne.n	801dffe <__sfputc_r+0x1e>
 801dff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dffa:	f7ff bbf9 	b.w	801d7f0 <__swbuf_r>
 801dffe:	6813      	ldr	r3, [r2, #0]
 801e000:	1c58      	adds	r0, r3, #1
 801e002:	6010      	str	r0, [r2, #0]
 801e004:	7019      	strb	r1, [r3, #0]
 801e006:	4608      	mov	r0, r1
 801e008:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e00c:	4770      	bx	lr

0801e00e <__sfputs_r>:
 801e00e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e010:	4606      	mov	r6, r0
 801e012:	460f      	mov	r7, r1
 801e014:	4614      	mov	r4, r2
 801e016:	18d5      	adds	r5, r2, r3
 801e018:	42ac      	cmp	r4, r5
 801e01a:	d101      	bne.n	801e020 <__sfputs_r+0x12>
 801e01c:	2000      	movs	r0, #0
 801e01e:	e007      	b.n	801e030 <__sfputs_r+0x22>
 801e020:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e024:	463a      	mov	r2, r7
 801e026:	4630      	mov	r0, r6
 801e028:	f7ff ffda 	bl	801dfe0 <__sfputc_r>
 801e02c:	1c43      	adds	r3, r0, #1
 801e02e:	d1f3      	bne.n	801e018 <__sfputs_r+0xa>
 801e030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e034 <_vfiprintf_r>:
 801e034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e038:	460d      	mov	r5, r1
 801e03a:	b09d      	sub	sp, #116	; 0x74
 801e03c:	4614      	mov	r4, r2
 801e03e:	4698      	mov	r8, r3
 801e040:	4606      	mov	r6, r0
 801e042:	b118      	cbz	r0, 801e04c <_vfiprintf_r+0x18>
 801e044:	6983      	ldr	r3, [r0, #24]
 801e046:	b90b      	cbnz	r3, 801e04c <_vfiprintf_r+0x18>
 801e048:	f7ff fdca 	bl	801dbe0 <__sinit>
 801e04c:	4b89      	ldr	r3, [pc, #548]	; (801e274 <_vfiprintf_r+0x240>)
 801e04e:	429d      	cmp	r5, r3
 801e050:	d11b      	bne.n	801e08a <_vfiprintf_r+0x56>
 801e052:	6875      	ldr	r5, [r6, #4]
 801e054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e056:	07d9      	lsls	r1, r3, #31
 801e058:	d405      	bmi.n	801e066 <_vfiprintf_r+0x32>
 801e05a:	89ab      	ldrh	r3, [r5, #12]
 801e05c:	059a      	lsls	r2, r3, #22
 801e05e:	d402      	bmi.n	801e066 <_vfiprintf_r+0x32>
 801e060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e062:	f7ff fe6d 	bl	801dd40 <__retarget_lock_acquire_recursive>
 801e066:	89ab      	ldrh	r3, [r5, #12]
 801e068:	071b      	lsls	r3, r3, #28
 801e06a:	d501      	bpl.n	801e070 <_vfiprintf_r+0x3c>
 801e06c:	692b      	ldr	r3, [r5, #16]
 801e06e:	b9eb      	cbnz	r3, 801e0ac <_vfiprintf_r+0x78>
 801e070:	4629      	mov	r1, r5
 801e072:	4630      	mov	r0, r6
 801e074:	f7ff fc0e 	bl	801d894 <__swsetup_r>
 801e078:	b1c0      	cbz	r0, 801e0ac <_vfiprintf_r+0x78>
 801e07a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e07c:	07dc      	lsls	r4, r3, #31
 801e07e:	d50e      	bpl.n	801e09e <_vfiprintf_r+0x6a>
 801e080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e084:	b01d      	add	sp, #116	; 0x74
 801e086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e08a:	4b7b      	ldr	r3, [pc, #492]	; (801e278 <_vfiprintf_r+0x244>)
 801e08c:	429d      	cmp	r5, r3
 801e08e:	d101      	bne.n	801e094 <_vfiprintf_r+0x60>
 801e090:	68b5      	ldr	r5, [r6, #8]
 801e092:	e7df      	b.n	801e054 <_vfiprintf_r+0x20>
 801e094:	4b79      	ldr	r3, [pc, #484]	; (801e27c <_vfiprintf_r+0x248>)
 801e096:	429d      	cmp	r5, r3
 801e098:	bf08      	it	eq
 801e09a:	68f5      	ldreq	r5, [r6, #12]
 801e09c:	e7da      	b.n	801e054 <_vfiprintf_r+0x20>
 801e09e:	89ab      	ldrh	r3, [r5, #12]
 801e0a0:	0598      	lsls	r0, r3, #22
 801e0a2:	d4ed      	bmi.n	801e080 <_vfiprintf_r+0x4c>
 801e0a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e0a6:	f7ff fe4c 	bl	801dd42 <__retarget_lock_release_recursive>
 801e0aa:	e7e9      	b.n	801e080 <_vfiprintf_r+0x4c>
 801e0ac:	2300      	movs	r3, #0
 801e0ae:	9309      	str	r3, [sp, #36]	; 0x24
 801e0b0:	2320      	movs	r3, #32
 801e0b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e0b6:	f8cd 800c 	str.w	r8, [sp, #12]
 801e0ba:	2330      	movs	r3, #48	; 0x30
 801e0bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e280 <_vfiprintf_r+0x24c>
 801e0c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e0c4:	f04f 0901 	mov.w	r9, #1
 801e0c8:	4623      	mov	r3, r4
 801e0ca:	469a      	mov	sl, r3
 801e0cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e0d0:	b10a      	cbz	r2, 801e0d6 <_vfiprintf_r+0xa2>
 801e0d2:	2a25      	cmp	r2, #37	; 0x25
 801e0d4:	d1f9      	bne.n	801e0ca <_vfiprintf_r+0x96>
 801e0d6:	ebba 0b04 	subs.w	fp, sl, r4
 801e0da:	d00b      	beq.n	801e0f4 <_vfiprintf_r+0xc0>
 801e0dc:	465b      	mov	r3, fp
 801e0de:	4622      	mov	r2, r4
 801e0e0:	4629      	mov	r1, r5
 801e0e2:	4630      	mov	r0, r6
 801e0e4:	f7ff ff93 	bl	801e00e <__sfputs_r>
 801e0e8:	3001      	adds	r0, #1
 801e0ea:	f000 80aa 	beq.w	801e242 <_vfiprintf_r+0x20e>
 801e0ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e0f0:	445a      	add	r2, fp
 801e0f2:	9209      	str	r2, [sp, #36]	; 0x24
 801e0f4:	f89a 3000 	ldrb.w	r3, [sl]
 801e0f8:	2b00      	cmp	r3, #0
 801e0fa:	f000 80a2 	beq.w	801e242 <_vfiprintf_r+0x20e>
 801e0fe:	2300      	movs	r3, #0
 801e100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e108:	f10a 0a01 	add.w	sl, sl, #1
 801e10c:	9304      	str	r3, [sp, #16]
 801e10e:	9307      	str	r3, [sp, #28]
 801e110:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e114:	931a      	str	r3, [sp, #104]	; 0x68
 801e116:	4654      	mov	r4, sl
 801e118:	2205      	movs	r2, #5
 801e11a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e11e:	4858      	ldr	r0, [pc, #352]	; (801e280 <_vfiprintf_r+0x24c>)
 801e120:	f7e2 f8a6 	bl	8000270 <memchr>
 801e124:	9a04      	ldr	r2, [sp, #16]
 801e126:	b9d8      	cbnz	r0, 801e160 <_vfiprintf_r+0x12c>
 801e128:	06d1      	lsls	r1, r2, #27
 801e12a:	bf44      	itt	mi
 801e12c:	2320      	movmi	r3, #32
 801e12e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e132:	0713      	lsls	r3, r2, #28
 801e134:	bf44      	itt	mi
 801e136:	232b      	movmi	r3, #43	; 0x2b
 801e138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e13c:	f89a 3000 	ldrb.w	r3, [sl]
 801e140:	2b2a      	cmp	r3, #42	; 0x2a
 801e142:	d015      	beq.n	801e170 <_vfiprintf_r+0x13c>
 801e144:	9a07      	ldr	r2, [sp, #28]
 801e146:	4654      	mov	r4, sl
 801e148:	2000      	movs	r0, #0
 801e14a:	f04f 0c0a 	mov.w	ip, #10
 801e14e:	4621      	mov	r1, r4
 801e150:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e154:	3b30      	subs	r3, #48	; 0x30
 801e156:	2b09      	cmp	r3, #9
 801e158:	d94e      	bls.n	801e1f8 <_vfiprintf_r+0x1c4>
 801e15a:	b1b0      	cbz	r0, 801e18a <_vfiprintf_r+0x156>
 801e15c:	9207      	str	r2, [sp, #28]
 801e15e:	e014      	b.n	801e18a <_vfiprintf_r+0x156>
 801e160:	eba0 0308 	sub.w	r3, r0, r8
 801e164:	fa09 f303 	lsl.w	r3, r9, r3
 801e168:	4313      	orrs	r3, r2
 801e16a:	9304      	str	r3, [sp, #16]
 801e16c:	46a2      	mov	sl, r4
 801e16e:	e7d2      	b.n	801e116 <_vfiprintf_r+0xe2>
 801e170:	9b03      	ldr	r3, [sp, #12]
 801e172:	1d19      	adds	r1, r3, #4
 801e174:	681b      	ldr	r3, [r3, #0]
 801e176:	9103      	str	r1, [sp, #12]
 801e178:	2b00      	cmp	r3, #0
 801e17a:	bfbb      	ittet	lt
 801e17c:	425b      	neglt	r3, r3
 801e17e:	f042 0202 	orrlt.w	r2, r2, #2
 801e182:	9307      	strge	r3, [sp, #28]
 801e184:	9307      	strlt	r3, [sp, #28]
 801e186:	bfb8      	it	lt
 801e188:	9204      	strlt	r2, [sp, #16]
 801e18a:	7823      	ldrb	r3, [r4, #0]
 801e18c:	2b2e      	cmp	r3, #46	; 0x2e
 801e18e:	d10c      	bne.n	801e1aa <_vfiprintf_r+0x176>
 801e190:	7863      	ldrb	r3, [r4, #1]
 801e192:	2b2a      	cmp	r3, #42	; 0x2a
 801e194:	d135      	bne.n	801e202 <_vfiprintf_r+0x1ce>
 801e196:	9b03      	ldr	r3, [sp, #12]
 801e198:	1d1a      	adds	r2, r3, #4
 801e19a:	681b      	ldr	r3, [r3, #0]
 801e19c:	9203      	str	r2, [sp, #12]
 801e19e:	2b00      	cmp	r3, #0
 801e1a0:	bfb8      	it	lt
 801e1a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e1a6:	3402      	adds	r4, #2
 801e1a8:	9305      	str	r3, [sp, #20]
 801e1aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e290 <_vfiprintf_r+0x25c>
 801e1ae:	7821      	ldrb	r1, [r4, #0]
 801e1b0:	2203      	movs	r2, #3
 801e1b2:	4650      	mov	r0, sl
 801e1b4:	f7e2 f85c 	bl	8000270 <memchr>
 801e1b8:	b140      	cbz	r0, 801e1cc <_vfiprintf_r+0x198>
 801e1ba:	2340      	movs	r3, #64	; 0x40
 801e1bc:	eba0 000a 	sub.w	r0, r0, sl
 801e1c0:	fa03 f000 	lsl.w	r0, r3, r0
 801e1c4:	9b04      	ldr	r3, [sp, #16]
 801e1c6:	4303      	orrs	r3, r0
 801e1c8:	3401      	adds	r4, #1
 801e1ca:	9304      	str	r3, [sp, #16]
 801e1cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e1d0:	482c      	ldr	r0, [pc, #176]	; (801e284 <_vfiprintf_r+0x250>)
 801e1d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e1d6:	2206      	movs	r2, #6
 801e1d8:	f7e2 f84a 	bl	8000270 <memchr>
 801e1dc:	2800      	cmp	r0, #0
 801e1de:	d03f      	beq.n	801e260 <_vfiprintf_r+0x22c>
 801e1e0:	4b29      	ldr	r3, [pc, #164]	; (801e288 <_vfiprintf_r+0x254>)
 801e1e2:	bb1b      	cbnz	r3, 801e22c <_vfiprintf_r+0x1f8>
 801e1e4:	9b03      	ldr	r3, [sp, #12]
 801e1e6:	3307      	adds	r3, #7
 801e1e8:	f023 0307 	bic.w	r3, r3, #7
 801e1ec:	3308      	adds	r3, #8
 801e1ee:	9303      	str	r3, [sp, #12]
 801e1f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1f2:	443b      	add	r3, r7
 801e1f4:	9309      	str	r3, [sp, #36]	; 0x24
 801e1f6:	e767      	b.n	801e0c8 <_vfiprintf_r+0x94>
 801e1f8:	fb0c 3202 	mla	r2, ip, r2, r3
 801e1fc:	460c      	mov	r4, r1
 801e1fe:	2001      	movs	r0, #1
 801e200:	e7a5      	b.n	801e14e <_vfiprintf_r+0x11a>
 801e202:	2300      	movs	r3, #0
 801e204:	3401      	adds	r4, #1
 801e206:	9305      	str	r3, [sp, #20]
 801e208:	4619      	mov	r1, r3
 801e20a:	f04f 0c0a 	mov.w	ip, #10
 801e20e:	4620      	mov	r0, r4
 801e210:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e214:	3a30      	subs	r2, #48	; 0x30
 801e216:	2a09      	cmp	r2, #9
 801e218:	d903      	bls.n	801e222 <_vfiprintf_r+0x1ee>
 801e21a:	2b00      	cmp	r3, #0
 801e21c:	d0c5      	beq.n	801e1aa <_vfiprintf_r+0x176>
 801e21e:	9105      	str	r1, [sp, #20]
 801e220:	e7c3      	b.n	801e1aa <_vfiprintf_r+0x176>
 801e222:	fb0c 2101 	mla	r1, ip, r1, r2
 801e226:	4604      	mov	r4, r0
 801e228:	2301      	movs	r3, #1
 801e22a:	e7f0      	b.n	801e20e <_vfiprintf_r+0x1da>
 801e22c:	ab03      	add	r3, sp, #12
 801e22e:	9300      	str	r3, [sp, #0]
 801e230:	462a      	mov	r2, r5
 801e232:	4b16      	ldr	r3, [pc, #88]	; (801e28c <_vfiprintf_r+0x258>)
 801e234:	a904      	add	r1, sp, #16
 801e236:	4630      	mov	r0, r6
 801e238:	f3af 8000 	nop.w
 801e23c:	4607      	mov	r7, r0
 801e23e:	1c78      	adds	r0, r7, #1
 801e240:	d1d6      	bne.n	801e1f0 <_vfiprintf_r+0x1bc>
 801e242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e244:	07d9      	lsls	r1, r3, #31
 801e246:	d405      	bmi.n	801e254 <_vfiprintf_r+0x220>
 801e248:	89ab      	ldrh	r3, [r5, #12]
 801e24a:	059a      	lsls	r2, r3, #22
 801e24c:	d402      	bmi.n	801e254 <_vfiprintf_r+0x220>
 801e24e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e250:	f7ff fd77 	bl	801dd42 <__retarget_lock_release_recursive>
 801e254:	89ab      	ldrh	r3, [r5, #12]
 801e256:	065b      	lsls	r3, r3, #25
 801e258:	f53f af12 	bmi.w	801e080 <_vfiprintf_r+0x4c>
 801e25c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e25e:	e711      	b.n	801e084 <_vfiprintf_r+0x50>
 801e260:	ab03      	add	r3, sp, #12
 801e262:	9300      	str	r3, [sp, #0]
 801e264:	462a      	mov	r2, r5
 801e266:	4b09      	ldr	r3, [pc, #36]	; (801e28c <_vfiprintf_r+0x258>)
 801e268:	a904      	add	r1, sp, #16
 801e26a:	4630      	mov	r0, r6
 801e26c:	f000 f880 	bl	801e370 <_printf_i>
 801e270:	e7e4      	b.n	801e23c <_vfiprintf_r+0x208>
 801e272:	bf00      	nop
 801e274:	08022464 	.word	0x08022464
 801e278:	08022484 	.word	0x08022484
 801e27c:	08022444 	.word	0x08022444
 801e280:	080224a4 	.word	0x080224a4
 801e284:	080224ae 	.word	0x080224ae
 801e288:	00000000 	.word	0x00000000
 801e28c:	0801e00f 	.word	0x0801e00f
 801e290:	080224aa 	.word	0x080224aa

0801e294 <_printf_common>:
 801e294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e298:	4616      	mov	r6, r2
 801e29a:	4699      	mov	r9, r3
 801e29c:	688a      	ldr	r2, [r1, #8]
 801e29e:	690b      	ldr	r3, [r1, #16]
 801e2a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e2a4:	4293      	cmp	r3, r2
 801e2a6:	bfb8      	it	lt
 801e2a8:	4613      	movlt	r3, r2
 801e2aa:	6033      	str	r3, [r6, #0]
 801e2ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e2b0:	4607      	mov	r7, r0
 801e2b2:	460c      	mov	r4, r1
 801e2b4:	b10a      	cbz	r2, 801e2ba <_printf_common+0x26>
 801e2b6:	3301      	adds	r3, #1
 801e2b8:	6033      	str	r3, [r6, #0]
 801e2ba:	6823      	ldr	r3, [r4, #0]
 801e2bc:	0699      	lsls	r1, r3, #26
 801e2be:	bf42      	ittt	mi
 801e2c0:	6833      	ldrmi	r3, [r6, #0]
 801e2c2:	3302      	addmi	r3, #2
 801e2c4:	6033      	strmi	r3, [r6, #0]
 801e2c6:	6825      	ldr	r5, [r4, #0]
 801e2c8:	f015 0506 	ands.w	r5, r5, #6
 801e2cc:	d106      	bne.n	801e2dc <_printf_common+0x48>
 801e2ce:	f104 0a19 	add.w	sl, r4, #25
 801e2d2:	68e3      	ldr	r3, [r4, #12]
 801e2d4:	6832      	ldr	r2, [r6, #0]
 801e2d6:	1a9b      	subs	r3, r3, r2
 801e2d8:	42ab      	cmp	r3, r5
 801e2da:	dc26      	bgt.n	801e32a <_printf_common+0x96>
 801e2dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e2e0:	1e13      	subs	r3, r2, #0
 801e2e2:	6822      	ldr	r2, [r4, #0]
 801e2e4:	bf18      	it	ne
 801e2e6:	2301      	movne	r3, #1
 801e2e8:	0692      	lsls	r2, r2, #26
 801e2ea:	d42b      	bmi.n	801e344 <_printf_common+0xb0>
 801e2ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e2f0:	4649      	mov	r1, r9
 801e2f2:	4638      	mov	r0, r7
 801e2f4:	47c0      	blx	r8
 801e2f6:	3001      	adds	r0, #1
 801e2f8:	d01e      	beq.n	801e338 <_printf_common+0xa4>
 801e2fa:	6823      	ldr	r3, [r4, #0]
 801e2fc:	68e5      	ldr	r5, [r4, #12]
 801e2fe:	6832      	ldr	r2, [r6, #0]
 801e300:	f003 0306 	and.w	r3, r3, #6
 801e304:	2b04      	cmp	r3, #4
 801e306:	bf08      	it	eq
 801e308:	1aad      	subeq	r5, r5, r2
 801e30a:	68a3      	ldr	r3, [r4, #8]
 801e30c:	6922      	ldr	r2, [r4, #16]
 801e30e:	bf0c      	ite	eq
 801e310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e314:	2500      	movne	r5, #0
 801e316:	4293      	cmp	r3, r2
 801e318:	bfc4      	itt	gt
 801e31a:	1a9b      	subgt	r3, r3, r2
 801e31c:	18ed      	addgt	r5, r5, r3
 801e31e:	2600      	movs	r6, #0
 801e320:	341a      	adds	r4, #26
 801e322:	42b5      	cmp	r5, r6
 801e324:	d11a      	bne.n	801e35c <_printf_common+0xc8>
 801e326:	2000      	movs	r0, #0
 801e328:	e008      	b.n	801e33c <_printf_common+0xa8>
 801e32a:	2301      	movs	r3, #1
 801e32c:	4652      	mov	r2, sl
 801e32e:	4649      	mov	r1, r9
 801e330:	4638      	mov	r0, r7
 801e332:	47c0      	blx	r8
 801e334:	3001      	adds	r0, #1
 801e336:	d103      	bne.n	801e340 <_printf_common+0xac>
 801e338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e340:	3501      	adds	r5, #1
 801e342:	e7c6      	b.n	801e2d2 <_printf_common+0x3e>
 801e344:	18e1      	adds	r1, r4, r3
 801e346:	1c5a      	adds	r2, r3, #1
 801e348:	2030      	movs	r0, #48	; 0x30
 801e34a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e34e:	4422      	add	r2, r4
 801e350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e358:	3302      	adds	r3, #2
 801e35a:	e7c7      	b.n	801e2ec <_printf_common+0x58>
 801e35c:	2301      	movs	r3, #1
 801e35e:	4622      	mov	r2, r4
 801e360:	4649      	mov	r1, r9
 801e362:	4638      	mov	r0, r7
 801e364:	47c0      	blx	r8
 801e366:	3001      	adds	r0, #1
 801e368:	d0e6      	beq.n	801e338 <_printf_common+0xa4>
 801e36a:	3601      	adds	r6, #1
 801e36c:	e7d9      	b.n	801e322 <_printf_common+0x8e>
	...

0801e370 <_printf_i>:
 801e370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e374:	7e0f      	ldrb	r7, [r1, #24]
 801e376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e378:	2f78      	cmp	r7, #120	; 0x78
 801e37a:	4691      	mov	r9, r2
 801e37c:	4680      	mov	r8, r0
 801e37e:	460c      	mov	r4, r1
 801e380:	469a      	mov	sl, r3
 801e382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e386:	d807      	bhi.n	801e398 <_printf_i+0x28>
 801e388:	2f62      	cmp	r7, #98	; 0x62
 801e38a:	d80a      	bhi.n	801e3a2 <_printf_i+0x32>
 801e38c:	2f00      	cmp	r7, #0
 801e38e:	f000 80d8 	beq.w	801e542 <_printf_i+0x1d2>
 801e392:	2f58      	cmp	r7, #88	; 0x58
 801e394:	f000 80a3 	beq.w	801e4de <_printf_i+0x16e>
 801e398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e39c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e3a0:	e03a      	b.n	801e418 <_printf_i+0xa8>
 801e3a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e3a6:	2b15      	cmp	r3, #21
 801e3a8:	d8f6      	bhi.n	801e398 <_printf_i+0x28>
 801e3aa:	a101      	add	r1, pc, #4	; (adr r1, 801e3b0 <_printf_i+0x40>)
 801e3ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e3b0:	0801e409 	.word	0x0801e409
 801e3b4:	0801e41d 	.word	0x0801e41d
 801e3b8:	0801e399 	.word	0x0801e399
 801e3bc:	0801e399 	.word	0x0801e399
 801e3c0:	0801e399 	.word	0x0801e399
 801e3c4:	0801e399 	.word	0x0801e399
 801e3c8:	0801e41d 	.word	0x0801e41d
 801e3cc:	0801e399 	.word	0x0801e399
 801e3d0:	0801e399 	.word	0x0801e399
 801e3d4:	0801e399 	.word	0x0801e399
 801e3d8:	0801e399 	.word	0x0801e399
 801e3dc:	0801e529 	.word	0x0801e529
 801e3e0:	0801e44d 	.word	0x0801e44d
 801e3e4:	0801e50b 	.word	0x0801e50b
 801e3e8:	0801e399 	.word	0x0801e399
 801e3ec:	0801e399 	.word	0x0801e399
 801e3f0:	0801e54b 	.word	0x0801e54b
 801e3f4:	0801e399 	.word	0x0801e399
 801e3f8:	0801e44d 	.word	0x0801e44d
 801e3fc:	0801e399 	.word	0x0801e399
 801e400:	0801e399 	.word	0x0801e399
 801e404:	0801e513 	.word	0x0801e513
 801e408:	682b      	ldr	r3, [r5, #0]
 801e40a:	1d1a      	adds	r2, r3, #4
 801e40c:	681b      	ldr	r3, [r3, #0]
 801e40e:	602a      	str	r2, [r5, #0]
 801e410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e418:	2301      	movs	r3, #1
 801e41a:	e0a3      	b.n	801e564 <_printf_i+0x1f4>
 801e41c:	6820      	ldr	r0, [r4, #0]
 801e41e:	6829      	ldr	r1, [r5, #0]
 801e420:	0606      	lsls	r6, r0, #24
 801e422:	f101 0304 	add.w	r3, r1, #4
 801e426:	d50a      	bpl.n	801e43e <_printf_i+0xce>
 801e428:	680e      	ldr	r6, [r1, #0]
 801e42a:	602b      	str	r3, [r5, #0]
 801e42c:	2e00      	cmp	r6, #0
 801e42e:	da03      	bge.n	801e438 <_printf_i+0xc8>
 801e430:	232d      	movs	r3, #45	; 0x2d
 801e432:	4276      	negs	r6, r6
 801e434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e438:	485e      	ldr	r0, [pc, #376]	; (801e5b4 <_printf_i+0x244>)
 801e43a:	230a      	movs	r3, #10
 801e43c:	e019      	b.n	801e472 <_printf_i+0x102>
 801e43e:	680e      	ldr	r6, [r1, #0]
 801e440:	602b      	str	r3, [r5, #0]
 801e442:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e446:	bf18      	it	ne
 801e448:	b236      	sxthne	r6, r6
 801e44a:	e7ef      	b.n	801e42c <_printf_i+0xbc>
 801e44c:	682b      	ldr	r3, [r5, #0]
 801e44e:	6820      	ldr	r0, [r4, #0]
 801e450:	1d19      	adds	r1, r3, #4
 801e452:	6029      	str	r1, [r5, #0]
 801e454:	0601      	lsls	r1, r0, #24
 801e456:	d501      	bpl.n	801e45c <_printf_i+0xec>
 801e458:	681e      	ldr	r6, [r3, #0]
 801e45a:	e002      	b.n	801e462 <_printf_i+0xf2>
 801e45c:	0646      	lsls	r6, r0, #25
 801e45e:	d5fb      	bpl.n	801e458 <_printf_i+0xe8>
 801e460:	881e      	ldrh	r6, [r3, #0]
 801e462:	4854      	ldr	r0, [pc, #336]	; (801e5b4 <_printf_i+0x244>)
 801e464:	2f6f      	cmp	r7, #111	; 0x6f
 801e466:	bf0c      	ite	eq
 801e468:	2308      	moveq	r3, #8
 801e46a:	230a      	movne	r3, #10
 801e46c:	2100      	movs	r1, #0
 801e46e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e472:	6865      	ldr	r5, [r4, #4]
 801e474:	60a5      	str	r5, [r4, #8]
 801e476:	2d00      	cmp	r5, #0
 801e478:	bfa2      	ittt	ge
 801e47a:	6821      	ldrge	r1, [r4, #0]
 801e47c:	f021 0104 	bicge.w	r1, r1, #4
 801e480:	6021      	strge	r1, [r4, #0]
 801e482:	b90e      	cbnz	r6, 801e488 <_printf_i+0x118>
 801e484:	2d00      	cmp	r5, #0
 801e486:	d04d      	beq.n	801e524 <_printf_i+0x1b4>
 801e488:	4615      	mov	r5, r2
 801e48a:	fbb6 f1f3 	udiv	r1, r6, r3
 801e48e:	fb03 6711 	mls	r7, r3, r1, r6
 801e492:	5dc7      	ldrb	r7, [r0, r7]
 801e494:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e498:	4637      	mov	r7, r6
 801e49a:	42bb      	cmp	r3, r7
 801e49c:	460e      	mov	r6, r1
 801e49e:	d9f4      	bls.n	801e48a <_printf_i+0x11a>
 801e4a0:	2b08      	cmp	r3, #8
 801e4a2:	d10b      	bne.n	801e4bc <_printf_i+0x14c>
 801e4a4:	6823      	ldr	r3, [r4, #0]
 801e4a6:	07de      	lsls	r6, r3, #31
 801e4a8:	d508      	bpl.n	801e4bc <_printf_i+0x14c>
 801e4aa:	6923      	ldr	r3, [r4, #16]
 801e4ac:	6861      	ldr	r1, [r4, #4]
 801e4ae:	4299      	cmp	r1, r3
 801e4b0:	bfde      	ittt	le
 801e4b2:	2330      	movle	r3, #48	; 0x30
 801e4b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e4b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801e4bc:	1b52      	subs	r2, r2, r5
 801e4be:	6122      	str	r2, [r4, #16]
 801e4c0:	f8cd a000 	str.w	sl, [sp]
 801e4c4:	464b      	mov	r3, r9
 801e4c6:	aa03      	add	r2, sp, #12
 801e4c8:	4621      	mov	r1, r4
 801e4ca:	4640      	mov	r0, r8
 801e4cc:	f7ff fee2 	bl	801e294 <_printf_common>
 801e4d0:	3001      	adds	r0, #1
 801e4d2:	d14c      	bne.n	801e56e <_printf_i+0x1fe>
 801e4d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e4d8:	b004      	add	sp, #16
 801e4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e4de:	4835      	ldr	r0, [pc, #212]	; (801e5b4 <_printf_i+0x244>)
 801e4e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801e4e4:	6829      	ldr	r1, [r5, #0]
 801e4e6:	6823      	ldr	r3, [r4, #0]
 801e4e8:	f851 6b04 	ldr.w	r6, [r1], #4
 801e4ec:	6029      	str	r1, [r5, #0]
 801e4ee:	061d      	lsls	r5, r3, #24
 801e4f0:	d514      	bpl.n	801e51c <_printf_i+0x1ac>
 801e4f2:	07df      	lsls	r7, r3, #31
 801e4f4:	bf44      	itt	mi
 801e4f6:	f043 0320 	orrmi.w	r3, r3, #32
 801e4fa:	6023      	strmi	r3, [r4, #0]
 801e4fc:	b91e      	cbnz	r6, 801e506 <_printf_i+0x196>
 801e4fe:	6823      	ldr	r3, [r4, #0]
 801e500:	f023 0320 	bic.w	r3, r3, #32
 801e504:	6023      	str	r3, [r4, #0]
 801e506:	2310      	movs	r3, #16
 801e508:	e7b0      	b.n	801e46c <_printf_i+0xfc>
 801e50a:	6823      	ldr	r3, [r4, #0]
 801e50c:	f043 0320 	orr.w	r3, r3, #32
 801e510:	6023      	str	r3, [r4, #0]
 801e512:	2378      	movs	r3, #120	; 0x78
 801e514:	4828      	ldr	r0, [pc, #160]	; (801e5b8 <_printf_i+0x248>)
 801e516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e51a:	e7e3      	b.n	801e4e4 <_printf_i+0x174>
 801e51c:	0659      	lsls	r1, r3, #25
 801e51e:	bf48      	it	mi
 801e520:	b2b6      	uxthmi	r6, r6
 801e522:	e7e6      	b.n	801e4f2 <_printf_i+0x182>
 801e524:	4615      	mov	r5, r2
 801e526:	e7bb      	b.n	801e4a0 <_printf_i+0x130>
 801e528:	682b      	ldr	r3, [r5, #0]
 801e52a:	6826      	ldr	r6, [r4, #0]
 801e52c:	6961      	ldr	r1, [r4, #20]
 801e52e:	1d18      	adds	r0, r3, #4
 801e530:	6028      	str	r0, [r5, #0]
 801e532:	0635      	lsls	r5, r6, #24
 801e534:	681b      	ldr	r3, [r3, #0]
 801e536:	d501      	bpl.n	801e53c <_printf_i+0x1cc>
 801e538:	6019      	str	r1, [r3, #0]
 801e53a:	e002      	b.n	801e542 <_printf_i+0x1d2>
 801e53c:	0670      	lsls	r0, r6, #25
 801e53e:	d5fb      	bpl.n	801e538 <_printf_i+0x1c8>
 801e540:	8019      	strh	r1, [r3, #0]
 801e542:	2300      	movs	r3, #0
 801e544:	6123      	str	r3, [r4, #16]
 801e546:	4615      	mov	r5, r2
 801e548:	e7ba      	b.n	801e4c0 <_printf_i+0x150>
 801e54a:	682b      	ldr	r3, [r5, #0]
 801e54c:	1d1a      	adds	r2, r3, #4
 801e54e:	602a      	str	r2, [r5, #0]
 801e550:	681d      	ldr	r5, [r3, #0]
 801e552:	6862      	ldr	r2, [r4, #4]
 801e554:	2100      	movs	r1, #0
 801e556:	4628      	mov	r0, r5
 801e558:	f7e1 fe8a 	bl	8000270 <memchr>
 801e55c:	b108      	cbz	r0, 801e562 <_printf_i+0x1f2>
 801e55e:	1b40      	subs	r0, r0, r5
 801e560:	6060      	str	r0, [r4, #4]
 801e562:	6863      	ldr	r3, [r4, #4]
 801e564:	6123      	str	r3, [r4, #16]
 801e566:	2300      	movs	r3, #0
 801e568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e56c:	e7a8      	b.n	801e4c0 <_printf_i+0x150>
 801e56e:	6923      	ldr	r3, [r4, #16]
 801e570:	462a      	mov	r2, r5
 801e572:	4649      	mov	r1, r9
 801e574:	4640      	mov	r0, r8
 801e576:	47d0      	blx	sl
 801e578:	3001      	adds	r0, #1
 801e57a:	d0ab      	beq.n	801e4d4 <_printf_i+0x164>
 801e57c:	6823      	ldr	r3, [r4, #0]
 801e57e:	079b      	lsls	r3, r3, #30
 801e580:	d413      	bmi.n	801e5aa <_printf_i+0x23a>
 801e582:	68e0      	ldr	r0, [r4, #12]
 801e584:	9b03      	ldr	r3, [sp, #12]
 801e586:	4298      	cmp	r0, r3
 801e588:	bfb8      	it	lt
 801e58a:	4618      	movlt	r0, r3
 801e58c:	e7a4      	b.n	801e4d8 <_printf_i+0x168>
 801e58e:	2301      	movs	r3, #1
 801e590:	4632      	mov	r2, r6
 801e592:	4649      	mov	r1, r9
 801e594:	4640      	mov	r0, r8
 801e596:	47d0      	blx	sl
 801e598:	3001      	adds	r0, #1
 801e59a:	d09b      	beq.n	801e4d4 <_printf_i+0x164>
 801e59c:	3501      	adds	r5, #1
 801e59e:	68e3      	ldr	r3, [r4, #12]
 801e5a0:	9903      	ldr	r1, [sp, #12]
 801e5a2:	1a5b      	subs	r3, r3, r1
 801e5a4:	42ab      	cmp	r3, r5
 801e5a6:	dcf2      	bgt.n	801e58e <_printf_i+0x21e>
 801e5a8:	e7eb      	b.n	801e582 <_printf_i+0x212>
 801e5aa:	2500      	movs	r5, #0
 801e5ac:	f104 0619 	add.w	r6, r4, #25
 801e5b0:	e7f5      	b.n	801e59e <_printf_i+0x22e>
 801e5b2:	bf00      	nop
 801e5b4:	080224b5 	.word	0x080224b5
 801e5b8:	080224c6 	.word	0x080224c6

0801e5bc <_sbrk_r>:
 801e5bc:	b538      	push	{r3, r4, r5, lr}
 801e5be:	4d06      	ldr	r5, [pc, #24]	; (801e5d8 <_sbrk_r+0x1c>)
 801e5c0:	2300      	movs	r3, #0
 801e5c2:	4604      	mov	r4, r0
 801e5c4:	4608      	mov	r0, r1
 801e5c6:	602b      	str	r3, [r5, #0]
 801e5c8:	f7e3 fa04 	bl	80019d4 <_sbrk>
 801e5cc:	1c43      	adds	r3, r0, #1
 801e5ce:	d102      	bne.n	801e5d6 <_sbrk_r+0x1a>
 801e5d0:	682b      	ldr	r3, [r5, #0]
 801e5d2:	b103      	cbz	r3, 801e5d6 <_sbrk_r+0x1a>
 801e5d4:	6023      	str	r3, [r4, #0]
 801e5d6:	bd38      	pop	{r3, r4, r5, pc}
 801e5d8:	20011520 	.word	0x20011520

0801e5dc <__sread>:
 801e5dc:	b510      	push	{r4, lr}
 801e5de:	460c      	mov	r4, r1
 801e5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e5e4:	f000 f8a8 	bl	801e738 <_read_r>
 801e5e8:	2800      	cmp	r0, #0
 801e5ea:	bfab      	itete	ge
 801e5ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e5ee:	89a3      	ldrhlt	r3, [r4, #12]
 801e5f0:	181b      	addge	r3, r3, r0
 801e5f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e5f6:	bfac      	ite	ge
 801e5f8:	6563      	strge	r3, [r4, #84]	; 0x54
 801e5fa:	81a3      	strhlt	r3, [r4, #12]
 801e5fc:	bd10      	pop	{r4, pc}

0801e5fe <__swrite>:
 801e5fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e602:	461f      	mov	r7, r3
 801e604:	898b      	ldrh	r3, [r1, #12]
 801e606:	05db      	lsls	r3, r3, #23
 801e608:	4605      	mov	r5, r0
 801e60a:	460c      	mov	r4, r1
 801e60c:	4616      	mov	r6, r2
 801e60e:	d505      	bpl.n	801e61c <__swrite+0x1e>
 801e610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e614:	2302      	movs	r3, #2
 801e616:	2200      	movs	r2, #0
 801e618:	f000 f870 	bl	801e6fc <_lseek_r>
 801e61c:	89a3      	ldrh	r3, [r4, #12]
 801e61e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e622:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e626:	81a3      	strh	r3, [r4, #12]
 801e628:	4632      	mov	r2, r6
 801e62a:	463b      	mov	r3, r7
 801e62c:	4628      	mov	r0, r5
 801e62e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e632:	f000 b817 	b.w	801e664 <_write_r>

0801e636 <__sseek>:
 801e636:	b510      	push	{r4, lr}
 801e638:	460c      	mov	r4, r1
 801e63a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e63e:	f000 f85d 	bl	801e6fc <_lseek_r>
 801e642:	1c43      	adds	r3, r0, #1
 801e644:	89a3      	ldrh	r3, [r4, #12]
 801e646:	bf15      	itete	ne
 801e648:	6560      	strne	r0, [r4, #84]	; 0x54
 801e64a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e64e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e652:	81a3      	strheq	r3, [r4, #12]
 801e654:	bf18      	it	ne
 801e656:	81a3      	strhne	r3, [r4, #12]
 801e658:	bd10      	pop	{r4, pc}

0801e65a <__sclose>:
 801e65a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e65e:	f000 b81b 	b.w	801e698 <_close_r>
	...

0801e664 <_write_r>:
 801e664:	b538      	push	{r3, r4, r5, lr}
 801e666:	4d07      	ldr	r5, [pc, #28]	; (801e684 <_write_r+0x20>)
 801e668:	4604      	mov	r4, r0
 801e66a:	4608      	mov	r0, r1
 801e66c:	4611      	mov	r1, r2
 801e66e:	2200      	movs	r2, #0
 801e670:	602a      	str	r2, [r5, #0]
 801e672:	461a      	mov	r2, r3
 801e674:	f7e3 f95d 	bl	8001932 <_write>
 801e678:	1c43      	adds	r3, r0, #1
 801e67a:	d102      	bne.n	801e682 <_write_r+0x1e>
 801e67c:	682b      	ldr	r3, [r5, #0]
 801e67e:	b103      	cbz	r3, 801e682 <_write_r+0x1e>
 801e680:	6023      	str	r3, [r4, #0]
 801e682:	bd38      	pop	{r3, r4, r5, pc}
 801e684:	20011520 	.word	0x20011520

0801e688 <abort>:
 801e688:	b508      	push	{r3, lr}
 801e68a:	2006      	movs	r0, #6
 801e68c:	f000 f88e 	bl	801e7ac <raise>
 801e690:	2001      	movs	r0, #1
 801e692:	f7e3 f927 	bl	80018e4 <_exit>
	...

0801e698 <_close_r>:
 801e698:	b538      	push	{r3, r4, r5, lr}
 801e69a:	4d06      	ldr	r5, [pc, #24]	; (801e6b4 <_close_r+0x1c>)
 801e69c:	2300      	movs	r3, #0
 801e69e:	4604      	mov	r4, r0
 801e6a0:	4608      	mov	r0, r1
 801e6a2:	602b      	str	r3, [r5, #0]
 801e6a4:	f7e3 f961 	bl	800196a <_close>
 801e6a8:	1c43      	adds	r3, r0, #1
 801e6aa:	d102      	bne.n	801e6b2 <_close_r+0x1a>
 801e6ac:	682b      	ldr	r3, [r5, #0]
 801e6ae:	b103      	cbz	r3, 801e6b2 <_close_r+0x1a>
 801e6b0:	6023      	str	r3, [r4, #0]
 801e6b2:	bd38      	pop	{r3, r4, r5, pc}
 801e6b4:	20011520 	.word	0x20011520

0801e6b8 <_fstat_r>:
 801e6b8:	b538      	push	{r3, r4, r5, lr}
 801e6ba:	4d07      	ldr	r5, [pc, #28]	; (801e6d8 <_fstat_r+0x20>)
 801e6bc:	2300      	movs	r3, #0
 801e6be:	4604      	mov	r4, r0
 801e6c0:	4608      	mov	r0, r1
 801e6c2:	4611      	mov	r1, r2
 801e6c4:	602b      	str	r3, [r5, #0]
 801e6c6:	f7e3 f95c 	bl	8001982 <_fstat>
 801e6ca:	1c43      	adds	r3, r0, #1
 801e6cc:	d102      	bne.n	801e6d4 <_fstat_r+0x1c>
 801e6ce:	682b      	ldr	r3, [r5, #0]
 801e6d0:	b103      	cbz	r3, 801e6d4 <_fstat_r+0x1c>
 801e6d2:	6023      	str	r3, [r4, #0]
 801e6d4:	bd38      	pop	{r3, r4, r5, pc}
 801e6d6:	bf00      	nop
 801e6d8:	20011520 	.word	0x20011520

0801e6dc <_isatty_r>:
 801e6dc:	b538      	push	{r3, r4, r5, lr}
 801e6de:	4d06      	ldr	r5, [pc, #24]	; (801e6f8 <_isatty_r+0x1c>)
 801e6e0:	2300      	movs	r3, #0
 801e6e2:	4604      	mov	r4, r0
 801e6e4:	4608      	mov	r0, r1
 801e6e6:	602b      	str	r3, [r5, #0]
 801e6e8:	f7e3 f95b 	bl	80019a2 <_isatty>
 801e6ec:	1c43      	adds	r3, r0, #1
 801e6ee:	d102      	bne.n	801e6f6 <_isatty_r+0x1a>
 801e6f0:	682b      	ldr	r3, [r5, #0]
 801e6f2:	b103      	cbz	r3, 801e6f6 <_isatty_r+0x1a>
 801e6f4:	6023      	str	r3, [r4, #0]
 801e6f6:	bd38      	pop	{r3, r4, r5, pc}
 801e6f8:	20011520 	.word	0x20011520

0801e6fc <_lseek_r>:
 801e6fc:	b538      	push	{r3, r4, r5, lr}
 801e6fe:	4d07      	ldr	r5, [pc, #28]	; (801e71c <_lseek_r+0x20>)
 801e700:	4604      	mov	r4, r0
 801e702:	4608      	mov	r0, r1
 801e704:	4611      	mov	r1, r2
 801e706:	2200      	movs	r2, #0
 801e708:	602a      	str	r2, [r5, #0]
 801e70a:	461a      	mov	r2, r3
 801e70c:	f7e3 f954 	bl	80019b8 <_lseek>
 801e710:	1c43      	adds	r3, r0, #1
 801e712:	d102      	bne.n	801e71a <_lseek_r+0x1e>
 801e714:	682b      	ldr	r3, [r5, #0]
 801e716:	b103      	cbz	r3, 801e71a <_lseek_r+0x1e>
 801e718:	6023      	str	r3, [r4, #0]
 801e71a:	bd38      	pop	{r3, r4, r5, pc}
 801e71c:	20011520 	.word	0x20011520

0801e720 <__malloc_lock>:
 801e720:	4801      	ldr	r0, [pc, #4]	; (801e728 <__malloc_lock+0x8>)
 801e722:	f7ff bb0d 	b.w	801dd40 <__retarget_lock_acquire_recursive>
 801e726:	bf00      	nop
 801e728:	20011524 	.word	0x20011524

0801e72c <__malloc_unlock>:
 801e72c:	4801      	ldr	r0, [pc, #4]	; (801e734 <__malloc_unlock+0x8>)
 801e72e:	f7ff bb08 	b.w	801dd42 <__retarget_lock_release_recursive>
 801e732:	bf00      	nop
 801e734:	20011524 	.word	0x20011524

0801e738 <_read_r>:
 801e738:	b538      	push	{r3, r4, r5, lr}
 801e73a:	4d07      	ldr	r5, [pc, #28]	; (801e758 <_read_r+0x20>)
 801e73c:	4604      	mov	r4, r0
 801e73e:	4608      	mov	r0, r1
 801e740:	4611      	mov	r1, r2
 801e742:	2200      	movs	r2, #0
 801e744:	602a      	str	r2, [r5, #0]
 801e746:	461a      	mov	r2, r3
 801e748:	f7e3 f8d6 	bl	80018f8 <_read>
 801e74c:	1c43      	adds	r3, r0, #1
 801e74e:	d102      	bne.n	801e756 <_read_r+0x1e>
 801e750:	682b      	ldr	r3, [r5, #0]
 801e752:	b103      	cbz	r3, 801e756 <_read_r+0x1e>
 801e754:	6023      	str	r3, [r4, #0]
 801e756:	bd38      	pop	{r3, r4, r5, pc}
 801e758:	20011520 	.word	0x20011520

0801e75c <_raise_r>:
 801e75c:	291f      	cmp	r1, #31
 801e75e:	b538      	push	{r3, r4, r5, lr}
 801e760:	4604      	mov	r4, r0
 801e762:	460d      	mov	r5, r1
 801e764:	d904      	bls.n	801e770 <_raise_r+0x14>
 801e766:	2316      	movs	r3, #22
 801e768:	6003      	str	r3, [r0, #0]
 801e76a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e76e:	bd38      	pop	{r3, r4, r5, pc}
 801e770:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e772:	b112      	cbz	r2, 801e77a <_raise_r+0x1e>
 801e774:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e778:	b94b      	cbnz	r3, 801e78e <_raise_r+0x32>
 801e77a:	4620      	mov	r0, r4
 801e77c:	f000 f830 	bl	801e7e0 <_getpid_r>
 801e780:	462a      	mov	r2, r5
 801e782:	4601      	mov	r1, r0
 801e784:	4620      	mov	r0, r4
 801e786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e78a:	f000 b817 	b.w	801e7bc <_kill_r>
 801e78e:	2b01      	cmp	r3, #1
 801e790:	d00a      	beq.n	801e7a8 <_raise_r+0x4c>
 801e792:	1c59      	adds	r1, r3, #1
 801e794:	d103      	bne.n	801e79e <_raise_r+0x42>
 801e796:	2316      	movs	r3, #22
 801e798:	6003      	str	r3, [r0, #0]
 801e79a:	2001      	movs	r0, #1
 801e79c:	e7e7      	b.n	801e76e <_raise_r+0x12>
 801e79e:	2400      	movs	r4, #0
 801e7a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e7a4:	4628      	mov	r0, r5
 801e7a6:	4798      	blx	r3
 801e7a8:	2000      	movs	r0, #0
 801e7aa:	e7e0      	b.n	801e76e <_raise_r+0x12>

0801e7ac <raise>:
 801e7ac:	4b02      	ldr	r3, [pc, #8]	; (801e7b8 <raise+0xc>)
 801e7ae:	4601      	mov	r1, r0
 801e7b0:	6818      	ldr	r0, [r3, #0]
 801e7b2:	f7ff bfd3 	b.w	801e75c <_raise_r>
 801e7b6:	bf00      	nop
 801e7b8:	20000030 	.word	0x20000030

0801e7bc <_kill_r>:
 801e7bc:	b538      	push	{r3, r4, r5, lr}
 801e7be:	4d07      	ldr	r5, [pc, #28]	; (801e7dc <_kill_r+0x20>)
 801e7c0:	2300      	movs	r3, #0
 801e7c2:	4604      	mov	r4, r0
 801e7c4:	4608      	mov	r0, r1
 801e7c6:	4611      	mov	r1, r2
 801e7c8:	602b      	str	r3, [r5, #0]
 801e7ca:	f7e3 f879 	bl	80018c0 <_kill>
 801e7ce:	1c43      	adds	r3, r0, #1
 801e7d0:	d102      	bne.n	801e7d8 <_kill_r+0x1c>
 801e7d2:	682b      	ldr	r3, [r5, #0]
 801e7d4:	b103      	cbz	r3, 801e7d8 <_kill_r+0x1c>
 801e7d6:	6023      	str	r3, [r4, #0]
 801e7d8:	bd38      	pop	{r3, r4, r5, pc}
 801e7da:	bf00      	nop
 801e7dc:	20011520 	.word	0x20011520

0801e7e0 <_getpid_r>:
 801e7e0:	f7e3 b866 	b.w	80018b0 <_getpid>

0801e7e4 <_init>:
 801e7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7e6:	bf00      	nop
 801e7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e7ea:	bc08      	pop	{r3}
 801e7ec:	469e      	mov	lr, r3
 801e7ee:	4770      	bx	lr

0801e7f0 <_fini>:
 801e7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7f2:	bf00      	nop
 801e7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e7f6:	bc08      	pop	{r3}
 801e7f8:	469e      	mov	lr, r3
 801e7fa:	4770      	bx	lr
