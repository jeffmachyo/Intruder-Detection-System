
Trial_LWIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e74c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ce8  0801e94c  0801e94c  0002e94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022634  08022634  000401d4  2**0
                  CONTENTS
  4 .ARM          00000008  08022634  08022634  00032634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802263c  0802263c  000401d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802263c  0802263c  0003263c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022640  08022640  00032640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08022644  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  080226d8  00040094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  08022778  00040134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00011360  200001d4  08022818  000401d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20011534  08022818  00041534  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000401d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000435e2  00000000  00000000  00040202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a545  00000000  00000000  000837e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000030d8  00000000  00000000  0008dd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002f28  00000000  00000000  00090e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003e795  00000000  00000000  00093d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004a5a6  00000000  00000000  000d24c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012cc16  00000000  00000000  0011ca6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00249681  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d368  00000000  00000000  002496d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	0801e934 	.word	0x0801e934

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	0801e934 	.word	0x0801e934

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4a07      	ldr	r2, [pc, #28]	; (8000640 <vApplicationGetIdleTaskMemory+0x2c>)
 8000624:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <vApplicationGetIdleTaskMemory+0x30>)
 800062a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000632:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	20000ec0 	.word	0x20000ec0
 8000644:	20000f14 	.word	0x20000f14

08000648 <MqttClientSubTask>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void MqttClientSubTask(void const *argument)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//waiting for valid ip address
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MqttClientSubTask+0x64>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d007      	beq.n	8000668 <MqttClientSubTask+0x20>
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MqttClientSubTask+0x64>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d003      	beq.n	8000668 <MqttClientSubTask+0x20>
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MqttClientSubTask+0x64>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d104      	bne.n	8000672 <MqttClientSubTask+0x2a>
		{
			osDelay(1000);
 8000668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066c:	f007 fcc2 	bl	8007ff4 <osDelay>
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 8000670:	e7ee      	b.n	8000650 <MqttClientSubTask+0x8>
			continue;
		}
		else
		{
			printf("DHCP/Static IP O.K.\n");
 8000672:	480f      	ldr	r0, [pc, #60]	; (80006b0 <MqttClientSubTask+0x68>)
 8000674:	f01d f902 	bl	801d87c <puts>
			break;
 8000678:	bf00      	nop
//	MqttConnectBroker();
//				osDelay(1000);

	while(1)
	{
		if(!mqttClient.isconnected)
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MqttClientSubTask+0x6c>)
 800067c:	6a1b      	ldr	r3, [r3, #32]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d109      	bne.n	8000696 <MqttClientSubTask+0x4e>
		{
			//try to connect to the broker
			MQTTDisconnect(&mqttClient);
 8000682:	480c      	ldr	r0, [pc, #48]	; (80006b4 <MqttClientSubTask+0x6c>)
 8000684:	f018 fe24 	bl	80192d0 <MQTTDisconnect>
			MqttConnectBroker();
 8000688:	f000 f884 	bl	8000794 <MqttConnectBroker>
//			osDelay(1000);
			vTaskDelay(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000690:	f009 f98e 	bl	80099b0 <vTaskDelay>
 8000694:	e7f1      	b.n	800067a <MqttClientSubTask+0x32>
		}
		else
		{
//			EngagePin1();
			MQTTYield(&mqttClient, 1000); //handle timer
 8000696:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <MqttClientSubTask+0x6c>)
 800069c:	f018 fb52 	bl	8018d44 <MQTTYield>
//			osDelay(100);
			vTaskDelay(1000);
 80006a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a4:	f009 f984 	bl	80099b0 <vTaskDelay>
		if(!mqttClient.isconnected)
 80006a8:	e7e7      	b.n	800067a <MqttClientSubTask+0x32>
 80006aa:	bf00      	nop
 80006ac:	20001a3c 	.word	0x20001a3c
 80006b0:	0801e94c 	.word	0x0801e94c
 80006b4:	20000210 	.word	0x20000210

080006b8 <MqttClientPubTask>:
		}
	}
}

void MqttClientPubTask(void const *argument)
{
 80006b8:	b5b0      	push	{r4, r5, r7, lr}
 80006ba:	b0ac      	sub	sp, #176	; 0xb0
 80006bc:	af00      	add	r7, sp, #0
 80006be:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint8_t obuffer[pb_SensorData_size];
	sensorData sd = {.sensorName="",.sensorID=0,.sensorVal=0,.timeStamp=0};
 80006c0:	2300      	movs	r3, #0
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
 80006c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
 80006d4:	751a      	strb	r2, [r3, #20]
 80006d6:	2300      	movs	r3, #0
 80006d8:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 80006dc:	2300      	movs	r3, #0
 80006de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80006e0:	2300      	movs	r3, #0
 80006e2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
//	const char* str = "MQTT message from STM32";
	MQTTMessage message;

	while(1)
	{
		if(mqttClient.isconnected)
 80006e6:	4b26      	ldr	r3, [pc, #152]	; (8000780 <MqttClientPubTask+0xc8>)
 80006e8:	6a1b      	ldr	r3, [r3, #32]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d043      	beq.n	8000776 <MqttClientPubTask+0xbe>
		{
			if (xSemaphoreTake(bufsemHandle, portMAX_DELAY)) {
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <MqttClientPubTask+0xcc>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006f6:	4618      	mov	r0, r3
 80006f8:	f008 fc6c 	bl	8008fd4 <xQueueSemaphoreTake>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00f      	beq.n	8000722 <MqttClientPubTask+0x6a>

				sd = sensorDataBuf.front(&sensorDataBuf);
 8000702:	4b21      	ldr	r3, [pc, #132]	; (8000788 <MqttClientPubTask+0xd0>)
 8000704:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000708:	463a      	mov	r2, r7
 800070a:	491f      	ldr	r1, [pc, #124]	; (8000788 <MqttClientPubTask+0xd0>)
 800070c:	4610      	mov	r0, r2
 800070e:	4798      	blx	r3
 8000710:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000714:	463d      	mov	r5, r7
 8000716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071e:	682b      	ldr	r3, [r5, #0]
 8000720:	6023      	str	r3, [r4, #0]

			//		copy_(&tmp, &sd);
			}
				//	copy_(&sd, &sd1);
			bool res=sensor_data_to_pbuf(&sd,obuffer,sizeof(obuffer));
 8000722:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000726:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800072a:	224a      	movs	r2, #74	; 0x4a
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fc33 	bl	8000f98 <sensor_data_to_pbuf>
 8000732:	4603      	mov	r3, r0
 8000734:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			if (res) {
 8000738:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800073c:	2b00      	cmp	r3, #0
 800073e:	d01a      	beq.n	8000776 <MqttClientPubTask+0xbe>
				if (strlen((const char*)sd.sensorName)) {
 8000740:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d015      	beq.n	8000776 <MqttClientPubTask+0xbe>
					sd5=sd;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MqttClientPubTask+0xd4>)
 800074c:	461d      	mov	r5, r3
 800074e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000758:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800075a:	6823      	ldr	r3, [r4, #0]
 800075c:	602b      	str	r3, [r5, #0]
//					copy_(&sd, &sd1);
					message.payload = (void*)obuffer;
 800075e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000762:	63bb      	str	r3, [r7, #56]	; 0x38
					message.payloadlen = sizeof(obuffer);
 8000764:	234a      	movs	r3, #74	; 0x4a
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
					MQTTPublish(&mqttClient, "test", &message); //publish a message
 8000768:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800076c:	461a      	mov	r2, r3
 800076e:	4908      	ldr	r1, [pc, #32]	; (8000790 <MqttClientPubTask+0xd8>)
 8000770:	4803      	ldr	r0, [pc, #12]	; (8000780 <MqttClientPubTask+0xc8>)
 8000772:	f018 fce7 	bl	8019144 <MQTTPublish>
//				MQTTPublish(&mqttClient, "test", &message); //publish a message
			}
		}

//		osDelay(1000);
		vTaskDelay(1000);
 8000776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077a:	f009 f919 	bl	80099b0 <vTaskDelay>
		if(mqttClient.isconnected)
 800077e:	e7b2      	b.n	80006e6 <MqttClientPubTask+0x2e>
 8000780:	20000210 	.word	0x20000210
 8000784:	2000190c 	.word	0x2000190c
 8000788:	20001934 	.word	0x20001934
 800078c:	20000e78 	.word	0x20000e78
 8000790:	0801e960 	.word	0x0801e960

08000794 <MqttConnectBroker>:
	}
}

int MqttConnectBroker()
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09c      	sub	sp, #112	; 0x70
 8000798:	af04      	add	r7, sp, #16
	int ret;

	NewNetwork(&net);
 800079a:	4832      	ldr	r0, [pc, #200]	; (8000864 <MqttConnectBroker+0xd0>)
 800079c:	f018 fe30 	bl	8019400 <NewNetwork>
	ret = ConnectNetwork(&net, BROKER_IP, MQTT_PORT);
 80007a0:	f240 725b 	movw	r2, #1883	; 0x75b
 80007a4:	4930      	ldr	r1, [pc, #192]	; (8000868 <MqttConnectBroker+0xd4>)
 80007a6:	482f      	ldr	r0, [pc, #188]	; (8000864 <MqttConnectBroker+0xd0>)
 80007a8:	f018 fe4c 	bl	8019444 <ConnectNetwork>
 80007ac:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 80007ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d005      	beq.n	80007c0 <MqttConnectBroker+0x2c>
	{
		printf("ConnectNetwork failed.\n");
 80007b4:	482d      	ldr	r0, [pc, #180]	; (800086c <MqttConnectBroker+0xd8>)
 80007b6:	f01d f861 	bl	801d87c <puts>
		return -1;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007be:	e04c      	b.n	800085a <MqttConnectBroker+0xc6>
	}

	MQTTClientInit(&mqttClient, &net, 1000, sndBuffer, sizeof(sndBuffer), rcvBuffer, sizeof(rcvBuffer));
 80007c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c4:	9302      	str	r3, [sp, #8]
 80007c6:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <MqttConnectBroker+0xdc>)
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	4b28      	ldr	r3, [pc, #160]	; (8000874 <MqttConnectBroker+0xe0>)
 80007d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007d6:	4923      	ldr	r1, [pc, #140]	; (8000864 <MqttConnectBroker+0xd0>)
 80007d8:	4827      	ldr	r0, [pc, #156]	; (8000878 <MqttConnectBroker+0xe4>)
 80007da:	f017 ff53 	bl	8018684 <MQTTClientInit>

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 80007de:	4a27      	ldr	r2, [pc, #156]	; (800087c <MqttConnectBroker+0xe8>)
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	4611      	mov	r1, r2
 80007e4:	2258      	movs	r2, #88	; 0x58
 80007e6:	4618      	mov	r0, r3
 80007e8:	f01c ffac 	bl	801d744 <memcpy>
	data.willFlag = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	77fb      	strb	r3, [r7, #31]
	data.MQTTVersion = 3;
 80007f0:	2303      	movs	r3, #3
 80007f2:	733b      	strb	r3, [r7, #12]
	data.clientID.cstring = "STM32F4";
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <MqttConnectBroker+0xec>)
 80007f6:	613b      	str	r3, [r7, #16]
	data.username.cstring = "STM32F4";
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <MqttConnectBroker+0xec>)
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
	data.password.cstring = "";
 80007fc:	4b21      	ldr	r3, [pc, #132]	; (8000884 <MqttConnectBroker+0xf0>)
 80007fe:	653b      	str	r3, [r7, #80]	; 0x50
	data.keepAliveInterval = 60;
 8000800:	233c      	movs	r3, #60	; 0x3c
 8000802:	83bb      	strh	r3, [r7, #28]
	data.cleansession = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	77bb      	strb	r3, [r7, #30]

	ret = MQTTConnect(&mqttClient, &data);
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	4619      	mov	r1, r3
 800080c:	481a      	ldr	r0, [pc, #104]	; (8000878 <MqttConnectBroker+0xe4>)
 800080e:	f018 fb7b 	bl	8018f08 <MQTTConnect>
 8000812:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 8000814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000816:	2b00      	cmp	r3, #0
 8000818:	d004      	beq.n	8000824 <MqttConnectBroker+0x90>
	{
		printf("MQTTConnect failed.\n");
 800081a:	481b      	ldr	r0, [pc, #108]	; (8000888 <MqttConnectBroker+0xf4>)
 800081c:	f01d f82e 	bl	801d87c <puts>
		return ret;
 8000820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000822:	e01a      	b.n	800085a <MqttConnectBroker+0xc6>
	}
	osDelay(500);
 8000824:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000828:	f007 fbe4 	bl	8007ff4 <osDelay>

	ret = MQTTSubscribe(&mqttClient, "test", QOS0, MqttMessageArrived);
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MqttConnectBroker+0xf8>)
 800082e:	2200      	movs	r2, #0
 8000830:	4917      	ldr	r1, [pc, #92]	; (8000890 <MqttConnectBroker+0xfc>)
 8000832:	4811      	ldr	r0, [pc, #68]	; (8000878 <MqttConnectBroker+0xe4>)
 8000834:	f018 fc70 	bl	8019118 <MQTTSubscribe>
 8000838:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 800083a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800083c:	2b00      	cmp	r3, #0
 800083e:	d004      	beq.n	800084a <MqttConnectBroker+0xb6>
	{
		printf("MQTTSubscribe failed.\n");
 8000840:	4814      	ldr	r0, [pc, #80]	; (8000894 <MqttConnectBroker+0x100>)
 8000842:	f01d f81b 	bl	801d87c <puts>
		return ret;
 8000846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000848:	e007      	b.n	800085a <MqttConnectBroker+0xc6>
	}
	osDelay(500);
 800084a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800084e:	f007 fbd1 	bl	8007ff4 <osDelay>

	printf("MQTT_ConnectBroker O.K.\n");
 8000852:	4811      	ldr	r0, [pc, #68]	; (8000898 <MqttConnectBroker+0x104>)
 8000854:	f01d f812 	bl	801d87c <puts>
	return MQTT_SUCCESS;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3760      	adds	r7, #96	; 0x60
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200001f8 	.word	0x200001f8
 8000868:	0801e968 	.word	0x0801e968
 800086c:	0801e974 	.word	0x0801e974
 8000870:	20000678 	.word	0x20000678
 8000874:	20000278 	.word	0x20000278
 8000878:	20000210 	.word	0x20000210
 800087c:	0801e9dc 	.word	0x0801e9dc
 8000880:	0801e98c 	.word	0x0801e98c
 8000884:	0801e994 	.word	0x0801e994
 8000888:	0801e998 	.word	0x0801e998
 800088c:	0800089d 	.word	0x0800089d
 8000890:	0801e960 	.word	0x0801e960
 8000894:	0801e9ac 	.word	0x0801e9ac
 8000898:	0801e9c4 	.word	0x0801e9c4

0800089c <MqttMessageArrived>:

void MqttMessageArrived(MessageData* msg)
{
 800089c:	b5b0      	push	{r4, r5, r7, lr}
 800089e:	b09a      	sub	sp, #104	; 0x68
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin); //toggle pin when new message arrived
 80008a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a8:	482d      	ldr	r0, [pc, #180]	; (8000960 <MqttMessageArrived+0xc4>)
 80008aa:	f003 fa36 	bl	8003d1a <HAL_GPIO_TogglePin>

	MQTTMessage* message = msg->message;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	667b      	str	r3, [r7, #100]	; 0x64
	memset(msgBuffer, 0, sizeof(msgBuffer));
 80008b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008b8:	2100      	movs	r1, #0
 80008ba:	482a      	ldr	r0, [pc, #168]	; (8000964 <MqttMessageArrived+0xc8>)
 80008bc:	f01c ff50 	bl	801d760 <memset>
	memcpy(msgBuffer, message->payload,message->payloadlen);
 80008c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008c2:	6899      	ldr	r1, [r3, #8]
 80008c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4826      	ldr	r0, [pc, #152]	; (8000964 <MqttMessageArrived+0xc8>)
 80008cc:	f01c ff3a 	bl	801d744 <memcpy>

	pb_SensorData pb_recv_obj= pb_SensorData_init_zero;
 80008d0:	2300      	movs	r3, #0
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
 80008d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008d8:	2224      	movs	r2, #36	; 0x24
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f01c ff3f 	bl	801d760 <memset>
 80008e2:	2300      	movs	r3, #0
 80008e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80008e6:	2300      	movs	r3, #0
 80008e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80008ea:	2300      	movs	r3, #0
 80008ec:	663b      	str	r3, [r7, #96]	; 0x60
	sensorData sd2 = {.sensorID=0,.sensorName="",.sensorVal=0,.timeStamp=0};
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
 8000902:	751a      	strb	r2, [r3, #20]
 8000904:	2300      	movs	r3, #0
 8000906:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
 800090e:	2300      	movs	r3, #0
 8000910:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	message_to_pb_obj(&pb_recv_obj,msgBuffer,sizeof(msgBuffer));
 8000914:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000918:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800091c:	4911      	ldr	r1, [pc, #68]	; (8000964 <MqttMessageArrived+0xc8>)
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fb8a 	bl	8001038 <message_to_pb_obj>
	pbuf_to_sensor_data(&pb_recv_obj,&sd2);
 8000924:	f107 020c 	add.w	r2, r7, #12
 8000928:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fbaa 	bl	8001088 <pbuf_to_sensor_data>
	sd6=sd2;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MqttMessageArrived+0xcc>)
 8000936:	461d      	mov	r5, r3
 8000938:	f107 040c 	add.w	r4, r7, #12
 800093c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800093e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000944:	6823      	ldr	r3, [r4, #0]
 8000946:	602b      	str	r3, [r5, #0]
//	copy_(&sd2, &sd1);

	printf("MQTT MSG[%d]:%s\n", (int)message->payloadlen, msgBuffer);
 8000948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	4a05      	ldr	r2, [pc, #20]	; (8000964 <MqttMessageArrived+0xc8>)
 800094e:	4619      	mov	r1, r3
 8000950:	4806      	ldr	r0, [pc, #24]	; (800096c <MqttMessageArrived+0xd0>)
 8000952:	f01c ff0d 	bl	801d770 <iprintf>
}
 8000956:	bf00      	nop
 8000958:	3768      	adds	r7, #104	; 0x68
 800095a:	46bd      	mov	sp, r7
 800095c:	bdb0      	pop	{r4, r5, r7, pc}
 800095e:	bf00      	nop
 8000960:	40020400 	.word	0x40020400
 8000964:	20000a78 	.word	0x20000a78
 8000968:	20000e9c 	.word	0x20000e9c
 800096c:	0801ea34 	.word	0x0801ea34

08000970 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000974:	f3bf 8f4f 	dsb	sy
}
 8000978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800097a:	f3bf 8f6f 	isb	sy
}
 800097e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <SCB_EnableICache+0x48>)
 8000982:	2200      	movs	r2, #0
 8000984:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000988:	f3bf 8f4f 	dsb	sy
}
 800098c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800098e:	f3bf 8f6f 	isb	sy
}
 8000992:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <SCB_EnableICache+0x48>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <SCB_EnableICache+0x48>)
 800099a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009a0:	f3bf 8f4f 	dsb	sy
}
 80009a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009a6:	f3bf 8f6f 	isb	sy
}
 80009aa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80009c2:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <SCB_EnableDCache+0x84>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009ca:	f3bf 8f4f 	dsb	sy
}
 80009ce:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <SCB_EnableDCache+0x84>)
 80009d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009d6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	0b5b      	lsrs	r3, r3, #13
 80009dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009e0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	08db      	lsrs	r3, r3, #3
 80009e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009ea:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	015a      	lsls	r2, r3, #5
 80009f0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80009f4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009fa:	4911      	ldr	r1, [pc, #68]	; (8000a40 <SCB_EnableDCache+0x84>)
 80009fc:	4313      	orrs	r3, r2
 80009fe:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	1e5a      	subs	r2, r3, #1
 8000a06:	60ba      	str	r2, [r7, #8]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1ef      	bne.n	80009ec <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	60fa      	str	r2, [r7, #12]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1e5      	bne.n	80009e2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a16:	f3bf 8f4f 	dsb	sy
}
 8000a1a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <SCB_EnableDCache+0x84>)
 8000a1e:	695b      	ldr	r3, [r3, #20]
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <SCB_EnableDCache+0x84>)
 8000a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a26:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a28:	f3bf 8f4f 	dsb	sy
}
 8000a2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a2e:	f3bf 8f6f 	isb	sy
}
 8000a32:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a44:	b5b0      	push	{r4, r5, r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a4a:	f000 fa3b 	bl	8000ec4 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000a4e:	f7ff ff8f 	bl	8000970 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000a52:	f7ff ffb3 	bl	80009bc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a56:	f001 fa3d 	bl	8001ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5a:	f000 f839 	bl	8000ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5e:	f000 f943 	bl	8000ce8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a62:	f000 f8e3 	bl	8000c2c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a66:	f000 f911 	bl	8000c8c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000a6a:	f000 f8a1 	bl	8000bb0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  init_spi(&spi_obj);
 8000a6e:	4813      	ldr	r0, [pc, #76]	; (8000abc <main+0x78>)
 8000a70:	f000 fc8e 	bl	8001390 <init_spi>
  init_sensor_buffer_obj(&sensorDataBuf);
 8000a74:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <main+0x7c>)
 8000a76:	f000 fb6d 	bl	8001154 <init_sensor_buffer_obj>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of bufsem */
  osSemaphoreDef(bufsem);
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  bufsemHandle = osSemaphoreCreate(osSemaphore(bufsem), 1);
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	2101      	movs	r1, #1
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f007 fb63 	bl	8008154 <osSemaphoreCreate>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	4a0c      	ldr	r2, [pc, #48]	; (8000ac4 <main+0x80>)
 8000a92:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <main+0x84>)
 8000a96:	1d3c      	adds	r4, r7, #4
 8000a98:	461d      	mov	r5, r3
 8000a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f007 fa56 	bl	8007f5c <osThreadCreate>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4a06      	ldr	r2, [pc, #24]	; (8000acc <main+0x88>)
 8000ab4:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ab6:	f007 fa3a 	bl	8007f2e <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <main+0x76>
 8000abc:	200019dc 	.word	0x200019dc
 8000ac0:	20001934 	.word	0x20001934
 8000ac4:	2000190c 	.word	0x2000190c
 8000ac8:	0801ea7c 	.word	0x0801ea7c
 8000acc:	20001908 	.word	0x20001908

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b094      	sub	sp, #80	; 0x50
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	2234      	movs	r2, #52	; 0x34
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f01c fe3e 	bl	801d760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	f107 0308 	add.w	r3, r7, #8
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000af4:	f003 fa74 	bl	8003fe0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af8:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <SystemClock_Config+0xd8>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	4a2a      	ldr	r2, [pc, #168]	; (8000ba8 <SystemClock_Config+0xd8>)
 8000afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40
 8000b04:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <SystemClock_Config+0xd8>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b10:	4b26      	ldr	r3, [pc, #152]	; (8000bac <SystemClock_Config+0xdc>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a25      	ldr	r2, [pc, #148]	; (8000bac <SystemClock_Config+0xdc>)
 8000b16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	4b23      	ldr	r3, [pc, #140]	; (8000bac <SystemClock_Config+0xdc>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b2c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b32:	2302      	movs	r3, #2
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b40:	23d8      	movs	r3, #216	; 0xd8
 8000b42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b48:	2309      	movs	r3, #9
 8000b4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4618      	mov	r0, r3
 8000b56:	f003 faa3 	bl	80040a0 <HAL_RCC_OscConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b60:	f000 fa14 	bl	8000f8c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b64:	f003 fa4c 	bl	8004000 <HAL_PWREx_EnableOverDrive>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b6e:	f000 fa0d 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b72:	230f      	movs	r3, #15
 8000b74:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b76:	2302      	movs	r3, #2
 8000b78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b88:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	2107      	movs	r1, #7
 8000b90:	4618      	mov	r0, r3
 8000b92:	f003 fd33 	bl	80045fc <HAL_RCC_ClockConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b9c:	f000 f9f6 	bl	8000f8c <Error_Handler>
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	3750      	adds	r7, #80	; 0x50
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40007000 	.word	0x40007000

08000bb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bb6:	4a1c      	ldr	r2, [pc, #112]	; (8000c28 <MX_SPI1_Init+0x78>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc8:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000be6:	2238      	movs	r2, #56	; 0x38
 8000be8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bfe:	2207      	movs	r2, #7
 8000c00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000c10:	f004 fb74 	bl	80052fc <HAL_SPI_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c1a:	f000 f9b7 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20001314 	.word	0x20001314
 8000c28:	40013000 	.word	0x40013000

08000c2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c32:	4a15      	ldr	r2, [pc, #84]	; (8000c88 <MX_USART3_UART_Init+0x5c>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c70:	f005 fba6 	bl	80063c0 <HAL_UART_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c7a:	f000 f987 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20001378 	.word	0x20001378
 8000c88:	40004800 	.word	0x40004800

08000c8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c9a:	2206      	movs	r2, #6
 8000c9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cac:	2202      	movs	r2, #2
 8000cae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cd0:	f003 f83d 	bl	8003d4e <HAL_PCD_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000cda:	f000 f957 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20001400 	.word	0x20001400

08000ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	; 0x30
 8000cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	4b47      	ldr	r3, [pc, #284]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a46      	ldr	r2, [pc, #280]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b44      	ldr	r3, [pc, #272]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d16:	4b41      	ldr	r3, [pc, #260]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a40      	ldr	r2, [pc, #256]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b3e      	ldr	r3, [pc, #248]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4b3b      	ldr	r3, [pc, #236]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a3a      	ldr	r2, [pc, #232]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b38      	ldr	r3, [pc, #224]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4b35      	ldr	r3, [pc, #212]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a34      	ldr	r2, [pc, #208]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b32      	ldr	r3, [pc, #200]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5e:	4b2f      	ldr	r3, [pc, #188]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a2e      	ldr	r2, [pc, #184]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d76:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a28      	ldr	r2, [pc, #160]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d94:	4822      	ldr	r0, [pc, #136]	; (8000e20 <MX_GPIO_Init+0x138>)
 8000d96:	f002 ffa7 	bl	8003ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2140      	movs	r1, #64	; 0x40
 8000d9e:	4821      	ldr	r0, [pc, #132]	; (8000e24 <MX_GPIO_Init+0x13c>)
 8000da0:	f002 ffa2 	bl	8003ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000daa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	481b      	ldr	r0, [pc, #108]	; (8000e28 <MX_GPIO_Init+0x140>)
 8000dbc:	f002 fcdc 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000dc0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4811      	ldr	r0, [pc, #68]	; (8000e20 <MX_GPIO_Init+0x138>)
 8000dda:	f002 fccd 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000dde:	2340      	movs	r3, #64	; 0x40
 8000de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	480b      	ldr	r0, [pc, #44]	; (8000e24 <MX_GPIO_Init+0x13c>)
 8000df6:	f002 fcbf 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000dfa:	2380      	movs	r3, #128	; 0x80
 8000dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_GPIO_Init+0x13c>)
 8000e0e:	f002 fcb3 	bl	8003778 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e12:	bf00      	nop
 8000e14:	3730      	adds	r7, #48	; 0x30
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020400 	.word	0x40020400
 8000e24:	40021800 	.word	0x40021800
 8000e28:	40020800 	.word	0x40020800

08000e2c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e2c:	b5b0      	push	{r4, r5, r7, lr}
 8000e2e:	b090      	sub	sp, #64	; 0x40
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000e34:	f006 fa20 	bl	8007278 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  osThreadDef(mqttClientSubTask, MqttClientSubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2); //subscribe task
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <StartDefaultTask+0x80>)
 8000e3a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000e3e:	461d      	mov	r5, r3
 8000e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	osThreadDef(mqttClientPubTask, MqttClientPubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2); //publish task
 8000e4c:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <StartDefaultTask+0x84>)
 8000e4e:	f107 0408 	add.w	r4, r7, #8
 8000e52:	461d      	mov	r5, r3
 8000e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	mqttClientSubTaskHandle = osThreadCreate(osThread(mqttClientSubTask), NULL);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f007 f878 	bl	8007f5c <osThreadCreate>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a11      	ldr	r2, [pc, #68]	; (8000eb4 <StartDefaultTask+0x88>)
 8000e70:	6013      	str	r3, [r2, #0]
  	mqttClientPubTaskHandle = osThreadCreate(osThread(mqttClientPubTask), NULL);
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f007 f86f 	bl	8007f5c <osThreadCreate>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <StartDefaultTask+0x8c>)
 8000e82:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
//	  IRSENSOR1
//	  spi_obj.spi_read(buffer_tx[0],buffer_rx,&hspi1);
	  spi_obj.spi_read(IRSENSOR1,spi_obj.rx_buf,&hspi1);
 8000e84:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <StartDefaultTask+0x90>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <StartDefaultTask+0x94>)
 8000e8a:	490c      	ldr	r1, [pc, #48]	; (8000ebc <StartDefaultTask+0x90>)
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	4798      	blx	r3
	  vTaskDelay(20);
 8000e90:	2014      	movs	r0, #20
 8000e92:	f008 fd8d 	bl	80099b0 <vTaskDelay>
	  spi_obj.spi_read(IRSENSOR2,spi_obj.rx_buf,&hspi1);
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <StartDefaultTask+0x90>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	4a09      	ldr	r2, [pc, #36]	; (8000ec0 <StartDefaultTask+0x94>)
 8000e9c:	4907      	ldr	r1, [pc, #28]	; (8000ebc <StartDefaultTask+0x90>)
 8000e9e:	2004      	movs	r0, #4
 8000ea0:	4798      	blx	r3
	  vTaskDelay(20);
 8000ea2:	2014      	movs	r0, #20
 8000ea4:	f008 fd84 	bl	80099b0 <vTaskDelay>
	  spi_obj.spi_read(IRSENSOR1,spi_obj.rx_buf,&hspi1);
 8000ea8:	e7ec      	b.n	8000e84 <StartDefaultTask+0x58>
 8000eaa:	bf00      	nop
 8000eac:	0801ea98 	.word	0x0801ea98
 8000eb0:	0801eab4 	.word	0x0801eab4
 8000eb4:	200001f0 	.word	0x200001f0
 8000eb8:	200001f4 	.word	0x200001f4
 8000ebc:	200019dc 	.word	0x200019dc
 8000ec0:	20001314 	.word	0x20001314

08000ec4 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eca:	463b      	mov	r3, r7
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ed6:	f001 f963 	bl	80021a0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000eda:	2301      	movs	r3, #1
 8000edc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ee6:	231f      	movs	r3, #31
 8000ee8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000eea:	2387      	movs	r3, #135	; 0x87
 8000eec:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000efa:	2301      	movs	r3, #1
 8000efc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f06:	463b      	mov	r3, r7
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 f981 	bl	8002210 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000f12:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000f16:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000f18:	2310      	movs	r3, #16
 8000f1a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f24:	2303      	movs	r3, #3
 8000f26:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 f96e 	bl	8002210 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24020000;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MPU_Config+0xa0>)
 8000f3a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f44:	2301      	movs	r3, #1
 8000f46:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 f95e 	bl	8002210 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f54:	2004      	movs	r0, #4
 8000f56:	f001 f93b 	bl	80021d0 <HAL_MPU_Enable>

}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	24020000 	.word	0x24020000

08000f68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d101      	bne.n	8000f7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f7a:	f000 ffb9 	bl	8001ef0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40001000 	.word	0x40001000

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <Error_Handler+0x8>
	...

08000f98 <sensor_data_to_pbuf>:

//static bool decode_timestamp(pb_istream_t *stream, const pb_field_t *field, void **arg);
//static bool encode_timestamp(pb_ostream_t *stream, const pb_field_t *field, void * const *arg);

//pb_SensorData sensor_data_to_pbuf(sensorData* sd,uint8_t *msg_buf,uint32_t* len) {
bool sensor_data_to_pbuf(sensorData* sd,uint8_t *msg_buf,uint32_t len) {
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b09e      	sub	sp, #120	; 0x78
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6278      	str	r0, [r7, #36]	; 0x24
 8000fa0:	6239      	str	r1, [r7, #32]
 8000fa2:	61fa      	str	r2, [r7, #28]
	copy_(sd, &sd1);
 8000fa4:	4922      	ldr	r1, [pc, #136]	; (8001030 <sensor_data_to_pbuf+0x98>)
 8000fa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fa8:	f000 f892 	bl	80010d0 <copy_>
//	pb_SensorData_fields
	pb_SensorData pb_obj= pb_SensorData_init_zero;
 8000fac:	2300      	movs	r3, #0
 8000fae:	643b      	str	r3, [r7, #64]	; 0x40
 8000fb0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fb4:	2224      	movs	r2, #36	; 0x24
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f01c fbd1 	bl	801d760 <memset>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	673b      	str	r3, [r7, #112]	; 0x70
	pb_ostream_t ostream_sname;

//	uint8_t sensor_name_buf[strlen(((const char*)sd->sensorName)+1)];
	strcpy(pb_obj.sensorName,(const char*)sd->sensorName);
 8000fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f01c fc98 	bl	801d908 <strcpy>
//	pb_obj.sensorName.funcs.encode = &encode_sensorName;

	pb_obj.sensorID = sd->sensorID;
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	7e5b      	ldrb	r3, [r3, #25]
 8000fdc:	66bb      	str	r3, [r7, #104]	; 0x68
	pb_obj.timeStamp = sd->timeStamp;
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	66fb      	str	r3, [r7, #108]	; 0x6c

	pb_obj.sensorValue = sd->sensorVal;
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fea:	673b      	str	r3, [r7, #112]	; 0x70


//	ostream_sname = pb_ostream_from_buffer(sensor_name_buf, sizeof(sensor_name_buf));
	ostream_sname = pb_ostream_from_buffer(msg_buf, len);
 8000fec:	463b      	mov	r3, r7
 8000fee:	69fa      	ldr	r2, [r7, #28]
 8000ff0:	6a39      	ldr	r1, [r7, #32]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f01b faae 	bl	801c554 <pb_ostream_from_buffer>
 8000ff8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000ffc:	463d      	mov	r5, r7
 8000ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001002:	682b      	ldr	r3, [r5, #0]
 8001004:	6023      	str	r3, [r4, #0]
	bool res=0;
 8001006:	2300      	movs	r3, #0
 8001008:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	res=pb_encode(&ostream_sname, pb_SensorData_fields, &pb_obj);
 800100c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001010:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001014:	4907      	ldr	r1, [pc, #28]	; (8001034 <sensor_data_to_pbuf+0x9c>)
 8001016:	4618      	mov	r0, r3
 8001018:	f01b ff09 	bl	801ce2e <pb_encode>
 800101c:	4603      	mov	r3, r0
 800101e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	return res;
 8001022:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001026:	4618      	mov	r0, r3
 8001028:	3778      	adds	r7, #120	; 0x78
 800102a:	46bd      	mov	sp, r7
 800102c:	bdb0      	pop	{r4, r5, r7, pc}
 800102e:	bf00      	nop
 8001030:	20001910 	.word	0x20001910
 8001034:	080223d0 	.word	0x080223d0

08001038 <message_to_pb_obj>:
//	sd.sensorVal = pb_data->sensorValue;
//
//
//	return sd;
//}
bool message_to_pb_obj(pb_SensorData* pb_data,uint8_t *msg_buf,uint32_t len) {
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b08d      	sub	sp, #52	; 0x34
 800103c:	af00      	add	r7, sp, #0
 800103e:	61f8      	str	r0, [r7, #28]
 8001040:	61b9      	str	r1, [r7, #24]
 8001042:	617a      	str	r2, [r7, #20]
	pb_istream_t stream;

	stream = pb_istream_from_buffer(msg_buf, len);
 8001044:	463b      	mov	r3, r7
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	69b9      	ldr	r1, [r7, #24]
 800104a:	4618      	mov	r0, r3
 800104c:	f019 fd76 	bl	801ab3c <pb_istream_from_buffer>
 8001050:	f107 0420 	add.w	r4, r7, #32
 8001054:	463b      	mov	r3, r7
 8001056:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001058:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (!pb_decode(&stream, pb_SensorData_fields, pb_data)) {
 800105c:	f107 0320 	add.w	r3, r7, #32
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	4908      	ldr	r1, [pc, #32]	; (8001084 <message_to_pb_obj+0x4c>)
 8001064:	4618      	mov	r0, r3
 8001066:	f01a fea3 	bl	801bdb0 <pb_decode>
 800106a:	4603      	mov	r3, r0
 800106c:	f083 0301 	eor.w	r3, r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <message_to_pb_obj+0x42>
		return false;
 8001076:	2300      	movs	r3, #0
 8001078:	e000      	b.n	800107c <message_to_pb_obj+0x44>
	}

	return true;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	3734      	adds	r7, #52	; 0x34
 8001080:	46bd      	mov	sp, r7
 8001082:	bd90      	pop	{r4, r7, pc}
 8001084:	080223d0 	.word	0x080223d0

08001088 <pbuf_to_sensor_data>:
bool pbuf_to_sensor_data(pb_SensorData* pb_data,sensorData* sd) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
	if (strlen((const char*)pb_data->sensorName)) {
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d005      	beq.n	80010a6 <pbuf_to_sensor_data+0x1e>
		strcpy((char*)sd->sensorName,pb_data->sensorName);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f01c fc31 	bl	801d908 <strcpy>
	}
	sd->sensorID = pb_data->sensorID;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	765a      	strb	r2, [r3, #25]
	sd->sensorVal = pb_data->sensorValue;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f883 2020 	strb.w	r2, [r3, #32]
	sd->timeStamp = pb_data->timeStamp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c0:	461a      	mov	r2, r3
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	61da      	str	r2, [r3, #28]
	return true;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <copy_>:
sensorData sensor_buffer_front(volatile sensorData_buf* sb);

sensorData sensorDataObj;
sensorData_buf sensorDataBuf;

bool copy_(sensorData* from,sensorData* to) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
	strcpy((char*)to->sensorName,(const char*)from->sensorName);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f01c fc11 	bl	801d908 <strcpy>
	to->sensorID = from->sensorID;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7e5a      	ldrb	r2, [r3, #25]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	765a      	strb	r2, [r3, #25]
	to->timeStamp = from ->timeStamp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69da      	ldr	r2, [r3, #28]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	61da      	str	r2, [r3, #28]
	to->sensorVal = from->sensorVal;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 2020 	ldrb.w	r2, [r3, #32]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	f883 2020 	strb.w	r2, [r3, #32]


	return true;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <init_sensor_data_obj>:

void update_timestamp(sensorData* sd) {
	sd->timeStamp = HAL_GetTick();
}

void init_sensor_data_obj(uint8_t* sname,uint8_t sensorID,uint8_t sensorVal,sensorData* sd) {
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	72fb      	strb	r3, [r7, #11]
 800111a:	4613      	mov	r3, r2
 800111c:	72bb      	strb	r3, [r7, #10]
	memcpy(sd->sensorName,sname,strlen((const char*)sname)+1);
 800111e:	687c      	ldr	r4, [r7, #4]
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f7ff f897 	bl	8000254 <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	3301      	adds	r3, #1
 800112a:	461a      	mov	r2, r3
 800112c:	68f9      	ldr	r1, [r7, #12]
 800112e:	4620      	mov	r0, r4
 8001130:	f01c fb08 	bl	801d744 <memcpy>
	sd->sensorID=sensorID;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7afa      	ldrb	r2, [r7, #11]
 8001138:	765a      	strb	r2, [r3, #25]
	sd->timeStamp = HAL_GetTick();
 800113a:	f000 feed 	bl	8001f18 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	61da      	str	r2, [r3, #28]
	sd->sensorVal = sensorVal;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7aba      	ldrb	r2, [r7, #10]
 8001148:	f883 2020 	strb.w	r2, [r3, #32]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	bd90      	pop	{r4, r7, pc}

08001154 <init_sensor_buffer_obj>:


void init_sensor_buffer_obj(volatile sensorData_buf* sb) {
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	sb->count=0;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	sb->first=0;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	sb->last=0;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	sb->front = sensor_buffer_front;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a06      	ldr	r2, [pc, #24]	; (8001190 <init_sensor_buffer_obj+0x3c>)
 8001178:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	sb->update = update_sensor_buffer;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a05      	ldr	r2, [pc, #20]	; (8001194 <init_sensor_buffer_obj+0x40>)
 8001180:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	080012a1 	.word	0x080012a1
 8001194:	08001199 	.word	0x08001199

08001198 <update_sensor_buffer>:

void update_sensor_buffer(volatile sensorData_buf* sb,sensorData sd) {
 8001198:	b084      	sub	sp, #16
 800119a:	b4b0      	push	{r4, r5, r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	f107 001c 	add.w	r0, r7, #28
 80011a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
//	}
//	else if (sb->last>4) {
//		sb->last %=3;
//	}
//	sb->last %=3;
	if (sb->first==4) {
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	d104      	bne.n	80011be <update_sensor_buffer+0x26>
		sb->first =0;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80011bc:	e012      	b.n	80011e4 <update_sensor_buffer+0x4c>
	}
	else if (sb->first>4) {
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c4:	2b04      	cmp	r3, #4
 80011c6:	d90d      	bls.n	80011e4 <update_sensor_buffer+0x4c>
		sb->first %=3;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80011ce:	4b33      	ldr	r3, [pc, #204]	; (800129c <update_sensor_buffer+0x104>)
 80011d0:	fba3 2301 	umull	r2, r3, r3, r1
 80011d4:	085a      	lsrs	r2, r3, #1
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	1aca      	subs	r2, r1, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
//	sb->first %=3;
	sb->sensor_buffer[sb->last++] = sd;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80011ea:	1c51      	adds	r1, r2, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4413      	add	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	461d      	mov	r5, r3
 8001200:	f107 041c 	add.w	r4, r7, #28
 8001204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800120a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	602b      	str	r3, [r5, #0]
	if (sb->last==4) {
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001216:	2b04      	cmp	r3, #4
 8001218:	d104      	bne.n	8001224 <update_sensor_buffer+0x8c>
		sb->last =0;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001222:	e012      	b.n	800124a <update_sensor_buffer+0xb2>
	}
	else if (sb->last>4) {
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800122a:	2b04      	cmp	r3, #4
 800122c:	d90d      	bls.n	800124a <update_sensor_buffer+0xb2>
		sb->last %=3;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8001234:	4b19      	ldr	r3, [pc, #100]	; (800129c <update_sensor_buffer+0x104>)
 8001236:	fba3 2301 	umull	r2, r3, r3, r1
 800123a:	085a      	lsrs	r2, r3, #1
 800123c:	4613      	mov	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	1aca      	subs	r2, r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	}
//	sb->count = (sb->count<(uint32_t)SENSORBUFFERSIZE) ? sb->count+1 : sb->count;
	if (sb->count<4) {
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001250:	2b03      	cmp	r3, #3
 8001252:	d806      	bhi.n	8001262 <update_sensor_buffer+0xca>
		sb->count++;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
//	if (sb->count==4 && sb->last!=3) {
//
//		sb->first++;
//	}

	if (sb->count==4 ) {
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001268:	2b04      	cmp	r3, #4
 800126a:	d110      	bne.n	800128e <update_sensor_buffer+0xf6>
		if (sb->last==3) {
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001272:	2b03      	cmp	r3, #3
 8001274:	d104      	bne.n	8001280 <update_sensor_buffer+0xe8>
			sb->first=0;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
//			sb->last=0;
//		}
//	}

//	sb->first = (sb->count==4 && sb->last!=4) ? sb->first+1 : sb->first;
}
 800127e:	e006      	b.n	800128e <update_sensor_buffer+0xf6>
			sb->first++;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bcb0      	pop	{r4, r5, r7}
 8001296:	b004      	add	sp, #16
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	aaaaaaab 	.word	0xaaaaaaab

080012a0 <sensor_buffer_front>:


sensorData sensor_buffer_front(volatile sensorData_buf* sb) {
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b08c      	sub	sp, #48	; 0x30
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
	if (sb->count--) {
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012b0:	1e59      	subs	r1, r3, #1
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d024      	beq.n	8001306 <sensor_buffer_front+0x66>
		sb->first%=3;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80012c2:	4b22      	ldr	r3, [pc, #136]	; (800134c <sensor_buffer_front+0xac>)
 80012c4:	fba3 2301 	umull	r2, r3, r3, r1
 80012c8:	085a      	lsrs	r2, r3, #1
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	1aca      	subs	r2, r1, r3
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		return sb->sensor_buffer[sb->first++];
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80012de:	1c51      	adds	r1, r2, #1
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	6839      	ldr	r1, [r7, #0]
 80012ea:	4613      	mov	r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	4413      	add	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	440b      	add	r3, r1
 80012f4:	4604      	mov	r4, r0
 80012f6:	461d      	mov	r5, r3
 80012f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001300:	682b      	ldr	r3, [r5, #0]
 8001302:	6023      	str	r3, [r4, #0]
 8001304:	e01e      	b.n	8001344 <sensor_buffer_front+0xa4>
	}
	sensorData obj = {.sensorName="",.sensorID=0,.timeStamp=HAL_GetTick(),.sensorVal=0};
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]
 800131a:	751a      	strb	r2, [r3, #20]
 800131c:	2300      	movs	r3, #0
 800131e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001322:	f000 fdf9 	bl	8001f18 <HAL_GetTick>
 8001326:	4603      	mov	r3, r0
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
 800132a:	2300      	movs	r3, #0
 800132c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	    return obj;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	461d      	mov	r5, r3
 8001334:	f107 040c 	add.w	r4, r7, #12
 8001338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	602b      	str	r3, [r5, #0]
}
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	3730      	adds	r7, #48	; 0x30
 8001348:	46bd      	mov	sp, r7
 800134a:	bdb0      	pop	{r4, r5, r7, pc}
 800134c:	aaaaaaab 	.word	0xaaaaaaab

08001350 <extract_sensor_address>:

uint8_t extract_sensor_address(uint8_t sensor_msg) {
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]

    return sensor_msg>>4;
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	b2db      	uxtb	r3, r3
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <extract_sensor_value>:

uint8_t extract_sensor_value(uint8_t sensor_msg) {
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
    uint8_t mask = (1<<4)-1;
 8001376:	230f      	movs	r3, #15
 8001378:	73fb      	strb	r3, [r7, #15]
    return sensor_msg&mask;
 800137a:	79fa      	ldrb	r2, [r7, #7]
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	4013      	ands	r3, r2
 8001380:	b2db      	uxtb	r3, r3
}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <init_spi>:
extern volatile sensorData_buf sensorDataBuf;
extern uint8_t extract_sensor_address(uint8_t sensor_msg);
extern uint8_t extract_sensor_value(uint8_t sensor_msg);
extern osSemaphoreId bufsemHandle;

void init_spi(spi_* s) {
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	s->reset=resetSPI;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <init_spi+0x28>)
 800139c:	609a      	str	r2, [r3, #8]
	s->spi_read=ReadPeripheral;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a06      	ldr	r2, [pc, #24]	; (80013bc <init_spi+0x2c>)
 80013a2:	605a      	str	r2, [r3, #4]
	s->rx_buf[0] = 0;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]

}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	080013fb 	.word	0x080013fb
 80013bc:	080013c1 	.word	0x080013c1

080013c0 <ReadPeripheral>:




HAL_StatusTypeDef ReadPeripheral(uint8_t addr, uint8_t *buffer_rx,SPI_HandleTypeDef* hspi1) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef hal_status;
	uint8_t buffer_tx[1] = {addr};
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	753b      	strb	r3, [r7, #20]

	hal_status = HAL_SPI_TransmitReceive_IT(hspi1, buffer_tx, buffer_rx, 1);
 80013d2:	f107 0114 	add.w	r1, r7, #20
 80013d6:	2301      	movs	r3, #1
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f004 f862 	bl	80054a4 <HAL_SPI_TransmitReceive_IT>
 80013e0:	4603      	mov	r3, r0
 80013e2:	75fb      	strb	r3, [r7, #23]

	if (hal_status!=HAL_OK) {
 80013e4:	7dfb      	ldrb	r3, [r7, #23]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <ReadPeripheral+0x30>
		resetSPI(hspi1);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f805 	bl	80013fa <resetSPI>
	}

	return hal_status;
 80013f0:	7dfb      	ldrb	r3, [r7, #23]

}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <resetSPI>:



void resetSPI(SPI_HandleTypeDef* ht_spi) {
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	HAL_SPI_DeInit(ht_spi);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f004 f825 	bl	8005452 <HAL_SPI_DeInit>
	HAL_SPI_Init(ht_spi);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f003 ff77 	bl	80052fc <HAL_SPI_Init>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8001418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141a:	b097      	sub	sp, #92	; 0x5c
 800141c:	af06      	add	r7, sp, #24
 800141e:	6078      	str	r0, [r7, #4]
	success=1;
 8001420:	4b51      	ldr	r3, [pc, #324]	; (8001568 <HAL_SPI_TxRxCpltCallback+0x150>)
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]

	uint8_t sensor_val =  extract_sensor_value(spi_obj.rx_buf[0]);
 8001426:	4b51      	ldr	r3, [pc, #324]	; (800156c <HAL_SPI_TxRxCpltCallback+0x154>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff9e 	bl	800136c <extract_sensor_value>
 8001430:	4603      	mov	r3, r0
 8001432:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t sensor_addr = extract_sensor_address(spi_obj.rx_buf[0]);
 8001436:	4b4d      	ldr	r3, [pc, #308]	; (800156c <HAL_SPI_TxRxCpltCallback+0x154>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff ff88 	bl	8001350 <extract_sensor_address>
 8001440:	4603      	mov	r3, r0
 8001442:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e


	if (sensor_addr==IRSENSOR1) {
 8001446:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800144a:	2b03      	cmp	r3, #3
 800144c:	d142      	bne.n	80014d4 <HAL_SPI_TxRxCpltCallback+0xbc>
//		const char* sensor_name = IRSENSOR1NAME;
		sensorData sensorDataObj1;
		init_sensor_data_obj((uint8_t*)IRSENSOR1NAME, sensor_addr, sensor_val, &sensorDataObj1);
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001456:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 800145a:	4845      	ldr	r0, [pc, #276]	; (8001570 <HAL_SPI_TxRxCpltCallback+0x158>)
 800145c:	f7ff fe56 	bl	800110c <init_sensor_data_obj>

		int txStatus = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
		BaseType_t xHigherPriorityTaskWoken;
		sensorDataBuf.update(&sensorDataBuf, sensorDataObj1);
 8001464:	4b43      	ldr	r3, [pc, #268]	; (8001574 <HAL_SPI_TxRxCpltCallback+0x15c>)
 8001466:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 800146a:	466d      	mov	r5, sp
 800146c:	f107 0414 	add.w	r4, r7, #20
 8001470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001474:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001478:	e885 0003 	stmia.w	r5, {r0, r1}
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001482:	483c      	ldr	r0, [pc, #240]	; (8001574 <HAL_SPI_TxRxCpltCallback+0x15c>)
 8001484:	47b0      	blx	r6
		txStatus = xSemaphoreGiveFromISR(bufsemHandle, &xHigherPriorityTaskWoken);
 8001486:	4b3c      	ldr	r3, [pc, #240]	; (8001578 <HAL_SPI_TxRxCpltCallback+0x160>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f007 fc23 	bl	8008cdc <xQueueGiveFromISR>
 8001496:	6378      	str	r0, [r7, #52]	; 0x34
		 if (pdPASS == txStatus) {
 8001498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149a:	2b01      	cmp	r3, #1
 800149c:	d10a      	bne.n	80014b4 <HAL_SPI_TxRxCpltCallback+0x9c>
		      portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 800149e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d007      	beq.n	80014b4 <HAL_SPI_TxRxCpltCallback+0x9c>
 80014a4:	4b35      	ldr	r3, [pc, #212]	; (800157c <HAL_SPI_TxRxCpltCallback+0x164>)
 80014a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	f3bf 8f4f 	dsb	sy
 80014b0:	f3bf 8f6f 	isb	sy
		    }
		 if (sensor_val==1) {
 80014b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d105      	bne.n	80014c8 <HAL_SPI_TxRxCpltCallback+0xb0>
		 		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	2101      	movs	r1, #1
 80014c0:	482f      	ldr	r0, [pc, #188]	; (8001580 <HAL_SPI_TxRxCpltCallback+0x168>)
 80014c2:	f002 fc11 	bl	8003ce8 <HAL_GPIO_WritePin>
//
//	else {
//		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
//	}

}
 80014c6:	e04b      	b.n	8001560 <HAL_SPI_TxRxCpltCallback+0x148>
		 		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2101      	movs	r1, #1
 80014cc:	482c      	ldr	r0, [pc, #176]	; (8001580 <HAL_SPI_TxRxCpltCallback+0x168>)
 80014ce:	f002 fc0b 	bl	8003ce8 <HAL_GPIO_WritePin>
}
 80014d2:	e045      	b.n	8001560 <HAL_SPI_TxRxCpltCallback+0x148>
	else if (sensor_addr==IRSENSOR2) {
 80014d4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d141      	bne.n	8001560 <HAL_SPI_TxRxCpltCallback+0x148>
			init_sensor_data_obj((uint8_t*)IRSENSOR2NAME, sensor_addr, sensor_val, &sensorDataObj1);
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80014e4:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 80014e8:	4826      	ldr	r0, [pc, #152]	; (8001584 <HAL_SPI_TxRxCpltCallback+0x16c>)
 80014ea:	f7ff fe0f 	bl	800110c <init_sensor_data_obj>
			int txStatus = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	63bb      	str	r3, [r7, #56]	; 0x38
			sensorDataBuf.update(&sensorDataBuf, sensorDataObj1);
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <HAL_SPI_TxRxCpltCallback+0x15c>)
 80014f4:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80014f8:	466d      	mov	r5, sp
 80014fa:	f107 0414 	add.w	r4, r7, #20
 80014fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001502:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001506:	e885 0003 	stmia.w	r5, {r0, r1}
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001510:	4818      	ldr	r0, [pc, #96]	; (8001574 <HAL_SPI_TxRxCpltCallback+0x15c>)
 8001512:	47b0      	blx	r6
			txStatus = xSemaphoreGiveFromISR(bufsemHandle, &xHigherPriorityTaskWoken);
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_SPI_TxRxCpltCallback+0x160>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f007 fbdc 	bl	8008cdc <xQueueGiveFromISR>
 8001524:	63b8      	str	r0, [r7, #56]	; 0x38
			 if (pdPASS == txStatus) {
 8001526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001528:	2b01      	cmp	r3, #1
 800152a:	d10a      	bne.n	8001542 <HAL_SPI_TxRxCpltCallback+0x12a>
			      portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 800152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152e:	2b00      	cmp	r3, #0
 8001530:	d007      	beq.n	8001542 <HAL_SPI_TxRxCpltCallback+0x12a>
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_SPI_TxRxCpltCallback+0x164>)
 8001534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	f3bf 8f4f 	dsb	sy
 800153e:	f3bf 8f6f 	isb	sy
			 if (sensor_val==1) {
 8001542:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001546:	2b01      	cmp	r3, #1
 8001548:	d105      	bne.n	8001556 <HAL_SPI_TxRxCpltCallback+0x13e>
			 		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	2180      	movs	r1, #128	; 0x80
 800154e:	480c      	ldr	r0, [pc, #48]	; (8001580 <HAL_SPI_TxRxCpltCallback+0x168>)
 8001550:	f002 fbca 	bl	8003ce8 <HAL_GPIO_WritePin>
}
 8001554:	e004      	b.n	8001560 <HAL_SPI_TxRxCpltCallback+0x148>
			 		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	4809      	ldr	r0, [pc, #36]	; (8001580 <HAL_SPI_TxRxCpltCallback+0x168>)
 800155c:	f002 fbc4 	bl	8003ce8 <HAL_GPIO_WritePin>
}
 8001560:	bf00      	nop
 8001562:	3744      	adds	r7, #68	; 0x44
 8001564:	46bd      	mov	sp, r7
 8001566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001568:	200019d8 	.word	0x200019d8
 800156c:	200019dc 	.word	0x200019dc
 8001570:	0801ead0 	.word	0x0801ead0
 8001574:	20001934 	.word	0x20001934
 8001578:	2000190c 	.word	0x2000190c
 800157c:	e000ed04 	.word	0xe000ed04
 8001580:	40020400 	.word	0x40020400
 8001584:	0801eadc 	.word	0x0801eadc

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_MspInit+0x4c>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	4a10      	ldr	r2, [pc, #64]	; (80015d4 <HAL_MspInit+0x4c>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001598:	6413      	str	r3, [r2, #64]	; 0x40
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <HAL_MspInit+0x4c>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_MspInit+0x4c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_MspInit+0x4c>)
 80015ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b0:	6453      	str	r3, [r2, #68]	; 0x44
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_MspInit+0x4c>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	210f      	movs	r1, #15
 80015c2:	f06f 0001 	mvn.w	r0, #1
 80015c6:	f000 fdb3 	bl	8002130 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a29      	ldr	r2, [pc, #164]	; (800169c <HAL_SPI_MspInit+0xc4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d14b      	bne.n	8001692 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015fa:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <HAL_SPI_MspInit+0xc8>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	4a28      	ldr	r2, [pc, #160]	; (80016a0 <HAL_SPI_MspInit+0xc8>)
 8001600:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001604:	6453      	str	r3, [r2, #68]	; 0x44
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <HAL_SPI_MspInit+0xc8>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <HAL_SPI_MspInit+0xc8>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a22      	ldr	r2, [pc, #136]	; (80016a0 <HAL_SPI_MspInit+0xc8>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_SPI_MspInit+0xc8>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_SPI_MspInit+0xc8>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a1c      	ldr	r2, [pc, #112]	; (80016a0 <HAL_SPI_MspInit+0xc8>)
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_SPI_MspInit+0xc8>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001642:	2360      	movs	r3, #96	; 0x60
 8001644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001652:	2305      	movs	r3, #5
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	4811      	ldr	r0, [pc, #68]	; (80016a4 <HAL_SPI_MspInit+0xcc>)
 800165e:	f002 f88b 	bl	8003778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001672:	2305      	movs	r3, #5
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	480a      	ldr	r0, [pc, #40]	; (80016a8 <HAL_SPI_MspInit+0xd0>)
 800167e:	f002 f87b 	bl	8003778 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2105      	movs	r1, #5
 8001686:	2023      	movs	r0, #35	; 0x23
 8001688:	f000 fd52 	bl	8002130 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800168c:	2023      	movs	r0, #35	; 0x23
 800168e:	f000 fd6b 	bl	8002168 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3728      	adds	r7, #40	; 0x28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40013000 	.word	0x40013000
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020000 	.word	0x40020000
 80016a8:	40020c00 	.word	0x40020c00

080016ac <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <HAL_SPI_MspDeInit+0x3c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d110      	bne.n	80016e0 <HAL_SPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_SPI_MspDeInit+0x40>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <HAL_SPI_MspDeInit+0x40>)
 80016c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016c8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6);
 80016ca:	2160      	movs	r1, #96	; 0x60
 80016cc:	4808      	ldr	r0, [pc, #32]	; (80016f0 <HAL_SPI_MspDeInit+0x44>)
 80016ce:	f002 f9ff 	bl	8003ad0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_7);
 80016d2:	2180      	movs	r1, #128	; 0x80
 80016d4:	4807      	ldr	r0, [pc, #28]	; (80016f4 <HAL_SPI_MspDeInit+0x48>)
 80016d6:	f002 f9fb 	bl	8003ad0 <HAL_GPIO_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80016da:	2023      	movs	r0, #35	; 0x23
 80016dc:	f000 fd52 	bl	8002184 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40013000 	.word	0x40013000
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40020c00 	.word	0x40020c00

080016f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0ae      	sub	sp, #184	; 0xb8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2290      	movs	r2, #144	; 0x90
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f01c f821 	bl	801d760 <memset>
  if(huart->Instance==USART3)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a22      	ldr	r2, [pc, #136]	; (80017ac <HAL_UART_MspInit+0xb4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d13c      	bne.n	80017a2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800172c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800172e:	2300      	movs	r3, #0
 8001730:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4618      	mov	r0, r3
 8001738:	f003 f9b8 	bl	8004aac <HAL_RCCEx_PeriphCLKConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001742:	f7ff fc23 	bl	8000f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <HAL_UART_MspInit+0xb8>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a19      	ldr	r2, [pc, #100]	; (80017b0 <HAL_UART_MspInit+0xb8>)
 800174c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <HAL_UART_MspInit+0xb8>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <HAL_UART_MspInit+0xb8>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a13      	ldr	r2, [pc, #76]	; (80017b0 <HAL_UART_MspInit+0xb8>)
 8001764:	f043 0308 	orr.w	r3, r3, #8
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <HAL_UART_MspInit+0xb8>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001776:	f44f 7340 	mov.w	r3, #768	; 0x300
 800177a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001790:	2307      	movs	r3, #7
 8001792:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001796:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800179a:	4619      	mov	r1, r3
 800179c:	4805      	ldr	r0, [pc, #20]	; (80017b4 <HAL_UART_MspInit+0xbc>)
 800179e:	f001 ffeb 	bl	8003778 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017a2:	bf00      	nop
 80017a4:	37b8      	adds	r7, #184	; 0xb8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40004800 	.word	0x40004800
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020c00 	.word	0x40020c00

080017b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0ae      	sub	sp, #184	; 0xb8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2290      	movs	r2, #144	; 0x90
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f01b ffc1 	bl	801d760 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017e6:	d159      	bne.n	800189c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80017e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 f957 	bl	8004aac <HAL_RCCEx_PeriphCLKConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001804:	f7ff fbc2 	bl	8000f8c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <HAL_PCD_MspInit+0xec>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	4a25      	ldr	r2, [pc, #148]	; (80018a4 <HAL_PCD_MspInit+0xec>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6313      	str	r3, [r2, #48]	; 0x30
 8001814:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <HAL_PCD_MspInit+0xec>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001820:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001824:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800183a:	230a      	movs	r3, #10
 800183c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001844:	4619      	mov	r1, r3
 8001846:	4818      	ldr	r0, [pc, #96]	; (80018a8 <HAL_PCD_MspInit+0xf0>)
 8001848:	f001 ff96 	bl	8003778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800184c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001850:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001860:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001864:	4619      	mov	r1, r3
 8001866:	4810      	ldr	r0, [pc, #64]	; (80018a8 <HAL_PCD_MspInit+0xf0>)
 8001868:	f001 ff86 	bl	8003778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800186c:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_PCD_MspInit+0xec>)
 800186e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001870:	4a0c      	ldr	r2, [pc, #48]	; (80018a4 <HAL_PCD_MspInit+0xec>)
 8001872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001876:	6353      	str	r3, [r2, #52]	; 0x34
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_PCD_MspInit+0xec>)
 800187a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <HAL_PCD_MspInit+0xec>)
 8001886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001888:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <HAL_PCD_MspInit+0xec>)
 800188a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800188e:	6453      	str	r3, [r2, #68]	; 0x44
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <HAL_PCD_MspInit+0xec>)
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800189c:	bf00      	nop
 800189e:	37b8      	adds	r7, #184	; 0xb8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020000 	.word	0x40020000

080018ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08e      	sub	sp, #56	; 0x38
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018bc:	4b33      	ldr	r3, [pc, #204]	; (800198c <HAL_InitTick+0xe0>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	4a32      	ldr	r2, [pc, #200]	; (800198c <HAL_InitTick+0xe0>)
 80018c2:	f043 0310 	orr.w	r3, r3, #16
 80018c6:	6413      	str	r3, [r2, #64]	; 0x40
 80018c8:	4b30      	ldr	r3, [pc, #192]	; (800198c <HAL_InitTick+0xe0>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	f003 0310 	and.w	r3, r3, #16
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018d4:	f107 0210 	add.w	r2, r7, #16
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f003 f8b2 	bl	8004a48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d103      	bne.n	80018f6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018ee:	f003 f883 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 80018f2:	6378      	str	r0, [r7, #52]	; 0x34
 80018f4:	e004      	b.n	8001900 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018f6:	f003 f87f 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 80018fa:	4603      	mov	r3, r0
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001902:	4a23      	ldr	r2, [pc, #140]	; (8001990 <HAL_InitTick+0xe4>)
 8001904:	fba2 2303 	umull	r2, r3, r2, r3
 8001908:	0c9b      	lsrs	r3, r3, #18
 800190a:	3b01      	subs	r3, #1
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <HAL_InitTick+0xe8>)
 8001910:	4a21      	ldr	r2, [pc, #132]	; (8001998 <HAL_InitTick+0xec>)
 8001912:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <HAL_InitTick+0xe8>)
 8001916:	f240 32e7 	movw	r2, #999	; 0x3e7
 800191a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800191c:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <HAL_InitTick+0xe8>)
 800191e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001920:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <HAL_InitTick+0xe8>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001928:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <HAL_InitTick+0xe8>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_InitTick+0xe8>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001934:	4817      	ldr	r0, [pc, #92]	; (8001994 <HAL_InitTick+0xe8>)
 8001936:	f004 fa63 	bl	8005e00 <HAL_TIM_Base_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001940:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001944:	2b00      	cmp	r3, #0
 8001946:	d11b      	bne.n	8001980 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001948:	4812      	ldr	r0, [pc, #72]	; (8001994 <HAL_InitTick+0xe8>)
 800194a:	f004 fabb 	bl	8005ec4 <HAL_TIM_Base_Start_IT>
 800194e:	4603      	mov	r3, r0
 8001950:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001954:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001958:	2b00      	cmp	r3, #0
 800195a:	d111      	bne.n	8001980 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800195c:	2036      	movs	r0, #54	; 0x36
 800195e:	f000 fc03 	bl	8002168 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d808      	bhi.n	800197a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001968:	2200      	movs	r2, #0
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	2036      	movs	r0, #54	; 0x36
 800196e:	f000 fbdf 	bl	8002130 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <HAL_InitTick+0xf0>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	e002      	b.n	8001980 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001980:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001984:	4618      	mov	r0, r3
 8001986:	3738      	adds	r7, #56	; 0x38
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40023800 	.word	0x40023800
 8001990:	431bde83 	.word	0x431bde83
 8001994:	200019e8 	.word	0x200019e8
 8001998:	40001000 	.word	0x40001000
 800199c:	20000004 	.word	0x20000004

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <NMI_Handler+0x4>

080019a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <MemManage_Handler+0x4>

080019b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <BusFault_Handler+0x4>

080019b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <UsageFault_Handler+0x4>

080019be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <SPI1_IRQHandler+0x10>)
 80019d2:	f003 fe17 	bl	8005604 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20001314 	.word	0x20001314

080019e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <TIM6_DAC_IRQHandler+0x10>)
 80019e6:	f004 fae5 	bl	8005fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200019e8 	.word	0x200019e8

080019f4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <ETH_IRQHandler+0x10>)
 80019fa:	f000 ffe9 	bl	80029d0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000641c 	.word	0x2000641c

08001a08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return 1;
 8001a0c:	2301      	movs	r3, #1
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <_kill>:

int _kill(int pid, int sig)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <_kill+0x20>)
 8001a24:	2216      	movs	r2, #22
 8001a26:	601a      	str	r2, [r3, #0]
  return -1;
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	20011524 	.word	0x20011524

08001a3c <_exit>:

void _exit (int status)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ffe5 	bl	8001a18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a4e:	e7fe      	b.n	8001a4e <_exit+0x12>

08001a50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	e00a      	b.n	8001a78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a62:	f3af 8000 	nop.w
 8001a66:	4601      	mov	r1, r0
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	60ba      	str	r2, [r7, #8]
 8001a6e:	b2ca      	uxtb	r2, r1
 8001a70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3301      	adds	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	dbf0      	blt.n	8001a62 <_read+0x12>
  }

  return len;
 8001a80:	687b      	ldr	r3, [r7, #4]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	e009      	b.n	8001ab0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	60ba      	str	r2, [r7, #8]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3301      	adds	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dbf1      	blt.n	8001a9c <_write+0x12>
  }
  return len;
 8001ab8:	687b      	ldr	r3, [r7, #4]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_close>:

int _close(int file)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aea:	605a      	str	r2, [r3, #4]
  return 0;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <_isatty>:

int _isatty(int file)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b087      	sub	sp, #28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b34:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <_sbrk+0x5c>)
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <_sbrk+0x60>)
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <_sbrk+0x64>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <_sbrk+0x68>)
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d205      	bcs.n	8001b68 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <_sbrk+0x6c>)
 8001b5e:	220c      	movs	r2, #12
 8001b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b66:	e009      	b.n	8001b7c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a06      	ldr	r2, [pc, #24]	; (8001b90 <_sbrk+0x64>)
 8001b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	20080000 	.word	0x20080000
 8001b8c:	00000400 	.word	0x00000400
 8001b90:	20001a34 	.word	0x20001a34
 8001b94:	20011538 	.word	0x20011538
 8001b98:	20011524 	.word	0x20011524

08001b9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <SystemInit+0x20>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <SystemInit+0x20>)
 8001ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bc4:	480d      	ldr	r0, [pc, #52]	; (8001bfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bc6:	490e      	ldr	r1, [pc, #56]	; (8001c00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bc8:	4a0e      	ldr	r2, [pc, #56]	; (8001c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bcc:	e002      	b.n	8001bd4 <LoopCopyDataInit>

08001bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd2:	3304      	adds	r3, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd8:	d3f9      	bcc.n	8001bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bda:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bdc:	4c0b      	ldr	r4, [pc, #44]	; (8001c0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be0:	e001      	b.n	8001be6 <LoopFillZerobss>

08001be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be4:	3204      	adds	r2, #4

08001be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be8:	d3fb      	bcc.n	8001be2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bea:	f7ff ffd7 	bl	8001b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bee:	f01b fd75 	bl	801d6dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bf2:	f7fe ff27 	bl	8000a44 <main>
  bx  lr    
 8001bf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bf8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001c04:	08022644 	.word	0x08022644
  ldr r2, =_sbss
 8001c08:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c0c:	20011534 	.word	0x20011534

08001c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <ADC_IRQHandler>

08001c12 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00b      	beq.n	8001c3a <LAN8742_RegisterBusIO+0x28>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d007      	beq.n	8001c3a <LAN8742_RegisterBusIO+0x28>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <LAN8742_RegisterBusIO+0x28>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d102      	bne.n	8001c40 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c3e:	e014      	b.n	8001c6a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d17c      	bne.n	8001d90 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	e01c      	b.n	8001cea <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	f107 0208 	add.w	r2, r7, #8
 8001cb8:	2112      	movs	r1, #18
 8001cba:	6978      	ldr	r0, [r7, #20]
 8001cbc:	4798      	blx	r3
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	da03      	bge.n	8001ccc <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001cc4:	f06f 0304 	mvn.w	r3, #4
 8001cc8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001cca:	e00b      	b.n	8001ce4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d105      	bne.n	8001ce4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
         break;
 8001ce2:	e005      	b.n	8001cf0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2b1f      	cmp	r3, #31
 8001cee:	d9df      	bls.n	8001cb0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b1f      	cmp	r3, #31
 8001cf6:	d902      	bls.n	8001cfe <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001cf8:	f06f 0302 	mvn.w	r3, #2
 8001cfc:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d145      	bne.n	8001d90 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6810      	ldr	r0, [r2, #0]
 8001d0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d10:	2100      	movs	r1, #0
 8001d12:	4798      	blx	r3
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db37      	blt.n	8001d8a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6810      	ldr	r0, [r2, #0]
 8001d22:	f107 0208 	add.w	r2, r7, #8
 8001d26:	2100      	movs	r1, #0
 8001d28:	4798      	blx	r3
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db28      	blt.n	8001d82 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4798      	blx	r3
 8001d36:	4603      	mov	r3, r0
 8001d38:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001d3a:	e01c      	b.n	8001d76 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	4798      	blx	r3
 8001d42:	4603      	mov	r3, r0
 8001d44:	461a      	mov	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d4e:	d80e      	bhi.n	8001d6e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6810      	ldr	r0, [r2, #0]
 8001d58:	f107 0208 	add.w	r2, r7, #8
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4798      	blx	r3
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	da07      	bge.n	8001d76 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001d66:	f06f 0304 	mvn.w	r3, #4
 8001d6a:	613b      	str	r3, [r7, #16]
                 break;
 8001d6c:	e010      	b.n	8001d90 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001d6e:	f06f 0301 	mvn.w	r3, #1
 8001d72:	613b      	str	r3, [r7, #16]
               break;
 8001d74:	e00c      	b.n	8001d90 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1dd      	bne.n	8001d3c <LAN8742_Init+0xc6>
 8001d80:	e006      	b.n	8001d90 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001d82:	f06f 0304 	mvn.w	r3, #4
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	e002      	b.n	8001d90 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001d8a:	f06f 0303 	mvn.w	r3, #3
 8001d8e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d112      	bne.n	8001dbc <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	4798      	blx	r3
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001da0:	bf00      	nop
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	4798      	blx	r3
 8001da8:	4603      	mov	r3, r0
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001db4:	d9f5      	bls.n	8001da2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001dbc:	693b      	ldr	r3, [r7, #16]
 }
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6810      	ldr	r0, [r2, #0]
 8001dda:	f107 020c 	add.w	r2, r7, #12
 8001dde:	2101      	movs	r1, #1
 8001de0:	4798      	blx	r3
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	da02      	bge.n	8001dee <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001de8:	f06f 0304 	mvn.w	r3, #4
 8001dec:	e06e      	b.n	8001ecc <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6810      	ldr	r0, [r2, #0]
 8001df6:	f107 020c 	add.w	r2, r7, #12
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4798      	blx	r3
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	da02      	bge.n	8001e0a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001e04:	f06f 0304 	mvn.w	r3, #4
 8001e08:	e060      	b.n	8001ecc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001e14:	2301      	movs	r3, #1
 8001e16:	e059      	b.n	8001ecc <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6810      	ldr	r0, [r2, #0]
 8001e20:	f107 020c 	add.w	r2, r7, #12
 8001e24:	2100      	movs	r1, #0
 8001e26:	4798      	blx	r3
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	da02      	bge.n	8001e34 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001e2e:	f06f 0304 	mvn.w	r3, #4
 8001e32:	e04b      	b.n	8001ecc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d11b      	bne.n	8001e76 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d006      	beq.n	8001e56 <LAN8742_GetLinkState+0x90>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001e52:	2302      	movs	r3, #2
 8001e54:	e03a      	b.n	8001ecc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e033      	b.n	8001ecc <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001e6e:	2304      	movs	r3, #4
 8001e70:	e02c      	b.n	8001ecc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001e72:	2305      	movs	r3, #5
 8001e74:	e02a      	b.n	8001ecc <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6810      	ldr	r0, [r2, #0]
 8001e7e:	f107 020c 	add.w	r2, r7, #12
 8001e82:	211f      	movs	r1, #31
 8001e84:	4798      	blx	r3
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	da02      	bge.n	8001e92 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001e8c:	f06f 0304 	mvn.w	r3, #4
 8001e90:	e01c      	b.n	8001ecc <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001e9c:	2306      	movs	r3, #6
 8001e9e:	e015      	b.n	8001ecc <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 031c 	and.w	r3, r3, #28
 8001ea6:	2b18      	cmp	r3, #24
 8001ea8:	d101      	bne.n	8001eae <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e00e      	b.n	8001ecc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f003 031c 	and.w	r3, r3, #28
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d101      	bne.n	8001ebc <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e007      	b.n	8001ecc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 031c 	and.w	r3, r3, #28
 8001ec2:	2b14      	cmp	r3, #20
 8001ec4:	d101      	bne.n	8001eca <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	e000      	b.n	8001ecc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001eca:	2305      	movs	r3, #5
    }				
  }
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed8:	2003      	movs	r0, #3
 8001eda:	f000 f91e 	bl	800211a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ede:	200f      	movs	r0, #15
 8001ee0:	f7ff fce4 	bl	80018ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee4:	f7ff fb50 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_IncTick+0x20>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_IncTick+0x24>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_IncTick+0x24>)
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000008 	.word	0x20000008
 8001f14:	20001a38 	.word	0x20001a38

08001f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_GetTick+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20001a38 	.word	0x20001a38

08001f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f38:	f7ff ffee 	bl	8001f18 <HAL_GetTick>
 8001f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f48:	d005      	beq.n	8001f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_Delay+0x44>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f56:	bf00      	nop
 8001f58:	f7ff ffde 	bl	8001f18 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d8f7      	bhi.n	8001f58 <HAL_Delay+0x28>
  {
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000008 	.word	0x20000008

08001f78 <__NVIC_SetPriorityGrouping>:
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f94:	4013      	ands	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa6:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	60d3      	str	r3, [r2, #12]
}
 8001fac:	bf00      	nop
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00
 8001fbc:	05fa0000 	.word	0x05fa0000

08001fc0 <__NVIC_GetPriorityGrouping>:
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 0307 	and.w	r3, r3, #7
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_EnableIRQ>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	db0b      	blt.n	8002006 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	f003 021f 	and.w	r2, r3, #31
 8001ff4:	4907      	ldr	r1, [pc, #28]	; (8002014 <__NVIC_EnableIRQ+0x38>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000e100 	.word	0xe000e100

08002018 <__NVIC_DisableIRQ>:
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	2b00      	cmp	r3, #0
 8002028:	db12      	blt.n	8002050 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	f003 021f 	and.w	r2, r3, #31
 8002030:	490a      	ldr	r1, [pc, #40]	; (800205c <__NVIC_DisableIRQ+0x44>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	2001      	movs	r0, #1
 800203a:	fa00 f202 	lsl.w	r2, r0, r2
 800203e:	3320      	adds	r3, #32
 8002040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002044:	f3bf 8f4f 	dsb	sy
}
 8002048:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800204a:	f3bf 8f6f 	isb	sy
}
 800204e:	bf00      	nop
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000e100 	.word	0xe000e100

08002060 <__NVIC_SetPriority>:
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	db0a      	blt.n	800208a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	490c      	ldr	r1, [pc, #48]	; (80020ac <__NVIC_SetPriority+0x4c>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	440b      	add	r3, r1
 8002084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002088:	e00a      	b.n	80020a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4908      	ldr	r1, [pc, #32]	; (80020b0 <__NVIC_SetPriority+0x50>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	3b04      	subs	r3, #4
 8002098:	0112      	lsls	r2, r2, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	440b      	add	r3, r1
 800209e:	761a      	strb	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <NVIC_EncodePriority>:
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f1c3 0307 	rsb	r3, r3, #7
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	bf28      	it	cs
 80020d2:	2304      	movcs	r3, #4
 80020d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3304      	adds	r3, #4
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d902      	bls.n	80020e4 <NVIC_EncodePriority+0x30>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3b03      	subs	r3, #3
 80020e2:	e000      	b.n	80020e6 <NVIC_EncodePriority+0x32>
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	401a      	ands	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	43d9      	mvns	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	4313      	orrs	r3, r2
}
 800210e:	4618      	mov	r0, r3
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ff28 	bl	8001f78 <__NVIC_SetPriorityGrouping>
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002142:	f7ff ff3d 	bl	8001fc0 <__NVIC_GetPriorityGrouping>
 8002146:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	6978      	ldr	r0, [r7, #20]
 800214e:	f7ff ffb1 	bl	80020b4 <NVIC_EncodePriority>
 8002152:	4602      	mov	r2, r0
 8002154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ff80 	bl	8002060 <__NVIC_SetPriority>
}
 8002160:	bf00      	nop
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff30 	bl	8001fdc <__NVIC_EnableIRQ>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ff40 	bl	8002018 <__NVIC_DisableIRQ>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80021a4:	f3bf 8f5f 	dmb	sy
}
 80021a8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <HAL_MPU_Disable+0x28>)
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	4a06      	ldr	r2, [pc, #24]	; (80021c8 <HAL_MPU_Disable+0x28>)
 80021b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b4:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_MPU_Disable+0x2c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	605a      	str	r2, [r3, #4]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00
 80021cc:	e000ed90 	.word	0xe000ed90

080021d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80021d8:	4a0b      	ldr	r2, [pc, #44]	; (8002208 <HAL_MPU_Enable+0x38>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_MPU_Enable+0x3c>)
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <HAL_MPU_Enable+0x3c>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80021ee:	f3bf 8f4f 	dsb	sy
}
 80021f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021f4:	f3bf 8f6f 	isb	sy
}
 80021f8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000ed90 	.word	0xe000ed90
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	785a      	ldrb	r2, [r3, #1]
 800221c:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_MPU_ConfigRegion+0x84>)
 800221e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d029      	beq.n	800227c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8002228:	4a1a      	ldr	r2, [pc, #104]	; (8002294 <HAL_MPU_ConfigRegion+0x84>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7b1b      	ldrb	r3, [r3, #12]
 8002234:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7adb      	ldrb	r3, [r3, #11]
 800223a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800223c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	7a9b      	ldrb	r3, [r3, #10]
 8002242:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002244:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7b5b      	ldrb	r3, [r3, #13]
 800224a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800224c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	7b9b      	ldrb	r3, [r3, #14]
 8002252:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002254:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7bdb      	ldrb	r3, [r3, #15]
 800225a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800225c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	7a5b      	ldrb	r3, [r3, #9]
 8002262:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002264:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	7a1b      	ldrb	r3, [r3, #8]
 800226a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800226c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	7812      	ldrb	r2, [r2, #0]
 8002272:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002274:	4a07      	ldr	r2, [pc, #28]	; (8002294 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002276:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002278:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800227a:	e005      	b.n	8002288 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_MPU_ConfigRegion+0x84>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002282:	4b04      	ldr	r3, [pc, #16]	; (8002294 <HAL_MPU_ConfigRegion+0x84>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000ed90 	.word	0xe000ed90

08002298 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d004      	beq.n	80022b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2280      	movs	r2, #128	; 0x80
 80022b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00c      	b.n	80022d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2205      	movs	r2, #5
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0201 	bic.w	r2, r2, #1
 80022cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e06a      	b.n	80023c4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d106      	bne.n	8002306 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2223      	movs	r2, #35	; 0x23
 80022fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f005 fbd1 	bl	8007aa8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002306:	4b31      	ldr	r3, [pc, #196]	; (80023cc <HAL_ETH_Init+0xf0>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	4a30      	ldr	r2, [pc, #192]	; (80023cc <HAL_ETH_Init+0xf0>)
 800230c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002310:	6453      	str	r3, [r2, #68]	; 0x44
 8002312:	4b2e      	ldr	r3, [pc, #184]	; (80023cc <HAL_ETH_Init+0xf0>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800231e:	4b2c      	ldr	r3, [pc, #176]	; (80023d0 <HAL_ETH_Init+0xf4>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4a2b      	ldr	r2, [pc, #172]	; (80023d0 <HAL_ETH_Init+0xf4>)
 8002324:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002328:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800232a:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <HAL_ETH_Init+0xf4>)
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	4927      	ldr	r1, [pc, #156]	; (80023d0 <HAL_ETH_Init+0xf4>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002338:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <HAL_ETH_Init+0xf4>)
 800233a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002352:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002354:	f7ff fde0 	bl	8001f18 <HAL_GetTick>
 8002358:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800235a:	e011      	b.n	8002380 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800235c:	f7ff fddc 	bl	8001f18 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800236a:	d909      	bls.n	8002380 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2204      	movs	r2, #4
 8002370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	22e0      	movs	r2, #224	; 0xe0
 8002378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e021      	b.n	80023c4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1e4      	bne.n	800235c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 ff4c 	bl	8003230 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fff3 	bl	8003384 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f001 f849 	bl	8003436 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	461a      	mov	r2, r3
 80023aa:	2100      	movs	r1, #0
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 ffb1 	bl	8003314 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2210      	movs	r2, #16
 80023be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40013800 	.word	0x40013800

080023d4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023e2:	2b10      	cmp	r3, #16
 80023e4:	d17b      	bne.n	80024de <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2223      	movs	r2, #35	; 0x23
 80023ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8002402:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b35      	ldr	r3, [pc, #212]	; (80024e8 <HAL_ETH_Start_IT+0x114>)
 8002412:	430b      	orrs	r3, r1
 8002414:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8002428:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2204      	movs	r2, #4
 8002430:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f9fc 	bl	8002830 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0208 	orr.w	r2, r2, #8
 8002446:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002450:	2001      	movs	r0, #1
 8002452:	f7ff fd6d 	bl	8001f30 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0204 	orr.w	r2, r2, #4
 800246c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002476:	2001      	movs	r0, #1
 8002478:	f7ff fd5a 	bl	8001f30 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 fd74 	bl	8002f72 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800249c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024a0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	f043 0302 	orr.w	r3, r3, #2
 80024b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024b8:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c2:	69d9      	ldr	r1, [r3, #28]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_ETH_Start_IT+0x118>)
 80024ca:	430b      	orrs	r3, r1
 80024cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024d0:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2223      	movs	r2, #35	; 0x23
 80024d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e000      	b.n	80024e0 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
  }
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	00020060 	.word	0x00020060
 80024ec:	0001a0c1 	.word	0x0001a0c1

080024f0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024fe:	2b23      	cmp	r3, #35	; 0x23
 8002500:	d16e      	bne.n	80025e0 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2223      	movs	r2, #35	; 0x23
 8002506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002512:	69d9      	ldr	r1, [r3, #28]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b34      	ldr	r3, [pc, #208]	; (80025ec <HAL_ETH_Stop_IT+0xfc>)
 800251a:	400b      	ands	r3, r1
 800251c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002520:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002534:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002538:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	f023 0302 	bic.w	r3, r3, #2
 800254c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002550:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0204 	bic.w	r2, r2, #4
 8002560:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800256a:	2001      	movs	r0, #1
 800256c:	f7ff fce0 	bl	8001f30 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 fcfa 	bl	8002f72 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0208 	bic.w	r2, r2, #8
 800258c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002596:	2001      	movs	r0, #1
 8002598:	f7ff fcca 	bl	8001f30 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	e00e      	b.n	80025c8 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	3212      	adds	r2, #18
 80025b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b4:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3301      	adds	r3, #1
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d9ed      	bls.n	80025aa <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2210      	movs	r2, #16
 80025d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	e000      	b.n	80025e2 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
  }
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	fffe5f3e 	.word	0xfffe5f3e

080025f0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d109      	bne.n	8002614 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002606:	f043 0201 	orr.w	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e045      	b.n	80026a0 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800261a:	2b23      	cmp	r3, #35	; 0x23
 800261c:	d13f      	bne.n	800269e <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002626:	2201      	movs	r2, #1
 8002628:	6839      	ldr	r1, [r7, #0]
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 ff70 	bl	8003510 <ETH_Prepare_Tx_Descriptors>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d009      	beq.n	800264a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263c:	f043 0202 	orr.w	r2, r3, #2
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e02a      	b.n	80026a0 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 800264a:	f3bf 8f4f 	dsb	sy
}
 800264e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	629a      	str	r2, [r3, #40]	; 0x28
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265e:	2b03      	cmp	r3, #3
 8002660:	d904      	bls.n	800266c <HAL_ETH_Transmit_IT+0x7c>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	1f1a      	subs	r2, r3, #4
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00d      	beq.n	800269a <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002686:	461a      	mov	r2, r3
 8002688:	2304      	movs	r3, #4
 800268a:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002694:	461a      	mov	r2, r3
 8002696:	2300      	movs	r3, #0
 8002698:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
  }
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d109      	bne.n	80026d4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	f043 0201 	orr.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0a8      	b.n	8002826 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026da:	2b23      	cmp	r3, #35	; 0x23
 80026dc:	d001      	beq.n	80026e2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e0a1      	b.n	8002826 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	3212      	adds	r2, #18
 80026ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026f8:	f1c3 0304 	rsb	r3, r3, #4
 80026fc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80026fe:	e06a      	b.n	80027d6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	699a      	ldr	r2, [r3, #24]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	69da      	ldr	r2, [r3, #28]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002724:	2b00      	cmp	r3, #0
 8002726:	d103      	bne.n	8002730 <HAL_ETH_ReadData+0x88>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d040      	beq.n	80027b2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00c      	beq.n	8002774 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	0c1b      	lsrs	r3, r3, #16
 8002760:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002764:	3b04      	subs	r3, #4
 8002766:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800278c:	461a      	mov	r2, r3
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	b29b      	uxth	r3, r3
 8002792:	f005 fb55 	bl	8007e40 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	441a      	add	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2200      	movs	r2, #0
 80027b0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3301      	adds	r3, #1
 80027b6:	61fb      	str	r3, [r7, #28]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d902      	bls.n	80027c4 <HAL_ETH_ReadData+0x11c>
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3b04      	subs	r3, #4
 80027c2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	3212      	adds	r2, #18
 80027ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ce:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3301      	adds	r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	db06      	blt.n	80027ec <HAL_ETH_ReadData+0x144>
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d202      	bcs.n	80027ec <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d089      	beq.n	8002700 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	441a      	add	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f815 	bl	8002830 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d108      	bne.n	8002824 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	e000      	b.n	8002826 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
}
 8002826:	4618      	mov	r0, r3
 8002828:	3720      	adds	r7, #32
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800283c:	2301      	movs	r3, #1
 800283e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002844:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	3212      	adds	r2, #18
 800284c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002850:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002856:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002858:	e040      	b.n	80028dc <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d112      	bne.n	8002888 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002862:	f107 030c 	add.w	r3, r7, #12
 8002866:	4618      	mov	r0, r3
 8002868:	f005 faba 	bl	8007de0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d102      	bne.n	8002878 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	74fb      	strb	r3, [r7, #19]
 8002876:	e007      	b.n	8002888 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	461a      	mov	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	461a      	mov	r2, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002888:	7cfb      	ldrb	r3, [r7, #19]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d026      	beq.n	80028dc <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	2b00      	cmp	r3, #0
 8002894:	d103      	bne.n	800289e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	4a1e      	ldr	r2, [pc, #120]	; (8002914 <ETH_UpdateDescriptor+0xe4>)
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	e003      	b.n	80028a6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80028a4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 80028a6:	f3bf 8f5f 	dmb	sy
}
 80028aa:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	3301      	adds	r3, #1
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d902      	bls.n	80028ca <ETH_UpdateDescriptor+0x9a>
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	3b04      	subs	r3, #4
 80028c8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	3212      	adds	r2, #18
 80028d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d4:	617b      	str	r3, [r7, #20]
      desccount--;
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	3b01      	subs	r3, #1
 80028da:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <ETH_UpdateDescriptor+0xb8>
 80028e2:	7cfb      	ldrb	r3, [r7, #19]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1b8      	bne.n	800285a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d00c      	beq.n	800290c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028fa:	461a      	mov	r2, r3
 80028fc:	2300      	movs	r3, #0
 80028fe:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800290c:	bf00      	nop
 800290e:	3720      	adds	r7, #32
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	80004600 	.word	0x80004600

08002918 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3318      	adds	r3, #24
 8002924:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002932:	2301      	movs	r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002936:	e03f      	b.n	80029b8 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002938:	2301      	movs	r3, #1
 800293a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	3b01      	subs	r3, #1
 8002940:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	3304      	adds	r3, #4
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	3301      	adds	r3, #1
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002960:	7bbb      	ldrb	r3, [r7, #14]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d028      	beq.n	80029b8 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68d9      	ldr	r1, [r3, #12]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	440b      	add	r3, r1
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	db1b      	blt.n	80029b4 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	3304      	adds	r3, #4
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4618      	mov	r0, r3
 800298a:	f005 fa9b 	bl	8007ec4 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	3304      	adds	r3, #4
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	2200      	movs	r2, #0
 800299a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	3301      	adds	r3, #1
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80029b2:	e001      	b.n	80029b8 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <HAL_ETH_ReleaseTxPacket+0xac>
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1b9      	bne.n	8002938 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	d112      	bne.n	8002a10 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f8:	2b40      	cmp	r3, #64	; 0x40
 80029fa:	d109      	bne.n	8002a10 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b50      	ldr	r3, [pc, #320]	; (8002b48 <HAL_ETH_IRQHandler+0x178>)
 8002a08:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f004 fdb0 	bl	8007570 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d113      	bne.n	8002a4a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d10a      	bne.n	8002a4a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002a42:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f004 fda3 	bl	8007590 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a5c:	d14c      	bne.n	8002af8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a70:	d142      	bne.n	8002af8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a78:	f043 0208 	orr.w	r2, r3, #8
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a94:	d11a      	bne.n	8002acc <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a9e:	695a      	ldr	r2, [r3, #20]
 8002aa0:	4b2a      	ldr	r3, [pc, #168]	; (8002b4c <HAL_ETH_IRQHandler+0x17c>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002abc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ac0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	22e0      	movs	r2, #224	; 0xe0
 8002ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002aca:	e012      	b.n	8002af2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	f248 6380 	movw	r3, #34432	; 0x8680
 8002ada:	4013      	ands	r3, r2
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aea:	461a      	mov	r2, r3
 8002aec:	f248 6380 	movw	r3, #34432	; 0x8680
 8002af0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f004 fd5c 	bl	80075b0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d10e      	bne.n	8002b24 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f81c 	bl	8002b54 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002b24:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <HAL_ETH_IRQHandler+0x180>)
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d006      	beq.n	8002b3e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002b30:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <HAL_ETH_IRQHandler+0x180>)
 8002b32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002b36:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f815 	bl	8002b68 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	00010040 	.word	0x00010040
 8002b4c:	007e2000 	.word	0x007e2000
 8002b50:	40013c00 	.word	0x40013c00

08002b54 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f003 031c 	and.w	r3, r3, #28
 8002b98:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	02db      	lsls	r3, r3, #11
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	019b      	lsls	r3, r3, #6
 8002baa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f023 0302 	bic.w	r3, r3, #2
 8002bba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002bcc:	f7ff f9a4 	bl	8001f18 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002bd2:	e00d      	b.n	8002bf0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002bd4:	f7ff f9a0 	bl	8001f18 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be2:	d301      	bcc.n	8002be8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e010      	b.n	8002c0a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ec      	bne.n	8002bd4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	461a      	mov	r2, r3
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
 8002c1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f003 031c 	and.w	r3, r3, #28
 8002c2e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	02db      	lsls	r3, r3, #11
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	019b      	lsls	r3, r3, #6
 8002c40:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c6c:	f7ff f954 	bl	8001f18 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c72:	e00d      	b.n	8002c90 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002c74:	f7ff f950 	bl	8001f18 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c82:	d301      	bcc.n	8002c88 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e009      	b.n	8002c9c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1ec      	bne.n	8002c74 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0d9      	b.n	8002e6c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	bf14      	ite	ne
 8002cc6:	2301      	movne	r3, #1
 8002cc8:	2300      	moveq	r3, #0
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf0c      	ite	eq
 8002cf0:	2301      	moveq	r3, #1
 8002cf2:	2300      	movne	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	bf14      	ite	ne
 8002d0c:	2301      	movne	r3, #1
 8002d0e:	2300      	moveq	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	bf0c      	ite	eq
 8002d26:	2301      	moveq	r3, #1
 8002d28:	2300      	movne	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf14      	ite	ne
 8002d40:	2301      	movne	r3, #1
 8002d42:	2300      	moveq	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	bf0c      	ite	eq
 8002d76:	2301      	moveq	r3, #1
 8002d78:	2300      	movne	r3, #0
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	bf14      	ite	ne
 8002daa:	2301      	movne	r3, #1
 8002dac:	2300      	moveq	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	461a      	mov	r2, r3
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bf14      	ite	ne
 8002dd2:	2301      	movne	r3, #1
 8002dd4:	2300      	moveq	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	0c1b      	lsrs	r3, r3, #16
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf14      	ite	ne
 8002e40:	2301      	movne	r3, #1
 8002e42:	2300      	moveq	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf14      	ite	ne
 8002e5c:	2301      	movne	r3, #1
 8002e5e:	2300      	moveq	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e00b      	b.n	8002ea4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e92:	2b10      	cmp	r3, #16
 8002e94:	d105      	bne.n	8002ea2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002e96:	6839      	ldr	r1, [r7, #0]
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f88f 	bl	8002fbc <ETH_SetMACConfig>

    return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	e000      	b.n	8002ea4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
  }
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 031c 	bic.w	r3, r3, #28
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002ec4:	f001 fd8c 	bl	80049e0 <HAL_RCC_GetHCLKFreq>
 8002ec8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	4a1d      	ldr	r2, [pc, #116]	; (8002f44 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d908      	bls.n	8002ee4 <HAL_ETH_SetMDIOClockRange+0x38>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d804      	bhi.n	8002ee4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f043 0308 	orr.w	r3, r3, #8
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	e027      	b.n	8002f34 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4a18      	ldr	r2, [pc, #96]	; (8002f48 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d908      	bls.n	8002efe <HAL_ETH_SetMDIOClockRange+0x52>
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4a17      	ldr	r2, [pc, #92]	; (8002f4c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d204      	bcs.n	8002efe <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f043 030c 	orr.w	r3, r3, #12
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	e01a      	b.n	8002f34 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	4a12      	ldr	r2, [pc, #72]	; (8002f4c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d303      	bcc.n	8002f0e <HAL_ETH_SetMDIOClockRange+0x62>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4a11      	ldr	r2, [pc, #68]	; (8002f50 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d911      	bls.n	8002f32 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4a0f      	ldr	r2, [pc, #60]	; (8002f50 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d908      	bls.n	8002f28 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4a0e      	ldr	r2, [pc, #56]	; (8002f54 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d804      	bhi.n	8002f28 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	e005      	b.n	8002f34 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f043 0310 	orr.w	r3, r3, #16
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	e000      	b.n	8002f34 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002f32:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	01312cff 	.word	0x01312cff
 8002f48:	02160ebf 	.word	0x02160ebf
 8002f4c:	03938700 	.word	0x03938700
 8002f50:	05f5e0ff 	.word	0x05f5e0ff
 8002f54:	08f0d17f 	.word	0x08f0d17f

08002f58 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f94:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	f7fe ffc4 	bl	8001f30 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fb2:	6193      	str	r3, [r2, #24]
}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4b51      	ldr	r3, [pc, #324]	; (8003118 <ETH_SetMACConfig+0x15c>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	7c1b      	ldrb	r3, [r3, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d102      	bne.n	8002fe4 <ETH_SetMACConfig+0x28>
 8002fde:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002fe2:	e000      	b.n	8002fe6 <ETH_SetMACConfig+0x2a>
 8002fe4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	7c5b      	ldrb	r3, [r3, #17]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <ETH_SetMACConfig+0x38>
 8002fee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ff2:	e000      	b.n	8002ff6 <ETH_SetMACConfig+0x3a>
 8002ff4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ff6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ffc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	7fdb      	ldrb	r3, [r3, #31]
 8003002:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003004:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800300a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	7f92      	ldrb	r2, [r2, #30]
 8003010:	2a00      	cmp	r2, #0
 8003012:	d102      	bne.n	800301a <ETH_SetMACConfig+0x5e>
 8003014:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003018:	e000      	b.n	800301c <ETH_SetMACConfig+0x60>
 800301a:	2200      	movs	r2, #0
                        macconf->Speed |
 800301c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	7f1b      	ldrb	r3, [r3, #28]
 8003022:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003024:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800302a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	791b      	ldrb	r3, [r3, #4]
 8003030:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003032:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	f892 2020 	ldrb.w	r2, [r2, #32]
 800303a:	2a00      	cmp	r2, #0
 800303c:	d102      	bne.n	8003044 <ETH_SetMACConfig+0x88>
 800303e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003042:	e000      	b.n	8003046 <ETH_SetMACConfig+0x8a>
 8003044:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003046:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	7bdb      	ldrb	r3, [r3, #15]
 800304c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800304e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003054:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800305c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800305e:	4313      	orrs	r3, r2
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003076:	2001      	movs	r0, #1
 8003078:	f7fe ff5a 	bl	8001f30 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003092:	4013      	ands	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80030a2:	2a00      	cmp	r2, #0
 80030a4:	d101      	bne.n	80030aa <ETH_SetMACConfig+0xee>
 80030a6:	2280      	movs	r2, #128	; 0x80
 80030a8:	e000      	b.n	80030ac <ETH_SetMACConfig+0xf0>
 80030aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80030ac:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80030b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80030ba:	2a01      	cmp	r2, #1
 80030bc:	d101      	bne.n	80030c2 <ETH_SetMACConfig+0x106>
 80030be:	2208      	movs	r2, #8
 80030c0:	e000      	b.n	80030c4 <ETH_SetMACConfig+0x108>
 80030c2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80030c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80030cc:	2a01      	cmp	r2, #1
 80030ce:	d101      	bne.n	80030d4 <ETH_SetMACConfig+0x118>
 80030d0:	2204      	movs	r2, #4
 80030d2:	e000      	b.n	80030d6 <ETH_SetMACConfig+0x11a>
 80030d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80030d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80030de:	2a01      	cmp	r2, #1
 80030e0:	d101      	bne.n	80030e6 <ETH_SetMACConfig+0x12a>
 80030e2:	2202      	movs	r2, #2
 80030e4:	e000      	b.n	80030e8 <ETH_SetMACConfig+0x12c>
 80030e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80030e8:	4313      	orrs	r3, r2
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003100:	2001      	movs	r0, #1
 8003102:	f7fe ff15 	bl	8001f30 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	619a      	str	r2, [r3, #24]
}
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	ff20810f 	.word	0xff20810f

0800311c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4b3d      	ldr	r3, [pc, #244]	; (800322c <ETH_SetDMAConfig+0x110>)
 8003136:	4013      	ands	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	7b1b      	ldrb	r3, [r3, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <ETH_SetDMAConfig+0x2c>
 8003142:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003146:	e000      	b.n	800314a <ETH_SetDMAConfig+0x2e>
 8003148:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	7b5b      	ldrb	r3, [r3, #13]
 800314e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003150:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	7f52      	ldrb	r2, [r2, #29]
 8003156:	2a00      	cmp	r2, #0
 8003158:	d102      	bne.n	8003160 <ETH_SetDMAConfig+0x44>
 800315a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800315e:	e000      	b.n	8003162 <ETH_SetDMAConfig+0x46>
 8003160:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003162:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	7b9b      	ldrb	r3, [r3, #14]
 8003168:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800316a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003170:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	7f1b      	ldrb	r3, [r3, #28]
 8003176:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003178:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	7f9b      	ldrb	r3, [r3, #30]
 800317e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003180:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003186:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800318e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003190:	4313      	orrs	r3, r2
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4313      	orrs	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031a0:	461a      	mov	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031b2:	2001      	movs	r0, #1
 80031b4:	f7fe febc 	bl	8001f30 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031c0:	461a      	mov	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	791b      	ldrb	r3, [r3, #4]
 80031ca:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031d0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80031d6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80031dc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031e4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80031e6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80031ee:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80031f4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003202:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003210:	2001      	movs	r0, #1
 8003212:	f7fe fe8d 	bl	8001f30 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800321e:	461a      	mov	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6013      	str	r3, [r2, #0]
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	f8de3f23 	.word	0xf8de3f23

08003230 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b0a6      	sub	sp, #152	; 0x98
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003238:	2301      	movs	r3, #1
 800323a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800323e:	2301      	movs	r3, #1
 8003240:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003244:	2300      	movs	r3, #0
 8003246:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003248:	2300      	movs	r3, #0
 800324a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800324e:	2301      	movs	r3, #1
 8003250:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003254:	2300      	movs	r3, #0
 8003256:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800325a:	2301      	movs	r3, #1
 800325c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003260:	2300      	movs	r3, #0
 8003262:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003266:	2300      	movs	r3, #0
 8003268:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800326c:	2300      	movs	r3, #0
 800326e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003270:	2300      	movs	r3, #0
 8003272:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003276:	2300      	movs	r3, #0
 8003278:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800327a:	2300      	movs	r3, #0
 800327c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003280:	2300      	movs	r3, #0
 8003282:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003286:	2300      	movs	r3, #0
 8003288:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800328c:	2300      	movs	r3, #0
 800328e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003292:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003296:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003298:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800329c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800329e:	2300      	movs	r3, #0
 80032a0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80032a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032a8:	4619      	mov	r1, r3
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff fe86 	bl	8002fbc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80032b0:	2301      	movs	r3, #1
 80032b2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80032b4:	2301      	movs	r3, #1
 80032b6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80032b8:	2301      	movs	r3, #1
 80032ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80032be:	2301      	movs	r3, #1
 80032c0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80032cc:	2300      	movs	r3, #0
 80032ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80032d2:	2300      	movs	r3, #0
 80032d4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80032dc:	2301      	movs	r3, #1
 80032de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80032e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032e4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80032e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032ea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80032ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032f0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003300:	f107 0308 	add.w	r3, r7, #8
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ff08 	bl	800311c <ETH_SetDMAConfig>
}
 800330c:	bf00      	nop
 800330e:	3798      	adds	r7, #152	; 0x98
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3305      	adds	r3, #5
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	3204      	adds	r2, #4
 800332c:	7812      	ldrb	r2, [r2, #0]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	4b11      	ldr	r3, [pc, #68]	; (800337c <ETH_MACAddressConfig+0x68>)
 8003336:	4413      	add	r3, r2
 8003338:	461a      	mov	r2, r3
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3303      	adds	r3, #3
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	061a      	lsls	r2, r3, #24
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3302      	adds	r3, #2
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	041b      	lsls	r3, r3, #16
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3301      	adds	r3, #1
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	4313      	orrs	r3, r2
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	7812      	ldrb	r2, [r2, #0]
 800335e:	4313      	orrs	r3, r2
 8003360:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <ETH_MACAddressConfig+0x6c>)
 8003366:	4413      	add	r3, r2
 8003368:	461a      	mov	r2, r3
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	6013      	str	r3, [r2, #0]
}
 800336e:	bf00      	nop
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40028040 	.word	0x40028040
 8003380:	40028044 	.word	0x40028044

08003384 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	e03e      	b.n	8003410 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68d9      	ldr	r1, [r3, #12]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	440b      	add	r3, r1
 80033a2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2200      	movs	r2, #0
 80033ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2200      	movs	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2200      	movs	r2, #0
 80033ba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	3206      	adds	r2, #6
 80033c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d80c      	bhi.n	80033f4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68d9      	ldr	r1, [r3, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	440b      	add	r3, r1
 80033ec:	461a      	mov	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	60da      	str	r2, [r3, #12]
 80033f2:	e004      	b.n	80033fe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	461a      	mov	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	3301      	adds	r3, #1
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b03      	cmp	r3, #3
 8003414:	d9bd      	bls.n	8003392 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003428:	611a      	str	r2, [r3, #16]
}
 800342a:	bf00      	nop
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003436:	b480      	push	{r7}
 8003438:	b085      	sub	sp, #20
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	e046      	b.n	80034d2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6919      	ldr	r1, [r3, #16]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	440b      	add	r3, r1
 8003454:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2200      	movs	r2, #0
 8003460:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2200      	movs	r2, #0
 8003466:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2200      	movs	r2, #0
 800346c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2200      	movs	r2, #0
 8003472:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2200      	movs	r2, #0
 8003478:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003480:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8003488:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	3212      	adds	r2, #18
 800349e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d80c      	bhi.n	80034c2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6919      	ldr	r1, [r3, #16]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	440b      	add	r3, r1
 80034ba:	461a      	mov	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	60da      	str	r2, [r3, #12]
 80034c0:	e004      	b.n	80034cc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	461a      	mov	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	3301      	adds	r3, #1
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d9b5      	bls.n	8003444 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003502:	60da      	str	r2, [r3, #12]
}
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003510:	b480      	push	{r7}
 8003512:	b08d      	sub	sp, #52	; 0x34
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	3318      	adds	r3, #24
 8003520:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800353a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800354e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003552:	d007      	beq.n	8003564 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	3304      	adds	r3, #4
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003564:	2302      	movs	r3, #2
 8003566:	e0ff      	b.n	8003768 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	3301      	adds	r3, #1
 800356c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	4b7d      	ldr	r3, [pc, #500]	; (8003774 <ETH_Prepare_Tx_Descriptors+0x264>)
 800357e:	4013      	ands	r3, r2
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	6852      	ldr	r2, [r2, #4]
 8003584:	431a      	orrs	r2, r3
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d008      	beq.n	80035a8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	431a      	orrs	r2, r3
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80035ea:	f3bf 8f5f 	dmb	sy
}
 80035ee:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80035fc:	e082      	b.n	8003704 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d006      	beq.n	800361e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	e005      	b.n	800362a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362c:	3301      	adds	r3, #1
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	2b03      	cmp	r3, #3
 8003634:	d902      	bls.n	800363c <ETH_Prepare_Tx_Descriptors+0x12c>
 8003636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003638:	3b04      	subs	r3, #4
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003644:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800365a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800365e:	d007      	beq.n	8003670 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003664:	3304      	adds	r3, #4
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d029      	beq.n	80036c4 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800367c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800367e:	2300      	movs	r3, #0
 8003680:	62bb      	str	r3, [r7, #40]	; 0x28
 8003682:	e019      	b.n	80036b8 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8003684:	f3bf 8f5f 	dmb	sy
}
 8003688:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003698:	3301      	adds	r3, #1
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d902      	bls.n	80036a8 <ETH_Prepare_Tx_Descriptors+0x198>
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	3b04      	subs	r3, #4
 80036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	3301      	adds	r3, #1
 80036b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80036b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	429a      	cmp	r2, r3
 80036be:	d3e1      	bcc.n	8003684 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80036c0:	2302      	movs	r3, #2
 80036c2:	e051      	b.n	8003768 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	3301      	adds	r3, #1
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	4b25      	ldr	r3, [pc, #148]	; (8003774 <ETH_Prepare_Tx_Descriptors+0x264>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	6852      	ldr	r2, [r2, #4]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	3301      	adds	r3, #1
 80036f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80036f2:	f3bf 8f5f 	dmb	sy
}
 80036f6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f47f af78 	bne.w	80035fe <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d006      	beq.n	8003722 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	e005      	b.n	800372e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800373e:	6979      	ldr	r1, [r7, #20]
 8003740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003742:	3304      	adds	r3, #4
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800374e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003750:	b672      	cpsid	i
}
 8003752:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	4413      	add	r3, r2
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003762:	b662      	cpsie	i
}
 8003764:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3734      	adds	r7, #52	; 0x34
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	ffffe000 	.word	0xffffe000

08003778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003778:	b480      	push	{r7}
 800377a:	b089      	sub	sp, #36	; 0x24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800378a:	2300      	movs	r3, #0
 800378c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800378e:	2300      	movs	r3, #0
 8003790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	e175      	b.n	8003a84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003798:	2201      	movs	r2, #1
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4013      	ands	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	f040 8164 	bne.w	8003a7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d005      	beq.n	80037ce <HAL_GPIO_Init+0x56>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d130      	bne.n	8003830 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	2203      	movs	r2, #3
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4013      	ands	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003804:	2201      	movs	r2, #1
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	f003 0201 	and.w	r2, r3, #1
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4313      	orrs	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	2b03      	cmp	r3, #3
 800383a:	d017      	beq.n	800386c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	2203      	movs	r2, #3
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d123      	bne.n	80038c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	08da      	lsrs	r2, r3, #3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3208      	adds	r2, #8
 8003880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	220f      	movs	r2, #15
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	08da      	lsrs	r2, r3, #3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3208      	adds	r2, #8
 80038ba:	69b9      	ldr	r1, [r7, #24]
 80038bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	2203      	movs	r2, #3
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 0203 	and.w	r2, r3, #3
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 80be 	beq.w	8003a7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003902:	4b66      	ldr	r3, [pc, #408]	; (8003a9c <HAL_GPIO_Init+0x324>)
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	4a65      	ldr	r2, [pc, #404]	; (8003a9c <HAL_GPIO_Init+0x324>)
 8003908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800390c:	6453      	str	r3, [r2, #68]	; 0x44
 800390e:	4b63      	ldr	r3, [pc, #396]	; (8003a9c <HAL_GPIO_Init+0x324>)
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800391a:	4a61      	ldr	r2, [pc, #388]	; (8003aa0 <HAL_GPIO_Init+0x328>)
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	089b      	lsrs	r3, r3, #2
 8003920:	3302      	adds	r3, #2
 8003922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	220f      	movs	r2, #15
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4013      	ands	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a58      	ldr	r2, [pc, #352]	; (8003aa4 <HAL_GPIO_Init+0x32c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d037      	beq.n	80039b6 <HAL_GPIO_Init+0x23e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a57      	ldr	r2, [pc, #348]	; (8003aa8 <HAL_GPIO_Init+0x330>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d031      	beq.n	80039b2 <HAL_GPIO_Init+0x23a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a56      	ldr	r2, [pc, #344]	; (8003aac <HAL_GPIO_Init+0x334>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d02b      	beq.n	80039ae <HAL_GPIO_Init+0x236>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a55      	ldr	r2, [pc, #340]	; (8003ab0 <HAL_GPIO_Init+0x338>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d025      	beq.n	80039aa <HAL_GPIO_Init+0x232>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a54      	ldr	r2, [pc, #336]	; (8003ab4 <HAL_GPIO_Init+0x33c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01f      	beq.n	80039a6 <HAL_GPIO_Init+0x22e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a53      	ldr	r2, [pc, #332]	; (8003ab8 <HAL_GPIO_Init+0x340>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d019      	beq.n	80039a2 <HAL_GPIO_Init+0x22a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a52      	ldr	r2, [pc, #328]	; (8003abc <HAL_GPIO_Init+0x344>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d013      	beq.n	800399e <HAL_GPIO_Init+0x226>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a51      	ldr	r2, [pc, #324]	; (8003ac0 <HAL_GPIO_Init+0x348>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00d      	beq.n	800399a <HAL_GPIO_Init+0x222>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a50      	ldr	r2, [pc, #320]	; (8003ac4 <HAL_GPIO_Init+0x34c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d007      	beq.n	8003996 <HAL_GPIO_Init+0x21e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a4f      	ldr	r2, [pc, #316]	; (8003ac8 <HAL_GPIO_Init+0x350>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d101      	bne.n	8003992 <HAL_GPIO_Init+0x21a>
 800398e:	2309      	movs	r3, #9
 8003990:	e012      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 8003992:	230a      	movs	r3, #10
 8003994:	e010      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 8003996:	2308      	movs	r3, #8
 8003998:	e00e      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 800399a:	2307      	movs	r3, #7
 800399c:	e00c      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 800399e:	2306      	movs	r3, #6
 80039a0:	e00a      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 80039a2:	2305      	movs	r3, #5
 80039a4:	e008      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 80039a6:	2304      	movs	r3, #4
 80039a8:	e006      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 80039aa:	2303      	movs	r3, #3
 80039ac:	e004      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e002      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <HAL_GPIO_Init+0x240>
 80039b6:	2300      	movs	r3, #0
 80039b8:	69fa      	ldr	r2, [r7, #28]
 80039ba:	f002 0203 	and.w	r2, r2, #3
 80039be:	0092      	lsls	r2, r2, #2
 80039c0:	4093      	lsls	r3, r2
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80039c8:	4935      	ldr	r1, [pc, #212]	; (8003aa0 <HAL_GPIO_Init+0x328>)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	089b      	lsrs	r3, r3, #2
 80039ce:	3302      	adds	r3, #2
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039d6:	4b3d      	ldr	r3, [pc, #244]	; (8003acc <HAL_GPIO_Init+0x354>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039fa:	4a34      	ldr	r2, [pc, #208]	; (8003acc <HAL_GPIO_Init+0x354>)
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a00:	4b32      	ldr	r3, [pc, #200]	; (8003acc <HAL_GPIO_Init+0x354>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a24:	4a29      	ldr	r2, [pc, #164]	; (8003acc <HAL_GPIO_Init+0x354>)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a2a:	4b28      	ldr	r3, [pc, #160]	; (8003acc <HAL_GPIO_Init+0x354>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a4e:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <HAL_GPIO_Init+0x354>)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a54:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <HAL_GPIO_Init+0x354>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a78:	4a14      	ldr	r2, [pc, #80]	; (8003acc <HAL_GPIO_Init+0x354>)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3301      	adds	r3, #1
 8003a82:	61fb      	str	r3, [r7, #28]
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b0f      	cmp	r3, #15
 8003a88:	f67f ae86 	bls.w	8003798 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	3724      	adds	r7, #36	; 0x24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40013800 	.word	0x40013800
 8003aa4:	40020000 	.word	0x40020000
 8003aa8:	40020400 	.word	0x40020400
 8003aac:	40020800 	.word	0x40020800
 8003ab0:	40020c00 	.word	0x40020c00
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40021400 	.word	0x40021400
 8003abc:	40021800 	.word	0x40021800
 8003ac0:	40021c00 	.word	0x40021c00
 8003ac4:	40022000 	.word	0x40022000
 8003ac8:	40022400 	.word	0x40022400
 8003acc:	40013c00 	.word	0x40013c00

08003ad0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003ada:	2300      	movs	r3, #0
 8003adc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	e0d9      	b.n	8003ca0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003aec:	2201      	movs	r2, #1
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4013      	ands	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	f040 80c9 	bne.w	8003c9a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003b08:	4a6b      	ldr	r2, [pc, #428]	; (8003cb8 <HAL_GPIO_DeInit+0x1e8>)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	089b      	lsrs	r3, r3, #2
 8003b0e:	3302      	adds	r3, #2
 8003b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b14:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f003 0303 	and.w	r3, r3, #3
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	220f      	movs	r2, #15
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	4013      	ands	r3, r2
 8003b28:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a63      	ldr	r2, [pc, #396]	; (8003cbc <HAL_GPIO_DeInit+0x1ec>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d037      	beq.n	8003ba2 <HAL_GPIO_DeInit+0xd2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a62      	ldr	r2, [pc, #392]	; (8003cc0 <HAL_GPIO_DeInit+0x1f0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d031      	beq.n	8003b9e <HAL_GPIO_DeInit+0xce>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a61      	ldr	r2, [pc, #388]	; (8003cc4 <HAL_GPIO_DeInit+0x1f4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d02b      	beq.n	8003b9a <HAL_GPIO_DeInit+0xca>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a60      	ldr	r2, [pc, #384]	; (8003cc8 <HAL_GPIO_DeInit+0x1f8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d025      	beq.n	8003b96 <HAL_GPIO_DeInit+0xc6>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a5f      	ldr	r2, [pc, #380]	; (8003ccc <HAL_GPIO_DeInit+0x1fc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d01f      	beq.n	8003b92 <HAL_GPIO_DeInit+0xc2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a5e      	ldr	r2, [pc, #376]	; (8003cd0 <HAL_GPIO_DeInit+0x200>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d019      	beq.n	8003b8e <HAL_GPIO_DeInit+0xbe>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a5d      	ldr	r2, [pc, #372]	; (8003cd4 <HAL_GPIO_DeInit+0x204>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d013      	beq.n	8003b8a <HAL_GPIO_DeInit+0xba>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a5c      	ldr	r2, [pc, #368]	; (8003cd8 <HAL_GPIO_DeInit+0x208>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00d      	beq.n	8003b86 <HAL_GPIO_DeInit+0xb6>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a5b      	ldr	r2, [pc, #364]	; (8003cdc <HAL_GPIO_DeInit+0x20c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d007      	beq.n	8003b82 <HAL_GPIO_DeInit+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a5a      	ldr	r2, [pc, #360]	; (8003ce0 <HAL_GPIO_DeInit+0x210>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d101      	bne.n	8003b7e <HAL_GPIO_DeInit+0xae>
 8003b7a:	2309      	movs	r3, #9
 8003b7c:	e012      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003b7e:	230a      	movs	r3, #10
 8003b80:	e010      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003b82:	2308      	movs	r3, #8
 8003b84:	e00e      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003b86:	2307      	movs	r3, #7
 8003b88:	e00c      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003b8a:	2306      	movs	r3, #6
 8003b8c:	e00a      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003b8e:	2305      	movs	r3, #5
 8003b90:	e008      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003b92:	2304      	movs	r3, #4
 8003b94:	e006      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003b96:	2303      	movs	r3, #3
 8003b98:	e004      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e002      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <HAL_GPIO_DeInit+0xd4>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	f002 0203 	and.w	r2, r2, #3
 8003baa:	0092      	lsls	r2, r2, #2
 8003bac:	4093      	lsls	r3, r2
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d132      	bne.n	8003c1a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003bb4:	4b4b      	ldr	r3, [pc, #300]	; (8003ce4 <HAL_GPIO_DeInit+0x214>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	4949      	ldr	r1, [pc, #292]	; (8003ce4 <HAL_GPIO_DeInit+0x214>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003bc2:	4b48      	ldr	r3, [pc, #288]	; (8003ce4 <HAL_GPIO_DeInit+0x214>)
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	4946      	ldr	r1, [pc, #280]	; (8003ce4 <HAL_GPIO_DeInit+0x214>)
 8003bcc:	4013      	ands	r3, r2
 8003bce:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003bd0:	4b44      	ldr	r3, [pc, #272]	; (8003ce4 <HAL_GPIO_DeInit+0x214>)
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	4942      	ldr	r1, [pc, #264]	; (8003ce4 <HAL_GPIO_DeInit+0x214>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003bde:	4b41      	ldr	r3, [pc, #260]	; (8003ce4 <HAL_GPIO_DeInit+0x214>)
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	43db      	mvns	r3, r3
 8003be6:	493f      	ldr	r1, [pc, #252]	; (8003ce4 <HAL_GPIO_DeInit+0x214>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	220f      	movs	r2, #15
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003bfc:	4a2e      	ldr	r2, [pc, #184]	; (8003cb8 <HAL_GPIO_DeInit+0x1e8>)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	089b      	lsrs	r3, r3, #2
 8003c02:	3302      	adds	r3, #2
 8003c04:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	482a      	ldr	r0, [pc, #168]	; (8003cb8 <HAL_GPIO_DeInit+0x1e8>)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	089b      	lsrs	r3, r3, #2
 8003c12:	400a      	ands	r2, r1
 8003c14:	3302      	adds	r3, #2
 8003c16:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	2103      	movs	r1, #3
 8003c24:	fa01 f303 	lsl.w	r3, r1, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	08da      	lsrs	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3208      	adds	r2, #8
 8003c38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	220f      	movs	r2, #15
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	08d2      	lsrs	r2, r2, #3
 8003c50:	4019      	ands	r1, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3208      	adds	r2, #8
 8003c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	2103      	movs	r1, #3
 8003c64:	fa01 f303 	lsl.w	r3, r1, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	401a      	ands	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	2101      	movs	r1, #1
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	401a      	ands	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	2103      	movs	r1, #3
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	43db      	mvns	r3, r3
 8003c94:	401a      	ands	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2b0f      	cmp	r3, #15
 8003ca4:	f67f af22 	bls.w	8003aec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003ca8:	bf00      	nop
 8003caa:	bf00      	nop
 8003cac:	371c      	adds	r7, #28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40013800 	.word	0x40013800
 8003cbc:	40020000 	.word	0x40020000
 8003cc0:	40020400 	.word	0x40020400
 8003cc4:	40020800 	.word	0x40020800
 8003cc8:	40020c00 	.word	0x40020c00
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40021400 	.word	0x40021400
 8003cd4:	40021800 	.word	0x40021800
 8003cd8:	40021c00 	.word	0x40021c00
 8003cdc:	40022000 	.word	0x40022000
 8003ce0:	40022400 	.word	0x40022400
 8003ce4:	40013c00 	.word	0x40013c00

08003ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	807b      	strh	r3, [r7, #2]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cf8:	787b      	ldrb	r3, [r7, #1]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cfe:	887a      	ldrh	r2, [r7, #2]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003d04:	e003      	b.n	8003d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003d06:	887b      	ldrh	r3, [r7, #2]
 8003d08:	041a      	lsls	r2, r3, #16
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	619a      	str	r2, [r3, #24]
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b085      	sub	sp, #20
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	460b      	mov	r3, r1
 8003d24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d2c:	887a      	ldrh	r2, [r7, #2]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4013      	ands	r3, r2
 8003d32:	041a      	lsls	r2, r3, #16
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	43d9      	mvns	r1, r3
 8003d38:	887b      	ldrh	r3, [r7, #2]
 8003d3a:	400b      	ands	r3, r1
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	619a      	str	r2, [r3, #24]
}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d50:	b08f      	sub	sp, #60	; 0x3c
 8003d52:	af0a      	add	r7, sp, #40	; 0x28
 8003d54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e116      	b.n	8003f8e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7fd fd1c 	bl	80017b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2203      	movs	r2, #3
 8003d84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d102      	bne.n	8003d9a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f002 ffce 	bl	8006d40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	603b      	str	r3, [r7, #0]
 8003daa:	687e      	ldr	r6, [r7, #4]
 8003dac:	466d      	mov	r5, sp
 8003dae:	f106 0410 	add.w	r4, r6, #16
 8003db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003db6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dc2:	1d33      	adds	r3, r6, #4
 8003dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dc6:	6838      	ldr	r0, [r7, #0]
 8003dc8:	f002 ff62 	bl	8006c90 <USB_CoreInit>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d005      	beq.n	8003dde <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e0d7      	b.n	8003f8e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2100      	movs	r1, #0
 8003de4:	4618      	mov	r0, r3
 8003de6:	f002 ffbc 	bl	8006d62 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dea:	2300      	movs	r3, #0
 8003dec:	73fb      	strb	r3, [r7, #15]
 8003dee:	e04a      	b.n	8003e86 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003df0:	7bfa      	ldrb	r2, [r7, #15]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	333d      	adds	r3, #61	; 0x3d
 8003e00:	2201      	movs	r2, #1
 8003e02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e04:	7bfa      	ldrb	r2, [r7, #15]
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	333c      	adds	r3, #60	; 0x3c
 8003e14:	7bfa      	ldrb	r2, [r7, #15]
 8003e16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e18:	7bfa      	ldrb	r2, [r7, #15]
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	b298      	uxth	r0, r3
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	3344      	adds	r3, #68	; 0x44
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e30:	7bfa      	ldrb	r2, [r7, #15]
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	3340      	adds	r3, #64	; 0x40
 8003e40:	2200      	movs	r2, #0
 8003e42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e44:	7bfa      	ldrb	r2, [r7, #15]
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	3348      	adds	r3, #72	; 0x48
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e58:	7bfa      	ldrb	r2, [r7, #15]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	334c      	adds	r3, #76	; 0x4c
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e6c:	7bfa      	ldrb	r2, [r7, #15]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	3354      	adds	r3, #84	; 0x54
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	3301      	adds	r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
 8003e86:	7bfa      	ldrb	r2, [r7, #15]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d3af      	bcc.n	8003df0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e90:	2300      	movs	r3, #0
 8003e92:	73fb      	strb	r3, [r7, #15]
 8003e94:	e044      	b.n	8003f20 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e96:	7bfa      	ldrb	r2, [r7, #15]
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003eac:	7bfa      	ldrb	r2, [r7, #15]
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003ebe:	7bfa      	ldrb	r2, [r7, #15]
 8003ec0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ec2:	7bfa      	ldrb	r2, [r7, #15]
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ed8:	7bfa      	ldrb	r2, [r7, #15]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003eee:	7bfa      	ldrb	r2, [r7, #15]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f04:	7bfa      	ldrb	r2, [r7, #15]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
 8003f20:	7bfa      	ldrb	r2, [r7, #15]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d3b5      	bcc.n	8003e96 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	687e      	ldr	r6, [r7, #4]
 8003f32:	466d      	mov	r5, sp
 8003f34:	f106 0410 	add.w	r4, r6, #16
 8003f38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f44:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f48:	1d33      	adds	r3, r6, #4
 8003f4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f4c:	6838      	ldr	r0, [r7, #0]
 8003f4e:	f002 ff55 	bl	8006dfc <USB_DevInit>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e014      	b.n	8003f8e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d102      	bne.n	8003f82 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f80b 	bl	8003f98 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f003 f913 	bl	80071b2 <USB_DevDisconnect>

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003f98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fc6:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <HAL_PCDEx_ActivateLPM+0x44>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	10000003 	.word	0x10000003

08003fe0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fee:	6013      	str	r3, [r2, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40007000 	.word	0x40007000

08004000 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800400a:	4b23      	ldr	r3, [pc, #140]	; (8004098 <HAL_PWREx_EnableOverDrive+0x98>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	4a22      	ldr	r2, [pc, #136]	; (8004098 <HAL_PWREx_EnableOverDrive+0x98>)
 8004010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004014:	6413      	str	r3, [r2, #64]	; 0x40
 8004016:	4b20      	ldr	r3, [pc, #128]	; (8004098 <HAL_PWREx_EnableOverDrive+0x98>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004022:	4b1e      	ldr	r3, [pc, #120]	; (800409c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1d      	ldr	r2, [pc, #116]	; (800409c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800402e:	f7fd ff73 	bl	8001f18 <HAL_GetTick>
 8004032:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004034:	e009      	b.n	800404a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004036:	f7fd ff6f 	bl	8001f18 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004044:	d901      	bls.n	800404a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e022      	b.n	8004090 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800404a:	4b14      	ldr	r3, [pc, #80]	; (800409c <HAL_PWREx_EnableOverDrive+0x9c>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004056:	d1ee      	bne.n	8004036 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004058:	4b10      	ldr	r3, [pc, #64]	; (800409c <HAL_PWREx_EnableOverDrive+0x9c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a0f      	ldr	r2, [pc, #60]	; (800409c <HAL_PWREx_EnableOverDrive+0x9c>)
 800405e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004062:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004064:	f7fd ff58 	bl	8001f18 <HAL_GetTick>
 8004068:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800406a:	e009      	b.n	8004080 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800406c:	f7fd ff54 	bl	8001f18 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800407a:	d901      	bls.n	8004080 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e007      	b.n	8004090 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800408c:	d1ee      	bne.n	800406c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40023800 	.word	0x40023800
 800409c:	40007000 	.word	0x40007000

080040a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80040a8:	2300      	movs	r3, #0
 80040aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e29b      	b.n	80045ee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 8087 	beq.w	80041d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040c4:	4b96      	ldr	r3, [pc, #600]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f003 030c 	and.w	r3, r3, #12
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d00c      	beq.n	80040ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040d0:	4b93      	ldr	r3, [pc, #588]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 030c 	and.w	r3, r3, #12
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d112      	bne.n	8004102 <HAL_RCC_OscConfig+0x62>
 80040dc:	4b90      	ldr	r3, [pc, #576]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e8:	d10b      	bne.n	8004102 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ea:	4b8d      	ldr	r3, [pc, #564]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d06c      	beq.n	80041d0 <HAL_RCC_OscConfig+0x130>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d168      	bne.n	80041d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e275      	b.n	80045ee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800410a:	d106      	bne.n	800411a <HAL_RCC_OscConfig+0x7a>
 800410c:	4b84      	ldr	r3, [pc, #528]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a83      	ldr	r2, [pc, #524]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 8004112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	e02e      	b.n	8004178 <HAL_RCC_OscConfig+0xd8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0x9c>
 8004122:	4b7f      	ldr	r3, [pc, #508]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a7e      	ldr	r2, [pc, #504]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 8004128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b7c      	ldr	r3, [pc, #496]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a7b      	ldr	r2, [pc, #492]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 8004134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e01d      	b.n	8004178 <HAL_RCC_OscConfig+0xd8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004144:	d10c      	bne.n	8004160 <HAL_RCC_OscConfig+0xc0>
 8004146:	4b76      	ldr	r3, [pc, #472]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a75      	ldr	r2, [pc, #468]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 800414c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	4b73      	ldr	r3, [pc, #460]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a72      	ldr	r2, [pc, #456]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 8004158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	e00b      	b.n	8004178 <HAL_RCC_OscConfig+0xd8>
 8004160:	4b6f      	ldr	r3, [pc, #444]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a6e      	ldr	r2, [pc, #440]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 8004166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	4b6c      	ldr	r3, [pc, #432]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a6b      	ldr	r2, [pc, #428]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 8004172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d013      	beq.n	80041a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fd feca 	bl	8001f18 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004188:	f7fd fec6 	bl	8001f18 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	; 0x64
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e229      	b.n	80045ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	4b61      	ldr	r3, [pc, #388]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCC_OscConfig+0xe8>
 80041a6:	e014      	b.n	80041d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fd feb6 	bl	8001f18 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b0:	f7fd feb2 	bl	8001f18 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	; 0x64
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e215      	b.n	80045ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c2:	4b57      	ldr	r3, [pc, #348]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x110>
 80041ce:	e000      	b.n	80041d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d069      	beq.n	80042b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041de:	4b50      	ldr	r3, [pc, #320]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00b      	beq.n	8004202 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ea:	4b4d      	ldr	r3, [pc, #308]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d11c      	bne.n	8004230 <HAL_RCC_OscConfig+0x190>
 80041f6:	4b4a      	ldr	r3, [pc, #296]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d116      	bne.n	8004230 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004202:	4b47      	ldr	r3, [pc, #284]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <HAL_RCC_OscConfig+0x17a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d001      	beq.n	800421a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e1e9      	b.n	80045ee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421a:	4b41      	ldr	r3, [pc, #260]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	493d      	ldr	r1, [pc, #244]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422e:	e040      	b.n	80042b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d023      	beq.n	8004280 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004238:	4b39      	ldr	r3, [pc, #228]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a38      	ldr	r2, [pc, #224]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fd fe68 	bl	8001f18 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800424c:	f7fd fe64 	bl	8001f18 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e1c7      	b.n	80045ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425e:	4b30      	ldr	r3, [pc, #192]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0f0      	beq.n	800424c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426a:	4b2d      	ldr	r3, [pc, #180]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4929      	ldr	r1, [pc, #164]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 800427a:	4313      	orrs	r3, r2
 800427c:	600b      	str	r3, [r1, #0]
 800427e:	e018      	b.n	80042b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004280:	4b27      	ldr	r3, [pc, #156]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a26      	ldr	r2, [pc, #152]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 8004286:	f023 0301 	bic.w	r3, r3, #1
 800428a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fd fe44 	bl	8001f18 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004294:	f7fd fe40 	bl	8001f18 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e1a3      	b.n	80045ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042a6:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d038      	beq.n	8004330 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d019      	beq.n	80042fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c6:	4b16      	ldr	r3, [pc, #88]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 80042c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ca:	4a15      	ldr	r2, [pc, #84]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d2:	f7fd fe21 	bl	8001f18 <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042da:	f7fd fe1d 	bl	8001f18 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e180      	b.n	80045ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ec:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 80042ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f0      	beq.n	80042da <HAL_RCC_OscConfig+0x23a>
 80042f8:	e01a      	b.n	8004330 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042fa:	4b09      	ldr	r3, [pc, #36]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 80042fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fe:	4a08      	ldr	r2, [pc, #32]	; (8004320 <HAL_RCC_OscConfig+0x280>)
 8004300:	f023 0301 	bic.w	r3, r3, #1
 8004304:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004306:	f7fd fe07 	bl	8001f18 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800430c:	e00a      	b.n	8004324 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800430e:	f7fd fe03 	bl	8001f18 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d903      	bls.n	8004324 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e166      	b.n	80045ee <HAL_RCC_OscConfig+0x54e>
 8004320:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004324:	4b92      	ldr	r3, [pc, #584]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 8004326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1ee      	bne.n	800430e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80a4 	beq.w	8004486 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800433e:	4b8c      	ldr	r3, [pc, #560]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10d      	bne.n	8004366 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800434a:	4b89      	ldr	r3, [pc, #548]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	4a88      	ldr	r2, [pc, #544]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 8004350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004354:	6413      	str	r3, [r2, #64]	; 0x40
 8004356:	4b86      	ldr	r3, [pc, #536]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004362:	2301      	movs	r3, #1
 8004364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004366:	4b83      	ldr	r3, [pc, #524]	; (8004574 <HAL_RCC_OscConfig+0x4d4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d118      	bne.n	80043a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004372:	4b80      	ldr	r3, [pc, #512]	; (8004574 <HAL_RCC_OscConfig+0x4d4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a7f      	ldr	r2, [pc, #508]	; (8004574 <HAL_RCC_OscConfig+0x4d4>)
 8004378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437e:	f7fd fdcb 	bl	8001f18 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004386:	f7fd fdc7 	bl	8001f18 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b64      	cmp	r3, #100	; 0x64
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e12a      	b.n	80045ee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004398:	4b76      	ldr	r3, [pc, #472]	; (8004574 <HAL_RCC_OscConfig+0x4d4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d106      	bne.n	80043ba <HAL_RCC_OscConfig+0x31a>
 80043ac:	4b70      	ldr	r3, [pc, #448]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	4a6f      	ldr	r2, [pc, #444]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6713      	str	r3, [r2, #112]	; 0x70
 80043b8:	e02d      	b.n	8004416 <HAL_RCC_OscConfig+0x376>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10c      	bne.n	80043dc <HAL_RCC_OscConfig+0x33c>
 80043c2:	4b6b      	ldr	r3, [pc, #428]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	4a6a      	ldr	r2, [pc, #424]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 80043c8:	f023 0301 	bic.w	r3, r3, #1
 80043cc:	6713      	str	r3, [r2, #112]	; 0x70
 80043ce:	4b68      	ldr	r3, [pc, #416]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d2:	4a67      	ldr	r2, [pc, #412]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 80043d4:	f023 0304 	bic.w	r3, r3, #4
 80043d8:	6713      	str	r3, [r2, #112]	; 0x70
 80043da:	e01c      	b.n	8004416 <HAL_RCC_OscConfig+0x376>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b05      	cmp	r3, #5
 80043e2:	d10c      	bne.n	80043fe <HAL_RCC_OscConfig+0x35e>
 80043e4:	4b62      	ldr	r3, [pc, #392]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e8:	4a61      	ldr	r2, [pc, #388]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 80043ea:	f043 0304 	orr.w	r3, r3, #4
 80043ee:	6713      	str	r3, [r2, #112]	; 0x70
 80043f0:	4b5f      	ldr	r3, [pc, #380]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 80043f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f4:	4a5e      	ldr	r2, [pc, #376]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	6713      	str	r3, [r2, #112]	; 0x70
 80043fc:	e00b      	b.n	8004416 <HAL_RCC_OscConfig+0x376>
 80043fe:	4b5c      	ldr	r3, [pc, #368]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	4a5b      	ldr	r2, [pc, #364]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 8004404:	f023 0301 	bic.w	r3, r3, #1
 8004408:	6713      	str	r3, [r2, #112]	; 0x70
 800440a:	4b59      	ldr	r3, [pc, #356]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	4a58      	ldr	r2, [pc, #352]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 8004410:	f023 0304 	bic.w	r3, r3, #4
 8004414:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d015      	beq.n	800444a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441e:	f7fd fd7b 	bl	8001f18 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004424:	e00a      	b.n	800443c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004426:	f7fd fd77 	bl	8001f18 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	f241 3288 	movw	r2, #5000	; 0x1388
 8004434:	4293      	cmp	r3, r2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e0d8      	b.n	80045ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443c:	4b4c      	ldr	r3, [pc, #304]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 800443e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0ee      	beq.n	8004426 <HAL_RCC_OscConfig+0x386>
 8004448:	e014      	b.n	8004474 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444a:	f7fd fd65 	bl	8001f18 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004450:	e00a      	b.n	8004468 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004452:	f7fd fd61 	bl	8001f18 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004460:	4293      	cmp	r3, r2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e0c2      	b.n	80045ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004468:	4b41      	ldr	r3, [pc, #260]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 800446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1ee      	bne.n	8004452 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004474:	7dfb      	ldrb	r3, [r7, #23]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d105      	bne.n	8004486 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800447a:	4b3d      	ldr	r3, [pc, #244]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	4a3c      	ldr	r2, [pc, #240]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 8004480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004484:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 80ae 	beq.w	80045ec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004490:	4b37      	ldr	r3, [pc, #220]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 030c 	and.w	r3, r3, #12
 8004498:	2b08      	cmp	r3, #8
 800449a:	d06d      	beq.n	8004578 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d14b      	bne.n	800453c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a4:	4b32      	ldr	r3, [pc, #200]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a31      	ldr	r2, [pc, #196]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 80044aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b0:	f7fd fd32 	bl	8001f18 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b8:	f7fd fd2e 	bl	8001f18 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e091      	b.n	80045ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ca:	4b29      	ldr	r3, [pc, #164]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1f0      	bne.n	80044b8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69da      	ldr	r2, [r3, #28]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	019b      	lsls	r3, r3, #6
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	085b      	lsrs	r3, r3, #1
 80044ee:	3b01      	subs	r3, #1
 80044f0:	041b      	lsls	r3, r3, #16
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	061b      	lsls	r3, r3, #24
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	071b      	lsls	r3, r3, #28
 8004502:	491b      	ldr	r1, [pc, #108]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004508:	4b19      	ldr	r3, [pc, #100]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a18      	ldr	r2, [pc, #96]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 800450e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fd fd00 	bl	8001f18 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800451c:	f7fd fcfc 	bl	8001f18 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e05f      	b.n	80045ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800452e:	4b10      	ldr	r3, [pc, #64]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f0      	beq.n	800451c <HAL_RCC_OscConfig+0x47c>
 800453a:	e057      	b.n	80045ec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800453c:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a0b      	ldr	r2, [pc, #44]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 8004542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fd fce6 	bl	8001f18 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004550:	f7fd fce2 	bl	8001f18 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e045      	b.n	80045ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004562:	4b03      	ldr	r3, [pc, #12]	; (8004570 <HAL_RCC_OscConfig+0x4d0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0x4b0>
 800456e:	e03d      	b.n	80045ec <HAL_RCC_OscConfig+0x54c>
 8004570:	40023800 	.word	0x40023800
 8004574:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004578:	4b1f      	ldr	r3, [pc, #124]	; (80045f8 <HAL_RCC_OscConfig+0x558>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d030      	beq.n	80045e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004590:	429a      	cmp	r2, r3
 8004592:	d129      	bne.n	80045e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800459e:	429a      	cmp	r2, r3
 80045a0:	d122      	bne.n	80045e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045a8:	4013      	ands	r3, r2
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d119      	bne.n	80045e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045be:	085b      	lsrs	r3, r3, #1
 80045c0:	3b01      	subs	r3, #1
 80045c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d10f      	bne.n	80045e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d107      	bne.n	80045e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d001      	beq.n	80045ec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40023800 	.word	0x40023800

080045fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e0d0      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004614:	4b6a      	ldr	r3, [pc, #424]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d910      	bls.n	8004644 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004622:	4b67      	ldr	r3, [pc, #412]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f023 020f 	bic.w	r2, r3, #15
 800462a:	4965      	ldr	r1, [pc, #404]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	4313      	orrs	r3, r2
 8004630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004632:	4b63      	ldr	r3, [pc, #396]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d001      	beq.n	8004644 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0b8      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d020      	beq.n	8004692 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800465c:	4b59      	ldr	r3, [pc, #356]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4a58      	ldr	r2, [pc, #352]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004662:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004666:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004674:	4b53      	ldr	r3, [pc, #332]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	4a52      	ldr	r2, [pc, #328]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 800467a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800467e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004680:	4b50      	ldr	r3, [pc, #320]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	494d      	ldr	r1, [pc, #308]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d040      	beq.n	8004720 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d107      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a6:	4b47      	ldr	r3, [pc, #284]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d115      	bne.n	80046de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e07f      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d107      	bne.n	80046ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046be:	4b41      	ldr	r3, [pc, #260]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d109      	bne.n	80046de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e073      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ce:	4b3d      	ldr	r3, [pc, #244]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e06b      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046de:	4b39      	ldr	r3, [pc, #228]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f023 0203 	bic.w	r2, r3, #3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	4936      	ldr	r1, [pc, #216]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f0:	f7fd fc12 	bl	8001f18 <HAL_GetTick>
 80046f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f6:	e00a      	b.n	800470e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046f8:	f7fd fc0e 	bl	8001f18 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	f241 3288 	movw	r2, #5000	; 0x1388
 8004706:	4293      	cmp	r3, r2
 8004708:	d901      	bls.n	800470e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e053      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800470e:	4b2d      	ldr	r3, [pc, #180]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 020c 	and.w	r2, r3, #12
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	429a      	cmp	r2, r3
 800471e:	d1eb      	bne.n	80046f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004720:	4b27      	ldr	r3, [pc, #156]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d210      	bcs.n	8004750 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472e:	4b24      	ldr	r3, [pc, #144]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f023 020f 	bic.w	r2, r3, #15
 8004736:	4922      	ldr	r1, [pc, #136]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	4313      	orrs	r3, r2
 800473c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800473e:	4b20      	ldr	r3, [pc, #128]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d001      	beq.n	8004750 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e032      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800475c:	4b19      	ldr	r3, [pc, #100]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	4916      	ldr	r1, [pc, #88]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 800476a:	4313      	orrs	r3, r2
 800476c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800477a:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	490e      	ldr	r1, [pc, #56]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 800478a:	4313      	orrs	r3, r2
 800478c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800478e:	f000 f821 	bl	80047d4 <HAL_RCC_GetSysClockFreq>
 8004792:	4602      	mov	r2, r0
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	490a      	ldr	r1, [pc, #40]	; (80047c8 <HAL_RCC_ClockConfig+0x1cc>)
 80047a0:	5ccb      	ldrb	r3, [r1, r3]
 80047a2:	fa22 f303 	lsr.w	r3, r2, r3
 80047a6:	4a09      	ldr	r2, [pc, #36]	; (80047cc <HAL_RCC_ClockConfig+0x1d0>)
 80047a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047aa:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <HAL_RCC_ClockConfig+0x1d4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fd f87c 	bl	80018ac <HAL_InitTick>

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40023c00 	.word	0x40023c00
 80047c4:	40023800 	.word	0x40023800
 80047c8:	08022260 	.word	0x08022260
 80047cc:	20000000 	.word	0x20000000
 80047d0:	20000004 	.word	0x20000004

080047d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d8:	b094      	sub	sp, #80	; 0x50
 80047da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80047dc:	2300      	movs	r3, #0
 80047de:	647b      	str	r3, [r7, #68]	; 0x44
 80047e0:	2300      	movs	r3, #0
 80047e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e4:	2300      	movs	r3, #0
 80047e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047ec:	4b79      	ldr	r3, [pc, #484]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 030c 	and.w	r3, r3, #12
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d00d      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x40>
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	f200 80e1 	bhi.w	80049c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_RCC_GetSysClockFreq+0x34>
 8004802:	2b04      	cmp	r3, #4
 8004804:	d003      	beq.n	800480e <HAL_RCC_GetSysClockFreq+0x3a>
 8004806:	e0db      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004808:	4b73      	ldr	r3, [pc, #460]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800480a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800480c:	e0db      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800480e:	4b73      	ldr	r3, [pc, #460]	; (80049dc <HAL_RCC_GetSysClockFreq+0x208>)
 8004810:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004812:	e0d8      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004814:	4b6f      	ldr	r3, [pc, #444]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800481c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800481e:	4b6d      	ldr	r3, [pc, #436]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d063      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800482a:	4b6a      	ldr	r3, [pc, #424]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	099b      	lsrs	r3, r3, #6
 8004830:	2200      	movs	r2, #0
 8004832:	63bb      	str	r3, [r7, #56]	; 0x38
 8004834:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800483c:	633b      	str	r3, [r7, #48]	; 0x30
 800483e:	2300      	movs	r3, #0
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
 8004842:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004846:	4622      	mov	r2, r4
 8004848:	462b      	mov	r3, r5
 800484a:	f04f 0000 	mov.w	r0, #0
 800484e:	f04f 0100 	mov.w	r1, #0
 8004852:	0159      	lsls	r1, r3, #5
 8004854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004858:	0150      	lsls	r0, r2, #5
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4621      	mov	r1, r4
 8004860:	1a51      	subs	r1, r2, r1
 8004862:	6139      	str	r1, [r7, #16]
 8004864:	4629      	mov	r1, r5
 8004866:	eb63 0301 	sbc.w	r3, r3, r1
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004878:	4659      	mov	r1, fp
 800487a:	018b      	lsls	r3, r1, #6
 800487c:	4651      	mov	r1, sl
 800487e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004882:	4651      	mov	r1, sl
 8004884:	018a      	lsls	r2, r1, #6
 8004886:	4651      	mov	r1, sl
 8004888:	ebb2 0801 	subs.w	r8, r2, r1
 800488c:	4659      	mov	r1, fp
 800488e:	eb63 0901 	sbc.w	r9, r3, r1
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800489e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048a6:	4690      	mov	r8, r2
 80048a8:	4699      	mov	r9, r3
 80048aa:	4623      	mov	r3, r4
 80048ac:	eb18 0303 	adds.w	r3, r8, r3
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	462b      	mov	r3, r5
 80048b4:	eb49 0303 	adc.w	r3, r9, r3
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048c6:	4629      	mov	r1, r5
 80048c8:	024b      	lsls	r3, r1, #9
 80048ca:	4621      	mov	r1, r4
 80048cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048d0:	4621      	mov	r1, r4
 80048d2:	024a      	lsls	r2, r1, #9
 80048d4:	4610      	mov	r0, r2
 80048d6:	4619      	mov	r1, r3
 80048d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048da:	2200      	movs	r2, #0
 80048dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80048de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048e4:	f7fb fd14 	bl	8000310 <__aeabi_uldivmod>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4613      	mov	r3, r2
 80048ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048f0:	e058      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f2:	4b38      	ldr	r3, [pc, #224]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	099b      	lsrs	r3, r3, #6
 80048f8:	2200      	movs	r2, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	4611      	mov	r1, r2
 80048fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004902:	623b      	str	r3, [r7, #32]
 8004904:	2300      	movs	r3, #0
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
 8004908:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800490c:	4642      	mov	r2, r8
 800490e:	464b      	mov	r3, r9
 8004910:	f04f 0000 	mov.w	r0, #0
 8004914:	f04f 0100 	mov.w	r1, #0
 8004918:	0159      	lsls	r1, r3, #5
 800491a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800491e:	0150      	lsls	r0, r2, #5
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4641      	mov	r1, r8
 8004926:	ebb2 0a01 	subs.w	sl, r2, r1
 800492a:	4649      	mov	r1, r9
 800492c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800493c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004940:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004944:	ebb2 040a 	subs.w	r4, r2, sl
 8004948:	eb63 050b 	sbc.w	r5, r3, fp
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	00eb      	lsls	r3, r5, #3
 8004956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800495a:	00e2      	lsls	r2, r4, #3
 800495c:	4614      	mov	r4, r2
 800495e:	461d      	mov	r5, r3
 8004960:	4643      	mov	r3, r8
 8004962:	18e3      	adds	r3, r4, r3
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	464b      	mov	r3, r9
 8004968:	eb45 0303 	adc.w	r3, r5, r3
 800496c:	607b      	str	r3, [r7, #4]
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	e9d7 4500 	ldrd	r4, r5, [r7]
 800497a:	4629      	mov	r1, r5
 800497c:	028b      	lsls	r3, r1, #10
 800497e:	4621      	mov	r1, r4
 8004980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004984:	4621      	mov	r1, r4
 8004986:	028a      	lsls	r2, r1, #10
 8004988:	4610      	mov	r0, r2
 800498a:	4619      	mov	r1, r3
 800498c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498e:	2200      	movs	r2, #0
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	61fa      	str	r2, [r7, #28]
 8004994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004998:	f7fb fcba 	bl	8000310 <__aeabi_uldivmod>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4613      	mov	r3, r2
 80049a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	0c1b      	lsrs	r3, r3, #16
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	3301      	adds	r3, #1
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80049b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049be:	e002      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80049c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3750      	adds	r7, #80	; 0x50
 80049cc:	46bd      	mov	sp, r7
 80049ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049d2:	bf00      	nop
 80049d4:	40023800 	.word	0x40023800
 80049d8:	00f42400 	.word	0x00f42400
 80049dc:	007a1200 	.word	0x007a1200

080049e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049e4:	4b03      	ldr	r3, [pc, #12]	; (80049f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049e6:	681b      	ldr	r3, [r3, #0]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	20000000 	.word	0x20000000

080049f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049fc:	f7ff fff0 	bl	80049e0 <HAL_RCC_GetHCLKFreq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	0a9b      	lsrs	r3, r3, #10
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	4903      	ldr	r1, [pc, #12]	; (8004a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	08022270 	.word	0x08022270

08004a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a24:	f7ff ffdc 	bl	80049e0 <HAL_RCC_GetHCLKFreq>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	0b5b      	lsrs	r3, r3, #13
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	4903      	ldr	r1, [pc, #12]	; (8004a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a36:	5ccb      	ldrb	r3, [r1, r3]
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40023800 	.word	0x40023800
 8004a44:	08022270 	.word	0x08022270

08004a48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	220f      	movs	r2, #15
 8004a56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a58:	4b12      	ldr	r3, [pc, #72]	; (8004aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 0203 	and.w	r2, r3, #3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a64:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a70:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004a7c:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	08db      	lsrs	r3, r3, #3
 8004a82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a8a:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <HAL_RCC_GetClockConfig+0x60>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 020f 	and.w	r2, r3, #15
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	601a      	str	r2, [r3, #0]
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	40023c00 	.word	0x40023c00

08004aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d012      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ad4:	4b69      	ldr	r3, [pc, #420]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4a68      	ldr	r2, [pc, #416]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ada:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ade:	6093      	str	r3, [r2, #8]
 8004ae0:	4b66      	ldr	r3, [pc, #408]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae8:	4964      	ldr	r1, [pc, #400]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004af6:	2301      	movs	r3, #1
 8004af8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d017      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b06:	4b5d      	ldr	r3, [pc, #372]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b14:	4959      	ldr	r1, [pc, #356]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b24:	d101      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004b26:	2301      	movs	r3, #1
 8004b28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004b32:	2301      	movs	r3, #1
 8004b34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d017      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b42:	4b4e      	ldr	r3, [pc, #312]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	494a      	ldr	r1, [pc, #296]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b60:	d101      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004b62:	2301      	movs	r3, #1
 8004b64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 808b 	beq.w	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b90:	4b3a      	ldr	r3, [pc, #232]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	4a39      	ldr	r2, [pc, #228]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8004b9c:	4b37      	ldr	r3, [pc, #220]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ba8:	4b35      	ldr	r3, [pc, #212]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a34      	ldr	r2, [pc, #208]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb4:	f7fd f9b0 	bl	8001f18 <HAL_GetTick>
 8004bb8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bbc:	f7fd f9ac 	bl	8001f18 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b64      	cmp	r3, #100	; 0x64
 8004bc8:	d901      	bls.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e38f      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004bce:	4b2c      	ldr	r3, [pc, #176]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bda:	4b28      	ldr	r3, [pc, #160]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d035      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d02e      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bf8:	4b20      	ldr	r3, [pc, #128]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c02:	4b1e      	ldr	r3, [pc, #120]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c06:	4a1d      	ldr	r2, [pc, #116]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c0e:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c12:	4a1a      	ldr	r2, [pc, #104]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c1a:	4a18      	ldr	r2, [pc, #96]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c20:	4b16      	ldr	r3, [pc, #88]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d114      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2c:	f7fd f974 	bl	8001f18 <HAL_GetTick>
 8004c30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c32:	e00a      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c34:	f7fd f970 	bl	8001f18 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e351      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4a:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0ee      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c62:	d111      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c64:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c70:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c72:	400b      	ands	r3, r1
 8004c74:	4901      	ldr	r1, [pc, #4]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	608b      	str	r3, [r1, #8]
 8004c7a:	e00b      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	40007000 	.word	0x40007000
 8004c84:	0ffffcff 	.word	0x0ffffcff
 8004c88:	4bac      	ldr	r3, [pc, #688]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	4aab      	ldr	r2, [pc, #684]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c92:	6093      	str	r3, [r2, #8]
 8004c94:	4ba9      	ldr	r3, [pc, #676]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca0:	49a6      	ldr	r1, [pc, #664]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0310 	and.w	r3, r3, #16
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d010      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cb2:	4ba2      	ldr	r3, [pc, #648]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cb8:	4aa0      	ldr	r2, [pc, #640]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cbe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004cc2:	4b9e      	ldr	r3, [pc, #632]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	499b      	ldr	r1, [pc, #620]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ce0:	4b96      	ldr	r3, [pc, #600]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cee:	4993      	ldr	r1, [pc, #588]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d02:	4b8e      	ldr	r3, [pc, #568]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d10:	498a      	ldr	r1, [pc, #552]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d24:	4b85      	ldr	r3, [pc, #532]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d32:	4982      	ldr	r1, [pc, #520]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d46:	4b7d      	ldr	r3, [pc, #500]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d54:	4979      	ldr	r1, [pc, #484]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d68:	4b74      	ldr	r3, [pc, #464]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6e:	f023 0203 	bic.w	r2, r3, #3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	4971      	ldr	r1, [pc, #452]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d8a:	4b6c      	ldr	r3, [pc, #432]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d90:	f023 020c 	bic.w	r2, r3, #12
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d98:	4968      	ldr	r1, [pc, #416]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dac:	4b63      	ldr	r3, [pc, #396]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dba:	4960      	ldr	r1, [pc, #384]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dce:	4b5b      	ldr	r3, [pc, #364]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ddc:	4957      	ldr	r1, [pc, #348]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004df0:	4b52      	ldr	r3, [pc, #328]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfe:	494f      	ldr	r1, [pc, #316]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e12:	4b4a      	ldr	r3, [pc, #296]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	4946      	ldr	r1, [pc, #280]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e34:	4b41      	ldr	r3, [pc, #260]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e42:	493e      	ldr	r1, [pc, #248]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e56:	4b39      	ldr	r3, [pc, #228]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e64:	4935      	ldr	r1, [pc, #212]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00a      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e78:	4b30      	ldr	r3, [pc, #192]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e86:	492d      	ldr	r1, [pc, #180]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d011      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e9a:	4b28      	ldr	r3, [pc, #160]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ea8:	4924      	ldr	r1, [pc, #144]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb8:	d101      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004eda:	4b18      	ldr	r3, [pc, #96]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee8:	4914      	ldr	r1, [pc, #80]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00b      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004efc:	4b0f      	ldr	r3, [pc, #60]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f0c:	490b      	ldr	r1, [pc, #44]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00f      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f26:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f30:	4902      	ldr	r1, [pc, #8]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f38:	e002      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004f3a:	bf00      	nop
 8004f3c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00b      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f4c:	4b8a      	ldr	r3, [pc, #552]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f52:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5c:	4986      	ldr	r1, [pc, #536]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00b      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f70:	4b81      	ldr	r3, [pc, #516]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f76:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f80:	497d      	ldr	r1, [pc, #500]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d006      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 80d6 	beq.w	8005148 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f9c:	4b76      	ldr	r3, [pc, #472]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a75      	ldr	r2, [pc, #468]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa8:	f7fc ffb6 	bl	8001f18 <HAL_GetTick>
 8004fac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fb0:	f7fc ffb2 	bl	8001f18 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b64      	cmp	r3, #100	; 0x64
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e195      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fc2:	4b6d      	ldr	r3, [pc, #436]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d021      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d11d      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fe2:	4b65      	ldr	r3, [pc, #404]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe8:	0c1b      	lsrs	r3, r3, #16
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ff0:	4b61      	ldr	r3, [pc, #388]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff6:	0e1b      	lsrs	r3, r3, #24
 8004ff8:	f003 030f 	and.w	r3, r3, #15
 8004ffc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	019a      	lsls	r2, r3, #6
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	041b      	lsls	r3, r3, #16
 8005008:	431a      	orrs	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	061b      	lsls	r3, r3, #24
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	071b      	lsls	r3, r3, #28
 8005016:	4958      	ldr	r1, [pc, #352]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d004      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005032:	d00a      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800503c:	2b00      	cmp	r3, #0
 800503e:	d02e      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005048:	d129      	bne.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800504a:	4b4b      	ldr	r3, [pc, #300]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800504c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005050:	0c1b      	lsrs	r3, r3, #16
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005058:	4b47      	ldr	r3, [pc, #284]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800505a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800505e:	0f1b      	lsrs	r3, r3, #28
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	019a      	lsls	r2, r3, #6
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	041b      	lsls	r3, r3, #16
 8005070:	431a      	orrs	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	061b      	lsls	r3, r3, #24
 8005078:	431a      	orrs	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	071b      	lsls	r3, r3, #28
 800507e:	493e      	ldr	r1, [pc, #248]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005086:	4b3c      	ldr	r3, [pc, #240]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800508c:	f023 021f 	bic.w	r2, r3, #31
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	3b01      	subs	r3, #1
 8005096:	4938      	ldr	r1, [pc, #224]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d01d      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050aa:	4b33      	ldr	r3, [pc, #204]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b0:	0e1b      	lsrs	r3, r3, #24
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050b8:	4b2f      	ldr	r3, [pc, #188]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050be:	0f1b      	lsrs	r3, r3, #28
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	019a      	lsls	r2, r3, #6
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	041b      	lsls	r3, r3, #16
 80050d2:	431a      	orrs	r2, r3
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	061b      	lsls	r3, r3, #24
 80050d8:	431a      	orrs	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	071b      	lsls	r3, r3, #28
 80050de:	4926      	ldr	r1, [pc, #152]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d011      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	019a      	lsls	r2, r3, #6
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	041b      	lsls	r3, r3, #16
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	061b      	lsls	r3, r3, #24
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	071b      	lsls	r3, r3, #28
 800510e:	491a      	ldr	r1, [pc, #104]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005116:	4b18      	ldr	r3, [pc, #96]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a17      	ldr	r2, [pc, #92]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800511c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005122:	f7fc fef9 	bl	8001f18 <HAL_GetTick>
 8005126:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005128:	e008      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800512a:	f7fc fef5 	bl	8001f18 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b64      	cmp	r3, #100	; 0x64
 8005136:	d901      	bls.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e0d8      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800513c:	4b0e      	ldr	r3, [pc, #56]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	2b01      	cmp	r3, #1
 800514c:	f040 80ce 	bne.w	80052ec <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005150:	4b09      	ldr	r3, [pc, #36]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a08      	ldr	r2, [pc, #32]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800515c:	f7fc fedc 	bl	8001f18 <HAL_GetTick>
 8005160:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005162:	e00b      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005164:	f7fc fed8 	bl	8001f18 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b64      	cmp	r3, #100	; 0x64
 8005170:	d904      	bls.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e0bb      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005176:	bf00      	nop
 8005178:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800517c:	4b5e      	ldr	r3, [pc, #376]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005188:	d0ec      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d02e      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d12a      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051b2:	4b51      	ldr	r3, [pc, #324]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b8:	0c1b      	lsrs	r3, r3, #16
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051c0:	4b4d      	ldr	r3, [pc, #308]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c6:	0f1b      	lsrs	r3, r3, #28
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	019a      	lsls	r2, r3, #6
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	041b      	lsls	r3, r3, #16
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	061b      	lsls	r3, r3, #24
 80051e0:	431a      	orrs	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	071b      	lsls	r3, r3, #28
 80051e6:	4944      	ldr	r1, [pc, #272]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051ee:	4b42      	ldr	r3, [pc, #264]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fc:	3b01      	subs	r3, #1
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	493d      	ldr	r1, [pc, #244]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d022      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800521c:	d11d      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800521e:	4b36      	ldr	r3, [pc, #216]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005224:	0e1b      	lsrs	r3, r3, #24
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800522c:	4b32      	ldr	r3, [pc, #200]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005232:	0f1b      	lsrs	r3, r3, #28
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	019a      	lsls	r2, r3, #6
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	041b      	lsls	r3, r3, #16
 8005246:	431a      	orrs	r2, r3
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	061b      	lsls	r3, r3, #24
 800524c:	431a      	orrs	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	071b      	lsls	r3, r3, #28
 8005252:	4929      	ldr	r1, [pc, #164]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d028      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005266:	4b24      	ldr	r3, [pc, #144]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526c:	0e1b      	lsrs	r3, r3, #24
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005274:	4b20      	ldr	r3, [pc, #128]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527a:	0c1b      	lsrs	r3, r3, #16
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	019a      	lsls	r2, r3, #6
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	041b      	lsls	r3, r3, #16
 800528c:	431a      	orrs	r2, r3
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	061b      	lsls	r3, r3, #24
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	071b      	lsls	r3, r3, #28
 800529a:	4917      	ldr	r1, [pc, #92]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052a2:	4b15      	ldr	r3, [pc, #84]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	4911      	ldr	r1, [pc, #68]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052b8:	4b0f      	ldr	r3, [pc, #60]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a0e      	ldr	r2, [pc, #56]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c4:	f7fc fe28 	bl	8001f18 <HAL_GetTick>
 80052c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052cc:	f7fc fe24 	bl	8001f18 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b64      	cmp	r3, #100	; 0x64
 80052d8:	d901      	bls.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e007      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052de:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ea:	d1ef      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3720      	adds	r7, #32
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40023800 	.word	0x40023800

080052fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e09d      	b.n	800544a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	2b00      	cmp	r3, #0
 8005314:	d108      	bne.n	8005328 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800531e:	d009      	beq.n	8005334 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	61da      	str	r2, [r3, #28]
 8005326:	e005      	b.n	8005334 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fc f942 	bl	80015d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800536a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005374:	d902      	bls.n	800537c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	e002      	b.n	8005382 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800537c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005380:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800538a:	d007      	beq.n	800539c <HAL_SPI_Init+0xa0>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005394:	d002      	beq.n	800539c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053de:	ea42 0103 	orr.w	r1, r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	0c1b      	lsrs	r3, r3, #16
 80053f8:	f003 0204 	and.w	r2, r3, #4
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005418:	ea42 0103 	orr.w	r1, r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005438:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b082      	sub	sp, #8
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e01a      	b.n	800549a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800547a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7fc f915 	bl	80016ac <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_SPI_TransmitReceive_IT+0x20>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e091      	b.n	80055e8 <HAL_SPI_TransmitReceive_IT+0x144>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054d2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054da:	7dbb      	ldrb	r3, [r7, #22]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d00d      	beq.n	80054fc <HAL_SPI_TransmitReceive_IT+0x58>
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e6:	d106      	bne.n	80054f6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d102      	bne.n	80054f6 <HAL_SPI_TransmitReceive_IT+0x52>
 80054f0:	7dbb      	ldrb	r3, [r7, #22]
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d002      	beq.n	80054fc <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80054f6:	2302      	movs	r3, #2
 80054f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054fa:	e070      	b.n	80055de <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d005      	beq.n	800550e <HAL_SPI_TransmitReceive_IT+0x6a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <HAL_SPI_TransmitReceive_IT+0x6a>
 8005508:	887b      	ldrh	r3, [r7, #2]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d102      	bne.n	8005514 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005512:	e064      	b.n	80055de <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b04      	cmp	r3, #4
 800551e:	d003      	beq.n	8005528 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2205      	movs	r2, #5
 8005524:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	887a      	ldrh	r2, [r7, #2]
 8005538:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	887a      	ldrh	r2, [r7, #2]
 800553e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	887a      	ldrh	r2, [r7, #2]
 800554a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	887a      	ldrh	r2, [r7, #2]
 8005552:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800555e:	d906      	bls.n	800556e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4a24      	ldr	r2, [pc, #144]	; (80055f4 <HAL_SPI_TransmitReceive_IT+0x150>)
 8005564:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4a23      	ldr	r2, [pc, #140]	; (80055f8 <HAL_SPI_TransmitReceive_IT+0x154>)
 800556a:	651a      	str	r2, [r3, #80]	; 0x50
 800556c:	e005      	b.n	800557a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4a22      	ldr	r2, [pc, #136]	; (80055fc <HAL_SPI_TransmitReceive_IT+0x158>)
 8005572:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4a22      	ldr	r2, [pc, #136]	; (8005600 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8005578:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005582:	d802      	bhi.n	800558a <HAL_SPI_TransmitReceive_IT+0xe6>
 8005584:	887b      	ldrh	r3, [r7, #2]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d908      	bls.n	800559c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005598:	605a      	str	r2, [r3, #4]
 800559a:	e007      	b.n	80055ac <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055aa:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80055ba:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c6:	2b40      	cmp	r3, #64	; 0x40
 80055c8:	d008      	beq.n	80055dc <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	e000      	b.n	80055de <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80055dc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80055e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	371c      	adds	r7, #28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	080059a7 	.word	0x080059a7
 80055f8:	08005a0d 	.word	0x08005a0d
 80055fc:	08005857 	.word	0x08005857
 8005600:	08005915 	.word	0x08005915

08005604 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	099b      	lsrs	r3, r3, #6
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10f      	bne.n	8005648 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	099b      	lsrs	r3, r3, #6
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d004      	beq.n	8005648 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	4798      	blx	r3
    return;
 8005646:	e0d7      	b.n	80057f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	085b      	lsrs	r3, r3, #1
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <HAL_SPI_IRQHandler+0x66>
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	09db      	lsrs	r3, r3, #7
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d004      	beq.n	800566a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	4798      	blx	r3
    return;
 8005668:	e0c6      	b.n	80057f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	095b      	lsrs	r3, r3, #5
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10c      	bne.n	8005690 <HAL_SPI_IRQHandler+0x8c>
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	099b      	lsrs	r3, r3, #6
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	0a1b      	lsrs	r3, r3, #8
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 80b4 	beq.w	80057f8 <HAL_SPI_IRQHandler+0x1f4>
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	095b      	lsrs	r3, r3, #5
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 80ad 	beq.w	80057f8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	099b      	lsrs	r3, r3, #6
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d023      	beq.n	80056f2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d011      	beq.n	80056da <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ba:	f043 0204 	orr.w	r2, r3, #4
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056c2:	2300      	movs	r3, #0
 80056c4:	617b      	str	r3, [r7, #20]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	e00b      	b.n	80056f2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056da:	2300      	movs	r3, #0
 80056dc:	613b      	str	r3, [r7, #16]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	693b      	ldr	r3, [r7, #16]
        return;
 80056f0:	e082      	b.n	80057f8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	095b      	lsrs	r3, r3, #5
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d014      	beq.n	8005728 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005702:	f043 0201 	orr.w	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	0a1b      	lsrs	r3, r3, #8
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00c      	beq.n	800574e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005738:	f043 0208 	orr.w	r2, r3, #8
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005740:	2300      	movs	r3, #0
 8005742:	60bb      	str	r3, [r7, #8]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	60bb      	str	r3, [r7, #8]
 800574c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005752:	2b00      	cmp	r3, #0
 8005754:	d04f      	beq.n	80057f6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005764:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d104      	bne.n	8005782 <HAL_SPI_IRQHandler+0x17e>
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d034      	beq.n	80057ec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 0203 	bic.w	r2, r2, #3
 8005790:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005796:	2b00      	cmp	r3, #0
 8005798:	d011      	beq.n	80057be <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579e:	4a18      	ldr	r2, [pc, #96]	; (8005800 <HAL_SPI_IRQHandler+0x1fc>)
 80057a0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fc fd76 	bl	8002298 <HAL_DMA_Abort_IT>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d016      	beq.n	80057f4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ca:	4a0d      	ldr	r2, [pc, #52]	; (8005800 <HAL_SPI_IRQHandler+0x1fc>)
 80057cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fc fd60 	bl	8002298 <HAL_DMA_Abort_IT>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80057ea:	e003      	b.n	80057f4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f813 	bl	8005818 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80057f2:	e000      	b.n	80057f6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80057f4:	bf00      	nop
    return;
 80057f6:	bf00      	nop
  }
}
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	0800582d 	.word	0x0800582d

08005804 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f7ff ffe5 	bl	8005818 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800584e:	bf00      	nop
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b082      	sub	sp, #8
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b01      	cmp	r3, #1
 8005868:	d923      	bls.n	80058b2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	b292      	uxth	r2, r2
 8005876:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	1c9a      	adds	r2, r3, #2
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b02      	subs	r3, #2
 800588c:	b29a      	uxth	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b01      	cmp	r3, #1
 800589e:	d11f      	bne.n	80058e0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058ae:	605a      	str	r2, [r3, #4]
 80058b0:	e016      	b.n	80058e0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f103 020c 	add.w	r2, r3, #12
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	7812      	ldrb	r2, [r2, #0]
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29a      	uxth	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10f      	bne.n	800590c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058fa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d102      	bne.n	800590c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fa38 	bl	8005d7c <SPI_CloseRxTx_ISR>
    }
  }
}
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b01      	cmp	r3, #1
 8005924:	d912      	bls.n	800594c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	881a      	ldrh	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005936:	1c9a      	adds	r2, r3, #2
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b02      	subs	r3, #2
 8005944:	b29a      	uxth	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	87da      	strh	r2, [r3, #62]	; 0x3e
 800594a:	e012      	b.n	8005972 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	330c      	adds	r3, #12
 8005956:	7812      	ldrb	r2, [r2, #0]
 8005958:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005968:	b29b      	uxth	r3, r3
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d110      	bne.n	800599e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800598a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005992:	b29b      	uxth	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d102      	bne.n	800599e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f9ef 	bl	8005d7c <SPI_CloseRxTx_ISR>
    }
  }
}
 800599e:	bf00      	nop
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b082      	sub	sp, #8
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	b292      	uxth	r2, r2
 80059ba:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	1c9a      	adds	r2, r3, #2
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10f      	bne.n	8005a04 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059f2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d102      	bne.n	8005a04 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f9bc 	bl	8005d7c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005a04:	bf00      	nop
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	881a      	ldrh	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a24:	1c9a      	adds	r2, r3, #2
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	3b01      	subs	r3, #1
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d110      	bne.n	8005a64 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a50:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d102      	bne.n	8005a64 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f98c 	bl	8005d7c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005a64:	bf00      	nop
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a7c:	f7fc fa4c 	bl	8001f18 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	1a9b      	subs	r3, r3, r2
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	4413      	add	r3, r2
 8005a8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a8c:	f7fc fa44 	bl	8001f18 <HAL_GetTick>
 8005a90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a92:	4b39      	ldr	r3, [pc, #228]	; (8005b78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	015b      	lsls	r3, r3, #5
 8005a98:	0d1b      	lsrs	r3, r3, #20
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	fb02 f303 	mul.w	r3, r2, r3
 8005aa0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aa2:	e054      	b.n	8005b4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aaa:	d050      	beq.n	8005b4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005aac:	f7fc fa34 	bl	8001f18 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d902      	bls.n	8005ac2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d13d      	bne.n	8005b3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ad0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ada:	d111      	bne.n	8005b00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ae4:	d004      	beq.n	8005af0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aee:	d107      	bne.n	8005b00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005afe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b08:	d10f      	bne.n	8005b2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e017      	b.n	8005b6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	4013      	ands	r3, r2
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	bf0c      	ite	eq
 8005b5e:	2301      	moveq	r3, #1
 8005b60:	2300      	movne	r3, #0
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	461a      	mov	r2, r3
 8005b66:	79fb      	ldrb	r3, [r7, #7]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d19b      	bne.n	8005aa4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3720      	adds	r7, #32
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000000 	.word	0x20000000

08005b7c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08a      	sub	sp, #40	; 0x28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b8e:	f7fc f9c3 	bl	8001f18 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	1a9b      	subs	r3, r3, r2
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005b9e:	f7fc f9bb 	bl	8001f18 <HAL_GetTick>
 8005ba2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	330c      	adds	r3, #12
 8005baa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005bac:	4b3d      	ldr	r3, [pc, #244]	; (8005ca4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	00da      	lsls	r2, r3, #3
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	0d1b      	lsrs	r3, r3, #20
 8005bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bbe:	fb02 f303 	mul.w	r3, r2, r3
 8005bc2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005bc4:	e060      	b.n	8005c88 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005bcc:	d107      	bne.n	8005bde <SPI_WaitFifoStateUntilTimeout+0x62>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d104      	bne.n	8005bde <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005bdc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005be4:	d050      	beq.n	8005c88 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005be6:	f7fc f997 	bl	8001f18 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d902      	bls.n	8005bfc <SPI_WaitFifoStateUntilTimeout+0x80>
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d13d      	bne.n	8005c78 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c14:	d111      	bne.n	8005c3a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c1e:	d004      	beq.n	8005c2a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c28:	d107      	bne.n	8005c3a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c42:	d10f      	bne.n	8005c64 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e010      	b.n	8005c9a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	4013      	ands	r3, r2
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d196      	bne.n	8005bc6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3728      	adds	r7, #40	; 0x28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20000000 	.word	0x20000000

08005ca8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f7ff ff5b 	bl	8005b7c <SPI_WaitFifoStateUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d007      	beq.n	8005cdc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd0:	f043 0220 	orr.w	r2, r3, #32
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e046      	b.n	8005d6a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005cdc:	4b25      	ldr	r3, [pc, #148]	; (8005d74 <SPI_EndRxTxTransaction+0xcc>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a25      	ldr	r2, [pc, #148]	; (8005d78 <SPI_EndRxTxTransaction+0xd0>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	0d5b      	lsrs	r3, r3, #21
 8005ce8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cec:	fb02 f303 	mul.w	r3, r2, r3
 8005cf0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cfa:	d112      	bne.n	8005d22 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2200      	movs	r2, #0
 8005d04:	2180      	movs	r1, #128	; 0x80
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f7ff feb0 	bl	8005a6c <SPI_WaitFlagStateUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d016      	beq.n	8005d40 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d16:	f043 0220 	orr.w	r2, r3, #32
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e023      	b.n	8005d6a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d38:	2b80      	cmp	r3, #128	; 0x80
 8005d3a:	d0f2      	beq.n	8005d22 <SPI_EndRxTxTransaction+0x7a>
 8005d3c:	e000      	b.n	8005d40 <SPI_EndRxTxTransaction+0x98>
        break;
 8005d3e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f7ff ff15 	bl	8005b7c <SPI_WaitFifoStateUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d007      	beq.n	8005d68 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d5c:	f043 0220 	orr.w	r2, r3, #32
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e000      	b.n	8005d6a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20000000 	.word	0x20000000
 8005d78:	165e9f81 	.word	0x165e9f81

08005d7c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d84:	f7fc f8c8 	bl	8001f18 <HAL_GetTick>
 8005d88:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0220 	bic.w	r2, r2, #32
 8005d98:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	2164      	movs	r1, #100	; 0x64
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff ff82 	bl	8005ca8 <SPI_EndRxTxTransaction>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dae:	f043 0220 	orr.w	r2, r3, #32
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d115      	bne.n	8005dea <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d107      	bne.n	8005dda <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff fd16 	bl	8005804 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005dd8:	e00e      	b.n	8005df8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fb fb18 	bl	8001418 <HAL_SPI_TxRxCpltCallback>
}
 8005de8:	e006      	b.n	8005df8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7ff fd10 	bl	8005818 <HAL_SPI_ErrorCallback>
}
 8005df8:	bf00      	nop
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e049      	b.n	8005ea6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f841 	bl	8005eae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	f000 fa00 	bl	8006244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
	...

08005ec4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d001      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e054      	b.n	8005f86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 0201 	orr.w	r2, r2, #1
 8005ef2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a26      	ldr	r2, [pc, #152]	; (8005f94 <HAL_TIM_Base_Start_IT+0xd0>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d022      	beq.n	8005f44 <HAL_TIM_Base_Start_IT+0x80>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f06:	d01d      	beq.n	8005f44 <HAL_TIM_Base_Start_IT+0x80>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a22      	ldr	r2, [pc, #136]	; (8005f98 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d018      	beq.n	8005f44 <HAL_TIM_Base_Start_IT+0x80>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a21      	ldr	r2, [pc, #132]	; (8005f9c <HAL_TIM_Base_Start_IT+0xd8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d013      	beq.n	8005f44 <HAL_TIM_Base_Start_IT+0x80>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1f      	ldr	r2, [pc, #124]	; (8005fa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00e      	beq.n	8005f44 <HAL_TIM_Base_Start_IT+0x80>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a1e      	ldr	r2, [pc, #120]	; (8005fa4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d009      	beq.n	8005f44 <HAL_TIM_Base_Start_IT+0x80>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1c      	ldr	r2, [pc, #112]	; (8005fa8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d004      	beq.n	8005f44 <HAL_TIM_Base_Start_IT+0x80>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a1b      	ldr	r2, [pc, #108]	; (8005fac <HAL_TIM_Base_Start_IT+0xe8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d115      	bne.n	8005f70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689a      	ldr	r2, [r3, #8]
 8005f4a:	4b19      	ldr	r3, [pc, #100]	; (8005fb0 <HAL_TIM_Base_Start_IT+0xec>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b06      	cmp	r3, #6
 8005f54:	d015      	beq.n	8005f82 <HAL_TIM_Base_Start_IT+0xbe>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5c:	d011      	beq.n	8005f82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f042 0201 	orr.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f6e:	e008      	b.n	8005f82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0201 	orr.w	r2, r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	e000      	b.n	8005f84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40010000 	.word	0x40010000
 8005f98:	40000400 	.word	0x40000400
 8005f9c:	40000800 	.word	0x40000800
 8005fa0:	40000c00 	.word	0x40000c00
 8005fa4:	40010400 	.word	0x40010400
 8005fa8:	40014000 	.word	0x40014000
 8005fac:	40001800 	.word	0x40001800
 8005fb0:	00010007 	.word	0x00010007

08005fb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d122      	bne.n	8006010 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d11b      	bne.n	8006010 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0202 	mvn.w	r2, #2
 8005fe0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f905 	bl	8006206 <HAL_TIM_IC_CaptureCallback>
 8005ffc:	e005      	b.n	800600a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f8f7 	bl	80061f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f908 	bl	800621a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b04      	cmp	r3, #4
 800601c:	d122      	bne.n	8006064 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b04      	cmp	r3, #4
 800602a:	d11b      	bne.n	8006064 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0204 	mvn.w	r2, #4
 8006034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2202      	movs	r2, #2
 800603a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f8db 	bl	8006206 <HAL_TIM_IC_CaptureCallback>
 8006050:	e005      	b.n	800605e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f8cd 	bl	80061f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f8de 	bl	800621a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f003 0308 	and.w	r3, r3, #8
 800606e:	2b08      	cmp	r3, #8
 8006070:	d122      	bne.n	80060b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f003 0308 	and.w	r3, r3, #8
 800607c:	2b08      	cmp	r3, #8
 800607e:	d11b      	bne.n	80060b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f06f 0208 	mvn.w	r2, #8
 8006088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2204      	movs	r2, #4
 800608e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f8b1 	bl	8006206 <HAL_TIM_IC_CaptureCallback>
 80060a4:	e005      	b.n	80060b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f8a3 	bl	80061f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f8b4 	bl	800621a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	f003 0310 	and.w	r3, r3, #16
 80060c2:	2b10      	cmp	r3, #16
 80060c4:	d122      	bne.n	800610c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	2b10      	cmp	r3, #16
 80060d2:	d11b      	bne.n	800610c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0210 	mvn.w	r2, #16
 80060dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2208      	movs	r2, #8
 80060e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f887 	bl	8006206 <HAL_TIM_IC_CaptureCallback>
 80060f8:	e005      	b.n	8006106 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f879 	bl	80061f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f88a 	bl	800621a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b01      	cmp	r3, #1
 8006118:	d10e      	bne.n	8006138 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b01      	cmp	r3, #1
 8006126:	d107      	bne.n	8006138 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0201 	mvn.w	r2, #1
 8006130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fa ff18 	bl	8000f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006142:	2b80      	cmp	r3, #128	; 0x80
 8006144:	d10e      	bne.n	8006164 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006150:	2b80      	cmp	r3, #128	; 0x80
 8006152:	d107      	bne.n	8006164 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800615c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f91a 	bl	8006398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800616e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006172:	d10e      	bne.n	8006192 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617e:	2b80      	cmp	r3, #128	; 0x80
 8006180:	d107      	bne.n	8006192 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800618a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f90d 	bl	80063ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619c:	2b40      	cmp	r3, #64	; 0x40
 800619e:	d10e      	bne.n	80061be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061aa:	2b40      	cmp	r3, #64	; 0x40
 80061ac:	d107      	bne.n	80061be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f838 	bl	800622e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	f003 0320 	and.w	r3, r3, #32
 80061c8:	2b20      	cmp	r3, #32
 80061ca:	d10e      	bne.n	80061ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b20      	cmp	r3, #32
 80061d8:	d107      	bne.n	80061ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f06f 0220 	mvn.w	r2, #32
 80061e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f8cd 	bl	8006384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061ea:	bf00      	nop
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
	...

08006244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a40      	ldr	r2, [pc, #256]	; (8006358 <TIM_Base_SetConfig+0x114>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d013      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006262:	d00f      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a3d      	ldr	r2, [pc, #244]	; (800635c <TIM_Base_SetConfig+0x118>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00b      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a3c      	ldr	r2, [pc, #240]	; (8006360 <TIM_Base_SetConfig+0x11c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d007      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a3b      	ldr	r2, [pc, #236]	; (8006364 <TIM_Base_SetConfig+0x120>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a3a      	ldr	r2, [pc, #232]	; (8006368 <TIM_Base_SetConfig+0x124>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d108      	bne.n	8006296 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a2f      	ldr	r2, [pc, #188]	; (8006358 <TIM_Base_SetConfig+0x114>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d02b      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a4:	d027      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a2c      	ldr	r2, [pc, #176]	; (800635c <TIM_Base_SetConfig+0x118>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d023      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2b      	ldr	r2, [pc, #172]	; (8006360 <TIM_Base_SetConfig+0x11c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d01f      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a2a      	ldr	r2, [pc, #168]	; (8006364 <TIM_Base_SetConfig+0x120>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d01b      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a29      	ldr	r2, [pc, #164]	; (8006368 <TIM_Base_SetConfig+0x124>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d017      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a28      	ldr	r2, [pc, #160]	; (800636c <TIM_Base_SetConfig+0x128>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a27      	ldr	r2, [pc, #156]	; (8006370 <TIM_Base_SetConfig+0x12c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00f      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a26      	ldr	r2, [pc, #152]	; (8006374 <TIM_Base_SetConfig+0x130>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a25      	ldr	r2, [pc, #148]	; (8006378 <TIM_Base_SetConfig+0x134>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d007      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a24      	ldr	r2, [pc, #144]	; (800637c <TIM_Base_SetConfig+0x138>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a23      	ldr	r2, [pc, #140]	; (8006380 <TIM_Base_SetConfig+0x13c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d108      	bne.n	8006308 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a0a      	ldr	r2, [pc, #40]	; (8006358 <TIM_Base_SetConfig+0x114>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d003      	beq.n	800633c <TIM_Base_SetConfig+0xf8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a0c      	ldr	r2, [pc, #48]	; (8006368 <TIM_Base_SetConfig+0x124>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d103      	bne.n	8006344 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	615a      	str	r2, [r3, #20]
}
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	40010000 	.word	0x40010000
 800635c:	40000400 	.word	0x40000400
 8006360:	40000800 	.word	0x40000800
 8006364:	40000c00 	.word	0x40000c00
 8006368:	40010400 	.word	0x40010400
 800636c:	40014000 	.word	0x40014000
 8006370:	40014400 	.word	0x40014400
 8006374:	40014800 	.word	0x40014800
 8006378:	40001800 	.word	0x40001800
 800637c:	40001c00 	.word	0x40001c00
 8006380:	40002000 	.word	0x40002000

08006384 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e040      	b.n	8006454 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7fb f988 	bl	80016f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2224      	movs	r2, #36	; 0x24
 80063ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f022 0201 	bic.w	r2, r2, #1
 80063fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f82c 	bl	800645c <UART_SetConfig>
 8006404:	4603      	mov	r3, r0
 8006406:	2b01      	cmp	r3, #1
 8006408:	d101      	bne.n	800640e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e022      	b.n	8006454 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fa84 	bl	8006924 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800642a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800643a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0201 	orr.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fb0b 	bl	8006a68 <UART_CheckIdleState>
 8006452:	4603      	mov	r3, r0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	431a      	orrs	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	431a      	orrs	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	4313      	orrs	r3, r2
 800647e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	4ba6      	ldr	r3, [pc, #664]	; (8006720 <UART_SetConfig+0x2c4>)
 8006488:	4013      	ands	r3, r2
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	6812      	ldr	r2, [r2, #0]
 800648e:	6979      	ldr	r1, [r7, #20]
 8006490:	430b      	orrs	r3, r1
 8006492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a94      	ldr	r2, [pc, #592]	; (8006724 <UART_SetConfig+0x2c8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d120      	bne.n	800651a <UART_SetConfig+0xbe>
 80064d8:	4b93      	ldr	r3, [pc, #588]	; (8006728 <UART_SetConfig+0x2cc>)
 80064da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064de:	f003 0303 	and.w	r3, r3, #3
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d816      	bhi.n	8006514 <UART_SetConfig+0xb8>
 80064e6:	a201      	add	r2, pc, #4	; (adr r2, 80064ec <UART_SetConfig+0x90>)
 80064e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ec:	080064fd 	.word	0x080064fd
 80064f0:	08006509 	.word	0x08006509
 80064f4:	08006503 	.word	0x08006503
 80064f8:	0800650f 	.word	0x0800650f
 80064fc:	2301      	movs	r3, #1
 80064fe:	77fb      	strb	r3, [r7, #31]
 8006500:	e150      	b.n	80067a4 <UART_SetConfig+0x348>
 8006502:	2302      	movs	r3, #2
 8006504:	77fb      	strb	r3, [r7, #31]
 8006506:	e14d      	b.n	80067a4 <UART_SetConfig+0x348>
 8006508:	2304      	movs	r3, #4
 800650a:	77fb      	strb	r3, [r7, #31]
 800650c:	e14a      	b.n	80067a4 <UART_SetConfig+0x348>
 800650e:	2308      	movs	r3, #8
 8006510:	77fb      	strb	r3, [r7, #31]
 8006512:	e147      	b.n	80067a4 <UART_SetConfig+0x348>
 8006514:	2310      	movs	r3, #16
 8006516:	77fb      	strb	r3, [r7, #31]
 8006518:	e144      	b.n	80067a4 <UART_SetConfig+0x348>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a83      	ldr	r2, [pc, #524]	; (800672c <UART_SetConfig+0x2d0>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d132      	bne.n	800658a <UART_SetConfig+0x12e>
 8006524:	4b80      	ldr	r3, [pc, #512]	; (8006728 <UART_SetConfig+0x2cc>)
 8006526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652a:	f003 030c 	and.w	r3, r3, #12
 800652e:	2b0c      	cmp	r3, #12
 8006530:	d828      	bhi.n	8006584 <UART_SetConfig+0x128>
 8006532:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <UART_SetConfig+0xdc>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	0800656d 	.word	0x0800656d
 800653c:	08006585 	.word	0x08006585
 8006540:	08006585 	.word	0x08006585
 8006544:	08006585 	.word	0x08006585
 8006548:	08006579 	.word	0x08006579
 800654c:	08006585 	.word	0x08006585
 8006550:	08006585 	.word	0x08006585
 8006554:	08006585 	.word	0x08006585
 8006558:	08006573 	.word	0x08006573
 800655c:	08006585 	.word	0x08006585
 8006560:	08006585 	.word	0x08006585
 8006564:	08006585 	.word	0x08006585
 8006568:	0800657f 	.word	0x0800657f
 800656c:	2300      	movs	r3, #0
 800656e:	77fb      	strb	r3, [r7, #31]
 8006570:	e118      	b.n	80067a4 <UART_SetConfig+0x348>
 8006572:	2302      	movs	r3, #2
 8006574:	77fb      	strb	r3, [r7, #31]
 8006576:	e115      	b.n	80067a4 <UART_SetConfig+0x348>
 8006578:	2304      	movs	r3, #4
 800657a:	77fb      	strb	r3, [r7, #31]
 800657c:	e112      	b.n	80067a4 <UART_SetConfig+0x348>
 800657e:	2308      	movs	r3, #8
 8006580:	77fb      	strb	r3, [r7, #31]
 8006582:	e10f      	b.n	80067a4 <UART_SetConfig+0x348>
 8006584:	2310      	movs	r3, #16
 8006586:	77fb      	strb	r3, [r7, #31]
 8006588:	e10c      	b.n	80067a4 <UART_SetConfig+0x348>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a68      	ldr	r2, [pc, #416]	; (8006730 <UART_SetConfig+0x2d4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d120      	bne.n	80065d6 <UART_SetConfig+0x17a>
 8006594:	4b64      	ldr	r3, [pc, #400]	; (8006728 <UART_SetConfig+0x2cc>)
 8006596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800659a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800659e:	2b30      	cmp	r3, #48	; 0x30
 80065a0:	d013      	beq.n	80065ca <UART_SetConfig+0x16e>
 80065a2:	2b30      	cmp	r3, #48	; 0x30
 80065a4:	d814      	bhi.n	80065d0 <UART_SetConfig+0x174>
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d009      	beq.n	80065be <UART_SetConfig+0x162>
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	d810      	bhi.n	80065d0 <UART_SetConfig+0x174>
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <UART_SetConfig+0x15c>
 80065b2:	2b10      	cmp	r3, #16
 80065b4:	d006      	beq.n	80065c4 <UART_SetConfig+0x168>
 80065b6:	e00b      	b.n	80065d0 <UART_SetConfig+0x174>
 80065b8:	2300      	movs	r3, #0
 80065ba:	77fb      	strb	r3, [r7, #31]
 80065bc:	e0f2      	b.n	80067a4 <UART_SetConfig+0x348>
 80065be:	2302      	movs	r3, #2
 80065c0:	77fb      	strb	r3, [r7, #31]
 80065c2:	e0ef      	b.n	80067a4 <UART_SetConfig+0x348>
 80065c4:	2304      	movs	r3, #4
 80065c6:	77fb      	strb	r3, [r7, #31]
 80065c8:	e0ec      	b.n	80067a4 <UART_SetConfig+0x348>
 80065ca:	2308      	movs	r3, #8
 80065cc:	77fb      	strb	r3, [r7, #31]
 80065ce:	e0e9      	b.n	80067a4 <UART_SetConfig+0x348>
 80065d0:	2310      	movs	r3, #16
 80065d2:	77fb      	strb	r3, [r7, #31]
 80065d4:	e0e6      	b.n	80067a4 <UART_SetConfig+0x348>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a56      	ldr	r2, [pc, #344]	; (8006734 <UART_SetConfig+0x2d8>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d120      	bne.n	8006622 <UART_SetConfig+0x1c6>
 80065e0:	4b51      	ldr	r3, [pc, #324]	; (8006728 <UART_SetConfig+0x2cc>)
 80065e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065ea:	2bc0      	cmp	r3, #192	; 0xc0
 80065ec:	d013      	beq.n	8006616 <UART_SetConfig+0x1ba>
 80065ee:	2bc0      	cmp	r3, #192	; 0xc0
 80065f0:	d814      	bhi.n	800661c <UART_SetConfig+0x1c0>
 80065f2:	2b80      	cmp	r3, #128	; 0x80
 80065f4:	d009      	beq.n	800660a <UART_SetConfig+0x1ae>
 80065f6:	2b80      	cmp	r3, #128	; 0x80
 80065f8:	d810      	bhi.n	800661c <UART_SetConfig+0x1c0>
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <UART_SetConfig+0x1a8>
 80065fe:	2b40      	cmp	r3, #64	; 0x40
 8006600:	d006      	beq.n	8006610 <UART_SetConfig+0x1b4>
 8006602:	e00b      	b.n	800661c <UART_SetConfig+0x1c0>
 8006604:	2300      	movs	r3, #0
 8006606:	77fb      	strb	r3, [r7, #31]
 8006608:	e0cc      	b.n	80067a4 <UART_SetConfig+0x348>
 800660a:	2302      	movs	r3, #2
 800660c:	77fb      	strb	r3, [r7, #31]
 800660e:	e0c9      	b.n	80067a4 <UART_SetConfig+0x348>
 8006610:	2304      	movs	r3, #4
 8006612:	77fb      	strb	r3, [r7, #31]
 8006614:	e0c6      	b.n	80067a4 <UART_SetConfig+0x348>
 8006616:	2308      	movs	r3, #8
 8006618:	77fb      	strb	r3, [r7, #31]
 800661a:	e0c3      	b.n	80067a4 <UART_SetConfig+0x348>
 800661c:	2310      	movs	r3, #16
 800661e:	77fb      	strb	r3, [r7, #31]
 8006620:	e0c0      	b.n	80067a4 <UART_SetConfig+0x348>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a44      	ldr	r2, [pc, #272]	; (8006738 <UART_SetConfig+0x2dc>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d125      	bne.n	8006678 <UART_SetConfig+0x21c>
 800662c:	4b3e      	ldr	r3, [pc, #248]	; (8006728 <UART_SetConfig+0x2cc>)
 800662e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800663a:	d017      	beq.n	800666c <UART_SetConfig+0x210>
 800663c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006640:	d817      	bhi.n	8006672 <UART_SetConfig+0x216>
 8006642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006646:	d00b      	beq.n	8006660 <UART_SetConfig+0x204>
 8006648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800664c:	d811      	bhi.n	8006672 <UART_SetConfig+0x216>
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <UART_SetConfig+0x1fe>
 8006652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006656:	d006      	beq.n	8006666 <UART_SetConfig+0x20a>
 8006658:	e00b      	b.n	8006672 <UART_SetConfig+0x216>
 800665a:	2300      	movs	r3, #0
 800665c:	77fb      	strb	r3, [r7, #31]
 800665e:	e0a1      	b.n	80067a4 <UART_SetConfig+0x348>
 8006660:	2302      	movs	r3, #2
 8006662:	77fb      	strb	r3, [r7, #31]
 8006664:	e09e      	b.n	80067a4 <UART_SetConfig+0x348>
 8006666:	2304      	movs	r3, #4
 8006668:	77fb      	strb	r3, [r7, #31]
 800666a:	e09b      	b.n	80067a4 <UART_SetConfig+0x348>
 800666c:	2308      	movs	r3, #8
 800666e:	77fb      	strb	r3, [r7, #31]
 8006670:	e098      	b.n	80067a4 <UART_SetConfig+0x348>
 8006672:	2310      	movs	r3, #16
 8006674:	77fb      	strb	r3, [r7, #31]
 8006676:	e095      	b.n	80067a4 <UART_SetConfig+0x348>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a2f      	ldr	r2, [pc, #188]	; (800673c <UART_SetConfig+0x2e0>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d125      	bne.n	80066ce <UART_SetConfig+0x272>
 8006682:	4b29      	ldr	r3, [pc, #164]	; (8006728 <UART_SetConfig+0x2cc>)
 8006684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006688:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800668c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006690:	d017      	beq.n	80066c2 <UART_SetConfig+0x266>
 8006692:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006696:	d817      	bhi.n	80066c8 <UART_SetConfig+0x26c>
 8006698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800669c:	d00b      	beq.n	80066b6 <UART_SetConfig+0x25a>
 800669e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066a2:	d811      	bhi.n	80066c8 <UART_SetConfig+0x26c>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d003      	beq.n	80066b0 <UART_SetConfig+0x254>
 80066a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ac:	d006      	beq.n	80066bc <UART_SetConfig+0x260>
 80066ae:	e00b      	b.n	80066c8 <UART_SetConfig+0x26c>
 80066b0:	2301      	movs	r3, #1
 80066b2:	77fb      	strb	r3, [r7, #31]
 80066b4:	e076      	b.n	80067a4 <UART_SetConfig+0x348>
 80066b6:	2302      	movs	r3, #2
 80066b8:	77fb      	strb	r3, [r7, #31]
 80066ba:	e073      	b.n	80067a4 <UART_SetConfig+0x348>
 80066bc:	2304      	movs	r3, #4
 80066be:	77fb      	strb	r3, [r7, #31]
 80066c0:	e070      	b.n	80067a4 <UART_SetConfig+0x348>
 80066c2:	2308      	movs	r3, #8
 80066c4:	77fb      	strb	r3, [r7, #31]
 80066c6:	e06d      	b.n	80067a4 <UART_SetConfig+0x348>
 80066c8:	2310      	movs	r3, #16
 80066ca:	77fb      	strb	r3, [r7, #31]
 80066cc:	e06a      	b.n	80067a4 <UART_SetConfig+0x348>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a1b      	ldr	r2, [pc, #108]	; (8006740 <UART_SetConfig+0x2e4>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d138      	bne.n	800674a <UART_SetConfig+0x2ee>
 80066d8:	4b13      	ldr	r3, [pc, #76]	; (8006728 <UART_SetConfig+0x2cc>)
 80066da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80066e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066e6:	d017      	beq.n	8006718 <UART_SetConfig+0x2bc>
 80066e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066ec:	d82a      	bhi.n	8006744 <UART_SetConfig+0x2e8>
 80066ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066f2:	d00b      	beq.n	800670c <UART_SetConfig+0x2b0>
 80066f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066f8:	d824      	bhi.n	8006744 <UART_SetConfig+0x2e8>
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <UART_SetConfig+0x2aa>
 80066fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006702:	d006      	beq.n	8006712 <UART_SetConfig+0x2b6>
 8006704:	e01e      	b.n	8006744 <UART_SetConfig+0x2e8>
 8006706:	2300      	movs	r3, #0
 8006708:	77fb      	strb	r3, [r7, #31]
 800670a:	e04b      	b.n	80067a4 <UART_SetConfig+0x348>
 800670c:	2302      	movs	r3, #2
 800670e:	77fb      	strb	r3, [r7, #31]
 8006710:	e048      	b.n	80067a4 <UART_SetConfig+0x348>
 8006712:	2304      	movs	r3, #4
 8006714:	77fb      	strb	r3, [r7, #31]
 8006716:	e045      	b.n	80067a4 <UART_SetConfig+0x348>
 8006718:	2308      	movs	r3, #8
 800671a:	77fb      	strb	r3, [r7, #31]
 800671c:	e042      	b.n	80067a4 <UART_SetConfig+0x348>
 800671e:	bf00      	nop
 8006720:	efff69f3 	.word	0xefff69f3
 8006724:	40011000 	.word	0x40011000
 8006728:	40023800 	.word	0x40023800
 800672c:	40004400 	.word	0x40004400
 8006730:	40004800 	.word	0x40004800
 8006734:	40004c00 	.word	0x40004c00
 8006738:	40005000 	.word	0x40005000
 800673c:	40011400 	.word	0x40011400
 8006740:	40007800 	.word	0x40007800
 8006744:	2310      	movs	r3, #16
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	e02c      	b.n	80067a4 <UART_SetConfig+0x348>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a72      	ldr	r2, [pc, #456]	; (8006918 <UART_SetConfig+0x4bc>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d125      	bne.n	80067a0 <UART_SetConfig+0x344>
 8006754:	4b71      	ldr	r3, [pc, #452]	; (800691c <UART_SetConfig+0x4c0>)
 8006756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800675e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006762:	d017      	beq.n	8006794 <UART_SetConfig+0x338>
 8006764:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006768:	d817      	bhi.n	800679a <UART_SetConfig+0x33e>
 800676a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800676e:	d00b      	beq.n	8006788 <UART_SetConfig+0x32c>
 8006770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006774:	d811      	bhi.n	800679a <UART_SetConfig+0x33e>
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <UART_SetConfig+0x326>
 800677a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800677e:	d006      	beq.n	800678e <UART_SetConfig+0x332>
 8006780:	e00b      	b.n	800679a <UART_SetConfig+0x33e>
 8006782:	2300      	movs	r3, #0
 8006784:	77fb      	strb	r3, [r7, #31]
 8006786:	e00d      	b.n	80067a4 <UART_SetConfig+0x348>
 8006788:	2302      	movs	r3, #2
 800678a:	77fb      	strb	r3, [r7, #31]
 800678c:	e00a      	b.n	80067a4 <UART_SetConfig+0x348>
 800678e:	2304      	movs	r3, #4
 8006790:	77fb      	strb	r3, [r7, #31]
 8006792:	e007      	b.n	80067a4 <UART_SetConfig+0x348>
 8006794:	2308      	movs	r3, #8
 8006796:	77fb      	strb	r3, [r7, #31]
 8006798:	e004      	b.n	80067a4 <UART_SetConfig+0x348>
 800679a:	2310      	movs	r3, #16
 800679c:	77fb      	strb	r3, [r7, #31]
 800679e:	e001      	b.n	80067a4 <UART_SetConfig+0x348>
 80067a0:	2310      	movs	r3, #16
 80067a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ac:	d15b      	bne.n	8006866 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80067ae:	7ffb      	ldrb	r3, [r7, #31]
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d828      	bhi.n	8006806 <UART_SetConfig+0x3aa>
 80067b4:	a201      	add	r2, pc, #4	; (adr r2, 80067bc <UART_SetConfig+0x360>)
 80067b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ba:	bf00      	nop
 80067bc:	080067e1 	.word	0x080067e1
 80067c0:	080067e9 	.word	0x080067e9
 80067c4:	080067f1 	.word	0x080067f1
 80067c8:	08006807 	.word	0x08006807
 80067cc:	080067f7 	.word	0x080067f7
 80067d0:	08006807 	.word	0x08006807
 80067d4:	08006807 	.word	0x08006807
 80067d8:	08006807 	.word	0x08006807
 80067dc:	080067ff 	.word	0x080067ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067e0:	f7fe f90a 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 80067e4:	61b8      	str	r0, [r7, #24]
        break;
 80067e6:	e013      	b.n	8006810 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067e8:	f7fe f91a 	bl	8004a20 <HAL_RCC_GetPCLK2Freq>
 80067ec:	61b8      	str	r0, [r7, #24]
        break;
 80067ee:	e00f      	b.n	8006810 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067f0:	4b4b      	ldr	r3, [pc, #300]	; (8006920 <UART_SetConfig+0x4c4>)
 80067f2:	61bb      	str	r3, [r7, #24]
        break;
 80067f4:	e00c      	b.n	8006810 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067f6:	f7fd ffed 	bl	80047d4 <HAL_RCC_GetSysClockFreq>
 80067fa:	61b8      	str	r0, [r7, #24]
        break;
 80067fc:	e008      	b.n	8006810 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006802:	61bb      	str	r3, [r7, #24]
        break;
 8006804:	e004      	b.n	8006810 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006806:	2300      	movs	r3, #0
 8006808:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	77bb      	strb	r3, [r7, #30]
        break;
 800680e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d074      	beq.n	8006900 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	005a      	lsls	r2, r3, #1
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	085b      	lsrs	r3, r3, #1
 8006820:	441a      	add	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	fbb2 f3f3 	udiv	r3, r2, r3
 800682a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	2b0f      	cmp	r3, #15
 8006830:	d916      	bls.n	8006860 <UART_SetConfig+0x404>
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006838:	d212      	bcs.n	8006860 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	b29b      	uxth	r3, r3
 800683e:	f023 030f 	bic.w	r3, r3, #15
 8006842:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	085b      	lsrs	r3, r3, #1
 8006848:	b29b      	uxth	r3, r3
 800684a:	f003 0307 	and.w	r3, r3, #7
 800684e:	b29a      	uxth	r2, r3
 8006850:	89fb      	ldrh	r3, [r7, #14]
 8006852:	4313      	orrs	r3, r2
 8006854:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	89fa      	ldrh	r2, [r7, #14]
 800685c:	60da      	str	r2, [r3, #12]
 800685e:	e04f      	b.n	8006900 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	77bb      	strb	r3, [r7, #30]
 8006864:	e04c      	b.n	8006900 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006866:	7ffb      	ldrb	r3, [r7, #31]
 8006868:	2b08      	cmp	r3, #8
 800686a:	d828      	bhi.n	80068be <UART_SetConfig+0x462>
 800686c:	a201      	add	r2, pc, #4	; (adr r2, 8006874 <UART_SetConfig+0x418>)
 800686e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006872:	bf00      	nop
 8006874:	08006899 	.word	0x08006899
 8006878:	080068a1 	.word	0x080068a1
 800687c:	080068a9 	.word	0x080068a9
 8006880:	080068bf 	.word	0x080068bf
 8006884:	080068af 	.word	0x080068af
 8006888:	080068bf 	.word	0x080068bf
 800688c:	080068bf 	.word	0x080068bf
 8006890:	080068bf 	.word	0x080068bf
 8006894:	080068b7 	.word	0x080068b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006898:	f7fe f8ae 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 800689c:	61b8      	str	r0, [r7, #24]
        break;
 800689e:	e013      	b.n	80068c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068a0:	f7fe f8be 	bl	8004a20 <HAL_RCC_GetPCLK2Freq>
 80068a4:	61b8      	str	r0, [r7, #24]
        break;
 80068a6:	e00f      	b.n	80068c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068a8:	4b1d      	ldr	r3, [pc, #116]	; (8006920 <UART_SetConfig+0x4c4>)
 80068aa:	61bb      	str	r3, [r7, #24]
        break;
 80068ac:	e00c      	b.n	80068c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ae:	f7fd ff91 	bl	80047d4 <HAL_RCC_GetSysClockFreq>
 80068b2:	61b8      	str	r0, [r7, #24]
        break;
 80068b4:	e008      	b.n	80068c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ba:	61bb      	str	r3, [r7, #24]
        break;
 80068bc:	e004      	b.n	80068c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	77bb      	strb	r3, [r7, #30]
        break;
 80068c6:	bf00      	nop
    }

    if (pclk != 0U)
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d018      	beq.n	8006900 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	085a      	lsrs	r2, r3, #1
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	441a      	add	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	2b0f      	cmp	r3, #15
 80068e6:	d909      	bls.n	80068fc <UART_SetConfig+0x4a0>
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ee:	d205      	bcs.n	80068fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	60da      	str	r2, [r3, #12]
 80068fa:	e001      	b.n	8006900 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800690c:	7fbb      	ldrb	r3, [r7, #30]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3720      	adds	r7, #32
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	40007c00 	.word	0x40007c00
 800691c:	40023800 	.word	0x40023800
 8006920:	00f42400 	.word	0x00f42400

08006924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00a      	beq.n	8006992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	f003 0308 	and.w	r3, r3, #8
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	f003 0310 	and.w	r3, r3, #16
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00a      	beq.n	80069d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	f003 0320 	and.w	r3, r3, #32
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d01a      	beq.n	8006a3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a22:	d10a      	bne.n	8006a3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	605a      	str	r2, [r3, #4]
  }
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a78:	f7fb fa4e 	bl	8001f18 <HAL_GetTick>
 8006a7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0308 	and.w	r3, r3, #8
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d10e      	bne.n	8006aaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f831 	bl	8006b02 <UART_WaitOnFlagUntilTimeout>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e027      	b.n	8006afa <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	2b04      	cmp	r3, #4
 8006ab6:	d10e      	bne.n	8006ad6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ab8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f81b 	bl	8006b02 <UART_WaitOnFlagUntilTimeout>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e011      	b.n	8006afa <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b09c      	sub	sp, #112	; 0x70
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	603b      	str	r3, [r7, #0]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b12:	e0a7      	b.n	8006c64 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b1a:	f000 80a3 	beq.w	8006c64 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b1e:	f7fb f9fb 	bl	8001f18 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d302      	bcc.n	8006b34 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d13f      	bne.n	8006bb4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b3c:	e853 3f00 	ldrex	r3, [r3]
 8006b40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b48:	667b      	str	r3, [r7, #100]	; 0x64
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e6      	bne.n	8006b34 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3308      	adds	r3, #8
 8006b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b78:	f023 0301 	bic.w	r3, r3, #1
 8006b7c:	663b      	str	r3, [r7, #96]	; 0x60
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3308      	adds	r3, #8
 8006b84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b86:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e5      	bne.n	8006b66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e068      	b.n	8006c86 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0304 	and.w	r3, r3, #4
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d050      	beq.n	8006c64 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd0:	d148      	bne.n	8006c64 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bda:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8006bfc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c02:	e841 2300 	strex	r3, r2, [r1]
 8006c06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1e6      	bne.n	8006bdc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3308      	adds	r3, #8
 8006c14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	e853 3f00 	ldrex	r3, [r3]
 8006c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	f023 0301 	bic.w	r3, r3, #1
 8006c24:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c2e:	623a      	str	r2, [r7, #32]
 8006c30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	69f9      	ldr	r1, [r7, #28]
 8006c34:	6a3a      	ldr	r2, [r7, #32]
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e5      	bne.n	8006c0e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2220      	movs	r2, #32
 8006c46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2220      	movs	r2, #32
 8006c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e010      	b.n	8006c86 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	69da      	ldr	r2, [r3, #28]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	bf0c      	ite	eq
 8006c74:	2301      	moveq	r3, #1
 8006c76:	2300      	movne	r3, #0
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	f43f af48 	beq.w	8006b14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3770      	adds	r7, #112	; 0x70
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
	...

08006c90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c90:	b084      	sub	sp, #16
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b084      	sub	sp, #16
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	f107 001c 	add.w	r0, r7, #28
 8006c9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d120      	bne.n	8006cea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	4b20      	ldr	r3, [pc, #128]	; (8006d3c <USB_CoreInit+0xac>)
 8006cba:	4013      	ands	r3, r2
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d105      	bne.n	8006cde <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fa96 	bl	8007210 <USB_CoreReset>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	73fb      	strb	r3, [r7, #15]
 8006ce8:	e010      	b.n	8006d0c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fa8a 	bl	8007210 <USB_CoreReset>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d10b      	bne.n	8006d2a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f043 0206 	orr.w	r2, r3, #6
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f043 0220 	orr.w	r2, r3, #32
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d36:	b004      	add	sp, #16
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	ffbdffbf 	.word	0xffbdffbf

08006d40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f023 0201 	bic.w	r2, r3, #1
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b084      	sub	sp, #16
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d7e:	78fb      	ldrb	r3, [r7, #3]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d115      	bne.n	8006db0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d90:	2001      	movs	r0, #1
 8006d92:	f7fb f8cd 	bl	8001f30 <HAL_Delay>
      ms++;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fa29 	bl	80071f4 <USB_GetMode>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d01e      	beq.n	8006de6 <USB_SetCurrentMode+0x84>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2b31      	cmp	r3, #49	; 0x31
 8006dac:	d9f0      	bls.n	8006d90 <USB_SetCurrentMode+0x2e>
 8006dae:	e01a      	b.n	8006de6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006db0:	78fb      	ldrb	r3, [r7, #3]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d115      	bne.n	8006de2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006dc2:	2001      	movs	r0, #1
 8006dc4:	f7fb f8b4 	bl	8001f30 <HAL_Delay>
      ms++;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fa10 	bl	80071f4 <USB_GetMode>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d005      	beq.n	8006de6 <USB_SetCurrentMode+0x84>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b31      	cmp	r3, #49	; 0x31
 8006dde:	d9f0      	bls.n	8006dc2 <USB_SetCurrentMode+0x60>
 8006de0:	e001      	b.n	8006de6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e005      	b.n	8006df2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b32      	cmp	r3, #50	; 0x32
 8006dea:	d101      	bne.n	8006df0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e000      	b.n	8006df2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
	...

08006dfc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b086      	sub	sp, #24
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e16:	2300      	movs	r3, #0
 8006e18:	613b      	str	r3, [r7, #16]
 8006e1a:	e009      	b.n	8006e30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	3340      	adds	r3, #64	; 0x40
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	2200      	movs	r2, #0
 8006e28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	613b      	str	r3, [r7, #16]
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	2b0e      	cmp	r3, #14
 8006e34:	d9f2      	bls.n	8006e1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d11c      	bne.n	8006e76 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e4a:	f043 0302 	orr.w	r3, r3, #2
 8006e4e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	e005      	b.n	8006e82 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e88:	461a      	mov	r2, r3
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e94:	4619      	mov	r1, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	680b      	ldr	r3, [r1, #0]
 8006ea0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d10c      	bne.n	8006ec2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d104      	bne.n	8006eb8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006eae:	2100      	movs	r1, #0
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f965 	bl	8007180 <USB_SetDevSpeed>
 8006eb6:	e008      	b.n	8006eca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006eb8:	2101      	movs	r1, #1
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f960 	bl	8007180 <USB_SetDevSpeed>
 8006ec0:	e003      	b.n	8006eca <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ec2:	2103      	movs	r1, #3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f95b 	bl	8007180 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006eca:	2110      	movs	r1, #16
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f8f3 	bl	80070b8 <USB_FlushTxFifo>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f91f 	bl	8007120 <USB_FlushRxFifo>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efe:	461a      	mov	r2, r3
 8006f00:	2300      	movs	r3, #0
 8006f02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f10:	2300      	movs	r3, #0
 8006f12:	613b      	str	r3, [r7, #16]
 8006f14:	e043      	b.n	8006f9e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f2c:	d118      	bne.n	8006f60 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10a      	bne.n	8006f4a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f40:	461a      	mov	r2, r3
 8006f42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	e013      	b.n	8006f72 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f56:	461a      	mov	r2, r3
 8006f58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f5c:	6013      	str	r3, [r2, #0]
 8006f5e:	e008      	b.n	8006f72 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	2300      	movs	r3, #0
 8006f70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	015a      	lsls	r2, r3, #5
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7e:	461a      	mov	r2, r3
 8006f80:	2300      	movs	r3, #0
 8006f82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f90:	461a      	mov	r2, r3
 8006f92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	613b      	str	r3, [r7, #16]
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d3b7      	bcc.n	8006f16 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	613b      	str	r3, [r7, #16]
 8006faa:	e043      	b.n	8007034 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fc2:	d118      	bne.n	8006ff6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10a      	bne.n	8006fe0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	015a      	lsls	r2, r3, #5
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	e013      	b.n	8007008 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fec:	461a      	mov	r2, r3
 8006fee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ff2:	6013      	str	r3, [r2, #0]
 8006ff4:	e008      	b.n	8007008 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007002:	461a      	mov	r2, r3
 8007004:	2300      	movs	r3, #0
 8007006:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4413      	add	r3, r2
 8007010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007014:	461a      	mov	r2, r3
 8007016:	2300      	movs	r3, #0
 8007018:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	4413      	add	r3, r2
 8007022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007026:	461a      	mov	r2, r3
 8007028:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800702c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	3301      	adds	r3, #1
 8007032:	613b      	str	r3, [r7, #16]
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	429a      	cmp	r2, r3
 800703a:	d3b7      	bcc.n	8006fac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800704a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800704e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800705c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007060:	2b00      	cmp	r3, #0
 8007062:	d105      	bne.n	8007070 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	f043 0210 	orr.w	r2, r3, #16
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	699a      	ldr	r2, [r3, #24]
 8007074:	4b0e      	ldr	r3, [pc, #56]	; (80070b0 <USB_DevInit+0x2b4>)
 8007076:	4313      	orrs	r3, r2
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800707c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	f043 0208 	orr.w	r2, r3, #8
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800708e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007090:	2b01      	cmp	r3, #1
 8007092:	d105      	bne.n	80070a0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	699a      	ldr	r2, [r3, #24]
 8007098:	4b06      	ldr	r3, [pc, #24]	; (80070b4 <USB_DevInit+0x2b8>)
 800709a:	4313      	orrs	r3, r2
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070ac:	b004      	add	sp, #16
 80070ae:	4770      	bx	lr
 80070b0:	803c3800 	.word	0x803c3800
 80070b4:	40000004 	.word	0x40000004

080070b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3301      	adds	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4a13      	ldr	r2, [pc, #76]	; (800711c <USB_FlushTxFifo+0x64>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d901      	bls.n	80070d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e01b      	b.n	8007110 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	daf2      	bge.n	80070c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	019b      	lsls	r3, r3, #6
 80070e8:	f043 0220 	orr.w	r2, r3, #32
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3301      	adds	r3, #1
 80070f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4a08      	ldr	r2, [pc, #32]	; (800711c <USB_FlushTxFifo+0x64>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d901      	bls.n	8007102 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e006      	b.n	8007110 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	f003 0320 	and.w	r3, r3, #32
 800710a:	2b20      	cmp	r3, #32
 800710c:	d0f0      	beq.n	80070f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	00030d40 	.word	0x00030d40

08007120 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3301      	adds	r3, #1
 8007130:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4a11      	ldr	r2, [pc, #68]	; (800717c <USB_FlushRxFifo+0x5c>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d901      	bls.n	800713e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e018      	b.n	8007170 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	2b00      	cmp	r3, #0
 8007144:	daf2      	bge.n	800712c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2210      	movs	r2, #16
 800714e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	3301      	adds	r3, #1
 8007154:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4a08      	ldr	r2, [pc, #32]	; (800717c <USB_FlushRxFifo+0x5c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d901      	bls.n	8007162 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e006      	b.n	8007170 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	f003 0310 	and.w	r3, r3, #16
 800716a:	2b10      	cmp	r3, #16
 800716c:	d0f0      	beq.n	8007150 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	00030d40 	.word	0x00030d40

08007180 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	460b      	mov	r3, r1
 800718a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	78fb      	ldrb	r3, [r7, #3]
 800719a:	68f9      	ldr	r1, [r7, #12]
 800719c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071a0:	4313      	orrs	r3, r2
 80071a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b085      	sub	sp, #20
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071cc:	f023 0303 	bic.w	r3, r3, #3
 80071d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071e0:	f043 0302 	orr.w	r3, r3, #2
 80071e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	f003 0301 	and.w	r3, r3, #1
}
 8007204:	4618      	mov	r0, r3
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3301      	adds	r3, #1
 8007220:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4a13      	ldr	r2, [pc, #76]	; (8007274 <USB_CoreReset+0x64>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d901      	bls.n	800722e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e01b      	b.n	8007266 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	daf2      	bge.n	800721c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	f043 0201 	orr.w	r2, r3, #1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	3301      	adds	r3, #1
 800724a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4a09      	ldr	r2, [pc, #36]	; (8007274 <USB_CoreReset+0x64>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d901      	bls.n	8007258 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e006      	b.n	8007266 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b01      	cmp	r3, #1
 8007262:	d0f0      	beq.n	8007246 <USB_CoreReset+0x36>

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	00030d40 	.word	0x00030d40

08007278 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007278:	b5b0      	push	{r4, r5, r7, lr}
 800727a:	b08c      	sub	sp, #48	; 0x30
 800727c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800727e:	4b96      	ldr	r3, [pc, #600]	; (80074d8 <MX_LWIP_Init+0x260>)
 8007280:	220a      	movs	r2, #10
 8007282:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 42;
 8007284:	4b94      	ldr	r3, [pc, #592]	; (80074d8 <MX_LWIP_Init+0x260>)
 8007286:	222a      	movs	r2, #42	; 0x2a
 8007288:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800728a:	4b93      	ldr	r3, [pc, #588]	; (80074d8 <MX_LWIP_Init+0x260>)
 800728c:	2200      	movs	r2, #0
 800728e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 15;
 8007290:	4b91      	ldr	r3, [pc, #580]	; (80074d8 <MX_LWIP_Init+0x260>)
 8007292:	220f      	movs	r2, #15
 8007294:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007296:	4b91      	ldr	r3, [pc, #580]	; (80074dc <MX_LWIP_Init+0x264>)
 8007298:	22ff      	movs	r2, #255	; 0xff
 800729a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800729c:	4b8f      	ldr	r3, [pc, #572]	; (80074dc <MX_LWIP_Init+0x264>)
 800729e:	22ff      	movs	r2, #255	; 0xff
 80072a0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80072a2:	4b8e      	ldr	r3, [pc, #568]	; (80074dc <MX_LWIP_Init+0x264>)
 80072a4:	22ff      	movs	r2, #255	; 0xff
 80072a6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80072a8:	4b8c      	ldr	r3, [pc, #560]	; (80074dc <MX_LWIP_Init+0x264>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 80072ae:	4b8c      	ldr	r3, [pc, #560]	; (80074e0 <MX_LWIP_Init+0x268>)
 80072b0:	220a      	movs	r2, #10
 80072b2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 42;
 80072b4:	4b8a      	ldr	r3, [pc, #552]	; (80074e0 <MX_LWIP_Init+0x268>)
 80072b6:	222a      	movs	r2, #42	; 0x2a
 80072b8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80072ba:	4b89      	ldr	r3, [pc, #548]	; (80074e0 <MX_LWIP_Init+0x268>)
 80072bc:	2200      	movs	r2, #0
 80072be:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80072c0:	4b87      	ldr	r3, [pc, #540]	; (80074e0 <MX_LWIP_Init+0x268>)
 80072c2:	2201      	movs	r2, #1
 80072c4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80072c6:	2100      	movs	r1, #0
 80072c8:	2000      	movs	r0, #0
 80072ca:	f005 ff8b 	bl	800d1e4 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80072ce:	4b82      	ldr	r3, [pc, #520]	; (80074d8 <MX_LWIP_Init+0x260>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	061a      	lsls	r2, r3, #24
 80072d4:	4b80      	ldr	r3, [pc, #512]	; (80074d8 <MX_LWIP_Init+0x260>)
 80072d6:	785b      	ldrb	r3, [r3, #1]
 80072d8:	041b      	lsls	r3, r3, #16
 80072da:	431a      	orrs	r2, r3
 80072dc:	4b7e      	ldr	r3, [pc, #504]	; (80074d8 <MX_LWIP_Init+0x260>)
 80072de:	789b      	ldrb	r3, [r3, #2]
 80072e0:	021b      	lsls	r3, r3, #8
 80072e2:	4313      	orrs	r3, r2
 80072e4:	4a7c      	ldr	r2, [pc, #496]	; (80074d8 <MX_LWIP_Init+0x260>)
 80072e6:	78d2      	ldrb	r2, [r2, #3]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	061a      	lsls	r2, r3, #24
 80072ec:	4b7a      	ldr	r3, [pc, #488]	; (80074d8 <MX_LWIP_Init+0x260>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	0619      	lsls	r1, r3, #24
 80072f2:	4b79      	ldr	r3, [pc, #484]	; (80074d8 <MX_LWIP_Init+0x260>)
 80072f4:	785b      	ldrb	r3, [r3, #1]
 80072f6:	041b      	lsls	r3, r3, #16
 80072f8:	4319      	orrs	r1, r3
 80072fa:	4b77      	ldr	r3, [pc, #476]	; (80074d8 <MX_LWIP_Init+0x260>)
 80072fc:	789b      	ldrb	r3, [r3, #2]
 80072fe:	021b      	lsls	r3, r3, #8
 8007300:	430b      	orrs	r3, r1
 8007302:	4975      	ldr	r1, [pc, #468]	; (80074d8 <MX_LWIP_Init+0x260>)
 8007304:	78c9      	ldrb	r1, [r1, #3]
 8007306:	430b      	orrs	r3, r1
 8007308:	021b      	lsls	r3, r3, #8
 800730a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800730e:	431a      	orrs	r2, r3
 8007310:	4b71      	ldr	r3, [pc, #452]	; (80074d8 <MX_LWIP_Init+0x260>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	0619      	lsls	r1, r3, #24
 8007316:	4b70      	ldr	r3, [pc, #448]	; (80074d8 <MX_LWIP_Init+0x260>)
 8007318:	785b      	ldrb	r3, [r3, #1]
 800731a:	041b      	lsls	r3, r3, #16
 800731c:	4319      	orrs	r1, r3
 800731e:	4b6e      	ldr	r3, [pc, #440]	; (80074d8 <MX_LWIP_Init+0x260>)
 8007320:	789b      	ldrb	r3, [r3, #2]
 8007322:	021b      	lsls	r3, r3, #8
 8007324:	430b      	orrs	r3, r1
 8007326:	496c      	ldr	r1, [pc, #432]	; (80074d8 <MX_LWIP_Init+0x260>)
 8007328:	78c9      	ldrb	r1, [r1, #3]
 800732a:	430b      	orrs	r3, r1
 800732c:	0a1b      	lsrs	r3, r3, #8
 800732e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007332:	431a      	orrs	r2, r3
 8007334:	4b68      	ldr	r3, [pc, #416]	; (80074d8 <MX_LWIP_Init+0x260>)
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	0619      	lsls	r1, r3, #24
 800733a:	4b67      	ldr	r3, [pc, #412]	; (80074d8 <MX_LWIP_Init+0x260>)
 800733c:	785b      	ldrb	r3, [r3, #1]
 800733e:	041b      	lsls	r3, r3, #16
 8007340:	4319      	orrs	r1, r3
 8007342:	4b65      	ldr	r3, [pc, #404]	; (80074d8 <MX_LWIP_Init+0x260>)
 8007344:	789b      	ldrb	r3, [r3, #2]
 8007346:	021b      	lsls	r3, r3, #8
 8007348:	430b      	orrs	r3, r1
 800734a:	4963      	ldr	r1, [pc, #396]	; (80074d8 <MX_LWIP_Init+0x260>)
 800734c:	78c9      	ldrb	r1, [r1, #3]
 800734e:	430b      	orrs	r3, r1
 8007350:	0e1b      	lsrs	r3, r3, #24
 8007352:	4313      	orrs	r3, r2
 8007354:	4a63      	ldr	r2, [pc, #396]	; (80074e4 <MX_LWIP_Init+0x26c>)
 8007356:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007358:	4b60      	ldr	r3, [pc, #384]	; (80074dc <MX_LWIP_Init+0x264>)
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	061a      	lsls	r2, r3, #24
 800735e:	4b5f      	ldr	r3, [pc, #380]	; (80074dc <MX_LWIP_Init+0x264>)
 8007360:	785b      	ldrb	r3, [r3, #1]
 8007362:	041b      	lsls	r3, r3, #16
 8007364:	431a      	orrs	r2, r3
 8007366:	4b5d      	ldr	r3, [pc, #372]	; (80074dc <MX_LWIP_Init+0x264>)
 8007368:	789b      	ldrb	r3, [r3, #2]
 800736a:	021b      	lsls	r3, r3, #8
 800736c:	4313      	orrs	r3, r2
 800736e:	4a5b      	ldr	r2, [pc, #364]	; (80074dc <MX_LWIP_Init+0x264>)
 8007370:	78d2      	ldrb	r2, [r2, #3]
 8007372:	4313      	orrs	r3, r2
 8007374:	061a      	lsls	r2, r3, #24
 8007376:	4b59      	ldr	r3, [pc, #356]	; (80074dc <MX_LWIP_Init+0x264>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	0619      	lsls	r1, r3, #24
 800737c:	4b57      	ldr	r3, [pc, #348]	; (80074dc <MX_LWIP_Init+0x264>)
 800737e:	785b      	ldrb	r3, [r3, #1]
 8007380:	041b      	lsls	r3, r3, #16
 8007382:	4319      	orrs	r1, r3
 8007384:	4b55      	ldr	r3, [pc, #340]	; (80074dc <MX_LWIP_Init+0x264>)
 8007386:	789b      	ldrb	r3, [r3, #2]
 8007388:	021b      	lsls	r3, r3, #8
 800738a:	430b      	orrs	r3, r1
 800738c:	4953      	ldr	r1, [pc, #332]	; (80074dc <MX_LWIP_Init+0x264>)
 800738e:	78c9      	ldrb	r1, [r1, #3]
 8007390:	430b      	orrs	r3, r1
 8007392:	021b      	lsls	r3, r3, #8
 8007394:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007398:	431a      	orrs	r2, r3
 800739a:	4b50      	ldr	r3, [pc, #320]	; (80074dc <MX_LWIP_Init+0x264>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	0619      	lsls	r1, r3, #24
 80073a0:	4b4e      	ldr	r3, [pc, #312]	; (80074dc <MX_LWIP_Init+0x264>)
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	041b      	lsls	r3, r3, #16
 80073a6:	4319      	orrs	r1, r3
 80073a8:	4b4c      	ldr	r3, [pc, #304]	; (80074dc <MX_LWIP_Init+0x264>)
 80073aa:	789b      	ldrb	r3, [r3, #2]
 80073ac:	021b      	lsls	r3, r3, #8
 80073ae:	430b      	orrs	r3, r1
 80073b0:	494a      	ldr	r1, [pc, #296]	; (80074dc <MX_LWIP_Init+0x264>)
 80073b2:	78c9      	ldrb	r1, [r1, #3]
 80073b4:	430b      	orrs	r3, r1
 80073b6:	0a1b      	lsrs	r3, r3, #8
 80073b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80073bc:	431a      	orrs	r2, r3
 80073be:	4b47      	ldr	r3, [pc, #284]	; (80074dc <MX_LWIP_Init+0x264>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	0619      	lsls	r1, r3, #24
 80073c4:	4b45      	ldr	r3, [pc, #276]	; (80074dc <MX_LWIP_Init+0x264>)
 80073c6:	785b      	ldrb	r3, [r3, #1]
 80073c8:	041b      	lsls	r3, r3, #16
 80073ca:	4319      	orrs	r1, r3
 80073cc:	4b43      	ldr	r3, [pc, #268]	; (80074dc <MX_LWIP_Init+0x264>)
 80073ce:	789b      	ldrb	r3, [r3, #2]
 80073d0:	021b      	lsls	r3, r3, #8
 80073d2:	430b      	orrs	r3, r1
 80073d4:	4941      	ldr	r1, [pc, #260]	; (80074dc <MX_LWIP_Init+0x264>)
 80073d6:	78c9      	ldrb	r1, [r1, #3]
 80073d8:	430b      	orrs	r3, r1
 80073da:	0e1b      	lsrs	r3, r3, #24
 80073dc:	4313      	orrs	r3, r2
 80073de:	4a42      	ldr	r2, [pc, #264]	; (80074e8 <MX_LWIP_Init+0x270>)
 80073e0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80073e2:	4b3f      	ldr	r3, [pc, #252]	; (80074e0 <MX_LWIP_Init+0x268>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	061a      	lsls	r2, r3, #24
 80073e8:	4b3d      	ldr	r3, [pc, #244]	; (80074e0 <MX_LWIP_Init+0x268>)
 80073ea:	785b      	ldrb	r3, [r3, #1]
 80073ec:	041b      	lsls	r3, r3, #16
 80073ee:	431a      	orrs	r2, r3
 80073f0:	4b3b      	ldr	r3, [pc, #236]	; (80074e0 <MX_LWIP_Init+0x268>)
 80073f2:	789b      	ldrb	r3, [r3, #2]
 80073f4:	021b      	lsls	r3, r3, #8
 80073f6:	4313      	orrs	r3, r2
 80073f8:	4a39      	ldr	r2, [pc, #228]	; (80074e0 <MX_LWIP_Init+0x268>)
 80073fa:	78d2      	ldrb	r2, [r2, #3]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	061a      	lsls	r2, r3, #24
 8007400:	4b37      	ldr	r3, [pc, #220]	; (80074e0 <MX_LWIP_Init+0x268>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	0619      	lsls	r1, r3, #24
 8007406:	4b36      	ldr	r3, [pc, #216]	; (80074e0 <MX_LWIP_Init+0x268>)
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	041b      	lsls	r3, r3, #16
 800740c:	4319      	orrs	r1, r3
 800740e:	4b34      	ldr	r3, [pc, #208]	; (80074e0 <MX_LWIP_Init+0x268>)
 8007410:	789b      	ldrb	r3, [r3, #2]
 8007412:	021b      	lsls	r3, r3, #8
 8007414:	430b      	orrs	r3, r1
 8007416:	4932      	ldr	r1, [pc, #200]	; (80074e0 <MX_LWIP_Init+0x268>)
 8007418:	78c9      	ldrb	r1, [r1, #3]
 800741a:	430b      	orrs	r3, r1
 800741c:	021b      	lsls	r3, r3, #8
 800741e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007422:	431a      	orrs	r2, r3
 8007424:	4b2e      	ldr	r3, [pc, #184]	; (80074e0 <MX_LWIP_Init+0x268>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	0619      	lsls	r1, r3, #24
 800742a:	4b2d      	ldr	r3, [pc, #180]	; (80074e0 <MX_LWIP_Init+0x268>)
 800742c:	785b      	ldrb	r3, [r3, #1]
 800742e:	041b      	lsls	r3, r3, #16
 8007430:	4319      	orrs	r1, r3
 8007432:	4b2b      	ldr	r3, [pc, #172]	; (80074e0 <MX_LWIP_Init+0x268>)
 8007434:	789b      	ldrb	r3, [r3, #2]
 8007436:	021b      	lsls	r3, r3, #8
 8007438:	430b      	orrs	r3, r1
 800743a:	4929      	ldr	r1, [pc, #164]	; (80074e0 <MX_LWIP_Init+0x268>)
 800743c:	78c9      	ldrb	r1, [r1, #3]
 800743e:	430b      	orrs	r3, r1
 8007440:	0a1b      	lsrs	r3, r3, #8
 8007442:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007446:	431a      	orrs	r2, r3
 8007448:	4b25      	ldr	r3, [pc, #148]	; (80074e0 <MX_LWIP_Init+0x268>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	0619      	lsls	r1, r3, #24
 800744e:	4b24      	ldr	r3, [pc, #144]	; (80074e0 <MX_LWIP_Init+0x268>)
 8007450:	785b      	ldrb	r3, [r3, #1]
 8007452:	041b      	lsls	r3, r3, #16
 8007454:	4319      	orrs	r1, r3
 8007456:	4b22      	ldr	r3, [pc, #136]	; (80074e0 <MX_LWIP_Init+0x268>)
 8007458:	789b      	ldrb	r3, [r3, #2]
 800745a:	021b      	lsls	r3, r3, #8
 800745c:	430b      	orrs	r3, r1
 800745e:	4920      	ldr	r1, [pc, #128]	; (80074e0 <MX_LWIP_Init+0x268>)
 8007460:	78c9      	ldrb	r1, [r1, #3]
 8007462:	430b      	orrs	r3, r1
 8007464:	0e1b      	lsrs	r3, r3, #24
 8007466:	4313      	orrs	r3, r2
 8007468:	4a20      	ldr	r2, [pc, #128]	; (80074ec <MX_LWIP_Init+0x274>)
 800746a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800746c:	4b20      	ldr	r3, [pc, #128]	; (80074f0 <MX_LWIP_Init+0x278>)
 800746e:	9302      	str	r3, [sp, #8]
 8007470:	4b20      	ldr	r3, [pc, #128]	; (80074f4 <MX_LWIP_Init+0x27c>)
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	2300      	movs	r3, #0
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	4b1c      	ldr	r3, [pc, #112]	; (80074ec <MX_LWIP_Init+0x274>)
 800747a:	4a1b      	ldr	r2, [pc, #108]	; (80074e8 <MX_LWIP_Init+0x270>)
 800747c:	4919      	ldr	r1, [pc, #100]	; (80074e4 <MX_LWIP_Init+0x26c>)
 800747e:	481e      	ldr	r0, [pc, #120]	; (80074f8 <MX_LWIP_Init+0x280>)
 8007480:	f006 fc8a 	bl	800dd98 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007484:	481c      	ldr	r0, [pc, #112]	; (80074f8 <MX_LWIP_Init+0x280>)
 8007486:	f006 fe39 	bl	800e0fc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800748a:	4b1b      	ldr	r3, [pc, #108]	; (80074f8 <MX_LWIP_Init+0x280>)
 800748c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007490:	089b      	lsrs	r3, r3, #2
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800749c:	4816      	ldr	r0, [pc, #88]	; (80074f8 <MX_LWIP_Init+0x280>)
 800749e:	f006 fe3d 	bl	800e11c <netif_set_up>
 80074a2:	e002      	b.n	80074aa <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80074a4:	4814      	ldr	r0, [pc, #80]	; (80074f8 <MX_LWIP_Init+0x280>)
 80074a6:	f006 fea5 	bl	800e1f4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80074aa:	4914      	ldr	r1, [pc, #80]	; (80074fc <MX_LWIP_Init+0x284>)
 80074ac:	4812      	ldr	r0, [pc, #72]	; (80074f8 <MX_LWIP_Init+0x280>)
 80074ae:	f006 ff37 	bl	800e320 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80074b2:	4b13      	ldr	r3, [pc, #76]	; (8007500 <MX_LWIP_Init+0x288>)
 80074b4:	1d3c      	adds	r4, r7, #4
 80074b6:	461d      	mov	r5, r3
 80074b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80074c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80074c4:	1d3b      	adds	r3, r7, #4
 80074c6:	490c      	ldr	r1, [pc, #48]	; (80074f8 <MX_LWIP_Init+0x280>)
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 fd47 	bl	8007f5c <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80074ce:	bf00      	nop
 80074d0:	3720      	adds	r7, #32
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bdb0      	pop	{r4, r5, r7, pc}
 80074d6:	bf00      	nop
 80074d8:	20001a7c 	.word	0x20001a7c
 80074dc:	20001a80 	.word	0x20001a80
 80074e0:	20001a84 	.word	0x20001a84
 80074e4:	20001a70 	.word	0x20001a70
 80074e8:	20001a74 	.word	0x20001a74
 80074ec:	20001a78 	.word	0x20001a78
 80074f0:	0800d0f5 	.word	0x0800d0f5
 80074f4:	080079fd 	.word	0x080079fd
 80074f8:	20001a3c 	.word	0x20001a3c
 80074fc:	08007505 	.word	0x08007505
 8007500:	0801eaf0 	.word	0x0801eaf0

08007504 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800752a:	2320      	movs	r3, #32
 800752c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800752e:	f3bf 8f4f 	dsb	sy
}
 8007532:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8007534:	e00b      	b.n	800754e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8007536:	4a0d      	ldr	r2, [pc, #52]	; (800756c <SCB_InvalidateDCache_by_Addr+0x54>)
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	4413      	add	r3, r2
 8007544:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b00      	cmp	r3, #0
 8007552:	dcf0      	bgt.n	8007536 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007554:	f3bf 8f4f 	dsb	sy
}
 8007558:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800755a:	f3bf 8f6f 	isb	sy
}
 800755e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8007560:	bf00      	nop
 8007562:	371c      	adds	r7, #28
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	e000ed00 	.word	0xe000ed00

08007570 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007578:	4b04      	ldr	r3, [pc, #16]	; (800758c <HAL_ETH_RxCpltCallback+0x1c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4618      	mov	r0, r3
 800757e:	f000 fe69 	bl	8008254 <osSemaphoreRelease>
}
 8007582:	bf00      	nop
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	20006414 	.word	0x20006414

08007590 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007598:	4b04      	ldr	r3, [pc, #16]	; (80075ac <HAL_ETH_TxCpltCallback+0x1c>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4618      	mov	r0, r3
 800759e:	f000 fe59 	bl	8008254 <osSemaphoreRelease>
}
 80075a2:	bf00      	nop
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20006418 	.word	0x20006418

080075b0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7fb fccd 	bl	8002f58 <HAL_ETH_GetDMAError>
 80075be:	4603      	mov	r3, r0
 80075c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c4:	2b80      	cmp	r3, #128	; 0x80
 80075c6:	d104      	bne.n	80075d2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80075c8:	4b04      	ldr	r3, [pc, #16]	; (80075dc <HAL_ETH_ErrorCallback+0x2c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f000 fe41 	bl	8008254 <osSemaphoreRelease>
  }
}
 80075d2:	bf00      	nop
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	20006414 	.word	0x20006414

080075e0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80075e0:	b5b0      	push	{r4, r5, r7, lr}
 80075e2:	b0a8      	sub	sp, #160	; 0xa0
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 80075fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80075fe:	2264      	movs	r2, #100	; 0x64
 8007600:	2100      	movs	r1, #0
 8007602:	4618      	mov	r0, r3
 8007604:	f016 f8ac 	bl	801d760 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007608:	4b85      	ldr	r3, [pc, #532]	; (8007820 <low_level_init+0x240>)
 800760a:	4a86      	ldr	r2, [pc, #536]	; (8007824 <low_level_init+0x244>)
 800760c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800760e:	2300      	movs	r3, #0
 8007610:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8007614:	2380      	movs	r3, #128	; 0x80
 8007616:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800761a:	23e1      	movs	r3, #225	; 0xe1
 800761c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8007620:	2300      	movs	r3, #0
 8007622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8007626:	2300      	movs	r3, #0
 8007628:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 800762c:	2300      	movs	r3, #0
 800762e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8007632:	4a7b      	ldr	r2, [pc, #492]	; (8007820 <low_level_init+0x240>)
 8007634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007638:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800763a:	4b79      	ldr	r3, [pc, #484]	; (8007820 <low_level_init+0x240>)
 800763c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007640:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007642:	4b77      	ldr	r3, [pc, #476]	; (8007820 <low_level_init+0x240>)
 8007644:	4a78      	ldr	r2, [pc, #480]	; (8007828 <low_level_init+0x248>)
 8007646:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007648:	4b75      	ldr	r3, [pc, #468]	; (8007820 <low_level_init+0x240>)
 800764a:	4a78      	ldr	r2, [pc, #480]	; (800782c <low_level_init+0x24c>)
 800764c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800764e:	4b74      	ldr	r3, [pc, #464]	; (8007820 <low_level_init+0x240>)
 8007650:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007654:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007656:	4872      	ldr	r0, [pc, #456]	; (8007820 <low_level_init+0x240>)
 8007658:	f7fa fe40 	bl	80022dc <HAL_ETH_Init>
 800765c:	4603      	mov	r3, r0
 800765e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007662:	2238      	movs	r2, #56	; 0x38
 8007664:	2100      	movs	r1, #0
 8007666:	4872      	ldr	r0, [pc, #456]	; (8007830 <low_level_init+0x250>)
 8007668:	f016 f87a 	bl	801d760 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800766c:	4b70      	ldr	r3, [pc, #448]	; (8007830 <low_level_init+0x250>)
 800766e:	2221      	movs	r2, #33	; 0x21
 8007670:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007672:	4b6f      	ldr	r3, [pc, #444]	; (8007830 <low_level_init+0x250>)
 8007674:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8007678:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800767a:	4b6d      	ldr	r3, [pc, #436]	; (8007830 <low_level_init+0x250>)
 800767c:	2200      	movs	r2, #0
 800767e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007680:	486c      	ldr	r0, [pc, #432]	; (8007834 <low_level_init+0x254>)
 8007682:	f006 fa43 	bl	800db0c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2206      	movs	r2, #6
 800768a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800768e:	4b64      	ldr	r3, [pc, #400]	; (8007820 <low_level_init+0x240>)
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	781a      	ldrb	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800769a:	4b61      	ldr	r3, [pc, #388]	; (8007820 <low_level_init+0x240>)
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	785a      	ldrb	r2, [r3, #1]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80076a6:	4b5e      	ldr	r3, [pc, #376]	; (8007820 <low_level_init+0x240>)
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	789a      	ldrb	r2, [r3, #2]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80076b2:	4b5b      	ldr	r3, [pc, #364]	; (8007820 <low_level_init+0x240>)
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	78da      	ldrb	r2, [r3, #3]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80076be:	4b58      	ldr	r3, [pc, #352]	; (8007820 <low_level_init+0x240>)
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	791a      	ldrb	r2, [r3, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80076ca:	4b55      	ldr	r3, [pc, #340]	; (8007820 <low_level_init+0x240>)
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	795a      	ldrb	r2, [r3, #5]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80076dc:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80076e4:	f043 030a 	orr.w	r3, r3, #10
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 80076f0:	2203      	movs	r2, #3
 80076f2:	2100      	movs	r1, #0
 80076f4:	2001      	movs	r0, #1
 80076f6:	f001 f89d 	bl	8008834 <xQueueGenericCreate>
 80076fa:	4603      	mov	r3, r0
 80076fc:	4a4e      	ldr	r2, [pc, #312]	; (8007838 <low_level_init+0x258>)
 80076fe:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8007700:	2203      	movs	r2, #3
 8007702:	2100      	movs	r1, #0
 8007704:	2001      	movs	r0, #1
 8007706:	f001 f895 	bl	8008834 <xQueueGenericCreate>
 800770a:	4603      	mov	r3, r0
 800770c:	4a4b      	ldr	r2, [pc, #300]	; (800783c <low_level_init+0x25c>)
 800770e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8007710:	4b4b      	ldr	r3, [pc, #300]	; (8007840 <low_level_init+0x260>)
 8007712:	f107 0408 	add.w	r4, r7, #8
 8007716:	461d      	mov	r5, r3
 8007718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800771a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800771c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007720:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8007724:	f107 0308 	add.w	r3, r7, #8
 8007728:	6879      	ldr	r1, [r7, #4]
 800772a:	4618      	mov	r0, r3
 800772c:	f000 fc16 	bl	8007f5c <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007730:	4944      	ldr	r1, [pc, #272]	; (8007844 <low_level_init+0x264>)
 8007732:	4845      	ldr	r0, [pc, #276]	; (8007848 <low_level_init+0x268>)
 8007734:	f7fa fa6d 	bl	8001c12 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8007738:	4843      	ldr	r0, [pc, #268]	; (8007848 <low_level_init+0x268>)
 800773a:	f7fa fa9c 	bl	8001c76 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800773e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007742:	2b00      	cmp	r3, #0
 8007744:	d165      	bne.n	8007812 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007746:	4840      	ldr	r0, [pc, #256]	; (8007848 <low_level_init+0x268>)
 8007748:	f7fa fb3d 	bl	8001dc6 <LAN8742_GetLinkState>
 800774c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8007750:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007754:	2b01      	cmp	r3, #1
 8007756:	dc06      	bgt.n	8007766 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f006 fdb1 	bl	800e2c0 <netif_set_link_down>
      netif_set_down(netif);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f006 fd48 	bl	800e1f4 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007764:	e057      	b.n	8007816 <low_level_init+0x236>
      switch (PHYLinkState)
 8007766:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800776a:	3b02      	subs	r3, #2
 800776c:	2b03      	cmp	r3, #3
 800776e:	d82b      	bhi.n	80077c8 <low_level_init+0x1e8>
 8007770:	a201      	add	r2, pc, #4	; (adr r2, 8007778 <low_level_init+0x198>)
 8007772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007776:	bf00      	nop
 8007778:	08007789 	.word	0x08007789
 800777c:	0800779b 	.word	0x0800779b
 8007780:	080077ab 	.word	0x080077ab
 8007784:	080077bb 	.word	0x080077bb
        duplex = ETH_FULLDUPLEX_MODE;
 8007788:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800778c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8007790:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007798:	e01f      	b.n	80077da <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800779a:	2300      	movs	r3, #0
 800779c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80077a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80077a8:	e017      	b.n	80077da <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80077aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80077b2:	2300      	movs	r3, #0
 80077b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80077b8:	e00f      	b.n	80077da <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80077ba:	2300      	movs	r3, #0
 80077bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80077c0:	2300      	movs	r3, #0
 80077c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80077c6:	e008      	b.n	80077da <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80077c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80077d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80077d8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80077da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077de:	4619      	mov	r1, r3
 80077e0:	480f      	ldr	r0, [pc, #60]	; (8007820 <low_level_init+0x240>)
 80077e2:	f7fb fa5f 	bl	8002ca4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80077e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077ea:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 80077ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077f0:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80077f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077f6:	4619      	mov	r1, r3
 80077f8:	4809      	ldr	r0, [pc, #36]	; (8007820 <low_level_init+0x240>)
 80077fa:	f7fb fb3d 	bl	8002e78 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80077fe:	4808      	ldr	r0, [pc, #32]	; (8007820 <low_level_init+0x240>)
 8007800:	f7fa fde8 	bl	80023d4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f006 fc89 	bl	800e11c <netif_set_up>
    netif_set_link_up(netif);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f006 fd24 	bl	800e258 <netif_set_link_up>
}
 8007810:	e001      	b.n	8007816 <low_level_init+0x236>
    Error_Handler();
 8007812:	f7f9 fbbb 	bl	8000f8c <Error_Handler>
}
 8007816:	bf00      	nop
 8007818:	37a0      	adds	r7, #160	; 0xa0
 800781a:	46bd      	mov	sp, r7
 800781c:	bdb0      	pop	{r4, r5, r7, pc}
 800781e:	bf00      	nop
 8007820:	2000641c 	.word	0x2000641c
 8007824:	40028000 	.word	0x40028000
 8007828:	20000134 	.word	0x20000134
 800782c:	20000094 	.word	0x20000094
 8007830:	200064cc 	.word	0x200064cc
 8007834:	08022278 	.word	0x08022278
 8007838:	20006414 	.word	0x20006414
 800783c:	20006418 	.word	0x20006418
 8007840:	0801eb14 	.word	0x0801eb14
 8007844:	2000000c 	.word	0x2000000c
 8007848:	20006504 	.word	0x20006504

0800784c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b092      	sub	sp, #72	; 0x48
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800785a:	2300      	movs	r3, #0
 800785c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007864:	f107 030c 	add.w	r3, r7, #12
 8007868:	2230      	movs	r2, #48	; 0x30
 800786a:	2100      	movs	r1, #0
 800786c:	4618      	mov	r0, r3
 800786e:	f015 ff77 	bl	801d760 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007872:	f107 030c 	add.w	r3, r7, #12
 8007876:	2230      	movs	r2, #48	; 0x30
 8007878:	2100      	movs	r1, #0
 800787a:	4618      	mov	r0, r3
 800787c:	f015 ff70 	bl	801d760 <memset>

  for(q = p; q != NULL; q = q->next)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	643b      	str	r3, [r7, #64]	; 0x40
 8007884:	e045      	b.n	8007912 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007888:	2b03      	cmp	r3, #3
 800788a:	d902      	bls.n	8007892 <low_level_output+0x46>
      return ERR_IF;
 800788c:	f06f 030b 	mvn.w	r3, #11
 8007890:	e065      	b.n	800795e <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8007892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007894:	6859      	ldr	r1, [r3, #4]
 8007896:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007898:	4613      	mov	r3, r2
 800789a:	005b      	lsls	r3, r3, #1
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	3348      	adds	r3, #72	; 0x48
 80078a2:	443b      	add	r3, r7
 80078a4:	3b3c      	subs	r3, #60	; 0x3c
 80078a6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80078a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078aa:	895b      	ldrh	r3, [r3, #10]
 80078ac:	4619      	mov	r1, r3
 80078ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078b0:	4613      	mov	r3, r2
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	4413      	add	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	3348      	adds	r3, #72	; 0x48
 80078ba:	443b      	add	r3, r7
 80078bc:	3b38      	subs	r3, #56	; 0x38
 80078be:	6019      	str	r1, [r3, #0]

    if(i>0)
 80078c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d011      	beq.n	80078ea <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80078c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078c8:	1e5a      	subs	r2, r3, #1
 80078ca:	f107 000c 	add.w	r0, r7, #12
 80078ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078d0:	460b      	mov	r3, r1
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	440b      	add	r3, r1
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	18c1      	adds	r1, r0, r3
 80078da:	4613      	mov	r3, r2
 80078dc:	005b      	lsls	r3, r3, #1
 80078de:	4413      	add	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	3348      	adds	r3, #72	; 0x48
 80078e4:	443b      	add	r3, r7
 80078e6:	3b34      	subs	r3, #52	; 0x34
 80078e8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80078ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d109      	bne.n	8007906 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80078f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078f4:	4613      	mov	r3, r2
 80078f6:	005b      	lsls	r3, r3, #1
 80078f8:	4413      	add	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	3348      	adds	r3, #72	; 0x48
 80078fe:	443b      	add	r3, r7
 8007900:	3b34      	subs	r3, #52	; 0x34
 8007902:	2200      	movs	r2, #0
 8007904:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007908:	3301      	adds	r3, #1
 800790a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800790c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	643b      	str	r3, [r7, #64]	; 0x40
 8007912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1b6      	bne.n	8007886 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	891b      	ldrh	r3, [r3, #8]
 800791c:	461a      	mov	r2, r3
 800791e:	4b12      	ldr	r3, [pc, #72]	; (8007968 <low_level_output+0x11c>)
 8007920:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007922:	4a11      	ldr	r2, [pc, #68]	; (8007968 <low_level_output+0x11c>)
 8007924:	f107 030c 	add.w	r3, r7, #12
 8007928:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800792a:	4a0f      	ldr	r2, [pc, #60]	; (8007968 <low_level_output+0x11c>)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8007930:	6838      	ldr	r0, [r7, #0]
 8007932:	f007 f949 	bl	800ebc8 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8007936:	490c      	ldr	r1, [pc, #48]	; (8007968 <low_level_output+0x11c>)
 8007938:	480c      	ldr	r0, [pc, #48]	; (800796c <low_level_output+0x120>)
 800793a:	f7fa fe59 	bl	80025f0 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800793e:	bf00      	nop
 8007940:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <low_level_output+0x124>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007948:	4618      	mov	r0, r3
 800794a:	f000 fc35 	bl	80081b8 <osSemaphoreWait>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1f5      	bne.n	8007940 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8007954:	4805      	ldr	r0, [pc, #20]	; (800796c <low_level_output+0x120>)
 8007956:	f7fa ffdf 	bl	8002918 <HAL_ETH_ReleaseTxPacket>

  return errval;
 800795a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800795e:	4618      	mov	r0, r3
 8007960:	3748      	adds	r7, #72	; 0x48
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	200064cc 	.word	0x200064cc
 800796c:	2000641c 	.word	0x2000641c
 8007970:	20006418 	.word	0x20006418

08007974 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800797c:	2300      	movs	r3, #0
 800797e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8007980:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <low_level_input+0x2c>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d105      	bne.n	8007994 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007988:	f107 030c 	add.w	r3, r7, #12
 800798c:	4619      	mov	r1, r3
 800798e:	4805      	ldr	r0, [pc, #20]	; (80079a4 <low_level_input+0x30>)
 8007990:	f7fa fe8a 	bl	80026a8 <HAL_ETH_ReadData>
  }

  return p;
 8007994:	68fb      	ldr	r3, [r7, #12]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20006410 	.word	0x20006410
 80079a4:	2000641c 	.word	0x2000641c

080079a8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80079b0:	2300      	movs	r3, #0
 80079b2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80079b8:	4b0f      	ldr	r3, [pc, #60]	; (80079f8 <ethernetif_input+0x50>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 fbf9 	bl	80081b8 <osSemaphoreWait>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1f5      	bne.n	80079b8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80079cc:	68b8      	ldr	r0, [r7, #8]
 80079ce:	f7ff ffd1 	bl	8007974 <low_level_input>
 80079d2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00a      	beq.n	80079f0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	68b9      	ldr	r1, [r7, #8]
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	4798      	blx	r3
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f007 f846 	bl	800ea7c <pbuf_free>
          }
        }
      } while(p!=NULL);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1ea      	bne.n	80079cc <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80079f6:	e7df      	b.n	80079b8 <ethernetif_input+0x10>
 80079f8:	20006414 	.word	0x20006414

080079fc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d106      	bne.n	8007a18 <ethernetif_init+0x1c>
 8007a0a:	4b0e      	ldr	r3, [pc, #56]	; (8007a44 <ethernetif_init+0x48>)
 8007a0c:	f240 12ef 	movw	r2, #495	; 0x1ef
 8007a10:	490d      	ldr	r1, [pc, #52]	; (8007a48 <ethernetif_init+0x4c>)
 8007a12:	480e      	ldr	r0, [pc, #56]	; (8007a4c <ethernetif_init+0x50>)
 8007a14:	f015 feac 	bl	801d770 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2273      	movs	r2, #115	; 0x73
 8007a1c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2274      	movs	r2, #116	; 0x74
 8007a24:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a09      	ldr	r2, [pc, #36]	; (8007a50 <ethernetif_init+0x54>)
 8007a2c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a08      	ldr	r2, [pc, #32]	; (8007a54 <ethernetif_init+0x58>)
 8007a32:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff fdd3 	bl	80075e0 <low_level_init>

  return ERR_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	0801eb30 	.word	0x0801eb30
 8007a48:	0801eb4c 	.word	0x0801eb4c
 8007a4c:	0801eb5c 	.word	0x0801eb5c
 8007a50:	08016291 	.word	0x08016291
 8007a54:	0800784d 	.word	0x0800784d

08007a58 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007a64:	68f9      	ldr	r1, [r7, #12]
 8007a66:	4809      	ldr	r0, [pc, #36]	; (8007a8c <pbuf_free_custom+0x34>)
 8007a68:	f006 f940 	bl	800dcec <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007a6c:	4b08      	ldr	r3, [pc, #32]	; (8007a90 <pbuf_free_custom+0x38>)
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d107      	bne.n	8007a84 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007a74:	4b06      	ldr	r3, [pc, #24]	; (8007a90 <pbuf_free_custom+0x38>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8007a7a:	4b06      	ldr	r3, [pc, #24]	; (8007a94 <pbuf_free_custom+0x3c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 fbe8 	bl	8008254 <osSemaphoreRelease>
  }
}
 8007a84:	bf00      	nop
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	08022278 	.word	0x08022278
 8007a90:	20006410 	.word	0x20006410
 8007a94:	20006414 	.word	0x20006414

08007a98 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007a9c:	f7fa fa3c 	bl	8001f18 <HAL_GetTick>
 8007aa0:	4603      	mov	r3, r0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	bd80      	pop	{r7, pc}
	...

08007aa8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08e      	sub	sp, #56	; 0x38
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	605a      	str	r2, [r3, #4]
 8007aba:	609a      	str	r2, [r3, #8]
 8007abc:	60da      	str	r2, [r3, #12]
 8007abe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a52      	ldr	r2, [pc, #328]	; (8007c10 <HAL_ETH_MspInit+0x168>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	f040 809e 	bne.w	8007c08 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007acc:	4b51      	ldr	r3, [pc, #324]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad0:	4a50      	ldr	r2, [pc, #320]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007ad2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8007ad8:	4b4e      	ldr	r3, [pc, #312]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ae0:	623b      	str	r3, [r7, #32]
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	4b4b      	ldr	r3, [pc, #300]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae8:	4a4a      	ldr	r2, [pc, #296]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007aea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007aee:	6313      	str	r3, [r2, #48]	; 0x30
 8007af0:	4b48      	ldr	r3, [pc, #288]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007af8:	61fb      	str	r3, [r7, #28]
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	4b45      	ldr	r3, [pc, #276]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b00:	4a44      	ldr	r2, [pc, #272]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007b02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b06:	6313      	str	r3, [r2, #48]	; 0x30
 8007b08:	4b42      	ldr	r3, [pc, #264]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b10:	61bb      	str	r3, [r7, #24]
 8007b12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b14:	4b3f      	ldr	r3, [pc, #252]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	4a3e      	ldr	r2, [pc, #248]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007b1a:	f043 0304 	orr.w	r3, r3, #4
 8007b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8007b20:	4b3c      	ldr	r3, [pc, #240]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	617b      	str	r3, [r7, #20]
 8007b2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b2c:	4b39      	ldr	r3, [pc, #228]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b30:	4a38      	ldr	r2, [pc, #224]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007b32:	f043 0301 	orr.w	r3, r3, #1
 8007b36:	6313      	str	r3, [r2, #48]	; 0x30
 8007b38:	4b36      	ldr	r3, [pc, #216]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	613b      	str	r3, [r7, #16]
 8007b42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b44:	4b33      	ldr	r3, [pc, #204]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b48:	4a32      	ldr	r2, [pc, #200]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007b4a:	f043 0302 	orr.w	r3, r3, #2
 8007b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8007b50:	4b30      	ldr	r3, [pc, #192]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	60fb      	str	r3, [r7, #12]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007b5c:	4b2d      	ldr	r3, [pc, #180]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b60:	4a2c      	ldr	r2, [pc, #176]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b66:	6313      	str	r3, [r2, #48]	; 0x30
 8007b68:	4b2a      	ldr	r3, [pc, #168]	; (8007c14 <HAL_ETH_MspInit+0x16c>)
 8007b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b70:	60bb      	str	r3, [r7, #8]
 8007b72:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007b74:	2332      	movs	r3, #50	; 0x32
 8007b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b78:	2302      	movs	r3, #2
 8007b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b80:	2303      	movs	r3, #3
 8007b82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007b84:	230b      	movs	r3, #11
 8007b86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	4822      	ldr	r0, [pc, #136]	; (8007c18 <HAL_ETH_MspInit+0x170>)
 8007b90:	f7fb fdf2 	bl	8003778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007b94:	2386      	movs	r3, #134	; 0x86
 8007b96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b98:	2302      	movs	r3, #2
 8007b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007ba4:	230b      	movs	r3, #11
 8007ba6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bac:	4619      	mov	r1, r3
 8007bae:	481b      	ldr	r0, [pc, #108]	; (8007c1c <HAL_ETH_MspInit+0x174>)
 8007bb0:	f7fb fde2 	bl	8003778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bba:	2302      	movs	r3, #2
 8007bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007bc6:	230b      	movs	r3, #11
 8007bc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bce:	4619      	mov	r1, r3
 8007bd0:	4813      	ldr	r0, [pc, #76]	; (8007c20 <HAL_ETH_MspInit+0x178>)
 8007bd2:	f7fb fdd1 	bl	8003778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007bd6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bdc:	2302      	movs	r3, #2
 8007bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007be0:	2300      	movs	r3, #0
 8007be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007be4:	2303      	movs	r3, #3
 8007be6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007be8:	230b      	movs	r3, #11
 8007bea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	480c      	ldr	r0, [pc, #48]	; (8007c24 <HAL_ETH_MspInit+0x17c>)
 8007bf4:	f7fb fdc0 	bl	8003778 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2105      	movs	r1, #5
 8007bfc:	203d      	movs	r0, #61	; 0x3d
 8007bfe:	f7fa fa97 	bl	8002130 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007c02:	203d      	movs	r0, #61	; 0x3d
 8007c04:	f7fa fab0 	bl	8002168 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007c08:	bf00      	nop
 8007c0a:	3738      	adds	r7, #56	; 0x38
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	40028000 	.word	0x40028000
 8007c14:	40023800 	.word	0x40023800
 8007c18:	40020800 	.word	0x40020800
 8007c1c:	40020000 	.word	0x40020000
 8007c20:	40020400 	.word	0x40020400
 8007c24:	40021800 	.word	0x40021800

08007c28 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007c2c:	4802      	ldr	r0, [pc, #8]	; (8007c38 <ETH_PHY_IO_Init+0x10>)
 8007c2e:	f7fb f93d 	bl	8002eac <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	2000641c 	.word	0x2000641c

08007c3c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	af00      	add	r7, sp, #0
  return 0;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	68f9      	ldr	r1, [r7, #12]
 8007c5e:	4807      	ldr	r0, [pc, #28]	; (8007c7c <ETH_PHY_IO_ReadReg+0x30>)
 8007c60:	f7fa ff8c 	bl	8002b7c <HAL_ETH_ReadPHYRegister>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8007c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c6e:	e000      	b.n	8007c72 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	2000641c 	.word	0x2000641c

08007c80 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	68f9      	ldr	r1, [r7, #12]
 8007c92:	4807      	ldr	r0, [pc, #28]	; (8007cb0 <ETH_PHY_IO_WriteReg+0x30>)
 8007c94:	f7fa ffbd 	bl	8002c12 <HAL_ETH_WritePHYRegister>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d002      	beq.n	8007ca4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ca2:	e000      	b.n	8007ca6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	2000641c 	.word	0x2000641c

08007cb4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007cb8:	f7fa f92e 	bl	8001f18 <HAL_GetTick>
 8007cbc:	4603      	mov	r3, r0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b0a0      	sub	sp, #128	; 0x80
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007ccc:	f107 0308 	add.w	r3, r7, #8
 8007cd0:	2264      	movs	r2, #100	; 0x64
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f015 fd43 	bl	801d760 <memset>
  int32_t PHYLinkState = 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007cee:	483a      	ldr	r0, [pc, #232]	; (8007dd8 <ethernet_link_thread+0x114>)
 8007cf0:	f7fa f869 	bl	8001dc6 <LAN8742_GetLinkState>
 8007cf4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007cfc:	089b      	lsrs	r3, r3, #2
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00c      	beq.n	8007d22 <ethernet_link_thread+0x5e>
 8007d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	dc09      	bgt.n	8007d22 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8007d0e:	4833      	ldr	r0, [pc, #204]	; (8007ddc <ethernet_link_thread+0x118>)
 8007d10:	f7fa fbee 	bl	80024f0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8007d14:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d16:	f006 fa6d 	bl	800e1f4 <netif_set_down>
    netif_set_link_down(netif);
 8007d1a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d1c:	f006 fad0 	bl	800e2c0 <netif_set_link_down>
 8007d20:	e055      	b.n	8007dce <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d28:	f003 0304 	and.w	r3, r3, #4
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d14e      	bne.n	8007dce <ethernet_link_thread+0x10a>
 8007d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	dd4b      	ble.n	8007dce <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8007d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d38:	3b02      	subs	r3, #2
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d82a      	bhi.n	8007d94 <ethernet_link_thread+0xd0>
 8007d3e:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <ethernet_link_thread+0x80>)
 8007d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d44:	08007d55 	.word	0x08007d55
 8007d48:	08007d67 	.word	0x08007d67
 8007d4c:	08007d77 	.word	0x08007d77
 8007d50:	08007d87 	.word	0x08007d87
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007d54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d58:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007d5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007d5e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007d60:	2301      	movs	r3, #1
 8007d62:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007d64:	e017      	b.n	8007d96 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007d66:	2300      	movs	r3, #0
 8007d68:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007d6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007d6e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007d70:	2301      	movs	r3, #1
 8007d72:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007d74:	e00f      	b.n	8007d96 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007d76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d7a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007d80:	2301      	movs	r3, #1
 8007d82:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007d84:	e007      	b.n	8007d96 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007d86:	2300      	movs	r3, #0
 8007d88:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007d92:	e000      	b.n	8007d96 <ethernet_link_thread+0xd2>
    default:
      break;
 8007d94:	bf00      	nop
    }

    if(linkchanged)
 8007d96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d018      	beq.n	8007dce <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007d9c:	f107 0308 	add.w	r3, r7, #8
 8007da0:	4619      	mov	r1, r3
 8007da2:	480e      	ldr	r0, [pc, #56]	; (8007ddc <ethernet_link_thread+0x118>)
 8007da4:	f7fa ff7e 	bl	8002ca4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007daa:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8007dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dae:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007db0:	f107 0308 	add.w	r3, r7, #8
 8007db4:	4619      	mov	r1, r3
 8007db6:	4809      	ldr	r0, [pc, #36]	; (8007ddc <ethernet_link_thread+0x118>)
 8007db8:	f7fb f85e 	bl	8002e78 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8007dbc:	4807      	ldr	r0, [pc, #28]	; (8007ddc <ethernet_link_thread+0x118>)
 8007dbe:	f7fa fb09 	bl	80023d4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8007dc2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007dc4:	f006 f9aa 	bl	800e11c <netif_set_up>
      netif_set_link_up(netif);
 8007dc8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007dca:	f006 fa45 	bl	800e258 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8007dce:	2064      	movs	r0, #100	; 0x64
 8007dd0:	f000 f910 	bl	8007ff4 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007dd4:	e78b      	b.n	8007cee <ethernet_link_thread+0x2a>
 8007dd6:	bf00      	nop
 8007dd8:	20006504 	.word	0x20006504
 8007ddc:	2000641c 	.word	0x2000641c

08007de0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af02      	add	r7, sp, #8
 8007de6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007de8:	4812      	ldr	r0, [pc, #72]	; (8007e34 <HAL_ETH_RxAllocateCallback+0x54>)
 8007dea:	f005 ff0b 	bl	800dc04 <memp_malloc_pool>
 8007dee:	60f8      	str	r0, [r7, #12]
  if (p)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d014      	beq.n	8007e20 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f103 0220 	add.w	r2, r3, #32
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4a0d      	ldr	r2, [pc, #52]	; (8007e38 <HAL_ETH_RxAllocateCallback+0x58>)
 8007e04:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007e0e:	9201      	str	r2, [sp, #4]
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2241      	movs	r2, #65	; 0x41
 8007e16:	2100      	movs	r1, #0
 8007e18:	2000      	movs	r0, #0
 8007e1a:	f006 fc75 	bl	800e708 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007e1e:	e005      	b.n	8007e2c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007e20:	4b06      	ldr	r3, [pc, #24]	; (8007e3c <HAL_ETH_RxAllocateCallback+0x5c>)
 8007e22:	2201      	movs	r2, #1
 8007e24:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]
}
 8007e2c:	bf00      	nop
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	08022278 	.word	0x08022278
 8007e38:	08007a59 	.word	0x08007a59
 8007e3c:	20006410 	.word	0x20006410

08007e40 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b088      	sub	sp, #32
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8007e56:	2300      	movs	r3, #0
 8007e58:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	3b20      	subs	r3, #32
 8007e5e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	887a      	ldrh	r2, [r7, #2]
 8007e70:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d103      	bne.n	8007e82 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	69fa      	ldr	r2, [r7, #28]
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	e003      	b.n	8007e8a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	69fa      	ldr	r2, [r7, #28]
 8007e88:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	69fa      	ldr	r2, [r7, #28]
 8007e8e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	61fb      	str	r3, [r7, #28]
 8007e96:	e009      	b.n	8007eac <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	891a      	ldrh	r2, [r3, #8]
 8007e9c:	887b      	ldrh	r3, [r7, #2]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	61fb      	str	r3, [r7, #28]
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1f2      	bne.n	8007e98 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8007eb2:	887b      	ldrh	r3, [r7, #2]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7ff fb2e 	bl	8007518 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007ebc:	bf00      	nop
 8007ebe:	3720      	adds	r7, #32
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f006 fdd5 	bl	800ea7c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8007ed2:	bf00      	nop
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b085      	sub	sp, #20
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007ee8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007eec:	2b84      	cmp	r3, #132	; 0x84
 8007eee:	d005      	beq.n	8007efc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007ef0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	3303      	adds	r3, #3
 8007efa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007efc:	68fb      	ldr	r3, [r7, #12]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f10:	f3ef 8305 	mrs	r3, IPSR
 8007f14:	607b      	str	r3, [r7, #4]
  return(result);
 8007f16:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	bf14      	ite	ne
 8007f1c:	2301      	movne	r3, #1
 8007f1e:	2300      	moveq	r3, #0
 8007f20:	b2db      	uxtb	r3, r3
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007f32:	f001 fd73 	bl	8009a1c <vTaskStartScheduler>
  
  return osOK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007f40:	f7ff ffe3 	bl	8007f0a <inHandlerMode>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007f4a:	f001 fe87 	bl	8009c5c <xTaskGetTickCountFromISR>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	e002      	b.n	8007f58 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007f52:	f001 fe73 	bl	8009c3c <xTaskGetTickCount>
 8007f56:	4603      	mov	r3, r0
  }
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f5e:	b089      	sub	sp, #36	; 0x24
 8007f60:	af04      	add	r7, sp, #16
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d020      	beq.n	8007fb0 <osThreadCreate+0x54>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d01c      	beq.n	8007fb0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685c      	ldr	r4, [r3, #4]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681d      	ldr	r5, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	691e      	ldr	r6, [r3, #16]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7ff ffa6 	bl	8007eda <makeFreeRtosPriority>
 8007f8e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f98:	9202      	str	r2, [sp, #8]
 8007f9a:	9301      	str	r3, [sp, #4]
 8007f9c:	9100      	str	r1, [sp, #0]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	4632      	mov	r2, r6
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f001 fb67 	bl	8009678 <xTaskCreateStatic>
 8007faa:	4603      	mov	r3, r0
 8007fac:	60fb      	str	r3, [r7, #12]
 8007fae:	e01c      	b.n	8007fea <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685c      	ldr	r4, [r3, #4]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007fbc:	b29e      	uxth	r6, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7ff ff88 	bl	8007eda <makeFreeRtosPriority>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	f107 030c 	add.w	r3, r7, #12
 8007fd0:	9301      	str	r3, [sp, #4]
 8007fd2:	9200      	str	r2, [sp, #0]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	4632      	mov	r2, r6
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f001 fbaf 	bl	800973e <xTaskCreate>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d001      	beq.n	8007fea <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	e000      	b.n	8007fec <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007fea:	68fb      	ldr	r3, [r7, #12]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ff4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <osDelay+0x16>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	e000      	b.n	800800c <osDelay+0x18>
 800800a:	2301      	movs	r3, #1
 800800c:	4618      	mov	r0, r3
 800800e:	f001 fccf 	bl	80099b0 <vTaskDelay>
  
  return osOK;
 8008012:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d007      	beq.n	800803c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	4619      	mov	r1, r3
 8008032:	2001      	movs	r0, #1
 8008034:	f000 fc91 	bl	800895a <xQueueCreateMutexStatic>
 8008038:	4603      	mov	r3, r0
 800803a:	e003      	b.n	8008044 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800803c:	2001      	movs	r0, #1
 800803e:	f000 fc74 	bl	800892a <xQueueCreateMutex>
 8008042:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008044:	4618      	mov	r0, r3
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008056:	2300      	movs	r3, #0
 8008058:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <osMutexWait+0x18>
    return osErrorParameter;
 8008060:	2380      	movs	r3, #128	; 0x80
 8008062:	e03a      	b.n	80080da <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008064:	2300      	movs	r3, #0
 8008066:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800806e:	d103      	bne.n	8008078 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008074:	60fb      	str	r3, [r7, #12]
 8008076:	e009      	b.n	800808c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d006      	beq.n	800808c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d101      	bne.n	800808c <osMutexWait+0x40>
      ticks = 1;
 8008088:	2301      	movs	r3, #1
 800808a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800808c:	f7ff ff3d 	bl	8007f0a <inHandlerMode>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d017      	beq.n	80080c6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008096:	f107 0308 	add.w	r3, r7, #8
 800809a:	461a      	mov	r2, r3
 800809c:	2100      	movs	r1, #0
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f001 f8ac 	bl	80091fc <xQueueReceiveFromISR>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d001      	beq.n	80080ae <osMutexWait+0x62>
      return osErrorOS;
 80080aa:	23ff      	movs	r3, #255	; 0xff
 80080ac:	e015      	b.n	80080da <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d011      	beq.n	80080d8 <osMutexWait+0x8c>
 80080b4:	4b0b      	ldr	r3, [pc, #44]	; (80080e4 <osMutexWait+0x98>)
 80080b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ba:	601a      	str	r2, [r3, #0]
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	e008      	b.n	80080d8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80080c6:	68f9      	ldr	r1, [r7, #12]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 ff83 	bl	8008fd4 <xQueueSemaphoreTake>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d001      	beq.n	80080d8 <osMutexWait+0x8c>
    return osErrorOS;
 80080d4:	23ff      	movs	r3, #255	; 0xff
 80080d6:	e000      	b.n	80080da <osMutexWait+0x8e>
  }
  
  return osOK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	e000ed04 	.word	0xe000ed04

080080e8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80080f4:	2300      	movs	r3, #0
 80080f6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80080f8:	f7ff ff07 	bl	8007f0a <inHandlerMode>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d016      	beq.n	8008130 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008102:	f107 0308 	add.w	r3, r7, #8
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fde7 	bl	8008cdc <xQueueGiveFromISR>
 800810e:	4603      	mov	r3, r0
 8008110:	2b01      	cmp	r3, #1
 8008112:	d001      	beq.n	8008118 <osMutexRelease+0x30>
      return osErrorOS;
 8008114:	23ff      	movs	r3, #255	; 0xff
 8008116:	e017      	b.n	8008148 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d013      	beq.n	8008146 <osMutexRelease+0x5e>
 800811e:	4b0c      	ldr	r3, [pc, #48]	; (8008150 <osMutexRelease+0x68>)
 8008120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	e00a      	b.n	8008146 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008130:	2300      	movs	r3, #0
 8008132:	2200      	movs	r2, #0
 8008134:	2100      	movs	r1, #0
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fc2a 	bl	8008990 <xQueueGenericSend>
 800813c:	4603      	mov	r3, r0
 800813e:	2b01      	cmp	r3, #1
 8008140:	d001      	beq.n	8008146 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8008142:	23ff      	movs	r3, #255	; 0xff
 8008144:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008146:	68fb      	ldr	r3, [r7, #12]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	e000ed04 	.word	0xe000ed04

08008154 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af02      	add	r7, sp, #8
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00f      	beq.n	8008186 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d10a      	bne.n	8008182 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	2203      	movs	r2, #3
 8008172:	9200      	str	r2, [sp, #0]
 8008174:	2200      	movs	r2, #0
 8008176:	2100      	movs	r1, #0
 8008178:	2001      	movs	r0, #1
 800817a:	f000 fad9 	bl	8008730 <xQueueGenericCreateStatic>
 800817e:	4603      	mov	r3, r0
 8008180:	e016      	b.n	80081b0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008182:	2300      	movs	r3, #0
 8008184:	e014      	b.n	80081b0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d110      	bne.n	80081ae <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800818c:	2203      	movs	r2, #3
 800818e:	2100      	movs	r1, #0
 8008190:	2001      	movs	r0, #1
 8008192:	f000 fb4f 	bl	8008834 <xQueueGenericCreate>
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d005      	beq.n	80081aa <osSemaphoreCreate+0x56>
 800819e:	2300      	movs	r3, #0
 80081a0:	2200      	movs	r2, #0
 80081a2:	2100      	movs	r1, #0
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 fbf3 	bl	8008990 <xQueueGenericSend>
      return sema;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	e000      	b.n	80081b0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80081ae:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80081c2:	2300      	movs	r3, #0
 80081c4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80081cc:	2380      	movs	r3, #128	; 0x80
 80081ce:	e03a      	b.n	8008246 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081da:	d103      	bne.n	80081e4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80081dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081e0:	60fb      	str	r3, [r7, #12]
 80081e2:	e009      	b.n	80081f8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d006      	beq.n	80081f8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <osSemaphoreWait+0x40>
      ticks = 1;
 80081f4:	2301      	movs	r3, #1
 80081f6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80081f8:	f7ff fe87 	bl	8007f0a <inHandlerMode>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d017      	beq.n	8008232 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008202:	f107 0308 	add.w	r3, r7, #8
 8008206:	461a      	mov	r2, r3
 8008208:	2100      	movs	r1, #0
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fff6 	bl	80091fc <xQueueReceiveFromISR>
 8008210:	4603      	mov	r3, r0
 8008212:	2b01      	cmp	r3, #1
 8008214:	d001      	beq.n	800821a <osSemaphoreWait+0x62>
      return osErrorOS;
 8008216:	23ff      	movs	r3, #255	; 0xff
 8008218:	e015      	b.n	8008246 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d011      	beq.n	8008244 <osSemaphoreWait+0x8c>
 8008220:	4b0b      	ldr	r3, [pc, #44]	; (8008250 <osSemaphoreWait+0x98>)
 8008222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	e008      	b.n	8008244 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008232:	68f9      	ldr	r1, [r7, #12]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fecd 	bl	8008fd4 <xQueueSemaphoreTake>
 800823a:	4603      	mov	r3, r0
 800823c:	2b01      	cmp	r3, #1
 800823e:	d001      	beq.n	8008244 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008240:	23ff      	movs	r3, #255	; 0xff
 8008242:	e000      	b.n	8008246 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	e000ed04 	.word	0xe000ed04

08008254 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800825c:	2300      	movs	r3, #0
 800825e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008260:	2300      	movs	r3, #0
 8008262:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008264:	f7ff fe51 	bl	8007f0a <inHandlerMode>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d016      	beq.n	800829c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800826e:	f107 0308 	add.w	r3, r7, #8
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fd31 	bl	8008cdc <xQueueGiveFromISR>
 800827a:	4603      	mov	r3, r0
 800827c:	2b01      	cmp	r3, #1
 800827e:	d001      	beq.n	8008284 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008280:	23ff      	movs	r3, #255	; 0xff
 8008282:	e017      	b.n	80082b4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d013      	beq.n	80082b2 <osSemaphoreRelease+0x5e>
 800828a:	4b0c      	ldr	r3, [pc, #48]	; (80082bc <osSemaphoreRelease+0x68>)
 800828c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	e00a      	b.n	80082b2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800829c:	2300      	movs	r3, #0
 800829e:	2200      	movs	r2, #0
 80082a0:	2100      	movs	r1, #0
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fb74 	bl	8008990 <xQueueGenericSend>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d001      	beq.n	80082b2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80082ae:	23ff      	movs	r3, #255	; 0xff
 80082b0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80082b2:	68fb      	ldr	r3, [r7, #12]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	e000ed04 	.word	0xe000ed04

080082c0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80082c8:	f7ff fe1f 	bl	8007f0a <inHandlerMode>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80082d2:	2382      	movs	r3, #130	; 0x82
 80082d4:	e003      	b.n	80082de <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f001 f856 	bl	8009388 <vQueueDelete>

  return osOK; 
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80082e6:	b590      	push	{r4, r7, lr}
 80082e8:	b085      	sub	sp, #20
 80082ea:	af02      	add	r7, sp, #8
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d011      	beq.n	800831c <osMessageCreate+0x36>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00d      	beq.n	800831c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6818      	ldr	r0, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6859      	ldr	r1, [r3, #4]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	2400      	movs	r4, #0
 8008312:	9400      	str	r4, [sp, #0]
 8008314:	f000 fa0c 	bl	8008730 <xQueueGenericCreateStatic>
 8008318:	4603      	mov	r3, r0
 800831a:	e008      	b.n	800832e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6818      	ldr	r0, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	4619      	mov	r1, r3
 8008328:	f000 fa84 	bl	8008834 <xQueueGenericCreate>
 800832c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800832e:	4618      	mov	r0, r3
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	bd90      	pop	{r4, r7, pc}
	...

08008338 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008344:	2300      	movs	r3, #0
 8008346:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <osMessagePut+0x1e>
    ticks = 1;
 8008352:	2301      	movs	r3, #1
 8008354:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008356:	f7ff fdd8 	bl	8007f0a <inHandlerMode>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d018      	beq.n	8008392 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008360:	f107 0210 	add.w	r2, r7, #16
 8008364:	f107 0108 	add.w	r1, r7, #8
 8008368:	2300      	movs	r3, #0
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 fc16 	bl	8008b9c <xQueueGenericSendFromISR>
 8008370:	4603      	mov	r3, r0
 8008372:	2b01      	cmp	r3, #1
 8008374:	d001      	beq.n	800837a <osMessagePut+0x42>
      return osErrorOS;
 8008376:	23ff      	movs	r3, #255	; 0xff
 8008378:	e018      	b.n	80083ac <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d014      	beq.n	80083aa <osMessagePut+0x72>
 8008380:	4b0c      	ldr	r3, [pc, #48]	; (80083b4 <osMessagePut+0x7c>)
 8008382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	e00b      	b.n	80083aa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008392:	f107 0108 	add.w	r1, r7, #8
 8008396:	2300      	movs	r3, #0
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f000 faf8 	bl	8008990 <xQueueGenericSend>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d001      	beq.n	80083aa <osMessagePut+0x72>
      return osErrorOS;
 80083a6:	23ff      	movs	r3, #255	; 0xff
 80083a8:	e000      	b.n	80083ac <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	e000ed04 	.word	0xe000ed04

080083b8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80083b8:	b590      	push	{r4, r7, lr}
 80083ba:	b08b      	sub	sp, #44	; 0x2c
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80083c8:	2300      	movs	r3, #0
 80083ca:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10a      	bne.n	80083e8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80083d2:	2380      	movs	r3, #128	; 0x80
 80083d4:	617b      	str	r3, [r7, #20]
    return event;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	461c      	mov	r4, r3
 80083da:	f107 0314 	add.w	r3, r7, #20
 80083de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80083e6:	e054      	b.n	8008492 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80083e8:	2300      	movs	r3, #0
 80083ea:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80083ec:	2300      	movs	r3, #0
 80083ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083f6:	d103      	bne.n	8008400 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80083f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083fc:	627b      	str	r3, [r7, #36]	; 0x24
 80083fe:	e009      	b.n	8008414 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d006      	beq.n	8008414 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <osMessageGet+0x5c>
      ticks = 1;
 8008410:	2301      	movs	r3, #1
 8008412:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008414:	f7ff fd79 	bl	8007f0a <inHandlerMode>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d01c      	beq.n	8008458 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800841e:	f107 0220 	add.w	r2, r7, #32
 8008422:	f107 0314 	add.w	r3, r7, #20
 8008426:	3304      	adds	r3, #4
 8008428:	4619      	mov	r1, r3
 800842a:	68b8      	ldr	r0, [r7, #8]
 800842c:	f000 fee6 	bl	80091fc <xQueueReceiveFromISR>
 8008430:	4603      	mov	r3, r0
 8008432:	2b01      	cmp	r3, #1
 8008434:	d102      	bne.n	800843c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008436:	2310      	movs	r3, #16
 8008438:	617b      	str	r3, [r7, #20]
 800843a:	e001      	b.n	8008440 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800843c:	2300      	movs	r3, #0
 800843e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d01d      	beq.n	8008482 <osMessageGet+0xca>
 8008446:	4b15      	ldr	r3, [pc, #84]	; (800849c <osMessageGet+0xe4>)
 8008448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	f3bf 8f6f 	isb	sy
 8008456:	e014      	b.n	8008482 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008458:	f107 0314 	add.w	r3, r7, #20
 800845c:	3304      	adds	r3, #4
 800845e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008460:	4619      	mov	r1, r3
 8008462:	68b8      	ldr	r0, [r7, #8]
 8008464:	f000 fcd0 	bl	8008e08 <xQueueReceive>
 8008468:	4603      	mov	r3, r0
 800846a:	2b01      	cmp	r3, #1
 800846c:	d102      	bne.n	8008474 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800846e:	2310      	movs	r3, #16
 8008470:	617b      	str	r3, [r7, #20]
 8008472:	e006      	b.n	8008482 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	2b00      	cmp	r3, #0
 8008478:	d101      	bne.n	800847e <osMessageGet+0xc6>
 800847a:	2300      	movs	r3, #0
 800847c:	e000      	b.n	8008480 <osMessageGet+0xc8>
 800847e:	2340      	movs	r3, #64	; 0x40
 8008480:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	461c      	mov	r4, r3
 8008486:	f107 0314 	add.w	r3, r7, #20
 800848a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800848e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	372c      	adds	r7, #44	; 0x2c
 8008496:	46bd      	mov	sp, r7
 8008498:	bd90      	pop	{r4, r7, pc}
 800849a:	bf00      	nop
 800849c:	e000ed04 	.word	0xe000ed04

080084a0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80084a8:	f7ff fd2f 	bl	8007f0a <inHandlerMode>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d004      	beq.n	80084bc <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 ff48 	bl	8009348 <uxQueueMessagesWaitingFromISR>
 80084b8:	4603      	mov	r3, r0
 80084ba:	e003      	b.n	80084c4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 ff23 	bl	8009308 <uxQueueMessagesWaiting>
 80084c2:	4603      	mov	r3, r0
  }
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80084d4:	f7ff fd19 	bl	8007f0a <inHandlerMode>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <osMessageDelete+0x16>
    return osErrorISR;
 80084de:	2382      	movs	r3, #130	; 0x82
 80084e0:	e003      	b.n	80084ea <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 ff50 	bl	8009388 <vQueueDelete>

  return osOK; 
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f103 0208 	add.w	r2, r3, #8
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800850a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f103 0208 	add.w	r2, r3, #8
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f103 0208 	add.w	r2, r3, #8
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008526:	bf00      	nop
 8008528:	370c      	adds	r7, #12
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008532:	b480      	push	{r7}
 8008534:	b083      	sub	sp, #12
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	689a      	ldr	r2, [r3, #8]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	601a      	str	r2, [r3, #0]
}
 8008588:	bf00      	nop
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085aa:	d103      	bne.n	80085b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	60fb      	str	r3, [r7, #12]
 80085b2:	e00c      	b.n	80085ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	3308      	adds	r3, #8
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	e002      	b.n	80085c2 <vListInsert+0x2e>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	60fb      	str	r3, [r7, #12]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d2f6      	bcs.n	80085bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	601a      	str	r2, [r3, #0]
}
 80085fa:	bf00      	nop
 80085fc:	3714      	adds	r7, #20
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008606:	b480      	push	{r7}
 8008608:	b085      	sub	sp, #20
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	6892      	ldr	r2, [r2, #8]
 800861c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	6852      	ldr	r2, [r2, #4]
 8008626:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	429a      	cmp	r2, r3
 8008630:	d103      	bne.n	800863a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	689a      	ldr	r2, [r3, #8]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	1e5a      	subs	r2, r3, #1
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
	...

0800865c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10c      	bne.n	800868a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	b672      	cpsid	i
 8008676:	f383 8811 	msr	BASEPRI, r3
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	b662      	cpsie	i
 8008684:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008686:	bf00      	nop
 8008688:	e7fe      	b.n	8008688 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800868a:	f002 f947 	bl	800a91c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008696:	68f9      	ldr	r1, [r7, #12]
 8008698:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800869a:	fb01 f303 	mul.w	r3, r1, r3
 800869e:	441a      	add	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ba:	3b01      	subs	r3, #1
 80086bc:	68f9      	ldr	r1, [r7, #12]
 80086be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086c0:	fb01 f303 	mul.w	r3, r1, r3
 80086c4:	441a      	add	r2, r3
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	22ff      	movs	r2, #255	; 0xff
 80086ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	22ff      	movs	r2, #255	; 0xff
 80086d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d114      	bne.n	800870a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d01a      	beq.n	800871e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	3310      	adds	r3, #16
 80086ec:	4618      	mov	r0, r3
 80086ee:	f001 fc05 	bl	8009efc <xTaskRemoveFromEventList>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d012      	beq.n	800871e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80086f8:	4b0c      	ldr	r3, [pc, #48]	; (800872c <xQueueGenericReset+0xd0>)
 80086fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	e009      	b.n	800871e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	3310      	adds	r3, #16
 800870e:	4618      	mov	r0, r3
 8008710:	f7ff feef 	bl	80084f2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3324      	adds	r3, #36	; 0x24
 8008718:	4618      	mov	r0, r3
 800871a:	f7ff feea 	bl	80084f2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800871e:	f002 f931 	bl	800a984 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008722:	2301      	movs	r3, #1
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	e000ed04 	.word	0xe000ed04

08008730 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008730:	b580      	push	{r7, lr}
 8008732:	b08e      	sub	sp, #56	; 0x38
 8008734:	af02      	add	r7, sp, #8
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
 800873c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10c      	bne.n	800875e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008748:	b672      	cpsid	i
 800874a:	f383 8811 	msr	BASEPRI, r3
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	b662      	cpsie	i
 8008758:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800875a:	bf00      	nop
 800875c:	e7fe      	b.n	800875c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10c      	bne.n	800877e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8008764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008768:	b672      	cpsid	i
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	b662      	cpsie	i
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
}
 800877a:	bf00      	nop
 800877c:	e7fe      	b.n	800877c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <xQueueGenericCreateStatic+0x5a>
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d001      	beq.n	800878e <xQueueGenericCreateStatic+0x5e>
 800878a:	2301      	movs	r3, #1
 800878c:	e000      	b.n	8008790 <xQueueGenericCreateStatic+0x60>
 800878e:	2300      	movs	r3, #0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10c      	bne.n	80087ae <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	b672      	cpsid	i
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	b662      	cpsie	i
 80087a8:	623b      	str	r3, [r7, #32]
}
 80087aa:	bf00      	nop
 80087ac:	e7fe      	b.n	80087ac <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d102      	bne.n	80087ba <xQueueGenericCreateStatic+0x8a>
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <xQueueGenericCreateStatic+0x8e>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e000      	b.n	80087c0 <xQueueGenericCreateStatic+0x90>
 80087be:	2300      	movs	r3, #0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10c      	bne.n	80087de <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	b672      	cpsid	i
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	b662      	cpsie	i
 80087d8:	61fb      	str	r3, [r7, #28]
}
 80087da:	bf00      	nop
 80087dc:	e7fe      	b.n	80087dc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80087de:	2348      	movs	r3, #72	; 0x48
 80087e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2b48      	cmp	r3, #72	; 0x48
 80087e6:	d00c      	beq.n	8008802 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80087e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ec:	b672      	cpsid	i
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	b662      	cpsie	i
 80087fc:	61bb      	str	r3, [r7, #24]
}
 80087fe:	bf00      	nop
 8008800:	e7fe      	b.n	8008800 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008802:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00d      	beq.n	800882a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800880e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008810:	2201      	movs	r2, #1
 8008812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008816:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800881a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	4613      	mov	r3, r2
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	68b9      	ldr	r1, [r7, #8]
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 f847 	bl	80088b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800882a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800882c:	4618      	mov	r0, r3
 800882e:	3730      	adds	r7, #48	; 0x30
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08a      	sub	sp, #40	; 0x28
 8008838:	af02      	add	r7, sp, #8
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	4613      	mov	r3, r2
 8008840:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10c      	bne.n	8008862 <xQueueGenericCreate+0x2e>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	b672      	cpsid	i
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	b662      	cpsie	i
 800885c:	613b      	str	r3, [r7, #16]
}
 800885e:	bf00      	nop
 8008860:	e7fe      	b.n	8008860 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d102      	bne.n	800886e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008868:	2300      	movs	r3, #0
 800886a:	61fb      	str	r3, [r7, #28]
 800886c:	e004      	b.n	8008878 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	fb02 f303 	mul.w	r3, r2, r3
 8008876:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	3348      	adds	r3, #72	; 0x48
 800887c:	4618      	mov	r0, r3
 800887e:	f002 f979 	bl	800ab74 <pvPortMalloc>
 8008882:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d011      	beq.n	80088ae <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	3348      	adds	r3, #72	; 0x48
 8008892:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800889c:	79fa      	ldrb	r2, [r7, #7]
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	4613      	mov	r3, r2
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	68b9      	ldr	r1, [r7, #8]
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 f805 	bl	80088b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088ae:	69bb      	ldr	r3, [r7, #24]
	}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3720      	adds	r7, #32
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
 80088c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d103      	bne.n	80088d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	69ba      	ldr	r2, [r7, #24]
 80088d0:	601a      	str	r2, [r3, #0]
 80088d2:	e002      	b.n	80088da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088e6:	2101      	movs	r1, #1
 80088e8:	69b8      	ldr	r0, [r7, #24]
 80088ea:	f7ff feb7 	bl	800865c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80088ee:	bf00      	nop
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b082      	sub	sp, #8
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00e      	beq.n	8008922 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008916:	2300      	movs	r3, #0
 8008918:	2200      	movs	r2, #0
 800891a:	2100      	movs	r1, #0
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f837 	bl	8008990 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008922:	bf00      	nop
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800892a:	b580      	push	{r7, lr}
 800892c:	b086      	sub	sp, #24
 800892e:	af00      	add	r7, sp, #0
 8008930:	4603      	mov	r3, r0
 8008932:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008934:	2301      	movs	r3, #1
 8008936:	617b      	str	r3, [r7, #20]
 8008938:	2300      	movs	r3, #0
 800893a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800893c:	79fb      	ldrb	r3, [r7, #7]
 800893e:	461a      	mov	r2, r3
 8008940:	6939      	ldr	r1, [r7, #16]
 8008942:	6978      	ldr	r0, [r7, #20]
 8008944:	f7ff ff76 	bl	8008834 <xQueueGenericCreate>
 8008948:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f7ff ffd3 	bl	80088f6 <prvInitialiseMutex>

		return xNewQueue;
 8008950:	68fb      	ldr	r3, [r7, #12]
	}
 8008952:	4618      	mov	r0, r3
 8008954:	3718      	adds	r7, #24
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800895a:	b580      	push	{r7, lr}
 800895c:	b088      	sub	sp, #32
 800895e:	af02      	add	r7, sp, #8
 8008960:	4603      	mov	r3, r0
 8008962:	6039      	str	r1, [r7, #0]
 8008964:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008966:	2301      	movs	r3, #1
 8008968:	617b      	str	r3, [r7, #20]
 800896a:	2300      	movs	r3, #0
 800896c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2200      	movs	r2, #0
 8008976:	6939      	ldr	r1, [r7, #16]
 8008978:	6978      	ldr	r0, [r7, #20]
 800897a:	f7ff fed9 	bl	8008730 <xQueueGenericCreateStatic>
 800897e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f7ff ffb8 	bl	80088f6 <prvInitialiseMutex>

		return xNewQueue;
 8008986:	68fb      	ldr	r3, [r7, #12]
	}
 8008988:	4618      	mov	r0, r3
 800898a:	3718      	adds	r7, #24
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b08e      	sub	sp, #56	; 0x38
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
 800899c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800899e:	2300      	movs	r3, #0
 80089a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80089a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10c      	bne.n	80089c6 <xQueueGenericSend+0x36>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	b672      	cpsid	i
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	b662      	cpsie	i
 80089c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80089c2:	bf00      	nop
 80089c4:	e7fe      	b.n	80089c4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d103      	bne.n	80089d4 <xQueueGenericSend+0x44>
 80089cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <xQueueGenericSend+0x48>
 80089d4:	2301      	movs	r3, #1
 80089d6:	e000      	b.n	80089da <xQueueGenericSend+0x4a>
 80089d8:	2300      	movs	r3, #0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10c      	bne.n	80089f8 <xQueueGenericSend+0x68>
	__asm volatile
 80089de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e2:	b672      	cpsid	i
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	b662      	cpsie	i
 80089f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089f4:	bf00      	nop
 80089f6:	e7fe      	b.n	80089f6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d103      	bne.n	8008a06 <xQueueGenericSend+0x76>
 80089fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d101      	bne.n	8008a0a <xQueueGenericSend+0x7a>
 8008a06:	2301      	movs	r3, #1
 8008a08:	e000      	b.n	8008a0c <xQueueGenericSend+0x7c>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10c      	bne.n	8008a2a <xQueueGenericSend+0x9a>
	__asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a14:	b672      	cpsid	i
 8008a16:	f383 8811 	msr	BASEPRI, r3
 8008a1a:	f3bf 8f6f 	isb	sy
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	b662      	cpsie	i
 8008a24:	623b      	str	r3, [r7, #32]
}
 8008a26:	bf00      	nop
 8008a28:	e7fe      	b.n	8008a28 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a2a:	f001 fc2b 	bl	800a284 <xTaskGetSchedulerState>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <xQueueGenericSend+0xaa>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d101      	bne.n	8008a3e <xQueueGenericSend+0xae>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e000      	b.n	8008a40 <xQueueGenericSend+0xb0>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10c      	bne.n	8008a5e <xQueueGenericSend+0xce>
	__asm volatile
 8008a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a48:	b672      	cpsid	i
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	b662      	cpsie	i
 8008a58:	61fb      	str	r3, [r7, #28]
}
 8008a5a:	bf00      	nop
 8008a5c:	e7fe      	b.n	8008a5c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a5e:	f001 ff5d 	bl	800a91c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d302      	bcc.n	8008a74 <xQueueGenericSend+0xe4>
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d129      	bne.n	8008ac8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	68b9      	ldr	r1, [r7, #8]
 8008a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a7a:	f000 fcc2 	bl	8009402 <prvCopyDataToQueue>
 8008a7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d010      	beq.n	8008aaa <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8a:	3324      	adds	r3, #36	; 0x24
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f001 fa35 	bl	8009efc <xTaskRemoveFromEventList>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d013      	beq.n	8008ac0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a98:	4b3f      	ldr	r3, [pc, #252]	; (8008b98 <xQueueGenericSend+0x208>)
 8008a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a9e:	601a      	str	r2, [r3, #0]
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	e00a      	b.n	8008ac0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d007      	beq.n	8008ac0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ab0:	4b39      	ldr	r3, [pc, #228]	; (8008b98 <xQueueGenericSend+0x208>)
 8008ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ab6:	601a      	str	r2, [r3, #0]
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ac0:	f001 ff60 	bl	800a984 <vPortExitCritical>
				return pdPASS;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e063      	b.n	8008b90 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d103      	bne.n	8008ad6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ace:	f001 ff59 	bl	800a984 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e05c      	b.n	8008b90 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d106      	bne.n	8008aea <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008adc:	f107 0314 	add.w	r3, r7, #20
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f001 fa6f 	bl	8009fc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008aea:	f001 ff4b 	bl	800a984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008aee:	f000 fff9 	bl	8009ae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008af2:	f001 ff13 	bl	800a91c <vPortEnterCritical>
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008afc:	b25b      	sxtb	r3, r3
 8008afe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b02:	d103      	bne.n	8008b0c <xQueueGenericSend+0x17c>
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b12:	b25b      	sxtb	r3, r3
 8008b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b18:	d103      	bne.n	8008b22 <xQueueGenericSend+0x192>
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b22:	f001 ff2f 	bl	800a984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b26:	1d3a      	adds	r2, r7, #4
 8008b28:	f107 0314 	add.w	r3, r7, #20
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f001 fa5e 	bl	8009ff0 <xTaskCheckForTimeOut>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d124      	bne.n	8008b84 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b3c:	f000 fd59 	bl	80095f2 <prvIsQueueFull>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d018      	beq.n	8008b78 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b48:	3310      	adds	r3, #16
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f001 f9ae 	bl	8009eb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b56:	f000 fce4 	bl	8009522 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b5a:	f000 ffd1 	bl	8009b00 <xTaskResumeAll>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f47f af7c 	bne.w	8008a5e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008b66:	4b0c      	ldr	r3, [pc, #48]	; (8008b98 <xQueueGenericSend+0x208>)
 8008b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b6c:	601a      	str	r2, [r3, #0]
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	e772      	b.n	8008a5e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b7a:	f000 fcd2 	bl	8009522 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b7e:	f000 ffbf 	bl	8009b00 <xTaskResumeAll>
 8008b82:	e76c      	b.n	8008a5e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b86:	f000 fccc 	bl	8009522 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b8a:	f000 ffb9 	bl	8009b00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3738      	adds	r7, #56	; 0x38
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	e000ed04 	.word	0xe000ed04

08008b9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b08e      	sub	sp, #56	; 0x38
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
 8008ba8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10c      	bne.n	8008bce <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb8:	b672      	cpsid	i
 8008bba:	f383 8811 	msr	BASEPRI, r3
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	b662      	cpsie	i
 8008bc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008bca:	bf00      	nop
 8008bcc:	e7fe      	b.n	8008bcc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d103      	bne.n	8008bdc <xQueueGenericSendFromISR+0x40>
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d101      	bne.n	8008be0 <xQueueGenericSendFromISR+0x44>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e000      	b.n	8008be2 <xQueueGenericSendFromISR+0x46>
 8008be0:	2300      	movs	r3, #0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10c      	bne.n	8008c00 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	b672      	cpsid	i
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	b662      	cpsie	i
 8008bfa:	623b      	str	r3, [r7, #32]
}
 8008bfc:	bf00      	nop
 8008bfe:	e7fe      	b.n	8008bfe <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d103      	bne.n	8008c0e <xQueueGenericSendFromISR+0x72>
 8008c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d101      	bne.n	8008c12 <xQueueGenericSendFromISR+0x76>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e000      	b.n	8008c14 <xQueueGenericSendFromISR+0x78>
 8008c12:	2300      	movs	r3, #0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10c      	bne.n	8008c32 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1c:	b672      	cpsid	i
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	b662      	cpsie	i
 8008c2c:	61fb      	str	r3, [r7, #28]
}
 8008c2e:	bf00      	nop
 8008c30:	e7fe      	b.n	8008c30 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c32:	f001 ff5b 	bl	800aaec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c36:	f3ef 8211 	mrs	r2, BASEPRI
 8008c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3e:	b672      	cpsid	i
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	b662      	cpsie	i
 8008c4e:	61ba      	str	r2, [r7, #24]
 8008c50:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c52:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d302      	bcc.n	8008c68 <xQueueGenericSendFromISR+0xcc>
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d12c      	bne.n	8008cc2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	68b9      	ldr	r1, [r7, #8]
 8008c76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c78:	f000 fbc3 	bl	8009402 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c7c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c84:	d112      	bne.n	8008cac <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d016      	beq.n	8008cbc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c90:	3324      	adds	r3, #36	; 0x24
 8008c92:	4618      	mov	r0, r3
 8008c94:	f001 f932 	bl	8009efc <xTaskRemoveFromEventList>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00e      	beq.n	8008cbc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00b      	beq.n	8008cbc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	601a      	str	r2, [r3, #0]
 8008caa:	e007      	b.n	8008cbc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008cac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	b25a      	sxtb	r2, r3
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008cc0:	e001      	b.n	8008cc6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8008cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008cd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3738      	adds	r7, #56	; 0x38
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b08e      	sub	sp, #56	; 0x38
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10c      	bne.n	8008d0a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf4:	b672      	cpsid	i
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	b662      	cpsie	i
 8008d04:	623b      	str	r3, [r7, #32]
}
 8008d06:	bf00      	nop
 8008d08:	e7fe      	b.n	8008d08 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00c      	beq.n	8008d2c <xQueueGiveFromISR+0x50>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d16:	b672      	cpsid	i
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	b662      	cpsie	i
 8008d26:	61fb      	str	r3, [r7, #28]
}
 8008d28:	bf00      	nop
 8008d2a:	e7fe      	b.n	8008d2a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d103      	bne.n	8008d3c <xQueueGiveFromISR+0x60>
 8008d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d101      	bne.n	8008d40 <xQueueGiveFromISR+0x64>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e000      	b.n	8008d42 <xQueueGiveFromISR+0x66>
 8008d40:	2300      	movs	r3, #0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10c      	bne.n	8008d60 <xQueueGiveFromISR+0x84>
	__asm volatile
 8008d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4a:	b672      	cpsid	i
 8008d4c:	f383 8811 	msr	BASEPRI, r3
 8008d50:	f3bf 8f6f 	isb	sy
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	b662      	cpsie	i
 8008d5a:	61bb      	str	r3, [r7, #24]
}
 8008d5c:	bf00      	nop
 8008d5e:	e7fe      	b.n	8008d5e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d60:	f001 fec4 	bl	800aaec <vPortValidateInterruptPriority>
	__asm volatile
 8008d64:	f3ef 8211 	mrs	r2, BASEPRI
 8008d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6c:	b672      	cpsid	i
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	b662      	cpsie	i
 8008d7c:	617a      	str	r2, [r7, #20]
 8008d7e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008d80:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d82:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d88:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d22b      	bcs.n	8008dec <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da0:	1c5a      	adds	r2, r3, #1
 8008da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008da6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dae:	d112      	bne.n	8008dd6 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d016      	beq.n	8008de6 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dba:	3324      	adds	r3, #36	; 0x24
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f001 f89d 	bl	8009efc <xTaskRemoveFromEventList>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00e      	beq.n	8008de6 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00b      	beq.n	8008de6 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	e007      	b.n	8008de6 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dda:	3301      	adds	r3, #1
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	b25a      	sxtb	r2, r3
 8008de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008de6:	2301      	movs	r3, #1
 8008de8:	637b      	str	r3, [r7, #52]	; 0x34
 8008dea:	e001      	b.n	8008df0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008dec:	2300      	movs	r3, #0
 8008dee:	637b      	str	r3, [r7, #52]	; 0x34
 8008df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f383 8811 	msr	BASEPRI, r3
}
 8008dfa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3738      	adds	r7, #56	; 0x38
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08c      	sub	sp, #48	; 0x30
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e14:	2300      	movs	r3, #0
 8008e16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10c      	bne.n	8008e3c <xQueueReceive+0x34>
	__asm volatile
 8008e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e26:	b672      	cpsid	i
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	b662      	cpsie	i
 8008e36:	623b      	str	r3, [r7, #32]
}
 8008e38:	bf00      	nop
 8008e3a:	e7fe      	b.n	8008e3a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d103      	bne.n	8008e4a <xQueueReceive+0x42>
 8008e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d101      	bne.n	8008e4e <xQueueReceive+0x46>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e000      	b.n	8008e50 <xQueueReceive+0x48>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d10c      	bne.n	8008e6e <xQueueReceive+0x66>
	__asm volatile
 8008e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e58:	b672      	cpsid	i
 8008e5a:	f383 8811 	msr	BASEPRI, r3
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	b662      	cpsie	i
 8008e68:	61fb      	str	r3, [r7, #28]
}
 8008e6a:	bf00      	nop
 8008e6c:	e7fe      	b.n	8008e6c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e6e:	f001 fa09 	bl	800a284 <xTaskGetSchedulerState>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d102      	bne.n	8008e7e <xQueueReceive+0x76>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d101      	bne.n	8008e82 <xQueueReceive+0x7a>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e000      	b.n	8008e84 <xQueueReceive+0x7c>
 8008e82:	2300      	movs	r3, #0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10c      	bne.n	8008ea2 <xQueueReceive+0x9a>
	__asm volatile
 8008e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8c:	b672      	cpsid	i
 8008e8e:	f383 8811 	msr	BASEPRI, r3
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	b662      	cpsie	i
 8008e9c:	61bb      	str	r3, [r7, #24]
}
 8008e9e:	bf00      	nop
 8008ea0:	e7fe      	b.n	8008ea0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ea2:	f001 fd3b 	bl	800a91c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eaa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d01f      	beq.n	8008ef2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008eb2:	68b9      	ldr	r1, [r7, #8]
 8008eb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eb6:	f000 fb0e 	bl	80094d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	1e5a      	subs	r2, r3, #1
 8008ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00f      	beq.n	8008eea <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ecc:	3310      	adds	r3, #16
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f001 f814 	bl	8009efc <xTaskRemoveFromEventList>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d007      	beq.n	8008eea <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008eda:	4b3d      	ldr	r3, [pc, #244]	; (8008fd0 <xQueueReceive+0x1c8>)
 8008edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ee0:	601a      	str	r2, [r3, #0]
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008eea:	f001 fd4b 	bl	800a984 <vPortExitCritical>
				return pdPASS;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e069      	b.n	8008fc6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d103      	bne.n	8008f00 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ef8:	f001 fd44 	bl	800a984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008efc:	2300      	movs	r3, #0
 8008efe:	e062      	b.n	8008fc6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d106      	bne.n	8008f14 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f06:	f107 0310 	add.w	r3, r7, #16
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f001 f85a 	bl	8009fc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f10:	2301      	movs	r3, #1
 8008f12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f14:	f001 fd36 	bl	800a984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f18:	f000 fde4 	bl	8009ae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f1c:	f001 fcfe 	bl	800a91c <vPortEnterCritical>
 8008f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f26:	b25b      	sxtb	r3, r3
 8008f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f2c:	d103      	bne.n	8008f36 <xQueueReceive+0x12e>
 8008f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f3c:	b25b      	sxtb	r3, r3
 8008f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f42:	d103      	bne.n	8008f4c <xQueueReceive+0x144>
 8008f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f4c:	f001 fd1a 	bl	800a984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f50:	1d3a      	adds	r2, r7, #4
 8008f52:	f107 0310 	add.w	r3, r7, #16
 8008f56:	4611      	mov	r1, r2
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f001 f849 	bl	8009ff0 <xTaskCheckForTimeOut>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d123      	bne.n	8008fac <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f66:	f000 fb2e 	bl	80095c6 <prvIsQueueEmpty>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d017      	beq.n	8008fa0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f72:	3324      	adds	r3, #36	; 0x24
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	4611      	mov	r1, r2
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f000 ff99 	bl	8009eb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f80:	f000 facf 	bl	8009522 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f84:	f000 fdbc 	bl	8009b00 <xTaskResumeAll>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d189      	bne.n	8008ea2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008f8e:	4b10      	ldr	r3, [pc, #64]	; (8008fd0 <xQueueReceive+0x1c8>)
 8008f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	e780      	b.n	8008ea2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fa2:	f000 fabe 	bl	8009522 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fa6:	f000 fdab 	bl	8009b00 <xTaskResumeAll>
 8008faa:	e77a      	b.n	8008ea2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fae:	f000 fab8 	bl	8009522 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fb2:	f000 fda5 	bl	8009b00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fb8:	f000 fb05 	bl	80095c6 <prvIsQueueEmpty>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f43f af6f 	beq.w	8008ea2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008fc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3730      	adds	r7, #48	; 0x30
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	e000ed04 	.word	0xe000ed04

08008fd4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b08e      	sub	sp, #56	; 0x38
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10c      	bne.n	800900a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff4:	b672      	cpsid	i
 8008ff6:	f383 8811 	msr	BASEPRI, r3
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	b662      	cpsie	i
 8009004:	623b      	str	r3, [r7, #32]
}
 8009006:	bf00      	nop
 8009008:	e7fe      	b.n	8009008 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800900a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00c      	beq.n	800902c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8009012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009016:	b672      	cpsid	i
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	b662      	cpsie	i
 8009026:	61fb      	str	r3, [r7, #28]
}
 8009028:	bf00      	nop
 800902a:	e7fe      	b.n	800902a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800902c:	f001 f92a 	bl	800a284 <xTaskGetSchedulerState>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d102      	bne.n	800903c <xQueueSemaphoreTake+0x68>
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d101      	bne.n	8009040 <xQueueSemaphoreTake+0x6c>
 800903c:	2301      	movs	r3, #1
 800903e:	e000      	b.n	8009042 <xQueueSemaphoreTake+0x6e>
 8009040:	2300      	movs	r3, #0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10c      	bne.n	8009060 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8009046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904a:	b672      	cpsid	i
 800904c:	f383 8811 	msr	BASEPRI, r3
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	b662      	cpsie	i
 800905a:	61bb      	str	r3, [r7, #24]
}
 800905c:	bf00      	nop
 800905e:	e7fe      	b.n	800905e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009060:	f001 fc5c 	bl	800a91c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009068:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800906a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906c:	2b00      	cmp	r3, #0
 800906e:	d024      	beq.n	80090ba <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	1e5a      	subs	r2, r3, #1
 8009074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009076:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d104      	bne.n	800908a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009080:	f001 fac6 	bl	800a610 <pvTaskIncrementMutexHeldCount>
 8009084:	4602      	mov	r2, r0
 8009086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009088:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00f      	beq.n	80090b2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009094:	3310      	adds	r3, #16
 8009096:	4618      	mov	r0, r3
 8009098:	f000 ff30 	bl	8009efc <xTaskRemoveFromEventList>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d007      	beq.n	80090b2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80090a2:	4b55      	ldr	r3, [pc, #340]	; (80091f8 <xQueueSemaphoreTake+0x224>)
 80090a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80090b2:	f001 fc67 	bl	800a984 <vPortExitCritical>
				return pdPASS;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e099      	b.n	80091ee <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d113      	bne.n	80090e8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80090c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00c      	beq.n	80090e0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	b672      	cpsid	i
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	b662      	cpsie	i
 80090da:	617b      	str	r3, [r7, #20]
}
 80090dc:	bf00      	nop
 80090de:	e7fe      	b.n	80090de <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80090e0:	f001 fc50 	bl	800a984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80090e4:	2300      	movs	r3, #0
 80090e6:	e082      	b.n	80091ee <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d106      	bne.n	80090fc <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090ee:	f107 030c 	add.w	r3, r7, #12
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 ff66 	bl	8009fc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090f8:	2301      	movs	r3, #1
 80090fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090fc:	f001 fc42 	bl	800a984 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009100:	f000 fcf0 	bl	8009ae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009104:	f001 fc0a 	bl	800a91c <vPortEnterCritical>
 8009108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800910e:	b25b      	sxtb	r3, r3
 8009110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009114:	d103      	bne.n	800911e <xQueueSemaphoreTake+0x14a>
 8009116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009118:	2200      	movs	r2, #0
 800911a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800911e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009124:	b25b      	sxtb	r3, r3
 8009126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800912a:	d103      	bne.n	8009134 <xQueueSemaphoreTake+0x160>
 800912c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912e:	2200      	movs	r2, #0
 8009130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009134:	f001 fc26 	bl	800a984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009138:	463a      	mov	r2, r7
 800913a:	f107 030c 	add.w	r3, r7, #12
 800913e:	4611      	mov	r1, r2
 8009140:	4618      	mov	r0, r3
 8009142:	f000 ff55 	bl	8009ff0 <xTaskCheckForTimeOut>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d132      	bne.n	80091b2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800914c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800914e:	f000 fa3a 	bl	80095c6 <prvIsQueueEmpty>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d026      	beq.n	80091a6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d109      	bne.n	8009174 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8009160:	f001 fbdc 	bl	800a91c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	4618      	mov	r0, r3
 800916a:	f001 f8a9 	bl	800a2c0 <xTaskPriorityInherit>
 800916e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009170:	f001 fc08 	bl	800a984 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009176:	3324      	adds	r3, #36	; 0x24
 8009178:	683a      	ldr	r2, [r7, #0]
 800917a:	4611      	mov	r1, r2
 800917c:	4618      	mov	r0, r3
 800917e:	f000 fe97 	bl	8009eb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009182:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009184:	f000 f9cd 	bl	8009522 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009188:	f000 fcba 	bl	8009b00 <xTaskResumeAll>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	f47f af66 	bne.w	8009060 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8009194:	4b18      	ldr	r3, [pc, #96]	; (80091f8 <xQueueSemaphoreTake+0x224>)
 8009196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	f3bf 8f6f 	isb	sy
 80091a4:	e75c      	b.n	8009060 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80091a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091a8:	f000 f9bb 	bl	8009522 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091ac:	f000 fca8 	bl	8009b00 <xTaskResumeAll>
 80091b0:	e756      	b.n	8009060 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80091b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091b4:	f000 f9b5 	bl	8009522 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091b8:	f000 fca2 	bl	8009b00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091be:	f000 fa02 	bl	80095c6 <prvIsQueueEmpty>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f43f af4b 	beq.w	8009060 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80091ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00d      	beq.n	80091ec <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80091d0:	f001 fba4 	bl	800a91c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80091d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091d6:	f000 f8fc 	bl	80093d2 <prvGetDisinheritPriorityAfterTimeout>
 80091da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80091dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091e2:	4618      	mov	r0, r3
 80091e4:	f001 f976 	bl	800a4d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80091e8:	f001 fbcc 	bl	800a984 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80091ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3738      	adds	r7, #56	; 0x38
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	e000ed04 	.word	0xe000ed04

080091fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08e      	sub	sp, #56	; 0x38
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800920c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10c      	bne.n	800922c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8009212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009216:	b672      	cpsid	i
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	b662      	cpsie	i
 8009226:	623b      	str	r3, [r7, #32]
}
 8009228:	bf00      	nop
 800922a:	e7fe      	b.n	800922a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d103      	bne.n	800923a <xQueueReceiveFromISR+0x3e>
 8009232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <xQueueReceiveFromISR+0x42>
 800923a:	2301      	movs	r3, #1
 800923c:	e000      	b.n	8009240 <xQueueReceiveFromISR+0x44>
 800923e:	2300      	movs	r3, #0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10c      	bne.n	800925e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8009244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009248:	b672      	cpsid	i
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	b662      	cpsie	i
 8009258:	61fb      	str	r3, [r7, #28]
}
 800925a:	bf00      	nop
 800925c:	e7fe      	b.n	800925c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800925e:	f001 fc45 	bl	800aaec <vPortValidateInterruptPriority>
	__asm volatile
 8009262:	f3ef 8211 	mrs	r2, BASEPRI
 8009266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926a:	b672      	cpsid	i
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	b662      	cpsie	i
 800927a:	61ba      	str	r2, [r7, #24]
 800927c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800927e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009280:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009286:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928a:	2b00      	cmp	r3, #0
 800928c:	d02f      	beq.n	80092ee <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009290:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009298:	68b9      	ldr	r1, [r7, #8]
 800929a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800929c:	f000 f91b 	bl	80094d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80092a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a2:	1e5a      	subs	r2, r3, #1
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80092a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80092ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092b0:	d112      	bne.n	80092d8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d016      	beq.n	80092e8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092bc:	3310      	adds	r3, #16
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 fe1c 	bl	8009efc <xTaskRemoveFromEventList>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00e      	beq.n	80092e8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00b      	beq.n	80092e8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	e007      	b.n	80092e8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80092d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092dc:	3301      	adds	r3, #1
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	b25a      	sxtb	r2, r3
 80092e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80092e8:	2301      	movs	r3, #1
 80092ea:	637b      	str	r3, [r7, #52]	; 0x34
 80092ec:	e001      	b.n	80092f2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80092ee:	2300      	movs	r3, #0
 80092f0:	637b      	str	r3, [r7, #52]	; 0x34
 80092f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	f383 8811 	msr	BASEPRI, r3
}
 80092fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009300:	4618      	mov	r0, r3
 8009302:	3738      	adds	r7, #56	; 0x38
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10c      	bne.n	8009330 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8009316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931a:	b672      	cpsid	i
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	b662      	cpsie	i
 800932a:	60bb      	str	r3, [r7, #8]
}
 800932c:	bf00      	nop
 800932e:	e7fe      	b.n	800932e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8009330:	f001 faf4 	bl	800a91c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009338:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800933a:	f001 fb23 	bl	800a984 <vPortExitCritical>

	return uxReturn;
 800933e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009348:	b480      	push	{r7}
 800934a:	b087      	sub	sp, #28
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10c      	bne.n	8009374 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800935a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935e:	b672      	cpsid	i
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	b662      	cpsie	i
 800936e:	60fb      	str	r3, [r7, #12]
}
 8009370:	bf00      	nop
 8009372:	e7fe      	b.n	8009372 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009378:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800937a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800937c:	4618      	mov	r0, r3
 800937e:	371c      	adds	r7, #28
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10c      	bne.n	80093b4 <vQueueDelete+0x2c>
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	b672      	cpsid	i
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	b662      	cpsie	i
 80093ae:	60bb      	str	r3, [r7, #8]
}
 80093b0:	bf00      	nop
 80093b2:	e7fe      	b.n	80093b2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f000 f935 	bl	8009624 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d102      	bne.n	80093ca <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f001 fc9f 	bl	800ad08 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80093ca:	bf00      	nop
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80093d2:	b480      	push	{r7}
 80093d4:	b085      	sub	sp, #20
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d006      	beq.n	80093f0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f1c3 0307 	rsb	r3, r3, #7
 80093ec:	60fb      	str	r3, [r7, #12]
 80093ee:	e001      	b.n	80093f4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80093f0:	2300      	movs	r3, #0
 80093f2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80093f4:	68fb      	ldr	r3, [r7, #12]
	}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3714      	adds	r7, #20
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b086      	sub	sp, #24
 8009406:	af00      	add	r7, sp, #0
 8009408:	60f8      	str	r0, [r7, #12]
 800940a:	60b9      	str	r1, [r7, #8]
 800940c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800940e:	2300      	movs	r3, #0
 8009410:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009416:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10d      	bne.n	800943c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d14d      	bne.n	80094c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	4618      	mov	r0, r3
 800942e:	f000 ffc7 	bl	800a3c0 <xTaskPriorityDisinherit>
 8009432:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	609a      	str	r2, [r3, #8]
 800943a:	e043      	b.n	80094c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d119      	bne.n	8009476 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6858      	ldr	r0, [r3, #4]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944a:	461a      	mov	r2, r3
 800944c:	68b9      	ldr	r1, [r7, #8]
 800944e:	f014 f979 	bl	801d744 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945a:	441a      	add	r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	685a      	ldr	r2, [r3, #4]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	429a      	cmp	r2, r3
 800946a:	d32b      	bcc.n	80094c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	605a      	str	r2, [r3, #4]
 8009474:	e026      	b.n	80094c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	68d8      	ldr	r0, [r3, #12]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947e:	461a      	mov	r2, r3
 8009480:	68b9      	ldr	r1, [r7, #8]
 8009482:	f014 f95f 	bl	801d744 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948e:	425b      	negs	r3, r3
 8009490:	441a      	add	r2, r3
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	68da      	ldr	r2, [r3, #12]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d207      	bcs.n	80094b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	689a      	ldr	r2, [r3, #8]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094aa:	425b      	negs	r3, r3
 80094ac:	441a      	add	r2, r3
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d105      	bne.n	80094c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d002      	beq.n	80094c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	3b01      	subs	r3, #1
 80094c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80094cc:	697b      	ldr	r3, [r7, #20]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b082      	sub	sp, #8
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d018      	beq.n	800951a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68da      	ldr	r2, [r3, #12]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f0:	441a      	add	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	68da      	ldr	r2, [r3, #12]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d303      	bcc.n	800950a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	68d9      	ldr	r1, [r3, #12]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009512:	461a      	mov	r2, r3
 8009514:	6838      	ldr	r0, [r7, #0]
 8009516:	f014 f915 	bl	801d744 <memcpy>
	}
}
 800951a:	bf00      	nop
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b084      	sub	sp, #16
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800952a:	f001 f9f7 	bl	800a91c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009534:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009536:	e011      	b.n	800955c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953c:	2b00      	cmp	r3, #0
 800953e:	d012      	beq.n	8009566 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	3324      	adds	r3, #36	; 0x24
 8009544:	4618      	mov	r0, r3
 8009546:	f000 fcd9 	bl	8009efc <xTaskRemoveFromEventList>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d001      	beq.n	8009554 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009550:	f000 fdb4 	bl	800a0bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009554:	7bfb      	ldrb	r3, [r7, #15]
 8009556:	3b01      	subs	r3, #1
 8009558:	b2db      	uxtb	r3, r3
 800955a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800955c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009560:	2b00      	cmp	r3, #0
 8009562:	dce9      	bgt.n	8009538 <prvUnlockQueue+0x16>
 8009564:	e000      	b.n	8009568 <prvUnlockQueue+0x46>
					break;
 8009566:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	22ff      	movs	r2, #255	; 0xff
 800956c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009570:	f001 fa08 	bl	800a984 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009574:	f001 f9d2 	bl	800a91c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800957e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009580:	e011      	b.n	80095a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d012      	beq.n	80095b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	3310      	adds	r3, #16
 800958e:	4618      	mov	r0, r3
 8009590:	f000 fcb4 	bl	8009efc <xTaskRemoveFromEventList>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800959a:	f000 fd8f 	bl	800a0bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800959e:	7bbb      	ldrb	r3, [r7, #14]
 80095a0:	3b01      	subs	r3, #1
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	dce9      	bgt.n	8009582 <prvUnlockQueue+0x60>
 80095ae:	e000      	b.n	80095b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80095b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	22ff      	movs	r2, #255	; 0xff
 80095b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80095ba:	f001 f9e3 	bl	800a984 <vPortExitCritical>
}
 80095be:	bf00      	nop
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095ce:	f001 f9a5 	bl	800a91c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d102      	bne.n	80095e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80095da:	2301      	movs	r3, #1
 80095dc:	60fb      	str	r3, [r7, #12]
 80095de:	e001      	b.n	80095e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80095e0:	2300      	movs	r3, #0
 80095e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095e4:	f001 f9ce 	bl	800a984 <vPortExitCritical>

	return xReturn;
 80095e8:	68fb      	ldr	r3, [r7, #12]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b084      	sub	sp, #16
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095fa:	f001 f98f 	bl	800a91c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009606:	429a      	cmp	r2, r3
 8009608:	d102      	bne.n	8009610 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800960a:	2301      	movs	r3, #1
 800960c:	60fb      	str	r3, [r7, #12]
 800960e:	e001      	b.n	8009614 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009610:	2300      	movs	r3, #0
 8009612:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009614:	f001 f9b6 	bl	800a984 <vPortExitCritical>

	return xReturn;
 8009618:	68fb      	ldr	r3, [r7, #12]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
	...

08009624 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800962c:	2300      	movs	r3, #0
 800962e:	60fb      	str	r3, [r7, #12]
 8009630:	e016      	b.n	8009660 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009632:	4a10      	ldr	r2, [pc, #64]	; (8009674 <vQueueUnregisterQueue+0x50>)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	00db      	lsls	r3, r3, #3
 8009638:	4413      	add	r3, r2
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	429a      	cmp	r2, r3
 8009640:	d10b      	bne.n	800965a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009642:	4a0c      	ldr	r2, [pc, #48]	; (8009674 <vQueueUnregisterQueue+0x50>)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2100      	movs	r1, #0
 8009648:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800964c:	4a09      	ldr	r2, [pc, #36]	; (8009674 <vQueueUnregisterQueue+0x50>)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	00db      	lsls	r3, r3, #3
 8009652:	4413      	add	r3, r2
 8009654:	2200      	movs	r2, #0
 8009656:	605a      	str	r2, [r3, #4]
				break;
 8009658:	e006      	b.n	8009668 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	3301      	adds	r3, #1
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b07      	cmp	r3, #7
 8009664:	d9e5      	bls.n	8009632 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009666:	bf00      	nop
 8009668:	bf00      	nop
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr
 8009674:	20006524 	.word	0x20006524

08009678 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009678:	b580      	push	{r7, lr}
 800967a:	b08e      	sub	sp, #56	; 0x38
 800967c:	af04      	add	r7, sp, #16
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10c      	bne.n	80096a6 <xTaskCreateStatic+0x2e>
	__asm volatile
 800968c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009690:	b672      	cpsid	i
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	b662      	cpsie	i
 80096a0:	623b      	str	r3, [r7, #32]
}
 80096a2:	bf00      	nop
 80096a4:	e7fe      	b.n	80096a4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80096a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10c      	bne.n	80096c6 <xTaskCreateStatic+0x4e>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b0:	b672      	cpsid	i
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	b662      	cpsie	i
 80096c0:	61fb      	str	r3, [r7, #28]
}
 80096c2:	bf00      	nop
 80096c4:	e7fe      	b.n	80096c4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80096c6:	2354      	movs	r3, #84	; 0x54
 80096c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	2b54      	cmp	r3, #84	; 0x54
 80096ce:	d00c      	beq.n	80096ea <xTaskCreateStatic+0x72>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	b672      	cpsid	i
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	b662      	cpsie	i
 80096e4:	61bb      	str	r3, [r7, #24]
}
 80096e6:	bf00      	nop
 80096e8:	e7fe      	b.n	80096e8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80096ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80096ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d01e      	beq.n	8009730 <xTaskCreateStatic+0xb8>
 80096f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d01b      	beq.n	8009730 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009700:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009704:	2202      	movs	r2, #2
 8009706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800970a:	2300      	movs	r3, #0
 800970c:	9303      	str	r3, [sp, #12]
 800970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009710:	9302      	str	r3, [sp, #8]
 8009712:	f107 0314 	add.w	r3, r7, #20
 8009716:	9301      	str	r3, [sp, #4]
 8009718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	68b9      	ldr	r1, [r7, #8]
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 f850 	bl	80097c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009728:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800972a:	f000 f8d7 	bl	80098dc <prvAddNewTaskToReadyList>
 800972e:	e001      	b.n	8009734 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009730:	2300      	movs	r3, #0
 8009732:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009734:	697b      	ldr	r3, [r7, #20]
	}
 8009736:	4618      	mov	r0, r3
 8009738:	3728      	adds	r7, #40	; 0x28
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800973e:	b580      	push	{r7, lr}
 8009740:	b08c      	sub	sp, #48	; 0x30
 8009742:	af04      	add	r7, sp, #16
 8009744:	60f8      	str	r0, [r7, #12]
 8009746:	60b9      	str	r1, [r7, #8]
 8009748:	603b      	str	r3, [r7, #0]
 800974a:	4613      	mov	r3, r2
 800974c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800974e:	88fb      	ldrh	r3, [r7, #6]
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4618      	mov	r0, r3
 8009754:	f001 fa0e 	bl	800ab74 <pvPortMalloc>
 8009758:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00e      	beq.n	800977e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009760:	2054      	movs	r0, #84	; 0x54
 8009762:	f001 fa07 	bl	800ab74 <pvPortMalloc>
 8009766:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d003      	beq.n	8009776 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	631a      	str	r2, [r3, #48]	; 0x30
 8009774:	e005      	b.n	8009782 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009776:	6978      	ldr	r0, [r7, #20]
 8009778:	f001 fac6 	bl	800ad08 <vPortFree>
 800977c:	e001      	b.n	8009782 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800977e:	2300      	movs	r3, #0
 8009780:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d017      	beq.n	80097b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009790:	88fa      	ldrh	r2, [r7, #6]
 8009792:	2300      	movs	r3, #0
 8009794:	9303      	str	r3, [sp, #12]
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	9302      	str	r3, [sp, #8]
 800979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979c:	9301      	str	r3, [sp, #4]
 800979e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	68b9      	ldr	r1, [r7, #8]
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f000 f80e 	bl	80097c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097ac:	69f8      	ldr	r0, [r7, #28]
 80097ae:	f000 f895 	bl	80098dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80097b2:	2301      	movs	r3, #1
 80097b4:	61bb      	str	r3, [r7, #24]
 80097b6:	e002      	b.n	80097be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80097b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80097be:	69bb      	ldr	r3, [r7, #24]
	}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3720      	adds	r7, #32
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b088      	sub	sp, #32
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
 80097d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80097d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097da:	6879      	ldr	r1, [r7, #4]
 80097dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80097e0:	440b      	add	r3, r1
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4413      	add	r3, r2
 80097e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	f023 0307 	bic.w	r3, r3, #7
 80097ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	f003 0307 	and.w	r3, r3, #7
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00c      	beq.n	8009814 <prvInitialiseNewTask+0x4c>
	__asm volatile
 80097fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fe:	b672      	cpsid	i
 8009800:	f383 8811 	msr	BASEPRI, r3
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	b662      	cpsie	i
 800980e:	617b      	str	r3, [r7, #20]
}
 8009810:	bf00      	nop
 8009812:	e7fe      	b.n	8009812 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d01f      	beq.n	800985a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800981a:	2300      	movs	r3, #0
 800981c:	61fb      	str	r3, [r7, #28]
 800981e:	e012      	b.n	8009846 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	4413      	add	r3, r2
 8009826:	7819      	ldrb	r1, [r3, #0]
 8009828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	4413      	add	r3, r2
 800982e:	3334      	adds	r3, #52	; 0x34
 8009830:	460a      	mov	r2, r1
 8009832:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009834:	68ba      	ldr	r2, [r7, #8]
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	4413      	add	r3, r2
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d006      	beq.n	800984e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	3301      	adds	r3, #1
 8009844:	61fb      	str	r3, [r7, #28]
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	2b0f      	cmp	r3, #15
 800984a:	d9e9      	bls.n	8009820 <prvInitialiseNewTask+0x58>
 800984c:	e000      	b.n	8009850 <prvInitialiseNewTask+0x88>
			{
				break;
 800984e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009858:	e003      	b.n	8009862 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985c:	2200      	movs	r2, #0
 800985e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009864:	2b06      	cmp	r3, #6
 8009866:	d901      	bls.n	800986c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009868:	2306      	movs	r3, #6
 800986a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800986c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009870:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009876:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987a:	2200      	movs	r2, #0
 800987c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800987e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009880:	3304      	adds	r3, #4
 8009882:	4618      	mov	r0, r3
 8009884:	f7fe fe55 	bl	8008532 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988a:	3318      	adds	r3, #24
 800988c:	4618      	mov	r0, r3
 800988e:	f7fe fe50 	bl	8008532 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009896:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989a:	f1c3 0207 	rsb	r2, r3, #7
 800989e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80098a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80098a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098aa:	2200      	movs	r2, #0
 80098ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80098ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80098b6:	683a      	ldr	r2, [r7, #0]
 80098b8:	68f9      	ldr	r1, [r7, #12]
 80098ba:	69b8      	ldr	r0, [r7, #24]
 80098bc:	f000 ff22 	bl	800a704 <pxPortInitialiseStack>
 80098c0:	4602      	mov	r2, r0
 80098c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80098c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80098cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098d2:	bf00      	nop
 80098d4:	3720      	adds	r7, #32
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
	...

080098dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80098e4:	f001 f81a 	bl	800a91c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80098e8:	4b2a      	ldr	r3, [pc, #168]	; (8009994 <prvAddNewTaskToReadyList+0xb8>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3301      	adds	r3, #1
 80098ee:	4a29      	ldr	r2, [pc, #164]	; (8009994 <prvAddNewTaskToReadyList+0xb8>)
 80098f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80098f2:	4b29      	ldr	r3, [pc, #164]	; (8009998 <prvAddNewTaskToReadyList+0xbc>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d109      	bne.n	800990e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80098fa:	4a27      	ldr	r2, [pc, #156]	; (8009998 <prvAddNewTaskToReadyList+0xbc>)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009900:	4b24      	ldr	r3, [pc, #144]	; (8009994 <prvAddNewTaskToReadyList+0xb8>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d110      	bne.n	800992a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009908:	f000 fbfc 	bl	800a104 <prvInitialiseTaskLists>
 800990c:	e00d      	b.n	800992a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800990e:	4b23      	ldr	r3, [pc, #140]	; (800999c <prvAddNewTaskToReadyList+0xc0>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d109      	bne.n	800992a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009916:	4b20      	ldr	r3, [pc, #128]	; (8009998 <prvAddNewTaskToReadyList+0xbc>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009920:	429a      	cmp	r2, r3
 8009922:	d802      	bhi.n	800992a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009924:	4a1c      	ldr	r2, [pc, #112]	; (8009998 <prvAddNewTaskToReadyList+0xbc>)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800992a:	4b1d      	ldr	r3, [pc, #116]	; (80099a0 <prvAddNewTaskToReadyList+0xc4>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	3301      	adds	r3, #1
 8009930:	4a1b      	ldr	r2, [pc, #108]	; (80099a0 <prvAddNewTaskToReadyList+0xc4>)
 8009932:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009938:	2201      	movs	r2, #1
 800993a:	409a      	lsls	r2, r3
 800993c:	4b19      	ldr	r3, [pc, #100]	; (80099a4 <prvAddNewTaskToReadyList+0xc8>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4313      	orrs	r3, r2
 8009942:	4a18      	ldr	r2, [pc, #96]	; (80099a4 <prvAddNewTaskToReadyList+0xc8>)
 8009944:	6013      	str	r3, [r2, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800994a:	4613      	mov	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4a15      	ldr	r2, [pc, #84]	; (80099a8 <prvAddNewTaskToReadyList+0xcc>)
 8009954:	441a      	add	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	3304      	adds	r3, #4
 800995a:	4619      	mov	r1, r3
 800995c:	4610      	mov	r0, r2
 800995e:	f7fe fdf5 	bl	800854c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009962:	f001 f80f 	bl	800a984 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009966:	4b0d      	ldr	r3, [pc, #52]	; (800999c <prvAddNewTaskToReadyList+0xc0>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00e      	beq.n	800998c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800996e:	4b0a      	ldr	r3, [pc, #40]	; (8009998 <prvAddNewTaskToReadyList+0xbc>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009978:	429a      	cmp	r2, r3
 800997a:	d207      	bcs.n	800998c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800997c:	4b0b      	ldr	r3, [pc, #44]	; (80099ac <prvAddNewTaskToReadyList+0xd0>)
 800997e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800998c:	bf00      	nop
 800998e:	3708      	adds	r7, #8
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	20006664 	.word	0x20006664
 8009998:	20006564 	.word	0x20006564
 800999c:	20006670 	.word	0x20006670
 80099a0:	20006680 	.word	0x20006680
 80099a4:	2000666c 	.word	0x2000666c
 80099a8:	20006568 	.word	0x20006568
 80099ac:	e000ed04 	.word	0xe000ed04

080099b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80099b8:	2300      	movs	r3, #0
 80099ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d019      	beq.n	80099f6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80099c2:	4b14      	ldr	r3, [pc, #80]	; (8009a14 <vTaskDelay+0x64>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00c      	beq.n	80099e4 <vTaskDelay+0x34>
	__asm volatile
 80099ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ce:	b672      	cpsid	i
 80099d0:	f383 8811 	msr	BASEPRI, r3
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	b662      	cpsie	i
 80099de:	60bb      	str	r3, [r7, #8]
}
 80099e0:	bf00      	nop
 80099e2:	e7fe      	b.n	80099e2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80099e4:	f000 f87e 	bl	8009ae4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80099e8:	2100      	movs	r1, #0
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fe24 	bl	800a638 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80099f0:	f000 f886 	bl	8009b00 <xTaskResumeAll>
 80099f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d107      	bne.n	8009a0c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80099fc:	4b06      	ldr	r3, [pc, #24]	; (8009a18 <vTaskDelay+0x68>)
 80099fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a02:	601a      	str	r2, [r3, #0]
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a0c:	bf00      	nop
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	2000668c 	.word	0x2000668c
 8009a18:	e000ed04 	.word	0xe000ed04

08009a1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b08a      	sub	sp, #40	; 0x28
 8009a20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009a22:	2300      	movs	r3, #0
 8009a24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009a26:	2300      	movs	r3, #0
 8009a28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009a2a:	463a      	mov	r2, r7
 8009a2c:	1d39      	adds	r1, r7, #4
 8009a2e:	f107 0308 	add.w	r3, r7, #8
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7f6 fdee 	bl	8000614 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	9202      	str	r2, [sp, #8]
 8009a40:	9301      	str	r3, [sp, #4]
 8009a42:	2300      	movs	r3, #0
 8009a44:	9300      	str	r3, [sp, #0]
 8009a46:	2300      	movs	r3, #0
 8009a48:	460a      	mov	r2, r1
 8009a4a:	4920      	ldr	r1, [pc, #128]	; (8009acc <vTaskStartScheduler+0xb0>)
 8009a4c:	4820      	ldr	r0, [pc, #128]	; (8009ad0 <vTaskStartScheduler+0xb4>)
 8009a4e:	f7ff fe13 	bl	8009678 <xTaskCreateStatic>
 8009a52:	4603      	mov	r3, r0
 8009a54:	4a1f      	ldr	r2, [pc, #124]	; (8009ad4 <vTaskStartScheduler+0xb8>)
 8009a56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009a58:	4b1e      	ldr	r3, [pc, #120]	; (8009ad4 <vTaskStartScheduler+0xb8>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d002      	beq.n	8009a66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009a60:	2301      	movs	r3, #1
 8009a62:	617b      	str	r3, [r7, #20]
 8009a64:	e001      	b.n	8009a6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009a66:	2300      	movs	r3, #0
 8009a68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d118      	bne.n	8009aa2 <vTaskStartScheduler+0x86>
	__asm volatile
 8009a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a74:	b672      	cpsid	i
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	b662      	cpsie	i
 8009a84:	613b      	str	r3, [r7, #16]
}
 8009a86:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009a88:	4b13      	ldr	r3, [pc, #76]	; (8009ad8 <vTaskStartScheduler+0xbc>)
 8009a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a90:	4b12      	ldr	r3, [pc, #72]	; (8009adc <vTaskStartScheduler+0xc0>)
 8009a92:	2201      	movs	r2, #1
 8009a94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a96:	4b12      	ldr	r3, [pc, #72]	; (8009ae0 <vTaskStartScheduler+0xc4>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a9c:	f000 fec0 	bl	800a820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009aa0:	e010      	b.n	8009ac4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009aa8:	d10c      	bne.n	8009ac4 <vTaskStartScheduler+0xa8>
	__asm volatile
 8009aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aae:	b672      	cpsid	i
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	b662      	cpsie	i
 8009abe:	60fb      	str	r3, [r7, #12]
}
 8009ac0:	bf00      	nop
 8009ac2:	e7fe      	b.n	8009ac2 <vTaskStartScheduler+0xa6>
}
 8009ac4:	bf00      	nop
 8009ac6:	3718      	adds	r7, #24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	0801eb84 	.word	0x0801eb84
 8009ad0:	0800a0d5 	.word	0x0800a0d5
 8009ad4:	20006688 	.word	0x20006688
 8009ad8:	20006684 	.word	0x20006684
 8009adc:	20006670 	.word	0x20006670
 8009ae0:	20006668 	.word	0x20006668

08009ae4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009ae8:	4b04      	ldr	r3, [pc, #16]	; (8009afc <vTaskSuspendAll+0x18>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	3301      	adds	r3, #1
 8009aee:	4a03      	ldr	r2, [pc, #12]	; (8009afc <vTaskSuspendAll+0x18>)
 8009af0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009af2:	bf00      	nop
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr
 8009afc:	2000668c 	.word	0x2000668c

08009b00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b06:	2300      	movs	r3, #0
 8009b08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b0e:	4b42      	ldr	r3, [pc, #264]	; (8009c18 <xTaskResumeAll+0x118>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10c      	bne.n	8009b30 <xTaskResumeAll+0x30>
	__asm volatile
 8009b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1a:	b672      	cpsid	i
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	b662      	cpsie	i
 8009b2a:	603b      	str	r3, [r7, #0]
}
 8009b2c:	bf00      	nop
 8009b2e:	e7fe      	b.n	8009b2e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009b30:	f000 fef4 	bl	800a91c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b34:	4b38      	ldr	r3, [pc, #224]	; (8009c18 <xTaskResumeAll+0x118>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	4a37      	ldr	r2, [pc, #220]	; (8009c18 <xTaskResumeAll+0x118>)
 8009b3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b3e:	4b36      	ldr	r3, [pc, #216]	; (8009c18 <xTaskResumeAll+0x118>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d161      	bne.n	8009c0a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b46:	4b35      	ldr	r3, [pc, #212]	; (8009c1c <xTaskResumeAll+0x11c>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d05d      	beq.n	8009c0a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b4e:	e02e      	b.n	8009bae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b50:	4b33      	ldr	r3, [pc, #204]	; (8009c20 <xTaskResumeAll+0x120>)
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	3318      	adds	r3, #24
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7fe fd52 	bl	8008606 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	3304      	adds	r3, #4
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe fd4d 	bl	8008606 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	2201      	movs	r2, #1
 8009b72:	409a      	lsls	r2, r3
 8009b74:	4b2b      	ldr	r3, [pc, #172]	; (8009c24 <xTaskResumeAll+0x124>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	4a2a      	ldr	r2, [pc, #168]	; (8009c24 <xTaskResumeAll+0x124>)
 8009b7c:	6013      	str	r3, [r2, #0]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b82:	4613      	mov	r3, r2
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	4413      	add	r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4a27      	ldr	r2, [pc, #156]	; (8009c28 <xTaskResumeAll+0x128>)
 8009b8c:	441a      	add	r2, r3
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3304      	adds	r3, #4
 8009b92:	4619      	mov	r1, r3
 8009b94:	4610      	mov	r0, r2
 8009b96:	f7fe fcd9 	bl	800854c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b9e:	4b23      	ldr	r3, [pc, #140]	; (8009c2c <xTaskResumeAll+0x12c>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d302      	bcc.n	8009bae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009ba8:	4b21      	ldr	r3, [pc, #132]	; (8009c30 <xTaskResumeAll+0x130>)
 8009baa:	2201      	movs	r2, #1
 8009bac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bae:	4b1c      	ldr	r3, [pc, #112]	; (8009c20 <xTaskResumeAll+0x120>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1cc      	bne.n	8009b50 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d001      	beq.n	8009bc0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009bbc:	f000 fb42 	bl	800a244 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009bc0:	4b1c      	ldr	r3, [pc, #112]	; (8009c34 <xTaskResumeAll+0x134>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d010      	beq.n	8009bee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009bcc:	f000 f858 	bl	8009c80 <xTaskIncrementTick>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d002      	beq.n	8009bdc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009bd6:	4b16      	ldr	r3, [pc, #88]	; (8009c30 <xTaskResumeAll+0x130>)
 8009bd8:	2201      	movs	r2, #1
 8009bda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	3b01      	subs	r3, #1
 8009be0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1f1      	bne.n	8009bcc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009be8:	4b12      	ldr	r3, [pc, #72]	; (8009c34 <xTaskResumeAll+0x134>)
 8009bea:	2200      	movs	r2, #0
 8009bec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009bee:	4b10      	ldr	r3, [pc, #64]	; (8009c30 <xTaskResumeAll+0x130>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d009      	beq.n	8009c0a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009bfa:	4b0f      	ldr	r3, [pc, #60]	; (8009c38 <xTaskResumeAll+0x138>)
 8009bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c00:	601a      	str	r2, [r3, #0]
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c0a:	f000 febb 	bl	800a984 <vPortExitCritical>

	return xAlreadyYielded;
 8009c0e:	68bb      	ldr	r3, [r7, #8]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	2000668c 	.word	0x2000668c
 8009c1c:	20006664 	.word	0x20006664
 8009c20:	20006624 	.word	0x20006624
 8009c24:	2000666c 	.word	0x2000666c
 8009c28:	20006568 	.word	0x20006568
 8009c2c:	20006564 	.word	0x20006564
 8009c30:	20006678 	.word	0x20006678
 8009c34:	20006674 	.word	0x20006674
 8009c38:	e000ed04 	.word	0xe000ed04

08009c3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009c42:	4b05      	ldr	r3, [pc, #20]	; (8009c58 <xTaskGetTickCount+0x1c>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009c48:	687b      	ldr	r3, [r7, #4]
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	370c      	adds	r7, #12
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	20006668 	.word	0x20006668

08009c5c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c62:	f000 ff43 	bl	800aaec <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009c66:	2300      	movs	r3, #0
 8009c68:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009c6a:	4b04      	ldr	r3, [pc, #16]	; (8009c7c <xTaskGetTickCountFromISR+0x20>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c70:	683b      	ldr	r3, [r7, #0]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20006668 	.word	0x20006668

08009c80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009c86:	2300      	movs	r3, #0
 8009c88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c8a:	4b4f      	ldr	r3, [pc, #316]	; (8009dc8 <xTaskIncrementTick+0x148>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f040 808a 	bne.w	8009da8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009c94:	4b4d      	ldr	r3, [pc, #308]	; (8009dcc <xTaskIncrementTick+0x14c>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009c9c:	4a4b      	ldr	r2, [pc, #300]	; (8009dcc <xTaskIncrementTick+0x14c>)
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d122      	bne.n	8009cee <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ca8:	4b49      	ldr	r3, [pc, #292]	; (8009dd0 <xTaskIncrementTick+0x150>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00c      	beq.n	8009ccc <xTaskIncrementTick+0x4c>
	__asm volatile
 8009cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb6:	b672      	cpsid	i
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	b662      	cpsie	i
 8009cc6:	603b      	str	r3, [r7, #0]
}
 8009cc8:	bf00      	nop
 8009cca:	e7fe      	b.n	8009cca <xTaskIncrementTick+0x4a>
 8009ccc:	4b40      	ldr	r3, [pc, #256]	; (8009dd0 <xTaskIncrementTick+0x150>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	60fb      	str	r3, [r7, #12]
 8009cd2:	4b40      	ldr	r3, [pc, #256]	; (8009dd4 <xTaskIncrementTick+0x154>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a3e      	ldr	r2, [pc, #248]	; (8009dd0 <xTaskIncrementTick+0x150>)
 8009cd8:	6013      	str	r3, [r2, #0]
 8009cda:	4a3e      	ldr	r2, [pc, #248]	; (8009dd4 <xTaskIncrementTick+0x154>)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6013      	str	r3, [r2, #0]
 8009ce0:	4b3d      	ldr	r3, [pc, #244]	; (8009dd8 <xTaskIncrementTick+0x158>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	4a3c      	ldr	r2, [pc, #240]	; (8009dd8 <xTaskIncrementTick+0x158>)
 8009ce8:	6013      	str	r3, [r2, #0]
 8009cea:	f000 faab 	bl	800a244 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009cee:	4b3b      	ldr	r3, [pc, #236]	; (8009ddc <xTaskIncrementTick+0x15c>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	693a      	ldr	r2, [r7, #16]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d348      	bcc.n	8009d8a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cf8:	4b35      	ldr	r3, [pc, #212]	; (8009dd0 <xTaskIncrementTick+0x150>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d104      	bne.n	8009d0c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d02:	4b36      	ldr	r3, [pc, #216]	; (8009ddc <xTaskIncrementTick+0x15c>)
 8009d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d08:	601a      	str	r2, [r3, #0]
					break;
 8009d0a:	e03e      	b.n	8009d8a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d0c:	4b30      	ldr	r3, [pc, #192]	; (8009dd0 <xTaskIncrementTick+0x150>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d203      	bcs.n	8009d2c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d24:	4a2d      	ldr	r2, [pc, #180]	; (8009ddc <xTaskIncrementTick+0x15c>)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009d2a:	e02e      	b.n	8009d8a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	3304      	adds	r3, #4
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fe fc68 	bl	8008606 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d004      	beq.n	8009d48 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	3318      	adds	r3, #24
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fe fc5f 	bl	8008606 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	409a      	lsls	r2, r3
 8009d50:	4b23      	ldr	r3, [pc, #140]	; (8009de0 <xTaskIncrementTick+0x160>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	4a22      	ldr	r2, [pc, #136]	; (8009de0 <xTaskIncrementTick+0x160>)
 8009d58:	6013      	str	r3, [r2, #0]
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d5e:	4613      	mov	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4a1f      	ldr	r2, [pc, #124]	; (8009de4 <xTaskIncrementTick+0x164>)
 8009d68:	441a      	add	r2, r3
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	4619      	mov	r1, r3
 8009d70:	4610      	mov	r0, r2
 8009d72:	f7fe fbeb 	bl	800854c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d7a:	4b1b      	ldr	r3, [pc, #108]	; (8009de8 <xTaskIncrementTick+0x168>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d3b9      	bcc.n	8009cf8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009d84:	2301      	movs	r3, #1
 8009d86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d88:	e7b6      	b.n	8009cf8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d8a:	4b17      	ldr	r3, [pc, #92]	; (8009de8 <xTaskIncrementTick+0x168>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d90:	4914      	ldr	r1, [pc, #80]	; (8009de4 <xTaskIncrementTick+0x164>)
 8009d92:	4613      	mov	r3, r2
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4413      	add	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	440b      	add	r3, r1
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d907      	bls.n	8009db2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8009da2:	2301      	movs	r3, #1
 8009da4:	617b      	str	r3, [r7, #20]
 8009da6:	e004      	b.n	8009db2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009da8:	4b10      	ldr	r3, [pc, #64]	; (8009dec <xTaskIncrementTick+0x16c>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	3301      	adds	r3, #1
 8009dae:	4a0f      	ldr	r2, [pc, #60]	; (8009dec <xTaskIncrementTick+0x16c>)
 8009db0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009db2:	4b0f      	ldr	r3, [pc, #60]	; (8009df0 <xTaskIncrementTick+0x170>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d001      	beq.n	8009dbe <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009dbe:	697b      	ldr	r3, [r7, #20]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3718      	adds	r7, #24
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	2000668c 	.word	0x2000668c
 8009dcc:	20006668 	.word	0x20006668
 8009dd0:	2000661c 	.word	0x2000661c
 8009dd4:	20006620 	.word	0x20006620
 8009dd8:	2000667c 	.word	0x2000667c
 8009ddc:	20006684 	.word	0x20006684
 8009de0:	2000666c 	.word	0x2000666c
 8009de4:	20006568 	.word	0x20006568
 8009de8:	20006564 	.word	0x20006564
 8009dec:	20006674 	.word	0x20006674
 8009df0:	20006678 	.word	0x20006678

08009df4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009df4:	b480      	push	{r7}
 8009df6:	b087      	sub	sp, #28
 8009df8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009dfa:	4b28      	ldr	r3, [pc, #160]	; (8009e9c <vTaskSwitchContext+0xa8>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d003      	beq.n	8009e0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e02:	4b27      	ldr	r3, [pc, #156]	; (8009ea0 <vTaskSwitchContext+0xac>)
 8009e04:	2201      	movs	r2, #1
 8009e06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e08:	e041      	b.n	8009e8e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009e0a:	4b25      	ldr	r3, [pc, #148]	; (8009ea0 <vTaskSwitchContext+0xac>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e10:	4b24      	ldr	r3, [pc, #144]	; (8009ea4 <vTaskSwitchContext+0xb0>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	fab3 f383 	clz	r3, r3
 8009e1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009e1e:	7afb      	ldrb	r3, [r7, #11]
 8009e20:	f1c3 031f 	rsb	r3, r3, #31
 8009e24:	617b      	str	r3, [r7, #20]
 8009e26:	4920      	ldr	r1, [pc, #128]	; (8009ea8 <vTaskSwitchContext+0xb4>)
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	440b      	add	r3, r1
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10c      	bne.n	8009e54 <vTaskSwitchContext+0x60>
	__asm volatile
 8009e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3e:	b672      	cpsid	i
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	b662      	cpsie	i
 8009e4e:	607b      	str	r3, [r7, #4]
}
 8009e50:	bf00      	nop
 8009e52:	e7fe      	b.n	8009e52 <vTaskSwitchContext+0x5e>
 8009e54:	697a      	ldr	r2, [r7, #20]
 8009e56:	4613      	mov	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4413      	add	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	4a12      	ldr	r2, [pc, #72]	; (8009ea8 <vTaskSwitchContext+0xb4>)
 8009e60:	4413      	add	r3, r2
 8009e62:	613b      	str	r3, [r7, #16]
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	685a      	ldr	r2, [r3, #4]
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	605a      	str	r2, [r3, #4]
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	685a      	ldr	r2, [r3, #4]
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	3308      	adds	r3, #8
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d104      	bne.n	8009e84 <vTaskSwitchContext+0x90>
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	605a      	str	r2, [r3, #4]
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	4a08      	ldr	r2, [pc, #32]	; (8009eac <vTaskSwitchContext+0xb8>)
 8009e8c:	6013      	str	r3, [r2, #0]
}
 8009e8e:	bf00      	nop
 8009e90:	371c      	adds	r7, #28
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop
 8009e9c:	2000668c 	.word	0x2000668c
 8009ea0:	20006678 	.word	0x20006678
 8009ea4:	2000666c 	.word	0x2000666c
 8009ea8:	20006568 	.word	0x20006568
 8009eac:	20006564 	.word	0x20006564

08009eb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d10c      	bne.n	8009eda <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec4:	b672      	cpsid	i
 8009ec6:	f383 8811 	msr	BASEPRI, r3
 8009eca:	f3bf 8f6f 	isb	sy
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	b662      	cpsie	i
 8009ed4:	60fb      	str	r3, [r7, #12]
}
 8009ed6:	bf00      	nop
 8009ed8:	e7fe      	b.n	8009ed8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009eda:	4b07      	ldr	r3, [pc, #28]	; (8009ef8 <vTaskPlaceOnEventList+0x48>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	3318      	adds	r3, #24
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7fe fb56 	bl	8008594 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ee8:	2101      	movs	r1, #1
 8009eea:	6838      	ldr	r0, [r7, #0]
 8009eec:	f000 fba4 	bl	800a638 <prvAddCurrentTaskToDelayedList>
}
 8009ef0:	bf00      	nop
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	20006564 	.word	0x20006564

08009efc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d10c      	bne.n	8009f2c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f16:	b672      	cpsid	i
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	b662      	cpsie	i
 8009f26:	60fb      	str	r3, [r7, #12]
}
 8009f28:	bf00      	nop
 8009f2a:	e7fe      	b.n	8009f2a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	3318      	adds	r3, #24
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7fe fb68 	bl	8008606 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f36:	4b1d      	ldr	r3, [pc, #116]	; (8009fac <xTaskRemoveFromEventList+0xb0>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d11c      	bne.n	8009f78 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	3304      	adds	r3, #4
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fe fb5f 	bl	8008606 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	409a      	lsls	r2, r3
 8009f50:	4b17      	ldr	r3, [pc, #92]	; (8009fb0 <xTaskRemoveFromEventList+0xb4>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	4a16      	ldr	r2, [pc, #88]	; (8009fb0 <xTaskRemoveFromEventList+0xb4>)
 8009f58:	6013      	str	r3, [r2, #0]
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f5e:	4613      	mov	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4413      	add	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4a13      	ldr	r2, [pc, #76]	; (8009fb4 <xTaskRemoveFromEventList+0xb8>)
 8009f68:	441a      	add	r2, r3
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	3304      	adds	r3, #4
 8009f6e:	4619      	mov	r1, r3
 8009f70:	4610      	mov	r0, r2
 8009f72:	f7fe faeb 	bl	800854c <vListInsertEnd>
 8009f76:	e005      	b.n	8009f84 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	3318      	adds	r3, #24
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	480e      	ldr	r0, [pc, #56]	; (8009fb8 <xTaskRemoveFromEventList+0xbc>)
 8009f80:	f7fe fae4 	bl	800854c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f88:	4b0c      	ldr	r3, [pc, #48]	; (8009fbc <xTaskRemoveFromEventList+0xc0>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d905      	bls.n	8009f9e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f92:	2301      	movs	r3, #1
 8009f94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f96:	4b0a      	ldr	r3, [pc, #40]	; (8009fc0 <xTaskRemoveFromEventList+0xc4>)
 8009f98:	2201      	movs	r2, #1
 8009f9a:	601a      	str	r2, [r3, #0]
 8009f9c:	e001      	b.n	8009fa2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009fa2:	697b      	ldr	r3, [r7, #20]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3718      	adds	r7, #24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	2000668c 	.word	0x2000668c
 8009fb0:	2000666c 	.word	0x2000666c
 8009fb4:	20006568 	.word	0x20006568
 8009fb8:	20006624 	.word	0x20006624
 8009fbc:	20006564 	.word	0x20006564
 8009fc0:	20006678 	.word	0x20006678

08009fc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009fcc:	4b06      	ldr	r3, [pc, #24]	; (8009fe8 <vTaskInternalSetTimeOutState+0x24>)
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009fd4:	4b05      	ldr	r3, [pc, #20]	; (8009fec <vTaskInternalSetTimeOutState+0x28>)
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	605a      	str	r2, [r3, #4]
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr
 8009fe8:	2000667c 	.word	0x2000667c
 8009fec:	20006668 	.word	0x20006668

08009ff0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b088      	sub	sp, #32
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10c      	bne.n	800a01a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800a000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a004:	b672      	cpsid	i
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	b662      	cpsie	i
 800a014:	613b      	str	r3, [r7, #16]
}
 800a016:	bf00      	nop
 800a018:	e7fe      	b.n	800a018 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10c      	bne.n	800a03a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a024:	b672      	cpsid	i
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	b662      	cpsie	i
 800a034:	60fb      	str	r3, [r7, #12]
}
 800a036:	bf00      	nop
 800a038:	e7fe      	b.n	800a038 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800a03a:	f000 fc6f 	bl	800a91c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a03e:	4b1d      	ldr	r3, [pc, #116]	; (800a0b4 <xTaskCheckForTimeOut+0xc4>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	69ba      	ldr	r2, [r7, #24]
 800a04a:	1ad3      	subs	r3, r2, r3
 800a04c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a056:	d102      	bne.n	800a05e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a058:	2300      	movs	r3, #0
 800a05a:	61fb      	str	r3, [r7, #28]
 800a05c:	e023      	b.n	800a0a6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	4b15      	ldr	r3, [pc, #84]	; (800a0b8 <xTaskCheckForTimeOut+0xc8>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	429a      	cmp	r2, r3
 800a068:	d007      	beq.n	800a07a <xTaskCheckForTimeOut+0x8a>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	69ba      	ldr	r2, [r7, #24]
 800a070:	429a      	cmp	r2, r3
 800a072:	d302      	bcc.n	800a07a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a074:	2301      	movs	r3, #1
 800a076:	61fb      	str	r3, [r7, #28]
 800a078:	e015      	b.n	800a0a6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	429a      	cmp	r2, r3
 800a082:	d20b      	bcs.n	800a09c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	1ad2      	subs	r2, r2, r3
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f7ff ff97 	bl	8009fc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a096:	2300      	movs	r3, #0
 800a098:	61fb      	str	r3, [r7, #28]
 800a09a:	e004      	b.n	800a0a6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a0a6:	f000 fc6d 	bl	800a984 <vPortExitCritical>

	return xReturn;
 800a0aa:	69fb      	ldr	r3, [r7, #28]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3720      	adds	r7, #32
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	20006668 	.word	0x20006668
 800a0b8:	2000667c 	.word	0x2000667c

0800a0bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a0bc:	b480      	push	{r7}
 800a0be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a0c0:	4b03      	ldr	r3, [pc, #12]	; (800a0d0 <vTaskMissedYield+0x14>)
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	601a      	str	r2, [r3, #0]
}
 800a0c6:	bf00      	nop
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr
 800a0d0:	20006678 	.word	0x20006678

0800a0d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a0dc:	f000 f852 	bl	800a184 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a0e0:	4b06      	ldr	r3, [pc, #24]	; (800a0fc <prvIdleTask+0x28>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d9f9      	bls.n	800a0dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a0e8:	4b05      	ldr	r3, [pc, #20]	; (800a100 <prvIdleTask+0x2c>)
 800a0ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ee:	601a      	str	r2, [r3, #0]
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a0f8:	e7f0      	b.n	800a0dc <prvIdleTask+0x8>
 800a0fa:	bf00      	nop
 800a0fc:	20006568 	.word	0x20006568
 800a100:	e000ed04 	.word	0xe000ed04

0800a104 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a10a:	2300      	movs	r3, #0
 800a10c:	607b      	str	r3, [r7, #4]
 800a10e:	e00c      	b.n	800a12a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	4613      	mov	r3, r2
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4413      	add	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4a12      	ldr	r2, [pc, #72]	; (800a164 <prvInitialiseTaskLists+0x60>)
 800a11c:	4413      	add	r3, r2
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fe f9e7 	bl	80084f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	3301      	adds	r3, #1
 800a128:	607b      	str	r3, [r7, #4]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b06      	cmp	r3, #6
 800a12e:	d9ef      	bls.n	800a110 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a130:	480d      	ldr	r0, [pc, #52]	; (800a168 <prvInitialiseTaskLists+0x64>)
 800a132:	f7fe f9de 	bl	80084f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a136:	480d      	ldr	r0, [pc, #52]	; (800a16c <prvInitialiseTaskLists+0x68>)
 800a138:	f7fe f9db 	bl	80084f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a13c:	480c      	ldr	r0, [pc, #48]	; (800a170 <prvInitialiseTaskLists+0x6c>)
 800a13e:	f7fe f9d8 	bl	80084f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a142:	480c      	ldr	r0, [pc, #48]	; (800a174 <prvInitialiseTaskLists+0x70>)
 800a144:	f7fe f9d5 	bl	80084f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a148:	480b      	ldr	r0, [pc, #44]	; (800a178 <prvInitialiseTaskLists+0x74>)
 800a14a:	f7fe f9d2 	bl	80084f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a14e:	4b0b      	ldr	r3, [pc, #44]	; (800a17c <prvInitialiseTaskLists+0x78>)
 800a150:	4a05      	ldr	r2, [pc, #20]	; (800a168 <prvInitialiseTaskLists+0x64>)
 800a152:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a154:	4b0a      	ldr	r3, [pc, #40]	; (800a180 <prvInitialiseTaskLists+0x7c>)
 800a156:	4a05      	ldr	r2, [pc, #20]	; (800a16c <prvInitialiseTaskLists+0x68>)
 800a158:	601a      	str	r2, [r3, #0]
}
 800a15a:	bf00      	nop
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	20006568 	.word	0x20006568
 800a168:	200065f4 	.word	0x200065f4
 800a16c:	20006608 	.word	0x20006608
 800a170:	20006624 	.word	0x20006624
 800a174:	20006638 	.word	0x20006638
 800a178:	20006650 	.word	0x20006650
 800a17c:	2000661c 	.word	0x2000661c
 800a180:	20006620 	.word	0x20006620

0800a184 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a18a:	e019      	b.n	800a1c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a18c:	f000 fbc6 	bl	800a91c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a190:	4b10      	ldr	r3, [pc, #64]	; (800a1d4 <prvCheckTasksWaitingTermination+0x50>)
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	3304      	adds	r3, #4
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fe fa32 	bl	8008606 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a1a2:	4b0d      	ldr	r3, [pc, #52]	; (800a1d8 <prvCheckTasksWaitingTermination+0x54>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	4a0b      	ldr	r2, [pc, #44]	; (800a1d8 <prvCheckTasksWaitingTermination+0x54>)
 800a1aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a1ac:	4b0b      	ldr	r3, [pc, #44]	; (800a1dc <prvCheckTasksWaitingTermination+0x58>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	4a0a      	ldr	r2, [pc, #40]	; (800a1dc <prvCheckTasksWaitingTermination+0x58>)
 800a1b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a1b6:	f000 fbe5 	bl	800a984 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f810 	bl	800a1e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1c0:	4b06      	ldr	r3, [pc, #24]	; (800a1dc <prvCheckTasksWaitingTermination+0x58>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1e1      	bne.n	800a18c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a1c8:	bf00      	nop
 800a1ca:	bf00      	nop
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20006638 	.word	0x20006638
 800a1d8:	20006664 	.word	0x20006664
 800a1dc:	2000664c 	.word	0x2000664c

0800a1e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d108      	bne.n	800a204 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 fd86 	bl	800ad08 <vPortFree>
				vPortFree( pxTCB );
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 fd83 	bl	800ad08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a202:	e01a      	b.n	800a23a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d103      	bne.n	800a216 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 fd7a 	bl	800ad08 <vPortFree>
	}
 800a214:	e011      	b.n	800a23a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d00c      	beq.n	800a23a <prvDeleteTCB+0x5a>
	__asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a224:	b672      	cpsid	i
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	b662      	cpsie	i
 800a234:	60fb      	str	r3, [r7, #12]
}
 800a236:	bf00      	nop
 800a238:	e7fe      	b.n	800a238 <prvDeleteTCB+0x58>
	}
 800a23a:	bf00      	nop
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
	...

0800a244 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a24a:	4b0c      	ldr	r3, [pc, #48]	; (800a27c <prvResetNextTaskUnblockTime+0x38>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d104      	bne.n	800a25e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a254:	4b0a      	ldr	r3, [pc, #40]	; (800a280 <prvResetNextTaskUnblockTime+0x3c>)
 800a256:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a25a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a25c:	e008      	b.n	800a270 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a25e:	4b07      	ldr	r3, [pc, #28]	; (800a27c <prvResetNextTaskUnblockTime+0x38>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	4a04      	ldr	r2, [pc, #16]	; (800a280 <prvResetNextTaskUnblockTime+0x3c>)
 800a26e:	6013      	str	r3, [r2, #0]
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr
 800a27c:	2000661c 	.word	0x2000661c
 800a280:	20006684 	.word	0x20006684

0800a284 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a28a:	4b0b      	ldr	r3, [pc, #44]	; (800a2b8 <xTaskGetSchedulerState+0x34>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d102      	bne.n	800a298 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a292:	2301      	movs	r3, #1
 800a294:	607b      	str	r3, [r7, #4]
 800a296:	e008      	b.n	800a2aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a298:	4b08      	ldr	r3, [pc, #32]	; (800a2bc <xTaskGetSchedulerState+0x38>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d102      	bne.n	800a2a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	607b      	str	r3, [r7, #4]
 800a2a4:	e001      	b.n	800a2aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a2aa:	687b      	ldr	r3, [r7, #4]
	}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr
 800a2b8:	20006670 	.word	0x20006670
 800a2bc:	2000668c 	.word	0x2000668c

0800a2c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d069      	beq.n	800a3aa <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2da:	4b36      	ldr	r3, [pc, #216]	; (800a3b4 <xTaskPriorityInherit+0xf4>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d259      	bcs.n	800a398 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	699b      	ldr	r3, [r3, #24]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	db06      	blt.n	800a2fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2ec:	4b31      	ldr	r3, [pc, #196]	; (800a3b4 <xTaskPriorityInherit+0xf4>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f2:	f1c3 0207 	rsb	r2, r3, #7
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	6959      	ldr	r1, [r3, #20]
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a302:	4613      	mov	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	4a2b      	ldr	r2, [pc, #172]	; (800a3b8 <xTaskPriorityInherit+0xf8>)
 800a30c:	4413      	add	r3, r2
 800a30e:	4299      	cmp	r1, r3
 800a310:	d13a      	bne.n	800a388 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	3304      	adds	r3, #4
 800a316:	4618      	mov	r0, r3
 800a318:	f7fe f975 	bl	8008606 <uxListRemove>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d115      	bne.n	800a34e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a326:	4924      	ldr	r1, [pc, #144]	; (800a3b8 <xTaskPriorityInherit+0xf8>)
 800a328:	4613      	mov	r3, r2
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4413      	add	r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	440b      	add	r3, r1
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10a      	bne.n	800a34e <xTaskPriorityInherit+0x8e>
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33c:	2201      	movs	r2, #1
 800a33e:	fa02 f303 	lsl.w	r3, r2, r3
 800a342:	43da      	mvns	r2, r3
 800a344:	4b1d      	ldr	r3, [pc, #116]	; (800a3bc <xTaskPriorityInherit+0xfc>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4013      	ands	r3, r2
 800a34a:	4a1c      	ldr	r2, [pc, #112]	; (800a3bc <xTaskPriorityInherit+0xfc>)
 800a34c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a34e:	4b19      	ldr	r3, [pc, #100]	; (800a3b4 <xTaskPriorityInherit+0xf4>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35c:	2201      	movs	r2, #1
 800a35e:	409a      	lsls	r2, r3
 800a360:	4b16      	ldr	r3, [pc, #88]	; (800a3bc <xTaskPriorityInherit+0xfc>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4313      	orrs	r3, r2
 800a366:	4a15      	ldr	r2, [pc, #84]	; (800a3bc <xTaskPriorityInherit+0xfc>)
 800a368:	6013      	str	r3, [r2, #0]
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a36e:	4613      	mov	r3, r2
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	4413      	add	r3, r2
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	4a10      	ldr	r2, [pc, #64]	; (800a3b8 <xTaskPriorityInherit+0xf8>)
 800a378:	441a      	add	r2, r3
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	3304      	adds	r3, #4
 800a37e:	4619      	mov	r1, r3
 800a380:	4610      	mov	r0, r2
 800a382:	f7fe f8e3 	bl	800854c <vListInsertEnd>
 800a386:	e004      	b.n	800a392 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a388:	4b0a      	ldr	r3, [pc, #40]	; (800a3b4 <xTaskPriorityInherit+0xf4>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a392:	2301      	movs	r3, #1
 800a394:	60fb      	str	r3, [r7, #12]
 800a396:	e008      	b.n	800a3aa <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a39c:	4b05      	ldr	r3, [pc, #20]	; (800a3b4 <xTaskPriorityInherit+0xf4>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d201      	bcs.n	800a3aa <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
	}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3710      	adds	r7, #16
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	20006564 	.word	0x20006564
 800a3b8:	20006568 	.word	0x20006568
 800a3bc:	2000666c 	.word	0x2000666c

0800a3c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b086      	sub	sp, #24
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d072      	beq.n	800a4bc <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a3d6:	4b3c      	ldr	r3, [pc, #240]	; (800a4c8 <xTaskPriorityDisinherit+0x108>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	693a      	ldr	r2, [r7, #16]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d00c      	beq.n	800a3fa <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e4:	b672      	cpsid	i
 800a3e6:	f383 8811 	msr	BASEPRI, r3
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	b662      	cpsie	i
 800a3f4:	60fb      	str	r3, [r7, #12]
}
 800a3f6:	bf00      	nop
 800a3f8:	e7fe      	b.n	800a3f8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d10c      	bne.n	800a41c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a406:	b672      	cpsid	i
 800a408:	f383 8811 	msr	BASEPRI, r3
 800a40c:	f3bf 8f6f 	isb	sy
 800a410:	f3bf 8f4f 	dsb	sy
 800a414:	b662      	cpsie	i
 800a416:	60bb      	str	r3, [r7, #8]
}
 800a418:	bf00      	nop
 800a41a:	e7fe      	b.n	800a41a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a420:	1e5a      	subs	r2, r3, #1
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a42e:	429a      	cmp	r2, r3
 800a430:	d044      	beq.n	800a4bc <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a436:	2b00      	cmp	r3, #0
 800a438:	d140      	bne.n	800a4bc <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	3304      	adds	r3, #4
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fe f8e1 	bl	8008606 <uxListRemove>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d115      	bne.n	800a476 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a44e:	491f      	ldr	r1, [pc, #124]	; (800a4cc <xTaskPriorityDisinherit+0x10c>)
 800a450:	4613      	mov	r3, r2
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	4413      	add	r3, r2
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	440b      	add	r3, r1
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10a      	bne.n	800a476 <xTaskPriorityDisinherit+0xb6>
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a464:	2201      	movs	r2, #1
 800a466:	fa02 f303 	lsl.w	r3, r2, r3
 800a46a:	43da      	mvns	r2, r3
 800a46c:	4b18      	ldr	r3, [pc, #96]	; (800a4d0 <xTaskPriorityDisinherit+0x110>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4013      	ands	r3, r2
 800a472:	4a17      	ldr	r2, [pc, #92]	; (800a4d0 <xTaskPriorityDisinherit+0x110>)
 800a474:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a482:	f1c3 0207 	rsb	r2, r3, #7
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48e:	2201      	movs	r2, #1
 800a490:	409a      	lsls	r2, r3
 800a492:	4b0f      	ldr	r3, [pc, #60]	; (800a4d0 <xTaskPriorityDisinherit+0x110>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4313      	orrs	r3, r2
 800a498:	4a0d      	ldr	r2, [pc, #52]	; (800a4d0 <xTaskPriorityDisinherit+0x110>)
 800a49a:	6013      	str	r3, [r2, #0]
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	4413      	add	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	4a08      	ldr	r2, [pc, #32]	; (800a4cc <xTaskPriorityDisinherit+0x10c>)
 800a4aa:	441a      	add	r2, r3
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	3304      	adds	r3, #4
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	4610      	mov	r0, r2
 800a4b4:	f7fe f84a 	bl	800854c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a4bc:	697b      	ldr	r3, [r7, #20]
	}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3718      	adds	r7, #24
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	20006564 	.word	0x20006564
 800a4cc:	20006568 	.word	0x20006568
 800a4d0:	2000666c 	.word	0x2000666c

0800a4d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b088      	sub	sp, #32
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f000 8087 	beq.w	800a5fc <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d10c      	bne.n	800a510 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800a4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fa:	b672      	cpsid	i
 800a4fc:	f383 8811 	msr	BASEPRI, r3
 800a500:	f3bf 8f6f 	isb	sy
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	b662      	cpsie	i
 800a50a:	60fb      	str	r3, [r7, #12]
}
 800a50c:	bf00      	nop
 800a50e:	e7fe      	b.n	800a50e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	429a      	cmp	r2, r3
 800a518:	d902      	bls.n	800a520 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	61fb      	str	r3, [r7, #28]
 800a51e:	e002      	b.n	800a526 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a524:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52a:	69fa      	ldr	r2, [r7, #28]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d065      	beq.n	800a5fc <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a534:	697a      	ldr	r2, [r7, #20]
 800a536:	429a      	cmp	r2, r3
 800a538:	d160      	bne.n	800a5fc <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a53a:	4b32      	ldr	r3, [pc, #200]	; (800a604 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	69ba      	ldr	r2, [r7, #24]
 800a540:	429a      	cmp	r2, r3
 800a542:	d10c      	bne.n	800a55e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800a544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a548:	b672      	cpsid	i
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	b662      	cpsie	i
 800a558:	60bb      	str	r3, [r7, #8]
}
 800a55a:	bf00      	nop
 800a55c:	e7fe      	b.n	800a55c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a562:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	69fa      	ldr	r2, [r7, #28]
 800a568:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	db04      	blt.n	800a57c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	f1c3 0207 	rsb	r2, r3, #7
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	6959      	ldr	r1, [r3, #20]
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	4613      	mov	r3, r2
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	4413      	add	r3, r2
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	4a1f      	ldr	r2, [pc, #124]	; (800a608 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a58c:	4413      	add	r3, r2
 800a58e:	4299      	cmp	r1, r3
 800a590:	d134      	bne.n	800a5fc <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	3304      	adds	r3, #4
 800a596:	4618      	mov	r0, r3
 800a598:	f7fe f835 	bl	8008606 <uxListRemove>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d115      	bne.n	800a5ce <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a6:	4918      	ldr	r1, [pc, #96]	; (800a608 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4413      	add	r3, r2
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	440b      	add	r3, r1
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10a      	bne.n	800a5ce <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5bc:	2201      	movs	r2, #1
 800a5be:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c2:	43da      	mvns	r2, r3
 800a5c4:	4b11      	ldr	r3, [pc, #68]	; (800a60c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	4a10      	ldr	r2, [pc, #64]	; (800a60c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a5cc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	409a      	lsls	r2, r3
 800a5d6:	4b0d      	ldr	r3, [pc, #52]	; (800a60c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	4a0b      	ldr	r2, [pc, #44]	; (800a60c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a5de:	6013      	str	r3, [r2, #0]
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4a06      	ldr	r2, [pc, #24]	; (800a608 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a5ee:	441a      	add	r2, r3
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	3304      	adds	r3, #4
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	4610      	mov	r0, r2
 800a5f8:	f7fd ffa8 	bl	800854c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a5fc:	bf00      	nop
 800a5fe:	3720      	adds	r7, #32
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	20006564 	.word	0x20006564
 800a608:	20006568 	.word	0x20006568
 800a60c:	2000666c 	.word	0x2000666c

0800a610 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a610:	b480      	push	{r7}
 800a612:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a614:	4b07      	ldr	r3, [pc, #28]	; (800a634 <pvTaskIncrementMutexHeldCount+0x24>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d004      	beq.n	800a626 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a61c:	4b05      	ldr	r3, [pc, #20]	; (800a634 <pvTaskIncrementMutexHeldCount+0x24>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a622:	3201      	adds	r2, #1
 800a624:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a626:	4b03      	ldr	r3, [pc, #12]	; (800a634 <pvTaskIncrementMutexHeldCount+0x24>)
 800a628:	681b      	ldr	r3, [r3, #0]
	}
 800a62a:	4618      	mov	r0, r3
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr
 800a634:	20006564 	.word	0x20006564

0800a638 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a642:	4b29      	ldr	r3, [pc, #164]	; (800a6e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a648:	4b28      	ldr	r3, [pc, #160]	; (800a6ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	3304      	adds	r3, #4
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fd ffd9 	bl	8008606 <uxListRemove>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10b      	bne.n	800a672 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a65a:	4b24      	ldr	r3, [pc, #144]	; (800a6ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a660:	2201      	movs	r2, #1
 800a662:	fa02 f303 	lsl.w	r3, r2, r3
 800a666:	43da      	mvns	r2, r3
 800a668:	4b21      	ldr	r3, [pc, #132]	; (800a6f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4013      	ands	r3, r2
 800a66e:	4a20      	ldr	r2, [pc, #128]	; (800a6f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a670:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a678:	d10a      	bne.n	800a690 <prvAddCurrentTaskToDelayedList+0x58>
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d007      	beq.n	800a690 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a680:	4b1a      	ldr	r3, [pc, #104]	; (800a6ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	3304      	adds	r3, #4
 800a686:	4619      	mov	r1, r3
 800a688:	481a      	ldr	r0, [pc, #104]	; (800a6f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a68a:	f7fd ff5f 	bl	800854c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a68e:	e026      	b.n	800a6de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4413      	add	r3, r2
 800a696:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a698:	4b14      	ldr	r3, [pc, #80]	; (800a6ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a6a0:	68ba      	ldr	r2, [r7, #8]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d209      	bcs.n	800a6bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6a8:	4b13      	ldr	r3, [pc, #76]	; (800a6f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	4b0f      	ldr	r3, [pc, #60]	; (800a6ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	3304      	adds	r3, #4
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	f7fd ff6d 	bl	8008594 <vListInsert>
}
 800a6ba:	e010      	b.n	800a6de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6bc:	4b0f      	ldr	r3, [pc, #60]	; (800a6fc <prvAddCurrentTaskToDelayedList+0xc4>)
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	4b0a      	ldr	r3, [pc, #40]	; (800a6ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	3304      	adds	r3, #4
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	f7fd ff63 	bl	8008594 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a6ce:	4b0c      	ldr	r3, [pc, #48]	; (800a700 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d202      	bcs.n	800a6de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a6d8:	4a09      	ldr	r2, [pc, #36]	; (800a700 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	6013      	str	r3, [r2, #0]
}
 800a6de:	bf00      	nop
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	20006668 	.word	0x20006668
 800a6ec:	20006564 	.word	0x20006564
 800a6f0:	2000666c 	.word	0x2000666c
 800a6f4:	20006650 	.word	0x20006650
 800a6f8:	20006620 	.word	0x20006620
 800a6fc:	2000661c 	.word	0x2000661c
 800a700:	20006684 	.word	0x20006684

0800a704 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	3b04      	subs	r3, #4
 800a714:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a71c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	3b04      	subs	r3, #4
 800a722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	f023 0201 	bic.w	r2, r3, #1
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	3b04      	subs	r3, #4
 800a732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a734:	4a0c      	ldr	r2, [pc, #48]	; (800a768 <pxPortInitialiseStack+0x64>)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	3b14      	subs	r3, #20
 800a73e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3b04      	subs	r3, #4
 800a74a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f06f 0202 	mvn.w	r2, #2
 800a752:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	3b20      	subs	r3, #32
 800a758:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a75a:	68fb      	ldr	r3, [r7, #12]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	0800a76d 	.word	0x0800a76d

0800a76c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a772:	2300      	movs	r3, #0
 800a774:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a776:	4b14      	ldr	r3, [pc, #80]	; (800a7c8 <prvTaskExitError+0x5c>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a77e:	d00c      	beq.n	800a79a <prvTaskExitError+0x2e>
	__asm volatile
 800a780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a784:	b672      	cpsid	i
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	b662      	cpsie	i
 800a794:	60fb      	str	r3, [r7, #12]
}
 800a796:	bf00      	nop
 800a798:	e7fe      	b.n	800a798 <prvTaskExitError+0x2c>
	__asm volatile
 800a79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79e:	b672      	cpsid	i
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	b662      	cpsie	i
 800a7ae:	60bb      	str	r3, [r7, #8]
}
 800a7b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a7b2:	bf00      	nop
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d0fc      	beq.n	800a7b4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a7ba:	bf00      	nop
 800a7bc:	bf00      	nop
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr
 800a7c8:	20000020 	.word	0x20000020
 800a7cc:	00000000 	.word	0x00000000

0800a7d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a7d0:	4b07      	ldr	r3, [pc, #28]	; (800a7f0 <pxCurrentTCBConst2>)
 800a7d2:	6819      	ldr	r1, [r3, #0]
 800a7d4:	6808      	ldr	r0, [r1, #0]
 800a7d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7da:	f380 8809 	msr	PSP, r0
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f04f 0000 	mov.w	r0, #0
 800a7e6:	f380 8811 	msr	BASEPRI, r0
 800a7ea:	4770      	bx	lr
 800a7ec:	f3af 8000 	nop.w

0800a7f0 <pxCurrentTCBConst2>:
 800a7f0:	20006564 	.word	0x20006564
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7f4:	bf00      	nop
 800a7f6:	bf00      	nop

0800a7f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a7f8:	4808      	ldr	r0, [pc, #32]	; (800a81c <prvPortStartFirstTask+0x24>)
 800a7fa:	6800      	ldr	r0, [r0, #0]
 800a7fc:	6800      	ldr	r0, [r0, #0]
 800a7fe:	f380 8808 	msr	MSP, r0
 800a802:	f04f 0000 	mov.w	r0, #0
 800a806:	f380 8814 	msr	CONTROL, r0
 800a80a:	b662      	cpsie	i
 800a80c:	b661      	cpsie	f
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	df00      	svc	0
 800a818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a81a:	bf00      	nop
 800a81c:	e000ed08 	.word	0xe000ed08

0800a820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a826:	4b37      	ldr	r3, [pc, #220]	; (800a904 <xPortStartScheduler+0xe4>)
 800a828:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	22ff      	movs	r2, #255	; 0xff
 800a836:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a840:	78fb      	ldrb	r3, [r7, #3]
 800a842:	b2db      	uxtb	r3, r3
 800a844:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a848:	b2da      	uxtb	r2, r3
 800a84a:	4b2f      	ldr	r3, [pc, #188]	; (800a908 <xPortStartScheduler+0xe8>)
 800a84c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a84e:	4b2f      	ldr	r3, [pc, #188]	; (800a90c <xPortStartScheduler+0xec>)
 800a850:	2207      	movs	r2, #7
 800a852:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a854:	e009      	b.n	800a86a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a856:	4b2d      	ldr	r3, [pc, #180]	; (800a90c <xPortStartScheduler+0xec>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	3b01      	subs	r3, #1
 800a85c:	4a2b      	ldr	r2, [pc, #172]	; (800a90c <xPortStartScheduler+0xec>)
 800a85e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a860:	78fb      	ldrb	r3, [r7, #3]
 800a862:	b2db      	uxtb	r3, r3
 800a864:	005b      	lsls	r3, r3, #1
 800a866:	b2db      	uxtb	r3, r3
 800a868:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a86a:	78fb      	ldrb	r3, [r7, #3]
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a872:	2b80      	cmp	r3, #128	; 0x80
 800a874:	d0ef      	beq.n	800a856 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a876:	4b25      	ldr	r3, [pc, #148]	; (800a90c <xPortStartScheduler+0xec>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f1c3 0307 	rsb	r3, r3, #7
 800a87e:	2b04      	cmp	r3, #4
 800a880:	d00c      	beq.n	800a89c <xPortStartScheduler+0x7c>
	__asm volatile
 800a882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a886:	b672      	cpsid	i
 800a888:	f383 8811 	msr	BASEPRI, r3
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	b662      	cpsie	i
 800a896:	60bb      	str	r3, [r7, #8]
}
 800a898:	bf00      	nop
 800a89a:	e7fe      	b.n	800a89a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a89c:	4b1b      	ldr	r3, [pc, #108]	; (800a90c <xPortStartScheduler+0xec>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	021b      	lsls	r3, r3, #8
 800a8a2:	4a1a      	ldr	r2, [pc, #104]	; (800a90c <xPortStartScheduler+0xec>)
 800a8a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8a6:	4b19      	ldr	r3, [pc, #100]	; (800a90c <xPortStartScheduler+0xec>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8ae:	4a17      	ldr	r2, [pc, #92]	; (800a90c <xPortStartScheduler+0xec>)
 800a8b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	b2da      	uxtb	r2, r3
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8ba:	4b15      	ldr	r3, [pc, #84]	; (800a910 <xPortStartScheduler+0xf0>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a14      	ldr	r2, [pc, #80]	; (800a910 <xPortStartScheduler+0xf0>)
 800a8c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8c6:	4b12      	ldr	r3, [pc, #72]	; (800a910 <xPortStartScheduler+0xf0>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a11      	ldr	r2, [pc, #68]	; (800a910 <xPortStartScheduler+0xf0>)
 800a8cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a8d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8d2:	f000 f8dd 	bl	800aa90 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8d6:	4b0f      	ldr	r3, [pc, #60]	; (800a914 <xPortStartScheduler+0xf4>)
 800a8d8:	2200      	movs	r2, #0
 800a8da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a8dc:	f000 f8fc 	bl	800aad8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8e0:	4b0d      	ldr	r3, [pc, #52]	; (800a918 <xPortStartScheduler+0xf8>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a0c      	ldr	r2, [pc, #48]	; (800a918 <xPortStartScheduler+0xf8>)
 800a8e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a8ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a8ec:	f7ff ff84 	bl	800a7f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8f0:	f7ff fa80 	bl	8009df4 <vTaskSwitchContext>
	prvTaskExitError();
 800a8f4:	f7ff ff3a 	bl	800a76c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	e000e400 	.word	0xe000e400
 800a908:	20006690 	.word	0x20006690
 800a90c:	20006694 	.word	0x20006694
 800a910:	e000ed20 	.word	0xe000ed20
 800a914:	20000020 	.word	0x20000020
 800a918:	e000ef34 	.word	0xe000ef34

0800a91c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
	__asm volatile
 800a922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a926:	b672      	cpsid	i
 800a928:	f383 8811 	msr	BASEPRI, r3
 800a92c:	f3bf 8f6f 	isb	sy
 800a930:	f3bf 8f4f 	dsb	sy
 800a934:	b662      	cpsie	i
 800a936:	607b      	str	r3, [r7, #4]
}
 800a938:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a93a:	4b10      	ldr	r3, [pc, #64]	; (800a97c <vPortEnterCritical+0x60>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3301      	adds	r3, #1
 800a940:	4a0e      	ldr	r2, [pc, #56]	; (800a97c <vPortEnterCritical+0x60>)
 800a942:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a944:	4b0d      	ldr	r3, [pc, #52]	; (800a97c <vPortEnterCritical+0x60>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d111      	bne.n	800a970 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a94c:	4b0c      	ldr	r3, [pc, #48]	; (800a980 <vPortEnterCritical+0x64>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00c      	beq.n	800a970 <vPortEnterCritical+0x54>
	__asm volatile
 800a956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95a:	b672      	cpsid	i
 800a95c:	f383 8811 	msr	BASEPRI, r3
 800a960:	f3bf 8f6f 	isb	sy
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	b662      	cpsie	i
 800a96a:	603b      	str	r3, [r7, #0]
}
 800a96c:	bf00      	nop
 800a96e:	e7fe      	b.n	800a96e <vPortEnterCritical+0x52>
	}
}
 800a970:	bf00      	nop
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr
 800a97c:	20000020 	.word	0x20000020
 800a980:	e000ed04 	.word	0xe000ed04

0800a984 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a98a:	4b13      	ldr	r3, [pc, #76]	; (800a9d8 <vPortExitCritical+0x54>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10c      	bne.n	800a9ac <vPortExitCritical+0x28>
	__asm volatile
 800a992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a996:	b672      	cpsid	i
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	b662      	cpsie	i
 800a9a6:	607b      	str	r3, [r7, #4]
}
 800a9a8:	bf00      	nop
 800a9aa:	e7fe      	b.n	800a9aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a9ac:	4b0a      	ldr	r3, [pc, #40]	; (800a9d8 <vPortExitCritical+0x54>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	4a09      	ldr	r2, [pc, #36]	; (800a9d8 <vPortExitCritical+0x54>)
 800a9b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9b6:	4b08      	ldr	r3, [pc, #32]	; (800a9d8 <vPortExitCritical+0x54>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d105      	bne.n	800a9ca <vPortExitCritical+0x46>
 800a9be:	2300      	movs	r3, #0
 800a9c0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	f383 8811 	msr	BASEPRI, r3
}
 800a9c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9ca:	bf00      	nop
 800a9cc:	370c      	adds	r7, #12
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	20000020 	.word	0x20000020
 800a9dc:	00000000 	.word	0x00000000

0800a9e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a9e0:	f3ef 8009 	mrs	r0, PSP
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	4b15      	ldr	r3, [pc, #84]	; (800aa40 <pxCurrentTCBConst>)
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	f01e 0f10 	tst.w	lr, #16
 800a9f0:	bf08      	it	eq
 800a9f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9fa:	6010      	str	r0, [r2, #0]
 800a9fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa04:	b672      	cpsid	i
 800aa06:	f380 8811 	msr	BASEPRI, r0
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	b662      	cpsie	i
 800aa14:	f7ff f9ee 	bl	8009df4 <vTaskSwitchContext>
 800aa18:	f04f 0000 	mov.w	r0, #0
 800aa1c:	f380 8811 	msr	BASEPRI, r0
 800aa20:	bc09      	pop	{r0, r3}
 800aa22:	6819      	ldr	r1, [r3, #0]
 800aa24:	6808      	ldr	r0, [r1, #0]
 800aa26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2a:	f01e 0f10 	tst.w	lr, #16
 800aa2e:	bf08      	it	eq
 800aa30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa34:	f380 8809 	msr	PSP, r0
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop

0800aa40 <pxCurrentTCBConst>:
 800aa40:	20006564 	.word	0x20006564
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop

0800aa48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa52:	b672      	cpsid	i
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	b662      	cpsie	i
 800aa62:	607b      	str	r3, [r7, #4]
}
 800aa64:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa66:	f7ff f90b 	bl	8009c80 <xTaskIncrementTick>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d003      	beq.n	800aa78 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa70:	4b06      	ldr	r3, [pc, #24]	; (800aa8c <SysTick_Handler+0x44>)
 800aa72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa76:	601a      	str	r2, [r3, #0]
 800aa78:	2300      	movs	r3, #0
 800aa7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	f383 8811 	msr	BASEPRI, r3
}
 800aa82:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa84:	bf00      	nop
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	e000ed04 	.word	0xe000ed04

0800aa90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa90:	b480      	push	{r7}
 800aa92:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa94:	4b0b      	ldr	r3, [pc, #44]	; (800aac4 <vPortSetupTimerInterrupt+0x34>)
 800aa96:	2200      	movs	r2, #0
 800aa98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa9a:	4b0b      	ldr	r3, [pc, #44]	; (800aac8 <vPortSetupTimerInterrupt+0x38>)
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aaa0:	4b0a      	ldr	r3, [pc, #40]	; (800aacc <vPortSetupTimerInterrupt+0x3c>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a0a      	ldr	r2, [pc, #40]	; (800aad0 <vPortSetupTimerInterrupt+0x40>)
 800aaa6:	fba2 2303 	umull	r2, r3, r2, r3
 800aaaa:	099b      	lsrs	r3, r3, #6
 800aaac:	4a09      	ldr	r2, [pc, #36]	; (800aad4 <vPortSetupTimerInterrupt+0x44>)
 800aaae:	3b01      	subs	r3, #1
 800aab0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aab2:	4b04      	ldr	r3, [pc, #16]	; (800aac4 <vPortSetupTimerInterrupt+0x34>)
 800aab4:	2207      	movs	r2, #7
 800aab6:	601a      	str	r2, [r3, #0]
}
 800aab8:	bf00      	nop
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	e000e010 	.word	0xe000e010
 800aac8:	e000e018 	.word	0xe000e018
 800aacc:	20000000 	.word	0x20000000
 800aad0:	10624dd3 	.word	0x10624dd3
 800aad4:	e000e014 	.word	0xe000e014

0800aad8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aad8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aae8 <vPortEnableVFP+0x10>
 800aadc:	6801      	ldr	r1, [r0, #0]
 800aade:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aae2:	6001      	str	r1, [r0, #0]
 800aae4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aae6:	bf00      	nop
 800aae8:	e000ed88 	.word	0xe000ed88

0800aaec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aaf2:	f3ef 8305 	mrs	r3, IPSR
 800aaf6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2b0f      	cmp	r3, #15
 800aafc:	d916      	bls.n	800ab2c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aafe:	4a19      	ldr	r2, [pc, #100]	; (800ab64 <vPortValidateInterruptPriority+0x78>)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	4413      	add	r3, r2
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab08:	4b17      	ldr	r3, [pc, #92]	; (800ab68 <vPortValidateInterruptPriority+0x7c>)
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	7afa      	ldrb	r2, [r7, #11]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d20c      	bcs.n	800ab2c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab16:	b672      	cpsid	i
 800ab18:	f383 8811 	msr	BASEPRI, r3
 800ab1c:	f3bf 8f6f 	isb	sy
 800ab20:	f3bf 8f4f 	dsb	sy
 800ab24:	b662      	cpsie	i
 800ab26:	607b      	str	r3, [r7, #4]
}
 800ab28:	bf00      	nop
 800ab2a:	e7fe      	b.n	800ab2a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab2c:	4b0f      	ldr	r3, [pc, #60]	; (800ab6c <vPortValidateInterruptPriority+0x80>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab34:	4b0e      	ldr	r3, [pc, #56]	; (800ab70 <vPortValidateInterruptPriority+0x84>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d90c      	bls.n	800ab56 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab40:	b672      	cpsid	i
 800ab42:	f383 8811 	msr	BASEPRI, r3
 800ab46:	f3bf 8f6f 	isb	sy
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	b662      	cpsie	i
 800ab50:	603b      	str	r3, [r7, #0]
}
 800ab52:	bf00      	nop
 800ab54:	e7fe      	b.n	800ab54 <vPortValidateInterruptPriority+0x68>
	}
 800ab56:	bf00      	nop
 800ab58:	3714      	adds	r7, #20
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	e000e3f0 	.word	0xe000e3f0
 800ab68:	20006690 	.word	0x20006690
 800ab6c:	e000ed0c 	.word	0xe000ed0c
 800ab70:	20006694 	.word	0x20006694

0800ab74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08a      	sub	sp, #40	; 0x28
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab80:	f7fe ffb0 	bl	8009ae4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab84:	4b5b      	ldr	r3, [pc, #364]	; (800acf4 <pvPortMalloc+0x180>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d101      	bne.n	800ab90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab8c:	f000 f91a 	bl	800adc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab90:	4b59      	ldr	r3, [pc, #356]	; (800acf8 <pvPortMalloc+0x184>)
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	4013      	ands	r3, r2
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f040 8092 	bne.w	800acc2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d01f      	beq.n	800abe4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800aba4:	2208      	movs	r2, #8
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	4413      	add	r3, r2
 800abaa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f003 0307 	and.w	r3, r3, #7
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d016      	beq.n	800abe4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f023 0307 	bic.w	r3, r3, #7
 800abbc:	3308      	adds	r3, #8
 800abbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f003 0307 	and.w	r3, r3, #7
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00c      	beq.n	800abe4 <pvPortMalloc+0x70>
	__asm volatile
 800abca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abce:	b672      	cpsid	i
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	b662      	cpsie	i
 800abde:	617b      	str	r3, [r7, #20]
}
 800abe0:	bf00      	nop
 800abe2:	e7fe      	b.n	800abe2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d06b      	beq.n	800acc2 <pvPortMalloc+0x14e>
 800abea:	4b44      	ldr	r3, [pc, #272]	; (800acfc <pvPortMalloc+0x188>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d866      	bhi.n	800acc2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800abf4:	4b42      	ldr	r3, [pc, #264]	; (800ad00 <pvPortMalloc+0x18c>)
 800abf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800abf8:	4b41      	ldr	r3, [pc, #260]	; (800ad00 <pvPortMalloc+0x18c>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abfe:	e004      	b.n	800ac0a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ac00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d903      	bls.n	800ac1c <pvPortMalloc+0xa8>
 800ac14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d1f1      	bne.n	800ac00 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac1c:	4b35      	ldr	r3, [pc, #212]	; (800acf4 <pvPortMalloc+0x180>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d04d      	beq.n	800acc2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac26:	6a3b      	ldr	r3, [r7, #32]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2208      	movs	r2, #8
 800ac2c:	4413      	add	r3, r2
 800ac2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	6a3b      	ldr	r3, [r7, #32]
 800ac36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	1ad2      	subs	r2, r2, r3
 800ac40:	2308      	movs	r3, #8
 800ac42:	005b      	lsls	r3, r3, #1
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d921      	bls.n	800ac8c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	f003 0307 	and.w	r3, r3, #7
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00c      	beq.n	800ac74 <pvPortMalloc+0x100>
	__asm volatile
 800ac5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5e:	b672      	cpsid	i
 800ac60:	f383 8811 	msr	BASEPRI, r3
 800ac64:	f3bf 8f6f 	isb	sy
 800ac68:	f3bf 8f4f 	dsb	sy
 800ac6c:	b662      	cpsie	i
 800ac6e:	613b      	str	r3, [r7, #16]
}
 800ac70:	bf00      	nop
 800ac72:	e7fe      	b.n	800ac72 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac76:	685a      	ldr	r2, [r3, #4]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	1ad2      	subs	r2, r2, r3
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac86:	69b8      	ldr	r0, [r7, #24]
 800ac88:	f000 f8fe 	bl	800ae88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac8c:	4b1b      	ldr	r3, [pc, #108]	; (800acfc <pvPortMalloc+0x188>)
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	4a19      	ldr	r2, [pc, #100]	; (800acfc <pvPortMalloc+0x188>)
 800ac98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac9a:	4b18      	ldr	r3, [pc, #96]	; (800acfc <pvPortMalloc+0x188>)
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	4b19      	ldr	r3, [pc, #100]	; (800ad04 <pvPortMalloc+0x190>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d203      	bcs.n	800acae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aca6:	4b15      	ldr	r3, [pc, #84]	; (800acfc <pvPortMalloc+0x188>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a16      	ldr	r2, [pc, #88]	; (800ad04 <pvPortMalloc+0x190>)
 800acac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb0:	685a      	ldr	r2, [r3, #4]
 800acb2:	4b11      	ldr	r3, [pc, #68]	; (800acf8 <pvPortMalloc+0x184>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	431a      	orrs	r2, r3
 800acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800acbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbe:	2200      	movs	r2, #0
 800acc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800acc2:	f7fe ff1d 	bl	8009b00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800acc6:	69fb      	ldr	r3, [r7, #28]
 800acc8:	f003 0307 	and.w	r3, r3, #7
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00c      	beq.n	800acea <pvPortMalloc+0x176>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	b672      	cpsid	i
 800acd6:	f383 8811 	msr	BASEPRI, r3
 800acda:	f3bf 8f6f 	isb	sy
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	b662      	cpsie	i
 800ace4:	60fb      	str	r3, [r7, #12]
}
 800ace6:	bf00      	nop
 800ace8:	e7fe      	b.n	800ace8 <pvPortMalloc+0x174>
	return pvReturn;
 800acea:	69fb      	ldr	r3, [r7, #28]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3728      	adds	r7, #40	; 0x28
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	2000a2a0 	.word	0x2000a2a0
 800acf8:	2000a2ac 	.word	0x2000a2ac
 800acfc:	2000a2a4 	.word	0x2000a2a4
 800ad00:	2000a298 	.word	0x2000a298
 800ad04:	2000a2a8 	.word	0x2000a2a8

0800ad08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b086      	sub	sp, #24
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d04c      	beq.n	800adb4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad1a:	2308      	movs	r3, #8
 800ad1c:	425b      	negs	r3, r3
 800ad1e:	697a      	ldr	r2, [r7, #20]
 800ad20:	4413      	add	r3, r2
 800ad22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	685a      	ldr	r2, [r3, #4]
 800ad2c:	4b23      	ldr	r3, [pc, #140]	; (800adbc <vPortFree+0xb4>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4013      	ands	r3, r2
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d10c      	bne.n	800ad50 <vPortFree+0x48>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3a:	b672      	cpsid	i
 800ad3c:	f383 8811 	msr	BASEPRI, r3
 800ad40:	f3bf 8f6f 	isb	sy
 800ad44:	f3bf 8f4f 	dsb	sy
 800ad48:	b662      	cpsie	i
 800ad4a:	60fb      	str	r3, [r7, #12]
}
 800ad4c:	bf00      	nop
 800ad4e:	e7fe      	b.n	800ad4e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00c      	beq.n	800ad72 <vPortFree+0x6a>
	__asm volatile
 800ad58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5c:	b672      	cpsid	i
 800ad5e:	f383 8811 	msr	BASEPRI, r3
 800ad62:	f3bf 8f6f 	isb	sy
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	b662      	cpsie	i
 800ad6c:	60bb      	str	r3, [r7, #8]
}
 800ad6e:	bf00      	nop
 800ad70:	e7fe      	b.n	800ad70 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	685a      	ldr	r2, [r3, #4]
 800ad76:	4b11      	ldr	r3, [pc, #68]	; (800adbc <vPortFree+0xb4>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d019      	beq.n	800adb4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d115      	bne.n	800adb4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	685a      	ldr	r2, [r3, #4]
 800ad8c:	4b0b      	ldr	r3, [pc, #44]	; (800adbc <vPortFree+0xb4>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	43db      	mvns	r3, r3
 800ad92:	401a      	ands	r2, r3
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad98:	f7fe fea4 	bl	8009ae4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	4b07      	ldr	r3, [pc, #28]	; (800adc0 <vPortFree+0xb8>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4413      	add	r3, r2
 800ada6:	4a06      	ldr	r2, [pc, #24]	; (800adc0 <vPortFree+0xb8>)
 800ada8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800adaa:	6938      	ldr	r0, [r7, #16]
 800adac:	f000 f86c 	bl	800ae88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800adb0:	f7fe fea6 	bl	8009b00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800adb4:	bf00      	nop
 800adb6:	3718      	adds	r7, #24
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	2000a2ac 	.word	0x2000a2ac
 800adc0:	2000a2a4 	.word	0x2000a2a4

0800adc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800adca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800adce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800add0:	4b27      	ldr	r3, [pc, #156]	; (800ae70 <prvHeapInit+0xac>)
 800add2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f003 0307 	and.w	r3, r3, #7
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00c      	beq.n	800adf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	3307      	adds	r3, #7
 800ade2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f023 0307 	bic.w	r3, r3, #7
 800adea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	4a1f      	ldr	r2, [pc, #124]	; (800ae70 <prvHeapInit+0xac>)
 800adf4:	4413      	add	r3, r2
 800adf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800adfc:	4a1d      	ldr	r2, [pc, #116]	; (800ae74 <prvHeapInit+0xb0>)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae02:	4b1c      	ldr	r3, [pc, #112]	; (800ae74 <prvHeapInit+0xb0>)
 800ae04:	2200      	movs	r2, #0
 800ae06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae10:	2208      	movs	r2, #8
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	1a9b      	subs	r3, r3, r2
 800ae16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f023 0307 	bic.w	r3, r3, #7
 800ae1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	4a15      	ldr	r2, [pc, #84]	; (800ae78 <prvHeapInit+0xb4>)
 800ae24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae26:	4b14      	ldr	r3, [pc, #80]	; (800ae78 <prvHeapInit+0xb4>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae2e:	4b12      	ldr	r3, [pc, #72]	; (800ae78 <prvHeapInit+0xb4>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2200      	movs	r2, #0
 800ae34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	1ad2      	subs	r2, r2, r3
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae44:	4b0c      	ldr	r3, [pc, #48]	; (800ae78 <prvHeapInit+0xb4>)
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	4a0a      	ldr	r2, [pc, #40]	; (800ae7c <prvHeapInit+0xb8>)
 800ae52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	4a09      	ldr	r2, [pc, #36]	; (800ae80 <prvHeapInit+0xbc>)
 800ae5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae5c:	4b09      	ldr	r3, [pc, #36]	; (800ae84 <prvHeapInit+0xc0>)
 800ae5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae62:	601a      	str	r2, [r3, #0]
}
 800ae64:	bf00      	nop
 800ae66:	3714      	adds	r7, #20
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	20006698 	.word	0x20006698
 800ae74:	2000a298 	.word	0x2000a298
 800ae78:	2000a2a0 	.word	0x2000a2a0
 800ae7c:	2000a2a8 	.word	0x2000a2a8
 800ae80:	2000a2a4 	.word	0x2000a2a4
 800ae84:	2000a2ac 	.word	0x2000a2ac

0800ae88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae90:	4b28      	ldr	r3, [pc, #160]	; (800af34 <prvInsertBlockIntoFreeList+0xac>)
 800ae92:	60fb      	str	r3, [r7, #12]
 800ae94:	e002      	b.n	800ae9c <prvInsertBlockIntoFreeList+0x14>
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	60fb      	str	r3, [r7, #12]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d8f7      	bhi.n	800ae96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d108      	bne.n	800aeca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	685a      	ldr	r2, [r3, #4]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	441a      	add	r2, r3
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	68ba      	ldr	r2, [r7, #8]
 800aed4:	441a      	add	r2, r3
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d118      	bne.n	800af10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	4b15      	ldr	r3, [pc, #84]	; (800af38 <prvInsertBlockIntoFreeList+0xb0>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d00d      	beq.n	800af06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	685a      	ldr	r2, [r3, #4]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	441a      	add	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	601a      	str	r2, [r3, #0]
 800af04:	e008      	b.n	800af18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af06:	4b0c      	ldr	r3, [pc, #48]	; (800af38 <prvInsertBlockIntoFreeList+0xb0>)
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	601a      	str	r2, [r3, #0]
 800af0e:	e003      	b.n	800af18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af18:	68fa      	ldr	r2, [r7, #12]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d002      	beq.n	800af26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af26:	bf00      	nop
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop
 800af34:	2000a298 	.word	0x2000a298
 800af38:	2000a2a0 	.word	0x2000a2a0

0800af3c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	330c      	adds	r3, #12
 800af4c:	461a      	mov	r2, r3
 800af4e:	6839      	ldr	r1, [r7, #0]
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f002 f931 	bl	800d1b8 <tcpip_send_msg_wait_sem>
 800af56:	4603      	mov	r3, r0
 800af58:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800af5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d103      	bne.n	800af6a <netconn_apimsg+0x2e>
    return apimsg->err;
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800af68:	e001      	b.n	800af6e <netconn_apimsg+0x32>
  }
  return err;
 800af6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
	...

0800af78 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b08c      	sub	sp, #48	; 0x30
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	4603      	mov	r3, r0
 800af80:	603a      	str	r2, [r7, #0]
 800af82:	71fb      	strb	r3, [r7, #7]
 800af84:	460b      	mov	r3, r1
 800af86:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800af88:	79fb      	ldrb	r3, [r7, #7]
 800af8a:	6839      	ldr	r1, [r7, #0]
 800af8c:	4618      	mov	r0, r3
 800af8e:	f000 ffaf 	bl	800bef0 <netconn_alloc>
 800af92:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800af94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af96:	2b00      	cmp	r3, #0
 800af98:	d054      	beq.n	800b044 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800af9a:	79bb      	ldrb	r3, [r7, #6]
 800af9c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800af9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800afa2:	f107 0308 	add.w	r3, r7, #8
 800afa6:	4619      	mov	r1, r3
 800afa8:	4829      	ldr	r0, [pc, #164]	; (800b050 <netconn_new_with_proto_and_callback+0xd8>)
 800afaa:	f7ff ffc7 	bl	800af3c <netconn_apimsg>
 800afae:	4603      	mov	r3, r0
 800afb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800afb4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d043      	beq.n	800b044 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800afbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d005      	beq.n	800afd0 <netconn_new_with_proto_and_callback+0x58>
 800afc4:	4b23      	ldr	r3, [pc, #140]	; (800b054 <netconn_new_with_proto_and_callback+0xdc>)
 800afc6:	22a3      	movs	r2, #163	; 0xa3
 800afc8:	4923      	ldr	r1, [pc, #140]	; (800b058 <netconn_new_with_proto_and_callback+0xe0>)
 800afca:	4824      	ldr	r0, [pc, #144]	; (800b05c <netconn_new_with_proto_and_callback+0xe4>)
 800afcc:	f012 fbd0 	bl	801d770 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800afd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd2:	3310      	adds	r3, #16
 800afd4:	4618      	mov	r0, r3
 800afd6:	f00d f9a8 	bl	801832a <sys_mbox_valid>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d105      	bne.n	800afec <netconn_new_with_proto_and_callback+0x74>
 800afe0:	4b1c      	ldr	r3, [pc, #112]	; (800b054 <netconn_new_with_proto_and_callback+0xdc>)
 800afe2:	22a4      	movs	r2, #164	; 0xa4
 800afe4:	491e      	ldr	r1, [pc, #120]	; (800b060 <netconn_new_with_proto_and_callback+0xe8>)
 800afe6:	481d      	ldr	r0, [pc, #116]	; (800b05c <netconn_new_with_proto_and_callback+0xe4>)
 800afe8:	f012 fbc2 	bl	801d770 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800afec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afee:	3314      	adds	r3, #20
 800aff0:	4618      	mov	r0, r3
 800aff2:	f00d f99a 	bl	801832a <sys_mbox_valid>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d005      	beq.n	800b008 <netconn_new_with_proto_and_callback+0x90>
 800affc:	4b15      	ldr	r3, [pc, #84]	; (800b054 <netconn_new_with_proto_and_callback+0xdc>)
 800affe:	22a6      	movs	r2, #166	; 0xa6
 800b000:	4918      	ldr	r1, [pc, #96]	; (800b064 <netconn_new_with_proto_and_callback+0xec>)
 800b002:	4816      	ldr	r0, [pc, #88]	; (800b05c <netconn_new_with_proto_and_callback+0xe4>)
 800b004:	f012 fbb4 	bl	801d770 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800b008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b00a:	330c      	adds	r3, #12
 800b00c:	4618      	mov	r0, r3
 800b00e:	f00d fa1d 	bl	801844c <sys_sem_valid>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d105      	bne.n	800b024 <netconn_new_with_proto_and_callback+0xac>
 800b018:	4b0e      	ldr	r3, [pc, #56]	; (800b054 <netconn_new_with_proto_and_callback+0xdc>)
 800b01a:	22a9      	movs	r2, #169	; 0xa9
 800b01c:	4912      	ldr	r1, [pc, #72]	; (800b068 <netconn_new_with_proto_and_callback+0xf0>)
 800b01e:	480f      	ldr	r0, [pc, #60]	; (800b05c <netconn_new_with_proto_and_callback+0xe4>)
 800b020:	f012 fba6 	bl	801d770 <iprintf>
      sys_sem_free(&conn->op_completed);
 800b024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b026:	330c      	adds	r3, #12
 800b028:	4618      	mov	r0, r3
 800b02a:	f00d fa02 	bl	8018432 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800b02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b030:	3310      	adds	r3, #16
 800b032:	4618      	mov	r0, r3
 800b034:	f00d f8f2 	bl	801821c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800b038:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b03a:	2007      	movs	r0, #7
 800b03c:	f002 fe7a 	bl	800dd34 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800b040:	2300      	movs	r3, #0
 800b042:	e000      	b.n	800b046 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800b044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b046:	4618      	mov	r0, r3
 800b048:	3730      	adds	r7, #48	; 0x30
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	0800bec5 	.word	0x0800bec5
 800b054:	0801eb8c 	.word	0x0801eb8c
 800b058:	0801ebc0 	.word	0x0801ebc0
 800b05c:	0801ebe4 	.word	0x0801ebe4
 800b060:	0801ec0c 	.word	0x0801ec0c
 800b064:	0801ec24 	.word	0x0801ec24
 800b068:	0801ec48 	.word	0x0801ec48

0800b06c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b08c      	sub	sp, #48	; 0x30
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d101      	bne.n	800b07e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	e014      	b.n	800b0a8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b082:	2329      	movs	r3, #41	; 0x29
 800b084:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800b086:	f107 030c 	add.w	r3, r7, #12
 800b08a:	4619      	mov	r1, r3
 800b08c:	4808      	ldr	r0, [pc, #32]	; (800b0b0 <netconn_prepare_delete+0x44>)
 800b08e:	f7ff ff55 	bl	800af3c <netconn_apimsg>
 800b092:	4603      	mov	r3, r0
 800b094:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800b098:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d002      	beq.n	800b0a6 <netconn_prepare_delete+0x3a>
    return err;
 800b0a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b0a4:	e000      	b.n	800b0a8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3730      	adds	r7, #48	; 0x30
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	0800c431 	.word	0x0800c431

0800b0b4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d101      	bne.n	800b0c6 <netconn_delete+0x12>
    return ERR_OK;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	e00d      	b.n	800b0e2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7ff ffd0 	bl	800b06c <netconn_prepare_delete>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800b0d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d102      	bne.n	800b0de <netconn_delete+0x2a>
    netconn_free(conn);
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 ff77 	bl	800bfcc <netconn_free>
  }
  return err;
 800b0de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
	...

0800b0ec <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b08e      	sub	sp, #56	; 0x38
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d109      	bne.n	800b114 <netconn_connect+0x28>
 800b100:	4b11      	ldr	r3, [pc, #68]	; (800b148 <netconn_connect+0x5c>)
 800b102:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800b106:	4911      	ldr	r1, [pc, #68]	; (800b14c <netconn_connect+0x60>)
 800b108:	4811      	ldr	r0, [pc, #68]	; (800b150 <netconn_connect+0x64>)
 800b10a:	f012 fb31 	bl	801d770 <iprintf>
 800b10e:	f06f 030f 	mvn.w	r3, #15
 800b112:	e015      	b.n	800b140 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d101      	bne.n	800b11e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800b11a:	4b0e      	ldr	r3, [pc, #56]	; (800b154 <netconn_connect+0x68>)
 800b11c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800b126:	88fb      	ldrh	r3, [r7, #6]
 800b128:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800b12a:	f107 0314 	add.w	r3, r7, #20
 800b12e:	4619      	mov	r1, r3
 800b130:	4809      	ldr	r0, [pc, #36]	; (800b158 <netconn_connect+0x6c>)
 800b132:	f7ff ff03 	bl	800af3c <netconn_apimsg>
 800b136:	4603      	mov	r3, r0
 800b138:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800b13c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b140:	4618      	mov	r0, r3
 800b142:	3738      	adds	r7, #56	; 0x38
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	0801eb8c 	.word	0x0801eb8c
 800b14c:	0801ed00 	.word	0x0801ed00
 800b150:	0801ebe4 	.word	0x0801ebe4
 800b154:	08022398 	.word	0x08022398
 800b158:	0800c719 	.word	0x0800c719

0800b15c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b088      	sub	sp, #32
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	4613      	mov	r3, r2
 800b168:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800b16a:	2300      	movs	r3, #0
 800b16c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d109      	bne.n	800b188 <netconn_recv_data+0x2c>
 800b174:	4b58      	ldr	r3, [pc, #352]	; (800b2d8 <netconn_recv_data+0x17c>)
 800b176:	f44f 7212 	mov.w	r2, #584	; 0x248
 800b17a:	4958      	ldr	r1, [pc, #352]	; (800b2dc <netconn_recv_data+0x180>)
 800b17c:	4858      	ldr	r0, [pc, #352]	; (800b2e0 <netconn_recv_data+0x184>)
 800b17e:	f012 faf7 	bl	801d770 <iprintf>
 800b182:	f06f 030f 	mvn.w	r3, #15
 800b186:	e0a2      	b.n	800b2ce <netconn_recv_data+0x172>
  *new_buf = NULL;
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	2200      	movs	r2, #0
 800b18c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d109      	bne.n	800b1a8 <netconn_recv_data+0x4c>
 800b194:	4b50      	ldr	r3, [pc, #320]	; (800b2d8 <netconn_recv_data+0x17c>)
 800b196:	f240 224a 	movw	r2, #586	; 0x24a
 800b19a:	4952      	ldr	r1, [pc, #328]	; (800b2e4 <netconn_recv_data+0x188>)
 800b19c:	4850      	ldr	r0, [pc, #320]	; (800b2e0 <netconn_recv_data+0x184>)
 800b19e:	f012 fae7 	bl	801d770 <iprintf>
 800b1a2:	f06f 030f 	mvn.w	r3, #15
 800b1a6:	e092      	b.n	800b2ce <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	3310      	adds	r3, #16
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f00d f8bc 	bl	801832a <sys_mbox_valid>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d10e      	bne.n	800b1d6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800b1b8:	68f8      	ldr	r0, [r7, #12]
 800b1ba:	f000 fad4 	bl	800b766 <netconn_err>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800b1c2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d002      	beq.n	800b1d0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800b1ca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b1ce:	e07e      	b.n	800b2ce <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800b1d0:	f06f 030a 	mvn.w	r3, #10
 800b1d4:	e07b      	b.n	800b2ce <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	7f1b      	ldrb	r3, [r3, #28]
 800b1da:	f003 0302 	and.w	r3, r3, #2
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d10f      	bne.n	800b202 <netconn_recv_data+0xa6>
 800b1e2:	79fb      	ldrb	r3, [r7, #7]
 800b1e4:	f003 0304 	and.w	r3, r3, #4
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d10a      	bne.n	800b202 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	7f1b      	ldrb	r3, [r3, #28]
 800b1f0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d104      	bne.n	800b202 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d023      	beq.n	800b24a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	3310      	adds	r3, #16
 800b206:	f107 0218 	add.w	r2, r7, #24
 800b20a:	4611      	mov	r1, r2
 800b20c:	4618      	mov	r0, r3
 800b20e:	f00d f870 	bl	80182f2 <sys_arch_mbox_tryfetch>
 800b212:	4603      	mov	r3, r0
 800b214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b218:	d11f      	bne.n	800b25a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f000 faa3 	bl	800b766 <netconn_err>
 800b220:	4603      	mov	r3, r0
 800b222:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800b224:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d002      	beq.n	800b232 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800b22c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b230:	e04d      	b.n	800b2ce <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	7f1b      	ldrb	r3, [r3, #28]
 800b236:	f003 0301 	and.w	r3, r3, #1
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d002      	beq.n	800b244 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800b23e:	f06f 030a 	mvn.w	r3, #10
 800b242:	e044      	b.n	800b2ce <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800b244:	f06f 0306 	mvn.w	r3, #6
 800b248:	e041      	b.n	800b2ce <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	3310      	adds	r3, #16
 800b24e:	f107 0118 	add.w	r1, r7, #24
 800b252:	2200      	movs	r2, #0
 800b254:	4618      	mov	r0, r3
 800b256:	f00d f80d 	bl	8018274 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b262:	2b10      	cmp	r3, #16
 800b264:	d117      	bne.n	800b296 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	f107 0217 	add.w	r2, r7, #23
 800b26c:	4611      	mov	r1, r2
 800b26e:	4618      	mov	r0, r3
 800b270:	f000 faca 	bl	800b808 <lwip_netconn_is_err_msg>
 800b274:	4603      	mov	r3, r0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d009      	beq.n	800b28e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800b27a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b27e:	f113 0f0f 	cmn.w	r3, #15
 800b282:	d101      	bne.n	800b288 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800b284:	2300      	movs	r3, #0
 800b286:	e022      	b.n	800b2ce <netconn_recv_data+0x172>
      }
      return err;
 800b288:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b28c:	e01f      	b.n	800b2ce <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	891b      	ldrh	r3, [r3, #8]
 800b292:	83fb      	strh	r3, [r7, #30]
 800b294:	e00d      	b.n	800b2b2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d106      	bne.n	800b2aa <netconn_recv_data+0x14e>
 800b29c:	4b0e      	ldr	r3, [pc, #56]	; (800b2d8 <netconn_recv_data+0x17c>)
 800b29e:	f240 2291 	movw	r2, #657	; 0x291
 800b2a2:	4911      	ldr	r1, [pc, #68]	; (800b2e8 <netconn_recv_data+0x18c>)
 800b2a4:	480e      	ldr	r0, [pc, #56]	; (800b2e0 <netconn_recv_data+0x184>)
 800b2a6:	f012 fa63 	bl	801d770 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	891b      	ldrh	r3, [r3, #8]
 800b2b0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d005      	beq.n	800b2c6 <netconn_recv_data+0x16a>
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2be:	8bfa      	ldrh	r2, [r7, #30]
 800b2c0:	2101      	movs	r1, #1
 800b2c2:	68f8      	ldr	r0, [r7, #12]
 800b2c4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800b2c6:	69ba      	ldr	r2, [r7, #24]
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3720      	adds	r7, #32
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	0801eb8c 	.word	0x0801eb8c
 800b2dc:	0801eda4 	.word	0x0801eda4
 800b2e0:	0801ebe4 	.word	0x0801ebe4
 800b2e4:	0801edc4 	.word	0x0801edc4
 800b2e8:	0801ede0 	.word	0x0801ede0

0800b2ec <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d005      	beq.n	800b30a <netconn_tcp_recvd_msg+0x1e>
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b306:	2b10      	cmp	r3, #16
 800b308:	d009      	beq.n	800b31e <netconn_tcp_recvd_msg+0x32>
 800b30a:	4b0c      	ldr	r3, [pc, #48]	; (800b33c <netconn_tcp_recvd_msg+0x50>)
 800b30c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800b310:	490b      	ldr	r1, [pc, #44]	; (800b340 <netconn_tcp_recvd_msg+0x54>)
 800b312:	480c      	ldr	r0, [pc, #48]	; (800b344 <netconn_tcp_recvd_msg+0x58>)
 800b314:	f012 fa2c 	bl	801d770 <iprintf>
 800b318:	f06f 030f 	mvn.w	r3, #15
 800b31c:	e00a      	b.n	800b334 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	68ba      	ldr	r2, [r7, #8]
 800b328:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800b32a:	6879      	ldr	r1, [r7, #4]
 800b32c:	4806      	ldr	r0, [pc, #24]	; (800b348 <netconn_tcp_recvd_msg+0x5c>)
 800b32e:	f7ff fe05 	bl	800af3c <netconn_apimsg>
 800b332:	4603      	mov	r3, r0
}
 800b334:	4618      	mov	r0, r3
 800b336:	3710      	adds	r7, #16
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	0801eb8c 	.word	0x0801eb8c
 800b340:	0801edec 	.word	0x0801edec
 800b344:	0801ebe4 	.word	0x0801ebe4
 800b348:	0800c895 	.word	0x0800c895

0800b34c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b090      	sub	sp, #64	; 0x40
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	4613      	mov	r3, r2
 800b358:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	3310      	adds	r3, #16
 800b35e:	4618      	mov	r0, r3
 800b360:	f00c ffe3 	bl	801832a <sys_mbox_valid>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d102      	bne.n	800b370 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800b36a:	f06f 030a 	mvn.w	r3, #10
 800b36e:	e06d      	b.n	800b44c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	7f1b      	ldrb	r3, [r3, #28]
 800b374:	b25b      	sxtb	r3, r3
 800b376:	2b00      	cmp	r3, #0
 800b378:	da07      	bge.n	800b38a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	7f1b      	ldrb	r3, [r3, #28]
 800b37e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b382:	b2da      	uxtb	r2, r3
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800b388:	e039      	b.n	800b3fe <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800b38a:	79fb      	ldrb	r3, [r7, #7]
 800b38c:	461a      	mov	r2, r3
 800b38e:	68b9      	ldr	r1, [r7, #8]
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	f7ff fee3 	bl	800b15c <netconn_recv_data>
 800b396:	4603      	mov	r3, r0
 800b398:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800b39c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d002      	beq.n	800b3aa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800b3a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b3a8:	e050      	b.n	800b44c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800b3b0:	79fb      	ldrb	r3, [r7, #7]
 800b3b2:	f003 0308 	and.w	r3, r3, #8
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d10e      	bne.n	800b3d8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d002      	beq.n	800b3c6 <netconn_recv_data_tcp+0x7a>
 800b3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c2:	891b      	ldrh	r3, [r3, #8]
 800b3c4:	e000      	b.n	800b3c8 <netconn_recv_data_tcp+0x7c>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800b3ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b3cc:	f107 0214 	add.w	r2, r7, #20
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f7ff ff8a 	bl	800b2ec <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800b3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d134      	bne.n	800b448 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800b3de:	79fb      	ldrb	r3, [r7, #7]
 800b3e0:	f003 0310 	and.w	r3, r3, #16
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d009      	beq.n	800b3fc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	7f1b      	ldrb	r3, [r3, #28]
 800b3ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b3f0:	b2da      	uxtb	r2, r3
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800b3f6:	f06f 0306 	mvn.w	r3, #6
 800b3fa:	e027      	b.n	800b44c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800b3fc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b402:	2b00      	cmp	r3, #0
 800b404:	d005      	beq.n	800b412 <netconn_recv_data_tcp+0xc6>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40a:	2200      	movs	r2, #0
 800b40c:	2101      	movs	r1, #1
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10f      	bne.n	800b43a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f000 f9a3 	bl	800b766 <netconn_err>
 800b420:	4603      	mov	r3, r0
 800b422:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800b426:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d002      	beq.n	800b434 <netconn_recv_data_tcp+0xe8>
          return err;
 800b42e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b432:	e00b      	b.n	800b44c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800b434:	f06f 030d 	mvn.w	r3, #13
 800b438:	e008      	b.n	800b44c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800b43a:	2101      	movs	r1, #1
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	f000 f955 	bl	800b6ec <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800b442:	f06f 030e 	mvn.w	r3, #14
 800b446:	e001      	b.n	800b44c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800b448:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3740      	adds	r7, #64	; 0x40
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b086      	sub	sp, #24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800b45e:	2300      	movs	r3, #0
 800b460:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d109      	bne.n	800b47c <netconn_recv+0x28>
 800b468:	4b32      	ldr	r3, [pc, #200]	; (800b534 <netconn_recv+0xe0>)
 800b46a:	f240 3263 	movw	r2, #867	; 0x363
 800b46e:	4932      	ldr	r1, [pc, #200]	; (800b538 <netconn_recv+0xe4>)
 800b470:	4832      	ldr	r0, [pc, #200]	; (800b53c <netconn_recv+0xe8>)
 800b472:	f012 f97d 	bl	801d770 <iprintf>
 800b476:	f06f 030f 	mvn.w	r3, #15
 800b47a:	e056      	b.n	800b52a <netconn_recv+0xd6>
  *new_buf = NULL;
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	2200      	movs	r2, #0
 800b480:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d109      	bne.n	800b49c <netconn_recv+0x48>
 800b488:	4b2a      	ldr	r3, [pc, #168]	; (800b534 <netconn_recv+0xe0>)
 800b48a:	f240 3265 	movw	r2, #869	; 0x365
 800b48e:	492c      	ldr	r1, [pc, #176]	; (800b540 <netconn_recv+0xec>)
 800b490:	482a      	ldr	r0, [pc, #168]	; (800b53c <netconn_recv+0xe8>)
 800b492:	f012 f96d 	bl	801d770 <iprintf>
 800b496:	f06f 030f 	mvn.w	r3, #15
 800b49a:	e046      	b.n	800b52a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4a4:	2b10      	cmp	r3, #16
 800b4a6:	d13a      	bne.n	800b51e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b4ac:	2006      	movs	r0, #6
 800b4ae:	f002 fbcb 	bl	800dc48 <memp_malloc>
 800b4b2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d102      	bne.n	800b4c0 <netconn_recv+0x6c>
      return ERR_MEM;
 800b4ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4be:	e034      	b.n	800b52a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800b4c0:	f107 030c 	add.w	r3, r7, #12
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f7ff ff3f 	bl	800b34c <netconn_recv_data_tcp>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b4d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d006      	beq.n	800b4e8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800b4da:	6979      	ldr	r1, [r7, #20]
 800b4dc:	2006      	movs	r0, #6
 800b4de:	f002 fc29 	bl	800dd34 <memp_free>
      return err;
 800b4e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b4e6:	e020      	b.n	800b52a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d106      	bne.n	800b4fc <netconn_recv+0xa8>
 800b4ee:	4b11      	ldr	r3, [pc, #68]	; (800b534 <netconn_recv+0xe0>)
 800b4f0:	f240 3279 	movw	r2, #889	; 0x379
 800b4f4:	4913      	ldr	r1, [pc, #76]	; (800b544 <netconn_recv+0xf0>)
 800b4f6:	4811      	ldr	r0, [pc, #68]	; (800b53c <netconn_recv+0xe8>)
 800b4f8:	f012 f93a 	bl	801d770 <iprintf>

    buf->p = p;
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	2200      	movs	r2, #0
 800b50c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	2200      	movs	r2, #0
 800b512:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	697a      	ldr	r2, [r7, #20]
 800b518:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800b51a:	2300      	movs	r3, #0
 800b51c:	e005      	b.n	800b52a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800b51e:	2200      	movs	r2, #0
 800b520:	6839      	ldr	r1, [r7, #0]
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7ff fe1a 	bl	800b15c <netconn_recv_data>
 800b528:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3718      	adds	r7, #24
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	0801eb8c 	.word	0x0801eb8c
 800b538:	0801eda4 	.word	0x0801eda4
 800b53c:	0801ebe4 	.word	0x0801ebe4
 800b540:	0801edc4 	.word	0x0801edc4
 800b544:	0801ee3c 	.word	0x0801ee3c

0800b548 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b088      	sub	sp, #32
 800b54c:	af02      	add	r7, sp, #8
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	607a      	str	r2, [r7, #4]
 800b554:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800b55e:	78fa      	ldrb	r2, [r7, #3]
 800b560:	f107 0110 	add.w	r1, r7, #16
 800b564:	6a3b      	ldr	r3, [r7, #32]
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	4613      	mov	r3, r2
 800b56a:	2201      	movs	r2, #1
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f000 f805 	bl	800b57c <netconn_write_vectors_partly>
 800b572:	4603      	mov	r3, r0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3718      	adds	r7, #24
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b092      	sub	sp, #72	; 0x48
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	4611      	mov	r1, r2
 800b588:	461a      	mov	r2, r3
 800b58a:	460b      	mov	r3, r1
 800b58c:	80fb      	strh	r3, [r7, #6]
 800b58e:	4613      	mov	r3, r2
 800b590:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d109      	bne.n	800b5ac <netconn_write_vectors_partly+0x30>
 800b598:	4b4e      	ldr	r3, [pc, #312]	; (800b6d4 <netconn_write_vectors_partly+0x158>)
 800b59a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b59e:	494e      	ldr	r1, [pc, #312]	; (800b6d8 <netconn_write_vectors_partly+0x15c>)
 800b5a0:	484e      	ldr	r0, [pc, #312]	; (800b6dc <netconn_write_vectors_partly+0x160>)
 800b5a2:	f012 f8e5 	bl	801d770 <iprintf>
 800b5a6:	f06f 030f 	mvn.w	r3, #15
 800b5aa:	e08e      	b.n	800b6ca <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5b4:	2b10      	cmp	r3, #16
 800b5b6:	d009      	beq.n	800b5cc <netconn_write_vectors_partly+0x50>
 800b5b8:	4b46      	ldr	r3, [pc, #280]	; (800b6d4 <netconn_write_vectors_partly+0x158>)
 800b5ba:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800b5be:	4948      	ldr	r1, [pc, #288]	; (800b6e0 <netconn_write_vectors_partly+0x164>)
 800b5c0:	4846      	ldr	r0, [pc, #280]	; (800b6dc <netconn_write_vectors_partly+0x160>)
 800b5c2:	f012 f8d5 	bl	801d770 <iprintf>
 800b5c6:	f06f 0305 	mvn.w	r3, #5
 800b5ca:	e07e      	b.n	800b6ca <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	7f1b      	ldrb	r3, [r3, #28]
 800b5d0:	f003 0302 	and.w	r3, r3, #2
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d104      	bne.n	800b5e2 <netconn_write_vectors_partly+0x66>
 800b5d8:	797b      	ldrb	r3, [r7, #5]
 800b5da:	f003 0304 	and.w	r3, r3, #4
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <netconn_write_vectors_partly+0x6a>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e000      	b.n	800b5e8 <netconn_write_vectors_partly+0x6c>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800b5ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d005      	beq.n	800b600 <netconn_write_vectors_partly+0x84>
 800b5f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d102      	bne.n	800b600 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800b5fa:	f06f 0305 	mvn.w	r3, #5
 800b5fe:	e064      	b.n	800b6ca <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800b600:	2300      	movs	r3, #0
 800b602:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800b604:	2300      	movs	r3, #0
 800b606:	643b      	str	r3, [r7, #64]	; 0x40
 800b608:	e015      	b.n	800b636 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800b60a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b60c:	00db      	lsls	r3, r3, #3
 800b60e:	68ba      	ldr	r2, [r7, #8]
 800b610:	4413      	add	r3, r2
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b616:	4413      	add	r3, r2
 800b618:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800b61a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b61c:	00db      	lsls	r3, r3, #3
 800b61e:	68ba      	ldr	r2, [r7, #8]
 800b620:	4413      	add	r3, r2
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b626:	429a      	cmp	r2, r3
 800b628:	d202      	bcs.n	800b630 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800b62a:	f06f 0305 	mvn.w	r3, #5
 800b62e:	e04c      	b.n	800b6ca <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800b630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b632:	3301      	adds	r3, #1
 800b634:	643b      	str	r3, [r7, #64]	; 0x40
 800b636:	88fb      	ldrh	r3, [r7, #6]
 800b638:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b63a:	429a      	cmp	r2, r3
 800b63c:	dbe5      	blt.n	800b60a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800b63e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b640:	2b00      	cmp	r3, #0
 800b642:	d101      	bne.n	800b648 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800b644:	2300      	movs	r3, #0
 800b646:	e040      	b.n	800b6ca <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800b648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	da0a      	bge.n	800b664 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800b64e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b650:	2b00      	cmp	r3, #0
 800b652:	d102      	bne.n	800b65a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800b654:	f06f 0305 	mvn.w	r3, #5
 800b658:	e037      	b.n	800b6ca <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800b65a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b65e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800b660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b662:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800b66c:	88fb      	ldrh	r3, [r7, #6]
 800b66e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800b670:	2300      	movs	r3, #0
 800b672:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800b674:	797b      	ldrb	r3, [r7, #5]
 800b676:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800b67a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b67c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800b67e:	2300      	movs	r3, #0
 800b680:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800b682:	f107 0314 	add.w	r3, r7, #20
 800b686:	4619      	mov	r1, r3
 800b688:	4816      	ldr	r0, [pc, #88]	; (800b6e4 <netconn_write_vectors_partly+0x168>)
 800b68a:	f7ff fc57 	bl	800af3c <netconn_apimsg>
 800b68e:	4603      	mov	r3, r0
 800b690:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800b694:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d114      	bne.n	800b6c6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800b69c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d002      	beq.n	800b6a8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800b6a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6a6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800b6a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d10a      	bne.n	800b6c6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800b6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d006      	beq.n	800b6c6 <netconn_write_vectors_partly+0x14a>
 800b6b8:	4b06      	ldr	r3, [pc, #24]	; (800b6d4 <netconn_write_vectors_partly+0x158>)
 800b6ba:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b6be:	490a      	ldr	r1, [pc, #40]	; (800b6e8 <netconn_write_vectors_partly+0x16c>)
 800b6c0:	4806      	ldr	r0, [pc, #24]	; (800b6dc <netconn_write_vectors_partly+0x160>)
 800b6c2:	f012 f855 	bl	801d770 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800b6c6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3748      	adds	r7, #72	; 0x48
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	0801eb8c 	.word	0x0801eb8c
 800b6d8:	0801ee64 	.word	0x0801ee64
 800b6dc:	0801ebe4 	.word	0x0801ebe4
 800b6e0:	0801ee80 	.word	0x0801ee80
 800b6e4:	0800cc99 	.word	0x0800cc99
 800b6e8:	0801eea4 	.word	0x0801eea4

0800b6ec <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b08c      	sub	sp, #48	; 0x30
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d109      	bne.n	800b712 <netconn_close_shutdown+0x26>
 800b6fe:	4b0f      	ldr	r3, [pc, #60]	; (800b73c <netconn_close_shutdown+0x50>)
 800b700:	f240 4247 	movw	r2, #1095	; 0x447
 800b704:	490e      	ldr	r1, [pc, #56]	; (800b740 <netconn_close_shutdown+0x54>)
 800b706:	480f      	ldr	r0, [pc, #60]	; (800b744 <netconn_close_shutdown+0x58>)
 800b708:	f012 f832 	bl	801d770 <iprintf>
 800b70c:	f06f 030f 	mvn.w	r3, #15
 800b710:	e010      	b.n	800b734 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800b716:	78fb      	ldrb	r3, [r7, #3]
 800b718:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b71a:	2329      	movs	r3, #41	; 0x29
 800b71c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800b71e:	f107 030c 	add.w	r3, r7, #12
 800b722:	4619      	mov	r1, r3
 800b724:	4808      	ldr	r0, [pc, #32]	; (800b748 <netconn_close_shutdown+0x5c>)
 800b726:	f7ff fc09 	bl	800af3c <netconn_apimsg>
 800b72a:	4603      	mov	r3, r0
 800b72c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b730:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b734:	4618      	mov	r0, r3
 800b736:	3730      	adds	r7, #48	; 0x30
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	0801eb8c 	.word	0x0801eb8c
 800b740:	0801eec8 	.word	0x0801eec8
 800b744:	0801ebe4 	.word	0x0801ebe4
 800b748:	0800cdb1 	.word	0x0800cdb1

0800b74c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800b754:	2103      	movs	r1, #3
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f7ff ffc8 	bl	800b6ec <netconn_close_shutdown>
 800b75c:	4603      	mov	r3, r0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b084      	sub	sp, #16
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d101      	bne.n	800b778 <netconn_err+0x12>
    return ERR_OK;
 800b774:	2300      	movs	r3, #0
 800b776:	e00d      	b.n	800b794 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800b778:	f00c fef2 	bl	8018560 <sys_arch_protect>
 800b77c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	7a1b      	ldrb	r3, [r3, #8]
 800b782:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f00c fef6 	bl	801857c <sys_arch_unprotect>
  return err;
 800b790:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800b7a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7aa:	f113 0f0d 	cmn.w	r3, #13
 800b7ae:	d009      	beq.n	800b7c4 <lwip_netconn_err_to_msg+0x28>
 800b7b0:	f113 0f0d 	cmn.w	r3, #13
 800b7b4:	dc0c      	bgt.n	800b7d0 <lwip_netconn_err_to_msg+0x34>
 800b7b6:	f113 0f0f 	cmn.w	r3, #15
 800b7ba:	d007      	beq.n	800b7cc <lwip_netconn_err_to_msg+0x30>
 800b7bc:	f113 0f0e 	cmn.w	r3, #14
 800b7c0:	d002      	beq.n	800b7c8 <lwip_netconn_err_to_msg+0x2c>
 800b7c2:	e005      	b.n	800b7d0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800b7c4:	4b0a      	ldr	r3, [pc, #40]	; (800b7f0 <lwip_netconn_err_to_msg+0x54>)
 800b7c6:	e00e      	b.n	800b7e6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800b7c8:	4b0a      	ldr	r3, [pc, #40]	; (800b7f4 <lwip_netconn_err_to_msg+0x58>)
 800b7ca:	e00c      	b.n	800b7e6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800b7cc:	4b0a      	ldr	r3, [pc, #40]	; (800b7f8 <lwip_netconn_err_to_msg+0x5c>)
 800b7ce:	e00a      	b.n	800b7e6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800b7d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d005      	beq.n	800b7e4 <lwip_netconn_err_to_msg+0x48>
 800b7d8:	4b08      	ldr	r3, [pc, #32]	; (800b7fc <lwip_netconn_err_to_msg+0x60>)
 800b7da:	227d      	movs	r2, #125	; 0x7d
 800b7dc:	4908      	ldr	r1, [pc, #32]	; (800b800 <lwip_netconn_err_to_msg+0x64>)
 800b7de:	4809      	ldr	r0, [pc, #36]	; (800b804 <lwip_netconn_err_to_msg+0x68>)
 800b7e0:	f011 ffc6 	bl	801d770 <iprintf>
      return NULL;
 800b7e4:	2300      	movs	r3, #0
  }
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3708      	adds	r7, #8
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	08022284 	.word	0x08022284
 800b7f4:	08022285 	.word	0x08022285
 800b7f8:	08022286 	.word	0x08022286
 800b7fc:	0801eee4 	.word	0x0801eee4
 800b800:	0801ef18 	.word	0x0801ef18
 800b804:	0801ef28 	.word	0x0801ef28

0800b808 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d105      	bne.n	800b824 <lwip_netconn_is_err_msg+0x1c>
 800b818:	4b12      	ldr	r3, [pc, #72]	; (800b864 <lwip_netconn_is_err_msg+0x5c>)
 800b81a:	2285      	movs	r2, #133	; 0x85
 800b81c:	4912      	ldr	r1, [pc, #72]	; (800b868 <lwip_netconn_is_err_msg+0x60>)
 800b81e:	4813      	ldr	r0, [pc, #76]	; (800b86c <lwip_netconn_is_err_msg+0x64>)
 800b820:	f011 ffa6 	bl	801d770 <iprintf>

  if (msg == &netconn_aborted) {
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	4a12      	ldr	r2, [pc, #72]	; (800b870 <lwip_netconn_is_err_msg+0x68>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d104      	bne.n	800b836 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	22f3      	movs	r2, #243	; 0xf3
 800b830:	701a      	strb	r2, [r3, #0]
    return 1;
 800b832:	2301      	movs	r3, #1
 800b834:	e012      	b.n	800b85c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4a0e      	ldr	r2, [pc, #56]	; (800b874 <lwip_netconn_is_err_msg+0x6c>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d104      	bne.n	800b848 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	22f2      	movs	r2, #242	; 0xf2
 800b842:	701a      	strb	r2, [r3, #0]
    return 1;
 800b844:	2301      	movs	r3, #1
 800b846:	e009      	b.n	800b85c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4a0b      	ldr	r2, [pc, #44]	; (800b878 <lwip_netconn_is_err_msg+0x70>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d104      	bne.n	800b85a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	22f1      	movs	r2, #241	; 0xf1
 800b854:	701a      	strb	r2, [r3, #0]
    return 1;
 800b856:	2301      	movs	r3, #1
 800b858:	e000      	b.n	800b85c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3708      	adds	r7, #8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	0801eee4 	.word	0x0801eee4
 800b868:	0801ef50 	.word	0x0801ef50
 800b86c:	0801ef28 	.word	0x0801ef28
 800b870:	08022284 	.word	0x08022284
 800b874:	08022285 	.word	0x08022285
 800b878:	08022286 	.word	0x08022286

0800b87c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b088      	sub	sp, #32
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
 800b888:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d105      	bne.n	800b89c <recv_udp+0x20>
 800b890:	4b34      	ldr	r3, [pc, #208]	; (800b964 <recv_udp+0xe8>)
 800b892:	22e5      	movs	r2, #229	; 0xe5
 800b894:	4934      	ldr	r1, [pc, #208]	; (800b968 <recv_udp+0xec>)
 800b896:	4835      	ldr	r0, [pc, #212]	; (800b96c <recv_udp+0xf0>)
 800b898:	f011 ff6a 	bl	801d770 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d105      	bne.n	800b8ae <recv_udp+0x32>
 800b8a2:	4b30      	ldr	r3, [pc, #192]	; (800b964 <recv_udp+0xe8>)
 800b8a4:	22e6      	movs	r2, #230	; 0xe6
 800b8a6:	4932      	ldr	r1, [pc, #200]	; (800b970 <recv_udp+0xf4>)
 800b8a8:	4830      	ldr	r0, [pc, #192]	; (800b96c <recv_udp+0xf0>)
 800b8aa:	f011 ff61 	bl	801d770 <iprintf>
  conn = (struct netconn *)arg;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d103      	bne.n	800b8c0 <recv_udp+0x44>
    pbuf_free(p);
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f003 f8df 	bl	800ea7c <pbuf_free>
    return;
 800b8be:	e04d      	b.n	800b95c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	68ba      	ldr	r2, [r7, #8]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d005      	beq.n	800b8d6 <recv_udp+0x5a>
 800b8ca:	4b26      	ldr	r3, [pc, #152]	; (800b964 <recv_udp+0xe8>)
 800b8cc:	22ee      	movs	r2, #238	; 0xee
 800b8ce:	4929      	ldr	r1, [pc, #164]	; (800b974 <recv_udp+0xf8>)
 800b8d0:	4826      	ldr	r0, [pc, #152]	; (800b96c <recv_udp+0xf0>)
 800b8d2:	f011 ff4d 	bl	801d770 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	3310      	adds	r3, #16
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f00c fd25 	bl	801832a <sys_mbox_valid>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d103      	bne.n	800b8ee <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f003 f8c8 	bl	800ea7c <pbuf_free>
    return;
 800b8ec:	e036      	b.n	800b95c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b8ee:	2006      	movs	r0, #6
 800b8f0:	f002 f9aa 	bl	800dc48 <memp_malloc>
 800b8f4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d103      	bne.n	800b904 <recv_udp+0x88>
    pbuf_free(p);
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f003 f8bd 	bl	800ea7c <pbuf_free>
    return;
 800b902:	e02b      	b.n	800b95c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d002      	beq.n	800b91c <recv_udp+0xa0>
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	e000      	b.n	800b91e <recv_udp+0xa2>
 800b91c:	2300      	movs	r3, #0
 800b91e:	69ba      	ldr	r2, [r7, #24]
 800b920:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800b922:	69bb      	ldr	r3, [r7, #24]
 800b924:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b926:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	891b      	ldrh	r3, [r3, #8]
 800b92c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	3310      	adds	r3, #16
 800b932:	69b9      	ldr	r1, [r7, #24]
 800b934:	4618      	mov	r0, r3
 800b936:	f00c fc83 	bl	8018240 <sys_mbox_trypost>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d003      	beq.n	800b948 <recv_udp+0xcc>
    netbuf_delete(buf);
 800b940:	69b8      	ldr	r0, [r7, #24]
 800b942:	f001 fac1 	bl	800cec8 <netbuf_delete>
    return;
 800b946:	e009      	b.n	800b95c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b948:	69fb      	ldr	r3, [r7, #28]
 800b94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d005      	beq.n	800b95c <recv_udp+0xe0>
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b954:	8afa      	ldrh	r2, [r7, #22]
 800b956:	2100      	movs	r1, #0
 800b958:	69f8      	ldr	r0, [r7, #28]
 800b95a:	4798      	blx	r3
  }
}
 800b95c:	3720      	adds	r7, #32
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	0801eee4 	.word	0x0801eee4
 800b968:	0801ef5c 	.word	0x0801ef5c
 800b96c:	0801ef28 	.word	0x0801ef28
 800b970:	0801ef80 	.word	0x0801ef80
 800b974:	0801efa0 	.word	0x0801efa0

0800b978 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b088      	sub	sp, #32
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	607a      	str	r2, [r7, #4]
 800b984:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d106      	bne.n	800b99a <recv_tcp+0x22>
 800b98c:	4b36      	ldr	r3, [pc, #216]	; (800ba68 <recv_tcp+0xf0>)
 800b98e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b992:	4936      	ldr	r1, [pc, #216]	; (800ba6c <recv_tcp+0xf4>)
 800b994:	4836      	ldr	r0, [pc, #216]	; (800ba70 <recv_tcp+0xf8>)
 800b996:	f011 feeb 	bl	801d770 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d106      	bne.n	800b9ae <recv_tcp+0x36>
 800b9a0:	4b31      	ldr	r3, [pc, #196]	; (800ba68 <recv_tcp+0xf0>)
 800b9a2:	f240 122d 	movw	r2, #301	; 0x12d
 800b9a6:	4933      	ldr	r1, [pc, #204]	; (800ba74 <recv_tcp+0xfc>)
 800b9a8:	4831      	ldr	r0, [pc, #196]	; (800ba70 <recv_tcp+0xf8>)
 800b9aa:	f011 fee1 	bl	801d770 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800b9ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d006      	beq.n	800b9c4 <recv_tcp+0x4c>
 800b9b6:	4b2c      	ldr	r3, [pc, #176]	; (800ba68 <recv_tcp+0xf0>)
 800b9b8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800b9bc:	492e      	ldr	r1, [pc, #184]	; (800ba78 <recv_tcp+0x100>)
 800b9be:	482c      	ldr	r0, [pc, #176]	; (800ba70 <recv_tcp+0xf8>)
 800b9c0:	f011 fed6 	bl	801d770 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d102      	bne.n	800b9d4 <recv_tcp+0x5c>
    return ERR_VAL;
 800b9ce:	f06f 0305 	mvn.w	r3, #5
 800b9d2:	e045      	b.n	800ba60 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	68ba      	ldr	r2, [r7, #8]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d006      	beq.n	800b9ec <recv_tcp+0x74>
 800b9de:	4b22      	ldr	r3, [pc, #136]	; (800ba68 <recv_tcp+0xf0>)
 800b9e0:	f240 1235 	movw	r2, #309	; 0x135
 800b9e4:	4925      	ldr	r1, [pc, #148]	; (800ba7c <recv_tcp+0x104>)
 800b9e6:	4822      	ldr	r0, [pc, #136]	; (800ba70 <recv_tcp+0xf8>)
 800b9e8:	f011 fec2 	bl	801d770 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	3310      	adds	r3, #16
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f00c fc9a 	bl	801832a <sys_mbox_valid>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10d      	bne.n	800ba18 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d008      	beq.n	800ba14 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	891b      	ldrh	r3, [r3, #8]
 800ba06:	4619      	mov	r1, r3
 800ba08:	68b8      	ldr	r0, [r7, #8]
 800ba0a:	f003 fe8d 	bl	800f728 <tcp_recved>
      pbuf_free(p);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f003 f834 	bl	800ea7c <pbuf_free>
    }
    return ERR_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	e023      	b.n	800ba60 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d005      	beq.n	800ba2a <recv_tcp+0xb2>
    msg = p;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	891b      	ldrh	r3, [r3, #8]
 800ba26:	83fb      	strh	r3, [r7, #30]
 800ba28:	e003      	b.n	800ba32 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ba2a:	4b15      	ldr	r3, [pc, #84]	; (800ba80 <recv_tcp+0x108>)
 800ba2c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	3310      	adds	r3, #16
 800ba36:	69b9      	ldr	r1, [r7, #24]
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f00c fc01 	bl	8018240 <sys_mbox_trypost>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d002      	beq.n	800ba4a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800ba44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba48:	e00a      	b.n	800ba60 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d005      	beq.n	800ba5e <recv_tcp+0xe6>
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba56:	8bfa      	ldrh	r2, [r7, #30]
 800ba58:	2100      	movs	r1, #0
 800ba5a:	6978      	ldr	r0, [r7, #20]
 800ba5c:	4798      	blx	r3
  }

  return ERR_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3720      	adds	r7, #32
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	0801eee4 	.word	0x0801eee4
 800ba6c:	0801efc0 	.word	0x0801efc0
 800ba70:	0801ef28 	.word	0x0801ef28
 800ba74:	0801efe4 	.word	0x0801efe4
 800ba78:	0801f004 	.word	0x0801f004
 800ba7c:	0801f01c 	.word	0x0801f01c
 800ba80:	08022286 	.word	0x08022286

0800ba84 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d106      	bne.n	800baa6 <poll_tcp+0x22>
 800ba98:	4b29      	ldr	r3, [pc, #164]	; (800bb40 <poll_tcp+0xbc>)
 800ba9a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800ba9e:	4929      	ldr	r1, [pc, #164]	; (800bb44 <poll_tcp+0xc0>)
 800baa0:	4829      	ldr	r0, [pc, #164]	; (800bb48 <poll_tcp+0xc4>)
 800baa2:	f011 fe65 	bl	801d770 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	785b      	ldrb	r3, [r3, #1]
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d104      	bne.n	800bab8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800baae:	2101      	movs	r1, #1
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f000 ff25 	bl	800c900 <lwip_netconn_do_writemore>
 800bab6:	e016      	b.n	800bae6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	785b      	ldrb	r3, [r3, #1]
 800babc:	2b04      	cmp	r3, #4
 800babe:	d112      	bne.n	800bae6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6a1b      	ldr	r3, [r3, #32]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d00a      	beq.n	800bade <poll_tcp+0x5a>
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	6a1b      	ldr	r3, [r3, #32]
 800bacc:	7a5b      	ldrb	r3, [r3, #9]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d005      	beq.n	800bade <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	6a1b      	ldr	r3, [r3, #32]
 800bad6:	7a5a      	ldrb	r2, [r3, #9]
 800bad8:	3a01      	subs	r2, #1
 800bada:	b2d2      	uxtb	r2, r2
 800badc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800bade:	2101      	movs	r1, #1
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	f000 fb3b 	bl	800c15c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	7f1b      	ldrb	r3, [r3, #28]
 800baea:	f003 0310 	and.w	r3, r3, #16
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d021      	beq.n	800bb36 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d01d      	beq.n	800bb36 <poll_tcp+0xb2>
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bb02:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800bb06:	d316      	bcc.n	800bb36 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bb10:	2b04      	cmp	r3, #4
 800bb12:	d810      	bhi.n	800bb36 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	7f1b      	ldrb	r3, [r3, #28]
 800bb18:	f023 0310 	bic.w	r3, r3, #16
 800bb1c:	b2da      	uxtb	r2, r3
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d005      	beq.n	800bb36 <poll_tcp+0xb2>
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb2e:	2200      	movs	r2, #0
 800bb30:	2102      	movs	r1, #2
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800bb36:	2300      	movs	r3, #0
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3710      	adds	r7, #16
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	0801eee4 	.word	0x0801eee4
 800bb44:	0801f03c 	.word	0x0801f03c
 800bb48:	0801ef28 	.word	0x0801ef28

0800bb4c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b086      	sub	sp, #24
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	4613      	mov	r3, r2
 800bb58:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d106      	bne.n	800bb72 <sent_tcp+0x26>
 800bb64:	4b20      	ldr	r3, [pc, #128]	; (800bbe8 <sent_tcp+0x9c>)
 800bb66:	f240 1293 	movw	r2, #403	; 0x193
 800bb6a:	4920      	ldr	r1, [pc, #128]	; (800bbec <sent_tcp+0xa0>)
 800bb6c:	4820      	ldr	r0, [pc, #128]	; (800bbf0 <sent_tcp+0xa4>)
 800bb6e:	f011 fdff 	bl	801d770 <iprintf>

  if (conn) {
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d032      	beq.n	800bbde <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	785b      	ldrb	r3, [r3, #1]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d104      	bne.n	800bb8a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800bb80:	2101      	movs	r1, #1
 800bb82:	6978      	ldr	r0, [r7, #20]
 800bb84:	f000 febc 	bl	800c900 <lwip_netconn_do_writemore>
 800bb88:	e007      	b.n	800bb9a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	785b      	ldrb	r3, [r3, #1]
 800bb8e:	2b04      	cmp	r3, #4
 800bb90:	d103      	bne.n	800bb9a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800bb92:	2101      	movs	r1, #1
 800bb94:	6978      	ldr	r0, [r7, #20]
 800bb96:	f000 fae1 	bl	800c15c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d01d      	beq.n	800bbde <sent_tcp+0x92>
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bbaa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800bbae:	d316      	bcc.n	800bbde <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bbb8:	2b04      	cmp	r3, #4
 800bbba:	d810      	bhi.n	800bbde <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	7f1b      	ldrb	r3, [r3, #28]
 800bbc0:	f023 0310 	bic.w	r3, r3, #16
 800bbc4:	b2da      	uxtb	r2, r3
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d005      	beq.n	800bbde <sent_tcp+0x92>
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd6:	88fa      	ldrh	r2, [r7, #6]
 800bbd8:	2102      	movs	r1, #2
 800bbda:	6978      	ldr	r0, [r7, #20]
 800bbdc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800bbde:	2300      	movs	r3, #0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3718      	adds	r7, #24
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	0801eee4 	.word	0x0801eee4
 800bbec:	0801f03c 	.word	0x0801f03c
 800bbf0:	0801ef28 	.word	0x0801ef28

0800bbf4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b088      	sub	sp, #32
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d106      	bne.n	800bc18 <err_tcp+0x24>
 800bc0a:	4b5f      	ldr	r3, [pc, #380]	; (800bd88 <err_tcp+0x194>)
 800bc0c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800bc10:	495e      	ldr	r1, [pc, #376]	; (800bd8c <err_tcp+0x198>)
 800bc12:	485f      	ldr	r0, [pc, #380]	; (800bd90 <err_tcp+0x19c>)
 800bc14:	f011 fdac 	bl	801d770 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800bc18:	f00c fca2 	bl	8018560 <sys_arch_protect>
 800bc1c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800bc1e:	69fb      	ldr	r3, [r7, #28]
 800bc20:	2200      	movs	r2, #0
 800bc22:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	78fa      	ldrb	r2, [r7, #3]
 800bc28:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800bc2a:	69fb      	ldr	r3, [r7, #28]
 800bc2c:	7f1b      	ldrb	r3, [r3, #28]
 800bc2e:	f043 0301 	orr.w	r3, r3, #1
 800bc32:	b2da      	uxtb	r2, r3
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	785b      	ldrb	r3, [r3, #1]
 800bc3c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	2200      	movs	r2, #0
 800bc42:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800bc44:	69b8      	ldr	r0, [r7, #24]
 800bc46:	f00c fc99 	bl	801857c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800bc4a:	69fb      	ldr	r3, [r7, #28]
 800bc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d005      	beq.n	800bc5e <err_tcp+0x6a>
 800bc52:	69fb      	ldr	r3, [r7, #28]
 800bc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc56:	2200      	movs	r2, #0
 800bc58:	2104      	movs	r1, #4
 800bc5a:	69f8      	ldr	r0, [r7, #28]
 800bc5c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d005      	beq.n	800bc72 <err_tcp+0x7e>
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	69f8      	ldr	r0, [r7, #28]
 800bc70:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d005      	beq.n	800bc86 <err_tcp+0x92>
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7e:	2200      	movs	r2, #0
 800bc80:	2102      	movs	r1, #2
 800bc82:	69f8      	ldr	r0, [r7, #28]
 800bc84:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800bc86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7ff fd86 	bl	800b79c <lwip_netconn_err_to_msg>
 800bc90:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800bc92:	69fb      	ldr	r3, [r7, #28]
 800bc94:	3310      	adds	r3, #16
 800bc96:	4618      	mov	r0, r3
 800bc98:	f00c fb47 	bl	801832a <sys_mbox_valid>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d005      	beq.n	800bcae <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	3310      	adds	r3, #16
 800bca6:	6939      	ldr	r1, [r7, #16]
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f00c fac9 	bl	8018240 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	3314      	adds	r3, #20
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f00c fb39 	bl	801832a <sys_mbox_valid>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d005      	beq.n	800bcca <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	3314      	adds	r3, #20
 800bcc2:	6939      	ldr	r1, [r7, #16]
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f00c fabb 	bl	8018240 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800bcca:	7dfb      	ldrb	r3, [r7, #23]
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d005      	beq.n	800bcdc <err_tcp+0xe8>
 800bcd0:	7dfb      	ldrb	r3, [r7, #23]
 800bcd2:	2b04      	cmp	r3, #4
 800bcd4:	d002      	beq.n	800bcdc <err_tcp+0xe8>
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
 800bcd8:	2b03      	cmp	r3, #3
 800bcda:	d143      	bne.n	800bd64 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800bcdc:	69fb      	ldr	r3, [r7, #28]
 800bcde:	7f1b      	ldrb	r3, [r3, #28]
 800bce0:	f003 0304 	and.w	r3, r3, #4
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	bf14      	ite	ne
 800bce8:	2301      	movne	r3, #1
 800bcea:	2300      	moveq	r3, #0
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	7f1b      	ldrb	r3, [r3, #28]
 800bcf4:	f023 0304 	bic.w	r3, r3, #4
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d13b      	bne.n	800bd7c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	6a1b      	ldr	r3, [r3, #32]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d106      	bne.n	800bd1a <err_tcp+0x126>
 800bd0c:	4b1e      	ldr	r3, [pc, #120]	; (800bd88 <err_tcp+0x194>)
 800bd0e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bd12:	4920      	ldr	r1, [pc, #128]	; (800bd94 <err_tcp+0x1a0>)
 800bd14:	481e      	ldr	r0, [pc, #120]	; (800bd90 <err_tcp+0x19c>)
 800bd16:	f011 fd2b 	bl	801d770 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800bd1a:	7dfb      	ldrb	r3, [r7, #23]
 800bd1c:	2b04      	cmp	r3, #4
 800bd1e:	d104      	bne.n	800bd2a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	6a1b      	ldr	r3, [r3, #32]
 800bd24:	2200      	movs	r2, #0
 800bd26:	711a      	strb	r2, [r3, #4]
 800bd28:	e003      	b.n	800bd32 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800bd2a:	69fb      	ldr	r3, [r7, #28]
 800bd2c:	6a1b      	ldr	r3, [r3, #32]
 800bd2e:	78fa      	ldrb	r2, [r7, #3]
 800bd30:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	6a1b      	ldr	r3, [r3, #32]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	330c      	adds	r3, #12
 800bd3a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800bd3c:	68b8      	ldr	r0, [r7, #8]
 800bd3e:	f00c fb85 	bl	801844c <sys_sem_valid>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d106      	bne.n	800bd56 <err_tcp+0x162>
 800bd48:	4b0f      	ldr	r3, [pc, #60]	; (800bd88 <err_tcp+0x194>)
 800bd4a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800bd4e:	4912      	ldr	r1, [pc, #72]	; (800bd98 <err_tcp+0x1a4>)
 800bd50:	480f      	ldr	r0, [pc, #60]	; (800bd90 <err_tcp+0x19c>)
 800bd52:	f011 fd0d 	bl	801d770 <iprintf>
      conn->current_msg = NULL;
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800bd5c:	68b8      	ldr	r0, [r7, #8]
 800bd5e:	f00c fb5b 	bl	8018418 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800bd62:	e00b      	b.n	800bd7c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	6a1b      	ldr	r3, [r3, #32]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d008      	beq.n	800bd7e <err_tcp+0x18a>
 800bd6c:	4b06      	ldr	r3, [pc, #24]	; (800bd88 <err_tcp+0x194>)
 800bd6e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800bd72:	490a      	ldr	r1, [pc, #40]	; (800bd9c <err_tcp+0x1a8>)
 800bd74:	4806      	ldr	r0, [pc, #24]	; (800bd90 <err_tcp+0x19c>)
 800bd76:	f011 fcfb 	bl	801d770 <iprintf>
  }
}
 800bd7a:	e000      	b.n	800bd7e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800bd7c:	bf00      	nop
}
 800bd7e:	bf00      	nop
 800bd80:	3720      	adds	r7, #32
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	0801eee4 	.word	0x0801eee4
 800bd8c:	0801f03c 	.word	0x0801f03c
 800bd90:	0801ef28 	.word	0x0801ef28
 800bd94:	0801f04c 	.word	0x0801f04c
 800bd98:	0801f068 	.word	0x0801f068
 800bd9c:	0801f084 	.word	0x0801f084

0800bda0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800bdae:	6879      	ldr	r1, [r7, #4]
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f004 fc97 	bl	80106e4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800bdb6:	490a      	ldr	r1, [pc, #40]	; (800bde0 <setup_tcp+0x40>)
 800bdb8:	68f8      	ldr	r0, [r7, #12]
 800bdba:	f004 fca5 	bl	8010708 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800bdbe:	4909      	ldr	r1, [pc, #36]	; (800bde4 <setup_tcp+0x44>)
 800bdc0:	68f8      	ldr	r0, [r7, #12]
 800bdc2:	f004 fcc3 	bl	801074c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800bdc6:	2202      	movs	r2, #2
 800bdc8:	4907      	ldr	r1, [pc, #28]	; (800bde8 <setup_tcp+0x48>)
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f004 fd1a 	bl	8010804 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800bdd0:	4906      	ldr	r1, [pc, #24]	; (800bdec <setup_tcp+0x4c>)
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f004 fcdc 	bl	8010790 <tcp_err>
}
 800bdd8:	bf00      	nop
 800bdda:	3710      	adds	r7, #16
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	0800b979 	.word	0x0800b979
 800bde4:	0800bb4d 	.word	0x0800bb4d
 800bde8:	0800ba85 	.word	0x0800ba85
 800bdec:	0800bbf5 	.word	0x0800bbf5

0800bdf0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800bdf0:	b590      	push	{r4, r7, lr}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d006      	beq.n	800be14 <pcb_new+0x24>
 800be06:	4b2b      	ldr	r3, [pc, #172]	; (800beb4 <pcb_new+0xc4>)
 800be08:	f240 2265 	movw	r2, #613	; 0x265
 800be0c:	492a      	ldr	r1, [pc, #168]	; (800beb8 <pcb_new+0xc8>)
 800be0e:	482b      	ldr	r0, [pc, #172]	; (800bebc <pcb_new+0xcc>)
 800be10:	f011 fcae 	bl	801d770 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be1e:	2b10      	cmp	r3, #16
 800be20:	d022      	beq.n	800be68 <pcb_new+0x78>
 800be22:	2b20      	cmp	r3, #32
 800be24:	d133      	bne.n	800be8e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681c      	ldr	r4, [r3, #0]
 800be2a:	7bfb      	ldrb	r3, [r7, #15]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f009 fda6 	bl	801597e <udp_new_ip_type>
 800be32:	4603      	mov	r3, r0
 800be34:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d02a      	beq.n	800be96 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	2b22      	cmp	r3, #34	; 0x22
 800be48:	d104      	bne.n	800be54 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	2201      	movs	r2, #1
 800be52:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	6858      	ldr	r0, [r3, #4]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	461a      	mov	r2, r3
 800be60:	4917      	ldr	r1, [pc, #92]	; (800bec0 <pcb_new+0xd0>)
 800be62:	f009 fd13 	bl	801588c <udp_recv>
      }
      break;
 800be66:	e016      	b.n	800be96 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681c      	ldr	r4, [r3, #0]
 800be6c:	7bfb      	ldrb	r3, [r7, #15]
 800be6e:	4618      	mov	r0, r3
 800be70:	f004 fc2a 	bl	80106c8 <tcp_new_ip_type>
 800be74:	4603      	mov	r3, r0
 800be76:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00b      	beq.n	800be9a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4618      	mov	r0, r3
 800be88:	f7ff ff8a 	bl	800bda0 <setup_tcp>
      }
      break;
 800be8c:	e005      	b.n	800be9a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	22fa      	movs	r2, #250	; 0xfa
 800be92:	711a      	strb	r2, [r3, #4]
      return;
 800be94:	e00a      	b.n	800beac <pcb_new+0xbc>
      break;
 800be96:	bf00      	nop
 800be98:	e000      	b.n	800be9c <pcb_new+0xac>
      break;
 800be9a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d102      	bne.n	800beac <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	22ff      	movs	r2, #255	; 0xff
 800beaa:	711a      	strb	r2, [r3, #4]
  }
}
 800beac:	3714      	adds	r7, #20
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd90      	pop	{r4, r7, pc}
 800beb2:	bf00      	nop
 800beb4:	0801eee4 	.word	0x0801eee4
 800beb8:	0801f0c8 	.word	0x0801f0c8
 800bebc:	0801ef28 	.word	0x0801ef28
 800bec0:	0800b87d 	.word	0x0800b87d

0800bec4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2200      	movs	r2, #0
 800bed4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d102      	bne.n	800bee6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800bee0:	68f8      	ldr	r0, [r7, #12]
 800bee2:	f7ff ff85 	bl	800bdf0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800bee6:	bf00      	nop
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
	...

0800bef0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b086      	sub	sp, #24
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	4603      	mov	r3, r0
 800bef8:	6039      	str	r1, [r7, #0]
 800befa:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800befc:	2300      	movs	r3, #0
 800befe:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800bf00:	2007      	movs	r0, #7
 800bf02:	f001 fea1 	bl	800dc48 <memp_malloc>
 800bf06:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d101      	bne.n	800bf12 <netconn_alloc+0x22>
    return NULL;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	e052      	b.n	800bfb8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2200      	movs	r2, #0
 800bf16:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	79fa      	ldrb	r2, [r7, #7]
 800bf1c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2200      	movs	r2, #0
 800bf22:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800bf24:	79fb      	ldrb	r3, [r7, #7]
 800bf26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf2a:	2b10      	cmp	r3, #16
 800bf2c:	d004      	beq.n	800bf38 <netconn_alloc+0x48>
 800bf2e:	2b20      	cmp	r3, #32
 800bf30:	d105      	bne.n	800bf3e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800bf32:	2306      	movs	r3, #6
 800bf34:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800bf36:	e00a      	b.n	800bf4e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800bf38:	2306      	movs	r3, #6
 800bf3a:	617b      	str	r3, [r7, #20]
      break;
 800bf3c:	e007      	b.n	800bf4e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800bf3e:	4b20      	ldr	r3, [pc, #128]	; (800bfc0 <netconn_alloc+0xd0>)
 800bf40:	f240 22e5 	movw	r2, #741	; 0x2e5
 800bf44:	491f      	ldr	r1, [pc, #124]	; (800bfc4 <netconn_alloc+0xd4>)
 800bf46:	4820      	ldr	r0, [pc, #128]	; (800bfc8 <netconn_alloc+0xd8>)
 800bf48:	f011 fc12 	bl	801d770 <iprintf>
      goto free_and_return;
 800bf4c:	e02f      	b.n	800bfae <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	3310      	adds	r3, #16
 800bf52:	6979      	ldr	r1, [r7, #20]
 800bf54:	4618      	mov	r0, r3
 800bf56:	f00c f93f 	bl	80181d8 <sys_mbox_new>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d125      	bne.n	800bfac <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	330c      	adds	r3, #12
 800bf64:	2100      	movs	r1, #0
 800bf66:	4618      	mov	r0, r3
 800bf68:	f00c f9fd 	bl	8018366 <sys_sem_new>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d005      	beq.n	800bf7e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	3310      	adds	r3, #16
 800bf76:	4618      	mov	r0, r3
 800bf78:	f00c f950 	bl	801821c <sys_mbox_free>
    goto free_and_return;
 800bf7c:	e017      	b.n	800bfae <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	3314      	adds	r3, #20
 800bf82:	4618      	mov	r0, r3
 800bf84:	f00c f9e2 	bl	801834c <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf94:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	683a      	ldr	r2, [r7, #0]
 800bf9a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	7cfa      	ldrb	r2, [r7, #19]
 800bfa6:	771a      	strb	r2, [r3, #28]
  return conn;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	e005      	b.n	800bfb8 <netconn_alloc+0xc8>
    goto free_and_return;
 800bfac:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800bfae:	68f9      	ldr	r1, [r7, #12]
 800bfb0:	2007      	movs	r0, #7
 800bfb2:	f001 febf 	bl	800dd34 <memp_free>
  return NULL;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3718      	adds	r7, #24
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	0801eee4 	.word	0x0801eee4
 800bfc4:	0801f0e8 	.word	0x0801f0e8
 800bfc8:	0801ef28 	.word	0x0801ef28

0800bfcc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d006      	beq.n	800bfea <netconn_free+0x1e>
 800bfdc:	4b1b      	ldr	r3, [pc, #108]	; (800c04c <netconn_free+0x80>)
 800bfde:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bfe2:	491b      	ldr	r1, [pc, #108]	; (800c050 <netconn_free+0x84>)
 800bfe4:	481b      	ldr	r0, [pc, #108]	; (800c054 <netconn_free+0x88>)
 800bfe6:	f011 fbc3 	bl	801d770 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	3310      	adds	r3, #16
 800bfee:	4618      	mov	r0, r3
 800bff0:	f00c f99b 	bl	801832a <sys_mbox_valid>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d006      	beq.n	800c008 <netconn_free+0x3c>
 800bffa:	4b14      	ldr	r3, [pc, #80]	; (800c04c <netconn_free+0x80>)
 800bffc:	f240 3223 	movw	r2, #803	; 0x323
 800c000:	4915      	ldr	r1, [pc, #84]	; (800c058 <netconn_free+0x8c>)
 800c002:	4814      	ldr	r0, [pc, #80]	; (800c054 <netconn_free+0x88>)
 800c004:	f011 fbb4 	bl	801d770 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	3314      	adds	r3, #20
 800c00c:	4618      	mov	r0, r3
 800c00e:	f00c f98c 	bl	801832a <sys_mbox_valid>
 800c012:	4603      	mov	r3, r0
 800c014:	2b00      	cmp	r3, #0
 800c016:	d006      	beq.n	800c026 <netconn_free+0x5a>
 800c018:	4b0c      	ldr	r3, [pc, #48]	; (800c04c <netconn_free+0x80>)
 800c01a:	f240 3226 	movw	r2, #806	; 0x326
 800c01e:	490f      	ldr	r1, [pc, #60]	; (800c05c <netconn_free+0x90>)
 800c020:	480c      	ldr	r0, [pc, #48]	; (800c054 <netconn_free+0x88>)
 800c022:	f011 fba5 	bl	801d770 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	330c      	adds	r3, #12
 800c02a:	4618      	mov	r0, r3
 800c02c:	f00c fa01 	bl	8018432 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	330c      	adds	r3, #12
 800c034:	4618      	mov	r0, r3
 800c036:	f00c fa1a 	bl	801846e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800c03a:	6879      	ldr	r1, [r7, #4]
 800c03c:	2007      	movs	r0, #7
 800c03e:	f001 fe79 	bl	800dd34 <memp_free>
}
 800c042:	bf00      	nop
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	0801eee4 	.word	0x0801eee4
 800c050:	0801f110 	.word	0x0801f110
 800c054:	0801ef28 	.word	0x0801ef28
 800c058:	0801f140 	.word	0x0801f140
 800c05c:	0801f17c 	.word	0x0801f17c

0800c060 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	3310      	adds	r3, #16
 800c06c:	4618      	mov	r0, r3
 800c06e:	f00c f95c 	bl	801832a <sys_mbox_valid>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d02f      	beq.n	800c0d8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800c078:	e018      	b.n	800c0ac <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c082:	2b10      	cmp	r3, #16
 800c084:	d10e      	bne.n	800c0a4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	f107 020f 	add.w	r2, r7, #15
 800c08c:	4611      	mov	r1, r2
 800c08e:	4618      	mov	r0, r3
 800c090:	f7ff fbba 	bl	800b808 <lwip_netconn_is_err_msg>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	d108      	bne.n	800c0ac <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	4618      	mov	r0, r3
 800c09e:	f002 fced 	bl	800ea7c <pbuf_free>
 800c0a2:	e003      	b.n	800c0ac <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f000 ff0e 	bl	800cec8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	3310      	adds	r3, #16
 800c0b0:	f107 0210 	add.w	r2, r7, #16
 800c0b4:	4611      	mov	r1, r2
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f00c f91b 	bl	80182f2 <sys_arch_mbox_tryfetch>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0c2:	d1da      	bne.n	800c07a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	3310      	adds	r3, #16
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f00c f8a7 	bl	801821c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	3310      	adds	r3, #16
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f00c f93a 	bl	801834c <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	3314      	adds	r3, #20
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f00c f924 	bl	801832a <sys_mbox_valid>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d034      	beq.n	800c152 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c0e8:	e01d      	b.n	800c126 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	f107 020e 	add.w	r2, r7, #14
 800c0f0:	4611      	mov	r1, r2
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7ff fb88 	bl	800b808 <lwip_netconn_is_err_msg>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d113      	bne.n	800c126 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800c102:	6978      	ldr	r0, [r7, #20]
 800c104:	f7ff ffac 	bl	800c060 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d007      	beq.n	800c120 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	4618      	mov	r0, r3
 800c116:	f003 faa1 	bl	800f65c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	2200      	movs	r2, #0
 800c11e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800c120:	6978      	ldr	r0, [r7, #20]
 800c122:	f7ff ff53 	bl	800bfcc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	3314      	adds	r3, #20
 800c12a:	f107 0210 	add.w	r2, r7, #16
 800c12e:	4611      	mov	r1, r2
 800c130:	4618      	mov	r0, r3
 800c132:	f00c f8de 	bl	80182f2 <sys_arch_mbox_tryfetch>
 800c136:	4603      	mov	r3, r0
 800c138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c13c:	d1d5      	bne.n	800c0ea <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	3314      	adds	r3, #20
 800c142:	4618      	mov	r0, r3
 800c144:	f00c f86a 	bl	801821c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	3314      	adds	r3, #20
 800c14c:	4618      	mov	r0, r3
 800c14e:	f00c f8fd 	bl	801834c <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800c152:	bf00      	nop
 800c154:	3718      	adds	r7, #24
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
	...

0800c15c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b086      	sub	sp, #24
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	460b      	mov	r3, r1
 800c166:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800c168:	2300      	movs	r3, #0
 800c16a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d106      	bne.n	800c180 <lwip_netconn_do_close_internal+0x24>
 800c172:	4b87      	ldr	r3, [pc, #540]	; (800c390 <lwip_netconn_do_close_internal+0x234>)
 800c174:	f240 32a2 	movw	r2, #930	; 0x3a2
 800c178:	4986      	ldr	r1, [pc, #536]	; (800c394 <lwip_netconn_do_close_internal+0x238>)
 800c17a:	4887      	ldr	r0, [pc, #540]	; (800c398 <lwip_netconn_do_close_internal+0x23c>)
 800c17c:	f011 faf8 	bl	801d770 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c188:	2b10      	cmp	r3, #16
 800c18a:	d006      	beq.n	800c19a <lwip_netconn_do_close_internal+0x3e>
 800c18c:	4b80      	ldr	r3, [pc, #512]	; (800c390 <lwip_netconn_do_close_internal+0x234>)
 800c18e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800c192:	4982      	ldr	r1, [pc, #520]	; (800c39c <lwip_netconn_do_close_internal+0x240>)
 800c194:	4880      	ldr	r0, [pc, #512]	; (800c398 <lwip_netconn_do_close_internal+0x23c>)
 800c196:	f011 faeb 	bl	801d770 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	785b      	ldrb	r3, [r3, #1]
 800c19e:	2b04      	cmp	r3, #4
 800c1a0:	d006      	beq.n	800c1b0 <lwip_netconn_do_close_internal+0x54>
 800c1a2:	4b7b      	ldr	r3, [pc, #492]	; (800c390 <lwip_netconn_do_close_internal+0x234>)
 800c1a4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800c1a8:	497d      	ldr	r1, [pc, #500]	; (800c3a0 <lwip_netconn_do_close_internal+0x244>)
 800c1aa:	487b      	ldr	r0, [pc, #492]	; (800c398 <lwip_netconn_do_close_internal+0x23c>)
 800c1ac:	f011 fae0 	bl	801d770 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d106      	bne.n	800c1c6 <lwip_netconn_do_close_internal+0x6a>
 800c1b8:	4b75      	ldr	r3, [pc, #468]	; (800c390 <lwip_netconn_do_close_internal+0x234>)
 800c1ba:	f240 32a5 	movw	r2, #933	; 0x3a5
 800c1be:	4979      	ldr	r1, [pc, #484]	; (800c3a4 <lwip_netconn_do_close_internal+0x248>)
 800c1c0:	4875      	ldr	r0, [pc, #468]	; (800c398 <lwip_netconn_do_close_internal+0x23c>)
 800c1c2:	f011 fad5 	bl	801d770 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6a1b      	ldr	r3, [r3, #32]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d106      	bne.n	800c1dc <lwip_netconn_do_close_internal+0x80>
 800c1ce:	4b70      	ldr	r3, [pc, #448]	; (800c390 <lwip_netconn_do_close_internal+0x234>)
 800c1d0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c1d4:	4974      	ldr	r1, [pc, #464]	; (800c3a8 <lwip_netconn_do_close_internal+0x24c>)
 800c1d6:	4870      	ldr	r0, [pc, #448]	; (800c398 <lwip_netconn_do_close_internal+0x23c>)
 800c1d8:	f011 faca 	bl	801d770 <iprintf>

  tpcb = conn->pcb.tcp;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6a1b      	ldr	r3, [r3, #32]
 800c1e6:	7a1b      	ldrb	r3, [r3, #8]
 800c1e8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800c1ea:	7bfb      	ldrb	r3, [r7, #15]
 800c1ec:	f003 0301 	and.w	r3, r3, #1
 800c1f0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800c1f2:	7bfb      	ldrb	r3, [r7, #15]
 800c1f4:	f003 0302 	and.w	r3, r3, #2
 800c1f8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800c1fa:	7bfb      	ldrb	r3, [r7, #15]
 800c1fc:	2b03      	cmp	r3, #3
 800c1fe:	d102      	bne.n	800c206 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800c200:	2301      	movs	r3, #1
 800c202:	75bb      	strb	r3, [r7, #22]
 800c204:	e01f      	b.n	800c246 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800c206:	7bbb      	ldrb	r3, [r7, #14]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d00e      	beq.n	800c22a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800c210:	2b05      	cmp	r3, #5
 800c212:	d007      	beq.n	800c224 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800c218:	2b06      	cmp	r3, #6
 800c21a:	d003      	beq.n	800c224 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800c220:	2b08      	cmp	r3, #8
 800c222:	d102      	bne.n	800c22a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800c224:	2301      	movs	r3, #1
 800c226:	75bb      	strb	r3, [r7, #22]
 800c228:	e00d      	b.n	800c246 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800c22a:	7b7b      	ldrb	r3, [r7, #13]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d008      	beq.n	800c242 <lwip_netconn_do_close_internal+0xe6>
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	8b5b      	ldrh	r3, [r3, #26]
 800c234:	f003 0310 	and.w	r3, r3, #16
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d002      	beq.n	800c242 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800c23c:	2301      	movs	r3, #1
 800c23e:	75bb      	strb	r3, [r7, #22]
 800c240:	e001      	b.n	800c246 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800c242:	2300      	movs	r3, #0
 800c244:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800c246:	7dbb      	ldrb	r3, [r7, #22]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d003      	beq.n	800c254 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800c24c:	2100      	movs	r1, #0
 800c24e:	6938      	ldr	r0, [r7, #16]
 800c250:	f004 fa48 	bl	80106e4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	7d1b      	ldrb	r3, [r3, #20]
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d104      	bne.n	800c266 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800c25c:	2100      	movs	r1, #0
 800c25e:	6938      	ldr	r0, [r7, #16]
 800c260:	f004 fab8 	bl	80107d4 <tcp_accept>
 800c264:	e01d      	b.n	800c2a2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800c266:	7bbb      	ldrb	r3, [r7, #14]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d007      	beq.n	800c27c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800c26c:	2100      	movs	r1, #0
 800c26e:	6938      	ldr	r0, [r7, #16]
 800c270:	f004 fa4a 	bl	8010708 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800c274:	2100      	movs	r1, #0
 800c276:	6938      	ldr	r0, [r7, #16]
 800c278:	f004 faac 	bl	80107d4 <tcp_accept>
    }
    if (shut_tx) {
 800c27c:	7b7b      	ldrb	r3, [r7, #13]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d003      	beq.n	800c28a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800c282:	2100      	movs	r1, #0
 800c284:	6938      	ldr	r0, [r7, #16]
 800c286:	f004 fa61 	bl	801074c <tcp_sent>
    }
    if (shut_close) {
 800c28a:	7dbb      	ldrb	r3, [r7, #22]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d008      	beq.n	800c2a2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800c290:	2200      	movs	r2, #0
 800c292:	2100      	movs	r1, #0
 800c294:	6938      	ldr	r0, [r7, #16]
 800c296:	f004 fab5 	bl	8010804 <tcp_poll>
      tcp_err(tpcb, NULL);
 800c29a:	2100      	movs	r1, #0
 800c29c:	6938      	ldr	r0, [r7, #16]
 800c29e:	f004 fa77 	bl	8010790 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800c2a2:	7dbb      	ldrb	r3, [r7, #22]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d005      	beq.n	800c2b4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800c2a8:	6938      	ldr	r0, [r7, #16]
 800c2aa:	f003 f891 	bl	800f3d0 <tcp_close>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	75fb      	strb	r3, [r7, #23]
 800c2b2:	e007      	b.n	800c2c4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800c2b4:	7bbb      	ldrb	r3, [r7, #14]
 800c2b6:	7b7a      	ldrb	r2, [r7, #13]
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	6938      	ldr	r0, [r7, #16]
 800c2bc:	f003 f8b4 	bl	800f428 <tcp_shutdown>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800c2c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d102      	bne.n	800c2d2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	757b      	strb	r3, [r7, #21]
 800c2d0:	e016      	b.n	800c300 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800c2d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2da:	d10f      	bne.n	800c2fc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6a1b      	ldr	r3, [r3, #32]
 800c2e0:	7a5b      	ldrb	r3, [r3, #9]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d10c      	bne.n	800c300 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800c2ea:	7dbb      	ldrb	r3, [r7, #22]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d007      	beq.n	800c300 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800c2f0:	6938      	ldr	r0, [r7, #16]
 800c2f2:	f003 f9b3 	bl	800f65c <tcp_abort>
          err = ERR_OK;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	75fb      	strb	r3, [r7, #23]
 800c2fa:	e001      	b.n	800c300 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800c300:	7d7b      	ldrb	r3, [r7, #21]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d052      	beq.n	800c3ac <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6a1b      	ldr	r3, [r3, #32]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	330c      	adds	r3, #12
 800c30e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6a1b      	ldr	r3, [r3, #32]
 800c314:	7dfa      	ldrb	r2, [r7, #23]
 800c316:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2200      	movs	r2, #0
 800c322:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800c324:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d129      	bne.n	800c380 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800c32c:	7dbb      	ldrb	r3, [r7, #22]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d00c      	beq.n	800c34c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d005      	beq.n	800c34c <lwip_netconn_do_close_internal+0x1f0>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c344:	2200      	movs	r2, #0
 800c346:	2104      	movs	r1, #4
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	4798      	blx	r3
      }
      if (shut_rx) {
 800c34c:	7bbb      	ldrb	r3, [r7, #14]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d009      	beq.n	800c366 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c356:	2b00      	cmp	r3, #0
 800c358:	d005      	beq.n	800c366 <lwip_netconn_do_close_internal+0x20a>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c35e:	2200      	movs	r2, #0
 800c360:	2100      	movs	r1, #0
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	4798      	blx	r3
      }
      if (shut_tx) {
 800c366:	7b7b      	ldrb	r3, [r7, #13]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d009      	beq.n	800c380 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c370:	2b00      	cmp	r3, #0
 800c372:	d005      	beq.n	800c380 <lwip_netconn_do_close_internal+0x224>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c378:	2200      	movs	r2, #0
 800c37a:	2102      	movs	r1, #2
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c380:	78fb      	ldrb	r3, [r7, #3]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d002      	beq.n	800c38c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800c386:	68b8      	ldr	r0, [r7, #8]
 800c388:	f00c f846 	bl	8018418 <sys_sem_signal>
    }
    return ERR_OK;
 800c38c:	2300      	movs	r3, #0
 800c38e:	e03c      	b.n	800c40a <lwip_netconn_do_close_internal+0x2ae>
 800c390:	0801eee4 	.word	0x0801eee4
 800c394:	0801f1b8 	.word	0x0801f1b8
 800c398:	0801ef28 	.word	0x0801ef28
 800c39c:	0801f1c8 	.word	0x0801f1c8
 800c3a0:	0801f1e8 	.word	0x0801f1e8
 800c3a4:	0801f20c 	.word	0x0801f20c
 800c3a8:	0801f04c 	.word	0x0801f04c
  }
  if (!close_finished) {
 800c3ac:	7d7b      	ldrb	r3, [r7, #21]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d11e      	bne.n	800c3f0 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	7d1b      	ldrb	r3, [r3, #20]
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d106      	bne.n	800c3c8 <lwip_netconn_do_close_internal+0x26c>
 800c3ba:	4b16      	ldr	r3, [pc, #88]	; (800c414 <lwip_netconn_do_close_internal+0x2b8>)
 800c3bc:	f240 4241 	movw	r2, #1089	; 0x441
 800c3c0:	4915      	ldr	r1, [pc, #84]	; (800c418 <lwip_netconn_do_close_internal+0x2bc>)
 800c3c2:	4816      	ldr	r0, [pc, #88]	; (800c41c <lwip_netconn_do_close_internal+0x2c0>)
 800c3c4:	f011 f9d4 	bl	801d770 <iprintf>
    if (shut_tx) {
 800c3c8:	7b7b      	ldrb	r3, [r7, #13]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d003      	beq.n	800c3d6 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800c3ce:	4914      	ldr	r1, [pc, #80]	; (800c420 <lwip_netconn_do_close_internal+0x2c4>)
 800c3d0:	6938      	ldr	r0, [r7, #16]
 800c3d2:	f004 f9bb 	bl	801074c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	4912      	ldr	r1, [pc, #72]	; (800c424 <lwip_netconn_do_close_internal+0x2c8>)
 800c3da:	6938      	ldr	r0, [r7, #16]
 800c3dc:	f004 fa12 	bl	8010804 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800c3e0:	4911      	ldr	r1, [pc, #68]	; (800c428 <lwip_netconn_do_close_internal+0x2cc>)
 800c3e2:	6938      	ldr	r0, [r7, #16]
 800c3e4:	f004 f9d4 	bl	8010790 <tcp_err>
    tcp_arg(tpcb, conn);
 800c3e8:	6879      	ldr	r1, [r7, #4]
 800c3ea:	6938      	ldr	r0, [r7, #16]
 800c3ec:	f004 f97a 	bl	80106e4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800c3f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d106      	bne.n	800c406 <lwip_netconn_do_close_internal+0x2aa>
 800c3f8:	4b06      	ldr	r3, [pc, #24]	; (800c414 <lwip_netconn_do_close_internal+0x2b8>)
 800c3fa:	f240 424d 	movw	r2, #1101	; 0x44d
 800c3fe:	490b      	ldr	r1, [pc, #44]	; (800c42c <lwip_netconn_do_close_internal+0x2d0>)
 800c400:	4806      	ldr	r0, [pc, #24]	; (800c41c <lwip_netconn_do_close_internal+0x2c0>)
 800c402:	f011 f9b5 	bl	801d770 <iprintf>
  return err;
 800c406:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3718      	adds	r7, #24
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	0801eee4 	.word	0x0801eee4
 800c418:	0801f220 	.word	0x0801f220
 800c41c:	0801ef28 	.word	0x0801ef28
 800c420:	0800bb4d 	.word	0x0800bb4d
 800c424:	0800ba85 	.word	0x0800ba85
 800c428:	0800bbf5 	.word	0x0800bbf5
 800c42c:	0801f244 	.word	0x0801f244

0800c430 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	785b      	ldrb	r3, [r3, #1]
 800c442:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800c444:	7afb      	ldrb	r3, [r7, #11]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d00d      	beq.n	800c466 <lwip_netconn_do_delconn+0x36>
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c454:	2b10      	cmp	r3, #16
 800c456:	d006      	beq.n	800c466 <lwip_netconn_do_delconn+0x36>
 800c458:	4b60      	ldr	r3, [pc, #384]	; (800c5dc <lwip_netconn_do_delconn+0x1ac>)
 800c45a:	f240 425e 	movw	r2, #1118	; 0x45e
 800c45e:	4960      	ldr	r1, [pc, #384]	; (800c5e0 <lwip_netconn_do_delconn+0x1b0>)
 800c460:	4860      	ldr	r0, [pc, #384]	; (800c5e4 <lwip_netconn_do_delconn+0x1b4>)
 800c462:	f011 f985 	bl	801d770 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800c466:	7afb      	ldrb	r3, [r7, #11]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d005      	beq.n	800c478 <lwip_netconn_do_delconn+0x48>
 800c46c:	7afb      	ldrb	r3, [r7, #11]
 800c46e:	2b02      	cmp	r3, #2
 800c470:	d002      	beq.n	800c478 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800c472:	7afb      	ldrb	r3, [r7, #11]
 800c474:	2b03      	cmp	r3, #3
 800c476:	d109      	bne.n	800c48c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800c478:	7afb      	ldrb	r3, [r7, #11]
 800c47a:	2b03      	cmp	r3, #3
 800c47c:	d10a      	bne.n	800c494 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	7f1b      	ldrb	r3, [r3, #28]
 800c484:	f003 0304 	and.w	r3, r3, #4
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d103      	bne.n	800c494 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	22fb      	movs	r2, #251	; 0xfb
 800c490:	711a      	strb	r2, [r3, #4]
 800c492:	e097      	b.n	800c5c4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800c494:	7afb      	ldrb	r3, [r7, #11]
 800c496:	2b03      	cmp	r3, #3
 800c498:	d10d      	bne.n	800c4b6 <lwip_netconn_do_delconn+0x86>
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	7f1b      	ldrb	r3, [r3, #28]
 800c4a0:	f003 0304 	and.w	r3, r3, #4
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d106      	bne.n	800c4b6 <lwip_netconn_do_delconn+0x86>
 800c4a8:	4b4c      	ldr	r3, [pc, #304]	; (800c5dc <lwip_netconn_do_delconn+0x1ac>)
 800c4aa:	f240 427a 	movw	r2, #1146	; 0x47a
 800c4ae:	494e      	ldr	r1, [pc, #312]	; (800c5e8 <lwip_netconn_do_delconn+0x1b8>)
 800c4b0:	484c      	ldr	r0, [pc, #304]	; (800c5e4 <lwip_netconn_do_delconn+0x1b4>)
 800c4b2:	f011 f95d 	bl	801d770 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7ff fdcd 	bl	800c060 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d05f      	beq.n	800c590 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c4da:	2b10      	cmp	r3, #16
 800c4dc:	d00d      	beq.n	800c4fa <lwip_netconn_do_delconn+0xca>
 800c4de:	2b20      	cmp	r3, #32
 800c4e0:	d151      	bne.n	800c586 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f009 f9ea 	bl	80158cc <udp_remove>
          break;
 800c4f8:	e046      	b.n	800c588 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	6a1b      	ldr	r3, [r3, #32]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d006      	beq.n	800c512 <lwip_netconn_do_delconn+0xe2>
 800c504:	4b35      	ldr	r3, [pc, #212]	; (800c5dc <lwip_netconn_do_delconn+0x1ac>)
 800c506:	f240 4294 	movw	r2, #1172	; 0x494
 800c50a:	4938      	ldr	r1, [pc, #224]	; (800c5ec <lwip_netconn_do_delconn+0x1bc>)
 800c50c:	4835      	ldr	r0, [pc, #212]	; (800c5e4 <lwip_netconn_do_delconn+0x1b4>)
 800c50e:	f011 f92f 	bl	801d770 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2204      	movs	r2, #4
 800c518:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2203      	movs	r2, #3
 800c51e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	68fa      	ldr	r2, [r7, #12]
 800c526:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2100      	movs	r1, #0
 800c52e:	4618      	mov	r0, r3
 800c530:	f7ff fe14 	bl	800c15c <lwip_netconn_do_close_internal>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d04b      	beq.n	800c5d2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	785b      	ldrb	r3, [r3, #1]
 800c540:	2b04      	cmp	r3, #4
 800c542:	d006      	beq.n	800c552 <lwip_netconn_do_delconn+0x122>
 800c544:	4b25      	ldr	r3, [pc, #148]	; (800c5dc <lwip_netconn_do_delconn+0x1ac>)
 800c546:	f240 429a 	movw	r2, #1178	; 0x49a
 800c54a:	4929      	ldr	r1, [pc, #164]	; (800c5f0 <lwip_netconn_do_delconn+0x1c0>)
 800c54c:	4825      	ldr	r0, [pc, #148]	; (800c5e4 <lwip_netconn_do_delconn+0x1b4>)
 800c54e:	f011 f90f 	bl	801d770 <iprintf>
            UNLOCK_TCPIP_CORE();
 800c552:	4828      	ldr	r0, [pc, #160]	; (800c5f4 <lwip_netconn_do_delconn+0x1c4>)
 800c554:	f00b ffd1 	bl	80184fa <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	330c      	adds	r3, #12
 800c55e:	2100      	movs	r1, #0
 800c560:	4618      	mov	r0, r3
 800c562:	f00b ff28 	bl	80183b6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800c566:	4823      	ldr	r0, [pc, #140]	; (800c5f4 <lwip_netconn_do_delconn+0x1c4>)
 800c568:	f00b ffb8 	bl	80184dc <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	785b      	ldrb	r3, [r3, #1]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d02d      	beq.n	800c5d2 <lwip_netconn_do_delconn+0x1a2>
 800c576:	4b19      	ldr	r3, [pc, #100]	; (800c5dc <lwip_netconn_do_delconn+0x1ac>)
 800c578:	f240 429e 	movw	r2, #1182	; 0x49e
 800c57c:	491c      	ldr	r1, [pc, #112]	; (800c5f0 <lwip_netconn_do_delconn+0x1c0>)
 800c57e:	4819      	ldr	r0, [pc, #100]	; (800c5e4 <lwip_netconn_do_delconn+0x1b4>)
 800c580:	f011 f8f6 	bl	801d770 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800c584:	e025      	b.n	800c5d2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800c586:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2200      	movs	r2, #0
 800c58e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c596:	2b00      	cmp	r3, #0
 800c598:	d007      	beq.n	800c5aa <lwip_netconn_do_delconn+0x17a>
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	6810      	ldr	r0, [r2, #0]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d007      	beq.n	800c5c4 <lwip_netconn_do_delconn+0x194>
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	6810      	ldr	r0, [r2, #0]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	2102      	movs	r1, #2
 800c5c2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	330c      	adds	r3, #12
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f00b ff3e 	bl	801844c <sys_sem_valid>
 800c5d0:	e000      	b.n	800c5d4 <lwip_netconn_do_delconn+0x1a4>
          return;
 800c5d2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800c5d4:	3710      	adds	r7, #16
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	0801eee4 	.word	0x0801eee4
 800c5e0:	0801f254 	.word	0x0801f254
 800c5e4:	0801ef28 	.word	0x0801ef28
 800c5e8:	0801f268 	.word	0x0801f268
 800c5ec:	0801f288 	.word	0x0801f288
 800c5f0:	0801f2a4 	.word	0x0801f2a4
 800c5f4:	2000a2bc 	.word	0x2000a2bc

0800c5f8 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b088      	sub	sp, #32
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	60b9      	str	r1, [r7, #8]
 800c602:	4613      	mov	r3, r2
 800c604:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800c606:	2300      	movs	r3, #0
 800c608:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d102      	bne.n	800c61a <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800c614:	f06f 0305 	mvn.w	r3, #5
 800c618:	e070      	b.n	800c6fc <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800c61a:	69bb      	ldr	r3, [r7, #24]
 800c61c:	785b      	ldrb	r3, [r3, #1]
 800c61e:	2b03      	cmp	r3, #3
 800c620:	d006      	beq.n	800c630 <lwip_netconn_do_connected+0x38>
 800c622:	4b38      	ldr	r3, [pc, #224]	; (800c704 <lwip_netconn_do_connected+0x10c>)
 800c624:	f240 5223 	movw	r2, #1315	; 0x523
 800c628:	4937      	ldr	r1, [pc, #220]	; (800c708 <lwip_netconn_do_connected+0x110>)
 800c62a:	4838      	ldr	r0, [pc, #224]	; (800c70c <lwip_netconn_do_connected+0x114>)
 800c62c:	f011 f8a0 	bl	801d770 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800c630:	69bb      	ldr	r3, [r7, #24]
 800c632:	6a1b      	ldr	r3, [r3, #32]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d10c      	bne.n	800c652 <lwip_netconn_do_connected+0x5a>
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	7f1b      	ldrb	r3, [r3, #28]
 800c63c:	f003 0304 	and.w	r3, r3, #4
 800c640:	2b00      	cmp	r3, #0
 800c642:	d106      	bne.n	800c652 <lwip_netconn_do_connected+0x5a>
 800c644:	4b2f      	ldr	r3, [pc, #188]	; (800c704 <lwip_netconn_do_connected+0x10c>)
 800c646:	f240 5224 	movw	r2, #1316	; 0x524
 800c64a:	4931      	ldr	r1, [pc, #196]	; (800c710 <lwip_netconn_do_connected+0x118>)
 800c64c:	482f      	ldr	r0, [pc, #188]	; (800c70c <lwip_netconn_do_connected+0x114>)
 800c64e:	f011 f88f 	bl	801d770 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800c652:	69bb      	ldr	r3, [r7, #24]
 800c654:	6a1b      	ldr	r3, [r3, #32]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d008      	beq.n	800c66c <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	6a1b      	ldr	r3, [r3, #32]
 800c65e:	79fa      	ldrb	r2, [r7, #7]
 800c660:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c662:	69bb      	ldr	r3, [r7, #24]
 800c664:	6a1b      	ldr	r3, [r3, #32]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	330c      	adds	r3, #12
 800c66a:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800c66c:	69bb      	ldr	r3, [r7, #24]
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c674:	2b10      	cmp	r3, #16
 800c676:	d106      	bne.n	800c686 <lwip_netconn_do_connected+0x8e>
 800c678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d102      	bne.n	800c686 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800c680:	69b8      	ldr	r0, [r7, #24]
 800c682:	f7ff fb8d 	bl	800bda0 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800c686:	69bb      	ldr	r3, [r7, #24]
 800c688:	7f1b      	ldrb	r3, [r3, #28]
 800c68a:	f003 0304 	and.w	r3, r3, #4
 800c68e:	2b00      	cmp	r3, #0
 800c690:	bf0c      	ite	eq
 800c692:	2301      	moveq	r3, #1
 800c694:	2300      	movne	r3, #0
 800c696:	b2db      	uxtb	r3, r3
 800c698:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800c69a:	69bb      	ldr	r3, [r7, #24]
 800c69c:	7f1b      	ldrb	r3, [r3, #28]
 800c69e:	f023 0304 	bic.w	r3, r3, #4
 800c6a2:	b2da      	uxtb	r2, r3
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d002      	beq.n	800c6b4 <lwip_netconn_do_connected+0xbc>
 800c6ae:	69fb      	ldr	r3, [r7, #28]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d10c      	bne.n	800c6ce <lwip_netconn_do_connected+0xd6>
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d102      	bne.n	800c6c0 <lwip_netconn_do_connected+0xc8>
 800c6ba:	69fb      	ldr	r3, [r7, #28]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d006      	beq.n	800c6ce <lwip_netconn_do_connected+0xd6>
 800c6c0:	4b10      	ldr	r3, [pc, #64]	; (800c704 <lwip_netconn_do_connected+0x10c>)
 800c6c2:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800c6c6:	4913      	ldr	r1, [pc, #76]	; (800c714 <lwip_netconn_do_connected+0x11c>)
 800c6c8:	4810      	ldr	r0, [pc, #64]	; (800c70c <lwip_netconn_do_connected+0x114>)
 800c6ca:	f011 f851 	bl	801d770 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800c6ce:	69bb      	ldr	r3, [r7, #24]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800c6d4:	69bb      	ldr	r3, [r7, #24]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d005      	beq.n	800c6ee <lwip_netconn_do_connected+0xf6>
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	2102      	movs	r1, #2
 800c6ea:	69b8      	ldr	r0, [r7, #24]
 800c6ec:	4798      	blx	r3

  if (was_blocking) {
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d002      	beq.n	800c6fa <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800c6f4:	69f8      	ldr	r0, [r7, #28]
 800c6f6:	f00b fe8f 	bl	8018418 <sys_sem_signal>
  }
  return ERR_OK;
 800c6fa:	2300      	movs	r3, #0
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3720      	adds	r7, #32
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	0801eee4 	.word	0x0801eee4
 800c708:	0801f2ac 	.word	0x0801f2ac
 800c70c:	0801ef28 	.word	0x0801ef28
 800c710:	0801f2cc 	.word	0x0801f2cc
 800c714:	0801f30c 	.word	0x0801f30c

0800c718 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b086      	sub	sp, #24
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d102      	bne.n	800c734 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800c72e:	23f1      	movs	r3, #241	; 0xf1
 800c730:	75fb      	strb	r3, [r7, #23]
 800c732:	e09b      	b.n	800c86c <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c73e:	2b10      	cmp	r3, #16
 800c740:	d00f      	beq.n	800c762 <lwip_netconn_do_connect+0x4a>
 800c742:	2b20      	cmp	r3, #32
 800c744:	f040 8087 	bne.w	800c856 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	6858      	ldr	r0, [r3, #4]
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	6899      	ldr	r1, [r3, #8]
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	899b      	ldrh	r3, [r3, #12]
 800c756:	461a      	mov	r2, r3
 800c758:	f009 f82a 	bl	80157b0 <udp_connect>
 800c75c:	4603      	mov	r3, r0
 800c75e:	75fb      	strb	r3, [r7, #23]
        break;
 800c760:	e084      	b.n	800c86c <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	785b      	ldrb	r3, [r3, #1]
 800c768:	2b03      	cmp	r3, #3
 800c76a:	d102      	bne.n	800c772 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800c76c:	23f7      	movs	r3, #247	; 0xf7
 800c76e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800c770:	e07b      	b.n	800c86a <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	785b      	ldrb	r3, [r3, #1]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d002      	beq.n	800c782 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800c77c:	23f6      	movs	r3, #246	; 0xf6
 800c77e:	75fb      	strb	r3, [r7, #23]
        break;
 800c780:	e073      	b.n	800c86a <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4618      	mov	r0, r3
 800c788:	f7ff fb0a 	bl	800bda0 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	6858      	ldr	r0, [r3, #4]
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	6899      	ldr	r1, [r3, #8]
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	899a      	ldrh	r2, [r3, #12]
 800c79a:	4b38      	ldr	r3, [pc, #224]	; (800c87c <lwip_netconn_do_connect+0x164>)
 800c79c:	f003 f85a 	bl	800f854 <tcp_connect>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800c7a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d15e      	bne.n	800c86a <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	7f1b      	ldrb	r3, [r3, #28]
 800c7b2:	f003 0302 	and.w	r3, r3, #2
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	bf14      	ite	ne
 800c7ba:	2301      	movne	r3, #1
 800c7bc:	2300      	moveq	r3, #0
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2203      	movs	r2, #3
 800c7c8:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800c7ca:	7bfb      	ldrb	r3, [r7, #15]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d009      	beq.n	800c7e4 <lwip_netconn_do_connect+0xcc>
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	7f1a      	ldrb	r2, [r3, #28]
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f042 0204 	orr.w	r2, r2, #4
 800c7de:	b2d2      	uxtb	r2, r2
 800c7e0:	771a      	strb	r2, [r3, #28]
 800c7e2:	e008      	b.n	800c7f6 <lwip_netconn_do_connect+0xde>
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	7f1a      	ldrb	r2, [r3, #28]
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f022 0204 	bic.w	r2, r2, #4
 800c7f2:	b2d2      	uxtb	r2, r2
 800c7f4:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800c7f6:	7bfb      	ldrb	r3, [r7, #15]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d002      	beq.n	800c802 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800c7fc:	23fb      	movs	r3, #251	; 0xfb
 800c7fe:	75fb      	strb	r3, [r7, #23]
        break;
 800c800:	e033      	b.n	800c86a <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	693a      	ldr	r2, [r7, #16]
 800c808:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	785b      	ldrb	r3, [r3, #1]
 800c810:	2b03      	cmp	r3, #3
 800c812:	d006      	beq.n	800c822 <lwip_netconn_do_connect+0x10a>
 800c814:	4b1a      	ldr	r3, [pc, #104]	; (800c880 <lwip_netconn_do_connect+0x168>)
 800c816:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800c81a:	491a      	ldr	r1, [pc, #104]	; (800c884 <lwip_netconn_do_connect+0x16c>)
 800c81c:	481a      	ldr	r0, [pc, #104]	; (800c888 <lwip_netconn_do_connect+0x170>)
 800c81e:	f010 ffa7 	bl	801d770 <iprintf>
              UNLOCK_TCPIP_CORE();
 800c822:	481a      	ldr	r0, [pc, #104]	; (800c88c <lwip_netconn_do_connect+0x174>)
 800c824:	f00b fe69 	bl	80184fa <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	330c      	adds	r3, #12
 800c82e:	2100      	movs	r1, #0
 800c830:	4618      	mov	r0, r3
 800c832:	f00b fdc0 	bl	80183b6 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800c836:	4815      	ldr	r0, [pc, #84]	; (800c88c <lwip_netconn_do_connect+0x174>)
 800c838:	f00b fe50 	bl	80184dc <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	785b      	ldrb	r3, [r3, #1]
 800c842:	2b03      	cmp	r3, #3
 800c844:	d116      	bne.n	800c874 <lwip_netconn_do_connect+0x15c>
 800c846:	4b0e      	ldr	r3, [pc, #56]	; (800c880 <lwip_netconn_do_connect+0x168>)
 800c848:	f240 5274 	movw	r2, #1396	; 0x574
 800c84c:	490d      	ldr	r1, [pc, #52]	; (800c884 <lwip_netconn_do_connect+0x16c>)
 800c84e:	480e      	ldr	r0, [pc, #56]	; (800c888 <lwip_netconn_do_connect+0x170>)
 800c850:	f010 ff8e 	bl	801d770 <iprintf>
              return;
 800c854:	e00e      	b.n	800c874 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800c856:	4b0a      	ldr	r3, [pc, #40]	; (800c880 <lwip_netconn_do_connect+0x168>)
 800c858:	f240 527d 	movw	r2, #1405	; 0x57d
 800c85c:	490c      	ldr	r1, [pc, #48]	; (800c890 <lwip_netconn_do_connect+0x178>)
 800c85e:	480a      	ldr	r0, [pc, #40]	; (800c888 <lwip_netconn_do_connect+0x170>)
 800c860:	f010 ff86 	bl	801d770 <iprintf>
 800c864:	23fa      	movs	r3, #250	; 0xfa
 800c866:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800c868:	e000      	b.n	800c86c <lwip_netconn_do_connect+0x154>
        break;
 800c86a:	bf00      	nop
    }
  }
  msg->err = err;
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	7dfa      	ldrb	r2, [r7, #23]
 800c870:	711a      	strb	r2, [r3, #4]
 800c872:	e000      	b.n	800c876 <lwip_netconn_do_connect+0x15e>
              return;
 800c874:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800c876:	3718      	adds	r7, #24
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	0800c5f9 	.word	0x0800c5f9
 800c880:	0801eee4 	.word	0x0801eee4
 800c884:	0801f2a4 	.word	0x0801f2a4
 800c888:	0801ef28 	.word	0x0801ef28
 800c88c:	2000a2bc 	.word	0x2000a2bc
 800c890:	0801f32c 	.word	0x0801f32c

0800c894 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b086      	sub	sp, #24
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d022      	beq.n	800c8f6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8ba:	2b10      	cmp	r3, #16
 800c8bc:	d11b      	bne.n	800c8f6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	689b      	ldr	r3, [r3, #8]
 800c8c2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8ca:	d202      	bcs.n	800c8d2 <lwip_netconn_do_recv+0x3e>
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	e001      	b.n	800c8d6 <lwip_netconn_do_recv+0x42>
 800c8d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c8d6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	89fa      	ldrh	r2, [r7, #14]
 800c8e0:	4611      	mov	r1, r2
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f002 ff20 	bl	800f728 <tcp_recved>
        remaining -= recved;
 800c8e8:	89fb      	ldrh	r3, [r7, #14]
 800c8ea:	697a      	ldr	r2, [r7, #20]
 800c8ec:	1ad3      	subs	r3, r2, r3
 800c8ee:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1e6      	bne.n	800c8c4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c8f6:	bf00      	nop
 800c8f8:	3718      	adds	r7, #24
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
	...

0800c900 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b088      	sub	sp, #32
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	460b      	mov	r3, r1
 800c90a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800c90c:	2300      	movs	r3, #0
 800c90e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d106      	bne.n	800c924 <lwip_netconn_do_writemore+0x24>
 800c916:	4b96      	ldr	r3, [pc, #600]	; (800cb70 <lwip_netconn_do_writemore+0x270>)
 800c918:	f240 6273 	movw	r2, #1651	; 0x673
 800c91c:	4995      	ldr	r1, [pc, #596]	; (800cb74 <lwip_netconn_do_writemore+0x274>)
 800c91e:	4896      	ldr	r0, [pc, #600]	; (800cb78 <lwip_netconn_do_writemore+0x278>)
 800c920:	f010 ff26 	bl	801d770 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	785b      	ldrb	r3, [r3, #1]
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d006      	beq.n	800c93a <lwip_netconn_do_writemore+0x3a>
 800c92c:	4b90      	ldr	r3, [pc, #576]	; (800cb70 <lwip_netconn_do_writemore+0x270>)
 800c92e:	f240 6274 	movw	r2, #1652	; 0x674
 800c932:	4992      	ldr	r1, [pc, #584]	; (800cb7c <lwip_netconn_do_writemore+0x27c>)
 800c934:	4890      	ldr	r0, [pc, #576]	; (800cb78 <lwip_netconn_do_writemore+0x278>)
 800c936:	f010 ff1b 	bl	801d770 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a1b      	ldr	r3, [r3, #32]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d106      	bne.n	800c950 <lwip_netconn_do_writemore+0x50>
 800c942:	4b8b      	ldr	r3, [pc, #556]	; (800cb70 <lwip_netconn_do_writemore+0x270>)
 800c944:	f240 6275 	movw	r2, #1653	; 0x675
 800c948:	498d      	ldr	r1, [pc, #564]	; (800cb80 <lwip_netconn_do_writemore+0x280>)
 800c94a:	488b      	ldr	r0, [pc, #556]	; (800cb78 <lwip_netconn_do_writemore+0x278>)
 800c94c:	f010 ff10 	bl	801d770 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d106      	bne.n	800c966 <lwip_netconn_do_writemore+0x66>
 800c958:	4b85      	ldr	r3, [pc, #532]	; (800cb70 <lwip_netconn_do_writemore+0x270>)
 800c95a:	f240 6276 	movw	r2, #1654	; 0x676
 800c95e:	4989      	ldr	r1, [pc, #548]	; (800cb84 <lwip_netconn_do_writemore+0x284>)
 800c960:	4885      	ldr	r0, [pc, #532]	; (800cb78 <lwip_netconn_do_writemore+0x278>)
 800c962:	f010 ff05 	bl	801d770 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a1b      	ldr	r3, [r3, #32]
 800c96a:	699a      	ldr	r2, [r3, #24]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6a1b      	ldr	r3, [r3, #32]
 800c970:	695b      	ldr	r3, [r3, #20]
 800c972:	429a      	cmp	r2, r3
 800c974:	d306      	bcc.n	800c984 <lwip_netconn_do_writemore+0x84>
 800c976:	4b7e      	ldr	r3, [pc, #504]	; (800cb70 <lwip_netconn_do_writemore+0x270>)
 800c978:	f240 6277 	movw	r2, #1655	; 0x677
 800c97c:	4982      	ldr	r1, [pc, #520]	; (800cb88 <lwip_netconn_do_writemore+0x288>)
 800c97e:	487e      	ldr	r0, [pc, #504]	; (800cb78 <lwip_netconn_do_writemore+0x278>)
 800c980:	f010 fef6 	bl	801d770 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6a1b      	ldr	r3, [r3, #32]
 800c988:	899b      	ldrh	r3, [r3, #12]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d106      	bne.n	800c99c <lwip_netconn_do_writemore+0x9c>
 800c98e:	4b78      	ldr	r3, [pc, #480]	; (800cb70 <lwip_netconn_do_writemore+0x270>)
 800c990:	f240 6279 	movw	r2, #1657	; 0x679
 800c994:	497d      	ldr	r1, [pc, #500]	; (800cb8c <lwip_netconn_do_writemore+0x28c>)
 800c996:	4878      	ldr	r0, [pc, #480]	; (800cb78 <lwip_netconn_do_writemore+0x278>)
 800c998:	f010 feea 	bl	801d770 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6a1b      	ldr	r3, [r3, #32]
 800c9a0:	7f1b      	ldrb	r3, [r3, #28]
 800c9a2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	7f1b      	ldrb	r3, [r3, #28]
 800c9a8:	f003 0302 	and.w	r3, r3, #2
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d104      	bne.n	800c9ba <lwip_netconn_do_writemore+0xba>
 800c9b0:	7ebb      	ldrb	r3, [r7, #26]
 800c9b2:	f003 0304 	and.w	r3, r3, #4
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d001      	beq.n	800c9be <lwip_netconn_do_writemore+0xbe>
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e000      	b.n	800c9c0 <lwip_netconn_do_writemore+0xc0>
 800c9be:	2300      	movs	r3, #0
 800c9c0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6a1b      	ldr	r3, [r3, #32]
 800c9c6:	689b      	ldr	r3, [r3, #8]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6a1b      	ldr	r3, [r3, #32]
 800c9ce:	691b      	ldr	r3, [r3, #16]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6a1b      	ldr	r3, [r3, #32]
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	685a      	ldr	r2, [r3, #4]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6a1b      	ldr	r3, [r3, #32]
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	1ad3      	subs	r3, r2, r3
 800c9e4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9ec:	d307      	bcc.n	800c9fe <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800c9ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c9f2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c9f4:	7ebb      	ldrb	r3, [r7, #26]
 800c9f6:	f043 0302 	orr.w	r3, r3, #2
 800c9fa:	76bb      	strb	r3, [r7, #26]
 800c9fc:	e001      	b.n	800ca02 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ca0a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800ca0c:	89fa      	ldrh	r2, [r7, #14]
 800ca0e:	8bbb      	ldrh	r3, [r7, #28]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d216      	bcs.n	800ca42 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800ca14:	89fb      	ldrh	r3, [r7, #14]
 800ca16:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800ca18:	7e3b      	ldrb	r3, [r7, #24]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00d      	beq.n	800ca3a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800ca1e:	8bbb      	ldrh	r3, [r7, #28]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d10e      	bne.n	800ca42 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6a1b      	ldr	r3, [r3, #32]
 800ca28:	699b      	ldr	r3, [r3, #24]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d102      	bne.n	800ca34 <lwip_netconn_do_writemore+0x134>
 800ca2e:	f06f 0306 	mvn.w	r3, #6
 800ca32:	e000      	b.n	800ca36 <lwip_netconn_do_writemore+0x136>
 800ca34:	2300      	movs	r3, #0
 800ca36:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800ca38:	e07d      	b.n	800cb36 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800ca3a:	7ebb      	ldrb	r3, [r7, #26]
 800ca3c:	f043 0302 	orr.w	r3, r3, #2
 800ca40:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6a1b      	ldr	r3, [r3, #32]
 800ca46:	691a      	ldr	r2, [r3, #16]
 800ca48:	8bbb      	ldrh	r3, [r7, #28]
 800ca4a:	441a      	add	r2, r3
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6a1b      	ldr	r3, [r3, #32]
 800ca50:	689b      	ldr	r3, [r3, #8]
 800ca52:	685b      	ldr	r3, [r3, #4]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d906      	bls.n	800ca66 <lwip_netconn_do_writemore+0x166>
 800ca58:	4b45      	ldr	r3, [pc, #276]	; (800cb70 <lwip_netconn_do_writemore+0x270>)
 800ca5a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800ca5e:	494c      	ldr	r1, [pc, #304]	; (800cb90 <lwip_netconn_do_writemore+0x290>)
 800ca60:	4845      	ldr	r0, [pc, #276]	; (800cb78 <lwip_netconn_do_writemore+0x278>)
 800ca62:	f010 fe85 	bl	801d770 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ca66:	8bbb      	ldrh	r3, [r7, #28]
 800ca68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d103      	bne.n	800ca78 <lwip_netconn_do_writemore+0x178>
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca76:	d209      	bcs.n	800ca8c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ca7c:	8bba      	ldrh	r2, [r7, #28]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d10b      	bne.n	800ca9a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6a1b      	ldr	r3, [r3, #32]
 800ca86:	899b      	ldrh	r3, [r3, #12]
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d906      	bls.n	800ca9a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ca90:	7ebb      	ldrb	r3, [r7, #26]
 800ca92:	f043 0302 	orr.w	r3, r3, #2
 800ca96:	76bb      	strb	r3, [r7, #26]
 800ca98:	e001      	b.n	800ca9e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6858      	ldr	r0, [r3, #4]
 800caa2:	7ebb      	ldrb	r3, [r7, #26]
 800caa4:	8bba      	ldrh	r2, [r7, #28]
 800caa6:	6979      	ldr	r1, [r7, #20]
 800caa8:	f006 fd5e 	bl	8013568 <tcp_write>
 800caac:	4603      	mov	r3, r0
 800caae:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800cab0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d12c      	bne.n	800cb12 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6a1b      	ldr	r3, [r3, #32]
 800cabc:	6999      	ldr	r1, [r3, #24]
 800cabe:	8bba      	ldrh	r2, [r7, #28]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6a1b      	ldr	r3, [r3, #32]
 800cac4:	440a      	add	r2, r1
 800cac6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6a1b      	ldr	r3, [r3, #32]
 800cacc:	6919      	ldr	r1, [r3, #16]
 800cace:	8bba      	ldrh	r2, [r7, #28]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6a1b      	ldr	r3, [r3, #32]
 800cad4:	440a      	add	r2, r1
 800cad6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6a1b      	ldr	r3, [r3, #32]
 800cadc:	691a      	ldr	r2, [r3, #16]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6a1b      	ldr	r3, [r3, #32]
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d113      	bne.n	800cb12 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6a1b      	ldr	r3, [r3, #32]
 800caee:	899a      	ldrh	r2, [r3, #12]
 800caf0:	3a01      	subs	r2, #1
 800caf2:	b292      	uxth	r2, r2
 800caf4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6a1b      	ldr	r3, [r3, #32]
 800cafa:	899b      	ldrh	r3, [r3, #12]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d008      	beq.n	800cb12 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6a1b      	ldr	r3, [r3, #32]
 800cb04:	689a      	ldr	r2, [r3, #8]
 800cb06:	3208      	adds	r2, #8
 800cb08:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6a1b      	ldr	r3, [r3, #32]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800cb12:	7e7b      	ldrb	r3, [r7, #25]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d004      	beq.n	800cb22 <lwip_netconn_do_writemore+0x222>
 800cb18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	f43f af50 	beq.w	800c9c2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800cb22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d004      	beq.n	800cb34 <lwip_netconn_do_writemore+0x234>
 800cb2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb32:	d146      	bne.n	800cbc2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800cb34:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800cb36:	7e3b      	ldrb	r3, [r7, #24]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d02b      	beq.n	800cb94 <lwip_netconn_do_writemore+0x294>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6a1b      	ldr	r3, [r3, #32]
 800cb40:	699a      	ldr	r2, [r3, #24]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6a1b      	ldr	r3, [r3, #32]
 800cb46:	695b      	ldr	r3, [r3, #20]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d223      	bcs.n	800cb94 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d005      	beq.n	800cb60 <lwip_netconn_do_writemore+0x260>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb58:	2200      	movs	r2, #0
 800cb5a:	2103      	movs	r1, #3
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	7f1b      	ldrb	r3, [r3, #28]
 800cb64:	f043 0310 	orr.w	r3, r3, #16
 800cb68:	b2da      	uxtb	r2, r3
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	771a      	strb	r2, [r3, #28]
 800cb6e:	e028      	b.n	800cbc2 <lwip_netconn_do_writemore+0x2c2>
 800cb70:	0801eee4 	.word	0x0801eee4
 800cb74:	0801f03c 	.word	0x0801f03c
 800cb78:	0801ef28 	.word	0x0801ef28
 800cb7c:	0801f344 	.word	0x0801f344
 800cb80:	0801f04c 	.word	0x0801f04c
 800cb84:	0801f364 	.word	0x0801f364
 800cb88:	0801f37c 	.word	0x0801f37c
 800cb8c:	0801f3bc 	.word	0x0801f3bc
 800cb90:	0801f3e4 	.word	0x0801f3e4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cb9c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800cba0:	d305      	bcc.n	800cbae <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800cbaa:	2b04      	cmp	r3, #4
 800cbac:	d909      	bls.n	800cbc2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d005      	beq.n	800cbc2 <lwip_netconn_do_writemore+0x2c2>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbba:	2200      	movs	r2, #0
 800cbbc:	2103      	movs	r1, #3
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800cbc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d11d      	bne.n	800cc06 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a1b      	ldr	r3, [r3, #32]
 800cbce:	699a      	ldr	r2, [r3, #24]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6a1b      	ldr	r3, [r3, #32]
 800cbd4:	695b      	ldr	r3, [r3, #20]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d002      	beq.n	800cbe0 <lwip_netconn_do_writemore+0x2e0>
 800cbda:	7e3b      	ldrb	r3, [r7, #24]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d001      	beq.n	800cbe4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f007 faa7 	bl	801413c <tcp_output>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800cbf2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800cbf6:	f113 0f04 	cmn.w	r3, #4
 800cbfa:	d12c      	bne.n	800cc56 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800cbfc:	7b3b      	ldrb	r3, [r7, #12]
 800cbfe:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cc00:	2301      	movs	r3, #1
 800cc02:	76fb      	strb	r3, [r7, #27]
 800cc04:	e027      	b.n	800cc56 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800cc06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cc0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc0e:	d120      	bne.n	800cc52 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	4618      	mov	r0, r3
 800cc16:	f007 fa91 	bl	801413c <tcp_output>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800cc1e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800cc22:	f113 0f04 	cmn.w	r3, #4
 800cc26:	d104      	bne.n	800cc32 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800cc28:	7b7b      	ldrb	r3, [r7, #13]
 800cc2a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	76fb      	strb	r3, [r7, #27]
 800cc30:	e011      	b.n	800cc56 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800cc32:	7e3b      	ldrb	r3, [r7, #24]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00e      	beq.n	800cc56 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6a1b      	ldr	r3, [r3, #32]
 800cc3c:	699b      	ldr	r3, [r3, #24]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d102      	bne.n	800cc48 <lwip_netconn_do_writemore+0x348>
 800cc42:	f06f 0306 	mvn.w	r3, #6
 800cc46:	e000      	b.n	800cc4a <lwip_netconn_do_writemore+0x34a>
 800cc48:	2300      	movs	r3, #0
 800cc4a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	76fb      	strb	r3, [r7, #27]
 800cc50:	e001      	b.n	800cc56 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800cc52:	2301      	movs	r3, #1
 800cc54:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800cc56:	7efb      	ldrb	r3, [r7, #27]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d015      	beq.n	800cc88 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6a1b      	ldr	r3, [r3, #32]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	330c      	adds	r3, #12
 800cc64:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6a1b      	ldr	r3, [r3, #32]
 800cc6a:	7ffa      	ldrb	r2, [r7, #31]
 800cc6c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800cc7a:	78fb      	ldrb	r3, [r7, #3]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d006      	beq.n	800cc8e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800cc80:	68b8      	ldr	r0, [r7, #8]
 800cc82:	f00b fbc9 	bl	8018418 <sys_sem_signal>
 800cc86:	e002      	b.n	800cc8e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800cc88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc8c:	e000      	b.n	800cc90 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800cc8e:	2300      	movs	r3, #0
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3720      	adds	r7, #32
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7fe fd5c 	bl	800b766 <netconn_err>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ccb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d166      	bne.n	800cd88 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ccc4:	2b10      	cmp	r3, #16
 800ccc6:	d15d      	bne.n	800cd84 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	785b      	ldrb	r3, [r3, #1]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d002      	beq.n	800ccd8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800ccd2:	23fb      	movs	r3, #251	; 0xfb
 800ccd4:	73fb      	strb	r3, [r7, #15]
 800ccd6:	e057      	b.n	800cd88 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d04d      	beq.n	800cd7e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2201      	movs	r2, #1
 800cce8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	6a1b      	ldr	r3, [r3, #32]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d006      	beq.n	800cd02 <lwip_netconn_do_write+0x6a>
 800ccf4:	4b28      	ldr	r3, [pc, #160]	; (800cd98 <lwip_netconn_do_write+0x100>)
 800ccf6:	f240 7223 	movw	r2, #1827	; 0x723
 800ccfa:	4928      	ldr	r1, [pc, #160]	; (800cd9c <lwip_netconn_do_write+0x104>)
 800ccfc:	4828      	ldr	r0, [pc, #160]	; (800cda0 <lwip_netconn_do_write+0x108>)
 800ccfe:	f010 fd37 	bl	801d770 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	695b      	ldr	r3, [r3, #20]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d106      	bne.n	800cd18 <lwip_netconn_do_write+0x80>
 800cd0a:	4b23      	ldr	r3, [pc, #140]	; (800cd98 <lwip_netconn_do_write+0x100>)
 800cd0c:	f240 7224 	movw	r2, #1828	; 0x724
 800cd10:	4924      	ldr	r1, [pc, #144]	; (800cda4 <lwip_netconn_do_write+0x10c>)
 800cd12:	4823      	ldr	r0, [pc, #140]	; (800cda0 <lwip_netconn_do_write+0x108>)
 800cd14:	f010 fd2c 	bl	801d770 <iprintf>
        msg->conn->current_msg = msg;
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	68ba      	ldr	r2, [r7, #8]
 800cd1e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	2100      	movs	r1, #0
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7ff fdea 	bl	800c900 <lwip_netconn_do_writemore>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d02e      	beq.n	800cd90 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	785b      	ldrb	r3, [r3, #1]
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d006      	beq.n	800cd4a <lwip_netconn_do_write+0xb2>
 800cd3c:	4b16      	ldr	r3, [pc, #88]	; (800cd98 <lwip_netconn_do_write+0x100>)
 800cd3e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800cd42:	4919      	ldr	r1, [pc, #100]	; (800cda8 <lwip_netconn_do_write+0x110>)
 800cd44:	4816      	ldr	r0, [pc, #88]	; (800cda0 <lwip_netconn_do_write+0x108>)
 800cd46:	f010 fd13 	bl	801d770 <iprintf>
          UNLOCK_TCPIP_CORE();
 800cd4a:	4818      	ldr	r0, [pc, #96]	; (800cdac <lwip_netconn_do_write+0x114>)
 800cd4c:	f00b fbd5 	bl	80184fa <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	330c      	adds	r3, #12
 800cd56:	2100      	movs	r1, #0
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f00b fb2c 	bl	80183b6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800cd5e:	4813      	ldr	r0, [pc, #76]	; (800cdac <lwip_netconn_do_write+0x114>)
 800cd60:	f00b fbbc 	bl	80184dc <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	785b      	ldrb	r3, [r3, #1]
 800cd6a:	2b01      	cmp	r3, #1
 800cd6c:	d110      	bne.n	800cd90 <lwip_netconn_do_write+0xf8>
 800cd6e:	4b0a      	ldr	r3, [pc, #40]	; (800cd98 <lwip_netconn_do_write+0x100>)
 800cd70:	f240 722c 	movw	r2, #1836	; 0x72c
 800cd74:	490c      	ldr	r1, [pc, #48]	; (800cda8 <lwip_netconn_do_write+0x110>)
 800cd76:	480a      	ldr	r0, [pc, #40]	; (800cda0 <lwip_netconn_do_write+0x108>)
 800cd78:	f010 fcfa 	bl	801d770 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800cd7c:	e008      	b.n	800cd90 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800cd7e:	23f5      	movs	r3, #245	; 0xf5
 800cd80:	73fb      	strb	r3, [r7, #15]
 800cd82:	e001      	b.n	800cd88 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800cd84:	23fa      	movs	r3, #250	; 0xfa
 800cd86:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	7bfa      	ldrb	r2, [r7, #15]
 800cd8c:	711a      	strb	r2, [r3, #4]
 800cd8e:	e000      	b.n	800cd92 <lwip_netconn_do_write+0xfa>
        return;
 800cd90:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800cd92:	3710      	adds	r7, #16
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	0801eee4 	.word	0x0801eee4
 800cd9c:	0801f288 	.word	0x0801f288
 800cda0:	0801ef28 	.word	0x0801ef28
 800cda4:	0801f410 	.word	0x0801f410
 800cda8:	0801f2a4 	.word	0x0801f2a4
 800cdac:	2000a2bc 	.word	0x2000a2bc

0800cdb0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	785b      	ldrb	r3, [r3, #1]
 800cdc2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d069      	beq.n	800cea2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800cdd8:	2b10      	cmp	r3, #16
 800cdda:	d162      	bne.n	800cea2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800cde0:	2b03      	cmp	r3, #3
 800cde2:	d002      	beq.n	800cdea <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800cde4:	7afb      	ldrb	r3, [r7, #11]
 800cde6:	2b02      	cmp	r3, #2
 800cde8:	d05b      	beq.n	800cea2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800cdea:	7afb      	ldrb	r3, [r7, #11]
 800cdec:	2b03      	cmp	r3, #3
 800cdee:	d103      	bne.n	800cdf8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	22f5      	movs	r2, #245	; 0xf5
 800cdf4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800cdf6:	e059      	b.n	800ceac <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800cdf8:	7afb      	ldrb	r3, [r7, #11]
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d103      	bne.n	800ce06 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	22fb      	movs	r2, #251	; 0xfb
 800ce02:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ce04:	e052      	b.n	800ceac <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	7a1b      	ldrb	r3, [r3, #8]
 800ce0a:	f003 0301 	and.w	r3, r3, #1
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d004      	beq.n	800ce1c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7ff f922 	bl	800c060 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	6a1b      	ldr	r3, [r3, #32]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d006      	beq.n	800ce34 <lwip_netconn_do_close+0x84>
 800ce26:	4b23      	ldr	r3, [pc, #140]	; (800ceb4 <lwip_netconn_do_close+0x104>)
 800ce28:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800ce2c:	4922      	ldr	r1, [pc, #136]	; (800ceb8 <lwip_netconn_do_close+0x108>)
 800ce2e:	4823      	ldr	r0, [pc, #140]	; (800cebc <lwip_netconn_do_close+0x10c>)
 800ce30:	f010 fc9e 	bl	801d770 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	2204      	movs	r2, #4
 800ce3a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	68fa      	ldr	r2, [r7, #12]
 800ce42:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2100      	movs	r1, #0
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7ff f986 	bl	800c15c <lwip_netconn_do_close_internal>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d029      	beq.n	800ceaa <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	785b      	ldrb	r3, [r3, #1]
 800ce5c:	2b04      	cmp	r3, #4
 800ce5e:	d006      	beq.n	800ce6e <lwip_netconn_do_close+0xbe>
 800ce60:	4b14      	ldr	r3, [pc, #80]	; (800ceb4 <lwip_netconn_do_close+0x104>)
 800ce62:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800ce66:	4916      	ldr	r1, [pc, #88]	; (800cec0 <lwip_netconn_do_close+0x110>)
 800ce68:	4814      	ldr	r0, [pc, #80]	; (800cebc <lwip_netconn_do_close+0x10c>)
 800ce6a:	f010 fc81 	bl	801d770 <iprintf>
        UNLOCK_TCPIP_CORE();
 800ce6e:	4815      	ldr	r0, [pc, #84]	; (800cec4 <lwip_netconn_do_close+0x114>)
 800ce70:	f00b fb43 	bl	80184fa <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	330c      	adds	r3, #12
 800ce7a:	2100      	movs	r1, #0
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f00b fa9a 	bl	80183b6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800ce82:	4810      	ldr	r0, [pc, #64]	; (800cec4 <lwip_netconn_do_close+0x114>)
 800ce84:	f00b fb2a 	bl	80184dc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	785b      	ldrb	r3, [r3, #1]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d00b      	beq.n	800ceaa <lwip_netconn_do_close+0xfa>
 800ce92:	4b08      	ldr	r3, [pc, #32]	; (800ceb4 <lwip_netconn_do_close+0x104>)
 800ce94:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800ce98:	4909      	ldr	r1, [pc, #36]	; (800cec0 <lwip_netconn_do_close+0x110>)
 800ce9a:	4808      	ldr	r0, [pc, #32]	; (800cebc <lwip_netconn_do_close+0x10c>)
 800ce9c:	f010 fc68 	bl	801d770 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800cea0:	e003      	b.n	800ceaa <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	22f5      	movs	r2, #245	; 0xf5
 800cea6:	711a      	strb	r2, [r3, #4]
 800cea8:	e000      	b.n	800ceac <lwip_netconn_do_close+0xfc>
      return;
 800ceaa:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ceac:	3710      	adds	r7, #16
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	0801eee4 	.word	0x0801eee4
 800ceb8:	0801f288 	.word	0x0801f288
 800cebc:	0801ef28 	.word	0x0801ef28
 800cec0:	0801f2a4 	.word	0x0801f2a4
 800cec4:	2000a2bc 	.word	0x2000a2bc

0800cec8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d013      	beq.n	800cefe <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d00b      	beq.n	800cef6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4618      	mov	r0, r3
 800cee4:	f001 fdca 	bl	800ea7c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	605a      	str	r2, [r3, #4]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	685a      	ldr	r2, [r3, #4]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800cef6:	6879      	ldr	r1, [r7, #4]
 800cef8:	2006      	movs	r0, #6
 800cefa:	f000 ff1b 	bl	800dd34 <memp_free>
  }
}
 800cefe:	bf00      	nop
 800cf00:	3708      	adds	r7, #8
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
	...

0800cf08 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800cf12:	f008 f9cb 	bl	80152ac <sys_timeouts_sleeptime>
 800cf16:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf1e:	d10b      	bne.n	800cf38 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800cf20:	4813      	ldr	r0, [pc, #76]	; (800cf70 <tcpip_timeouts_mbox_fetch+0x68>)
 800cf22:	f00b faea 	bl	80184fa <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800cf26:	2200      	movs	r2, #0
 800cf28:	6839      	ldr	r1, [r7, #0]
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f00b f9a2 	bl	8018274 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800cf30:	480f      	ldr	r0, [pc, #60]	; (800cf70 <tcpip_timeouts_mbox_fetch+0x68>)
 800cf32:	f00b fad3 	bl	80184dc <sys_mutex_lock>
    return;
 800cf36:	e018      	b.n	800cf6a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d102      	bne.n	800cf44 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800cf3e:	f008 f97b 	bl	8015238 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cf42:	e7e6      	b.n	800cf12 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800cf44:	480a      	ldr	r0, [pc, #40]	; (800cf70 <tcpip_timeouts_mbox_fetch+0x68>)
 800cf46:	f00b fad8 	bl	80184fa <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800cf4a:	68fa      	ldr	r2, [r7, #12]
 800cf4c:	6839      	ldr	r1, [r7, #0]
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f00b f990 	bl	8018274 <sys_arch_mbox_fetch>
 800cf54:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800cf56:	4806      	ldr	r0, [pc, #24]	; (800cf70 <tcpip_timeouts_mbox_fetch+0x68>)
 800cf58:	f00b fac0 	bl	80184dc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf62:	d102      	bne.n	800cf6a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800cf64:	f008 f968 	bl	8015238 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cf68:	e7d3      	b.n	800cf12 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800cf6a:	3710      	adds	r7, #16
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	2000a2bc 	.word	0x2000a2bc

0800cf74 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cf7c:	4810      	ldr	r0, [pc, #64]	; (800cfc0 <tcpip_thread+0x4c>)
 800cf7e:	f00b faad 	bl	80184dc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cf82:	4b10      	ldr	r3, [pc, #64]	; (800cfc4 <tcpip_thread+0x50>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d005      	beq.n	800cf96 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800cf8a:	4b0e      	ldr	r3, [pc, #56]	; (800cfc4 <tcpip_thread+0x50>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4a0e      	ldr	r2, [pc, #56]	; (800cfc8 <tcpip_thread+0x54>)
 800cf90:	6812      	ldr	r2, [r2, #0]
 800cf92:	4610      	mov	r0, r2
 800cf94:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cf96:	f107 030c 	add.w	r3, r7, #12
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	480b      	ldr	r0, [pc, #44]	; (800cfcc <tcpip_thread+0x58>)
 800cf9e:	f7ff ffb3 	bl	800cf08 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d106      	bne.n	800cfb6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cfa8:	4b09      	ldr	r3, [pc, #36]	; (800cfd0 <tcpip_thread+0x5c>)
 800cfaa:	2291      	movs	r2, #145	; 0x91
 800cfac:	4909      	ldr	r1, [pc, #36]	; (800cfd4 <tcpip_thread+0x60>)
 800cfae:	480a      	ldr	r0, [pc, #40]	; (800cfd8 <tcpip_thread+0x64>)
 800cfb0:	f010 fbde 	bl	801d770 <iprintf>
      continue;
 800cfb4:	e003      	b.n	800cfbe <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f000 f80f 	bl	800cfdc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cfbe:	e7ea      	b.n	800cf96 <tcpip_thread+0x22>
 800cfc0:	2000a2bc 	.word	0x2000a2bc
 800cfc4:	2000a2b0 	.word	0x2000a2b0
 800cfc8:	2000a2b4 	.word	0x2000a2b4
 800cfcc:	2000a2b8 	.word	0x2000a2b8
 800cfd0:	0801f43c 	.word	0x0801f43c
 800cfd4:	0801f46c 	.word	0x0801f46c
 800cfd8:	0801f48c 	.word	0x0801f48c

0800cfdc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	2b02      	cmp	r3, #2
 800cfea:	d026      	beq.n	800d03a <tcpip_thread_handle_msg+0x5e>
 800cfec:	2b02      	cmp	r3, #2
 800cfee:	dc2b      	bgt.n	800d048 <tcpip_thread_handle_msg+0x6c>
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d002      	beq.n	800cffa <tcpip_thread_handle_msg+0x1e>
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d015      	beq.n	800d024 <tcpip_thread_handle_msg+0x48>
 800cff8:	e026      	b.n	800d048 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	68db      	ldr	r3, [r3, #12]
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	6850      	ldr	r0, [r2, #4]
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	6892      	ldr	r2, [r2, #8]
 800d006:	4611      	mov	r1, r2
 800d008:	4798      	blx	r3
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d004      	beq.n	800d01a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	4618      	mov	r0, r3
 800d016:	f001 fd31 	bl	800ea7c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d01a:	6879      	ldr	r1, [r7, #4]
 800d01c:	2009      	movs	r0, #9
 800d01e:	f000 fe89 	bl	800dd34 <memp_free>
      break;
 800d022:	e018      	b.n	800d056 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	687a      	ldr	r2, [r7, #4]
 800d02a:	6892      	ldr	r2, [r2, #8]
 800d02c:	4610      	mov	r0, r2
 800d02e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d030:	6879      	ldr	r1, [r7, #4]
 800d032:	2008      	movs	r0, #8
 800d034:	f000 fe7e 	bl	800dd34 <memp_free>
      break;
 800d038:	e00d      	b.n	800d056 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	6892      	ldr	r2, [r2, #8]
 800d042:	4610      	mov	r0, r2
 800d044:	4798      	blx	r3
      break;
 800d046:	e006      	b.n	800d056 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d048:	4b05      	ldr	r3, [pc, #20]	; (800d060 <tcpip_thread_handle_msg+0x84>)
 800d04a:	22cf      	movs	r2, #207	; 0xcf
 800d04c:	4905      	ldr	r1, [pc, #20]	; (800d064 <tcpip_thread_handle_msg+0x88>)
 800d04e:	4806      	ldr	r0, [pc, #24]	; (800d068 <tcpip_thread_handle_msg+0x8c>)
 800d050:	f010 fb8e 	bl	801d770 <iprintf>
      break;
 800d054:	bf00      	nop
  }
}
 800d056:	bf00      	nop
 800d058:	3708      	adds	r7, #8
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
 800d05e:	bf00      	nop
 800d060:	0801f43c 	.word	0x0801f43c
 800d064:	0801f46c 	.word	0x0801f46c
 800d068:	0801f48c 	.word	0x0801f48c

0800d06c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b086      	sub	sp, #24
 800d070:	af00      	add	r7, sp, #0
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	60b9      	str	r1, [r7, #8]
 800d076:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d078:	481a      	ldr	r0, [pc, #104]	; (800d0e4 <tcpip_inpkt+0x78>)
 800d07a:	f00b f956 	bl	801832a <sys_mbox_valid>
 800d07e:	4603      	mov	r3, r0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d105      	bne.n	800d090 <tcpip_inpkt+0x24>
 800d084:	4b18      	ldr	r3, [pc, #96]	; (800d0e8 <tcpip_inpkt+0x7c>)
 800d086:	22fc      	movs	r2, #252	; 0xfc
 800d088:	4918      	ldr	r1, [pc, #96]	; (800d0ec <tcpip_inpkt+0x80>)
 800d08a:	4819      	ldr	r0, [pc, #100]	; (800d0f0 <tcpip_inpkt+0x84>)
 800d08c:	f010 fb70 	bl	801d770 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d090:	2009      	movs	r0, #9
 800d092:	f000 fdd9 	bl	800dc48 <memp_malloc>
 800d096:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d102      	bne.n	800d0a4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d09e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0a2:	e01a      	b.n	800d0da <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	68fa      	ldr	r2, [r7, #12]
 800d0ae:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	68ba      	ldr	r2, [r7, #8]
 800d0b4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d0bc:	6979      	ldr	r1, [r7, #20]
 800d0be:	4809      	ldr	r0, [pc, #36]	; (800d0e4 <tcpip_inpkt+0x78>)
 800d0c0:	f00b f8be 	bl	8018240 <sys_mbox_trypost>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d006      	beq.n	800d0d8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d0ca:	6979      	ldr	r1, [r7, #20]
 800d0cc:	2009      	movs	r0, #9
 800d0ce:	f000 fe31 	bl	800dd34 <memp_free>
    return ERR_MEM;
 800d0d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0d6:	e000      	b.n	800d0da <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d0d8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3718      	adds	r7, #24
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	2000a2b8 	.word	0x2000a2b8
 800d0e8:	0801f43c 	.word	0x0801f43c
 800d0ec:	0801f4b4 	.word	0x0801f4b4
 800d0f0:	0801f48c 	.word	0x0801f48c

0800d0f4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d104:	f003 0318 	and.w	r3, r3, #24
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d006      	beq.n	800d11a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d10c:	4a08      	ldr	r2, [pc, #32]	; (800d130 <tcpip_input+0x3c>)
 800d10e:	6839      	ldr	r1, [r7, #0]
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f7ff ffab 	bl	800d06c <tcpip_inpkt>
 800d116:	4603      	mov	r3, r0
 800d118:	e005      	b.n	800d126 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d11a:	4a06      	ldr	r2, [pc, #24]	; (800d134 <tcpip_input+0x40>)
 800d11c:	6839      	ldr	r1, [r7, #0]
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f7ff ffa4 	bl	800d06c <tcpip_inpkt>
 800d124:	4603      	mov	r3, r0
}
 800d126:	4618      	mov	r0, r3
 800d128:	3708      	adds	r7, #8
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	0801802d 	.word	0x0801802d
 800d134:	08016ce1 	.word	0x08016ce1

0800d138 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d142:	4819      	ldr	r0, [pc, #100]	; (800d1a8 <tcpip_try_callback+0x70>)
 800d144:	f00b f8f1 	bl	801832a <sys_mbox_valid>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d106      	bne.n	800d15c <tcpip_try_callback+0x24>
 800d14e:	4b17      	ldr	r3, [pc, #92]	; (800d1ac <tcpip_try_callback+0x74>)
 800d150:	f240 125d 	movw	r2, #349	; 0x15d
 800d154:	4916      	ldr	r1, [pc, #88]	; (800d1b0 <tcpip_try_callback+0x78>)
 800d156:	4817      	ldr	r0, [pc, #92]	; (800d1b4 <tcpip_try_callback+0x7c>)
 800d158:	f010 fb0a 	bl	801d770 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d15c:	2008      	movs	r0, #8
 800d15e:	f000 fd73 	bl	800dc48 <memp_malloc>
 800d162:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d102      	bne.n	800d170 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d16a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d16e:	e017      	b.n	800d1a0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2201      	movs	r2, #1
 800d174:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	683a      	ldr	r2, [r7, #0]
 800d180:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d182:	68f9      	ldr	r1, [r7, #12]
 800d184:	4808      	ldr	r0, [pc, #32]	; (800d1a8 <tcpip_try_callback+0x70>)
 800d186:	f00b f85b 	bl	8018240 <sys_mbox_trypost>
 800d18a:	4603      	mov	r3, r0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d006      	beq.n	800d19e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d190:	68f9      	ldr	r1, [r7, #12]
 800d192:	2008      	movs	r0, #8
 800d194:	f000 fdce 	bl	800dd34 <memp_free>
    return ERR_MEM;
 800d198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d19c:	e000      	b.n	800d1a0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d19e:	2300      	movs	r3, #0
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	2000a2b8 	.word	0x2000a2b8
 800d1ac:	0801f43c 	.word	0x0801f43c
 800d1b0:	0801f4b4 	.word	0x0801f4b4
 800d1b4:	0801f48c 	.word	0x0801f48c

0800d1b8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800d1c4:	4806      	ldr	r0, [pc, #24]	; (800d1e0 <tcpip_send_msg_wait_sem+0x28>)
 800d1c6:	f00b f989 	bl	80184dc <sys_mutex_lock>
  fn(apimsg);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	68b8      	ldr	r0, [r7, #8]
 800d1ce:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800d1d0:	4803      	ldr	r0, [pc, #12]	; (800d1e0 <tcpip_send_msg_wait_sem+0x28>)
 800d1d2:	f00b f992 	bl	80184fa <sys_mutex_unlock>
  return ERR_OK;
 800d1d6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3710      	adds	r7, #16
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	2000a2bc 	.word	0x2000a2bc

0800d1e4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af02      	add	r7, sp, #8
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d1ee:	f000 f871 	bl	800d2d4 <lwip_init>

  tcpip_init_done = initfunc;
 800d1f2:	4a17      	ldr	r2, [pc, #92]	; (800d250 <tcpip_init+0x6c>)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d1f8:	4a16      	ldr	r2, [pc, #88]	; (800d254 <tcpip_init+0x70>)
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d1fe:	2106      	movs	r1, #6
 800d200:	4815      	ldr	r0, [pc, #84]	; (800d258 <tcpip_init+0x74>)
 800d202:	f00a ffe9 	bl	80181d8 <sys_mbox_new>
 800d206:	4603      	mov	r3, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d006      	beq.n	800d21a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d20c:	4b13      	ldr	r3, [pc, #76]	; (800d25c <tcpip_init+0x78>)
 800d20e:	f240 2261 	movw	r2, #609	; 0x261
 800d212:	4913      	ldr	r1, [pc, #76]	; (800d260 <tcpip_init+0x7c>)
 800d214:	4813      	ldr	r0, [pc, #76]	; (800d264 <tcpip_init+0x80>)
 800d216:	f010 faab 	bl	801d770 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d21a:	4813      	ldr	r0, [pc, #76]	; (800d268 <tcpip_init+0x84>)
 800d21c:	f00b f942 	bl	80184a4 <sys_mutex_new>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d006      	beq.n	800d234 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d226:	4b0d      	ldr	r3, [pc, #52]	; (800d25c <tcpip_init+0x78>)
 800d228:	f240 2265 	movw	r2, #613	; 0x265
 800d22c:	490f      	ldr	r1, [pc, #60]	; (800d26c <tcpip_init+0x88>)
 800d22e:	480d      	ldr	r0, [pc, #52]	; (800d264 <tcpip_init+0x80>)
 800d230:	f010 fa9e 	bl	801d770 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d234:	2300      	movs	r3, #0
 800d236:	9300      	str	r3, [sp, #0]
 800d238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d23c:	2200      	movs	r2, #0
 800d23e:	490c      	ldr	r1, [pc, #48]	; (800d270 <tcpip_init+0x8c>)
 800d240:	480c      	ldr	r0, [pc, #48]	; (800d274 <tcpip_init+0x90>)
 800d242:	f00b f967 	bl	8018514 <sys_thread_new>
}
 800d246:	bf00      	nop
 800d248:	3708      	adds	r7, #8
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
 800d24e:	bf00      	nop
 800d250:	2000a2b0 	.word	0x2000a2b0
 800d254:	2000a2b4 	.word	0x2000a2b4
 800d258:	2000a2b8 	.word	0x2000a2b8
 800d25c:	0801f43c 	.word	0x0801f43c
 800d260:	0801f4c4 	.word	0x0801f4c4
 800d264:	0801f48c 	.word	0x0801f48c
 800d268:	2000a2bc 	.word	0x2000a2bc
 800d26c:	0801f4e8 	.word	0x0801f4e8
 800d270:	0800cf75 	.word	0x0800cf75
 800d274:	0801f50c 	.word	0x0801f50c

0800d278 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	4603      	mov	r3, r0
 800d280:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d282:	88fb      	ldrh	r3, [r7, #6]
 800d284:	021b      	lsls	r3, r3, #8
 800d286:	b21a      	sxth	r2, r3
 800d288:	88fb      	ldrh	r3, [r7, #6]
 800d28a:	0a1b      	lsrs	r3, r3, #8
 800d28c:	b29b      	uxth	r3, r3
 800d28e:	b21b      	sxth	r3, r3
 800d290:	4313      	orrs	r3, r2
 800d292:	b21b      	sxth	r3, r3
 800d294:	b29b      	uxth	r3, r3
}
 800d296:	4618      	mov	r0, r3
 800d298:	370c      	adds	r7, #12
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d2a2:	b480      	push	{r7}
 800d2a4:	b083      	sub	sp, #12
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	061a      	lsls	r2, r3, #24
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	021b      	lsls	r3, r3, #8
 800d2b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d2b6:	431a      	orrs	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	0a1b      	lsrs	r3, r3, #8
 800d2bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d2c0:	431a      	orrs	r2, r3
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	0e1b      	lsrs	r3, r3, #24
 800d2c6:	4313      	orrs	r3, r2
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr

0800d2d4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d2de:	f00b f8d3 	bl	8018488 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d2e2:	f000 f8d9 	bl	800d498 <mem_init>
  memp_init();
 800d2e6:	f000 fc41 	bl	800db6c <memp_init>
  pbuf_init();
  netif_init();
 800d2ea:	f000 fd4d 	bl	800dd88 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d2ee:	f008 f815 	bl	801531c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d2f2:	f001 fe5d 	bl	800efb0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d2f6:	f007 ff57 	bl	80151a8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d2fa:	bf00      	nop
 800d2fc:	3708      	adds	r7, #8
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
	...

0800d304 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	4603      	mov	r3, r0
 800d30c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d30e:	4b05      	ldr	r3, [pc, #20]	; (800d324 <ptr_to_mem+0x20>)
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	88fb      	ldrh	r3, [r7, #6]
 800d314:	4413      	add	r3, r2
}
 800d316:	4618      	mov	r0, r3
 800d318:	370c      	adds	r7, #12
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr
 800d322:	bf00      	nop
 800d324:	2000e2d4 	.word	0x2000e2d4

0800d328 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d330:	4b05      	ldr	r3, [pc, #20]	; (800d348 <mem_to_ptr+0x20>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	1ad3      	subs	r3, r2, r3
 800d338:	b29b      	uxth	r3, r3
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	370c      	adds	r7, #12
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop
 800d348:	2000e2d4 	.word	0x2000e2d4

0800d34c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d34c:	b590      	push	{r4, r7, lr}
 800d34e:	b085      	sub	sp, #20
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d354:	4b47      	ldr	r3, [pc, #284]	; (800d474 <plug_holes+0x128>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d206      	bcs.n	800d36c <plug_holes+0x20>
 800d35e:	4b46      	ldr	r3, [pc, #280]	; (800d478 <plug_holes+0x12c>)
 800d360:	f240 12df 	movw	r2, #479	; 0x1df
 800d364:	4945      	ldr	r1, [pc, #276]	; (800d47c <plug_holes+0x130>)
 800d366:	4846      	ldr	r0, [pc, #280]	; (800d480 <plug_holes+0x134>)
 800d368:	f010 fa02 	bl	801d770 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d36c:	4b45      	ldr	r3, [pc, #276]	; (800d484 <plug_holes+0x138>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	429a      	cmp	r2, r3
 800d374:	d306      	bcc.n	800d384 <plug_holes+0x38>
 800d376:	4b40      	ldr	r3, [pc, #256]	; (800d478 <plug_holes+0x12c>)
 800d378:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d37c:	4942      	ldr	r1, [pc, #264]	; (800d488 <plug_holes+0x13c>)
 800d37e:	4840      	ldr	r0, [pc, #256]	; (800d480 <plug_holes+0x134>)
 800d380:	f010 f9f6 	bl	801d770 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	791b      	ldrb	r3, [r3, #4]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d006      	beq.n	800d39a <plug_holes+0x4e>
 800d38c:	4b3a      	ldr	r3, [pc, #232]	; (800d478 <plug_holes+0x12c>)
 800d38e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d392:	493e      	ldr	r1, [pc, #248]	; (800d48c <plug_holes+0x140>)
 800d394:	483a      	ldr	r0, [pc, #232]	; (800d480 <plug_holes+0x134>)
 800d396:	f010 f9eb 	bl	801d770 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	881b      	ldrh	r3, [r3, #0]
 800d39e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d906      	bls.n	800d3b4 <plug_holes+0x68>
 800d3a6:	4b34      	ldr	r3, [pc, #208]	; (800d478 <plug_holes+0x12c>)
 800d3a8:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d3ac:	4938      	ldr	r1, [pc, #224]	; (800d490 <plug_holes+0x144>)
 800d3ae:	4834      	ldr	r0, [pc, #208]	; (800d480 <plug_holes+0x134>)
 800d3b0:	f010 f9de 	bl	801d770 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	881b      	ldrh	r3, [r3, #0]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7ff ffa3 	bl	800d304 <ptr_to_mem>
 800d3be:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d025      	beq.n	800d414 <plug_holes+0xc8>
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	791b      	ldrb	r3, [r3, #4]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d121      	bne.n	800d414 <plug_holes+0xc8>
 800d3d0:	4b2c      	ldr	r3, [pc, #176]	; (800d484 <plug_holes+0x138>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	68fa      	ldr	r2, [r7, #12]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d01c      	beq.n	800d414 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d3da:	4b2e      	ldr	r3, [pc, #184]	; (800d494 <plug_holes+0x148>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	68fa      	ldr	r2, [r7, #12]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d102      	bne.n	800d3ea <plug_holes+0x9e>
      lfree = mem;
 800d3e4:	4a2b      	ldr	r2, [pc, #172]	; (800d494 <plug_holes+0x148>)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	881a      	ldrh	r2, [r3, #0]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	881b      	ldrh	r3, [r3, #0]
 800d3f6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d00a      	beq.n	800d414 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	881b      	ldrh	r3, [r3, #0]
 800d402:	4618      	mov	r0, r3
 800d404:	f7ff ff7e 	bl	800d304 <ptr_to_mem>
 800d408:	4604      	mov	r4, r0
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f7ff ff8c 	bl	800d328 <mem_to_ptr>
 800d410:	4603      	mov	r3, r0
 800d412:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	885b      	ldrh	r3, [r3, #2]
 800d418:	4618      	mov	r0, r3
 800d41a:	f7ff ff73 	bl	800d304 <ptr_to_mem>
 800d41e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d420:	68ba      	ldr	r2, [r7, #8]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	429a      	cmp	r2, r3
 800d426:	d020      	beq.n	800d46a <plug_holes+0x11e>
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	791b      	ldrb	r3, [r3, #4]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d11c      	bne.n	800d46a <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d430:	4b18      	ldr	r3, [pc, #96]	; (800d494 <plug_holes+0x148>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	429a      	cmp	r2, r3
 800d438:	d102      	bne.n	800d440 <plug_holes+0xf4>
      lfree = pmem;
 800d43a:	4a16      	ldr	r2, [pc, #88]	; (800d494 <plug_holes+0x148>)
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	881a      	ldrh	r2, [r3, #0]
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	881b      	ldrh	r3, [r3, #0]
 800d44c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d450:	4293      	cmp	r3, r2
 800d452:	d00a      	beq.n	800d46a <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	881b      	ldrh	r3, [r3, #0]
 800d458:	4618      	mov	r0, r3
 800d45a:	f7ff ff53 	bl	800d304 <ptr_to_mem>
 800d45e:	4604      	mov	r4, r0
 800d460:	68b8      	ldr	r0, [r7, #8]
 800d462:	f7ff ff61 	bl	800d328 <mem_to_ptr>
 800d466:	4603      	mov	r3, r0
 800d468:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d46a:	bf00      	nop
 800d46c:	3714      	adds	r7, #20
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd90      	pop	{r4, r7, pc}
 800d472:	bf00      	nop
 800d474:	2000e2d4 	.word	0x2000e2d4
 800d478:	0801f51c 	.word	0x0801f51c
 800d47c:	0801f54c 	.word	0x0801f54c
 800d480:	0801f564 	.word	0x0801f564
 800d484:	2000e2d8 	.word	0x2000e2d8
 800d488:	0801f58c 	.word	0x0801f58c
 800d48c:	0801f5a8 	.word	0x0801f5a8
 800d490:	0801f5c4 	.word	0x0801f5c4
 800d494:	2000e2e0 	.word	0x2000e2e0

0800d498 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d49e:	4b1f      	ldr	r3, [pc, #124]	; (800d51c <mem_init+0x84>)
 800d4a0:	3303      	adds	r3, #3
 800d4a2:	f023 0303 	bic.w	r3, r3, #3
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	4b1d      	ldr	r3, [pc, #116]	; (800d520 <mem_init+0x88>)
 800d4aa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d4ac:	4b1c      	ldr	r3, [pc, #112]	; (800d520 <mem_init+0x88>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d4b8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d4c6:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 800d4ca:	f7ff ff1b 	bl	800d304 <ptr_to_mem>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	4a14      	ldr	r2, [pc, #80]	; (800d524 <mem_init+0x8c>)
 800d4d2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d4d4:	4b13      	ldr	r3, [pc, #76]	; (800d524 <mem_init+0x8c>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	2201      	movs	r2, #1
 800d4da:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d4dc:	4b11      	ldr	r3, [pc, #68]	; (800d524 <mem_init+0x8c>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d4e4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d4e6:	4b0f      	ldr	r3, [pc, #60]	; (800d524 <mem_init+0x8c>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d4ee:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d4f0:	4b0b      	ldr	r3, [pc, #44]	; (800d520 <mem_init+0x88>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a0c      	ldr	r2, [pc, #48]	; (800d528 <mem_init+0x90>)
 800d4f6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d4f8:	480c      	ldr	r0, [pc, #48]	; (800d52c <mem_init+0x94>)
 800d4fa:	f00a ffd3 	bl	80184a4 <sys_mutex_new>
 800d4fe:	4603      	mov	r3, r0
 800d500:	2b00      	cmp	r3, #0
 800d502:	d006      	beq.n	800d512 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d504:	4b0a      	ldr	r3, [pc, #40]	; (800d530 <mem_init+0x98>)
 800d506:	f240 221f 	movw	r2, #543	; 0x21f
 800d50a:	490a      	ldr	r1, [pc, #40]	; (800d534 <mem_init+0x9c>)
 800d50c:	480a      	ldr	r0, [pc, #40]	; (800d538 <mem_init+0xa0>)
 800d50e:	f010 f92f 	bl	801d770 <iprintf>
  }
}
 800d512:	bf00      	nop
 800d514:	3708      	adds	r7, #8
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	2000a2d8 	.word	0x2000a2d8
 800d520:	2000e2d4 	.word	0x2000e2d4
 800d524:	2000e2d8 	.word	0x2000e2d8
 800d528:	2000e2e0 	.word	0x2000e2e0
 800d52c:	2000e2dc 	.word	0x2000e2dc
 800d530:	0801f51c 	.word	0x0801f51c
 800d534:	0801f5f0 	.word	0x0801f5f0
 800d538:	0801f564 	.word	0x0801f564

0800d53c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b086      	sub	sp, #24
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f7ff feef 	bl	800d328 <mem_to_ptr>
 800d54a:	4603      	mov	r3, r0
 800d54c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	881b      	ldrh	r3, [r3, #0]
 800d552:	4618      	mov	r0, r3
 800d554:	f7ff fed6 	bl	800d304 <ptr_to_mem>
 800d558:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	885b      	ldrh	r3, [r3, #2]
 800d55e:	4618      	mov	r0, r3
 800d560:	f7ff fed0 	bl	800d304 <ptr_to_mem>
 800d564:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	881b      	ldrh	r3, [r3, #0]
 800d56a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d56e:	4293      	cmp	r3, r2
 800d570:	d819      	bhi.n	800d5a6 <mem_link_valid+0x6a>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	885b      	ldrh	r3, [r3, #2]
 800d576:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d813      	bhi.n	800d5a6 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d582:	8afa      	ldrh	r2, [r7, #22]
 800d584:	429a      	cmp	r2, r3
 800d586:	d004      	beq.n	800d592 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	881b      	ldrh	r3, [r3, #0]
 800d58c:	8afa      	ldrh	r2, [r7, #22]
 800d58e:	429a      	cmp	r2, r3
 800d590:	d109      	bne.n	800d5a6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d592:	4b08      	ldr	r3, [pc, #32]	; (800d5b4 <mem_link_valid+0x78>)
 800d594:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d596:	693a      	ldr	r2, [r7, #16]
 800d598:	429a      	cmp	r2, r3
 800d59a:	d006      	beq.n	800d5aa <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	885b      	ldrh	r3, [r3, #2]
 800d5a0:	8afa      	ldrh	r2, [r7, #22]
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d001      	beq.n	800d5aa <mem_link_valid+0x6e>
    return 0;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	e000      	b.n	800d5ac <mem_link_valid+0x70>
  }
  return 1;
 800d5aa:	2301      	movs	r3, #1
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3718      	adds	r7, #24
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	2000e2d8 	.word	0x2000e2d8

0800d5b8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b088      	sub	sp, #32
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d070      	beq.n	800d6a8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f003 0303 	and.w	r3, r3, #3
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d00d      	beq.n	800d5ec <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d5d0:	4b37      	ldr	r3, [pc, #220]	; (800d6b0 <mem_free+0xf8>)
 800d5d2:	f240 2273 	movw	r2, #627	; 0x273
 800d5d6:	4937      	ldr	r1, [pc, #220]	; (800d6b4 <mem_free+0xfc>)
 800d5d8:	4837      	ldr	r0, [pc, #220]	; (800d6b8 <mem_free+0x100>)
 800d5da:	f010 f8c9 	bl	801d770 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d5de:	f00a ffbf 	bl	8018560 <sys_arch_protect>
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	68f8      	ldr	r0, [r7, #12]
 800d5e6:	f00a ffc9 	bl	801857c <sys_arch_unprotect>
    return;
 800d5ea:	e05e      	b.n	800d6aa <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	3b08      	subs	r3, #8
 800d5f0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d5f2:	4b32      	ldr	r3, [pc, #200]	; (800d6bc <mem_free+0x104>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	69fa      	ldr	r2, [r7, #28]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d306      	bcc.n	800d60a <mem_free+0x52>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f103 020c 	add.w	r2, r3, #12
 800d602:	4b2f      	ldr	r3, [pc, #188]	; (800d6c0 <mem_free+0x108>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	429a      	cmp	r2, r3
 800d608:	d90d      	bls.n	800d626 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d60a:	4b29      	ldr	r3, [pc, #164]	; (800d6b0 <mem_free+0xf8>)
 800d60c:	f240 227f 	movw	r2, #639	; 0x27f
 800d610:	492c      	ldr	r1, [pc, #176]	; (800d6c4 <mem_free+0x10c>)
 800d612:	4829      	ldr	r0, [pc, #164]	; (800d6b8 <mem_free+0x100>)
 800d614:	f010 f8ac 	bl	801d770 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d618:	f00a ffa2 	bl	8018560 <sys_arch_protect>
 800d61c:	6138      	str	r0, [r7, #16]
 800d61e:	6938      	ldr	r0, [r7, #16]
 800d620:	f00a ffac 	bl	801857c <sys_arch_unprotect>
    return;
 800d624:	e041      	b.n	800d6aa <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d626:	4828      	ldr	r0, [pc, #160]	; (800d6c8 <mem_free+0x110>)
 800d628:	f00a ff58 	bl	80184dc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d62c:	69fb      	ldr	r3, [r7, #28]
 800d62e:	791b      	ldrb	r3, [r3, #4]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d110      	bne.n	800d656 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d634:	4b1e      	ldr	r3, [pc, #120]	; (800d6b0 <mem_free+0xf8>)
 800d636:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d63a:	4924      	ldr	r1, [pc, #144]	; (800d6cc <mem_free+0x114>)
 800d63c:	481e      	ldr	r0, [pc, #120]	; (800d6b8 <mem_free+0x100>)
 800d63e:	f010 f897 	bl	801d770 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d642:	4821      	ldr	r0, [pc, #132]	; (800d6c8 <mem_free+0x110>)
 800d644:	f00a ff59 	bl	80184fa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d648:	f00a ff8a 	bl	8018560 <sys_arch_protect>
 800d64c:	6178      	str	r0, [r7, #20]
 800d64e:	6978      	ldr	r0, [r7, #20]
 800d650:	f00a ff94 	bl	801857c <sys_arch_unprotect>
    return;
 800d654:	e029      	b.n	800d6aa <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d656:	69f8      	ldr	r0, [r7, #28]
 800d658:	f7ff ff70 	bl	800d53c <mem_link_valid>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d110      	bne.n	800d684 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d662:	4b13      	ldr	r3, [pc, #76]	; (800d6b0 <mem_free+0xf8>)
 800d664:	f240 2295 	movw	r2, #661	; 0x295
 800d668:	4919      	ldr	r1, [pc, #100]	; (800d6d0 <mem_free+0x118>)
 800d66a:	4813      	ldr	r0, [pc, #76]	; (800d6b8 <mem_free+0x100>)
 800d66c:	f010 f880 	bl	801d770 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d670:	4815      	ldr	r0, [pc, #84]	; (800d6c8 <mem_free+0x110>)
 800d672:	f00a ff42 	bl	80184fa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d676:	f00a ff73 	bl	8018560 <sys_arch_protect>
 800d67a:	61b8      	str	r0, [r7, #24]
 800d67c:	69b8      	ldr	r0, [r7, #24]
 800d67e:	f00a ff7d 	bl	801857c <sys_arch_unprotect>
    return;
 800d682:	e012      	b.n	800d6aa <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d684:	69fb      	ldr	r3, [r7, #28]
 800d686:	2200      	movs	r2, #0
 800d688:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d68a:	4b12      	ldr	r3, [pc, #72]	; (800d6d4 <mem_free+0x11c>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	69fa      	ldr	r2, [r7, #28]
 800d690:	429a      	cmp	r2, r3
 800d692:	d202      	bcs.n	800d69a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d694:	4a0f      	ldr	r2, [pc, #60]	; (800d6d4 <mem_free+0x11c>)
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d69a:	69f8      	ldr	r0, [r7, #28]
 800d69c:	f7ff fe56 	bl	800d34c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d6a0:	4809      	ldr	r0, [pc, #36]	; (800d6c8 <mem_free+0x110>)
 800d6a2:	f00a ff2a 	bl	80184fa <sys_mutex_unlock>
 800d6a6:	e000      	b.n	800d6aa <mem_free+0xf2>
    return;
 800d6a8:	bf00      	nop
}
 800d6aa:	3720      	adds	r7, #32
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	0801f51c 	.word	0x0801f51c
 800d6b4:	0801f60c 	.word	0x0801f60c
 800d6b8:	0801f564 	.word	0x0801f564
 800d6bc:	2000e2d4 	.word	0x2000e2d4
 800d6c0:	2000e2d8 	.word	0x2000e2d8
 800d6c4:	0801f630 	.word	0x0801f630
 800d6c8:	2000e2dc 	.word	0x2000e2dc
 800d6cc:	0801f64c 	.word	0x0801f64c
 800d6d0:	0801f674 	.word	0x0801f674
 800d6d4:	2000e2e0 	.word	0x2000e2e0

0800d6d8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b088      	sub	sp, #32
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	460b      	mov	r3, r1
 800d6e2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d6e4:	887b      	ldrh	r3, [r7, #2]
 800d6e6:	3303      	adds	r3, #3
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	f023 0303 	bic.w	r3, r3, #3
 800d6ee:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d6f0:	8bfb      	ldrh	r3, [r7, #30]
 800d6f2:	2b0b      	cmp	r3, #11
 800d6f4:	d801      	bhi.n	800d6fa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d6f6:	230c      	movs	r3, #12
 800d6f8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d6fa:	8bfb      	ldrh	r3, [r7, #30]
 800d6fc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d700:	4293      	cmp	r3, r2
 800d702:	d803      	bhi.n	800d70c <mem_trim+0x34>
 800d704:	8bfa      	ldrh	r2, [r7, #30]
 800d706:	887b      	ldrh	r3, [r7, #2]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d201      	bcs.n	800d710 <mem_trim+0x38>
    return NULL;
 800d70c:	2300      	movs	r3, #0
 800d70e:	e0dc      	b.n	800d8ca <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d710:	4b70      	ldr	r3, [pc, #448]	; (800d8d4 <mem_trim+0x1fc>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	429a      	cmp	r2, r3
 800d718:	d304      	bcc.n	800d724 <mem_trim+0x4c>
 800d71a:	4b6f      	ldr	r3, [pc, #444]	; (800d8d8 <mem_trim+0x200>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	429a      	cmp	r2, r3
 800d722:	d306      	bcc.n	800d732 <mem_trim+0x5a>
 800d724:	4b6d      	ldr	r3, [pc, #436]	; (800d8dc <mem_trim+0x204>)
 800d726:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d72a:	496d      	ldr	r1, [pc, #436]	; (800d8e0 <mem_trim+0x208>)
 800d72c:	486d      	ldr	r0, [pc, #436]	; (800d8e4 <mem_trim+0x20c>)
 800d72e:	f010 f81f 	bl	801d770 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d732:	4b68      	ldr	r3, [pc, #416]	; (800d8d4 <mem_trim+0x1fc>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d304      	bcc.n	800d746 <mem_trim+0x6e>
 800d73c:	4b66      	ldr	r3, [pc, #408]	; (800d8d8 <mem_trim+0x200>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	687a      	ldr	r2, [r7, #4]
 800d742:	429a      	cmp	r2, r3
 800d744:	d307      	bcc.n	800d756 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d746:	f00a ff0b 	bl	8018560 <sys_arch_protect>
 800d74a:	60b8      	str	r0, [r7, #8]
 800d74c:	68b8      	ldr	r0, [r7, #8]
 800d74e:	f00a ff15 	bl	801857c <sys_arch_unprotect>
    return rmem;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	e0b9      	b.n	800d8ca <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	3b08      	subs	r3, #8
 800d75a:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d75c:	69b8      	ldr	r0, [r7, #24]
 800d75e:	f7ff fde3 	bl	800d328 <mem_to_ptr>
 800d762:	4603      	mov	r3, r0
 800d764:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d766:	69bb      	ldr	r3, [r7, #24]
 800d768:	881a      	ldrh	r2, [r3, #0]
 800d76a:	8afb      	ldrh	r3, [r7, #22]
 800d76c:	1ad3      	subs	r3, r2, r3
 800d76e:	b29b      	uxth	r3, r3
 800d770:	3b08      	subs	r3, #8
 800d772:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d774:	8bfa      	ldrh	r2, [r7, #30]
 800d776:	8abb      	ldrh	r3, [r7, #20]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d906      	bls.n	800d78a <mem_trim+0xb2>
 800d77c:	4b57      	ldr	r3, [pc, #348]	; (800d8dc <mem_trim+0x204>)
 800d77e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d782:	4959      	ldr	r1, [pc, #356]	; (800d8e8 <mem_trim+0x210>)
 800d784:	4857      	ldr	r0, [pc, #348]	; (800d8e4 <mem_trim+0x20c>)
 800d786:	f00f fff3 	bl	801d770 <iprintf>
  if (newsize > size) {
 800d78a:	8bfa      	ldrh	r2, [r7, #30]
 800d78c:	8abb      	ldrh	r3, [r7, #20]
 800d78e:	429a      	cmp	r2, r3
 800d790:	d901      	bls.n	800d796 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800d792:	2300      	movs	r3, #0
 800d794:	e099      	b.n	800d8ca <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800d796:	8bfa      	ldrh	r2, [r7, #30]
 800d798:	8abb      	ldrh	r3, [r7, #20]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d101      	bne.n	800d7a2 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	e093      	b.n	800d8ca <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d7a2:	4852      	ldr	r0, [pc, #328]	; (800d8ec <mem_trim+0x214>)
 800d7a4:	f00a fe9a 	bl	80184dc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d7a8:	69bb      	ldr	r3, [r7, #24]
 800d7aa:	881b      	ldrh	r3, [r3, #0]
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7ff fda9 	bl	800d304 <ptr_to_mem>
 800d7b2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	791b      	ldrb	r3, [r3, #4]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d141      	bne.n	800d840 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	881b      	ldrh	r3, [r3, #0]
 800d7c0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d106      	bne.n	800d7d6 <mem_trim+0xfe>
 800d7c8:	4b44      	ldr	r3, [pc, #272]	; (800d8dc <mem_trim+0x204>)
 800d7ca:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d7ce:	4948      	ldr	r1, [pc, #288]	; (800d8f0 <mem_trim+0x218>)
 800d7d0:	4844      	ldr	r0, [pc, #272]	; (800d8e4 <mem_trim+0x20c>)
 800d7d2:	f00f ffcd 	bl	801d770 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	881b      	ldrh	r3, [r3, #0]
 800d7da:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d7dc:	8afa      	ldrh	r2, [r7, #22]
 800d7de:	8bfb      	ldrh	r3, [r7, #30]
 800d7e0:	4413      	add	r3, r2
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	3308      	adds	r3, #8
 800d7e6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d7e8:	4b42      	ldr	r3, [pc, #264]	; (800d8f4 <mem_trim+0x21c>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	693a      	ldr	r2, [r7, #16]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d106      	bne.n	800d800 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800d7f2:	89fb      	ldrh	r3, [r7, #14]
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7ff fd85 	bl	800d304 <ptr_to_mem>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	4a3d      	ldr	r2, [pc, #244]	; (800d8f4 <mem_trim+0x21c>)
 800d7fe:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d800:	89fb      	ldrh	r3, [r7, #14]
 800d802:	4618      	mov	r0, r3
 800d804:	f7ff fd7e 	bl	800d304 <ptr_to_mem>
 800d808:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	2200      	movs	r2, #0
 800d80e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	89ba      	ldrh	r2, [r7, #12]
 800d814:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	8afa      	ldrh	r2, [r7, #22]
 800d81a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d81c:	69bb      	ldr	r3, [r7, #24]
 800d81e:	89fa      	ldrh	r2, [r7, #14]
 800d820:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	881b      	ldrh	r3, [r3, #0]
 800d826:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d049      	beq.n	800d8c2 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	881b      	ldrh	r3, [r3, #0]
 800d832:	4618      	mov	r0, r3
 800d834:	f7ff fd66 	bl	800d304 <ptr_to_mem>
 800d838:	4602      	mov	r2, r0
 800d83a:	89fb      	ldrh	r3, [r7, #14]
 800d83c:	8053      	strh	r3, [r2, #2]
 800d83e:	e040      	b.n	800d8c2 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d840:	8bfb      	ldrh	r3, [r7, #30]
 800d842:	f103 0214 	add.w	r2, r3, #20
 800d846:	8abb      	ldrh	r3, [r7, #20]
 800d848:	429a      	cmp	r2, r3
 800d84a:	d83a      	bhi.n	800d8c2 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d84c:	8afa      	ldrh	r2, [r7, #22]
 800d84e:	8bfb      	ldrh	r3, [r7, #30]
 800d850:	4413      	add	r3, r2
 800d852:	b29b      	uxth	r3, r3
 800d854:	3308      	adds	r3, #8
 800d856:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d858:	69bb      	ldr	r3, [r7, #24]
 800d85a:	881b      	ldrh	r3, [r3, #0]
 800d85c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d860:	4293      	cmp	r3, r2
 800d862:	d106      	bne.n	800d872 <mem_trim+0x19a>
 800d864:	4b1d      	ldr	r3, [pc, #116]	; (800d8dc <mem_trim+0x204>)
 800d866:	f240 3216 	movw	r2, #790	; 0x316
 800d86a:	4921      	ldr	r1, [pc, #132]	; (800d8f0 <mem_trim+0x218>)
 800d86c:	481d      	ldr	r0, [pc, #116]	; (800d8e4 <mem_trim+0x20c>)
 800d86e:	f00f ff7f 	bl	801d770 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d872:	89fb      	ldrh	r3, [r7, #14]
 800d874:	4618      	mov	r0, r3
 800d876:	f7ff fd45 	bl	800d304 <ptr_to_mem>
 800d87a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d87c:	4b1d      	ldr	r3, [pc, #116]	; (800d8f4 <mem_trim+0x21c>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	693a      	ldr	r2, [r7, #16]
 800d882:	429a      	cmp	r2, r3
 800d884:	d202      	bcs.n	800d88c <mem_trim+0x1b4>
      lfree = mem2;
 800d886:	4a1b      	ldr	r2, [pc, #108]	; (800d8f4 <mem_trim+0x21c>)
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	2200      	movs	r2, #0
 800d890:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d892:	69bb      	ldr	r3, [r7, #24]
 800d894:	881a      	ldrh	r2, [r3, #0]
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	8afa      	ldrh	r2, [r7, #22]
 800d89e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d8a0:	69bb      	ldr	r3, [r7, #24]
 800d8a2:	89fa      	ldrh	r2, [r7, #14]
 800d8a4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	881b      	ldrh	r3, [r3, #0]
 800d8aa:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d007      	beq.n	800d8c2 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	881b      	ldrh	r3, [r3, #0]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7ff fd24 	bl	800d304 <ptr_to_mem>
 800d8bc:	4602      	mov	r2, r0
 800d8be:	89fb      	ldrh	r3, [r7, #14]
 800d8c0:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d8c2:	480a      	ldr	r0, [pc, #40]	; (800d8ec <mem_trim+0x214>)
 800d8c4:	f00a fe19 	bl	80184fa <sys_mutex_unlock>
  return rmem;
 800d8c8:	687b      	ldr	r3, [r7, #4]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3720      	adds	r7, #32
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	2000e2d4 	.word	0x2000e2d4
 800d8d8:	2000e2d8 	.word	0x2000e2d8
 800d8dc:	0801f51c 	.word	0x0801f51c
 800d8e0:	0801f6a8 	.word	0x0801f6a8
 800d8e4:	0801f564 	.word	0x0801f564
 800d8e8:	0801f6c0 	.word	0x0801f6c0
 800d8ec:	2000e2dc 	.word	0x2000e2dc
 800d8f0:	0801f6e0 	.word	0x0801f6e0
 800d8f4:	2000e2e0 	.word	0x2000e2e0

0800d8f8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b088      	sub	sp, #32
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	4603      	mov	r3, r0
 800d900:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d902:	88fb      	ldrh	r3, [r7, #6]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d101      	bne.n	800d90c <mem_malloc+0x14>
    return NULL;
 800d908:	2300      	movs	r3, #0
 800d90a:	e0e6      	b.n	800dada <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d90c:	88fb      	ldrh	r3, [r7, #6]
 800d90e:	3303      	adds	r3, #3
 800d910:	b29b      	uxth	r3, r3
 800d912:	f023 0303 	bic.w	r3, r3, #3
 800d916:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d918:	8bbb      	ldrh	r3, [r7, #28]
 800d91a:	2b0b      	cmp	r3, #11
 800d91c:	d801      	bhi.n	800d922 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d91e:	230c      	movs	r3, #12
 800d920:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d922:	8bbb      	ldrh	r3, [r7, #28]
 800d924:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d928:	4293      	cmp	r3, r2
 800d92a:	d803      	bhi.n	800d934 <mem_malloc+0x3c>
 800d92c:	8bba      	ldrh	r2, [r7, #28]
 800d92e:	88fb      	ldrh	r3, [r7, #6]
 800d930:	429a      	cmp	r2, r3
 800d932:	d201      	bcs.n	800d938 <mem_malloc+0x40>
    return NULL;
 800d934:	2300      	movs	r3, #0
 800d936:	e0d0      	b.n	800dada <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d938:	486a      	ldr	r0, [pc, #424]	; (800dae4 <mem_malloc+0x1ec>)
 800d93a:	f00a fdcf 	bl	80184dc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d93e:	4b6a      	ldr	r3, [pc, #424]	; (800dae8 <mem_malloc+0x1f0>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	4618      	mov	r0, r3
 800d944:	f7ff fcf0 	bl	800d328 <mem_to_ptr>
 800d948:	4603      	mov	r3, r0
 800d94a:	83fb      	strh	r3, [r7, #30]
 800d94c:	e0b9      	b.n	800dac2 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d94e:	8bfb      	ldrh	r3, [r7, #30]
 800d950:	4618      	mov	r0, r3
 800d952:	f7ff fcd7 	bl	800d304 <ptr_to_mem>
 800d956:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	791b      	ldrb	r3, [r3, #4]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f040 80a9 	bne.w	800dab4 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	881b      	ldrh	r3, [r3, #0]
 800d966:	461a      	mov	r2, r3
 800d968:	8bfb      	ldrh	r3, [r7, #30]
 800d96a:	1ad3      	subs	r3, r2, r3
 800d96c:	f1a3 0208 	sub.w	r2, r3, #8
 800d970:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d972:	429a      	cmp	r2, r3
 800d974:	f0c0 809e 	bcc.w	800dab4 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	881b      	ldrh	r3, [r3, #0]
 800d97c:	461a      	mov	r2, r3
 800d97e:	8bfb      	ldrh	r3, [r7, #30]
 800d980:	1ad3      	subs	r3, r2, r3
 800d982:	f1a3 0208 	sub.w	r2, r3, #8
 800d986:	8bbb      	ldrh	r3, [r7, #28]
 800d988:	3314      	adds	r3, #20
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d335      	bcc.n	800d9fa <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d98e:	8bfa      	ldrh	r2, [r7, #30]
 800d990:	8bbb      	ldrh	r3, [r7, #28]
 800d992:	4413      	add	r3, r2
 800d994:	b29b      	uxth	r3, r3
 800d996:	3308      	adds	r3, #8
 800d998:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d99a:	8a7b      	ldrh	r3, [r7, #18]
 800d99c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d106      	bne.n	800d9b2 <mem_malloc+0xba>
 800d9a4:	4b51      	ldr	r3, [pc, #324]	; (800daec <mem_malloc+0x1f4>)
 800d9a6:	f240 3287 	movw	r2, #903	; 0x387
 800d9aa:	4951      	ldr	r1, [pc, #324]	; (800daf0 <mem_malloc+0x1f8>)
 800d9ac:	4851      	ldr	r0, [pc, #324]	; (800daf4 <mem_malloc+0x1fc>)
 800d9ae:	f00f fedf 	bl	801d770 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d9b2:	8a7b      	ldrh	r3, [r7, #18]
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7ff fca5 	bl	800d304 <ptr_to_mem>
 800d9ba:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	881a      	ldrh	r2, [r3, #0]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	8bfa      	ldrh	r2, [r7, #30]
 800d9ce:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	8a7a      	ldrh	r2, [r7, #18]
 800d9d4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	2201      	movs	r2, #1
 800d9da:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	881b      	ldrh	r3, [r3, #0]
 800d9e0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d00b      	beq.n	800da00 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	881b      	ldrh	r3, [r3, #0]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7ff fc89 	bl	800d304 <ptr_to_mem>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	8a7b      	ldrh	r3, [r7, #18]
 800d9f6:	8053      	strh	r3, [r2, #2]
 800d9f8:	e002      	b.n	800da00 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800da00:	4b39      	ldr	r3, [pc, #228]	; (800dae8 <mem_malloc+0x1f0>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	697a      	ldr	r2, [r7, #20]
 800da06:	429a      	cmp	r2, r3
 800da08:	d127      	bne.n	800da5a <mem_malloc+0x162>
          struct mem *cur = lfree;
 800da0a:	4b37      	ldr	r3, [pc, #220]	; (800dae8 <mem_malloc+0x1f0>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800da10:	e005      	b.n	800da1e <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	881b      	ldrh	r3, [r3, #0]
 800da16:	4618      	mov	r0, r3
 800da18:	f7ff fc74 	bl	800d304 <ptr_to_mem>
 800da1c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	791b      	ldrb	r3, [r3, #4]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d004      	beq.n	800da30 <mem_malloc+0x138>
 800da26:	4b34      	ldr	r3, [pc, #208]	; (800daf8 <mem_malloc+0x200>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	69ba      	ldr	r2, [r7, #24]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d1f0      	bne.n	800da12 <mem_malloc+0x11a>
          }
          lfree = cur;
 800da30:	4a2d      	ldr	r2, [pc, #180]	; (800dae8 <mem_malloc+0x1f0>)
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800da36:	4b2c      	ldr	r3, [pc, #176]	; (800dae8 <mem_malloc+0x1f0>)
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	4b2f      	ldr	r3, [pc, #188]	; (800daf8 <mem_malloc+0x200>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	429a      	cmp	r2, r3
 800da40:	d00b      	beq.n	800da5a <mem_malloc+0x162>
 800da42:	4b29      	ldr	r3, [pc, #164]	; (800dae8 <mem_malloc+0x1f0>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	791b      	ldrb	r3, [r3, #4]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d006      	beq.n	800da5a <mem_malloc+0x162>
 800da4c:	4b27      	ldr	r3, [pc, #156]	; (800daec <mem_malloc+0x1f4>)
 800da4e:	f240 32b5 	movw	r2, #949	; 0x3b5
 800da52:	492a      	ldr	r1, [pc, #168]	; (800dafc <mem_malloc+0x204>)
 800da54:	4827      	ldr	r0, [pc, #156]	; (800daf4 <mem_malloc+0x1fc>)
 800da56:	f00f fe8b 	bl	801d770 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800da5a:	4822      	ldr	r0, [pc, #136]	; (800dae4 <mem_malloc+0x1ec>)
 800da5c:	f00a fd4d 	bl	80184fa <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800da60:	8bba      	ldrh	r2, [r7, #28]
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	4413      	add	r3, r2
 800da66:	3308      	adds	r3, #8
 800da68:	4a23      	ldr	r2, [pc, #140]	; (800daf8 <mem_malloc+0x200>)
 800da6a:	6812      	ldr	r2, [r2, #0]
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d906      	bls.n	800da7e <mem_malloc+0x186>
 800da70:	4b1e      	ldr	r3, [pc, #120]	; (800daec <mem_malloc+0x1f4>)
 800da72:	f240 32b9 	movw	r2, #953	; 0x3b9
 800da76:	4922      	ldr	r1, [pc, #136]	; (800db00 <mem_malloc+0x208>)
 800da78:	481e      	ldr	r0, [pc, #120]	; (800daf4 <mem_malloc+0x1fc>)
 800da7a:	f00f fe79 	bl	801d770 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	f003 0303 	and.w	r3, r3, #3
 800da84:	2b00      	cmp	r3, #0
 800da86:	d006      	beq.n	800da96 <mem_malloc+0x19e>
 800da88:	4b18      	ldr	r3, [pc, #96]	; (800daec <mem_malloc+0x1f4>)
 800da8a:	f240 32bb 	movw	r2, #955	; 0x3bb
 800da8e:	491d      	ldr	r1, [pc, #116]	; (800db04 <mem_malloc+0x20c>)
 800da90:	4818      	ldr	r0, [pc, #96]	; (800daf4 <mem_malloc+0x1fc>)
 800da92:	f00f fe6d 	bl	801d770 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	f003 0303 	and.w	r3, r3, #3
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d006      	beq.n	800daae <mem_malloc+0x1b6>
 800daa0:	4b12      	ldr	r3, [pc, #72]	; (800daec <mem_malloc+0x1f4>)
 800daa2:	f240 32bd 	movw	r2, #957	; 0x3bd
 800daa6:	4918      	ldr	r1, [pc, #96]	; (800db08 <mem_malloc+0x210>)
 800daa8:	4812      	ldr	r0, [pc, #72]	; (800daf4 <mem_malloc+0x1fc>)
 800daaa:	f00f fe61 	bl	801d770 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	3308      	adds	r3, #8
 800dab2:	e012      	b.n	800dada <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800dab4:	8bfb      	ldrh	r3, [r7, #30]
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7ff fc24 	bl	800d304 <ptr_to_mem>
 800dabc:	4603      	mov	r3, r0
 800dabe:	881b      	ldrh	r3, [r3, #0]
 800dac0:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800dac2:	8bfa      	ldrh	r2, [r7, #30]
 800dac4:	8bb9      	ldrh	r1, [r7, #28]
 800dac6:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800daca:	1a5b      	subs	r3, r3, r1
 800dacc:	429a      	cmp	r2, r3
 800dace:	f4ff af3e 	bcc.w	800d94e <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800dad2:	4804      	ldr	r0, [pc, #16]	; (800dae4 <mem_malloc+0x1ec>)
 800dad4:	f00a fd11 	bl	80184fa <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800dad8:	2300      	movs	r3, #0
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3720      	adds	r7, #32
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	2000e2dc 	.word	0x2000e2dc
 800dae8:	2000e2e0 	.word	0x2000e2e0
 800daec:	0801f51c 	.word	0x0801f51c
 800daf0:	0801f6e0 	.word	0x0801f6e0
 800daf4:	0801f564 	.word	0x0801f564
 800daf8:	2000e2d8 	.word	0x2000e2d8
 800dafc:	0801f6f4 	.word	0x0801f6f4
 800db00:	0801f710 	.word	0x0801f710
 800db04:	0801f740 	.word	0x0801f740
 800db08:	0801f770 	.word	0x0801f770

0800db0c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b085      	sub	sp, #20
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	689b      	ldr	r3, [r3, #8]
 800db18:	2200      	movs	r2, #0
 800db1a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	3303      	adds	r3, #3
 800db22:	f023 0303 	bic.w	r3, r3, #3
 800db26:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800db28:	2300      	movs	r3, #0
 800db2a:	60fb      	str	r3, [r7, #12]
 800db2c:	e011      	b.n	800db52 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	689b      	ldr	r3, [r3, #8]
 800db32:	681a      	ldr	r2, [r3, #0]
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	689b      	ldr	r3, [r3, #8]
 800db3c:	68ba      	ldr	r2, [r7, #8]
 800db3e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	881b      	ldrh	r3, [r3, #0]
 800db44:	461a      	mov	r2, r3
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	4413      	add	r3, r2
 800db4a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	3301      	adds	r3, #1
 800db50:	60fb      	str	r3, [r7, #12]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	885b      	ldrh	r3, [r3, #2]
 800db56:	461a      	mov	r2, r3
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	4293      	cmp	r3, r2
 800db5c:	dbe7      	blt.n	800db2e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800db5e:	bf00      	nop
 800db60:	bf00      	nop
 800db62:	3714      	adds	r7, #20
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr

0800db6c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800db72:	2300      	movs	r3, #0
 800db74:	80fb      	strh	r3, [r7, #6]
 800db76:	e009      	b.n	800db8c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800db78:	88fb      	ldrh	r3, [r7, #6]
 800db7a:	4a08      	ldr	r2, [pc, #32]	; (800db9c <memp_init+0x30>)
 800db7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db80:	4618      	mov	r0, r3
 800db82:	f7ff ffc3 	bl	800db0c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800db86:	88fb      	ldrh	r3, [r7, #6]
 800db88:	3301      	adds	r3, #1
 800db8a:	80fb      	strh	r3, [r7, #6]
 800db8c:	88fb      	ldrh	r3, [r7, #6]
 800db8e:	2b0c      	cmp	r3, #12
 800db90:	d9f2      	bls.n	800db78 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800db92:	bf00      	nop
 800db94:	bf00      	nop
 800db96:	3708      	adds	r7, #8
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	08022324 	.word	0x08022324

0800dba0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800dba8:	f00a fcda 	bl	8018560 <sys_arch_protect>
 800dbac:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	689b      	ldr	r3, [r3, #8]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d015      	beq.n	800dbe8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	689b      	ldr	r3, [r3, #8]
 800dbc0:	68ba      	ldr	r2, [r7, #8]
 800dbc2:	6812      	ldr	r2, [r2, #0]
 800dbc4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	f003 0303 	and.w	r3, r3, #3
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d006      	beq.n	800dbde <do_memp_malloc_pool+0x3e>
 800dbd0:	4b09      	ldr	r3, [pc, #36]	; (800dbf8 <do_memp_malloc_pool+0x58>)
 800dbd2:	f44f 728c 	mov.w	r2, #280	; 0x118
 800dbd6:	4909      	ldr	r1, [pc, #36]	; (800dbfc <do_memp_malloc_pool+0x5c>)
 800dbd8:	4809      	ldr	r0, [pc, #36]	; (800dc00 <do_memp_malloc_pool+0x60>)
 800dbda:	f00f fdc9 	bl	801d770 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800dbde:	68f8      	ldr	r0, [r7, #12]
 800dbe0:	f00a fccc 	bl	801857c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	e003      	b.n	800dbf0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f00a fcc7 	bl	801857c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800dbee:	2300      	movs	r3, #0
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3710      	adds	r7, #16
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	0801f794 	.word	0x0801f794
 800dbfc:	0801f7c4 	.word	0x0801f7c4
 800dc00:	0801f7e8 	.word	0x0801f7e8

0800dc04 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d106      	bne.n	800dc20 <memp_malloc_pool+0x1c>
 800dc12:	4b0a      	ldr	r3, [pc, #40]	; (800dc3c <memp_malloc_pool+0x38>)
 800dc14:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800dc18:	4909      	ldr	r1, [pc, #36]	; (800dc40 <memp_malloc_pool+0x3c>)
 800dc1a:	480a      	ldr	r0, [pc, #40]	; (800dc44 <memp_malloc_pool+0x40>)
 800dc1c:	f00f fda8 	bl	801d770 <iprintf>
  if (desc == NULL) {
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d101      	bne.n	800dc2a <memp_malloc_pool+0x26>
    return NULL;
 800dc26:	2300      	movs	r3, #0
 800dc28:	e003      	b.n	800dc32 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f7ff ffb8 	bl	800dba0 <do_memp_malloc_pool>
 800dc30:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3708      	adds	r7, #8
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	0801f794 	.word	0x0801f794
 800dc40:	0801f810 	.word	0x0801f810
 800dc44:	0801f7e8 	.word	0x0801f7e8

0800dc48 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b084      	sub	sp, #16
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	4603      	mov	r3, r0
 800dc50:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800dc52:	79fb      	ldrb	r3, [r7, #7]
 800dc54:	2b0c      	cmp	r3, #12
 800dc56:	d908      	bls.n	800dc6a <memp_malloc+0x22>
 800dc58:	4b0a      	ldr	r3, [pc, #40]	; (800dc84 <memp_malloc+0x3c>)
 800dc5a:	f240 1257 	movw	r2, #343	; 0x157
 800dc5e:	490a      	ldr	r1, [pc, #40]	; (800dc88 <memp_malloc+0x40>)
 800dc60:	480a      	ldr	r0, [pc, #40]	; (800dc8c <memp_malloc+0x44>)
 800dc62:	f00f fd85 	bl	801d770 <iprintf>
 800dc66:	2300      	movs	r3, #0
 800dc68:	e008      	b.n	800dc7c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800dc6a:	79fb      	ldrb	r3, [r7, #7]
 800dc6c:	4a08      	ldr	r2, [pc, #32]	; (800dc90 <memp_malloc+0x48>)
 800dc6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7ff ff94 	bl	800dba0 <do_memp_malloc_pool>
 800dc78:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3710      	adds	r7, #16
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	0801f794 	.word	0x0801f794
 800dc88:	0801f824 	.word	0x0801f824
 800dc8c:	0801f7e8 	.word	0x0801f7e8
 800dc90:	08022324 	.word	0x08022324

0800dc94 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	f003 0303 	and.w	r3, r3, #3
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d006      	beq.n	800dcb6 <do_memp_free_pool+0x22>
 800dca8:	4b0d      	ldr	r3, [pc, #52]	; (800dce0 <do_memp_free_pool+0x4c>)
 800dcaa:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800dcae:	490d      	ldr	r1, [pc, #52]	; (800dce4 <do_memp_free_pool+0x50>)
 800dcb0:	480d      	ldr	r0, [pc, #52]	; (800dce8 <do_memp_free_pool+0x54>)
 800dcb2:	f00f fd5d 	bl	801d770 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800dcba:	f00a fc51 	bl	8018560 <sys_arch_protect>
 800dcbe:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	689b      	ldr	r3, [r3, #8]
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	689b      	ldr	r3, [r3, #8]
 800dcce:	68fa      	ldr	r2, [r7, #12]
 800dcd0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800dcd2:	68b8      	ldr	r0, [r7, #8]
 800dcd4:	f00a fc52 	bl	801857c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800dcd8:	bf00      	nop
 800dcda:	3710      	adds	r7, #16
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}
 800dce0:	0801f794 	.word	0x0801f794
 800dce4:	0801f844 	.word	0x0801f844
 800dce8:	0801f7e8 	.word	0x0801f7e8

0800dcec <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d106      	bne.n	800dd0a <memp_free_pool+0x1e>
 800dcfc:	4b0a      	ldr	r3, [pc, #40]	; (800dd28 <memp_free_pool+0x3c>)
 800dcfe:	f240 1295 	movw	r2, #405	; 0x195
 800dd02:	490a      	ldr	r1, [pc, #40]	; (800dd2c <memp_free_pool+0x40>)
 800dd04:	480a      	ldr	r0, [pc, #40]	; (800dd30 <memp_free_pool+0x44>)
 800dd06:	f00f fd33 	bl	801d770 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d007      	beq.n	800dd20 <memp_free_pool+0x34>
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d004      	beq.n	800dd20 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800dd16:	6839      	ldr	r1, [r7, #0]
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f7ff ffbb 	bl	800dc94 <do_memp_free_pool>
 800dd1e:	e000      	b.n	800dd22 <memp_free_pool+0x36>
    return;
 800dd20:	bf00      	nop
}
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	0801f794 	.word	0x0801f794
 800dd2c:	0801f810 	.word	0x0801f810
 800dd30:	0801f7e8 	.word	0x0801f7e8

0800dd34 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	6039      	str	r1, [r7, #0]
 800dd3e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800dd40:	79fb      	ldrb	r3, [r7, #7]
 800dd42:	2b0c      	cmp	r3, #12
 800dd44:	d907      	bls.n	800dd56 <memp_free+0x22>
 800dd46:	4b0c      	ldr	r3, [pc, #48]	; (800dd78 <memp_free+0x44>)
 800dd48:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800dd4c:	490b      	ldr	r1, [pc, #44]	; (800dd7c <memp_free+0x48>)
 800dd4e:	480c      	ldr	r0, [pc, #48]	; (800dd80 <memp_free+0x4c>)
 800dd50:	f00f fd0e 	bl	801d770 <iprintf>
 800dd54:	e00c      	b.n	800dd70 <memp_free+0x3c>

  if (mem == NULL) {
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d008      	beq.n	800dd6e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800dd5c:	79fb      	ldrb	r3, [r7, #7]
 800dd5e:	4a09      	ldr	r2, [pc, #36]	; (800dd84 <memp_free+0x50>)
 800dd60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd64:	6839      	ldr	r1, [r7, #0]
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7ff ff94 	bl	800dc94 <do_memp_free_pool>
 800dd6c:	e000      	b.n	800dd70 <memp_free+0x3c>
    return;
 800dd6e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800dd70:	3708      	adds	r7, #8
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	0801f794 	.word	0x0801f794
 800dd7c:	0801f864 	.word	0x0801f864
 800dd80:	0801f7e8 	.word	0x0801f7e8
 800dd84:	08022324 	.word	0x08022324

0800dd88 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800dd8c:	bf00      	nop
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr
	...

0800dd98 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b086      	sub	sp, #24
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	60f8      	str	r0, [r7, #12]
 800dda0:	60b9      	str	r1, [r7, #8]
 800dda2:	607a      	str	r2, [r7, #4]
 800dda4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d108      	bne.n	800ddbe <netif_add+0x26>
 800ddac:	4b57      	ldr	r3, [pc, #348]	; (800df0c <netif_add+0x174>)
 800ddae:	f240 1227 	movw	r2, #295	; 0x127
 800ddb2:	4957      	ldr	r1, [pc, #348]	; (800df10 <netif_add+0x178>)
 800ddb4:	4857      	ldr	r0, [pc, #348]	; (800df14 <netif_add+0x17c>)
 800ddb6:	f00f fcdb 	bl	801d770 <iprintf>
 800ddba:	2300      	movs	r3, #0
 800ddbc:	e0a2      	b.n	800df04 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ddbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d108      	bne.n	800ddd6 <netif_add+0x3e>
 800ddc4:	4b51      	ldr	r3, [pc, #324]	; (800df0c <netif_add+0x174>)
 800ddc6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ddca:	4953      	ldr	r1, [pc, #332]	; (800df18 <netif_add+0x180>)
 800ddcc:	4851      	ldr	r0, [pc, #324]	; (800df14 <netif_add+0x17c>)
 800ddce:	f00f fccf 	bl	801d770 <iprintf>
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	e096      	b.n	800df04 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d101      	bne.n	800dde0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800dddc:	4b4f      	ldr	r3, [pc, #316]	; (800df1c <netif_add+0x184>)
 800ddde:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d101      	bne.n	800ddea <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800dde6:	4b4d      	ldr	r3, [pc, #308]	; (800df1c <netif_add+0x184>)
 800dde8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d101      	bne.n	800ddf4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ddf0:	4b4a      	ldr	r3, [pc, #296]	; (800df1c <netif_add+0x184>)
 800ddf2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2200      	movs	r2, #0
 800de04:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	4a45      	ldr	r2, [pc, #276]	; (800df20 <netif_add+0x188>)
 800de0a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2200      	movs	r2, #0
 800de10:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2200      	movs	r2, #0
 800de16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2200      	movs	r2, #0
 800de1e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	6a3a      	ldr	r2, [r7, #32]
 800de24:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800de26:	4b3f      	ldr	r3, [pc, #252]	; (800df24 <netif_add+0x18c>)
 800de28:	781a      	ldrb	r2, [r3, #0]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de34:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	687a      	ldr	r2, [r7, #4]
 800de3a:	68b9      	ldr	r1, [r7, #8]
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	f000 f913 	bl	800e068 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800de42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de44:	68f8      	ldr	r0, [r7, #12]
 800de46:	4798      	blx	r3
 800de48:	4603      	mov	r3, r0
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d001      	beq.n	800de52 <netif_add+0xba>
    return NULL;
 800de4e:	2300      	movs	r3, #0
 800de50:	e058      	b.n	800df04 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de58:	2bff      	cmp	r3, #255	; 0xff
 800de5a:	d103      	bne.n	800de64 <netif_add+0xcc>
        netif->num = 0;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2200      	movs	r2, #0
 800de60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800de64:	2300      	movs	r3, #0
 800de66:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800de68:	4b2f      	ldr	r3, [pc, #188]	; (800df28 <netif_add+0x190>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	617b      	str	r3, [r7, #20]
 800de6e:	e02b      	b.n	800dec8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800de70:	697a      	ldr	r2, [r7, #20]
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	429a      	cmp	r2, r3
 800de76:	d106      	bne.n	800de86 <netif_add+0xee>
 800de78:	4b24      	ldr	r3, [pc, #144]	; (800df0c <netif_add+0x174>)
 800de7a:	f240 128b 	movw	r2, #395	; 0x18b
 800de7e:	492b      	ldr	r1, [pc, #172]	; (800df2c <netif_add+0x194>)
 800de80:	4824      	ldr	r0, [pc, #144]	; (800df14 <netif_add+0x17c>)
 800de82:	f00f fc75 	bl	801d770 <iprintf>
        num_netifs++;
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	3301      	adds	r3, #1
 800de8a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	2bff      	cmp	r3, #255	; 0xff
 800de90:	dd06      	ble.n	800dea0 <netif_add+0x108>
 800de92:	4b1e      	ldr	r3, [pc, #120]	; (800df0c <netif_add+0x174>)
 800de94:	f240 128d 	movw	r2, #397	; 0x18d
 800de98:	4925      	ldr	r1, [pc, #148]	; (800df30 <netif_add+0x198>)
 800de9a:	481e      	ldr	r0, [pc, #120]	; (800df14 <netif_add+0x17c>)
 800de9c:	f00f fc68 	bl	801d770 <iprintf>
        if (netif2->num == netif->num) {
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800deac:	429a      	cmp	r2, r3
 800deae:	d108      	bne.n	800dec2 <netif_add+0x12a>
          netif->num++;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800deb6:	3301      	adds	r3, #1
 800deb8:	b2da      	uxtb	r2, r3
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800dec0:	e005      	b.n	800dece <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	617b      	str	r3, [r7, #20]
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d1d0      	bne.n	800de70 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d1be      	bne.n	800de52 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800deda:	2bfe      	cmp	r3, #254	; 0xfe
 800dedc:	d103      	bne.n	800dee6 <netif_add+0x14e>
    netif_num = 0;
 800dede:	4b11      	ldr	r3, [pc, #68]	; (800df24 <netif_add+0x18c>)
 800dee0:	2200      	movs	r2, #0
 800dee2:	701a      	strb	r2, [r3, #0]
 800dee4:	e006      	b.n	800def4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800deec:	3301      	adds	r3, #1
 800deee:	b2da      	uxtb	r2, r3
 800def0:	4b0c      	ldr	r3, [pc, #48]	; (800df24 <netif_add+0x18c>)
 800def2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800def4:	4b0c      	ldr	r3, [pc, #48]	; (800df28 <netif_add+0x190>)
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800defc:	4a0a      	ldr	r2, [pc, #40]	; (800df28 <netif_add+0x190>)
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800df02:	68fb      	ldr	r3, [r7, #12]
}
 800df04:	4618      	mov	r0, r3
 800df06:	3718      	adds	r7, #24
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	0801f880 	.word	0x0801f880
 800df10:	0801f914 	.word	0x0801f914
 800df14:	0801f8d0 	.word	0x0801f8d0
 800df18:	0801f930 	.word	0x0801f930
 800df1c:	08022398 	.word	0x08022398
 800df20:	0800e343 	.word	0x0800e343
 800df24:	200113b8 	.word	0x200113b8
 800df28:	200113b0 	.word	0x200113b0
 800df2c:	0801f954 	.word	0x0801f954
 800df30:	0801f968 	.word	0x0801f968

0800df34 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800df3e:	6839      	ldr	r1, [r7, #0]
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f002 fe05 	bl	8010b50 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800df46:	6839      	ldr	r1, [r7, #0]
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f007 fd25 	bl	8015998 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800df4e:	bf00      	nop
 800df50:	3708      	adds	r7, #8
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
	...

0800df58 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b086      	sub	sp, #24
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d106      	bne.n	800df78 <netif_do_set_ipaddr+0x20>
 800df6a:	4b1d      	ldr	r3, [pc, #116]	; (800dfe0 <netif_do_set_ipaddr+0x88>)
 800df6c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800df70:	491c      	ldr	r1, [pc, #112]	; (800dfe4 <netif_do_set_ipaddr+0x8c>)
 800df72:	481d      	ldr	r0, [pc, #116]	; (800dfe8 <netif_do_set_ipaddr+0x90>)
 800df74:	f00f fbfc 	bl	801d770 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d106      	bne.n	800df8c <netif_do_set_ipaddr+0x34>
 800df7e:	4b18      	ldr	r3, [pc, #96]	; (800dfe0 <netif_do_set_ipaddr+0x88>)
 800df80:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800df84:	4917      	ldr	r1, [pc, #92]	; (800dfe4 <netif_do_set_ipaddr+0x8c>)
 800df86:	4818      	ldr	r0, [pc, #96]	; (800dfe8 <netif_do_set_ipaddr+0x90>)
 800df88:	f00f fbf2 	bl	801d770 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	681a      	ldr	r2, [r3, #0]
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	3304      	adds	r3, #4
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	429a      	cmp	r2, r3
 800df98:	d01c      	beq.n	800dfd4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	3304      	adds	r3, #4
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800dfaa:	f107 0314 	add.w	r3, r7, #20
 800dfae:	4619      	mov	r1, r3
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f7ff ffbf 	bl	800df34 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d002      	beq.n	800dfc2 <netif_do_set_ipaddr+0x6a>
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	e000      	b.n	800dfc4 <netif_do_set_ipaddr+0x6c>
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	68fa      	ldr	r2, [r7, #12]
 800dfc6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dfc8:	2101      	movs	r1, #1
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	f000 f8d2 	bl	800e174 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	e000      	b.n	800dfd6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800dfd4:	2300      	movs	r3, #0
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3718      	adds	r7, #24
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
 800dfde:	bf00      	nop
 800dfe0:	0801f880 	.word	0x0801f880
 800dfe4:	0801f998 	.word	0x0801f998
 800dfe8:	0801f8d0 	.word	0x0801f8d0

0800dfec <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b085      	sub	sp, #20
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	60b9      	str	r1, [r7, #8]
 800dff6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	3308      	adds	r3, #8
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	429a      	cmp	r2, r3
 800e004:	d00a      	beq.n	800e01c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d002      	beq.n	800e012 <netif_do_set_netmask+0x26>
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	e000      	b.n	800e014 <netif_do_set_netmask+0x28>
 800e012:	2300      	movs	r3, #0
 800e014:	68fa      	ldr	r2, [r7, #12]
 800e016:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e018:	2301      	movs	r3, #1
 800e01a:	e000      	b.n	800e01e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3714      	adds	r7, #20
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr

0800e02a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e02a:	b480      	push	{r7}
 800e02c:	b085      	sub	sp, #20
 800e02e:	af00      	add	r7, sp, #0
 800e030:	60f8      	str	r0, [r7, #12]
 800e032:	60b9      	str	r1, [r7, #8]
 800e034:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	330c      	adds	r3, #12
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	429a      	cmp	r2, r3
 800e042:	d00a      	beq.n	800e05a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d002      	beq.n	800e050 <netif_do_set_gw+0x26>
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	e000      	b.n	800e052 <netif_do_set_gw+0x28>
 800e050:	2300      	movs	r3, #0
 800e052:	68fa      	ldr	r2, [r7, #12]
 800e054:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e056:	2301      	movs	r3, #1
 800e058:	e000      	b.n	800e05c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e05a:	2300      	movs	r3, #0
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3714      	adds	r7, #20
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr

0800e068 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b088      	sub	sp, #32
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	60f8      	str	r0, [r7, #12]
 800e070:	60b9      	str	r1, [r7, #8]
 800e072:	607a      	str	r2, [r7, #4]
 800e074:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e076:	2300      	movs	r3, #0
 800e078:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e07a:	2300      	movs	r3, #0
 800e07c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d101      	bne.n	800e088 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e084:	4b1c      	ldr	r3, [pc, #112]	; (800e0f8 <netif_set_addr+0x90>)
 800e086:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d101      	bne.n	800e092 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e08e:	4b1a      	ldr	r3, [pc, #104]	; (800e0f8 <netif_set_addr+0x90>)
 800e090:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d101      	bne.n	800e09c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e098:	4b17      	ldr	r3, [pc, #92]	; (800e0f8 <netif_set_addr+0x90>)
 800e09a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d003      	beq.n	800e0aa <netif_set_addr+0x42>
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d101      	bne.n	800e0ae <netif_set_addr+0x46>
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	e000      	b.n	800e0b0 <netif_set_addr+0x48>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d006      	beq.n	800e0c6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e0b8:	f107 0310 	add.w	r3, r7, #16
 800e0bc:	461a      	mov	r2, r3
 800e0be:	68b9      	ldr	r1, [r7, #8]
 800e0c0:	68f8      	ldr	r0, [r7, #12]
 800e0c2:	f7ff ff49 	bl	800df58 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e0c6:	69fa      	ldr	r2, [r7, #28]
 800e0c8:	6879      	ldr	r1, [r7, #4]
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f7ff ff8e 	bl	800dfec <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e0d0:	69ba      	ldr	r2, [r7, #24]
 800e0d2:	6839      	ldr	r1, [r7, #0]
 800e0d4:	68f8      	ldr	r0, [r7, #12]
 800e0d6:	f7ff ffa8 	bl	800e02a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d106      	bne.n	800e0ee <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e0e0:	f107 0310 	add.w	r3, r7, #16
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	68b9      	ldr	r1, [r7, #8]
 800e0e8:	68f8      	ldr	r0, [r7, #12]
 800e0ea:	f7ff ff35 	bl	800df58 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e0ee:	bf00      	nop
 800e0f0:	3720      	adds	r7, #32
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	08022398 	.word	0x08022398

0800e0fc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e104:	4a04      	ldr	r2, [pc, #16]	; (800e118 <netif_set_default+0x1c>)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e10a:	bf00      	nop
 800e10c:	370c      	adds	r7, #12
 800e10e:	46bd      	mov	sp, r7
 800e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e114:	4770      	bx	lr
 800e116:	bf00      	nop
 800e118:	200113b4 	.word	0x200113b4

0800e11c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b082      	sub	sp, #8
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d107      	bne.n	800e13a <netif_set_up+0x1e>
 800e12a:	4b0f      	ldr	r3, [pc, #60]	; (800e168 <netif_set_up+0x4c>)
 800e12c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e130:	490e      	ldr	r1, [pc, #56]	; (800e16c <netif_set_up+0x50>)
 800e132:	480f      	ldr	r0, [pc, #60]	; (800e170 <netif_set_up+0x54>)
 800e134:	f00f fb1c 	bl	801d770 <iprintf>
 800e138:	e013      	b.n	800e162 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e140:	f003 0301 	and.w	r3, r3, #1
 800e144:	2b00      	cmp	r3, #0
 800e146:	d10c      	bne.n	800e162 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e14e:	f043 0301 	orr.w	r3, r3, #1
 800e152:	b2da      	uxtb	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e15a:	2103      	movs	r1, #3
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f000 f809 	bl	800e174 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e162:	3708      	adds	r7, #8
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	0801f880 	.word	0x0801f880
 800e16c:	0801fa08 	.word	0x0801fa08
 800e170:	0801f8d0 	.word	0x0801f8d0

0800e174 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	460b      	mov	r3, r1
 800e17e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d106      	bne.n	800e194 <netif_issue_reports+0x20>
 800e186:	4b18      	ldr	r3, [pc, #96]	; (800e1e8 <netif_issue_reports+0x74>)
 800e188:	f240 326d 	movw	r2, #877	; 0x36d
 800e18c:	4917      	ldr	r1, [pc, #92]	; (800e1ec <netif_issue_reports+0x78>)
 800e18e:	4818      	ldr	r0, [pc, #96]	; (800e1f0 <netif_issue_reports+0x7c>)
 800e190:	f00f faee 	bl	801d770 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e19a:	f003 0304 	and.w	r3, r3, #4
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d01e      	beq.n	800e1e0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e1a8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d017      	beq.n	800e1e0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e1b0:	78fb      	ldrb	r3, [r7, #3]
 800e1b2:	f003 0301 	and.w	r3, r3, #1
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d013      	beq.n	800e1e2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	3304      	adds	r3, #4
 800e1be:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d00e      	beq.n	800e1e2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e1ca:	f003 0308 	and.w	r3, r3, #8
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d007      	beq.n	800e1e2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	3304      	adds	r3, #4
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f008 fb47 	bl	801686c <etharp_request>
 800e1de:	e000      	b.n	800e1e2 <netif_issue_reports+0x6e>
    return;
 800e1e0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	0801f880 	.word	0x0801f880
 800e1ec:	0801fa24 	.word	0x0801fa24
 800e1f0:	0801f8d0 	.word	0x0801f8d0

0800e1f4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d107      	bne.n	800e212 <netif_set_down+0x1e>
 800e202:	4b12      	ldr	r3, [pc, #72]	; (800e24c <netif_set_down+0x58>)
 800e204:	f240 329b 	movw	r2, #923	; 0x39b
 800e208:	4911      	ldr	r1, [pc, #68]	; (800e250 <netif_set_down+0x5c>)
 800e20a:	4812      	ldr	r0, [pc, #72]	; (800e254 <netif_set_down+0x60>)
 800e20c:	f00f fab0 	bl	801d770 <iprintf>
 800e210:	e019      	b.n	800e246 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e218:	f003 0301 	and.w	r3, r3, #1
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d012      	beq.n	800e246 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e226:	f023 0301 	bic.w	r3, r3, #1
 800e22a:	b2da      	uxtb	r2, r3
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e238:	f003 0308 	and.w	r3, r3, #8
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d002      	beq.n	800e246 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f007 fed1 	bl	8015fe8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e246:	3708      	adds	r7, #8
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}
 800e24c:	0801f880 	.word	0x0801f880
 800e250:	0801fa48 	.word	0x0801fa48
 800e254:	0801f8d0 	.word	0x0801f8d0

0800e258 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d107      	bne.n	800e276 <netif_set_link_up+0x1e>
 800e266:	4b13      	ldr	r3, [pc, #76]	; (800e2b4 <netif_set_link_up+0x5c>)
 800e268:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e26c:	4912      	ldr	r1, [pc, #72]	; (800e2b8 <netif_set_link_up+0x60>)
 800e26e:	4813      	ldr	r0, [pc, #76]	; (800e2bc <netif_set_link_up+0x64>)
 800e270:	f00f fa7e 	bl	801d770 <iprintf>
 800e274:	e01b      	b.n	800e2ae <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e27c:	f003 0304 	and.w	r3, r3, #4
 800e280:	2b00      	cmp	r3, #0
 800e282:	d114      	bne.n	800e2ae <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e28a:	f043 0304 	orr.w	r3, r3, #4
 800e28e:	b2da      	uxtb	r2, r3
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e296:	2103      	movs	r1, #3
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f7ff ff6b 	bl	800e174 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	69db      	ldr	r3, [r3, #28]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d003      	beq.n	800e2ae <netif_set_link_up+0x56>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	69db      	ldr	r3, [r3, #28]
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	0801f880 	.word	0x0801f880
 800e2b8:	0801fa68 	.word	0x0801fa68
 800e2bc:	0801f8d0 	.word	0x0801f8d0

0800e2c0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d107      	bne.n	800e2de <netif_set_link_down+0x1e>
 800e2ce:	4b11      	ldr	r3, [pc, #68]	; (800e314 <netif_set_link_down+0x54>)
 800e2d0:	f240 4206 	movw	r2, #1030	; 0x406
 800e2d4:	4910      	ldr	r1, [pc, #64]	; (800e318 <netif_set_link_down+0x58>)
 800e2d6:	4811      	ldr	r0, [pc, #68]	; (800e31c <netif_set_link_down+0x5c>)
 800e2d8:	f00f fa4a 	bl	801d770 <iprintf>
 800e2dc:	e017      	b.n	800e30e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e2e4:	f003 0304 	and.w	r3, r3, #4
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d010      	beq.n	800e30e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e2f2:	f023 0304 	bic.w	r3, r3, #4
 800e2f6:	b2da      	uxtb	r2, r3
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	69db      	ldr	r3, [r3, #28]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d003      	beq.n	800e30e <netif_set_link_down+0x4e>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	69db      	ldr	r3, [r3, #28]
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e30e:	3708      	adds	r7, #8
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	0801f880 	.word	0x0801f880
 800e318:	0801fa8c 	.word	0x0801fa8c
 800e31c:	0801f8d0 	.word	0x0801f8d0

0800e320 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e320:	b480      	push	{r7}
 800e322:	b083      	sub	sp, #12
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
 800e328:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d002      	beq.n	800e336 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	683a      	ldr	r2, [r7, #0]
 800e334:	61da      	str	r2, [r3, #28]
  }
}
 800e336:	bf00      	nop
 800e338:	370c      	adds	r7, #12
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr

0800e342 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e342:	b480      	push	{r7}
 800e344:	b085      	sub	sp, #20
 800e346:	af00      	add	r7, sp, #0
 800e348:	60f8      	str	r0, [r7, #12]
 800e34a:	60b9      	str	r1, [r7, #8]
 800e34c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e34e:	f06f 030b 	mvn.w	r3, #11
}
 800e352:	4618      	mov	r0, r3
 800e354:	3714      	adds	r7, #20
 800e356:	46bd      	mov	sp, r7
 800e358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35c:	4770      	bx	lr
	...

0800e360 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e360:	b480      	push	{r7}
 800e362:	b085      	sub	sp, #20
 800e364:	af00      	add	r7, sp, #0
 800e366:	4603      	mov	r3, r0
 800e368:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e36a:	79fb      	ldrb	r3, [r7, #7]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d013      	beq.n	800e398 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e370:	4b0d      	ldr	r3, [pc, #52]	; (800e3a8 <netif_get_by_index+0x48>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	60fb      	str	r3, [r7, #12]
 800e376:	e00c      	b.n	800e392 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e37e:	3301      	adds	r3, #1
 800e380:	b2db      	uxtb	r3, r3
 800e382:	79fa      	ldrb	r2, [r7, #7]
 800e384:	429a      	cmp	r2, r3
 800e386:	d101      	bne.n	800e38c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	e006      	b.n	800e39a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	60fb      	str	r3, [r7, #12]
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d1ef      	bne.n	800e378 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e398:	2300      	movs	r3, #0
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3714      	adds	r7, #20
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr
 800e3a6:	bf00      	nop
 800e3a8:	200113b0 	.word	0x200113b0

0800e3ac <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e3b2:	f00a f8d5 	bl	8018560 <sys_arch_protect>
 800e3b6:	6038      	str	r0, [r7, #0]
 800e3b8:	4b0d      	ldr	r3, [pc, #52]	; (800e3f0 <pbuf_free_ooseq+0x44>)
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	701a      	strb	r2, [r3, #0]
 800e3be:	6838      	ldr	r0, [r7, #0]
 800e3c0:	f00a f8dc 	bl	801857c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e3c4:	4b0b      	ldr	r3, [pc, #44]	; (800e3f4 <pbuf_free_ooseq+0x48>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	607b      	str	r3, [r7, #4]
 800e3ca:	e00a      	b.n	800e3e2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d003      	beq.n	800e3dc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f002 fbf9 	bl	8010bcc <tcp_free_ooseq>
      return;
 800e3da:	e005      	b.n	800e3e8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	68db      	ldr	r3, [r3, #12]
 800e3e0:	607b      	str	r3, [r7, #4]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d1f1      	bne.n	800e3cc <pbuf_free_ooseq+0x20>
    }
  }
}
 800e3e8:	3708      	adds	r7, #8
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	200113b9 	.word	0x200113b9
 800e3f4:	200113c8 	.word	0x200113c8

0800e3f8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e400:	f7ff ffd4 	bl	800e3ac <pbuf_free_ooseq>
}
 800e404:	bf00      	nop
 800e406:	3708      	adds	r7, #8
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e412:	f00a f8a5 	bl	8018560 <sys_arch_protect>
 800e416:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e418:	4b0f      	ldr	r3, [pc, #60]	; (800e458 <pbuf_pool_is_empty+0x4c>)
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e41e:	4b0e      	ldr	r3, [pc, #56]	; (800e458 <pbuf_pool_is_empty+0x4c>)
 800e420:	2201      	movs	r2, #1
 800e422:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f00a f8a9 	bl	801857c <sys_arch_unprotect>

  if (!queued) {
 800e42a:	78fb      	ldrb	r3, [r7, #3]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d10f      	bne.n	800e450 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e430:	2100      	movs	r1, #0
 800e432:	480a      	ldr	r0, [pc, #40]	; (800e45c <pbuf_pool_is_empty+0x50>)
 800e434:	f7fe fe80 	bl	800d138 <tcpip_try_callback>
 800e438:	4603      	mov	r3, r0
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d008      	beq.n	800e450 <pbuf_pool_is_empty+0x44>
 800e43e:	f00a f88f 	bl	8018560 <sys_arch_protect>
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	4b04      	ldr	r3, [pc, #16]	; (800e458 <pbuf_pool_is_empty+0x4c>)
 800e446:	2200      	movs	r2, #0
 800e448:	701a      	strb	r2, [r3, #0]
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f00a f896 	bl	801857c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e450:	bf00      	nop
 800e452:	3708      	adds	r7, #8
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}
 800e458:	200113b9 	.word	0x200113b9
 800e45c:	0800e3f9 	.word	0x0800e3f9

0800e460 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e460:	b480      	push	{r7}
 800e462:	b085      	sub	sp, #20
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	4611      	mov	r1, r2
 800e46c:	461a      	mov	r2, r3
 800e46e:	460b      	mov	r3, r1
 800e470:	80fb      	strh	r3, [r7, #6]
 800e472:	4613      	mov	r3, r2
 800e474:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	2200      	movs	r2, #0
 800e47a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	68ba      	ldr	r2, [r7, #8]
 800e480:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	88fa      	ldrh	r2, [r7, #6]
 800e486:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	88ba      	ldrh	r2, [r7, #4]
 800e48c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e48e:	8b3b      	ldrh	r3, [r7, #24]
 800e490:	b2da      	uxtb	r2, r3
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	7f3a      	ldrb	r2, [r7, #28]
 800e49a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2201      	movs	r2, #1
 800e4a0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	73da      	strb	r2, [r3, #15]
}
 800e4a8:	bf00      	nop
 800e4aa:	3714      	adds	r7, #20
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b2:	4770      	bx	lr

0800e4b4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b08c      	sub	sp, #48	; 0x30
 800e4b8:	af02      	add	r7, sp, #8
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	71fb      	strb	r3, [r7, #7]
 800e4be:	460b      	mov	r3, r1
 800e4c0:	80bb      	strh	r3, [r7, #4]
 800e4c2:	4613      	mov	r3, r2
 800e4c4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e4c6:	79fb      	ldrb	r3, [r7, #7]
 800e4c8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e4ca:	887b      	ldrh	r3, [r7, #2]
 800e4cc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e4d0:	d07f      	beq.n	800e5d2 <pbuf_alloc+0x11e>
 800e4d2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e4d6:	f300 80c8 	bgt.w	800e66a <pbuf_alloc+0x1b6>
 800e4da:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e4de:	d010      	beq.n	800e502 <pbuf_alloc+0x4e>
 800e4e0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e4e4:	f300 80c1 	bgt.w	800e66a <pbuf_alloc+0x1b6>
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d002      	beq.n	800e4f2 <pbuf_alloc+0x3e>
 800e4ec:	2b41      	cmp	r3, #65	; 0x41
 800e4ee:	f040 80bc 	bne.w	800e66a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e4f2:	887a      	ldrh	r2, [r7, #2]
 800e4f4:	88bb      	ldrh	r3, [r7, #4]
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	2000      	movs	r0, #0
 800e4fa:	f000 f8d1 	bl	800e6a0 <pbuf_alloc_reference>
 800e4fe:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e500:	e0bd      	b.n	800e67e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e502:	2300      	movs	r3, #0
 800e504:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e506:	2300      	movs	r3, #0
 800e508:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e50a:	88bb      	ldrh	r3, [r7, #4]
 800e50c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e50e:	200c      	movs	r0, #12
 800e510:	f7ff fb9a 	bl	800dc48 <memp_malloc>
 800e514:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d109      	bne.n	800e530 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e51c:	f7ff ff76 	bl	800e40c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e522:	2b00      	cmp	r3, #0
 800e524:	d002      	beq.n	800e52c <pbuf_alloc+0x78>
            pbuf_free(p);
 800e526:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e528:	f000 faa8 	bl	800ea7c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e52c:	2300      	movs	r3, #0
 800e52e:	e0a7      	b.n	800e680 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e530:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e532:	3303      	adds	r3, #3
 800e534:	b29b      	uxth	r3, r3
 800e536:	f023 0303 	bic.w	r3, r3, #3
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e540:	b29b      	uxth	r3, r3
 800e542:	8b7a      	ldrh	r2, [r7, #26]
 800e544:	4293      	cmp	r3, r2
 800e546:	bf28      	it	cs
 800e548:	4613      	movcs	r3, r2
 800e54a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e54c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e54e:	3310      	adds	r3, #16
 800e550:	693a      	ldr	r2, [r7, #16]
 800e552:	4413      	add	r3, r2
 800e554:	3303      	adds	r3, #3
 800e556:	f023 0303 	bic.w	r3, r3, #3
 800e55a:	4618      	mov	r0, r3
 800e55c:	89f9      	ldrh	r1, [r7, #14]
 800e55e:	8b7a      	ldrh	r2, [r7, #26]
 800e560:	2300      	movs	r3, #0
 800e562:	9301      	str	r3, [sp, #4]
 800e564:	887b      	ldrh	r3, [r7, #2]
 800e566:	9300      	str	r3, [sp, #0]
 800e568:	460b      	mov	r3, r1
 800e56a:	4601      	mov	r1, r0
 800e56c:	6938      	ldr	r0, [r7, #16]
 800e56e:	f7ff ff77 	bl	800e460 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	685b      	ldr	r3, [r3, #4]
 800e576:	f003 0303 	and.w	r3, r3, #3
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d006      	beq.n	800e58c <pbuf_alloc+0xd8>
 800e57e:	4b42      	ldr	r3, [pc, #264]	; (800e688 <pbuf_alloc+0x1d4>)
 800e580:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e584:	4941      	ldr	r1, [pc, #260]	; (800e68c <pbuf_alloc+0x1d8>)
 800e586:	4842      	ldr	r0, [pc, #264]	; (800e690 <pbuf_alloc+0x1dc>)
 800e588:	f00f f8f2 	bl	801d770 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e58c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e58e:	3303      	adds	r3, #3
 800e590:	f023 0303 	bic.w	r3, r3, #3
 800e594:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e598:	d106      	bne.n	800e5a8 <pbuf_alloc+0xf4>
 800e59a:	4b3b      	ldr	r3, [pc, #236]	; (800e688 <pbuf_alloc+0x1d4>)
 800e59c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e5a0:	493c      	ldr	r1, [pc, #240]	; (800e694 <pbuf_alloc+0x1e0>)
 800e5a2:	483b      	ldr	r0, [pc, #236]	; (800e690 <pbuf_alloc+0x1dc>)
 800e5a4:	f00f f8e4 	bl	801d770 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d102      	bne.n	800e5b4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	627b      	str	r3, [r7, #36]	; 0x24
 800e5b2:	e002      	b.n	800e5ba <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	693a      	ldr	r2, [r7, #16]
 800e5b8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e5be:	8b7a      	ldrh	r2, [r7, #26]
 800e5c0:	89fb      	ldrh	r3, [r7, #14]
 800e5c2:	1ad3      	subs	r3, r2, r3
 800e5c4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e5ca:	8b7b      	ldrh	r3, [r7, #26]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d19e      	bne.n	800e50e <pbuf_alloc+0x5a>
      break;
 800e5d0:	e055      	b.n	800e67e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e5d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5d4:	3303      	adds	r3, #3
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	f023 0303 	bic.w	r3, r3, #3
 800e5dc:	b29a      	uxth	r2, r3
 800e5de:	88bb      	ldrh	r3, [r7, #4]
 800e5e0:	3303      	adds	r3, #3
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	f023 0303 	bic.w	r3, r3, #3
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	4413      	add	r3, r2
 800e5ec:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e5ee:	8b3b      	ldrh	r3, [r7, #24]
 800e5f0:	3310      	adds	r3, #16
 800e5f2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e5f4:	8b3a      	ldrh	r2, [r7, #24]
 800e5f6:	88bb      	ldrh	r3, [r7, #4]
 800e5f8:	3303      	adds	r3, #3
 800e5fa:	f023 0303 	bic.w	r3, r3, #3
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d306      	bcc.n	800e610 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e602:	8afa      	ldrh	r2, [r7, #22]
 800e604:	88bb      	ldrh	r3, [r7, #4]
 800e606:	3303      	adds	r3, #3
 800e608:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d201      	bcs.n	800e614 <pbuf_alloc+0x160>
        return NULL;
 800e610:	2300      	movs	r3, #0
 800e612:	e035      	b.n	800e680 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e614:	8afb      	ldrh	r3, [r7, #22]
 800e616:	4618      	mov	r0, r3
 800e618:	f7ff f96e 	bl	800d8f8 <mem_malloc>
 800e61c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e620:	2b00      	cmp	r3, #0
 800e622:	d101      	bne.n	800e628 <pbuf_alloc+0x174>
        return NULL;
 800e624:	2300      	movs	r3, #0
 800e626:	e02b      	b.n	800e680 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e628:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e62a:	3310      	adds	r3, #16
 800e62c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e62e:	4413      	add	r3, r2
 800e630:	3303      	adds	r3, #3
 800e632:	f023 0303 	bic.w	r3, r3, #3
 800e636:	4618      	mov	r0, r3
 800e638:	88b9      	ldrh	r1, [r7, #4]
 800e63a:	88ba      	ldrh	r2, [r7, #4]
 800e63c:	2300      	movs	r3, #0
 800e63e:	9301      	str	r3, [sp, #4]
 800e640:	887b      	ldrh	r3, [r7, #2]
 800e642:	9300      	str	r3, [sp, #0]
 800e644:	460b      	mov	r3, r1
 800e646:	4601      	mov	r1, r0
 800e648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e64a:	f7ff ff09 	bl	800e460 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	f003 0303 	and.w	r3, r3, #3
 800e656:	2b00      	cmp	r3, #0
 800e658:	d010      	beq.n	800e67c <pbuf_alloc+0x1c8>
 800e65a:	4b0b      	ldr	r3, [pc, #44]	; (800e688 <pbuf_alloc+0x1d4>)
 800e65c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e660:	490d      	ldr	r1, [pc, #52]	; (800e698 <pbuf_alloc+0x1e4>)
 800e662:	480b      	ldr	r0, [pc, #44]	; (800e690 <pbuf_alloc+0x1dc>)
 800e664:	f00f f884 	bl	801d770 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e668:	e008      	b.n	800e67c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e66a:	4b07      	ldr	r3, [pc, #28]	; (800e688 <pbuf_alloc+0x1d4>)
 800e66c:	f240 1227 	movw	r2, #295	; 0x127
 800e670:	490a      	ldr	r1, [pc, #40]	; (800e69c <pbuf_alloc+0x1e8>)
 800e672:	4807      	ldr	r0, [pc, #28]	; (800e690 <pbuf_alloc+0x1dc>)
 800e674:	f00f f87c 	bl	801d770 <iprintf>
      return NULL;
 800e678:	2300      	movs	r3, #0
 800e67a:	e001      	b.n	800e680 <pbuf_alloc+0x1cc>
      break;
 800e67c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e680:	4618      	mov	r0, r3
 800e682:	3728      	adds	r7, #40	; 0x28
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	0801fab0 	.word	0x0801fab0
 800e68c:	0801fae0 	.word	0x0801fae0
 800e690:	0801fb10 	.word	0x0801fb10
 800e694:	0801fb38 	.word	0x0801fb38
 800e698:	0801fb6c 	.word	0x0801fb6c
 800e69c:	0801fb98 	.word	0x0801fb98

0800e6a0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b086      	sub	sp, #24
 800e6a4:	af02      	add	r7, sp, #8
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	460b      	mov	r3, r1
 800e6aa:	807b      	strh	r3, [r7, #2]
 800e6ac:	4613      	mov	r3, r2
 800e6ae:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e6b0:	883b      	ldrh	r3, [r7, #0]
 800e6b2:	2b41      	cmp	r3, #65	; 0x41
 800e6b4:	d009      	beq.n	800e6ca <pbuf_alloc_reference+0x2a>
 800e6b6:	883b      	ldrh	r3, [r7, #0]
 800e6b8:	2b01      	cmp	r3, #1
 800e6ba:	d006      	beq.n	800e6ca <pbuf_alloc_reference+0x2a>
 800e6bc:	4b0f      	ldr	r3, [pc, #60]	; (800e6fc <pbuf_alloc_reference+0x5c>)
 800e6be:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e6c2:	490f      	ldr	r1, [pc, #60]	; (800e700 <pbuf_alloc_reference+0x60>)
 800e6c4:	480f      	ldr	r0, [pc, #60]	; (800e704 <pbuf_alloc_reference+0x64>)
 800e6c6:	f00f f853 	bl	801d770 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e6ca:	200b      	movs	r0, #11
 800e6cc:	f7ff fabc 	bl	800dc48 <memp_malloc>
 800e6d0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d101      	bne.n	800e6dc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	e00b      	b.n	800e6f4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e6dc:	8879      	ldrh	r1, [r7, #2]
 800e6de:	887a      	ldrh	r2, [r7, #2]
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	9301      	str	r3, [sp, #4]
 800e6e4:	883b      	ldrh	r3, [r7, #0]
 800e6e6:	9300      	str	r3, [sp, #0]
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	6879      	ldr	r1, [r7, #4]
 800e6ec:	68f8      	ldr	r0, [r7, #12]
 800e6ee:	f7ff feb7 	bl	800e460 <pbuf_init_alloced_pbuf>
  return p;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3710      	adds	r7, #16
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	0801fab0 	.word	0x0801fab0
 800e700:	0801fbb4 	.word	0x0801fbb4
 800e704:	0801fb10 	.word	0x0801fb10

0800e708 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b088      	sub	sp, #32
 800e70c:	af02      	add	r7, sp, #8
 800e70e:	607b      	str	r3, [r7, #4]
 800e710:	4603      	mov	r3, r0
 800e712:	73fb      	strb	r3, [r7, #15]
 800e714:	460b      	mov	r3, r1
 800e716:	81bb      	strh	r3, [r7, #12]
 800e718:	4613      	mov	r3, r2
 800e71a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e71c:	7bfb      	ldrb	r3, [r7, #15]
 800e71e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e720:	8a7b      	ldrh	r3, [r7, #18]
 800e722:	3303      	adds	r3, #3
 800e724:	f023 0203 	bic.w	r2, r3, #3
 800e728:	89bb      	ldrh	r3, [r7, #12]
 800e72a:	441a      	add	r2, r3
 800e72c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e72e:	429a      	cmp	r2, r3
 800e730:	d901      	bls.n	800e736 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e732:	2300      	movs	r3, #0
 800e734:	e018      	b.n	800e768 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e736:	6a3b      	ldr	r3, [r7, #32]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d007      	beq.n	800e74c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e73c:	8a7b      	ldrh	r3, [r7, #18]
 800e73e:	3303      	adds	r3, #3
 800e740:	f023 0303 	bic.w	r3, r3, #3
 800e744:	6a3a      	ldr	r2, [r7, #32]
 800e746:	4413      	add	r3, r2
 800e748:	617b      	str	r3, [r7, #20]
 800e74a:	e001      	b.n	800e750 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e74c:	2300      	movs	r3, #0
 800e74e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	89b9      	ldrh	r1, [r7, #12]
 800e754:	89ba      	ldrh	r2, [r7, #12]
 800e756:	2302      	movs	r3, #2
 800e758:	9301      	str	r3, [sp, #4]
 800e75a:	897b      	ldrh	r3, [r7, #10]
 800e75c:	9300      	str	r3, [sp, #0]
 800e75e:	460b      	mov	r3, r1
 800e760:	6979      	ldr	r1, [r7, #20]
 800e762:	f7ff fe7d 	bl	800e460 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e766:	687b      	ldr	r3, [r7, #4]
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3718      	adds	r7, #24
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}

0800e770 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	460b      	mov	r3, r1
 800e77a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d106      	bne.n	800e790 <pbuf_realloc+0x20>
 800e782:	4b3a      	ldr	r3, [pc, #232]	; (800e86c <pbuf_realloc+0xfc>)
 800e784:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e788:	4939      	ldr	r1, [pc, #228]	; (800e870 <pbuf_realloc+0x100>)
 800e78a:	483a      	ldr	r0, [pc, #232]	; (800e874 <pbuf_realloc+0x104>)
 800e78c:	f00e fff0 	bl	801d770 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	891b      	ldrh	r3, [r3, #8]
 800e794:	887a      	ldrh	r2, [r7, #2]
 800e796:	429a      	cmp	r2, r3
 800e798:	d263      	bcs.n	800e862 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	891a      	ldrh	r2, [r3, #8]
 800e79e:	887b      	ldrh	r3, [r7, #2]
 800e7a0:	1ad3      	subs	r3, r2, r3
 800e7a2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e7a4:	887b      	ldrh	r3, [r7, #2]
 800e7a6:	817b      	strh	r3, [r7, #10]
  q = p;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e7ac:	e018      	b.n	800e7e0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	895b      	ldrh	r3, [r3, #10]
 800e7b2:	897a      	ldrh	r2, [r7, #10]
 800e7b4:	1ad3      	subs	r3, r2, r3
 800e7b6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	891a      	ldrh	r2, [r3, #8]
 800e7bc:	893b      	ldrh	r3, [r7, #8]
 800e7be:	1ad3      	subs	r3, r2, r3
 800e7c0:	b29a      	uxth	r2, r3
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d106      	bne.n	800e7e0 <pbuf_realloc+0x70>
 800e7d2:	4b26      	ldr	r3, [pc, #152]	; (800e86c <pbuf_realloc+0xfc>)
 800e7d4:	f240 12af 	movw	r2, #431	; 0x1af
 800e7d8:	4927      	ldr	r1, [pc, #156]	; (800e878 <pbuf_realloc+0x108>)
 800e7da:	4826      	ldr	r0, [pc, #152]	; (800e874 <pbuf_realloc+0x104>)
 800e7dc:	f00e ffc8 	bl	801d770 <iprintf>
  while (rem_len > q->len) {
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	895b      	ldrh	r3, [r3, #10]
 800e7e4:	897a      	ldrh	r2, [r7, #10]
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	d8e1      	bhi.n	800e7ae <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	7b1b      	ldrb	r3, [r3, #12]
 800e7ee:	f003 030f 	and.w	r3, r3, #15
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d121      	bne.n	800e83a <pbuf_realloc+0xca>
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	895b      	ldrh	r3, [r3, #10]
 800e7fa:	897a      	ldrh	r2, [r7, #10]
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d01c      	beq.n	800e83a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	7b5b      	ldrb	r3, [r3, #13]
 800e804:	f003 0302 	and.w	r3, r3, #2
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d116      	bne.n	800e83a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	685a      	ldr	r2, [r3, #4]
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	1ad3      	subs	r3, r2, r3
 800e814:	b29a      	uxth	r2, r3
 800e816:	897b      	ldrh	r3, [r7, #10]
 800e818:	4413      	add	r3, r2
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	4619      	mov	r1, r3
 800e81e:	68f8      	ldr	r0, [r7, #12]
 800e820:	f7fe ff5a 	bl	800d6d8 <mem_trim>
 800e824:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d106      	bne.n	800e83a <pbuf_realloc+0xca>
 800e82c:	4b0f      	ldr	r3, [pc, #60]	; (800e86c <pbuf_realloc+0xfc>)
 800e82e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e832:	4912      	ldr	r1, [pc, #72]	; (800e87c <pbuf_realloc+0x10c>)
 800e834:	480f      	ldr	r0, [pc, #60]	; (800e874 <pbuf_realloc+0x104>)
 800e836:	f00e ff9b 	bl	801d770 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	897a      	ldrh	r2, [r7, #10]
 800e83e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	895a      	ldrh	r2, [r3, #10]
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d004      	beq.n	800e85a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	4618      	mov	r0, r3
 800e856:	f000 f911 	bl	800ea7c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	2200      	movs	r2, #0
 800e85e:	601a      	str	r2, [r3, #0]
 800e860:	e000      	b.n	800e864 <pbuf_realloc+0xf4>
    return;
 800e862:	bf00      	nop

}
 800e864:	3710      	adds	r7, #16
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
 800e86a:	bf00      	nop
 800e86c:	0801fab0 	.word	0x0801fab0
 800e870:	0801fbc8 	.word	0x0801fbc8
 800e874:	0801fb10 	.word	0x0801fb10
 800e878:	0801fbe0 	.word	0x0801fbe0
 800e87c:	0801fbf8 	.word	0x0801fbf8

0800e880 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b086      	sub	sp, #24
 800e884:	af00      	add	r7, sp, #0
 800e886:	60f8      	str	r0, [r7, #12]
 800e888:	60b9      	str	r1, [r7, #8]
 800e88a:	4613      	mov	r3, r2
 800e88c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d106      	bne.n	800e8a2 <pbuf_add_header_impl+0x22>
 800e894:	4b2b      	ldr	r3, [pc, #172]	; (800e944 <pbuf_add_header_impl+0xc4>)
 800e896:	f240 12df 	movw	r2, #479	; 0x1df
 800e89a:	492b      	ldr	r1, [pc, #172]	; (800e948 <pbuf_add_header_impl+0xc8>)
 800e89c:	482b      	ldr	r0, [pc, #172]	; (800e94c <pbuf_add_header_impl+0xcc>)
 800e89e:	f00e ff67 	bl	801d770 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d003      	beq.n	800e8b0 <pbuf_add_header_impl+0x30>
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8ae:	d301      	bcc.n	800e8b4 <pbuf_add_header_impl+0x34>
    return 1;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	e043      	b.n	800e93c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d101      	bne.n	800e8be <pbuf_add_header_impl+0x3e>
    return 0;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	e03e      	b.n	800e93c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	891a      	ldrh	r2, [r3, #8]
 800e8c6:	8a7b      	ldrh	r3, [r7, #18]
 800e8c8:	4413      	add	r3, r2
 800e8ca:	b29b      	uxth	r3, r3
 800e8cc:	8a7a      	ldrh	r2, [r7, #18]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d901      	bls.n	800e8d6 <pbuf_add_header_impl+0x56>
    return 1;
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	e032      	b.n	800e93c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	7b1b      	ldrb	r3, [r3, #12]
 800e8da:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e8dc:	8a3b      	ldrh	r3, [r7, #16]
 800e8de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d00c      	beq.n	800e900 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	685a      	ldr	r2, [r3, #4]
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	425b      	negs	r3, r3
 800e8ee:	4413      	add	r3, r2
 800e8f0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	3310      	adds	r3, #16
 800e8f6:	697a      	ldr	r2, [r7, #20]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d20d      	bcs.n	800e918 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	e01d      	b.n	800e93c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e900:	79fb      	ldrb	r3, [r7, #7]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d006      	beq.n	800e914 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	685a      	ldr	r2, [r3, #4]
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	425b      	negs	r3, r3
 800e90e:	4413      	add	r3, r2
 800e910:	617b      	str	r3, [r7, #20]
 800e912:	e001      	b.n	800e918 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e914:	2301      	movs	r3, #1
 800e916:	e011      	b.n	800e93c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	697a      	ldr	r2, [r7, #20]
 800e91c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	895a      	ldrh	r2, [r3, #10]
 800e922:	8a7b      	ldrh	r3, [r7, #18]
 800e924:	4413      	add	r3, r2
 800e926:	b29a      	uxth	r2, r3
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	891a      	ldrh	r2, [r3, #8]
 800e930:	8a7b      	ldrh	r3, [r7, #18]
 800e932:	4413      	add	r3, r2
 800e934:	b29a      	uxth	r2, r3
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	811a      	strh	r2, [r3, #8]


  return 0;
 800e93a:	2300      	movs	r3, #0
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3718      	adds	r7, #24
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	0801fab0 	.word	0x0801fab0
 800e948:	0801fc14 	.word	0x0801fc14
 800e94c:	0801fb10 	.word	0x0801fb10

0800e950 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b082      	sub	sp, #8
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e95a:	2200      	movs	r2, #0
 800e95c:	6839      	ldr	r1, [r7, #0]
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f7ff ff8e 	bl	800e880 <pbuf_add_header_impl>
 800e964:	4603      	mov	r3, r0
}
 800e966:	4618      	mov	r0, r3
 800e968:	3708      	adds	r7, #8
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
	...

0800e970 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d106      	bne.n	800e98e <pbuf_remove_header+0x1e>
 800e980:	4b20      	ldr	r3, [pc, #128]	; (800ea04 <pbuf_remove_header+0x94>)
 800e982:	f240 224b 	movw	r2, #587	; 0x24b
 800e986:	4920      	ldr	r1, [pc, #128]	; (800ea08 <pbuf_remove_header+0x98>)
 800e988:	4820      	ldr	r0, [pc, #128]	; (800ea0c <pbuf_remove_header+0x9c>)
 800e98a:	f00e fef1 	bl	801d770 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d003      	beq.n	800e99c <pbuf_remove_header+0x2c>
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e99a:	d301      	bcc.n	800e9a0 <pbuf_remove_header+0x30>
    return 1;
 800e99c:	2301      	movs	r3, #1
 800e99e:	e02c      	b.n	800e9fa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d101      	bne.n	800e9aa <pbuf_remove_header+0x3a>
    return 0;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	e027      	b.n	800e9fa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	895b      	ldrh	r3, [r3, #10]
 800e9b2:	89fa      	ldrh	r2, [r7, #14]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d908      	bls.n	800e9ca <pbuf_remove_header+0x5a>
 800e9b8:	4b12      	ldr	r3, [pc, #72]	; (800ea04 <pbuf_remove_header+0x94>)
 800e9ba:	f240 2255 	movw	r2, #597	; 0x255
 800e9be:	4914      	ldr	r1, [pc, #80]	; (800ea10 <pbuf_remove_header+0xa0>)
 800e9c0:	4812      	ldr	r0, [pc, #72]	; (800ea0c <pbuf_remove_header+0x9c>)
 800e9c2:	f00e fed5 	bl	801d770 <iprintf>
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	e017      	b.n	800e9fa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	685a      	ldr	r2, [r3, #4]
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	441a      	add	r2, r3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	895a      	ldrh	r2, [r3, #10]
 800e9e0:	89fb      	ldrh	r3, [r7, #14]
 800e9e2:	1ad3      	subs	r3, r2, r3
 800e9e4:	b29a      	uxth	r2, r3
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	891a      	ldrh	r2, [r3, #8]
 800e9ee:	89fb      	ldrh	r3, [r7, #14]
 800e9f0:	1ad3      	subs	r3, r2, r3
 800e9f2:	b29a      	uxth	r2, r3
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e9f8:	2300      	movs	r3, #0
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3710      	adds	r7, #16
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	0801fab0 	.word	0x0801fab0
 800ea08:	0801fc14 	.word	0x0801fc14
 800ea0c:	0801fb10 	.word	0x0801fb10
 800ea10:	0801fc20 	.word	0x0801fc20

0800ea14 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b082      	sub	sp, #8
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	460b      	mov	r3, r1
 800ea1e:	807b      	strh	r3, [r7, #2]
 800ea20:	4613      	mov	r3, r2
 800ea22:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ea24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	da08      	bge.n	800ea3e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ea2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ea30:	425b      	negs	r3, r3
 800ea32:	4619      	mov	r1, r3
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f7ff ff9b 	bl	800e970 <pbuf_remove_header>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	e007      	b.n	800ea4e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ea3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ea42:	787a      	ldrb	r2, [r7, #1]
 800ea44:	4619      	mov	r1, r3
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f7ff ff1a 	bl	800e880 <pbuf_add_header_impl>
 800ea4c:	4603      	mov	r3, r0
  }
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3708      	adds	r7, #8
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}

0800ea56 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ea56:	b580      	push	{r7, lr}
 800ea58:	b082      	sub	sp, #8
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	6078      	str	r0, [r7, #4]
 800ea5e:	460b      	mov	r3, r1
 800ea60:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ea62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ea66:	2201      	movs	r2, #1
 800ea68:	4619      	mov	r1, r3
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f7ff ffd2 	bl	800ea14 <pbuf_header_impl>
 800ea70:	4603      	mov	r3, r0
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3708      	adds	r7, #8
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}
	...

0800ea7c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b088      	sub	sp, #32
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d10b      	bne.n	800eaa2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d106      	bne.n	800ea9e <pbuf_free+0x22>
 800ea90:	4b3b      	ldr	r3, [pc, #236]	; (800eb80 <pbuf_free+0x104>)
 800ea92:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ea96:	493b      	ldr	r1, [pc, #236]	; (800eb84 <pbuf_free+0x108>)
 800ea98:	483b      	ldr	r0, [pc, #236]	; (800eb88 <pbuf_free+0x10c>)
 800ea9a:	f00e fe69 	bl	801d770 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	e069      	b.n	800eb76 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800eaa6:	e062      	b.n	800eb6e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800eaa8:	f009 fd5a 	bl	8018560 <sys_arch_protect>
 800eaac:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	7b9b      	ldrb	r3, [r3, #14]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d106      	bne.n	800eac4 <pbuf_free+0x48>
 800eab6:	4b32      	ldr	r3, [pc, #200]	; (800eb80 <pbuf_free+0x104>)
 800eab8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800eabc:	4933      	ldr	r1, [pc, #204]	; (800eb8c <pbuf_free+0x110>)
 800eabe:	4832      	ldr	r0, [pc, #200]	; (800eb88 <pbuf_free+0x10c>)
 800eac0:	f00e fe56 	bl	801d770 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	7b9b      	ldrb	r3, [r3, #14]
 800eac8:	3b01      	subs	r3, #1
 800eaca:	b2da      	uxtb	r2, r3
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	739a      	strb	r2, [r3, #14]
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	7b9b      	ldrb	r3, [r3, #14]
 800ead4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ead6:	69b8      	ldr	r0, [r7, #24]
 800ead8:	f009 fd50 	bl	801857c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800eadc:	7dfb      	ldrb	r3, [r7, #23]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d143      	bne.n	800eb6a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	7b1b      	ldrb	r3, [r3, #12]
 800eaec:	f003 030f 	and.w	r3, r3, #15
 800eaf0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	7b5b      	ldrb	r3, [r3, #13]
 800eaf6:	f003 0302 	and.w	r3, r3, #2
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d011      	beq.n	800eb22 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	691b      	ldr	r3, [r3, #16]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d106      	bne.n	800eb18 <pbuf_free+0x9c>
 800eb0a:	4b1d      	ldr	r3, [pc, #116]	; (800eb80 <pbuf_free+0x104>)
 800eb0c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800eb10:	491f      	ldr	r1, [pc, #124]	; (800eb90 <pbuf_free+0x114>)
 800eb12:	481d      	ldr	r0, [pc, #116]	; (800eb88 <pbuf_free+0x10c>)
 800eb14:	f00e fe2c 	bl	801d770 <iprintf>
        pc->custom_free_function(p);
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	691b      	ldr	r3, [r3, #16]
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	4798      	blx	r3
 800eb20:	e01d      	b.n	800eb5e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800eb22:	7bfb      	ldrb	r3, [r7, #15]
 800eb24:	2b02      	cmp	r3, #2
 800eb26:	d104      	bne.n	800eb32 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800eb28:	6879      	ldr	r1, [r7, #4]
 800eb2a:	200c      	movs	r0, #12
 800eb2c:	f7ff f902 	bl	800dd34 <memp_free>
 800eb30:	e015      	b.n	800eb5e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800eb32:	7bfb      	ldrb	r3, [r7, #15]
 800eb34:	2b01      	cmp	r3, #1
 800eb36:	d104      	bne.n	800eb42 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800eb38:	6879      	ldr	r1, [r7, #4]
 800eb3a:	200b      	movs	r0, #11
 800eb3c:	f7ff f8fa 	bl	800dd34 <memp_free>
 800eb40:	e00d      	b.n	800eb5e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800eb42:	7bfb      	ldrb	r3, [r7, #15]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d103      	bne.n	800eb50 <pbuf_free+0xd4>
          mem_free(p);
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f7fe fd35 	bl	800d5b8 <mem_free>
 800eb4e:	e006      	b.n	800eb5e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800eb50:	4b0b      	ldr	r3, [pc, #44]	; (800eb80 <pbuf_free+0x104>)
 800eb52:	f240 320f 	movw	r2, #783	; 0x30f
 800eb56:	490f      	ldr	r1, [pc, #60]	; (800eb94 <pbuf_free+0x118>)
 800eb58:	480b      	ldr	r0, [pc, #44]	; (800eb88 <pbuf_free+0x10c>)
 800eb5a:	f00e fe09 	bl	801d770 <iprintf>
        }
      }
      count++;
 800eb5e:	7ffb      	ldrb	r3, [r7, #31]
 800eb60:	3301      	adds	r3, #1
 800eb62:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	607b      	str	r3, [r7, #4]
 800eb68:	e001      	b.n	800eb6e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d199      	bne.n	800eaa8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800eb74:	7ffb      	ldrb	r3, [r7, #31]
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3720      	adds	r7, #32
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	0801fab0 	.word	0x0801fab0
 800eb84:	0801fc14 	.word	0x0801fc14
 800eb88:	0801fb10 	.word	0x0801fb10
 800eb8c:	0801fc40 	.word	0x0801fc40
 800eb90:	0801fc58 	.word	0x0801fc58
 800eb94:	0801fc7c 	.word	0x0801fc7c

0800eb98 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b085      	sub	sp, #20
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800eba0:	2300      	movs	r3, #0
 800eba2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800eba4:	e005      	b.n	800ebb2 <pbuf_clen+0x1a>
    ++len;
 800eba6:	89fb      	ldrh	r3, [r7, #14]
 800eba8:	3301      	adds	r3, #1
 800ebaa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d1f6      	bne.n	800eba6 <pbuf_clen+0xe>
  }
  return len;
 800ebb8:	89fb      	ldrh	r3, [r7, #14]
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3714      	adds	r7, #20
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc4:	4770      	bx	lr
	...

0800ebc8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d016      	beq.n	800ec04 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ebd6:	f009 fcc3 	bl	8018560 <sys_arch_protect>
 800ebda:	60f8      	str	r0, [r7, #12]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	7b9b      	ldrb	r3, [r3, #14]
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	b2da      	uxtb	r2, r3
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	739a      	strb	r2, [r3, #14]
 800ebe8:	68f8      	ldr	r0, [r7, #12]
 800ebea:	f009 fcc7 	bl	801857c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	7b9b      	ldrb	r3, [r3, #14]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d106      	bne.n	800ec04 <pbuf_ref+0x3c>
 800ebf6:	4b05      	ldr	r3, [pc, #20]	; (800ec0c <pbuf_ref+0x44>)
 800ebf8:	f240 3242 	movw	r2, #834	; 0x342
 800ebfc:	4904      	ldr	r1, [pc, #16]	; (800ec10 <pbuf_ref+0x48>)
 800ebfe:	4805      	ldr	r0, [pc, #20]	; (800ec14 <pbuf_ref+0x4c>)
 800ec00:	f00e fdb6 	bl	801d770 <iprintf>
  }
}
 800ec04:	bf00      	nop
 800ec06:	3710      	adds	r7, #16
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	0801fab0 	.word	0x0801fab0
 800ec10:	0801fc90 	.word	0x0801fc90
 800ec14:	0801fb10 	.word	0x0801fb10

0800ec18 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d002      	beq.n	800ec2e <pbuf_cat+0x16>
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d107      	bne.n	800ec3e <pbuf_cat+0x26>
 800ec2e:	4b20      	ldr	r3, [pc, #128]	; (800ecb0 <pbuf_cat+0x98>)
 800ec30:	f240 3259 	movw	r2, #857	; 0x359
 800ec34:	491f      	ldr	r1, [pc, #124]	; (800ecb4 <pbuf_cat+0x9c>)
 800ec36:	4820      	ldr	r0, [pc, #128]	; (800ecb8 <pbuf_cat+0xa0>)
 800ec38:	f00e fd9a 	bl	801d770 <iprintf>
 800ec3c:	e034      	b.n	800eca8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	60fb      	str	r3, [r7, #12]
 800ec42:	e00a      	b.n	800ec5a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	891a      	ldrh	r2, [r3, #8]
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	891b      	ldrh	r3, [r3, #8]
 800ec4c:	4413      	add	r3, r2
 800ec4e:	b29a      	uxth	r2, r3
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	60fb      	str	r3, [r7, #12]
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d1f0      	bne.n	800ec44 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	891a      	ldrh	r2, [r3, #8]
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	895b      	ldrh	r3, [r3, #10]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d006      	beq.n	800ec7c <pbuf_cat+0x64>
 800ec6e:	4b10      	ldr	r3, [pc, #64]	; (800ecb0 <pbuf_cat+0x98>)
 800ec70:	f240 3262 	movw	r2, #866	; 0x362
 800ec74:	4911      	ldr	r1, [pc, #68]	; (800ecbc <pbuf_cat+0xa4>)
 800ec76:	4810      	ldr	r0, [pc, #64]	; (800ecb8 <pbuf_cat+0xa0>)
 800ec78:	f00e fd7a 	bl	801d770 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d006      	beq.n	800ec92 <pbuf_cat+0x7a>
 800ec84:	4b0a      	ldr	r3, [pc, #40]	; (800ecb0 <pbuf_cat+0x98>)
 800ec86:	f240 3263 	movw	r2, #867	; 0x363
 800ec8a:	490d      	ldr	r1, [pc, #52]	; (800ecc0 <pbuf_cat+0xa8>)
 800ec8c:	480a      	ldr	r0, [pc, #40]	; (800ecb8 <pbuf_cat+0xa0>)
 800ec8e:	f00e fd6f 	bl	801d770 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	891a      	ldrh	r2, [r3, #8]
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	891b      	ldrh	r3, [r3, #8]
 800ec9a:	4413      	add	r3, r2
 800ec9c:	b29a      	uxth	r2, r3
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	683a      	ldr	r2, [r7, #0]
 800eca6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800eca8:	3710      	adds	r7, #16
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	0801fab0 	.word	0x0801fab0
 800ecb4:	0801fca4 	.word	0x0801fca4
 800ecb8:	0801fb10 	.word	0x0801fb10
 800ecbc:	0801fcdc 	.word	0x0801fcdc
 800ecc0:	0801fd0c 	.word	0x0801fd0c

0800ecc4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b086      	sub	sp, #24
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	617b      	str	r3, [r7, #20]
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d008      	beq.n	800ecee <pbuf_copy+0x2a>
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d005      	beq.n	800ecee <pbuf_copy+0x2a>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	891a      	ldrh	r2, [r3, #8]
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	891b      	ldrh	r3, [r3, #8]
 800ecea:	429a      	cmp	r2, r3
 800ecec:	d209      	bcs.n	800ed02 <pbuf_copy+0x3e>
 800ecee:	4b57      	ldr	r3, [pc, #348]	; (800ee4c <pbuf_copy+0x188>)
 800ecf0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ecf4:	4956      	ldr	r1, [pc, #344]	; (800ee50 <pbuf_copy+0x18c>)
 800ecf6:	4857      	ldr	r0, [pc, #348]	; (800ee54 <pbuf_copy+0x190>)
 800ecf8:	f00e fd3a 	bl	801d770 <iprintf>
 800ecfc:	f06f 030f 	mvn.w	r3, #15
 800ed00:	e09f      	b.n	800ee42 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	895b      	ldrh	r3, [r3, #10]
 800ed06:	461a      	mov	r2, r3
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	1ad2      	subs	r2, r2, r3
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	895b      	ldrh	r3, [r3, #10]
 800ed10:	4619      	mov	r1, r3
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	1acb      	subs	r3, r1, r3
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d306      	bcc.n	800ed28 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	895b      	ldrh	r3, [r3, #10]
 800ed1e:	461a      	mov	r2, r3
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	1ad3      	subs	r3, r2, r3
 800ed24:	60fb      	str	r3, [r7, #12]
 800ed26:	e005      	b.n	800ed34 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	895b      	ldrh	r3, [r3, #10]
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	1ad3      	subs	r3, r2, r3
 800ed32:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	685a      	ldr	r2, [r3, #4]
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	18d0      	adds	r0, r2, r3
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	685a      	ldr	r2, [r3, #4]
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	4413      	add	r3, r2
 800ed44:	68fa      	ldr	r2, [r7, #12]
 800ed46:	4619      	mov	r1, r3
 800ed48:	f00e fcfc 	bl	801d744 <memcpy>
    offset_to += len;
 800ed4c:	697a      	ldr	r2, [r7, #20]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	4413      	add	r3, r2
 800ed52:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ed54:	693a      	ldr	r2, [r7, #16]
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	4413      	add	r3, r2
 800ed5a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	895b      	ldrh	r3, [r3, #10]
 800ed60:	461a      	mov	r2, r3
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	4293      	cmp	r3, r2
 800ed66:	d906      	bls.n	800ed76 <pbuf_copy+0xb2>
 800ed68:	4b38      	ldr	r3, [pc, #224]	; (800ee4c <pbuf_copy+0x188>)
 800ed6a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ed6e:	493a      	ldr	r1, [pc, #232]	; (800ee58 <pbuf_copy+0x194>)
 800ed70:	4838      	ldr	r0, [pc, #224]	; (800ee54 <pbuf_copy+0x190>)
 800ed72:	f00e fcfd 	bl	801d770 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	895b      	ldrh	r3, [r3, #10]
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d906      	bls.n	800ed90 <pbuf_copy+0xcc>
 800ed82:	4b32      	ldr	r3, [pc, #200]	; (800ee4c <pbuf_copy+0x188>)
 800ed84:	f240 32da 	movw	r2, #986	; 0x3da
 800ed88:	4934      	ldr	r1, [pc, #208]	; (800ee5c <pbuf_copy+0x198>)
 800ed8a:	4832      	ldr	r0, [pc, #200]	; (800ee54 <pbuf_copy+0x190>)
 800ed8c:	f00e fcf0 	bl	801d770 <iprintf>
    if (offset_from >= p_from->len) {
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	895b      	ldrh	r3, [r3, #10]
 800ed94:	461a      	mov	r2, r3
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d304      	bcc.n	800eda6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	895b      	ldrh	r3, [r3, #10]
 800edaa:	461a      	mov	r2, r3
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	4293      	cmp	r3, r2
 800edb0:	d114      	bne.n	800eddc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800edb2:	2300      	movs	r3, #0
 800edb4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d10c      	bne.n	800eddc <pbuf_copy+0x118>
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d009      	beq.n	800eddc <pbuf_copy+0x118>
 800edc8:	4b20      	ldr	r3, [pc, #128]	; (800ee4c <pbuf_copy+0x188>)
 800edca:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800edce:	4924      	ldr	r1, [pc, #144]	; (800ee60 <pbuf_copy+0x19c>)
 800edd0:	4820      	ldr	r0, [pc, #128]	; (800ee54 <pbuf_copy+0x190>)
 800edd2:	f00e fccd 	bl	801d770 <iprintf>
 800edd6:	f06f 030f 	mvn.w	r3, #15
 800edda:	e032      	b.n	800ee42 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d013      	beq.n	800ee0a <pbuf_copy+0x146>
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	895a      	ldrh	r2, [r3, #10]
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	891b      	ldrh	r3, [r3, #8]
 800edea:	429a      	cmp	r2, r3
 800edec:	d10d      	bne.n	800ee0a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d009      	beq.n	800ee0a <pbuf_copy+0x146>
 800edf6:	4b15      	ldr	r3, [pc, #84]	; (800ee4c <pbuf_copy+0x188>)
 800edf8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800edfc:	4919      	ldr	r1, [pc, #100]	; (800ee64 <pbuf_copy+0x1a0>)
 800edfe:	4815      	ldr	r0, [pc, #84]	; (800ee54 <pbuf_copy+0x190>)
 800ee00:	f00e fcb6 	bl	801d770 <iprintf>
 800ee04:	f06f 0305 	mvn.w	r3, #5
 800ee08:	e01b      	b.n	800ee42 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d013      	beq.n	800ee38 <pbuf_copy+0x174>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	895a      	ldrh	r2, [r3, #10]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	891b      	ldrh	r3, [r3, #8]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d10d      	bne.n	800ee38 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d009      	beq.n	800ee38 <pbuf_copy+0x174>
 800ee24:	4b09      	ldr	r3, [pc, #36]	; (800ee4c <pbuf_copy+0x188>)
 800ee26:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ee2a:	490e      	ldr	r1, [pc, #56]	; (800ee64 <pbuf_copy+0x1a0>)
 800ee2c:	4809      	ldr	r0, [pc, #36]	; (800ee54 <pbuf_copy+0x190>)
 800ee2e:	f00e fc9f 	bl	801d770 <iprintf>
 800ee32:	f06f 0305 	mvn.w	r3, #5
 800ee36:	e004      	b.n	800ee42 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	f47f af61 	bne.w	800ed02 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ee40:	2300      	movs	r3, #0
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3718      	adds	r7, #24
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
 800ee4a:	bf00      	nop
 800ee4c:	0801fab0 	.word	0x0801fab0
 800ee50:	0801fd58 	.word	0x0801fd58
 800ee54:	0801fb10 	.word	0x0801fb10
 800ee58:	0801fd88 	.word	0x0801fd88
 800ee5c:	0801fda0 	.word	0x0801fda0
 800ee60:	0801fdbc 	.word	0x0801fdbc
 800ee64:	0801fdcc 	.word	0x0801fdcc

0800ee68 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b088      	sub	sp, #32
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	60f8      	str	r0, [r7, #12]
 800ee70:	60b9      	str	r1, [r7, #8]
 800ee72:	4611      	mov	r1, r2
 800ee74:	461a      	mov	r2, r3
 800ee76:	460b      	mov	r3, r1
 800ee78:	80fb      	strh	r3, [r7, #6]
 800ee7a:	4613      	mov	r3, r2
 800ee7c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ee82:	2300      	movs	r3, #0
 800ee84:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d108      	bne.n	800ee9e <pbuf_copy_partial+0x36>
 800ee8c:	4b2b      	ldr	r3, [pc, #172]	; (800ef3c <pbuf_copy_partial+0xd4>)
 800ee8e:	f240 420a 	movw	r2, #1034	; 0x40a
 800ee92:	492b      	ldr	r1, [pc, #172]	; (800ef40 <pbuf_copy_partial+0xd8>)
 800ee94:	482b      	ldr	r0, [pc, #172]	; (800ef44 <pbuf_copy_partial+0xdc>)
 800ee96:	f00e fc6b 	bl	801d770 <iprintf>
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	e04a      	b.n	800ef34 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d108      	bne.n	800eeb6 <pbuf_copy_partial+0x4e>
 800eea4:	4b25      	ldr	r3, [pc, #148]	; (800ef3c <pbuf_copy_partial+0xd4>)
 800eea6:	f240 420b 	movw	r2, #1035	; 0x40b
 800eeaa:	4927      	ldr	r1, [pc, #156]	; (800ef48 <pbuf_copy_partial+0xe0>)
 800eeac:	4825      	ldr	r0, [pc, #148]	; (800ef44 <pbuf_copy_partial+0xdc>)
 800eeae:	f00e fc5f 	bl	801d770 <iprintf>
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	e03e      	b.n	800ef34 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	61fb      	str	r3, [r7, #28]
 800eeba:	e034      	b.n	800ef26 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800eebc:	88bb      	ldrh	r3, [r7, #4]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d00a      	beq.n	800eed8 <pbuf_copy_partial+0x70>
 800eec2:	69fb      	ldr	r3, [r7, #28]
 800eec4:	895b      	ldrh	r3, [r3, #10]
 800eec6:	88ba      	ldrh	r2, [r7, #4]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d305      	bcc.n	800eed8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	895b      	ldrh	r3, [r3, #10]
 800eed0:	88ba      	ldrh	r2, [r7, #4]
 800eed2:	1ad3      	subs	r3, r2, r3
 800eed4:	80bb      	strh	r3, [r7, #4]
 800eed6:	e023      	b.n	800ef20 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800eed8:	69fb      	ldr	r3, [r7, #28]
 800eeda:	895a      	ldrh	r2, [r3, #10]
 800eedc:	88bb      	ldrh	r3, [r7, #4]
 800eede:	1ad3      	subs	r3, r2, r3
 800eee0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800eee2:	8b3a      	ldrh	r2, [r7, #24]
 800eee4:	88fb      	ldrh	r3, [r7, #6]
 800eee6:	429a      	cmp	r2, r3
 800eee8:	d901      	bls.n	800eeee <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800eeea:	88fb      	ldrh	r3, [r7, #6]
 800eeec:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800eeee:	8b7b      	ldrh	r3, [r7, #26]
 800eef0:	68ba      	ldr	r2, [r7, #8]
 800eef2:	18d0      	adds	r0, r2, r3
 800eef4:	69fb      	ldr	r3, [r7, #28]
 800eef6:	685a      	ldr	r2, [r3, #4]
 800eef8:	88bb      	ldrh	r3, [r7, #4]
 800eefa:	4413      	add	r3, r2
 800eefc:	8b3a      	ldrh	r2, [r7, #24]
 800eefe:	4619      	mov	r1, r3
 800ef00:	f00e fc20 	bl	801d744 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ef04:	8afa      	ldrh	r2, [r7, #22]
 800ef06:	8b3b      	ldrh	r3, [r7, #24]
 800ef08:	4413      	add	r3, r2
 800ef0a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ef0c:	8b7a      	ldrh	r2, [r7, #26]
 800ef0e:	8b3b      	ldrh	r3, [r7, #24]
 800ef10:	4413      	add	r3, r2
 800ef12:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ef14:	88fa      	ldrh	r2, [r7, #6]
 800ef16:	8b3b      	ldrh	r3, [r7, #24]
 800ef18:	1ad3      	subs	r3, r2, r3
 800ef1a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ef20:	69fb      	ldr	r3, [r7, #28]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	61fb      	str	r3, [r7, #28]
 800ef26:	88fb      	ldrh	r3, [r7, #6]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d002      	beq.n	800ef32 <pbuf_copy_partial+0xca>
 800ef2c:	69fb      	ldr	r3, [r7, #28]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d1c4      	bne.n	800eebc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ef32:	8afb      	ldrh	r3, [r7, #22]
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3720      	adds	r7, #32
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}
 800ef3c:	0801fab0 	.word	0x0801fab0
 800ef40:	0801fdf8 	.word	0x0801fdf8
 800ef44:	0801fb10 	.word	0x0801fb10
 800ef48:	0801fe18 	.word	0x0801fe18

0800ef4c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b084      	sub	sp, #16
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	4603      	mov	r3, r0
 800ef54:	603a      	str	r2, [r7, #0]
 800ef56:	71fb      	strb	r3, [r7, #7]
 800ef58:	460b      	mov	r3, r1
 800ef5a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	8919      	ldrh	r1, [r3, #8]
 800ef60:	88ba      	ldrh	r2, [r7, #4]
 800ef62:	79fb      	ldrb	r3, [r7, #7]
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7ff faa5 	bl	800e4b4 <pbuf_alloc>
 800ef6a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d101      	bne.n	800ef76 <pbuf_clone+0x2a>
    return NULL;
 800ef72:	2300      	movs	r3, #0
 800ef74:	e011      	b.n	800ef9a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ef76:	6839      	ldr	r1, [r7, #0]
 800ef78:	68f8      	ldr	r0, [r7, #12]
 800ef7a:	f7ff fea3 	bl	800ecc4 <pbuf_copy>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ef82:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d006      	beq.n	800ef98 <pbuf_clone+0x4c>
 800ef8a:	4b06      	ldr	r3, [pc, #24]	; (800efa4 <pbuf_clone+0x58>)
 800ef8c:	f240 5224 	movw	r2, #1316	; 0x524
 800ef90:	4905      	ldr	r1, [pc, #20]	; (800efa8 <pbuf_clone+0x5c>)
 800ef92:	4806      	ldr	r0, [pc, #24]	; (800efac <pbuf_clone+0x60>)
 800ef94:	f00e fbec 	bl	801d770 <iprintf>
  return q;
 800ef98:	68fb      	ldr	r3, [r7, #12]
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3710      	adds	r7, #16
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	0801fab0 	.word	0x0801fab0
 800efa8:	0801ff24 	.word	0x0801ff24
 800efac:	0801fb10 	.word	0x0801fb10

0800efb0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800efb4:	f00e fc6a 	bl	801d88c <rand>
 800efb8:	4603      	mov	r3, r0
 800efba:	b29b      	uxth	r3, r3
 800efbc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800efc0:	b29b      	uxth	r3, r3
 800efc2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800efc6:	b29a      	uxth	r2, r3
 800efc8:	4b01      	ldr	r3, [pc, #4]	; (800efd0 <tcp_init+0x20>)
 800efca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800efcc:	bf00      	nop
 800efce:	bd80      	pop	{r7, pc}
 800efd0:	20000024 	.word	0x20000024

0800efd4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b082      	sub	sp, #8
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	7d1b      	ldrb	r3, [r3, #20]
 800efe0:	2b01      	cmp	r3, #1
 800efe2:	d105      	bne.n	800eff0 <tcp_free+0x1c>
 800efe4:	4b06      	ldr	r3, [pc, #24]	; (800f000 <tcp_free+0x2c>)
 800efe6:	22d4      	movs	r2, #212	; 0xd4
 800efe8:	4906      	ldr	r1, [pc, #24]	; (800f004 <tcp_free+0x30>)
 800efea:	4807      	ldr	r0, [pc, #28]	; (800f008 <tcp_free+0x34>)
 800efec:	f00e fbc0 	bl	801d770 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800eff0:	6879      	ldr	r1, [r7, #4]
 800eff2:	2001      	movs	r0, #1
 800eff4:	f7fe fe9e 	bl	800dd34 <memp_free>
}
 800eff8:	bf00      	nop
 800effa:	3708      	adds	r7, #8
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}
 800f000:	0801ffb0 	.word	0x0801ffb0
 800f004:	0801ffe0 	.word	0x0801ffe0
 800f008:	0801fff4 	.word	0x0801fff4

0800f00c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b082      	sub	sp, #8
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	7d1b      	ldrb	r3, [r3, #20]
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d105      	bne.n	800f028 <tcp_free_listen+0x1c>
 800f01c:	4b06      	ldr	r3, [pc, #24]	; (800f038 <tcp_free_listen+0x2c>)
 800f01e:	22df      	movs	r2, #223	; 0xdf
 800f020:	4906      	ldr	r1, [pc, #24]	; (800f03c <tcp_free_listen+0x30>)
 800f022:	4807      	ldr	r0, [pc, #28]	; (800f040 <tcp_free_listen+0x34>)
 800f024:	f00e fba4 	bl	801d770 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f028:	6879      	ldr	r1, [r7, #4]
 800f02a:	2002      	movs	r0, #2
 800f02c:	f7fe fe82 	bl	800dd34 <memp_free>
}
 800f030:	bf00      	nop
 800f032:	3708      	adds	r7, #8
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}
 800f038:	0801ffb0 	.word	0x0801ffb0
 800f03c:	0802001c 	.word	0x0802001c
 800f040:	0801fff4 	.word	0x0801fff4

0800f044 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f048:	f001 f85c 	bl	8010104 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f04c:	4b07      	ldr	r3, [pc, #28]	; (800f06c <tcp_tmr+0x28>)
 800f04e:	781b      	ldrb	r3, [r3, #0]
 800f050:	3301      	adds	r3, #1
 800f052:	b2da      	uxtb	r2, r3
 800f054:	4b05      	ldr	r3, [pc, #20]	; (800f06c <tcp_tmr+0x28>)
 800f056:	701a      	strb	r2, [r3, #0]
 800f058:	4b04      	ldr	r3, [pc, #16]	; (800f06c <tcp_tmr+0x28>)
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	f003 0301 	and.w	r3, r3, #1
 800f060:	2b00      	cmp	r3, #0
 800f062:	d001      	beq.n	800f068 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f064:	f000 fd0e 	bl	800fa84 <tcp_slowtmr>
  }
}
 800f068:	bf00      	nop
 800f06a:	bd80      	pop	{r7, pc}
 800f06c:	200113d1 	.word	0x200113d1

0800f070 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b084      	sub	sp, #16
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d105      	bne.n	800f08c <tcp_remove_listener+0x1c>
 800f080:	4b0d      	ldr	r3, [pc, #52]	; (800f0b8 <tcp_remove_listener+0x48>)
 800f082:	22ff      	movs	r2, #255	; 0xff
 800f084:	490d      	ldr	r1, [pc, #52]	; (800f0bc <tcp_remove_listener+0x4c>)
 800f086:	480e      	ldr	r0, [pc, #56]	; (800f0c0 <tcp_remove_listener+0x50>)
 800f088:	f00e fb72 	bl	801d770 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	60fb      	str	r3, [r7, #12]
 800f090:	e00a      	b.n	800f0a8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f096:	683a      	ldr	r2, [r7, #0]
 800f098:	429a      	cmp	r2, r3
 800f09a:	d102      	bne.n	800f0a2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	68db      	ldr	r3, [r3, #12]
 800f0a6:	60fb      	str	r3, [r7, #12]
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d1f1      	bne.n	800f092 <tcp_remove_listener+0x22>
    }
  }
}
 800f0ae:	bf00      	nop
 800f0b0:	bf00      	nop
 800f0b2:	3710      	adds	r7, #16
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}
 800f0b8:	0801ffb0 	.word	0x0801ffb0
 800f0bc:	08020038 	.word	0x08020038
 800f0c0:	0801fff4 	.word	0x0801fff4

0800f0c4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d106      	bne.n	800f0e0 <tcp_listen_closed+0x1c>
 800f0d2:	4b14      	ldr	r3, [pc, #80]	; (800f124 <tcp_listen_closed+0x60>)
 800f0d4:	f240 1211 	movw	r2, #273	; 0x111
 800f0d8:	4913      	ldr	r1, [pc, #76]	; (800f128 <tcp_listen_closed+0x64>)
 800f0da:	4814      	ldr	r0, [pc, #80]	; (800f12c <tcp_listen_closed+0x68>)
 800f0dc:	f00e fb48 	bl	801d770 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	7d1b      	ldrb	r3, [r3, #20]
 800f0e4:	2b01      	cmp	r3, #1
 800f0e6:	d006      	beq.n	800f0f6 <tcp_listen_closed+0x32>
 800f0e8:	4b0e      	ldr	r3, [pc, #56]	; (800f124 <tcp_listen_closed+0x60>)
 800f0ea:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f0ee:	4910      	ldr	r1, [pc, #64]	; (800f130 <tcp_listen_closed+0x6c>)
 800f0f0:	480e      	ldr	r0, [pc, #56]	; (800f12c <tcp_listen_closed+0x68>)
 800f0f2:	f00e fb3d 	bl	801d770 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	60fb      	str	r3, [r7, #12]
 800f0fa:	e00b      	b.n	800f114 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f0fc:	4a0d      	ldr	r2, [pc, #52]	; (800f134 <tcp_listen_closed+0x70>)
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	6879      	ldr	r1, [r7, #4]
 800f108:	4618      	mov	r0, r3
 800f10a:	f7ff ffb1 	bl	800f070 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	3301      	adds	r3, #1
 800f112:	60fb      	str	r3, [r7, #12]
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2b03      	cmp	r3, #3
 800f118:	d9f0      	bls.n	800f0fc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f11a:	bf00      	nop
 800f11c:	bf00      	nop
 800f11e:	3710      	adds	r7, #16
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}
 800f124:	0801ffb0 	.word	0x0801ffb0
 800f128:	08020060 	.word	0x08020060
 800f12c:	0801fff4 	.word	0x0801fff4
 800f130:	0802006c 	.word	0x0802006c
 800f134:	08022370 	.word	0x08022370

0800f138 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f138:	b5b0      	push	{r4, r5, r7, lr}
 800f13a:	b088      	sub	sp, #32
 800f13c:	af04      	add	r7, sp, #16
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	460b      	mov	r3, r1
 800f142:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d106      	bne.n	800f158 <tcp_close_shutdown+0x20>
 800f14a:	4b63      	ldr	r3, [pc, #396]	; (800f2d8 <tcp_close_shutdown+0x1a0>)
 800f14c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f150:	4962      	ldr	r1, [pc, #392]	; (800f2dc <tcp_close_shutdown+0x1a4>)
 800f152:	4863      	ldr	r0, [pc, #396]	; (800f2e0 <tcp_close_shutdown+0x1a8>)
 800f154:	f00e fb0c 	bl	801d770 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f158:	78fb      	ldrb	r3, [r7, #3]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d066      	beq.n	800f22c <tcp_close_shutdown+0xf4>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	7d1b      	ldrb	r3, [r3, #20]
 800f162:	2b04      	cmp	r3, #4
 800f164:	d003      	beq.n	800f16e <tcp_close_shutdown+0x36>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	7d1b      	ldrb	r3, [r3, #20]
 800f16a:	2b07      	cmp	r3, #7
 800f16c:	d15e      	bne.n	800f22c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f172:	2b00      	cmp	r3, #0
 800f174:	d104      	bne.n	800f180 <tcp_close_shutdown+0x48>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f17a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f17e:	d055      	beq.n	800f22c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	8b5b      	ldrh	r3, [r3, #26]
 800f184:	f003 0310 	and.w	r3, r3, #16
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d106      	bne.n	800f19a <tcp_close_shutdown+0x62>
 800f18c:	4b52      	ldr	r3, [pc, #328]	; (800f2d8 <tcp_close_shutdown+0x1a0>)
 800f18e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f192:	4954      	ldr	r1, [pc, #336]	; (800f2e4 <tcp_close_shutdown+0x1ac>)
 800f194:	4852      	ldr	r0, [pc, #328]	; (800f2e0 <tcp_close_shutdown+0x1a8>)
 800f196:	f00e faeb 	bl	801d770 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f1a2:	687d      	ldr	r5, [r7, #4]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	3304      	adds	r3, #4
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	8ad2      	ldrh	r2, [r2, #22]
 800f1ac:	6879      	ldr	r1, [r7, #4]
 800f1ae:	8b09      	ldrh	r1, [r1, #24]
 800f1b0:	9102      	str	r1, [sp, #8]
 800f1b2:	9201      	str	r2, [sp, #4]
 800f1b4:	9300      	str	r3, [sp, #0]
 800f1b6:	462b      	mov	r3, r5
 800f1b8:	4622      	mov	r2, r4
 800f1ba:	4601      	mov	r1, r0
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f005 fd71 	bl	8014ca4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f001 fb4e 	bl	8010864 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f1c8:	4b47      	ldr	r3, [pc, #284]	; (800f2e8 <tcp_close_shutdown+0x1b0>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	687a      	ldr	r2, [r7, #4]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d105      	bne.n	800f1de <tcp_close_shutdown+0xa6>
 800f1d2:	4b45      	ldr	r3, [pc, #276]	; (800f2e8 <tcp_close_shutdown+0x1b0>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	68db      	ldr	r3, [r3, #12]
 800f1d8:	4a43      	ldr	r2, [pc, #268]	; (800f2e8 <tcp_close_shutdown+0x1b0>)
 800f1da:	6013      	str	r3, [r2, #0]
 800f1dc:	e013      	b.n	800f206 <tcp_close_shutdown+0xce>
 800f1de:	4b42      	ldr	r3, [pc, #264]	; (800f2e8 <tcp_close_shutdown+0x1b0>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	60fb      	str	r3, [r7, #12]
 800f1e4:	e00c      	b.n	800f200 <tcp_close_shutdown+0xc8>
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	68db      	ldr	r3, [r3, #12]
 800f1ea:	687a      	ldr	r2, [r7, #4]
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d104      	bne.n	800f1fa <tcp_close_shutdown+0xc2>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	68da      	ldr	r2, [r3, #12]
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	60da      	str	r2, [r3, #12]
 800f1f8:	e005      	b.n	800f206 <tcp_close_shutdown+0xce>
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	68db      	ldr	r3, [r3, #12]
 800f1fe:	60fb      	str	r3, [r7, #12]
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d1ef      	bne.n	800f1e6 <tcp_close_shutdown+0xae>
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2200      	movs	r2, #0
 800f20a:	60da      	str	r2, [r3, #12]
 800f20c:	4b37      	ldr	r3, [pc, #220]	; (800f2ec <tcp_close_shutdown+0x1b4>)
 800f20e:	2201      	movs	r2, #1
 800f210:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f212:	4b37      	ldr	r3, [pc, #220]	; (800f2f0 <tcp_close_shutdown+0x1b8>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	429a      	cmp	r2, r3
 800f21a:	d102      	bne.n	800f222 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f21c:	f003 ffe6 	bl	80131ec <tcp_trigger_input_pcb_close>
 800f220:	e002      	b.n	800f228 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f7ff fed6 	bl	800efd4 <tcp_free>
      }
      return ERR_OK;
 800f228:	2300      	movs	r3, #0
 800f22a:	e050      	b.n	800f2ce <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	7d1b      	ldrb	r3, [r3, #20]
 800f230:	2b02      	cmp	r3, #2
 800f232:	d03b      	beq.n	800f2ac <tcp_close_shutdown+0x174>
 800f234:	2b02      	cmp	r3, #2
 800f236:	dc44      	bgt.n	800f2c2 <tcp_close_shutdown+0x18a>
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d002      	beq.n	800f242 <tcp_close_shutdown+0x10a>
 800f23c:	2b01      	cmp	r3, #1
 800f23e:	d02a      	beq.n	800f296 <tcp_close_shutdown+0x15e>
 800f240:	e03f      	b.n	800f2c2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	8adb      	ldrh	r3, [r3, #22]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d021      	beq.n	800f28e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f24a:	4b2a      	ldr	r3, [pc, #168]	; (800f2f4 <tcp_close_shutdown+0x1bc>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	687a      	ldr	r2, [r7, #4]
 800f250:	429a      	cmp	r2, r3
 800f252:	d105      	bne.n	800f260 <tcp_close_shutdown+0x128>
 800f254:	4b27      	ldr	r3, [pc, #156]	; (800f2f4 <tcp_close_shutdown+0x1bc>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	68db      	ldr	r3, [r3, #12]
 800f25a:	4a26      	ldr	r2, [pc, #152]	; (800f2f4 <tcp_close_shutdown+0x1bc>)
 800f25c:	6013      	str	r3, [r2, #0]
 800f25e:	e013      	b.n	800f288 <tcp_close_shutdown+0x150>
 800f260:	4b24      	ldr	r3, [pc, #144]	; (800f2f4 <tcp_close_shutdown+0x1bc>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	60bb      	str	r3, [r7, #8]
 800f266:	e00c      	b.n	800f282 <tcp_close_shutdown+0x14a>
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	68db      	ldr	r3, [r3, #12]
 800f26c:	687a      	ldr	r2, [r7, #4]
 800f26e:	429a      	cmp	r2, r3
 800f270:	d104      	bne.n	800f27c <tcp_close_shutdown+0x144>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	68da      	ldr	r2, [r3, #12]
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	60da      	str	r2, [r3, #12]
 800f27a:	e005      	b.n	800f288 <tcp_close_shutdown+0x150>
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	68db      	ldr	r3, [r3, #12]
 800f280:	60bb      	str	r3, [r7, #8]
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d1ef      	bne.n	800f268 <tcp_close_shutdown+0x130>
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2200      	movs	r2, #0
 800f28c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f7ff fea0 	bl	800efd4 <tcp_free>
      break;
 800f294:	e01a      	b.n	800f2cc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f7ff ff14 	bl	800f0c4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f29c:	6879      	ldr	r1, [r7, #4]
 800f29e:	4816      	ldr	r0, [pc, #88]	; (800f2f8 <tcp_close_shutdown+0x1c0>)
 800f2a0:	f001 fb30 	bl	8010904 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f7ff feb1 	bl	800f00c <tcp_free_listen>
      break;
 800f2aa:	e00f      	b.n	800f2cc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f2ac:	6879      	ldr	r1, [r7, #4]
 800f2ae:	480e      	ldr	r0, [pc, #56]	; (800f2e8 <tcp_close_shutdown+0x1b0>)
 800f2b0:	f001 fb28 	bl	8010904 <tcp_pcb_remove>
 800f2b4:	4b0d      	ldr	r3, [pc, #52]	; (800f2ec <tcp_close_shutdown+0x1b4>)
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f7ff fe8a 	bl	800efd4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f2c0:	e004      	b.n	800f2cc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f000 f81a 	bl	800f2fc <tcp_close_shutdown_fin>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	e000      	b.n	800f2ce <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f2cc:	2300      	movs	r3, #0
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3710      	adds	r7, #16
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bdb0      	pop	{r4, r5, r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	0801ffb0 	.word	0x0801ffb0
 800f2dc:	08020084 	.word	0x08020084
 800f2e0:	0801fff4 	.word	0x0801fff4
 800f2e4:	080200a4 	.word	0x080200a4
 800f2e8:	200113c8 	.word	0x200113c8
 800f2ec:	200113d0 	.word	0x200113d0
 800f2f0:	20011408 	.word	0x20011408
 800f2f4:	200113c0 	.word	0x200113c0
 800f2f8:	200113c4 	.word	0x200113c4

0800f2fc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b084      	sub	sp, #16
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d106      	bne.n	800f318 <tcp_close_shutdown_fin+0x1c>
 800f30a:	4b2e      	ldr	r3, [pc, #184]	; (800f3c4 <tcp_close_shutdown_fin+0xc8>)
 800f30c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f310:	492d      	ldr	r1, [pc, #180]	; (800f3c8 <tcp_close_shutdown_fin+0xcc>)
 800f312:	482e      	ldr	r0, [pc, #184]	; (800f3cc <tcp_close_shutdown_fin+0xd0>)
 800f314:	f00e fa2c 	bl	801d770 <iprintf>

  switch (pcb->state) {
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	7d1b      	ldrb	r3, [r3, #20]
 800f31c:	2b07      	cmp	r3, #7
 800f31e:	d020      	beq.n	800f362 <tcp_close_shutdown_fin+0x66>
 800f320:	2b07      	cmp	r3, #7
 800f322:	dc2b      	bgt.n	800f37c <tcp_close_shutdown_fin+0x80>
 800f324:	2b03      	cmp	r3, #3
 800f326:	d002      	beq.n	800f32e <tcp_close_shutdown_fin+0x32>
 800f328:	2b04      	cmp	r3, #4
 800f32a:	d00d      	beq.n	800f348 <tcp_close_shutdown_fin+0x4c>
 800f32c:	e026      	b.n	800f37c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	f004 fdc6 	bl	8013ec0 <tcp_send_fin>
 800f334:	4603      	mov	r3, r0
 800f336:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d11f      	bne.n	800f380 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2205      	movs	r2, #5
 800f344:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f346:	e01b      	b.n	800f380 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f004 fdb9 	bl	8013ec0 <tcp_send_fin>
 800f34e:	4603      	mov	r3, r0
 800f350:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d114      	bne.n	800f384 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2205      	movs	r2, #5
 800f35e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f360:	e010      	b.n	800f384 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f004 fdac 	bl	8013ec0 <tcp_send_fin>
 800f368:	4603      	mov	r3, r0
 800f36a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f36c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d109      	bne.n	800f388 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2209      	movs	r2, #9
 800f378:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f37a:	e005      	b.n	800f388 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f37c:	2300      	movs	r3, #0
 800f37e:	e01c      	b.n	800f3ba <tcp_close_shutdown_fin+0xbe>
      break;
 800f380:	bf00      	nop
 800f382:	e002      	b.n	800f38a <tcp_close_shutdown_fin+0x8e>
      break;
 800f384:	bf00      	nop
 800f386:	e000      	b.n	800f38a <tcp_close_shutdown_fin+0x8e>
      break;
 800f388:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f38a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d103      	bne.n	800f39a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f004 fed2 	bl	801413c <tcp_output>
 800f398:	e00d      	b.n	800f3b6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f39a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f39e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3a2:	d108      	bne.n	800f3b6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	8b5b      	ldrh	r3, [r3, #26]
 800f3a8:	f043 0308 	orr.w	r3, r3, #8
 800f3ac:	b29a      	uxth	r2, r3
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	e001      	b.n	800f3ba <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f3b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3710      	adds	r7, #16
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	0801ffb0 	.word	0x0801ffb0
 800f3c8:	08020060 	.word	0x08020060
 800f3cc:	0801fff4 	.word	0x0801fff4

0800f3d0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d109      	bne.n	800f3f2 <tcp_close+0x22>
 800f3de:	4b0f      	ldr	r3, [pc, #60]	; (800f41c <tcp_close+0x4c>)
 800f3e0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f3e4:	490e      	ldr	r1, [pc, #56]	; (800f420 <tcp_close+0x50>)
 800f3e6:	480f      	ldr	r0, [pc, #60]	; (800f424 <tcp_close+0x54>)
 800f3e8:	f00e f9c2 	bl	801d770 <iprintf>
 800f3ec:	f06f 030f 	mvn.w	r3, #15
 800f3f0:	e00f      	b.n	800f412 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	7d1b      	ldrb	r3, [r3, #20]
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	d006      	beq.n	800f408 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	8b5b      	ldrh	r3, [r3, #26]
 800f3fe:	f043 0310 	orr.w	r3, r3, #16
 800f402:	b29a      	uxth	r2, r3
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f408:	2101      	movs	r1, #1
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f7ff fe94 	bl	800f138 <tcp_close_shutdown>
 800f410:	4603      	mov	r3, r0
}
 800f412:	4618      	mov	r0, r3
 800f414:	3708      	adds	r7, #8
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	0801ffb0 	.word	0x0801ffb0
 800f420:	080200c0 	.word	0x080200c0
 800f424:	0801fff4 	.word	0x0801fff4

0800f428 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b084      	sub	sp, #16
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d109      	bne.n	800f44e <tcp_shutdown+0x26>
 800f43a:	4b26      	ldr	r3, [pc, #152]	; (800f4d4 <tcp_shutdown+0xac>)
 800f43c:	f240 2207 	movw	r2, #519	; 0x207
 800f440:	4925      	ldr	r1, [pc, #148]	; (800f4d8 <tcp_shutdown+0xb0>)
 800f442:	4826      	ldr	r0, [pc, #152]	; (800f4dc <tcp_shutdown+0xb4>)
 800f444:	f00e f994 	bl	801d770 <iprintf>
 800f448:	f06f 030f 	mvn.w	r3, #15
 800f44c:	e03d      	b.n	800f4ca <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	7d1b      	ldrb	r3, [r3, #20]
 800f452:	2b01      	cmp	r3, #1
 800f454:	d102      	bne.n	800f45c <tcp_shutdown+0x34>
    return ERR_CONN;
 800f456:	f06f 030a 	mvn.w	r3, #10
 800f45a:	e036      	b.n	800f4ca <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d01b      	beq.n	800f49a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	8b5b      	ldrh	r3, [r3, #26]
 800f466:	f043 0310 	orr.w	r3, r3, #16
 800f46a:	b29a      	uxth	r2, r3
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d005      	beq.n	800f482 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f476:	2101      	movs	r1, #1
 800f478:	68f8      	ldr	r0, [r7, #12]
 800f47a:	f7ff fe5d 	bl	800f138 <tcp_close_shutdown>
 800f47e:	4603      	mov	r3, r0
 800f480:	e023      	b.n	800f4ca <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f486:	2b00      	cmp	r3, #0
 800f488:	d007      	beq.n	800f49a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f48e:	4618      	mov	r0, r3
 800f490:	f7ff faf4 	bl	800ea7c <pbuf_free>
      pcb->refused_data = NULL;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	2200      	movs	r2, #0
 800f498:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d013      	beq.n	800f4c8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	7d1b      	ldrb	r3, [r3, #20]
 800f4a4:	2b04      	cmp	r3, #4
 800f4a6:	dc02      	bgt.n	800f4ae <tcp_shutdown+0x86>
 800f4a8:	2b03      	cmp	r3, #3
 800f4aa:	da02      	bge.n	800f4b2 <tcp_shutdown+0x8a>
 800f4ac:	e009      	b.n	800f4c2 <tcp_shutdown+0x9a>
 800f4ae:	2b07      	cmp	r3, #7
 800f4b0:	d107      	bne.n	800f4c2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	b2db      	uxtb	r3, r3
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	68f8      	ldr	r0, [r7, #12]
 800f4ba:	f7ff fe3d 	bl	800f138 <tcp_close_shutdown>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	e003      	b.n	800f4ca <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f4c2:	f06f 030a 	mvn.w	r3, #10
 800f4c6:	e000      	b.n	800f4ca <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800f4c8:	2300      	movs	r3, #0
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3710      	adds	r7, #16
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	0801ffb0 	.word	0x0801ffb0
 800f4d8:	080200d8 	.word	0x080200d8
 800f4dc:	0801fff4 	.word	0x0801fff4

0800f4e0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b08e      	sub	sp, #56	; 0x38
 800f4e4:	af04      	add	r7, sp, #16
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d107      	bne.n	800f500 <tcp_abandon+0x20>
 800f4f0:	4b52      	ldr	r3, [pc, #328]	; (800f63c <tcp_abandon+0x15c>)
 800f4f2:	f240 223d 	movw	r2, #573	; 0x23d
 800f4f6:	4952      	ldr	r1, [pc, #328]	; (800f640 <tcp_abandon+0x160>)
 800f4f8:	4852      	ldr	r0, [pc, #328]	; (800f644 <tcp_abandon+0x164>)
 800f4fa:	f00e f939 	bl	801d770 <iprintf>
 800f4fe:	e099      	b.n	800f634 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	7d1b      	ldrb	r3, [r3, #20]
 800f504:	2b01      	cmp	r3, #1
 800f506:	d106      	bne.n	800f516 <tcp_abandon+0x36>
 800f508:	4b4c      	ldr	r3, [pc, #304]	; (800f63c <tcp_abandon+0x15c>)
 800f50a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f50e:	494e      	ldr	r1, [pc, #312]	; (800f648 <tcp_abandon+0x168>)
 800f510:	484c      	ldr	r0, [pc, #304]	; (800f644 <tcp_abandon+0x164>)
 800f512:	f00e f92d 	bl	801d770 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	7d1b      	ldrb	r3, [r3, #20]
 800f51a:	2b0a      	cmp	r3, #10
 800f51c:	d107      	bne.n	800f52e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f51e:	6879      	ldr	r1, [r7, #4]
 800f520:	484a      	ldr	r0, [pc, #296]	; (800f64c <tcp_abandon+0x16c>)
 800f522:	f001 f9ef 	bl	8010904 <tcp_pcb_remove>
    tcp_free(pcb);
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f7ff fd54 	bl	800efd4 <tcp_free>
 800f52c:	e082      	b.n	800f634 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f52e:	2300      	movs	r3, #0
 800f530:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f532:	2300      	movs	r3, #0
 800f534:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f53a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f540:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f548:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	691b      	ldr	r3, [r3, #16]
 800f54e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	7d1b      	ldrb	r3, [r3, #20]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d126      	bne.n	800f5a6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	8adb      	ldrh	r3, [r3, #22]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d02e      	beq.n	800f5be <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f560:	4b3b      	ldr	r3, [pc, #236]	; (800f650 <tcp_abandon+0x170>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	687a      	ldr	r2, [r7, #4]
 800f566:	429a      	cmp	r2, r3
 800f568:	d105      	bne.n	800f576 <tcp_abandon+0x96>
 800f56a:	4b39      	ldr	r3, [pc, #228]	; (800f650 <tcp_abandon+0x170>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	68db      	ldr	r3, [r3, #12]
 800f570:	4a37      	ldr	r2, [pc, #220]	; (800f650 <tcp_abandon+0x170>)
 800f572:	6013      	str	r3, [r2, #0]
 800f574:	e013      	b.n	800f59e <tcp_abandon+0xbe>
 800f576:	4b36      	ldr	r3, [pc, #216]	; (800f650 <tcp_abandon+0x170>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	61fb      	str	r3, [r7, #28]
 800f57c:	e00c      	b.n	800f598 <tcp_abandon+0xb8>
 800f57e:	69fb      	ldr	r3, [r7, #28]
 800f580:	68db      	ldr	r3, [r3, #12]
 800f582:	687a      	ldr	r2, [r7, #4]
 800f584:	429a      	cmp	r2, r3
 800f586:	d104      	bne.n	800f592 <tcp_abandon+0xb2>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	68da      	ldr	r2, [r3, #12]
 800f58c:	69fb      	ldr	r3, [r7, #28]
 800f58e:	60da      	str	r2, [r3, #12]
 800f590:	e005      	b.n	800f59e <tcp_abandon+0xbe>
 800f592:	69fb      	ldr	r3, [r7, #28]
 800f594:	68db      	ldr	r3, [r3, #12]
 800f596:	61fb      	str	r3, [r7, #28]
 800f598:	69fb      	ldr	r3, [r7, #28]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d1ef      	bne.n	800f57e <tcp_abandon+0x9e>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	60da      	str	r2, [r3, #12]
 800f5a4:	e00b      	b.n	800f5be <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	8adb      	ldrh	r3, [r3, #22]
 800f5ae:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f5b0:	6879      	ldr	r1, [r7, #4]
 800f5b2:	4828      	ldr	r0, [pc, #160]	; (800f654 <tcp_abandon+0x174>)
 800f5b4:	f001 f9a6 	bl	8010904 <tcp_pcb_remove>
 800f5b8:	4b27      	ldr	r3, [pc, #156]	; (800f658 <tcp_abandon+0x178>)
 800f5ba:	2201      	movs	r2, #1
 800f5bc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d004      	beq.n	800f5d0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f000 fe7a 	bl	80102c4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d004      	beq.n	800f5e2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f000 fe71 	bl	80102c4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d004      	beq.n	800f5f4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f000 fe68 	bl	80102c4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d00e      	beq.n	800f618 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f5fa:	6879      	ldr	r1, [r7, #4]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	3304      	adds	r3, #4
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	8b12      	ldrh	r2, [r2, #24]
 800f604:	9202      	str	r2, [sp, #8]
 800f606:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f608:	9201      	str	r2, [sp, #4]
 800f60a:	9300      	str	r3, [sp, #0]
 800f60c:	460b      	mov	r3, r1
 800f60e:	697a      	ldr	r2, [r7, #20]
 800f610:	69b9      	ldr	r1, [r7, #24]
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f005 fb46 	bl	8014ca4 <tcp_rst>
    }
    last_state = pcb->state;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	7d1b      	ldrb	r3, [r3, #20]
 800f61c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f7ff fcd8 	bl	800efd4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d004      	beq.n	800f634 <tcp_abandon+0x154>
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	f06f 010c 	mvn.w	r1, #12
 800f630:	68f8      	ldr	r0, [r7, #12]
 800f632:	4798      	blx	r3
  }
}
 800f634:	3728      	adds	r7, #40	; 0x28
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
 800f63a:	bf00      	nop
 800f63c:	0801ffb0 	.word	0x0801ffb0
 800f640:	080200f4 	.word	0x080200f4
 800f644:	0801fff4 	.word	0x0801fff4
 800f648:	08020110 	.word	0x08020110
 800f64c:	200113cc 	.word	0x200113cc
 800f650:	200113c0 	.word	0x200113c0
 800f654:	200113c8 	.word	0x200113c8
 800f658:	200113d0 	.word	0x200113d0

0800f65c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b082      	sub	sp, #8
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f664:	2101      	movs	r1, #1
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f7ff ff3a 	bl	800f4e0 <tcp_abandon>
}
 800f66c:	bf00      	nop
 800f66e:	3708      	adds	r7, #8
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}

0800f674 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b084      	sub	sp, #16
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d106      	bne.n	800f690 <tcp_update_rcv_ann_wnd+0x1c>
 800f682:	4b25      	ldr	r3, [pc, #148]	; (800f718 <tcp_update_rcv_ann_wnd+0xa4>)
 800f684:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f688:	4924      	ldr	r1, [pc, #144]	; (800f71c <tcp_update_rcv_ann_wnd+0xa8>)
 800f68a:	4825      	ldr	r0, [pc, #148]	; (800f720 <tcp_update_rcv_ann_wnd+0xac>)
 800f68c:	f00e f870 	bl	801d770 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f694:	687a      	ldr	r2, [r7, #4]
 800f696:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f698:	4413      	add	r3, r2
 800f69a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6a0:	687a      	ldr	r2, [r7, #4]
 800f6a2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f6a4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f6a8:	bf28      	it	cs
 800f6aa:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f6ae:	b292      	uxth	r2, r2
 800f6b0:	4413      	add	r3, r2
 800f6b2:	68fa      	ldr	r2, [r7, #12]
 800f6b4:	1ad3      	subs	r3, r2, r3
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	db08      	blt.n	800f6cc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6c6:	68fa      	ldr	r2, [r7, #12]
 800f6c8:	1ad3      	subs	r3, r2, r3
 800f6ca:	e020      	b.n	800f70e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6d4:	1ad3      	subs	r3, r2, r3
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	dd03      	ble.n	800f6e2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f6e0:	e014      	b.n	800f70c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ea:	1ad3      	subs	r3, r2, r3
 800f6ec:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6f4:	d306      	bcc.n	800f704 <tcp_update_rcv_ann_wnd+0x90>
 800f6f6:	4b08      	ldr	r3, [pc, #32]	; (800f718 <tcp_update_rcv_ann_wnd+0xa4>)
 800f6f8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f6fc:	4909      	ldr	r1, [pc, #36]	; (800f724 <tcp_update_rcv_ann_wnd+0xb0>)
 800f6fe:	4808      	ldr	r0, [pc, #32]	; (800f720 <tcp_update_rcv_ann_wnd+0xac>)
 800f700:	f00e f836 	bl	801d770 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	b29a      	uxth	r2, r3
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f70c:	2300      	movs	r3, #0
  }
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3710      	adds	r7, #16
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
 800f716:	bf00      	nop
 800f718:	0801ffb0 	.word	0x0801ffb0
 800f71c:	0802020c 	.word	0x0802020c
 800f720:	0801fff4 	.word	0x0801fff4
 800f724:	08020230 	.word	0x08020230

0800f728 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b084      	sub	sp, #16
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	460b      	mov	r3, r1
 800f732:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d107      	bne.n	800f74a <tcp_recved+0x22>
 800f73a:	4b1f      	ldr	r3, [pc, #124]	; (800f7b8 <tcp_recved+0x90>)
 800f73c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f740:	491e      	ldr	r1, [pc, #120]	; (800f7bc <tcp_recved+0x94>)
 800f742:	481f      	ldr	r0, [pc, #124]	; (800f7c0 <tcp_recved+0x98>)
 800f744:	f00e f814 	bl	801d770 <iprintf>
 800f748:	e032      	b.n	800f7b0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	7d1b      	ldrb	r3, [r3, #20]
 800f74e:	2b01      	cmp	r3, #1
 800f750:	d106      	bne.n	800f760 <tcp_recved+0x38>
 800f752:	4b19      	ldr	r3, [pc, #100]	; (800f7b8 <tcp_recved+0x90>)
 800f754:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f758:	491a      	ldr	r1, [pc, #104]	; (800f7c4 <tcp_recved+0x9c>)
 800f75a:	4819      	ldr	r0, [pc, #100]	; (800f7c0 <tcp_recved+0x98>)
 800f75c:	f00e f808 	bl	801d770 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f764:	887b      	ldrh	r3, [r7, #2]
 800f766:	4413      	add	r3, r2
 800f768:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f76a:	89fb      	ldrh	r3, [r7, #14]
 800f76c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f770:	d804      	bhi.n	800f77c <tcp_recved+0x54>
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f776:	89fa      	ldrh	r2, [r7, #14]
 800f778:	429a      	cmp	r2, r3
 800f77a:	d204      	bcs.n	800f786 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f782:	851a      	strh	r2, [r3, #40]	; 0x28
 800f784:	e002      	b.n	800f78c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	89fa      	ldrh	r2, [r7, #14]
 800f78a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f7ff ff71 	bl	800f674 <tcp_update_rcv_ann_wnd>
 800f792:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f79a:	d309      	bcc.n	800f7b0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	8b5b      	ldrh	r3, [r3, #26]
 800f7a0:	f043 0302 	orr.w	r3, r3, #2
 800f7a4:	b29a      	uxth	r2, r3
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f004 fcc6 	bl	801413c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f7b0:	3710      	adds	r7, #16
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}
 800f7b6:	bf00      	nop
 800f7b8:	0801ffb0 	.word	0x0801ffb0
 800f7bc:	0802024c 	.word	0x0802024c
 800f7c0:	0801fff4 	.word	0x0801fff4
 800f7c4:	08020264 	.word	0x08020264

0800f7c8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b083      	sub	sp, #12
 800f7cc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f7d2:	4b1e      	ldr	r3, [pc, #120]	; (800f84c <tcp_new_port+0x84>)
 800f7d4:	881b      	ldrh	r3, [r3, #0]
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	b29a      	uxth	r2, r3
 800f7da:	4b1c      	ldr	r3, [pc, #112]	; (800f84c <tcp_new_port+0x84>)
 800f7dc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f7de:	4b1b      	ldr	r3, [pc, #108]	; (800f84c <tcp_new_port+0x84>)
 800f7e0:	881b      	ldrh	r3, [r3, #0]
 800f7e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	d103      	bne.n	800f7f2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f7ea:	4b18      	ldr	r3, [pc, #96]	; (800f84c <tcp_new_port+0x84>)
 800f7ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f7f0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	71fb      	strb	r3, [r7, #7]
 800f7f6:	e01e      	b.n	800f836 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f7f8:	79fb      	ldrb	r3, [r7, #7]
 800f7fa:	4a15      	ldr	r2, [pc, #84]	; (800f850 <tcp_new_port+0x88>)
 800f7fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	603b      	str	r3, [r7, #0]
 800f804:	e011      	b.n	800f82a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	8ada      	ldrh	r2, [r3, #22]
 800f80a:	4b10      	ldr	r3, [pc, #64]	; (800f84c <tcp_new_port+0x84>)
 800f80c:	881b      	ldrh	r3, [r3, #0]
 800f80e:	429a      	cmp	r2, r3
 800f810:	d108      	bne.n	800f824 <tcp_new_port+0x5c>
        n++;
 800f812:	88bb      	ldrh	r3, [r7, #4]
 800f814:	3301      	adds	r3, #1
 800f816:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f818:	88bb      	ldrh	r3, [r7, #4]
 800f81a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f81e:	d3d8      	bcc.n	800f7d2 <tcp_new_port+0xa>
          return 0;
 800f820:	2300      	movs	r3, #0
 800f822:	e00d      	b.n	800f840 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	603b      	str	r3, [r7, #0]
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d1ea      	bne.n	800f806 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f830:	79fb      	ldrb	r3, [r7, #7]
 800f832:	3301      	adds	r3, #1
 800f834:	71fb      	strb	r3, [r7, #7]
 800f836:	79fb      	ldrb	r3, [r7, #7]
 800f838:	2b03      	cmp	r3, #3
 800f83a:	d9dd      	bls.n	800f7f8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f83c:	4b03      	ldr	r3, [pc, #12]	; (800f84c <tcp_new_port+0x84>)
 800f83e:	881b      	ldrh	r3, [r3, #0]
}
 800f840:	4618      	mov	r0, r3
 800f842:	370c      	adds	r7, #12
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr
 800f84c:	20000024 	.word	0x20000024
 800f850:	08022370 	.word	0x08022370

0800f854 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b08a      	sub	sp, #40	; 0x28
 800f858:	af00      	add	r7, sp, #0
 800f85a:	60f8      	str	r0, [r7, #12]
 800f85c:	60b9      	str	r1, [r7, #8]
 800f85e:	603b      	str	r3, [r7, #0]
 800f860:	4613      	mov	r3, r2
 800f862:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800f864:	2300      	movs	r3, #0
 800f866:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d109      	bne.n	800f882 <tcp_connect+0x2e>
 800f86e:	4b7d      	ldr	r3, [pc, #500]	; (800fa64 <tcp_connect+0x210>)
 800f870:	f240 4235 	movw	r2, #1077	; 0x435
 800f874:	497c      	ldr	r1, [pc, #496]	; (800fa68 <tcp_connect+0x214>)
 800f876:	487d      	ldr	r0, [pc, #500]	; (800fa6c <tcp_connect+0x218>)
 800f878:	f00d ff7a 	bl	801d770 <iprintf>
 800f87c:	f06f 030f 	mvn.w	r3, #15
 800f880:	e0ec      	b.n	800fa5c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d109      	bne.n	800f89c <tcp_connect+0x48>
 800f888:	4b76      	ldr	r3, [pc, #472]	; (800fa64 <tcp_connect+0x210>)
 800f88a:	f240 4236 	movw	r2, #1078	; 0x436
 800f88e:	4978      	ldr	r1, [pc, #480]	; (800fa70 <tcp_connect+0x21c>)
 800f890:	4876      	ldr	r0, [pc, #472]	; (800fa6c <tcp_connect+0x218>)
 800f892:	f00d ff6d 	bl	801d770 <iprintf>
 800f896:	f06f 030f 	mvn.w	r3, #15
 800f89a:	e0df      	b.n	800fa5c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	7d1b      	ldrb	r3, [r3, #20]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d009      	beq.n	800f8b8 <tcp_connect+0x64>
 800f8a4:	4b6f      	ldr	r3, [pc, #444]	; (800fa64 <tcp_connect+0x210>)
 800f8a6:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800f8aa:	4972      	ldr	r1, [pc, #456]	; (800fa74 <tcp_connect+0x220>)
 800f8ac:	486f      	ldr	r0, [pc, #444]	; (800fa6c <tcp_connect+0x218>)
 800f8ae:	f00d ff5f 	bl	801d770 <iprintf>
 800f8b2:	f06f 0309 	mvn.w	r3, #9
 800f8b6:	e0d1      	b.n	800fa5c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d002      	beq.n	800f8c4 <tcp_connect+0x70>
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	e000      	b.n	800f8c6 <tcp_connect+0x72>
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	68fa      	ldr	r2, [r7, #12]
 800f8c8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	88fa      	ldrh	r2, [r7, #6]
 800f8ce:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	7a1b      	ldrb	r3, [r3, #8]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d006      	beq.n	800f8e6 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	7a1b      	ldrb	r3, [r3, #8]
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7fe fd3f 	bl	800e360 <netif_get_by_index>
 800f8e2:	6278      	str	r0, [r7, #36]	; 0x24
 800f8e4:	e005      	b.n	800f8f2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	3304      	adds	r3, #4
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f007 f95e 	bl	8016bac <ip4_route>
 800f8f0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800f8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d102      	bne.n	800f8fe <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800f8f8:	f06f 0303 	mvn.w	r3, #3
 800f8fc:	e0ae      	b.n	800fa5c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d003      	beq.n	800f90c <tcp_connect+0xb8>
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d111      	bne.n	800f930 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800f90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d002      	beq.n	800f918 <tcp_connect+0xc4>
 800f912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f914:	3304      	adds	r3, #4
 800f916:	e000      	b.n	800f91a <tcp_connect+0xc6>
 800f918:	2300      	movs	r3, #0
 800f91a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800f91c:	69fb      	ldr	r3, [r7, #28]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d102      	bne.n	800f928 <tcp_connect+0xd4>
      return ERR_RTE;
 800f922:	f06f 0303 	mvn.w	r3, #3
 800f926:	e099      	b.n	800fa5c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f928:	69fb      	ldr	r3, [r7, #28]
 800f92a:	681a      	ldr	r2, [r3, #0]
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	8adb      	ldrh	r3, [r3, #22]
 800f934:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	8adb      	ldrh	r3, [r3, #22]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d10c      	bne.n	800f958 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800f93e:	f7ff ff43 	bl	800f7c8 <tcp_new_port>
 800f942:	4603      	mov	r3, r0
 800f944:	461a      	mov	r2, r3
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	8adb      	ldrh	r3, [r3, #22]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d102      	bne.n	800f958 <tcp_connect+0x104>
      return ERR_BUF;
 800f952:	f06f 0301 	mvn.w	r3, #1
 800f956:	e081      	b.n	800fa5c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800f958:	68f8      	ldr	r0, [r7, #12]
 800f95a:	f001 f867 	bl	8010a2c <tcp_next_iss>
 800f95e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	2200      	movs	r2, #0
 800f964:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	697a      	ldr	r2, [r7, #20]
 800f96a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	1e5a      	subs	r2, r3, #1
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	1e5a      	subs	r2, r3, #1
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	1e5a      	subs	r2, r3, #1
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f98a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f9a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f9ac:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	3304      	adds	r3, #4
 800f9b6:	461a      	mov	r2, r3
 800f9b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f9ba:	f001 f85d 	bl	8010a78 <tcp_eff_send_mss_netif>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	2201      	movs	r2, #1
 800f9ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	683a      	ldr	r2, [r7, #0]
 800f9d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800f9d6:	2102      	movs	r1, #2
 800f9d8:	68f8      	ldr	r0, [r7, #12]
 800f9da:	f004 fac1 	bl	8013f60 <tcp_enqueue_flags>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800f9e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d136      	bne.n	800fa58 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	2202      	movs	r2, #2
 800f9ee:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800f9f0:	8b7b      	ldrh	r3, [r7, #26]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d021      	beq.n	800fa3a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800f9f6:	4b20      	ldr	r3, [pc, #128]	; (800fa78 <tcp_connect+0x224>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	68fa      	ldr	r2, [r7, #12]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d105      	bne.n	800fa0c <tcp_connect+0x1b8>
 800fa00:	4b1d      	ldr	r3, [pc, #116]	; (800fa78 <tcp_connect+0x224>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	68db      	ldr	r3, [r3, #12]
 800fa06:	4a1c      	ldr	r2, [pc, #112]	; (800fa78 <tcp_connect+0x224>)
 800fa08:	6013      	str	r3, [r2, #0]
 800fa0a:	e013      	b.n	800fa34 <tcp_connect+0x1e0>
 800fa0c:	4b1a      	ldr	r3, [pc, #104]	; (800fa78 <tcp_connect+0x224>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	623b      	str	r3, [r7, #32]
 800fa12:	e00c      	b.n	800fa2e <tcp_connect+0x1da>
 800fa14:	6a3b      	ldr	r3, [r7, #32]
 800fa16:	68db      	ldr	r3, [r3, #12]
 800fa18:	68fa      	ldr	r2, [r7, #12]
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d104      	bne.n	800fa28 <tcp_connect+0x1d4>
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	68da      	ldr	r2, [r3, #12]
 800fa22:	6a3b      	ldr	r3, [r7, #32]
 800fa24:	60da      	str	r2, [r3, #12]
 800fa26:	e005      	b.n	800fa34 <tcp_connect+0x1e0>
 800fa28:	6a3b      	ldr	r3, [r7, #32]
 800fa2a:	68db      	ldr	r3, [r3, #12]
 800fa2c:	623b      	str	r3, [r7, #32]
 800fa2e:	6a3b      	ldr	r3, [r7, #32]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d1ef      	bne.n	800fa14 <tcp_connect+0x1c0>
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2200      	movs	r2, #0
 800fa38:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800fa3a:	4b10      	ldr	r3, [pc, #64]	; (800fa7c <tcp_connect+0x228>)
 800fa3c:	681a      	ldr	r2, [r3, #0]
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	60da      	str	r2, [r3, #12]
 800fa42:	4a0e      	ldr	r2, [pc, #56]	; (800fa7c <tcp_connect+0x228>)
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	6013      	str	r3, [r2, #0]
 800fa48:	f005 faee 	bl	8015028 <tcp_timer_needed>
 800fa4c:	4b0c      	ldr	r3, [pc, #48]	; (800fa80 <tcp_connect+0x22c>)
 800fa4e:	2201      	movs	r2, #1
 800fa50:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800fa52:	68f8      	ldr	r0, [r7, #12]
 800fa54:	f004 fb72 	bl	801413c <tcp_output>
  }
  return ret;
 800fa58:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3728      	adds	r7, #40	; 0x28
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	0801ffb0 	.word	0x0801ffb0
 800fa68:	0802028c 	.word	0x0802028c
 800fa6c:	0801fff4 	.word	0x0801fff4
 800fa70:	080202a8 	.word	0x080202a8
 800fa74:	080202c4 	.word	0x080202c4
 800fa78:	200113c0 	.word	0x200113c0
 800fa7c:	200113c8 	.word	0x200113c8
 800fa80:	200113d0 	.word	0x200113d0

0800fa84 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800fa84:	b5b0      	push	{r4, r5, r7, lr}
 800fa86:	b090      	sub	sp, #64	; 0x40
 800fa88:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800fa90:	4b94      	ldr	r3, [pc, #592]	; (800fce4 <tcp_slowtmr+0x260>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	3301      	adds	r3, #1
 800fa96:	4a93      	ldr	r2, [pc, #588]	; (800fce4 <tcp_slowtmr+0x260>)
 800fa98:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800fa9a:	4b93      	ldr	r3, [pc, #588]	; (800fce8 <tcp_slowtmr+0x264>)
 800fa9c:	781b      	ldrb	r3, [r3, #0]
 800fa9e:	3301      	adds	r3, #1
 800faa0:	b2da      	uxtb	r2, r3
 800faa2:	4b91      	ldr	r3, [pc, #580]	; (800fce8 <tcp_slowtmr+0x264>)
 800faa4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800faa6:	2300      	movs	r3, #0
 800faa8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800faaa:	4b90      	ldr	r3, [pc, #576]	; (800fcec <tcp_slowtmr+0x268>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800fab0:	e29d      	b.n	800ffee <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800fab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab4:	7d1b      	ldrb	r3, [r3, #20]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d106      	bne.n	800fac8 <tcp_slowtmr+0x44>
 800faba:	4b8d      	ldr	r3, [pc, #564]	; (800fcf0 <tcp_slowtmr+0x26c>)
 800fabc:	f240 42be 	movw	r2, #1214	; 0x4be
 800fac0:	498c      	ldr	r1, [pc, #560]	; (800fcf4 <tcp_slowtmr+0x270>)
 800fac2:	488d      	ldr	r0, [pc, #564]	; (800fcf8 <tcp_slowtmr+0x274>)
 800fac4:	f00d fe54 	bl	801d770 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800fac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faca:	7d1b      	ldrb	r3, [r3, #20]
 800facc:	2b01      	cmp	r3, #1
 800face:	d106      	bne.n	800fade <tcp_slowtmr+0x5a>
 800fad0:	4b87      	ldr	r3, [pc, #540]	; (800fcf0 <tcp_slowtmr+0x26c>)
 800fad2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800fad6:	4989      	ldr	r1, [pc, #548]	; (800fcfc <tcp_slowtmr+0x278>)
 800fad8:	4887      	ldr	r0, [pc, #540]	; (800fcf8 <tcp_slowtmr+0x274>)
 800fada:	f00d fe49 	bl	801d770 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800fade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae0:	7d1b      	ldrb	r3, [r3, #20]
 800fae2:	2b0a      	cmp	r3, #10
 800fae4:	d106      	bne.n	800faf4 <tcp_slowtmr+0x70>
 800fae6:	4b82      	ldr	r3, [pc, #520]	; (800fcf0 <tcp_slowtmr+0x26c>)
 800fae8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800faec:	4984      	ldr	r1, [pc, #528]	; (800fd00 <tcp_slowtmr+0x27c>)
 800faee:	4882      	ldr	r0, [pc, #520]	; (800fcf8 <tcp_slowtmr+0x274>)
 800faf0:	f00d fe3e 	bl	801d770 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800faf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf6:	7f9a      	ldrb	r2, [r3, #30]
 800faf8:	4b7b      	ldr	r3, [pc, #492]	; (800fce8 <tcp_slowtmr+0x264>)
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	429a      	cmp	r2, r3
 800fafe:	d105      	bne.n	800fb0c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800fb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb02:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb06:	68db      	ldr	r3, [r3, #12]
 800fb08:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800fb0a:	e270      	b.n	800ffee <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800fb0c:	4b76      	ldr	r3, [pc, #472]	; (800fce8 <tcp_slowtmr+0x264>)
 800fb0e:	781a      	ldrb	r2, [r3, #0]
 800fb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb12:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800fb14:	2300      	movs	r3, #0
 800fb16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800fb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb22:	7d1b      	ldrb	r3, [r3, #20]
 800fb24:	2b02      	cmp	r3, #2
 800fb26:	d10a      	bne.n	800fb3e <tcp_slowtmr+0xba>
 800fb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb2e:	2b05      	cmp	r3, #5
 800fb30:	d905      	bls.n	800fb3e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800fb32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb36:	3301      	adds	r3, #1
 800fb38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb3c:	e11e      	b.n	800fd7c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800fb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb44:	2b0b      	cmp	r3, #11
 800fb46:	d905      	bls.n	800fb54 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800fb48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb4c:	3301      	adds	r3, #1
 800fb4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb52:	e113      	b.n	800fd7c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800fb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb56:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d075      	beq.n	800fc4a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800fb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d006      	beq.n	800fb74 <tcp_slowtmr+0xf0>
 800fb66:	4b62      	ldr	r3, [pc, #392]	; (800fcf0 <tcp_slowtmr+0x26c>)
 800fb68:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800fb6c:	4965      	ldr	r1, [pc, #404]	; (800fd04 <tcp_slowtmr+0x280>)
 800fb6e:	4862      	ldr	r0, [pc, #392]	; (800fcf8 <tcp_slowtmr+0x274>)
 800fb70:	f00d fdfe 	bl	801d770 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800fb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d106      	bne.n	800fb8a <tcp_slowtmr+0x106>
 800fb7c:	4b5c      	ldr	r3, [pc, #368]	; (800fcf0 <tcp_slowtmr+0x26c>)
 800fb7e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800fb82:	4961      	ldr	r1, [pc, #388]	; (800fd08 <tcp_slowtmr+0x284>)
 800fb84:	485c      	ldr	r0, [pc, #368]	; (800fcf8 <tcp_slowtmr+0x274>)
 800fb86:	f00d fdf3 	bl	801d770 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800fb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb8c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fb90:	2b0b      	cmp	r3, #11
 800fb92:	d905      	bls.n	800fba0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800fb94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb98:	3301      	adds	r3, #1
 800fb9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb9e:	e0ed      	b.n	800fd7c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800fba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fba6:	3b01      	subs	r3, #1
 800fba8:	4a58      	ldr	r2, [pc, #352]	; (800fd0c <tcp_slowtmr+0x288>)
 800fbaa:	5cd3      	ldrb	r3, [r2, r3]
 800fbac:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800fbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fbb4:	7c7a      	ldrb	r2, [r7, #17]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d907      	bls.n	800fbca <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800fbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbbc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fbc0:	3301      	adds	r3, #1
 800fbc2:	b2da      	uxtb	r2, r3
 800fbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800fbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbcc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fbd0:	7c7a      	ldrb	r2, [r7, #17]
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	f200 80d2 	bhi.w	800fd7c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800fbd8:	2301      	movs	r3, #1
 800fbda:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800fbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d108      	bne.n	800fbf8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800fbe6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbe8:	f005 f950 	bl	8014e8c <tcp_zero_window_probe>
 800fbec:	4603      	mov	r3, r0
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d014      	beq.n	800fc1c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	623b      	str	r3, [r7, #32]
 800fbf6:	e011      	b.n	800fc1c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800fbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fbfe:	4619      	mov	r1, r3
 800fc00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc02:	f004 f815 	bl	8013c30 <tcp_split_unsent_seg>
 800fc06:	4603      	mov	r3, r0
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d107      	bne.n	800fc1c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800fc0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc0e:	f004 fa95 	bl	801413c <tcp_output>
 800fc12:	4603      	mov	r3, r0
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d101      	bne.n	800fc1c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800fc1c:	6a3b      	ldr	r3, [r7, #32]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	f000 80ac 	beq.w	800fd7c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800fc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc26:	2200      	movs	r2, #0
 800fc28:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fc32:	2b06      	cmp	r3, #6
 800fc34:	f200 80a2 	bhi.w	800fd7c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800fc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fc3e:	3301      	adds	r3, #1
 800fc40:	b2da      	uxtb	r2, r3
 800fc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc44:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800fc48:	e098      	b.n	800fd7c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	db0f      	blt.n	800fc74 <tcp_slowtmr+0x1f0>
 800fc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc56:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fc5a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fc5e:	4293      	cmp	r3, r2
 800fc60:	d008      	beq.n	800fc74 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800fc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc64:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fc68:	b29b      	uxth	r3, r3
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	b29b      	uxth	r3, r3
 800fc6e:	b21a      	sxth	r2, r3
 800fc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc72:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800fc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc76:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800fc7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc7c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fc80:	429a      	cmp	r2, r3
 800fc82:	db7b      	blt.n	800fd7c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fc84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc86:	f004 fd4b 	bl	8014720 <tcp_rexmit_rto_prepare>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d007      	beq.n	800fca0 <tcp_slowtmr+0x21c>
 800fc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d171      	bne.n	800fd7c <tcp_slowtmr+0x2f8>
 800fc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d06d      	beq.n	800fd7c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800fca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca2:	7d1b      	ldrb	r3, [r3, #20]
 800fca4:	2b02      	cmp	r3, #2
 800fca6:	d03a      	beq.n	800fd1e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fcae:	2b0c      	cmp	r3, #12
 800fcb0:	bf28      	it	cs
 800fcb2:	230c      	movcs	r3, #12
 800fcb4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fcbc:	10db      	asrs	r3, r3, #3
 800fcbe:	b21b      	sxth	r3, r3
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fcc8:	4413      	add	r3, r2
 800fcca:	7efa      	ldrb	r2, [r7, #27]
 800fccc:	4910      	ldr	r1, [pc, #64]	; (800fd10 <tcp_slowtmr+0x28c>)
 800fcce:	5c8a      	ldrb	r2, [r1, r2]
 800fcd0:	4093      	lsls	r3, r2
 800fcd2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	dc1a      	bgt.n	800fd14 <tcp_slowtmr+0x290>
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	b21a      	sxth	r2, r3
 800fce2:	e019      	b.n	800fd18 <tcp_slowtmr+0x294>
 800fce4:	200113bc 	.word	0x200113bc
 800fce8:	200113d2 	.word	0x200113d2
 800fcec:	200113c8 	.word	0x200113c8
 800fcf0:	0801ffb0 	.word	0x0801ffb0
 800fcf4:	080202f4 	.word	0x080202f4
 800fcf8:	0801fff4 	.word	0x0801fff4
 800fcfc:	08020320 	.word	0x08020320
 800fd00:	0802034c 	.word	0x0802034c
 800fd04:	0802037c 	.word	0x0802037c
 800fd08:	080203b0 	.word	0x080203b0
 800fd0c:	08022368 	.word	0x08022368
 800fd10:	08022358 	.word	0x08022358
 800fd14:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd20:	2200      	movs	r2, #0
 800fd22:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd2c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fd30:	4293      	cmp	r3, r2
 800fd32:	bf28      	it	cs
 800fd34:	4613      	movcs	r3, r2
 800fd36:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fd38:	8a7b      	ldrh	r3, [r7, #18]
 800fd3a:	085b      	lsrs	r3, r3, #1
 800fd3c:	b29a      	uxth	r2, r3
 800fd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd40:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd46:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd4e:	005b      	lsls	r3, r3, #1
 800fd50:	b29b      	uxth	r3, r3
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d206      	bcs.n	800fd64 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd5a:	005b      	lsls	r3, r3, #1
 800fd5c:	b29a      	uxth	r2, r3
 800fd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd60:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd66:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd70:	2200      	movs	r2, #0
 800fd72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fd76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd78:	f004 fd42 	bl	8014800 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd7e:	7d1b      	ldrb	r3, [r3, #20]
 800fd80:	2b06      	cmp	r3, #6
 800fd82:	d111      	bne.n	800fda8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd86:	8b5b      	ldrh	r3, [r3, #26]
 800fd88:	f003 0310 	and.w	r3, r3, #16
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d00b      	beq.n	800fda8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd90:	4b9c      	ldr	r3, [pc, #624]	; (8010004 <tcp_slowtmr+0x580>)
 800fd92:	681a      	ldr	r2, [r3, #0]
 800fd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd96:	6a1b      	ldr	r3, [r3, #32]
 800fd98:	1ad3      	subs	r3, r2, r3
 800fd9a:	2b28      	cmp	r3, #40	; 0x28
 800fd9c:	d904      	bls.n	800fda8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fd9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fda2:	3301      	adds	r3, #1
 800fda4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdaa:	7a5b      	ldrb	r3, [r3, #9]
 800fdac:	f003 0308 	and.w	r3, r3, #8
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d04a      	beq.n	800fe4a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800fdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fdb8:	2b04      	cmp	r3, #4
 800fdba:	d003      	beq.n	800fdc4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800fdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbe:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fdc0:	2b07      	cmp	r3, #7
 800fdc2:	d142      	bne.n	800fe4a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fdc4:	4b8f      	ldr	r3, [pc, #572]	; (8010004 <tcp_slowtmr+0x580>)
 800fdc6:	681a      	ldr	r2, [r3, #0]
 800fdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdca:	6a1b      	ldr	r3, [r3, #32]
 800fdcc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fdd4:	4b8c      	ldr	r3, [pc, #560]	; (8010008 <tcp_slowtmr+0x584>)
 800fdd6:	440b      	add	r3, r1
 800fdd8:	498c      	ldr	r1, [pc, #560]	; (801000c <tcp_slowtmr+0x588>)
 800fdda:	fba1 1303 	umull	r1, r3, r1, r3
 800fdde:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d90a      	bls.n	800fdfa <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fde4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fde8:	3301      	adds	r3, #1
 800fdea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fdee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fdf8:	e027      	b.n	800fe4a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fdfa:	4b82      	ldr	r3, [pc, #520]	; (8010004 <tcp_slowtmr+0x580>)
 800fdfc:	681a      	ldr	r2, [r3, #0]
 800fdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe00:	6a1b      	ldr	r3, [r3, #32]
 800fe02:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fe04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe06:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fe0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fe10:	4618      	mov	r0, r3
 800fe12:	4b7f      	ldr	r3, [pc, #508]	; (8010010 <tcp_slowtmr+0x58c>)
 800fe14:	fb00 f303 	mul.w	r3, r0, r3
 800fe18:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fe1a:	497c      	ldr	r1, [pc, #496]	; (801000c <tcp_slowtmr+0x588>)
 800fe1c:	fba1 1303 	umull	r1, r3, r1, r3
 800fe20:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d911      	bls.n	800fe4a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800fe26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe28:	f004 fff0 	bl	8014e0c <tcp_keepalive>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fe32:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d107      	bne.n	800fe4a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800fe3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe3c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fe40:	3301      	adds	r3, #1
 800fe42:	b2da      	uxtb	r2, r3
 800fe44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe46:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fe4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d011      	beq.n	800fe76 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fe52:	4b6c      	ldr	r3, [pc, #432]	; (8010004 <tcp_slowtmr+0x580>)
 800fe54:	681a      	ldr	r2, [r3, #0]
 800fe56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe58:	6a1b      	ldr	r3, [r3, #32]
 800fe5a:	1ad2      	subs	r2, r2, r3
 800fe5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe5e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fe62:	4619      	mov	r1, r3
 800fe64:	460b      	mov	r3, r1
 800fe66:	005b      	lsls	r3, r3, #1
 800fe68:	440b      	add	r3, r1
 800fe6a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	d302      	bcc.n	800fe76 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fe70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe72:	f000 feab 	bl	8010bcc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fe76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe78:	7d1b      	ldrb	r3, [r3, #20]
 800fe7a:	2b03      	cmp	r3, #3
 800fe7c:	d10b      	bne.n	800fe96 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fe7e:	4b61      	ldr	r3, [pc, #388]	; (8010004 <tcp_slowtmr+0x580>)
 800fe80:	681a      	ldr	r2, [r3, #0]
 800fe82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe84:	6a1b      	ldr	r3, [r3, #32]
 800fe86:	1ad3      	subs	r3, r2, r3
 800fe88:	2b28      	cmp	r3, #40	; 0x28
 800fe8a:	d904      	bls.n	800fe96 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fe8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe90:	3301      	adds	r3, #1
 800fe92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fe96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe98:	7d1b      	ldrb	r3, [r3, #20]
 800fe9a:	2b09      	cmp	r3, #9
 800fe9c:	d10b      	bne.n	800feb6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fe9e:	4b59      	ldr	r3, [pc, #356]	; (8010004 <tcp_slowtmr+0x580>)
 800fea0:	681a      	ldr	r2, [r3, #0]
 800fea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea4:	6a1b      	ldr	r3, [r3, #32]
 800fea6:	1ad3      	subs	r3, r2, r3
 800fea8:	2bf0      	cmp	r3, #240	; 0xf0
 800feaa:	d904      	bls.n	800feb6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800feac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800feb0:	3301      	adds	r3, #1
 800feb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800feb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800feba:	2b00      	cmp	r3, #0
 800febc:	d060      	beq.n	800ff80 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800febe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fec4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fec6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fec8:	f000 fccc 	bl	8010864 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d010      	beq.n	800fef4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fed2:	4b50      	ldr	r3, [pc, #320]	; (8010014 <tcp_slowtmr+0x590>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fed8:	429a      	cmp	r2, r3
 800feda:	d106      	bne.n	800feea <tcp_slowtmr+0x466>
 800fedc:	4b4e      	ldr	r3, [pc, #312]	; (8010018 <tcp_slowtmr+0x594>)
 800fede:	f240 526d 	movw	r2, #1389	; 0x56d
 800fee2:	494e      	ldr	r1, [pc, #312]	; (801001c <tcp_slowtmr+0x598>)
 800fee4:	484e      	ldr	r0, [pc, #312]	; (8010020 <tcp_slowtmr+0x59c>)
 800fee6:	f00d fc43 	bl	801d770 <iprintf>
        prev->next = pcb->next;
 800feea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feec:	68da      	ldr	r2, [r3, #12]
 800feee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef0:	60da      	str	r2, [r3, #12]
 800fef2:	e00f      	b.n	800ff14 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fef4:	4b47      	ldr	r3, [pc, #284]	; (8010014 <tcp_slowtmr+0x590>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d006      	beq.n	800ff0c <tcp_slowtmr+0x488>
 800fefe:	4b46      	ldr	r3, [pc, #280]	; (8010018 <tcp_slowtmr+0x594>)
 800ff00:	f240 5271 	movw	r2, #1393	; 0x571
 800ff04:	4947      	ldr	r1, [pc, #284]	; (8010024 <tcp_slowtmr+0x5a0>)
 800ff06:	4846      	ldr	r0, [pc, #280]	; (8010020 <tcp_slowtmr+0x59c>)
 800ff08:	f00d fc32 	bl	801d770 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ff0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff0e:	68db      	ldr	r3, [r3, #12]
 800ff10:	4a40      	ldr	r2, [pc, #256]	; (8010014 <tcp_slowtmr+0x590>)
 800ff12:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ff14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d013      	beq.n	800ff44 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ff1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff1e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ff20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff22:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ff24:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ff26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff28:	3304      	adds	r3, #4
 800ff2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff2c:	8ad2      	ldrh	r2, [r2, #22]
 800ff2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff30:	8b09      	ldrh	r1, [r1, #24]
 800ff32:	9102      	str	r1, [sp, #8]
 800ff34:	9201      	str	r2, [sp, #4]
 800ff36:	9300      	str	r3, [sp, #0]
 800ff38:	462b      	mov	r3, r5
 800ff3a:	4622      	mov	r2, r4
 800ff3c:	4601      	mov	r1, r0
 800ff3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff40:	f004 feb0 	bl	8014ca4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ff44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff46:	691b      	ldr	r3, [r3, #16]
 800ff48:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ff4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff4c:	7d1b      	ldrb	r3, [r3, #20]
 800ff4e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ff50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff52:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ff54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff56:	68db      	ldr	r3, [r3, #12]
 800ff58:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ff5a:	6838      	ldr	r0, [r7, #0]
 800ff5c:	f7ff f83a 	bl	800efd4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ff60:	4b31      	ldr	r3, [pc, #196]	; (8010028 <tcp_slowtmr+0x5a4>)
 800ff62:	2200      	movs	r2, #0
 800ff64:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d004      	beq.n	800ff76 <tcp_slowtmr+0x4f2>
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	f06f 010c 	mvn.w	r1, #12
 800ff72:	68b8      	ldr	r0, [r7, #8]
 800ff74:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ff76:	4b2c      	ldr	r3, [pc, #176]	; (8010028 <tcp_slowtmr+0x5a4>)
 800ff78:	781b      	ldrb	r3, [r3, #0]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d037      	beq.n	800ffee <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ff7e:	e592      	b.n	800faa6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ff80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff82:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ff84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff86:	68db      	ldr	r3, [r3, #12]
 800ff88:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ff8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff8c:	7f1b      	ldrb	r3, [r3, #28]
 800ff8e:	3301      	adds	r3, #1
 800ff90:	b2da      	uxtb	r2, r3
 800ff92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff94:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ff96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff98:	7f1a      	ldrb	r2, [r3, #28]
 800ff9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff9c:	7f5b      	ldrb	r3, [r3, #29]
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d325      	bcc.n	800ffee <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ffa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ffa8:	4b1f      	ldr	r3, [pc, #124]	; (8010028 <tcp_slowtmr+0x5a4>)
 800ffaa:	2200      	movs	r2, #0
 800ffac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ffae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d00b      	beq.n	800ffd0 <tcp_slowtmr+0x54c>
 800ffb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ffbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ffc0:	6912      	ldr	r2, [r2, #16]
 800ffc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ffc4:	4610      	mov	r0, r2
 800ffc6:	4798      	blx	r3
 800ffc8:	4603      	mov	r3, r0
 800ffca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ffce:	e002      	b.n	800ffd6 <tcp_slowtmr+0x552>
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ffd6:	4b14      	ldr	r3, [pc, #80]	; (8010028 <tcp_slowtmr+0x5a4>)
 800ffd8:	781b      	ldrb	r3, [r3, #0]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d000      	beq.n	800ffe0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800ffde:	e562      	b.n	800faa6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ffe0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d102      	bne.n	800ffee <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ffe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffea:	f004 f8a7 	bl	801413c <tcp_output>
  while (pcb != NULL) {
 800ffee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	f47f ad5e 	bne.w	800fab2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fff6:	2300      	movs	r3, #0
 800fff8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fffa:	4b0c      	ldr	r3, [pc, #48]	; (801002c <tcp_slowtmr+0x5a8>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010000:	e069      	b.n	80100d6 <tcp_slowtmr+0x652>
 8010002:	bf00      	nop
 8010004:	200113bc 	.word	0x200113bc
 8010008:	000a4cb8 	.word	0x000a4cb8
 801000c:	10624dd3 	.word	0x10624dd3
 8010010:	000124f8 	.word	0x000124f8
 8010014:	200113c8 	.word	0x200113c8
 8010018:	0801ffb0 	.word	0x0801ffb0
 801001c:	080203e8 	.word	0x080203e8
 8010020:	0801fff4 	.word	0x0801fff4
 8010024:	08020414 	.word	0x08020414
 8010028:	200113d0 	.word	0x200113d0
 801002c:	200113cc 	.word	0x200113cc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010032:	7d1b      	ldrb	r3, [r3, #20]
 8010034:	2b0a      	cmp	r3, #10
 8010036:	d006      	beq.n	8010046 <tcp_slowtmr+0x5c2>
 8010038:	4b2b      	ldr	r3, [pc, #172]	; (80100e8 <tcp_slowtmr+0x664>)
 801003a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801003e:	492b      	ldr	r1, [pc, #172]	; (80100ec <tcp_slowtmr+0x668>)
 8010040:	482b      	ldr	r0, [pc, #172]	; (80100f0 <tcp_slowtmr+0x66c>)
 8010042:	f00d fb95 	bl	801d770 <iprintf>
    pcb_remove = 0;
 8010046:	2300      	movs	r3, #0
 8010048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801004c:	4b29      	ldr	r3, [pc, #164]	; (80100f4 <tcp_slowtmr+0x670>)
 801004e:	681a      	ldr	r2, [r3, #0]
 8010050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010052:	6a1b      	ldr	r3, [r3, #32]
 8010054:	1ad3      	subs	r3, r2, r3
 8010056:	2bf0      	cmp	r3, #240	; 0xf0
 8010058:	d904      	bls.n	8010064 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801005a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801005e:	3301      	adds	r3, #1
 8010060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010068:	2b00      	cmp	r3, #0
 801006a:	d02f      	beq.n	80100cc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801006c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801006e:	f000 fbf9 	bl	8010864 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010074:	2b00      	cmp	r3, #0
 8010076:	d010      	beq.n	801009a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010078:	4b1f      	ldr	r3, [pc, #124]	; (80100f8 <tcp_slowtmr+0x674>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801007e:	429a      	cmp	r2, r3
 8010080:	d106      	bne.n	8010090 <tcp_slowtmr+0x60c>
 8010082:	4b19      	ldr	r3, [pc, #100]	; (80100e8 <tcp_slowtmr+0x664>)
 8010084:	f240 52af 	movw	r2, #1455	; 0x5af
 8010088:	491c      	ldr	r1, [pc, #112]	; (80100fc <tcp_slowtmr+0x678>)
 801008a:	4819      	ldr	r0, [pc, #100]	; (80100f0 <tcp_slowtmr+0x66c>)
 801008c:	f00d fb70 	bl	801d770 <iprintf>
        prev->next = pcb->next;
 8010090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010092:	68da      	ldr	r2, [r3, #12]
 8010094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010096:	60da      	str	r2, [r3, #12]
 8010098:	e00f      	b.n	80100ba <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801009a:	4b17      	ldr	r3, [pc, #92]	; (80100f8 <tcp_slowtmr+0x674>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d006      	beq.n	80100b2 <tcp_slowtmr+0x62e>
 80100a4:	4b10      	ldr	r3, [pc, #64]	; (80100e8 <tcp_slowtmr+0x664>)
 80100a6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80100aa:	4915      	ldr	r1, [pc, #84]	; (8010100 <tcp_slowtmr+0x67c>)
 80100ac:	4810      	ldr	r0, [pc, #64]	; (80100f0 <tcp_slowtmr+0x66c>)
 80100ae:	f00d fb5f 	bl	801d770 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80100b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b4:	68db      	ldr	r3, [r3, #12]
 80100b6:	4a10      	ldr	r2, [pc, #64]	; (80100f8 <tcp_slowtmr+0x674>)
 80100b8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80100ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100bc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80100be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c0:	68db      	ldr	r3, [r3, #12]
 80100c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80100c4:	69f8      	ldr	r0, [r7, #28]
 80100c6:	f7fe ff85 	bl	800efd4 <tcp_free>
 80100ca:	e004      	b.n	80100d6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80100cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80100d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d2:	68db      	ldr	r3, [r3, #12]
 80100d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80100d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d1a9      	bne.n	8010030 <tcp_slowtmr+0x5ac>
    }
  }
}
 80100dc:	bf00      	nop
 80100de:	bf00      	nop
 80100e0:	3730      	adds	r7, #48	; 0x30
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bdb0      	pop	{r4, r5, r7, pc}
 80100e6:	bf00      	nop
 80100e8:	0801ffb0 	.word	0x0801ffb0
 80100ec:	08020440 	.word	0x08020440
 80100f0:	0801fff4 	.word	0x0801fff4
 80100f4:	200113bc 	.word	0x200113bc
 80100f8:	200113cc 	.word	0x200113cc
 80100fc:	08020470 	.word	0x08020470
 8010100:	08020498 	.word	0x08020498

08010104 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801010a:	4b2d      	ldr	r3, [pc, #180]	; (80101c0 <tcp_fasttmr+0xbc>)
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	3301      	adds	r3, #1
 8010110:	b2da      	uxtb	r2, r3
 8010112:	4b2b      	ldr	r3, [pc, #172]	; (80101c0 <tcp_fasttmr+0xbc>)
 8010114:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010116:	4b2b      	ldr	r3, [pc, #172]	; (80101c4 <tcp_fasttmr+0xc0>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801011c:	e048      	b.n	80101b0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	7f9a      	ldrb	r2, [r3, #30]
 8010122:	4b27      	ldr	r3, [pc, #156]	; (80101c0 <tcp_fasttmr+0xbc>)
 8010124:	781b      	ldrb	r3, [r3, #0]
 8010126:	429a      	cmp	r2, r3
 8010128:	d03f      	beq.n	80101aa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801012a:	4b25      	ldr	r3, [pc, #148]	; (80101c0 <tcp_fasttmr+0xbc>)
 801012c:	781a      	ldrb	r2, [r3, #0]
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	8b5b      	ldrh	r3, [r3, #26]
 8010136:	f003 0301 	and.w	r3, r3, #1
 801013a:	2b00      	cmp	r3, #0
 801013c:	d010      	beq.n	8010160 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	8b5b      	ldrh	r3, [r3, #26]
 8010142:	f043 0302 	orr.w	r3, r3, #2
 8010146:	b29a      	uxth	r2, r3
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	f003 fff5 	bl	801413c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	8b5b      	ldrh	r3, [r3, #26]
 8010156:	f023 0303 	bic.w	r3, r3, #3
 801015a:	b29a      	uxth	r2, r3
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	8b5b      	ldrh	r3, [r3, #26]
 8010164:	f003 0308 	and.w	r3, r3, #8
 8010168:	2b00      	cmp	r3, #0
 801016a:	d009      	beq.n	8010180 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	8b5b      	ldrh	r3, [r3, #26]
 8010170:	f023 0308 	bic.w	r3, r3, #8
 8010174:	b29a      	uxth	r2, r3
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	f7ff f8be 	bl	800f2fc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	68db      	ldr	r3, [r3, #12]
 8010184:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801018a:	2b00      	cmp	r3, #0
 801018c:	d00a      	beq.n	80101a4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801018e:	4b0e      	ldr	r3, [pc, #56]	; (80101c8 <tcp_fasttmr+0xc4>)
 8010190:	2200      	movs	r2, #0
 8010192:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 f819 	bl	80101cc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801019a:	4b0b      	ldr	r3, [pc, #44]	; (80101c8 <tcp_fasttmr+0xc4>)
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d000      	beq.n	80101a4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80101a2:	e7b8      	b.n	8010116 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	607b      	str	r3, [r7, #4]
 80101a8:	e002      	b.n	80101b0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	68db      	ldr	r3, [r3, #12]
 80101ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d1b3      	bne.n	801011e <tcp_fasttmr+0x1a>
    }
  }
}
 80101b6:	bf00      	nop
 80101b8:	bf00      	nop
 80101ba:	3708      	adds	r7, #8
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	200113d2 	.word	0x200113d2
 80101c4:	200113c8 	.word	0x200113c8
 80101c8:	200113d0 	.word	0x200113d0

080101cc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80101cc:	b590      	push	{r4, r7, lr}
 80101ce:	b085      	sub	sp, #20
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d109      	bne.n	80101ee <tcp_process_refused_data+0x22>
 80101da:	4b37      	ldr	r3, [pc, #220]	; (80102b8 <tcp_process_refused_data+0xec>)
 80101dc:	f240 6209 	movw	r2, #1545	; 0x609
 80101e0:	4936      	ldr	r1, [pc, #216]	; (80102bc <tcp_process_refused_data+0xf0>)
 80101e2:	4837      	ldr	r0, [pc, #220]	; (80102c0 <tcp_process_refused_data+0xf4>)
 80101e4:	f00d fac4 	bl	801d770 <iprintf>
 80101e8:	f06f 030f 	mvn.w	r3, #15
 80101ec:	e060      	b.n	80102b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80101f2:	7b5b      	ldrb	r3, [r3, #13]
 80101f4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80101fa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2200      	movs	r2, #0
 8010200:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00b      	beq.n	8010224 <tcp_process_refused_data+0x58>
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6918      	ldr	r0, [r3, #16]
 8010216:	2300      	movs	r3, #0
 8010218:	68ba      	ldr	r2, [r7, #8]
 801021a:	6879      	ldr	r1, [r7, #4]
 801021c:	47a0      	blx	r4
 801021e:	4603      	mov	r3, r0
 8010220:	73fb      	strb	r3, [r7, #15]
 8010222:	e007      	b.n	8010234 <tcp_process_refused_data+0x68>
 8010224:	2300      	movs	r3, #0
 8010226:	68ba      	ldr	r2, [r7, #8]
 8010228:	6879      	ldr	r1, [r7, #4]
 801022a:	2000      	movs	r0, #0
 801022c:	f000 f8a4 	bl	8010378 <tcp_recv_null>
 8010230:	4603      	mov	r3, r0
 8010232:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d12a      	bne.n	8010292 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801023c:	7bbb      	ldrb	r3, [r7, #14]
 801023e:	f003 0320 	and.w	r3, r3, #32
 8010242:	2b00      	cmp	r3, #0
 8010244:	d033      	beq.n	80102ae <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801024a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801024e:	d005      	beq.n	801025c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010254:	3301      	adds	r3, #1
 8010256:	b29a      	uxth	r2, r3
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010262:	2b00      	cmp	r3, #0
 8010264:	d00b      	beq.n	801027e <tcp_process_refused_data+0xb2>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6918      	ldr	r0, [r3, #16]
 8010270:	2300      	movs	r3, #0
 8010272:	2200      	movs	r2, #0
 8010274:	6879      	ldr	r1, [r7, #4]
 8010276:	47a0      	blx	r4
 8010278:	4603      	mov	r3, r0
 801027a:	73fb      	strb	r3, [r7, #15]
 801027c:	e001      	b.n	8010282 <tcp_process_refused_data+0xb6>
 801027e:	2300      	movs	r3, #0
 8010280:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010286:	f113 0f0d 	cmn.w	r3, #13
 801028a:	d110      	bne.n	80102ae <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801028c:	f06f 030c 	mvn.w	r3, #12
 8010290:	e00e      	b.n	80102b0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010296:	f113 0f0d 	cmn.w	r3, #13
 801029a:	d102      	bne.n	80102a2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801029c:	f06f 030c 	mvn.w	r3, #12
 80102a0:	e006      	b.n	80102b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	68ba      	ldr	r2, [r7, #8]
 80102a6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80102a8:	f06f 0304 	mvn.w	r3, #4
 80102ac:	e000      	b.n	80102b0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80102ae:	2300      	movs	r3, #0
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	3714      	adds	r7, #20
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd90      	pop	{r4, r7, pc}
 80102b8:	0801ffb0 	.word	0x0801ffb0
 80102bc:	080204c0 	.word	0x080204c0
 80102c0:	0801fff4 	.word	0x0801fff4

080102c4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b084      	sub	sp, #16
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80102cc:	e007      	b.n	80102de <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f000 f80a 	bl	80102ee <tcp_seg_free>
    seg = next;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d1f4      	bne.n	80102ce <tcp_segs_free+0xa>
  }
}
 80102e4:	bf00      	nop
 80102e6:	bf00      	nop
 80102e8:	3710      	adds	r7, #16
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}

080102ee <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80102ee:	b580      	push	{r7, lr}
 80102f0:	b082      	sub	sp, #8
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d00c      	beq.n	8010316 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d004      	beq.n	801030e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	685b      	ldr	r3, [r3, #4]
 8010308:	4618      	mov	r0, r3
 801030a:	f7fe fbb7 	bl	800ea7c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801030e:	6879      	ldr	r1, [r7, #4]
 8010310:	2003      	movs	r0, #3
 8010312:	f7fd fd0f 	bl	800dd34 <memp_free>
  }
}
 8010316:	bf00      	nop
 8010318:	3708      	adds	r7, #8
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
	...

08010320 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b084      	sub	sp, #16
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d106      	bne.n	801033c <tcp_seg_copy+0x1c>
 801032e:	4b0f      	ldr	r3, [pc, #60]	; (801036c <tcp_seg_copy+0x4c>)
 8010330:	f240 6282 	movw	r2, #1666	; 0x682
 8010334:	490e      	ldr	r1, [pc, #56]	; (8010370 <tcp_seg_copy+0x50>)
 8010336:	480f      	ldr	r0, [pc, #60]	; (8010374 <tcp_seg_copy+0x54>)
 8010338:	f00d fa1a 	bl	801d770 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801033c:	2003      	movs	r0, #3
 801033e:	f7fd fc83 	bl	800dc48 <memp_malloc>
 8010342:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d101      	bne.n	801034e <tcp_seg_copy+0x2e>
    return NULL;
 801034a:	2300      	movs	r3, #0
 801034c:	e00a      	b.n	8010364 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801034e:	2210      	movs	r2, #16
 8010350:	6879      	ldr	r1, [r7, #4]
 8010352:	68f8      	ldr	r0, [r7, #12]
 8010354:	f00d f9f6 	bl	801d744 <memcpy>
  pbuf_ref(cseg->p);
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	685b      	ldr	r3, [r3, #4]
 801035c:	4618      	mov	r0, r3
 801035e:	f7fe fc33 	bl	800ebc8 <pbuf_ref>
  return cseg;
 8010362:	68fb      	ldr	r3, [r7, #12]
}
 8010364:	4618      	mov	r0, r3
 8010366:	3710      	adds	r7, #16
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}
 801036c:	0801ffb0 	.word	0x0801ffb0
 8010370:	08020504 	.word	0x08020504
 8010374:	0801fff4 	.word	0x0801fff4

08010378 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	60f8      	str	r0, [r7, #12]
 8010380:	60b9      	str	r1, [r7, #8]
 8010382:	607a      	str	r2, [r7, #4]
 8010384:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d109      	bne.n	80103a0 <tcp_recv_null+0x28>
 801038c:	4b12      	ldr	r3, [pc, #72]	; (80103d8 <tcp_recv_null+0x60>)
 801038e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010392:	4912      	ldr	r1, [pc, #72]	; (80103dc <tcp_recv_null+0x64>)
 8010394:	4812      	ldr	r0, [pc, #72]	; (80103e0 <tcp_recv_null+0x68>)
 8010396:	f00d f9eb 	bl	801d770 <iprintf>
 801039a:	f06f 030f 	mvn.w	r3, #15
 801039e:	e016      	b.n	80103ce <tcp_recv_null+0x56>

  if (p != NULL) {
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d009      	beq.n	80103ba <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	891b      	ldrh	r3, [r3, #8]
 80103aa:	4619      	mov	r1, r3
 80103ac:	68b8      	ldr	r0, [r7, #8]
 80103ae:	f7ff f9bb 	bl	800f728 <tcp_recved>
    pbuf_free(p);
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f7fe fb62 	bl	800ea7c <pbuf_free>
 80103b8:	e008      	b.n	80103cc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80103ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d104      	bne.n	80103cc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80103c2:	68b8      	ldr	r0, [r7, #8]
 80103c4:	f7ff f804 	bl	800f3d0 <tcp_close>
 80103c8:	4603      	mov	r3, r0
 80103ca:	e000      	b.n	80103ce <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80103cc:	2300      	movs	r3, #0
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3710      	adds	r7, #16
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	0801ffb0 	.word	0x0801ffb0
 80103dc:	08020520 	.word	0x08020520
 80103e0:	0801fff4 	.word	0x0801fff4

080103e4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b086      	sub	sp, #24
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	4603      	mov	r3, r0
 80103ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80103ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	db01      	blt.n	80103fa <tcp_kill_prio+0x16>
 80103f6:	79fb      	ldrb	r3, [r7, #7]
 80103f8:	e000      	b.n	80103fc <tcp_kill_prio+0x18>
 80103fa:	237f      	movs	r3, #127	; 0x7f
 80103fc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80103fe:	7afb      	ldrb	r3, [r7, #11]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d034      	beq.n	801046e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010404:	7afb      	ldrb	r3, [r7, #11]
 8010406:	3b01      	subs	r3, #1
 8010408:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801040a:	2300      	movs	r3, #0
 801040c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801040e:	2300      	movs	r3, #0
 8010410:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010412:	4b19      	ldr	r3, [pc, #100]	; (8010478 <tcp_kill_prio+0x94>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	617b      	str	r3, [r7, #20]
 8010418:	e01f      	b.n	801045a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	7d5b      	ldrb	r3, [r3, #21]
 801041e:	7afa      	ldrb	r2, [r7, #11]
 8010420:	429a      	cmp	r2, r3
 8010422:	d80c      	bhi.n	801043e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010424:	697b      	ldr	r3, [r7, #20]
 8010426:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010428:	7afa      	ldrb	r2, [r7, #11]
 801042a:	429a      	cmp	r2, r3
 801042c:	d112      	bne.n	8010454 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801042e:	4b13      	ldr	r3, [pc, #76]	; (801047c <tcp_kill_prio+0x98>)
 8010430:	681a      	ldr	r2, [r3, #0]
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	6a1b      	ldr	r3, [r3, #32]
 8010436:	1ad3      	subs	r3, r2, r3
 8010438:	68fa      	ldr	r2, [r7, #12]
 801043a:	429a      	cmp	r2, r3
 801043c:	d80a      	bhi.n	8010454 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801043e:	4b0f      	ldr	r3, [pc, #60]	; (801047c <tcp_kill_prio+0x98>)
 8010440:	681a      	ldr	r2, [r3, #0]
 8010442:	697b      	ldr	r3, [r7, #20]
 8010444:	6a1b      	ldr	r3, [r3, #32]
 8010446:	1ad3      	subs	r3, r2, r3
 8010448:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801044e:	697b      	ldr	r3, [r7, #20]
 8010450:	7d5b      	ldrb	r3, [r3, #21]
 8010452:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	68db      	ldr	r3, [r3, #12]
 8010458:	617b      	str	r3, [r7, #20]
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d1dc      	bne.n	801041a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d004      	beq.n	8010470 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010466:	6938      	ldr	r0, [r7, #16]
 8010468:	f7ff f8f8 	bl	800f65c <tcp_abort>
 801046c:	e000      	b.n	8010470 <tcp_kill_prio+0x8c>
    return;
 801046e:	bf00      	nop
  }
}
 8010470:	3718      	adds	r7, #24
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
 8010476:	bf00      	nop
 8010478:	200113c8 	.word	0x200113c8
 801047c:	200113bc 	.word	0x200113bc

08010480 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b086      	sub	sp, #24
 8010484:	af00      	add	r7, sp, #0
 8010486:	4603      	mov	r3, r0
 8010488:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801048a:	79fb      	ldrb	r3, [r7, #7]
 801048c:	2b08      	cmp	r3, #8
 801048e:	d009      	beq.n	80104a4 <tcp_kill_state+0x24>
 8010490:	79fb      	ldrb	r3, [r7, #7]
 8010492:	2b09      	cmp	r3, #9
 8010494:	d006      	beq.n	80104a4 <tcp_kill_state+0x24>
 8010496:	4b1a      	ldr	r3, [pc, #104]	; (8010500 <tcp_kill_state+0x80>)
 8010498:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801049c:	4919      	ldr	r1, [pc, #100]	; (8010504 <tcp_kill_state+0x84>)
 801049e:	481a      	ldr	r0, [pc, #104]	; (8010508 <tcp_kill_state+0x88>)
 80104a0:	f00d f966 	bl	801d770 <iprintf>

  inactivity = 0;
 80104a4:	2300      	movs	r3, #0
 80104a6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80104a8:	2300      	movs	r3, #0
 80104aa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80104ac:	4b17      	ldr	r3, [pc, #92]	; (801050c <tcp_kill_state+0x8c>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	617b      	str	r3, [r7, #20]
 80104b2:	e017      	b.n	80104e4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	7d1b      	ldrb	r3, [r3, #20]
 80104b8:	79fa      	ldrb	r2, [r7, #7]
 80104ba:	429a      	cmp	r2, r3
 80104bc:	d10f      	bne.n	80104de <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80104be:	4b14      	ldr	r3, [pc, #80]	; (8010510 <tcp_kill_state+0x90>)
 80104c0:	681a      	ldr	r2, [r3, #0]
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	6a1b      	ldr	r3, [r3, #32]
 80104c6:	1ad3      	subs	r3, r2, r3
 80104c8:	68fa      	ldr	r2, [r7, #12]
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d807      	bhi.n	80104de <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80104ce:	4b10      	ldr	r3, [pc, #64]	; (8010510 <tcp_kill_state+0x90>)
 80104d0:	681a      	ldr	r2, [r3, #0]
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	6a1b      	ldr	r3, [r3, #32]
 80104d6:	1ad3      	subs	r3, r2, r3
 80104d8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80104da:	697b      	ldr	r3, [r7, #20]
 80104dc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	68db      	ldr	r3, [r3, #12]
 80104e2:	617b      	str	r3, [r7, #20]
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d1e4      	bne.n	80104b4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d003      	beq.n	80104f8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80104f0:	2100      	movs	r1, #0
 80104f2:	6938      	ldr	r0, [r7, #16]
 80104f4:	f7fe fff4 	bl	800f4e0 <tcp_abandon>
  }
}
 80104f8:	bf00      	nop
 80104fa:	3718      	adds	r7, #24
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}
 8010500:	0801ffb0 	.word	0x0801ffb0
 8010504:	0802053c 	.word	0x0802053c
 8010508:	0801fff4 	.word	0x0801fff4
 801050c:	200113c8 	.word	0x200113c8
 8010510:	200113bc 	.word	0x200113bc

08010514 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b084      	sub	sp, #16
 8010518:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801051a:	2300      	movs	r3, #0
 801051c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801051e:	2300      	movs	r3, #0
 8010520:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010522:	4b12      	ldr	r3, [pc, #72]	; (801056c <tcp_kill_timewait+0x58>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	60fb      	str	r3, [r7, #12]
 8010528:	e012      	b.n	8010550 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801052a:	4b11      	ldr	r3, [pc, #68]	; (8010570 <tcp_kill_timewait+0x5c>)
 801052c:	681a      	ldr	r2, [r3, #0]
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	6a1b      	ldr	r3, [r3, #32]
 8010532:	1ad3      	subs	r3, r2, r3
 8010534:	687a      	ldr	r2, [r7, #4]
 8010536:	429a      	cmp	r2, r3
 8010538:	d807      	bhi.n	801054a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801053a:	4b0d      	ldr	r3, [pc, #52]	; (8010570 <tcp_kill_timewait+0x5c>)
 801053c:	681a      	ldr	r2, [r3, #0]
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	6a1b      	ldr	r3, [r3, #32]
 8010542:	1ad3      	subs	r3, r2, r3
 8010544:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	68db      	ldr	r3, [r3, #12]
 801054e:	60fb      	str	r3, [r7, #12]
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d1e9      	bne.n	801052a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d002      	beq.n	8010562 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801055c:	68b8      	ldr	r0, [r7, #8]
 801055e:	f7ff f87d 	bl	800f65c <tcp_abort>
  }
}
 8010562:	bf00      	nop
 8010564:	3710      	adds	r7, #16
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}
 801056a:	bf00      	nop
 801056c:	200113cc 	.word	0x200113cc
 8010570:	200113bc 	.word	0x200113bc

08010574 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801057a:	4b10      	ldr	r3, [pc, #64]	; (80105bc <tcp_handle_closepend+0x48>)
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010580:	e014      	b.n	80105ac <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	68db      	ldr	r3, [r3, #12]
 8010586:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	8b5b      	ldrh	r3, [r3, #26]
 801058c:	f003 0308 	and.w	r3, r3, #8
 8010590:	2b00      	cmp	r3, #0
 8010592:	d009      	beq.n	80105a8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	8b5b      	ldrh	r3, [r3, #26]
 8010598:	f023 0308 	bic.w	r3, r3, #8
 801059c:	b29a      	uxth	r2, r3
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f7fe feaa 	bl	800f2fc <tcp_close_shutdown_fin>
    }
    pcb = next;
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d1e7      	bne.n	8010582 <tcp_handle_closepend+0xe>
  }
}
 80105b2:	bf00      	nop
 80105b4:	bf00      	nop
 80105b6:	3708      	adds	r7, #8
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}
 80105bc:	200113c8 	.word	0x200113c8

080105c0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b084      	sub	sp, #16
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	4603      	mov	r3, r0
 80105c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80105ca:	2001      	movs	r0, #1
 80105cc:	f7fd fb3c 	bl	800dc48 <memp_malloc>
 80105d0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d126      	bne.n	8010626 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80105d8:	f7ff ffcc 	bl	8010574 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80105dc:	f7ff ff9a 	bl	8010514 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80105e0:	2001      	movs	r0, #1
 80105e2:	f7fd fb31 	bl	800dc48 <memp_malloc>
 80105e6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d11b      	bne.n	8010626 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80105ee:	2009      	movs	r0, #9
 80105f0:	f7ff ff46 	bl	8010480 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80105f4:	2001      	movs	r0, #1
 80105f6:	f7fd fb27 	bl	800dc48 <memp_malloc>
 80105fa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d111      	bne.n	8010626 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010602:	2008      	movs	r0, #8
 8010604:	f7ff ff3c 	bl	8010480 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010608:	2001      	movs	r0, #1
 801060a:	f7fd fb1d 	bl	800dc48 <memp_malloc>
 801060e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d107      	bne.n	8010626 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010616:	79fb      	ldrb	r3, [r7, #7]
 8010618:	4618      	mov	r0, r3
 801061a:	f7ff fee3 	bl	80103e4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801061e:	2001      	movs	r0, #1
 8010620:	f7fd fb12 	bl	800dc48 <memp_malloc>
 8010624:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d03f      	beq.n	80106ac <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801062c:	229c      	movs	r2, #156	; 0x9c
 801062e:	2100      	movs	r1, #0
 8010630:	68f8      	ldr	r0, [r7, #12]
 8010632:	f00d f895 	bl	801d760 <memset>
    pcb->prio = prio;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	79fa      	ldrb	r2, [r7, #7]
 801063a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010642:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801064c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	22ff      	movs	r2, #255	; 0xff
 801065a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010662:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	2206      	movs	r2, #6
 8010668:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	2206      	movs	r2, #6
 8010670:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010678:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	2201      	movs	r2, #1
 801067e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010682:	4b0d      	ldr	r3, [pc, #52]	; (80106b8 <tcp_alloc+0xf8>)
 8010684:	681a      	ldr	r2, [r3, #0]
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801068a:	4b0c      	ldr	r3, [pc, #48]	; (80106bc <tcp_alloc+0xfc>)
 801068c:	781a      	ldrb	r2, [r3, #0]
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010698:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	4a08      	ldr	r2, [pc, #32]	; (80106c0 <tcp_alloc+0x100>)
 80106a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	4a07      	ldr	r2, [pc, #28]	; (80106c4 <tcp_alloc+0x104>)
 80106a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80106ac:	68fb      	ldr	r3, [r7, #12]
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3710      	adds	r7, #16
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}
 80106b6:	bf00      	nop
 80106b8:	200113bc 	.word	0x200113bc
 80106bc:	200113d2 	.word	0x200113d2
 80106c0:	08010379 	.word	0x08010379
 80106c4:	006ddd00 	.word	0x006ddd00

080106c8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b084      	sub	sp, #16
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	4603      	mov	r3, r0
 80106d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80106d2:	2040      	movs	r0, #64	; 0x40
 80106d4:	f7ff ff74 	bl	80105c0 <tcp_alloc>
 80106d8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80106da:	68fb      	ldr	r3, [r7, #12]
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3710      	adds	r7, #16
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80106e4:	b480      	push	{r7}
 80106e6:	b083      	sub	sp, #12
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d002      	beq.n	80106fa <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	683a      	ldr	r2, [r7, #0]
 80106f8:	611a      	str	r2, [r3, #16]
  }
}
 80106fa:	bf00      	nop
 80106fc:	370c      	adds	r7, #12
 80106fe:	46bd      	mov	sp, r7
 8010700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010704:	4770      	bx	lr
	...

08010708 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b082      	sub	sp, #8
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d00e      	beq.n	8010736 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	7d1b      	ldrb	r3, [r3, #20]
 801071c:	2b01      	cmp	r3, #1
 801071e:	d106      	bne.n	801072e <tcp_recv+0x26>
 8010720:	4b07      	ldr	r3, [pc, #28]	; (8010740 <tcp_recv+0x38>)
 8010722:	f240 72df 	movw	r2, #2015	; 0x7df
 8010726:	4907      	ldr	r1, [pc, #28]	; (8010744 <tcp_recv+0x3c>)
 8010728:	4807      	ldr	r0, [pc, #28]	; (8010748 <tcp_recv+0x40>)
 801072a:	f00d f821 	bl	801d770 <iprintf>
    pcb->recv = recv;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	683a      	ldr	r2, [r7, #0]
 8010732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8010736:	bf00      	nop
 8010738:	3708      	adds	r7, #8
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
 801073e:	bf00      	nop
 8010740:	0801ffb0 	.word	0x0801ffb0
 8010744:	0802054c 	.word	0x0802054c
 8010748:	0801fff4 	.word	0x0801fff4

0801074c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b082      	sub	sp, #8
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d00e      	beq.n	801077a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	7d1b      	ldrb	r3, [r3, #20]
 8010760:	2b01      	cmp	r3, #1
 8010762:	d106      	bne.n	8010772 <tcp_sent+0x26>
 8010764:	4b07      	ldr	r3, [pc, #28]	; (8010784 <tcp_sent+0x38>)
 8010766:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801076a:	4907      	ldr	r1, [pc, #28]	; (8010788 <tcp_sent+0x3c>)
 801076c:	4807      	ldr	r0, [pc, #28]	; (801078c <tcp_sent+0x40>)
 801076e:	f00c ffff 	bl	801d770 <iprintf>
    pcb->sent = sent;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	683a      	ldr	r2, [r7, #0]
 8010776:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801077a:	bf00      	nop
 801077c:	3708      	adds	r7, #8
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}
 8010782:	bf00      	nop
 8010784:	0801ffb0 	.word	0x0801ffb0
 8010788:	08020574 	.word	0x08020574
 801078c:	0801fff4 	.word	0x0801fff4

08010790 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d00e      	beq.n	80107be <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	7d1b      	ldrb	r3, [r3, #20]
 80107a4:	2b01      	cmp	r3, #1
 80107a6:	d106      	bne.n	80107b6 <tcp_err+0x26>
 80107a8:	4b07      	ldr	r3, [pc, #28]	; (80107c8 <tcp_err+0x38>)
 80107aa:	f640 020d 	movw	r2, #2061	; 0x80d
 80107ae:	4907      	ldr	r1, [pc, #28]	; (80107cc <tcp_err+0x3c>)
 80107b0:	4807      	ldr	r0, [pc, #28]	; (80107d0 <tcp_err+0x40>)
 80107b2:	f00c ffdd 	bl	801d770 <iprintf>
    pcb->errf = err;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	683a      	ldr	r2, [r7, #0]
 80107ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80107be:	bf00      	nop
 80107c0:	3708      	adds	r7, #8
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}
 80107c6:	bf00      	nop
 80107c8:	0801ffb0 	.word	0x0801ffb0
 80107cc:	0802059c 	.word	0x0802059c
 80107d0:	0801fff4 	.word	0x0801fff4

080107d4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80107d4:	b480      	push	{r7}
 80107d6:	b085      	sub	sp, #20
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d008      	beq.n	80107f6 <tcp_accept+0x22>
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	7d1b      	ldrb	r3, [r3, #20]
 80107e8:	2b01      	cmp	r3, #1
 80107ea:	d104      	bne.n	80107f6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	683a      	ldr	r2, [r7, #0]
 80107f4:	619a      	str	r2, [r3, #24]
  }
}
 80107f6:	bf00      	nop
 80107f8:	3714      	adds	r7, #20
 80107fa:	46bd      	mov	sp, r7
 80107fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010800:	4770      	bx	lr
	...

08010804 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b084      	sub	sp, #16
 8010808:	af00      	add	r7, sp, #0
 801080a:	60f8      	str	r0, [r7, #12]
 801080c:	60b9      	str	r1, [r7, #8]
 801080e:	4613      	mov	r3, r2
 8010810:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d107      	bne.n	8010828 <tcp_poll+0x24>
 8010818:	4b0e      	ldr	r3, [pc, #56]	; (8010854 <tcp_poll+0x50>)
 801081a:	f640 023d 	movw	r2, #2109	; 0x83d
 801081e:	490e      	ldr	r1, [pc, #56]	; (8010858 <tcp_poll+0x54>)
 8010820:	480e      	ldr	r0, [pc, #56]	; (801085c <tcp_poll+0x58>)
 8010822:	f00c ffa5 	bl	801d770 <iprintf>
 8010826:	e011      	b.n	801084c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	7d1b      	ldrb	r3, [r3, #20]
 801082c:	2b01      	cmp	r3, #1
 801082e:	d106      	bne.n	801083e <tcp_poll+0x3a>
 8010830:	4b08      	ldr	r3, [pc, #32]	; (8010854 <tcp_poll+0x50>)
 8010832:	f640 023e 	movw	r2, #2110	; 0x83e
 8010836:	490a      	ldr	r1, [pc, #40]	; (8010860 <tcp_poll+0x5c>)
 8010838:	4808      	ldr	r0, [pc, #32]	; (801085c <tcp_poll+0x58>)
 801083a:	f00c ff99 	bl	801d770 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	68ba      	ldr	r2, [r7, #8]
 8010842:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	79fa      	ldrb	r2, [r7, #7]
 801084a:	775a      	strb	r2, [r3, #29]
}
 801084c:	3710      	adds	r7, #16
 801084e:	46bd      	mov	sp, r7
 8010850:	bd80      	pop	{r7, pc}
 8010852:	bf00      	nop
 8010854:	0801ffb0 	.word	0x0801ffb0
 8010858:	080205c4 	.word	0x080205c4
 801085c:	0801fff4 	.word	0x0801fff4
 8010860:	080205dc 	.word	0x080205dc

08010864 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b082      	sub	sp, #8
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d107      	bne.n	8010882 <tcp_pcb_purge+0x1e>
 8010872:	4b21      	ldr	r3, [pc, #132]	; (80108f8 <tcp_pcb_purge+0x94>)
 8010874:	f640 0251 	movw	r2, #2129	; 0x851
 8010878:	4920      	ldr	r1, [pc, #128]	; (80108fc <tcp_pcb_purge+0x98>)
 801087a:	4821      	ldr	r0, [pc, #132]	; (8010900 <tcp_pcb_purge+0x9c>)
 801087c:	f00c ff78 	bl	801d770 <iprintf>
 8010880:	e037      	b.n	80108f2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	7d1b      	ldrb	r3, [r3, #20]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d033      	beq.n	80108f2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801088e:	2b0a      	cmp	r3, #10
 8010890:	d02f      	beq.n	80108f2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010896:	2b01      	cmp	r3, #1
 8010898:	d02b      	beq.n	80108f2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d007      	beq.n	80108b2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7fe f8e8 	bl	800ea7c <pbuf_free>
      pcb->refused_data = NULL;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2200      	movs	r2, #0
 80108b0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d002      	beq.n	80108c0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f000 f986 	bl	8010bcc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108c6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7ff fcf9 	bl	80102c4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108d6:	4618      	mov	r0, r3
 80108d8:	f7ff fcf4 	bl	80102c4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2200      	movs	r2, #0
 80108e0:	66da      	str	r2, [r3, #108]	; 0x6c
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2200      	movs	r2, #0
 80108ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80108f2:	3708      	adds	r7, #8
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}
 80108f8:	0801ffb0 	.word	0x0801ffb0
 80108fc:	080205fc 	.word	0x080205fc
 8010900:	0801fff4 	.word	0x0801fff4

08010904 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b084      	sub	sp, #16
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d106      	bne.n	8010922 <tcp_pcb_remove+0x1e>
 8010914:	4b3e      	ldr	r3, [pc, #248]	; (8010a10 <tcp_pcb_remove+0x10c>)
 8010916:	f640 0283 	movw	r2, #2179	; 0x883
 801091a:	493e      	ldr	r1, [pc, #248]	; (8010a14 <tcp_pcb_remove+0x110>)
 801091c:	483e      	ldr	r0, [pc, #248]	; (8010a18 <tcp_pcb_remove+0x114>)
 801091e:	f00c ff27 	bl	801d770 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d106      	bne.n	8010936 <tcp_pcb_remove+0x32>
 8010928:	4b39      	ldr	r3, [pc, #228]	; (8010a10 <tcp_pcb_remove+0x10c>)
 801092a:	f640 0284 	movw	r2, #2180	; 0x884
 801092e:	493b      	ldr	r1, [pc, #236]	; (8010a1c <tcp_pcb_remove+0x118>)
 8010930:	4839      	ldr	r0, [pc, #228]	; (8010a18 <tcp_pcb_remove+0x114>)
 8010932:	f00c ff1d 	bl	801d770 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	683a      	ldr	r2, [r7, #0]
 801093c:	429a      	cmp	r2, r3
 801093e:	d105      	bne.n	801094c <tcp_pcb_remove+0x48>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	68da      	ldr	r2, [r3, #12]
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	601a      	str	r2, [r3, #0]
 801094a:	e013      	b.n	8010974 <tcp_pcb_remove+0x70>
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	60fb      	str	r3, [r7, #12]
 8010952:	e00c      	b.n	801096e <tcp_pcb_remove+0x6a>
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	68db      	ldr	r3, [r3, #12]
 8010958:	683a      	ldr	r2, [r7, #0]
 801095a:	429a      	cmp	r2, r3
 801095c:	d104      	bne.n	8010968 <tcp_pcb_remove+0x64>
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	68da      	ldr	r2, [r3, #12]
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	60da      	str	r2, [r3, #12]
 8010966:	e005      	b.n	8010974 <tcp_pcb_remove+0x70>
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	68db      	ldr	r3, [r3, #12]
 801096c:	60fb      	str	r3, [r7, #12]
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d1ef      	bne.n	8010954 <tcp_pcb_remove+0x50>
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	2200      	movs	r2, #0
 8010978:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801097a:	6838      	ldr	r0, [r7, #0]
 801097c:	f7ff ff72 	bl	8010864 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	7d1b      	ldrb	r3, [r3, #20]
 8010984:	2b0a      	cmp	r3, #10
 8010986:	d013      	beq.n	80109b0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801098c:	2b01      	cmp	r3, #1
 801098e:	d00f      	beq.n	80109b0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	8b5b      	ldrh	r3, [r3, #26]
 8010994:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010998:	2b00      	cmp	r3, #0
 801099a:	d009      	beq.n	80109b0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	8b5b      	ldrh	r3, [r3, #26]
 80109a0:	f043 0302 	orr.w	r3, r3, #2
 80109a4:	b29a      	uxth	r2, r3
 80109a6:	683b      	ldr	r3, [r7, #0]
 80109a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80109aa:	6838      	ldr	r0, [r7, #0]
 80109ac:	f003 fbc6 	bl	801413c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	7d1b      	ldrb	r3, [r3, #20]
 80109b4:	2b01      	cmp	r3, #1
 80109b6:	d020      	beq.n	80109fa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d006      	beq.n	80109ce <tcp_pcb_remove+0xca>
 80109c0:	4b13      	ldr	r3, [pc, #76]	; (8010a10 <tcp_pcb_remove+0x10c>)
 80109c2:	f640 0293 	movw	r2, #2195	; 0x893
 80109c6:	4916      	ldr	r1, [pc, #88]	; (8010a20 <tcp_pcb_remove+0x11c>)
 80109c8:	4813      	ldr	r0, [pc, #76]	; (8010a18 <tcp_pcb_remove+0x114>)
 80109ca:	f00c fed1 	bl	801d770 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d006      	beq.n	80109e4 <tcp_pcb_remove+0xe0>
 80109d6:	4b0e      	ldr	r3, [pc, #56]	; (8010a10 <tcp_pcb_remove+0x10c>)
 80109d8:	f640 0294 	movw	r2, #2196	; 0x894
 80109dc:	4911      	ldr	r1, [pc, #68]	; (8010a24 <tcp_pcb_remove+0x120>)
 80109de:	480e      	ldr	r0, [pc, #56]	; (8010a18 <tcp_pcb_remove+0x114>)
 80109e0:	f00c fec6 	bl	801d770 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d006      	beq.n	80109fa <tcp_pcb_remove+0xf6>
 80109ec:	4b08      	ldr	r3, [pc, #32]	; (8010a10 <tcp_pcb_remove+0x10c>)
 80109ee:	f640 0296 	movw	r2, #2198	; 0x896
 80109f2:	490d      	ldr	r1, [pc, #52]	; (8010a28 <tcp_pcb_remove+0x124>)
 80109f4:	4808      	ldr	r0, [pc, #32]	; (8010a18 <tcp_pcb_remove+0x114>)
 80109f6:	f00c febb 	bl	801d770 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	2200      	movs	r2, #0
 80109fe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	2200      	movs	r2, #0
 8010a04:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010a06:	bf00      	nop
 8010a08:	3710      	adds	r7, #16
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	0801ffb0 	.word	0x0801ffb0
 8010a14:	08020618 	.word	0x08020618
 8010a18:	0801fff4 	.word	0x0801fff4
 8010a1c:	08020634 	.word	0x08020634
 8010a20:	08020654 	.word	0x08020654
 8010a24:	0802066c 	.word	0x0802066c
 8010a28:	08020688 	.word	0x08020688

08010a2c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d106      	bne.n	8010a48 <tcp_next_iss+0x1c>
 8010a3a:	4b0a      	ldr	r3, [pc, #40]	; (8010a64 <tcp_next_iss+0x38>)
 8010a3c:	f640 02af 	movw	r2, #2223	; 0x8af
 8010a40:	4909      	ldr	r1, [pc, #36]	; (8010a68 <tcp_next_iss+0x3c>)
 8010a42:	480a      	ldr	r0, [pc, #40]	; (8010a6c <tcp_next_iss+0x40>)
 8010a44:	f00c fe94 	bl	801d770 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010a48:	4b09      	ldr	r3, [pc, #36]	; (8010a70 <tcp_next_iss+0x44>)
 8010a4a:	681a      	ldr	r2, [r3, #0]
 8010a4c:	4b09      	ldr	r3, [pc, #36]	; (8010a74 <tcp_next_iss+0x48>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	4413      	add	r3, r2
 8010a52:	4a07      	ldr	r2, [pc, #28]	; (8010a70 <tcp_next_iss+0x44>)
 8010a54:	6013      	str	r3, [r2, #0]
  return iss;
 8010a56:	4b06      	ldr	r3, [pc, #24]	; (8010a70 <tcp_next_iss+0x44>)
 8010a58:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	3708      	adds	r7, #8
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}
 8010a62:	bf00      	nop
 8010a64:	0801ffb0 	.word	0x0801ffb0
 8010a68:	080206a0 	.word	0x080206a0
 8010a6c:	0801fff4 	.word	0x0801fff4
 8010a70:	20000028 	.word	0x20000028
 8010a74:	200113bc 	.word	0x200113bc

08010a78 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b086      	sub	sp, #24
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	4603      	mov	r3, r0
 8010a80:	60b9      	str	r1, [r7, #8]
 8010a82:	607a      	str	r2, [r7, #4]
 8010a84:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d106      	bne.n	8010a9a <tcp_eff_send_mss_netif+0x22>
 8010a8c:	4b14      	ldr	r3, [pc, #80]	; (8010ae0 <tcp_eff_send_mss_netif+0x68>)
 8010a8e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010a92:	4914      	ldr	r1, [pc, #80]	; (8010ae4 <tcp_eff_send_mss_netif+0x6c>)
 8010a94:	4814      	ldr	r0, [pc, #80]	; (8010ae8 <tcp_eff_send_mss_netif+0x70>)
 8010a96:	f00c fe6b 	bl	801d770 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d101      	bne.n	8010aa4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010aa0:	89fb      	ldrh	r3, [r7, #14]
 8010aa2:	e019      	b.n	8010ad8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010aa8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010aaa:	8afb      	ldrh	r3, [r7, #22]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d012      	beq.n	8010ad6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010ab0:	2328      	movs	r3, #40	; 0x28
 8010ab2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010ab4:	8afa      	ldrh	r2, [r7, #22]
 8010ab6:	8abb      	ldrh	r3, [r7, #20]
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	d904      	bls.n	8010ac6 <tcp_eff_send_mss_netif+0x4e>
 8010abc:	8afa      	ldrh	r2, [r7, #22]
 8010abe:	8abb      	ldrh	r3, [r7, #20]
 8010ac0:	1ad3      	subs	r3, r2, r3
 8010ac2:	b29b      	uxth	r3, r3
 8010ac4:	e000      	b.n	8010ac8 <tcp_eff_send_mss_netif+0x50>
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010aca:	8a7a      	ldrh	r2, [r7, #18]
 8010acc:	89fb      	ldrh	r3, [r7, #14]
 8010ace:	4293      	cmp	r3, r2
 8010ad0:	bf28      	it	cs
 8010ad2:	4613      	movcs	r3, r2
 8010ad4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010ad6:	89fb      	ldrh	r3, [r7, #14]
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3718      	adds	r7, #24
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}
 8010ae0:	0801ffb0 	.word	0x0801ffb0
 8010ae4:	080206bc 	.word	0x080206bc
 8010ae8:	0801fff4 	.word	0x0801fff4

08010aec <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b084      	sub	sp, #16
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
 8010af4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d119      	bne.n	8010b34 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010b00:	4b10      	ldr	r3, [pc, #64]	; (8010b44 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010b02:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010b06:	4910      	ldr	r1, [pc, #64]	; (8010b48 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010b08:	4810      	ldr	r0, [pc, #64]	; (8010b4c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010b0a:	f00c fe31 	bl	801d770 <iprintf>

  while (pcb != NULL) {
 8010b0e:	e011      	b.n	8010b34 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	681a      	ldr	r2, [r3, #0]
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d108      	bne.n	8010b2e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	68db      	ldr	r3, [r3, #12]
 8010b20:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010b22:	68f8      	ldr	r0, [r7, #12]
 8010b24:	f7fe fd9a 	bl	800f65c <tcp_abort>
      pcb = next;
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	60fb      	str	r3, [r7, #12]
 8010b2c:	e002      	b.n	8010b34 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	68db      	ldr	r3, [r3, #12]
 8010b32:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d1ea      	bne.n	8010b10 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010b3a:	bf00      	nop
 8010b3c:	bf00      	nop
 8010b3e:	3710      	adds	r7, #16
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}
 8010b44:	0801ffb0 	.word	0x0801ffb0
 8010b48:	080206e4 	.word	0x080206e4
 8010b4c:	0801fff4 	.word	0x0801fff4

08010b50 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b084      	sub	sp, #16
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
 8010b58:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d02a      	beq.n	8010bb6 <tcp_netif_ip_addr_changed+0x66>
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d026      	beq.n	8010bb6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010b68:	4b15      	ldr	r3, [pc, #84]	; (8010bc0 <tcp_netif_ip_addr_changed+0x70>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f7ff ffbc 	bl	8010aec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010b74:	4b13      	ldr	r3, [pc, #76]	; (8010bc4 <tcp_netif_ip_addr_changed+0x74>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	4619      	mov	r1, r3
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f7ff ffb6 	bl	8010aec <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d017      	beq.n	8010bb6 <tcp_netif_ip_addr_changed+0x66>
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d013      	beq.n	8010bb6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010b8e:	4b0e      	ldr	r3, [pc, #56]	; (8010bc8 <tcp_netif_ip_addr_changed+0x78>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	60fb      	str	r3, [r7, #12]
 8010b94:	e00c      	b.n	8010bb0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d103      	bne.n	8010baa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	681a      	ldr	r2, [r3, #0]
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	68db      	ldr	r3, [r3, #12]
 8010bae:	60fb      	str	r3, [r7, #12]
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d1ef      	bne.n	8010b96 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010bb6:	bf00      	nop
 8010bb8:	3710      	adds	r7, #16
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	200113c8 	.word	0x200113c8
 8010bc4:	200113c0 	.word	0x200113c0
 8010bc8:	200113c4 	.word	0x200113c4

08010bcc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b082      	sub	sp, #8
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d007      	beq.n	8010bec <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7ff fb6f 	bl	80102c4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2200      	movs	r2, #0
 8010bea:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010bec:	bf00      	nop
 8010bee:	3708      	adds	r7, #8
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}

08010bf4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010bf4:	b590      	push	{r4, r7, lr}
 8010bf6:	b08d      	sub	sp, #52	; 0x34
 8010bf8:	af04      	add	r7, sp, #16
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d105      	bne.n	8010c10 <tcp_input+0x1c>
 8010c04:	4b9b      	ldr	r3, [pc, #620]	; (8010e74 <tcp_input+0x280>)
 8010c06:	2283      	movs	r2, #131	; 0x83
 8010c08:	499b      	ldr	r1, [pc, #620]	; (8010e78 <tcp_input+0x284>)
 8010c0a:	489c      	ldr	r0, [pc, #624]	; (8010e7c <tcp_input+0x288>)
 8010c0c:	f00c fdb0 	bl	801d770 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	685b      	ldr	r3, [r3, #4]
 8010c14:	4a9a      	ldr	r2, [pc, #616]	; (8010e80 <tcp_input+0x28c>)
 8010c16:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	895b      	ldrh	r3, [r3, #10]
 8010c1c:	2b13      	cmp	r3, #19
 8010c1e:	f240 83d1 	bls.w	80113c4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010c22:	4b98      	ldr	r3, [pc, #608]	; (8010e84 <tcp_input+0x290>)
 8010c24:	695b      	ldr	r3, [r3, #20]
 8010c26:	4a97      	ldr	r2, [pc, #604]	; (8010e84 <tcp_input+0x290>)
 8010c28:	6812      	ldr	r2, [r2, #0]
 8010c2a:	4611      	mov	r1, r2
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f006 fa53 	bl	80170d8 <ip4_addr_isbroadcast_u32>
 8010c32:	4603      	mov	r3, r0
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	f040 83c7 	bne.w	80113c8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010c3a:	4b92      	ldr	r3, [pc, #584]	; (8010e84 <tcp_input+0x290>)
 8010c3c:	695b      	ldr	r3, [r3, #20]
 8010c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010c42:	2be0      	cmp	r3, #224	; 0xe0
 8010c44:	f000 83c0 	beq.w	80113c8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010c48:	4b8d      	ldr	r3, [pc, #564]	; (8010e80 <tcp_input+0x28c>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	899b      	ldrh	r3, [r3, #12]
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7fc fb11 	bl	800d278 <lwip_htons>
 8010c56:	4603      	mov	r3, r0
 8010c58:	0b1b      	lsrs	r3, r3, #12
 8010c5a:	b29b      	uxth	r3, r3
 8010c5c:	b2db      	uxtb	r3, r3
 8010c5e:	009b      	lsls	r3, r3, #2
 8010c60:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010c62:	7cbb      	ldrb	r3, [r7, #18]
 8010c64:	2b13      	cmp	r3, #19
 8010c66:	f240 83b1 	bls.w	80113cc <tcp_input+0x7d8>
 8010c6a:	7cbb      	ldrb	r3, [r7, #18]
 8010c6c:	b29a      	uxth	r2, r3
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	891b      	ldrh	r3, [r3, #8]
 8010c72:	429a      	cmp	r2, r3
 8010c74:	f200 83aa 	bhi.w	80113cc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010c78:	7cbb      	ldrb	r3, [r7, #18]
 8010c7a:	b29b      	uxth	r3, r3
 8010c7c:	3b14      	subs	r3, #20
 8010c7e:	b29a      	uxth	r2, r3
 8010c80:	4b81      	ldr	r3, [pc, #516]	; (8010e88 <tcp_input+0x294>)
 8010c82:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010c84:	4b81      	ldr	r3, [pc, #516]	; (8010e8c <tcp_input+0x298>)
 8010c86:	2200      	movs	r2, #0
 8010c88:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	895a      	ldrh	r2, [r3, #10]
 8010c8e:	7cbb      	ldrb	r3, [r7, #18]
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d309      	bcc.n	8010caa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010c96:	4b7c      	ldr	r3, [pc, #496]	; (8010e88 <tcp_input+0x294>)
 8010c98:	881a      	ldrh	r2, [r3, #0]
 8010c9a:	4b7d      	ldr	r3, [pc, #500]	; (8010e90 <tcp_input+0x29c>)
 8010c9c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010c9e:	7cbb      	ldrb	r3, [r7, #18]
 8010ca0:	4619      	mov	r1, r3
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f7fd fe64 	bl	800e970 <pbuf_remove_header>
 8010ca8:	e04e      	b.n	8010d48 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d105      	bne.n	8010cbe <tcp_input+0xca>
 8010cb2:	4b70      	ldr	r3, [pc, #448]	; (8010e74 <tcp_input+0x280>)
 8010cb4:	22c2      	movs	r2, #194	; 0xc2
 8010cb6:	4977      	ldr	r1, [pc, #476]	; (8010e94 <tcp_input+0x2a0>)
 8010cb8:	4870      	ldr	r0, [pc, #448]	; (8010e7c <tcp_input+0x288>)
 8010cba:	f00c fd59 	bl	801d770 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010cbe:	2114      	movs	r1, #20
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f7fd fe55 	bl	800e970 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	895a      	ldrh	r2, [r3, #10]
 8010cca:	4b71      	ldr	r3, [pc, #452]	; (8010e90 <tcp_input+0x29c>)
 8010ccc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010cce:	4b6e      	ldr	r3, [pc, #440]	; (8010e88 <tcp_input+0x294>)
 8010cd0:	881a      	ldrh	r2, [r3, #0]
 8010cd2:	4b6f      	ldr	r3, [pc, #444]	; (8010e90 <tcp_input+0x29c>)
 8010cd4:	881b      	ldrh	r3, [r3, #0]
 8010cd6:	1ad3      	subs	r3, r2, r3
 8010cd8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010cda:	4b6d      	ldr	r3, [pc, #436]	; (8010e90 <tcp_input+0x29c>)
 8010cdc:	881b      	ldrh	r3, [r3, #0]
 8010cde:	4619      	mov	r1, r3
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f7fd fe45 	bl	800e970 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	895b      	ldrh	r3, [r3, #10]
 8010cec:	8a3a      	ldrh	r2, [r7, #16]
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	f200 836e 	bhi.w	80113d0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	685b      	ldr	r3, [r3, #4]
 8010cfa:	4a64      	ldr	r2, [pc, #400]	; (8010e8c <tcp_input+0x298>)
 8010cfc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	8a3a      	ldrh	r2, [r7, #16]
 8010d04:	4611      	mov	r1, r2
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7fd fe32 	bl	800e970 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	891a      	ldrh	r2, [r3, #8]
 8010d10:	8a3b      	ldrh	r3, [r7, #16]
 8010d12:	1ad3      	subs	r3, r2, r3
 8010d14:	b29a      	uxth	r2, r3
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	895b      	ldrh	r3, [r3, #10]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d005      	beq.n	8010d2e <tcp_input+0x13a>
 8010d22:	4b54      	ldr	r3, [pc, #336]	; (8010e74 <tcp_input+0x280>)
 8010d24:	22df      	movs	r2, #223	; 0xdf
 8010d26:	495c      	ldr	r1, [pc, #368]	; (8010e98 <tcp_input+0x2a4>)
 8010d28:	4854      	ldr	r0, [pc, #336]	; (8010e7c <tcp_input+0x288>)
 8010d2a:	f00c fd21 	bl	801d770 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	891a      	ldrh	r2, [r3, #8]
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	891b      	ldrh	r3, [r3, #8]
 8010d38:	429a      	cmp	r2, r3
 8010d3a:	d005      	beq.n	8010d48 <tcp_input+0x154>
 8010d3c:	4b4d      	ldr	r3, [pc, #308]	; (8010e74 <tcp_input+0x280>)
 8010d3e:	22e0      	movs	r2, #224	; 0xe0
 8010d40:	4956      	ldr	r1, [pc, #344]	; (8010e9c <tcp_input+0x2a8>)
 8010d42:	484e      	ldr	r0, [pc, #312]	; (8010e7c <tcp_input+0x288>)
 8010d44:	f00c fd14 	bl	801d770 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010d48:	4b4d      	ldr	r3, [pc, #308]	; (8010e80 <tcp_input+0x28c>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	881b      	ldrh	r3, [r3, #0]
 8010d4e:	b29b      	uxth	r3, r3
 8010d50:	4a4b      	ldr	r2, [pc, #300]	; (8010e80 <tcp_input+0x28c>)
 8010d52:	6814      	ldr	r4, [r2, #0]
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7fc fa8f 	bl	800d278 <lwip_htons>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010d5e:	4b48      	ldr	r3, [pc, #288]	; (8010e80 <tcp_input+0x28c>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	885b      	ldrh	r3, [r3, #2]
 8010d64:	b29b      	uxth	r3, r3
 8010d66:	4a46      	ldr	r2, [pc, #280]	; (8010e80 <tcp_input+0x28c>)
 8010d68:	6814      	ldr	r4, [r2, #0]
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7fc fa84 	bl	800d278 <lwip_htons>
 8010d70:	4603      	mov	r3, r0
 8010d72:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010d74:	4b42      	ldr	r3, [pc, #264]	; (8010e80 <tcp_input+0x28c>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	4a41      	ldr	r2, [pc, #260]	; (8010e80 <tcp_input+0x28c>)
 8010d7c:	6814      	ldr	r4, [r2, #0]
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f7fc fa8f 	bl	800d2a2 <lwip_htonl>
 8010d84:	4603      	mov	r3, r0
 8010d86:	6063      	str	r3, [r4, #4]
 8010d88:	6863      	ldr	r3, [r4, #4]
 8010d8a:	4a45      	ldr	r2, [pc, #276]	; (8010ea0 <tcp_input+0x2ac>)
 8010d8c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010d8e:	4b3c      	ldr	r3, [pc, #240]	; (8010e80 <tcp_input+0x28c>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	689b      	ldr	r3, [r3, #8]
 8010d94:	4a3a      	ldr	r2, [pc, #232]	; (8010e80 <tcp_input+0x28c>)
 8010d96:	6814      	ldr	r4, [r2, #0]
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7fc fa82 	bl	800d2a2 <lwip_htonl>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	60a3      	str	r3, [r4, #8]
 8010da2:	68a3      	ldr	r3, [r4, #8]
 8010da4:	4a3f      	ldr	r2, [pc, #252]	; (8010ea4 <tcp_input+0x2b0>)
 8010da6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010da8:	4b35      	ldr	r3, [pc, #212]	; (8010e80 <tcp_input+0x28c>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	89db      	ldrh	r3, [r3, #14]
 8010dae:	b29b      	uxth	r3, r3
 8010db0:	4a33      	ldr	r2, [pc, #204]	; (8010e80 <tcp_input+0x28c>)
 8010db2:	6814      	ldr	r4, [r2, #0]
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7fc fa5f 	bl	800d278 <lwip_htons>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010dbe:	4b30      	ldr	r3, [pc, #192]	; (8010e80 <tcp_input+0x28c>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	899b      	ldrh	r3, [r3, #12]
 8010dc4:	b29b      	uxth	r3, r3
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7fc fa56 	bl	800d278 <lwip_htons>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	b2db      	uxtb	r3, r3
 8010dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010dd4:	b2da      	uxtb	r2, r3
 8010dd6:	4b34      	ldr	r3, [pc, #208]	; (8010ea8 <tcp_input+0x2b4>)
 8010dd8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	891a      	ldrh	r2, [r3, #8]
 8010dde:	4b33      	ldr	r3, [pc, #204]	; (8010eac <tcp_input+0x2b8>)
 8010de0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010de2:	4b31      	ldr	r3, [pc, #196]	; (8010ea8 <tcp_input+0x2b4>)
 8010de4:	781b      	ldrb	r3, [r3, #0]
 8010de6:	f003 0303 	and.w	r3, r3, #3
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d00c      	beq.n	8010e08 <tcp_input+0x214>
    tcplen++;
 8010dee:	4b2f      	ldr	r3, [pc, #188]	; (8010eac <tcp_input+0x2b8>)
 8010df0:	881b      	ldrh	r3, [r3, #0]
 8010df2:	3301      	adds	r3, #1
 8010df4:	b29a      	uxth	r2, r3
 8010df6:	4b2d      	ldr	r3, [pc, #180]	; (8010eac <tcp_input+0x2b8>)
 8010df8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	891a      	ldrh	r2, [r3, #8]
 8010dfe:	4b2b      	ldr	r3, [pc, #172]	; (8010eac <tcp_input+0x2b8>)
 8010e00:	881b      	ldrh	r3, [r3, #0]
 8010e02:	429a      	cmp	r2, r3
 8010e04:	f200 82e6 	bhi.w	80113d4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e0c:	4b28      	ldr	r3, [pc, #160]	; (8010eb0 <tcp_input+0x2bc>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	61fb      	str	r3, [r7, #28]
 8010e12:	e09d      	b.n	8010f50 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010e14:	69fb      	ldr	r3, [r7, #28]
 8010e16:	7d1b      	ldrb	r3, [r3, #20]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d105      	bne.n	8010e28 <tcp_input+0x234>
 8010e1c:	4b15      	ldr	r3, [pc, #84]	; (8010e74 <tcp_input+0x280>)
 8010e1e:	22fb      	movs	r2, #251	; 0xfb
 8010e20:	4924      	ldr	r1, [pc, #144]	; (8010eb4 <tcp_input+0x2c0>)
 8010e22:	4816      	ldr	r0, [pc, #88]	; (8010e7c <tcp_input+0x288>)
 8010e24:	f00c fca4 	bl	801d770 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010e28:	69fb      	ldr	r3, [r7, #28]
 8010e2a:	7d1b      	ldrb	r3, [r3, #20]
 8010e2c:	2b0a      	cmp	r3, #10
 8010e2e:	d105      	bne.n	8010e3c <tcp_input+0x248>
 8010e30:	4b10      	ldr	r3, [pc, #64]	; (8010e74 <tcp_input+0x280>)
 8010e32:	22fc      	movs	r2, #252	; 0xfc
 8010e34:	4920      	ldr	r1, [pc, #128]	; (8010eb8 <tcp_input+0x2c4>)
 8010e36:	4811      	ldr	r0, [pc, #68]	; (8010e7c <tcp_input+0x288>)
 8010e38:	f00c fc9a 	bl	801d770 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010e3c:	69fb      	ldr	r3, [r7, #28]
 8010e3e:	7d1b      	ldrb	r3, [r3, #20]
 8010e40:	2b01      	cmp	r3, #1
 8010e42:	d105      	bne.n	8010e50 <tcp_input+0x25c>
 8010e44:	4b0b      	ldr	r3, [pc, #44]	; (8010e74 <tcp_input+0x280>)
 8010e46:	22fd      	movs	r2, #253	; 0xfd
 8010e48:	491c      	ldr	r1, [pc, #112]	; (8010ebc <tcp_input+0x2c8>)
 8010e4a:	480c      	ldr	r0, [pc, #48]	; (8010e7c <tcp_input+0x288>)
 8010e4c:	f00c fc90 	bl	801d770 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e50:	69fb      	ldr	r3, [r7, #28]
 8010e52:	7a1b      	ldrb	r3, [r3, #8]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d033      	beq.n	8010ec0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	7a1a      	ldrb	r2, [r3, #8]
 8010e5c:	4b09      	ldr	r3, [pc, #36]	; (8010e84 <tcp_input+0x290>)
 8010e5e:	685b      	ldr	r3, [r3, #4]
 8010e60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e64:	3301      	adds	r3, #1
 8010e66:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	d029      	beq.n	8010ec0 <tcp_input+0x2cc>
      prev = pcb;
 8010e6c:	69fb      	ldr	r3, [r7, #28]
 8010e6e:	61bb      	str	r3, [r7, #24]
      continue;
 8010e70:	e06b      	b.n	8010f4a <tcp_input+0x356>
 8010e72:	bf00      	nop
 8010e74:	08020718 	.word	0x08020718
 8010e78:	0802074c 	.word	0x0802074c
 8010e7c:	08020764 	.word	0x08020764
 8010e80:	200113e4 	.word	0x200113e4
 8010e84:	2000a2c0 	.word	0x2000a2c0
 8010e88:	200113e8 	.word	0x200113e8
 8010e8c:	200113ec 	.word	0x200113ec
 8010e90:	200113ea 	.word	0x200113ea
 8010e94:	0802078c 	.word	0x0802078c
 8010e98:	0802079c 	.word	0x0802079c
 8010e9c:	080207a8 	.word	0x080207a8
 8010ea0:	200113f4 	.word	0x200113f4
 8010ea4:	200113f8 	.word	0x200113f8
 8010ea8:	20011400 	.word	0x20011400
 8010eac:	200113fe 	.word	0x200113fe
 8010eb0:	200113c8 	.word	0x200113c8
 8010eb4:	080207c8 	.word	0x080207c8
 8010eb8:	080207f0 	.word	0x080207f0
 8010ebc:	0802081c 	.word	0x0802081c
    }

    if (pcb->remote_port == tcphdr->src &&
 8010ec0:	69fb      	ldr	r3, [r7, #28]
 8010ec2:	8b1a      	ldrh	r2, [r3, #24]
 8010ec4:	4b72      	ldr	r3, [pc, #456]	; (8011090 <tcp_input+0x49c>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	881b      	ldrh	r3, [r3, #0]
 8010eca:	b29b      	uxth	r3, r3
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	d13a      	bne.n	8010f46 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010ed0:	69fb      	ldr	r3, [r7, #28]
 8010ed2:	8ada      	ldrh	r2, [r3, #22]
 8010ed4:	4b6e      	ldr	r3, [pc, #440]	; (8011090 <tcp_input+0x49c>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	885b      	ldrh	r3, [r3, #2]
 8010eda:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d132      	bne.n	8010f46 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	685a      	ldr	r2, [r3, #4]
 8010ee4:	4b6b      	ldr	r3, [pc, #428]	; (8011094 <tcp_input+0x4a0>)
 8010ee6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	d12c      	bne.n	8010f46 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010eec:	69fb      	ldr	r3, [r7, #28]
 8010eee:	681a      	ldr	r2, [r3, #0]
 8010ef0:	4b68      	ldr	r3, [pc, #416]	; (8011094 <tcp_input+0x4a0>)
 8010ef2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	d126      	bne.n	8010f46 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010ef8:	69fb      	ldr	r3, [r7, #28]
 8010efa:	68db      	ldr	r3, [r3, #12]
 8010efc:	69fa      	ldr	r2, [r7, #28]
 8010efe:	429a      	cmp	r2, r3
 8010f00:	d106      	bne.n	8010f10 <tcp_input+0x31c>
 8010f02:	4b65      	ldr	r3, [pc, #404]	; (8011098 <tcp_input+0x4a4>)
 8010f04:	f240 120d 	movw	r2, #269	; 0x10d
 8010f08:	4964      	ldr	r1, [pc, #400]	; (801109c <tcp_input+0x4a8>)
 8010f0a:	4865      	ldr	r0, [pc, #404]	; (80110a0 <tcp_input+0x4ac>)
 8010f0c:	f00c fc30 	bl	801d770 <iprintf>
      if (prev != NULL) {
 8010f10:	69bb      	ldr	r3, [r7, #24]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d00a      	beq.n	8010f2c <tcp_input+0x338>
        prev->next = pcb->next;
 8010f16:	69fb      	ldr	r3, [r7, #28]
 8010f18:	68da      	ldr	r2, [r3, #12]
 8010f1a:	69bb      	ldr	r3, [r7, #24]
 8010f1c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010f1e:	4b61      	ldr	r3, [pc, #388]	; (80110a4 <tcp_input+0x4b0>)
 8010f20:	681a      	ldr	r2, [r3, #0]
 8010f22:	69fb      	ldr	r3, [r7, #28]
 8010f24:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010f26:	4a5f      	ldr	r2, [pc, #380]	; (80110a4 <tcp_input+0x4b0>)
 8010f28:	69fb      	ldr	r3, [r7, #28]
 8010f2a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010f2c:	69fb      	ldr	r3, [r7, #28]
 8010f2e:	68db      	ldr	r3, [r3, #12]
 8010f30:	69fa      	ldr	r2, [r7, #28]
 8010f32:	429a      	cmp	r2, r3
 8010f34:	d111      	bne.n	8010f5a <tcp_input+0x366>
 8010f36:	4b58      	ldr	r3, [pc, #352]	; (8011098 <tcp_input+0x4a4>)
 8010f38:	f240 1215 	movw	r2, #277	; 0x115
 8010f3c:	495a      	ldr	r1, [pc, #360]	; (80110a8 <tcp_input+0x4b4>)
 8010f3e:	4858      	ldr	r0, [pc, #352]	; (80110a0 <tcp_input+0x4ac>)
 8010f40:	f00c fc16 	bl	801d770 <iprintf>
      break;
 8010f44:	e009      	b.n	8010f5a <tcp_input+0x366>
    }
    prev = pcb;
 8010f46:	69fb      	ldr	r3, [r7, #28]
 8010f48:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f4a:	69fb      	ldr	r3, [r7, #28]
 8010f4c:	68db      	ldr	r3, [r3, #12]
 8010f4e:	61fb      	str	r3, [r7, #28]
 8010f50:	69fb      	ldr	r3, [r7, #28]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	f47f af5e 	bne.w	8010e14 <tcp_input+0x220>
 8010f58:	e000      	b.n	8010f5c <tcp_input+0x368>
      break;
 8010f5a:	bf00      	nop
  }

  if (pcb == NULL) {
 8010f5c:	69fb      	ldr	r3, [r7, #28]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	f040 80aa 	bne.w	80110b8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f64:	4b51      	ldr	r3, [pc, #324]	; (80110ac <tcp_input+0x4b8>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	61fb      	str	r3, [r7, #28]
 8010f6a:	e03f      	b.n	8010fec <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010f6c:	69fb      	ldr	r3, [r7, #28]
 8010f6e:	7d1b      	ldrb	r3, [r3, #20]
 8010f70:	2b0a      	cmp	r3, #10
 8010f72:	d006      	beq.n	8010f82 <tcp_input+0x38e>
 8010f74:	4b48      	ldr	r3, [pc, #288]	; (8011098 <tcp_input+0x4a4>)
 8010f76:	f240 121f 	movw	r2, #287	; 0x11f
 8010f7a:	494d      	ldr	r1, [pc, #308]	; (80110b0 <tcp_input+0x4bc>)
 8010f7c:	4848      	ldr	r0, [pc, #288]	; (80110a0 <tcp_input+0x4ac>)
 8010f7e:	f00c fbf7 	bl	801d770 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010f82:	69fb      	ldr	r3, [r7, #28]
 8010f84:	7a1b      	ldrb	r3, [r3, #8]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d009      	beq.n	8010f9e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010f8a:	69fb      	ldr	r3, [r7, #28]
 8010f8c:	7a1a      	ldrb	r2, [r3, #8]
 8010f8e:	4b41      	ldr	r3, [pc, #260]	; (8011094 <tcp_input+0x4a0>)
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f96:	3301      	adds	r3, #1
 8010f98:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	d122      	bne.n	8010fe4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010f9e:	69fb      	ldr	r3, [r7, #28]
 8010fa0:	8b1a      	ldrh	r2, [r3, #24]
 8010fa2:	4b3b      	ldr	r3, [pc, #236]	; (8011090 <tcp_input+0x49c>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	881b      	ldrh	r3, [r3, #0]
 8010fa8:	b29b      	uxth	r3, r3
 8010faa:	429a      	cmp	r2, r3
 8010fac:	d11b      	bne.n	8010fe6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010fae:	69fb      	ldr	r3, [r7, #28]
 8010fb0:	8ada      	ldrh	r2, [r3, #22]
 8010fb2:	4b37      	ldr	r3, [pc, #220]	; (8011090 <tcp_input+0x49c>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	885b      	ldrh	r3, [r3, #2]
 8010fb8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	d113      	bne.n	8010fe6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	685a      	ldr	r2, [r3, #4]
 8010fc2:	4b34      	ldr	r3, [pc, #208]	; (8011094 <tcp_input+0x4a0>)
 8010fc4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010fc6:	429a      	cmp	r2, r3
 8010fc8:	d10d      	bne.n	8010fe6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010fca:	69fb      	ldr	r3, [r7, #28]
 8010fcc:	681a      	ldr	r2, [r3, #0]
 8010fce:	4b31      	ldr	r3, [pc, #196]	; (8011094 <tcp_input+0x4a0>)
 8010fd0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	d107      	bne.n	8010fe6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010fd6:	69f8      	ldr	r0, [r7, #28]
 8010fd8:	f000 fb56 	bl	8011688 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f7fd fd4d 	bl	800ea7c <pbuf_free>
        return;
 8010fe2:	e1fd      	b.n	80113e0 <tcp_input+0x7ec>
        continue;
 8010fe4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010fe6:	69fb      	ldr	r3, [r7, #28]
 8010fe8:	68db      	ldr	r3, [r3, #12]
 8010fea:	61fb      	str	r3, [r7, #28]
 8010fec:	69fb      	ldr	r3, [r7, #28]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d1bc      	bne.n	8010f6c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010ff6:	4b2f      	ldr	r3, [pc, #188]	; (80110b4 <tcp_input+0x4c0>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	617b      	str	r3, [r7, #20]
 8010ffc:	e02a      	b.n	8011054 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010ffe:	697b      	ldr	r3, [r7, #20]
 8011000:	7a1b      	ldrb	r3, [r3, #8]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d00c      	beq.n	8011020 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011006:	697b      	ldr	r3, [r7, #20]
 8011008:	7a1a      	ldrb	r2, [r3, #8]
 801100a:	4b22      	ldr	r3, [pc, #136]	; (8011094 <tcp_input+0x4a0>)
 801100c:	685b      	ldr	r3, [r3, #4]
 801100e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011012:	3301      	adds	r3, #1
 8011014:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011016:	429a      	cmp	r2, r3
 8011018:	d002      	beq.n	8011020 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801101a:	697b      	ldr	r3, [r7, #20]
 801101c:	61bb      	str	r3, [r7, #24]
        continue;
 801101e:	e016      	b.n	801104e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011020:	697b      	ldr	r3, [r7, #20]
 8011022:	8ada      	ldrh	r2, [r3, #22]
 8011024:	4b1a      	ldr	r3, [pc, #104]	; (8011090 <tcp_input+0x49c>)
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	885b      	ldrh	r3, [r3, #2]
 801102a:	b29b      	uxth	r3, r3
 801102c:	429a      	cmp	r2, r3
 801102e:	d10c      	bne.n	801104a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	681a      	ldr	r2, [r3, #0]
 8011034:	4b17      	ldr	r3, [pc, #92]	; (8011094 <tcp_input+0x4a0>)
 8011036:	695b      	ldr	r3, [r3, #20]
 8011038:	429a      	cmp	r2, r3
 801103a:	d00f      	beq.n	801105c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801103c:	697b      	ldr	r3, [r7, #20]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d00d      	beq.n	801105e <tcp_input+0x46a>
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d009      	beq.n	801105e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801104e:	697b      	ldr	r3, [r7, #20]
 8011050:	68db      	ldr	r3, [r3, #12]
 8011052:	617b      	str	r3, [r7, #20]
 8011054:	697b      	ldr	r3, [r7, #20]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d1d1      	bne.n	8010ffe <tcp_input+0x40a>
 801105a:	e000      	b.n	801105e <tcp_input+0x46a>
            break;
 801105c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d029      	beq.n	80110b8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011064:	69bb      	ldr	r3, [r7, #24]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d00a      	beq.n	8011080 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801106a:	697b      	ldr	r3, [r7, #20]
 801106c:	68da      	ldr	r2, [r3, #12]
 801106e:	69bb      	ldr	r3, [r7, #24]
 8011070:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011072:	4b10      	ldr	r3, [pc, #64]	; (80110b4 <tcp_input+0x4c0>)
 8011074:	681a      	ldr	r2, [r3, #0]
 8011076:	697b      	ldr	r3, [r7, #20]
 8011078:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801107a:	4a0e      	ldr	r2, [pc, #56]	; (80110b4 <tcp_input+0x4c0>)
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011080:	6978      	ldr	r0, [r7, #20]
 8011082:	f000 fa03 	bl	801148c <tcp_listen_input>
      }
      pbuf_free(p);
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f7fd fcf8 	bl	800ea7c <pbuf_free>
      return;
 801108c:	e1a8      	b.n	80113e0 <tcp_input+0x7ec>
 801108e:	bf00      	nop
 8011090:	200113e4 	.word	0x200113e4
 8011094:	2000a2c0 	.word	0x2000a2c0
 8011098:	08020718 	.word	0x08020718
 801109c:	08020844 	.word	0x08020844
 80110a0:	08020764 	.word	0x08020764
 80110a4:	200113c8 	.word	0x200113c8
 80110a8:	08020870 	.word	0x08020870
 80110ac:	200113cc 	.word	0x200113cc
 80110b0:	0802089c 	.word	0x0802089c
 80110b4:	200113c4 	.word	0x200113c4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80110b8:	69fb      	ldr	r3, [r7, #28]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	f000 8158 	beq.w	8011370 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80110c0:	4b95      	ldr	r3, [pc, #596]	; (8011318 <tcp_input+0x724>)
 80110c2:	2200      	movs	r2, #0
 80110c4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	891a      	ldrh	r2, [r3, #8]
 80110ca:	4b93      	ldr	r3, [pc, #588]	; (8011318 <tcp_input+0x724>)
 80110cc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80110ce:	4a92      	ldr	r2, [pc, #584]	; (8011318 <tcp_input+0x724>)
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80110d4:	4b91      	ldr	r3, [pc, #580]	; (801131c <tcp_input+0x728>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	4a8f      	ldr	r2, [pc, #572]	; (8011318 <tcp_input+0x724>)
 80110da:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80110dc:	4b90      	ldr	r3, [pc, #576]	; (8011320 <tcp_input+0x72c>)
 80110de:	2200      	movs	r2, #0
 80110e0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80110e2:	4b90      	ldr	r3, [pc, #576]	; (8011324 <tcp_input+0x730>)
 80110e4:	2200      	movs	r2, #0
 80110e6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80110e8:	4b8f      	ldr	r3, [pc, #572]	; (8011328 <tcp_input+0x734>)
 80110ea:	2200      	movs	r2, #0
 80110ec:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80110ee:	4b8f      	ldr	r3, [pc, #572]	; (801132c <tcp_input+0x738>)
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	f003 0308 	and.w	r3, r3, #8
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d006      	beq.n	8011108 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	7b5b      	ldrb	r3, [r3, #13]
 80110fe:	f043 0301 	orr.w	r3, r3, #1
 8011102:	b2da      	uxtb	r2, r3
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011108:	69fb      	ldr	r3, [r7, #28]
 801110a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801110c:	2b00      	cmp	r3, #0
 801110e:	d017      	beq.n	8011140 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011110:	69f8      	ldr	r0, [r7, #28]
 8011112:	f7ff f85b 	bl	80101cc <tcp_process_refused_data>
 8011116:	4603      	mov	r3, r0
 8011118:	f113 0f0d 	cmn.w	r3, #13
 801111c:	d007      	beq.n	801112e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801111e:	69fb      	ldr	r3, [r7, #28]
 8011120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011122:	2b00      	cmp	r3, #0
 8011124:	d00c      	beq.n	8011140 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011126:	4b82      	ldr	r3, [pc, #520]	; (8011330 <tcp_input+0x73c>)
 8011128:	881b      	ldrh	r3, [r3, #0]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d008      	beq.n	8011140 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801112e:	69fb      	ldr	r3, [r7, #28]
 8011130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011132:	2b00      	cmp	r3, #0
 8011134:	f040 80e3 	bne.w	80112fe <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011138:	69f8      	ldr	r0, [r7, #28]
 801113a:	f003 fe05 	bl	8014d48 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801113e:	e0de      	b.n	80112fe <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8011140:	4a7c      	ldr	r2, [pc, #496]	; (8011334 <tcp_input+0x740>)
 8011142:	69fb      	ldr	r3, [r7, #28]
 8011144:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011146:	69f8      	ldr	r0, [r7, #28]
 8011148:	f000 fb18 	bl	801177c <tcp_process>
 801114c:	4603      	mov	r3, r0
 801114e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011150:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011154:	f113 0f0d 	cmn.w	r3, #13
 8011158:	f000 80d3 	beq.w	8011302 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801115c:	4b71      	ldr	r3, [pc, #452]	; (8011324 <tcp_input+0x730>)
 801115e:	781b      	ldrb	r3, [r3, #0]
 8011160:	f003 0308 	and.w	r3, r3, #8
 8011164:	2b00      	cmp	r3, #0
 8011166:	d015      	beq.n	8011194 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011168:	69fb      	ldr	r3, [r7, #28]
 801116a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801116e:	2b00      	cmp	r3, #0
 8011170:	d008      	beq.n	8011184 <tcp_input+0x590>
 8011172:	69fb      	ldr	r3, [r7, #28]
 8011174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011178:	69fa      	ldr	r2, [r7, #28]
 801117a:	6912      	ldr	r2, [r2, #16]
 801117c:	f06f 010d 	mvn.w	r1, #13
 8011180:	4610      	mov	r0, r2
 8011182:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011184:	69f9      	ldr	r1, [r7, #28]
 8011186:	486c      	ldr	r0, [pc, #432]	; (8011338 <tcp_input+0x744>)
 8011188:	f7ff fbbc 	bl	8010904 <tcp_pcb_remove>
        tcp_free(pcb);
 801118c:	69f8      	ldr	r0, [r7, #28]
 801118e:	f7fd ff21 	bl	800efd4 <tcp_free>
 8011192:	e0da      	b.n	801134a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8011194:	2300      	movs	r3, #0
 8011196:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011198:	4b63      	ldr	r3, [pc, #396]	; (8011328 <tcp_input+0x734>)
 801119a:	881b      	ldrh	r3, [r3, #0]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d01d      	beq.n	80111dc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80111a0:	4b61      	ldr	r3, [pc, #388]	; (8011328 <tcp_input+0x734>)
 80111a2:	881b      	ldrh	r3, [r3, #0]
 80111a4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80111a6:	69fb      	ldr	r3, [r7, #28]
 80111a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d00a      	beq.n	80111c6 <tcp_input+0x5d2>
 80111b0:	69fb      	ldr	r3, [r7, #28]
 80111b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80111b6:	69fa      	ldr	r2, [r7, #28]
 80111b8:	6910      	ldr	r0, [r2, #16]
 80111ba:	89fa      	ldrh	r2, [r7, #14]
 80111bc:	69f9      	ldr	r1, [r7, #28]
 80111be:	4798      	blx	r3
 80111c0:	4603      	mov	r3, r0
 80111c2:	74fb      	strb	r3, [r7, #19]
 80111c4:	e001      	b.n	80111ca <tcp_input+0x5d6>
 80111c6:	2300      	movs	r3, #0
 80111c8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80111ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80111ce:	f113 0f0d 	cmn.w	r3, #13
 80111d2:	f000 8098 	beq.w	8011306 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80111d6:	4b54      	ldr	r3, [pc, #336]	; (8011328 <tcp_input+0x734>)
 80111d8:	2200      	movs	r2, #0
 80111da:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80111dc:	69f8      	ldr	r0, [r7, #28]
 80111de:	f000 f915 	bl	801140c <tcp_input_delayed_close>
 80111e2:	4603      	mov	r3, r0
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	f040 8090 	bne.w	801130a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80111ea:	4b4d      	ldr	r3, [pc, #308]	; (8011320 <tcp_input+0x72c>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d041      	beq.n	8011276 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80111f2:	69fb      	ldr	r3, [r7, #28]
 80111f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d006      	beq.n	8011208 <tcp_input+0x614>
 80111fa:	4b50      	ldr	r3, [pc, #320]	; (801133c <tcp_input+0x748>)
 80111fc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011200:	494f      	ldr	r1, [pc, #316]	; (8011340 <tcp_input+0x74c>)
 8011202:	4850      	ldr	r0, [pc, #320]	; (8011344 <tcp_input+0x750>)
 8011204:	f00c fab4 	bl	801d770 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011208:	69fb      	ldr	r3, [r7, #28]
 801120a:	8b5b      	ldrh	r3, [r3, #26]
 801120c:	f003 0310 	and.w	r3, r3, #16
 8011210:	2b00      	cmp	r3, #0
 8011212:	d008      	beq.n	8011226 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011214:	4b42      	ldr	r3, [pc, #264]	; (8011320 <tcp_input+0x72c>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	4618      	mov	r0, r3
 801121a:	f7fd fc2f 	bl	800ea7c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801121e:	69f8      	ldr	r0, [r7, #28]
 8011220:	f7fe fa1c 	bl	800f65c <tcp_abort>
            goto aborted;
 8011224:	e091      	b.n	801134a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011226:	69fb      	ldr	r3, [r7, #28]
 8011228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801122c:	2b00      	cmp	r3, #0
 801122e:	d00c      	beq.n	801124a <tcp_input+0x656>
 8011230:	69fb      	ldr	r3, [r7, #28]
 8011232:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011236:	69fb      	ldr	r3, [r7, #28]
 8011238:	6918      	ldr	r0, [r3, #16]
 801123a:	4b39      	ldr	r3, [pc, #228]	; (8011320 <tcp_input+0x72c>)
 801123c:	681a      	ldr	r2, [r3, #0]
 801123e:	2300      	movs	r3, #0
 8011240:	69f9      	ldr	r1, [r7, #28]
 8011242:	47a0      	blx	r4
 8011244:	4603      	mov	r3, r0
 8011246:	74fb      	strb	r3, [r7, #19]
 8011248:	e008      	b.n	801125c <tcp_input+0x668>
 801124a:	4b35      	ldr	r3, [pc, #212]	; (8011320 <tcp_input+0x72c>)
 801124c:	681a      	ldr	r2, [r3, #0]
 801124e:	2300      	movs	r3, #0
 8011250:	69f9      	ldr	r1, [r7, #28]
 8011252:	2000      	movs	r0, #0
 8011254:	f7ff f890 	bl	8010378 <tcp_recv_null>
 8011258:	4603      	mov	r3, r0
 801125a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801125c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011260:	f113 0f0d 	cmn.w	r3, #13
 8011264:	d053      	beq.n	801130e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011266:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d003      	beq.n	8011276 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801126e:	4b2c      	ldr	r3, [pc, #176]	; (8011320 <tcp_input+0x72c>)
 8011270:	681a      	ldr	r2, [r3, #0]
 8011272:	69fb      	ldr	r3, [r7, #28]
 8011274:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011276:	4b2b      	ldr	r3, [pc, #172]	; (8011324 <tcp_input+0x730>)
 8011278:	781b      	ldrb	r3, [r3, #0]
 801127a:	f003 0320 	and.w	r3, r3, #32
 801127e:	2b00      	cmp	r3, #0
 8011280:	d030      	beq.n	80112e4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8011282:	69fb      	ldr	r3, [r7, #28]
 8011284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011286:	2b00      	cmp	r3, #0
 8011288:	d009      	beq.n	801129e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801128a:	69fb      	ldr	r3, [r7, #28]
 801128c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801128e:	7b5a      	ldrb	r2, [r3, #13]
 8011290:	69fb      	ldr	r3, [r7, #28]
 8011292:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011294:	f042 0220 	orr.w	r2, r2, #32
 8011298:	b2d2      	uxtb	r2, r2
 801129a:	735a      	strb	r2, [r3, #13]
 801129c:	e022      	b.n	80112e4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801129e:	69fb      	ldr	r3, [r7, #28]
 80112a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80112a2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80112a6:	d005      	beq.n	80112b4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80112a8:	69fb      	ldr	r3, [r7, #28]
 80112aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80112ac:	3301      	adds	r3, #1
 80112ae:	b29a      	uxth	r2, r3
 80112b0:	69fb      	ldr	r3, [r7, #28]
 80112b2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80112b4:	69fb      	ldr	r3, [r7, #28]
 80112b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d00b      	beq.n	80112d6 <tcp_input+0x6e2>
 80112be:	69fb      	ldr	r3, [r7, #28]
 80112c0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80112c4:	69fb      	ldr	r3, [r7, #28]
 80112c6:	6918      	ldr	r0, [r3, #16]
 80112c8:	2300      	movs	r3, #0
 80112ca:	2200      	movs	r2, #0
 80112cc:	69f9      	ldr	r1, [r7, #28]
 80112ce:	47a0      	blx	r4
 80112d0:	4603      	mov	r3, r0
 80112d2:	74fb      	strb	r3, [r7, #19]
 80112d4:	e001      	b.n	80112da <tcp_input+0x6e6>
 80112d6:	2300      	movs	r3, #0
 80112d8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80112da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80112de:	f113 0f0d 	cmn.w	r3, #13
 80112e2:	d016      	beq.n	8011312 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80112e4:	4b13      	ldr	r3, [pc, #76]	; (8011334 <tcp_input+0x740>)
 80112e6:	2200      	movs	r2, #0
 80112e8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80112ea:	69f8      	ldr	r0, [r7, #28]
 80112ec:	f000 f88e 	bl	801140c <tcp_input_delayed_close>
 80112f0:	4603      	mov	r3, r0
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d128      	bne.n	8011348 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80112f6:	69f8      	ldr	r0, [r7, #28]
 80112f8:	f002 ff20 	bl	801413c <tcp_output>
 80112fc:	e025      	b.n	801134a <tcp_input+0x756>
        goto aborted;
 80112fe:	bf00      	nop
 8011300:	e023      	b.n	801134a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011302:	bf00      	nop
 8011304:	e021      	b.n	801134a <tcp_input+0x756>
              goto aborted;
 8011306:	bf00      	nop
 8011308:	e01f      	b.n	801134a <tcp_input+0x756>
          goto aborted;
 801130a:	bf00      	nop
 801130c:	e01d      	b.n	801134a <tcp_input+0x756>
            goto aborted;
 801130e:	bf00      	nop
 8011310:	e01b      	b.n	801134a <tcp_input+0x756>
              goto aborted;
 8011312:	bf00      	nop
 8011314:	e019      	b.n	801134a <tcp_input+0x756>
 8011316:	bf00      	nop
 8011318:	200113d4 	.word	0x200113d4
 801131c:	200113e4 	.word	0x200113e4
 8011320:	20011404 	.word	0x20011404
 8011324:	20011401 	.word	0x20011401
 8011328:	200113fc 	.word	0x200113fc
 801132c:	20011400 	.word	0x20011400
 8011330:	200113fe 	.word	0x200113fe
 8011334:	20011408 	.word	0x20011408
 8011338:	200113c8 	.word	0x200113c8
 801133c:	08020718 	.word	0x08020718
 8011340:	080208cc 	.word	0x080208cc
 8011344:	08020764 	.word	0x08020764
          goto aborted;
 8011348:	bf00      	nop
    tcp_input_pcb = NULL;
 801134a:	4b27      	ldr	r3, [pc, #156]	; (80113e8 <tcp_input+0x7f4>)
 801134c:	2200      	movs	r2, #0
 801134e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011350:	4b26      	ldr	r3, [pc, #152]	; (80113ec <tcp_input+0x7f8>)
 8011352:	2200      	movs	r2, #0
 8011354:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011356:	4b26      	ldr	r3, [pc, #152]	; (80113f0 <tcp_input+0x7fc>)
 8011358:	685b      	ldr	r3, [r3, #4]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d03f      	beq.n	80113de <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801135e:	4b24      	ldr	r3, [pc, #144]	; (80113f0 <tcp_input+0x7fc>)
 8011360:	685b      	ldr	r3, [r3, #4]
 8011362:	4618      	mov	r0, r3
 8011364:	f7fd fb8a 	bl	800ea7c <pbuf_free>
      inseg.p = NULL;
 8011368:	4b21      	ldr	r3, [pc, #132]	; (80113f0 <tcp_input+0x7fc>)
 801136a:	2200      	movs	r2, #0
 801136c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801136e:	e036      	b.n	80113de <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011370:	4b20      	ldr	r3, [pc, #128]	; (80113f4 <tcp_input+0x800>)
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	899b      	ldrh	r3, [r3, #12]
 8011376:	b29b      	uxth	r3, r3
 8011378:	4618      	mov	r0, r3
 801137a:	f7fb ff7d 	bl	800d278 <lwip_htons>
 801137e:	4603      	mov	r3, r0
 8011380:	b2db      	uxtb	r3, r3
 8011382:	f003 0304 	and.w	r3, r3, #4
 8011386:	2b00      	cmp	r3, #0
 8011388:	d118      	bne.n	80113bc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801138a:	4b1b      	ldr	r3, [pc, #108]	; (80113f8 <tcp_input+0x804>)
 801138c:	6819      	ldr	r1, [r3, #0]
 801138e:	4b1b      	ldr	r3, [pc, #108]	; (80113fc <tcp_input+0x808>)
 8011390:	881b      	ldrh	r3, [r3, #0]
 8011392:	461a      	mov	r2, r3
 8011394:	4b1a      	ldr	r3, [pc, #104]	; (8011400 <tcp_input+0x80c>)
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801139a:	4b16      	ldr	r3, [pc, #88]	; (80113f4 <tcp_input+0x800>)
 801139c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801139e:	885b      	ldrh	r3, [r3, #2]
 80113a0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80113a2:	4a14      	ldr	r2, [pc, #80]	; (80113f4 <tcp_input+0x800>)
 80113a4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80113a6:	8812      	ldrh	r2, [r2, #0]
 80113a8:	b292      	uxth	r2, r2
 80113aa:	9202      	str	r2, [sp, #8]
 80113ac:	9301      	str	r3, [sp, #4]
 80113ae:	4b15      	ldr	r3, [pc, #84]	; (8011404 <tcp_input+0x810>)
 80113b0:	9300      	str	r3, [sp, #0]
 80113b2:	4b15      	ldr	r3, [pc, #84]	; (8011408 <tcp_input+0x814>)
 80113b4:	4602      	mov	r2, r0
 80113b6:	2000      	movs	r0, #0
 80113b8:	f003 fc74 	bl	8014ca4 <tcp_rst>
    pbuf_free(p);
 80113bc:	6878      	ldr	r0, [r7, #4]
 80113be:	f7fd fb5d 	bl	800ea7c <pbuf_free>
  return;
 80113c2:	e00c      	b.n	80113de <tcp_input+0x7ea>
    goto dropped;
 80113c4:	bf00      	nop
 80113c6:	e006      	b.n	80113d6 <tcp_input+0x7e2>
    goto dropped;
 80113c8:	bf00      	nop
 80113ca:	e004      	b.n	80113d6 <tcp_input+0x7e2>
    goto dropped;
 80113cc:	bf00      	nop
 80113ce:	e002      	b.n	80113d6 <tcp_input+0x7e2>
      goto dropped;
 80113d0:	bf00      	nop
 80113d2:	e000      	b.n	80113d6 <tcp_input+0x7e2>
      goto dropped;
 80113d4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f7fd fb50 	bl	800ea7c <pbuf_free>
 80113dc:	e000      	b.n	80113e0 <tcp_input+0x7ec>
  return;
 80113de:	bf00      	nop
}
 80113e0:	3724      	adds	r7, #36	; 0x24
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd90      	pop	{r4, r7, pc}
 80113e6:	bf00      	nop
 80113e8:	20011408 	.word	0x20011408
 80113ec:	20011404 	.word	0x20011404
 80113f0:	200113d4 	.word	0x200113d4
 80113f4:	200113e4 	.word	0x200113e4
 80113f8:	200113f8 	.word	0x200113f8
 80113fc:	200113fe 	.word	0x200113fe
 8011400:	200113f4 	.word	0x200113f4
 8011404:	2000a2d0 	.word	0x2000a2d0
 8011408:	2000a2d4 	.word	0x2000a2d4

0801140c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d106      	bne.n	8011428 <tcp_input_delayed_close+0x1c>
 801141a:	4b17      	ldr	r3, [pc, #92]	; (8011478 <tcp_input_delayed_close+0x6c>)
 801141c:	f240 225a 	movw	r2, #602	; 0x25a
 8011420:	4916      	ldr	r1, [pc, #88]	; (801147c <tcp_input_delayed_close+0x70>)
 8011422:	4817      	ldr	r0, [pc, #92]	; (8011480 <tcp_input_delayed_close+0x74>)
 8011424:	f00c f9a4 	bl	801d770 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011428:	4b16      	ldr	r3, [pc, #88]	; (8011484 <tcp_input_delayed_close+0x78>)
 801142a:	781b      	ldrb	r3, [r3, #0]
 801142c:	f003 0310 	and.w	r3, r3, #16
 8011430:	2b00      	cmp	r3, #0
 8011432:	d01c      	beq.n	801146e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	8b5b      	ldrh	r3, [r3, #26]
 8011438:	f003 0310 	and.w	r3, r3, #16
 801143c:	2b00      	cmp	r3, #0
 801143e:	d10d      	bne.n	801145c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011446:	2b00      	cmp	r3, #0
 8011448:	d008      	beq.n	801145c <tcp_input_delayed_close+0x50>
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011450:	687a      	ldr	r2, [r7, #4]
 8011452:	6912      	ldr	r2, [r2, #16]
 8011454:	f06f 010e 	mvn.w	r1, #14
 8011458:	4610      	mov	r0, r2
 801145a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801145c:	6879      	ldr	r1, [r7, #4]
 801145e:	480a      	ldr	r0, [pc, #40]	; (8011488 <tcp_input_delayed_close+0x7c>)
 8011460:	f7ff fa50 	bl	8010904 <tcp_pcb_remove>
    tcp_free(pcb);
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f7fd fdb5 	bl	800efd4 <tcp_free>
    return 1;
 801146a:	2301      	movs	r3, #1
 801146c:	e000      	b.n	8011470 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801146e:	2300      	movs	r3, #0
}
 8011470:	4618      	mov	r0, r3
 8011472:	3708      	adds	r7, #8
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}
 8011478:	08020718 	.word	0x08020718
 801147c:	080208e8 	.word	0x080208e8
 8011480:	08020764 	.word	0x08020764
 8011484:	20011401 	.word	0x20011401
 8011488:	200113c8 	.word	0x200113c8

0801148c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801148c:	b590      	push	{r4, r7, lr}
 801148e:	b08b      	sub	sp, #44	; 0x2c
 8011490:	af04      	add	r7, sp, #16
 8011492:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011494:	4b6f      	ldr	r3, [pc, #444]	; (8011654 <tcp_listen_input+0x1c8>)
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	f003 0304 	and.w	r3, r3, #4
 801149c:	2b00      	cmp	r3, #0
 801149e:	f040 80d2 	bne.w	8011646 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d106      	bne.n	80114b6 <tcp_listen_input+0x2a>
 80114a8:	4b6b      	ldr	r3, [pc, #428]	; (8011658 <tcp_listen_input+0x1cc>)
 80114aa:	f240 2281 	movw	r2, #641	; 0x281
 80114ae:	496b      	ldr	r1, [pc, #428]	; (801165c <tcp_listen_input+0x1d0>)
 80114b0:	486b      	ldr	r0, [pc, #428]	; (8011660 <tcp_listen_input+0x1d4>)
 80114b2:	f00c f95d 	bl	801d770 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80114b6:	4b67      	ldr	r3, [pc, #412]	; (8011654 <tcp_listen_input+0x1c8>)
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	f003 0310 	and.w	r3, r3, #16
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d019      	beq.n	80114f6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114c2:	4b68      	ldr	r3, [pc, #416]	; (8011664 <tcp_listen_input+0x1d8>)
 80114c4:	6819      	ldr	r1, [r3, #0]
 80114c6:	4b68      	ldr	r3, [pc, #416]	; (8011668 <tcp_listen_input+0x1dc>)
 80114c8:	881b      	ldrh	r3, [r3, #0]
 80114ca:	461a      	mov	r2, r3
 80114cc:	4b67      	ldr	r3, [pc, #412]	; (801166c <tcp_listen_input+0x1e0>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80114d2:	4b67      	ldr	r3, [pc, #412]	; (8011670 <tcp_listen_input+0x1e4>)
 80114d4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114d6:	885b      	ldrh	r3, [r3, #2]
 80114d8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80114da:	4a65      	ldr	r2, [pc, #404]	; (8011670 <tcp_listen_input+0x1e4>)
 80114dc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114de:	8812      	ldrh	r2, [r2, #0]
 80114e0:	b292      	uxth	r2, r2
 80114e2:	9202      	str	r2, [sp, #8]
 80114e4:	9301      	str	r3, [sp, #4]
 80114e6:	4b63      	ldr	r3, [pc, #396]	; (8011674 <tcp_listen_input+0x1e8>)
 80114e8:	9300      	str	r3, [sp, #0]
 80114ea:	4b63      	ldr	r3, [pc, #396]	; (8011678 <tcp_listen_input+0x1ec>)
 80114ec:	4602      	mov	r2, r0
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f003 fbd8 	bl	8014ca4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80114f4:	e0a9      	b.n	801164a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80114f6:	4b57      	ldr	r3, [pc, #348]	; (8011654 <tcp_listen_input+0x1c8>)
 80114f8:	781b      	ldrb	r3, [r3, #0]
 80114fa:	f003 0302 	and.w	r3, r3, #2
 80114fe:	2b00      	cmp	r3, #0
 8011500:	f000 80a3 	beq.w	801164a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	7d5b      	ldrb	r3, [r3, #21]
 8011508:	4618      	mov	r0, r3
 801150a:	f7ff f859 	bl	80105c0 <tcp_alloc>
 801150e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d111      	bne.n	801153a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	699b      	ldr	r3, [r3, #24]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d00a      	beq.n	8011534 <tcp_listen_input+0xa8>
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	699b      	ldr	r3, [r3, #24]
 8011522:	687a      	ldr	r2, [r7, #4]
 8011524:	6910      	ldr	r0, [r2, #16]
 8011526:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801152a:	2100      	movs	r1, #0
 801152c:	4798      	blx	r3
 801152e:	4603      	mov	r3, r0
 8011530:	73bb      	strb	r3, [r7, #14]
      return;
 8011532:	e08b      	b.n	801164c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011534:	23f0      	movs	r3, #240	; 0xf0
 8011536:	73bb      	strb	r3, [r7, #14]
      return;
 8011538:	e088      	b.n	801164c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801153a:	4b50      	ldr	r3, [pc, #320]	; (801167c <tcp_listen_input+0x1f0>)
 801153c:	695a      	ldr	r2, [r3, #20]
 801153e:	697b      	ldr	r3, [r7, #20]
 8011540:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011542:	4b4e      	ldr	r3, [pc, #312]	; (801167c <tcp_listen_input+0x1f0>)
 8011544:	691a      	ldr	r2, [r3, #16]
 8011546:	697b      	ldr	r3, [r7, #20]
 8011548:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	8ada      	ldrh	r2, [r3, #22]
 801154e:	697b      	ldr	r3, [r7, #20]
 8011550:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011552:	4b47      	ldr	r3, [pc, #284]	; (8011670 <tcp_listen_input+0x1e4>)
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	881b      	ldrh	r3, [r3, #0]
 8011558:	b29a      	uxth	r2, r3
 801155a:	697b      	ldr	r3, [r7, #20]
 801155c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	2203      	movs	r2, #3
 8011562:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011564:	4b41      	ldr	r3, [pc, #260]	; (801166c <tcp_listen_input+0x1e0>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	1c5a      	adds	r2, r3, #1
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011572:	697b      	ldr	r3, [r7, #20]
 8011574:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011576:	6978      	ldr	r0, [r7, #20]
 8011578:	f7ff fa58 	bl	8010a2c <tcp_next_iss>
 801157c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801157e:	697b      	ldr	r3, [r7, #20]
 8011580:	693a      	ldr	r2, [r7, #16]
 8011582:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011584:	697b      	ldr	r3, [r7, #20]
 8011586:	693a      	ldr	r2, [r7, #16]
 8011588:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801158a:	697b      	ldr	r3, [r7, #20]
 801158c:	693a      	ldr	r2, [r7, #16]
 801158e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011590:	697b      	ldr	r3, [r7, #20]
 8011592:	693a      	ldr	r2, [r7, #16]
 8011594:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011596:	4b35      	ldr	r3, [pc, #212]	; (801166c <tcp_listen_input+0x1e0>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	1e5a      	subs	r2, r3, #1
 801159c:	697b      	ldr	r3, [r7, #20]
 801159e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	691a      	ldr	r2, [r3, #16]
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	687a      	ldr	r2, [r7, #4]
 80115ac:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	7a5b      	ldrb	r3, [r3, #9]
 80115b2:	f003 030c 	and.w	r3, r3, #12
 80115b6:	b2da      	uxtb	r2, r3
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	7a1a      	ldrb	r2, [r3, #8]
 80115c0:	697b      	ldr	r3, [r7, #20]
 80115c2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80115c4:	4b2e      	ldr	r3, [pc, #184]	; (8011680 <tcp_listen_input+0x1f4>)
 80115c6:	681a      	ldr	r2, [r3, #0]
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	60da      	str	r2, [r3, #12]
 80115cc:	4a2c      	ldr	r2, [pc, #176]	; (8011680 <tcp_listen_input+0x1f4>)
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	6013      	str	r3, [r2, #0]
 80115d2:	f003 fd29 	bl	8015028 <tcp_timer_needed>
 80115d6:	4b2b      	ldr	r3, [pc, #172]	; (8011684 <tcp_listen_input+0x1f8>)
 80115d8:	2201      	movs	r2, #1
 80115da:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80115dc:	6978      	ldr	r0, [r7, #20]
 80115de:	f001 fd8f 	bl	8013100 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80115e2:	4b23      	ldr	r3, [pc, #140]	; (8011670 <tcp_listen_input+0x1e4>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	89db      	ldrh	r3, [r3, #14]
 80115e8:	b29a      	uxth	r2, r3
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80115f0:	697b      	ldr	r3, [r7, #20]
 80115f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	3304      	adds	r3, #4
 8011604:	4618      	mov	r0, r3
 8011606:	f005 fad1 	bl	8016bac <ip4_route>
 801160a:	4601      	mov	r1, r0
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	3304      	adds	r3, #4
 8011610:	461a      	mov	r2, r3
 8011612:	4620      	mov	r0, r4
 8011614:	f7ff fa30 	bl	8010a78 <tcp_eff_send_mss_netif>
 8011618:	4603      	mov	r3, r0
 801161a:	461a      	mov	r2, r3
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011620:	2112      	movs	r1, #18
 8011622:	6978      	ldr	r0, [r7, #20]
 8011624:	f002 fc9c 	bl	8013f60 <tcp_enqueue_flags>
 8011628:	4603      	mov	r3, r0
 801162a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801162c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d004      	beq.n	801163e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011634:	2100      	movs	r1, #0
 8011636:	6978      	ldr	r0, [r7, #20]
 8011638:	f7fd ff52 	bl	800f4e0 <tcp_abandon>
      return;
 801163c:	e006      	b.n	801164c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801163e:	6978      	ldr	r0, [r7, #20]
 8011640:	f002 fd7c 	bl	801413c <tcp_output>
  return;
 8011644:	e001      	b.n	801164a <tcp_listen_input+0x1be>
    return;
 8011646:	bf00      	nop
 8011648:	e000      	b.n	801164c <tcp_listen_input+0x1c0>
  return;
 801164a:	bf00      	nop
}
 801164c:	371c      	adds	r7, #28
 801164e:	46bd      	mov	sp, r7
 8011650:	bd90      	pop	{r4, r7, pc}
 8011652:	bf00      	nop
 8011654:	20011400 	.word	0x20011400
 8011658:	08020718 	.word	0x08020718
 801165c:	08020910 	.word	0x08020910
 8011660:	08020764 	.word	0x08020764
 8011664:	200113f8 	.word	0x200113f8
 8011668:	200113fe 	.word	0x200113fe
 801166c:	200113f4 	.word	0x200113f4
 8011670:	200113e4 	.word	0x200113e4
 8011674:	2000a2d0 	.word	0x2000a2d0
 8011678:	2000a2d4 	.word	0x2000a2d4
 801167c:	2000a2c0 	.word	0x2000a2c0
 8011680:	200113c8 	.word	0x200113c8
 8011684:	200113d0 	.word	0x200113d0

08011688 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b086      	sub	sp, #24
 801168c:	af04      	add	r7, sp, #16
 801168e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011690:	4b2f      	ldr	r3, [pc, #188]	; (8011750 <tcp_timewait_input+0xc8>)
 8011692:	781b      	ldrb	r3, [r3, #0]
 8011694:	f003 0304 	and.w	r3, r3, #4
 8011698:	2b00      	cmp	r3, #0
 801169a:	d153      	bne.n	8011744 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d106      	bne.n	80116b0 <tcp_timewait_input+0x28>
 80116a2:	4b2c      	ldr	r3, [pc, #176]	; (8011754 <tcp_timewait_input+0xcc>)
 80116a4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80116a8:	492b      	ldr	r1, [pc, #172]	; (8011758 <tcp_timewait_input+0xd0>)
 80116aa:	482c      	ldr	r0, [pc, #176]	; (801175c <tcp_timewait_input+0xd4>)
 80116ac:	f00c f860 	bl	801d770 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80116b0:	4b27      	ldr	r3, [pc, #156]	; (8011750 <tcp_timewait_input+0xc8>)
 80116b2:	781b      	ldrb	r3, [r3, #0]
 80116b4:	f003 0302 	and.w	r3, r3, #2
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d02a      	beq.n	8011712 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80116bc:	4b28      	ldr	r3, [pc, #160]	; (8011760 <tcp_timewait_input+0xd8>)
 80116be:	681a      	ldr	r2, [r3, #0]
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116c4:	1ad3      	subs	r3, r2, r3
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	db2d      	blt.n	8011726 <tcp_timewait_input+0x9e>
 80116ca:	4b25      	ldr	r3, [pc, #148]	; (8011760 <tcp_timewait_input+0xd8>)
 80116cc:	681a      	ldr	r2, [r3, #0]
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116d2:	6879      	ldr	r1, [r7, #4]
 80116d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80116d6:	440b      	add	r3, r1
 80116d8:	1ad3      	subs	r3, r2, r3
 80116da:	2b00      	cmp	r3, #0
 80116dc:	dc23      	bgt.n	8011726 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80116de:	4b21      	ldr	r3, [pc, #132]	; (8011764 <tcp_timewait_input+0xdc>)
 80116e0:	6819      	ldr	r1, [r3, #0]
 80116e2:	4b21      	ldr	r3, [pc, #132]	; (8011768 <tcp_timewait_input+0xe0>)
 80116e4:	881b      	ldrh	r3, [r3, #0]
 80116e6:	461a      	mov	r2, r3
 80116e8:	4b1d      	ldr	r3, [pc, #116]	; (8011760 <tcp_timewait_input+0xd8>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80116ee:	4b1f      	ldr	r3, [pc, #124]	; (801176c <tcp_timewait_input+0xe4>)
 80116f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80116f2:	885b      	ldrh	r3, [r3, #2]
 80116f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80116f6:	4a1d      	ldr	r2, [pc, #116]	; (801176c <tcp_timewait_input+0xe4>)
 80116f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80116fa:	8812      	ldrh	r2, [r2, #0]
 80116fc:	b292      	uxth	r2, r2
 80116fe:	9202      	str	r2, [sp, #8]
 8011700:	9301      	str	r3, [sp, #4]
 8011702:	4b1b      	ldr	r3, [pc, #108]	; (8011770 <tcp_timewait_input+0xe8>)
 8011704:	9300      	str	r3, [sp, #0]
 8011706:	4b1b      	ldr	r3, [pc, #108]	; (8011774 <tcp_timewait_input+0xec>)
 8011708:	4602      	mov	r2, r0
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f003 faca 	bl	8014ca4 <tcp_rst>
      return;
 8011710:	e01b      	b.n	801174a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011712:	4b0f      	ldr	r3, [pc, #60]	; (8011750 <tcp_timewait_input+0xc8>)
 8011714:	781b      	ldrb	r3, [r3, #0]
 8011716:	f003 0301 	and.w	r3, r3, #1
 801171a:	2b00      	cmp	r3, #0
 801171c:	d003      	beq.n	8011726 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801171e:	4b16      	ldr	r3, [pc, #88]	; (8011778 <tcp_timewait_input+0xf0>)
 8011720:	681a      	ldr	r2, [r3, #0]
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011726:	4b10      	ldr	r3, [pc, #64]	; (8011768 <tcp_timewait_input+0xe0>)
 8011728:	881b      	ldrh	r3, [r3, #0]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d00c      	beq.n	8011748 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	8b5b      	ldrh	r3, [r3, #26]
 8011732:	f043 0302 	orr.w	r3, r3, #2
 8011736:	b29a      	uxth	r2, r3
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f002 fcfd 	bl	801413c <tcp_output>
  }
  return;
 8011742:	e001      	b.n	8011748 <tcp_timewait_input+0xc0>
    return;
 8011744:	bf00      	nop
 8011746:	e000      	b.n	801174a <tcp_timewait_input+0xc2>
  return;
 8011748:	bf00      	nop
}
 801174a:	3708      	adds	r7, #8
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}
 8011750:	20011400 	.word	0x20011400
 8011754:	08020718 	.word	0x08020718
 8011758:	08020930 	.word	0x08020930
 801175c:	08020764 	.word	0x08020764
 8011760:	200113f4 	.word	0x200113f4
 8011764:	200113f8 	.word	0x200113f8
 8011768:	200113fe 	.word	0x200113fe
 801176c:	200113e4 	.word	0x200113e4
 8011770:	2000a2d0 	.word	0x2000a2d0
 8011774:	2000a2d4 	.word	0x2000a2d4
 8011778:	200113bc 	.word	0x200113bc

0801177c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801177c:	b590      	push	{r4, r7, lr}
 801177e:	b08d      	sub	sp, #52	; 0x34
 8011780:	af04      	add	r7, sp, #16
 8011782:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011784:	2300      	movs	r3, #0
 8011786:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011788:	2300      	movs	r3, #0
 801178a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d106      	bne.n	80117a0 <tcp_process+0x24>
 8011792:	4b9d      	ldr	r3, [pc, #628]	; (8011a08 <tcp_process+0x28c>)
 8011794:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011798:	499c      	ldr	r1, [pc, #624]	; (8011a0c <tcp_process+0x290>)
 801179a:	489d      	ldr	r0, [pc, #628]	; (8011a10 <tcp_process+0x294>)
 801179c:	f00b ffe8 	bl	801d770 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80117a0:	4b9c      	ldr	r3, [pc, #624]	; (8011a14 <tcp_process+0x298>)
 80117a2:	781b      	ldrb	r3, [r3, #0]
 80117a4:	f003 0304 	and.w	r3, r3, #4
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d04e      	beq.n	801184a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	7d1b      	ldrb	r3, [r3, #20]
 80117b0:	2b02      	cmp	r3, #2
 80117b2:	d108      	bne.n	80117c6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80117b8:	4b97      	ldr	r3, [pc, #604]	; (8011a18 <tcp_process+0x29c>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	429a      	cmp	r2, r3
 80117be:	d123      	bne.n	8011808 <tcp_process+0x8c>
        acceptable = 1;
 80117c0:	2301      	movs	r3, #1
 80117c2:	76fb      	strb	r3, [r7, #27]
 80117c4:	e020      	b.n	8011808 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117ca:	4b94      	ldr	r3, [pc, #592]	; (8011a1c <tcp_process+0x2a0>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	429a      	cmp	r2, r3
 80117d0:	d102      	bne.n	80117d8 <tcp_process+0x5c>
        acceptable = 1;
 80117d2:	2301      	movs	r3, #1
 80117d4:	76fb      	strb	r3, [r7, #27]
 80117d6:	e017      	b.n	8011808 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80117d8:	4b90      	ldr	r3, [pc, #576]	; (8011a1c <tcp_process+0x2a0>)
 80117da:	681a      	ldr	r2, [r3, #0]
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117e0:	1ad3      	subs	r3, r2, r3
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	db10      	blt.n	8011808 <tcp_process+0x8c>
 80117e6:	4b8d      	ldr	r3, [pc, #564]	; (8011a1c <tcp_process+0x2a0>)
 80117e8:	681a      	ldr	r2, [r3, #0]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117ee:	6879      	ldr	r1, [r7, #4]
 80117f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80117f2:	440b      	add	r3, r1
 80117f4:	1ad3      	subs	r3, r2, r3
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	dc06      	bgt.n	8011808 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	8b5b      	ldrh	r3, [r3, #26]
 80117fe:	f043 0302 	orr.w	r3, r3, #2
 8011802:	b29a      	uxth	r2, r3
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011808:	7efb      	ldrb	r3, [r7, #27]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d01b      	beq.n	8011846 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	7d1b      	ldrb	r3, [r3, #20]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d106      	bne.n	8011824 <tcp_process+0xa8>
 8011816:	4b7c      	ldr	r3, [pc, #496]	; (8011a08 <tcp_process+0x28c>)
 8011818:	f44f 724e 	mov.w	r2, #824	; 0x338
 801181c:	4980      	ldr	r1, [pc, #512]	; (8011a20 <tcp_process+0x2a4>)
 801181e:	487c      	ldr	r0, [pc, #496]	; (8011a10 <tcp_process+0x294>)
 8011820:	f00b ffa6 	bl	801d770 <iprintf>
      recv_flags |= TF_RESET;
 8011824:	4b7f      	ldr	r3, [pc, #508]	; (8011a24 <tcp_process+0x2a8>)
 8011826:	781b      	ldrb	r3, [r3, #0]
 8011828:	f043 0308 	orr.w	r3, r3, #8
 801182c:	b2da      	uxtb	r2, r3
 801182e:	4b7d      	ldr	r3, [pc, #500]	; (8011a24 <tcp_process+0x2a8>)
 8011830:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	8b5b      	ldrh	r3, [r3, #26]
 8011836:	f023 0301 	bic.w	r3, r3, #1
 801183a:	b29a      	uxth	r2, r3
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011840:	f06f 030d 	mvn.w	r3, #13
 8011844:	e37a      	b.n	8011f3c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011846:	2300      	movs	r3, #0
 8011848:	e378      	b.n	8011f3c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801184a:	4b72      	ldr	r3, [pc, #456]	; (8011a14 <tcp_process+0x298>)
 801184c:	781b      	ldrb	r3, [r3, #0]
 801184e:	f003 0302 	and.w	r3, r3, #2
 8011852:	2b00      	cmp	r3, #0
 8011854:	d010      	beq.n	8011878 <tcp_process+0xfc>
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	7d1b      	ldrb	r3, [r3, #20]
 801185a:	2b02      	cmp	r3, #2
 801185c:	d00c      	beq.n	8011878 <tcp_process+0xfc>
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	7d1b      	ldrb	r3, [r3, #20]
 8011862:	2b03      	cmp	r3, #3
 8011864:	d008      	beq.n	8011878 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	8b5b      	ldrh	r3, [r3, #26]
 801186a:	f043 0302 	orr.w	r3, r3, #2
 801186e:	b29a      	uxth	r2, r3
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011874:	2300      	movs	r3, #0
 8011876:	e361      	b.n	8011f3c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	8b5b      	ldrh	r3, [r3, #26]
 801187c:	f003 0310 	and.w	r3, r3, #16
 8011880:	2b00      	cmp	r3, #0
 8011882:	d103      	bne.n	801188c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011884:	4b68      	ldr	r3, [pc, #416]	; (8011a28 <tcp_process+0x2ac>)
 8011886:	681a      	ldr	r2, [r3, #0]
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2200      	movs	r2, #0
 8011890:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2200      	movs	r2, #0
 8011898:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	f001 fc2f 	bl	8013100 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	7d1b      	ldrb	r3, [r3, #20]
 80118a6:	3b02      	subs	r3, #2
 80118a8:	2b07      	cmp	r3, #7
 80118aa:	f200 8337 	bhi.w	8011f1c <tcp_process+0x7a0>
 80118ae:	a201      	add	r2, pc, #4	; (adr r2, 80118b4 <tcp_process+0x138>)
 80118b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118b4:	080118d5 	.word	0x080118d5
 80118b8:	08011b05 	.word	0x08011b05
 80118bc:	08011c7d 	.word	0x08011c7d
 80118c0:	08011ca7 	.word	0x08011ca7
 80118c4:	08011dcb 	.word	0x08011dcb
 80118c8:	08011c7d 	.word	0x08011c7d
 80118cc:	08011e57 	.word	0x08011e57
 80118d0:	08011ee7 	.word	0x08011ee7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80118d4:	4b4f      	ldr	r3, [pc, #316]	; (8011a14 <tcp_process+0x298>)
 80118d6:	781b      	ldrb	r3, [r3, #0]
 80118d8:	f003 0310 	and.w	r3, r3, #16
 80118dc:	2b00      	cmp	r3, #0
 80118de:	f000 80e4 	beq.w	8011aaa <tcp_process+0x32e>
 80118e2:	4b4c      	ldr	r3, [pc, #304]	; (8011a14 <tcp_process+0x298>)
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	f003 0302 	and.w	r3, r3, #2
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	f000 80dd 	beq.w	8011aaa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118f4:	1c5a      	adds	r2, r3, #1
 80118f6:	4b48      	ldr	r3, [pc, #288]	; (8011a18 <tcp_process+0x29c>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	429a      	cmp	r2, r3
 80118fc:	f040 80d5 	bne.w	8011aaa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011900:	4b46      	ldr	r3, [pc, #280]	; (8011a1c <tcp_process+0x2a0>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	1c5a      	adds	r2, r3, #1
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011912:	4b41      	ldr	r3, [pc, #260]	; (8011a18 <tcp_process+0x29c>)
 8011914:	681a      	ldr	r2, [r3, #0]
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801191a:	4b44      	ldr	r3, [pc, #272]	; (8011a2c <tcp_process+0x2b0>)
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	89db      	ldrh	r3, [r3, #14]
 8011920:	b29a      	uxth	r2, r3
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011934:	4b39      	ldr	r3, [pc, #228]	; (8011a1c <tcp_process+0x2a0>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	1e5a      	subs	r2, r3, #1
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2204      	movs	r2, #4
 8011942:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	3304      	adds	r3, #4
 801194c:	4618      	mov	r0, r3
 801194e:	f005 f92d 	bl	8016bac <ip4_route>
 8011952:	4601      	mov	r1, r0
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	3304      	adds	r3, #4
 8011958:	461a      	mov	r2, r3
 801195a:	4620      	mov	r0, r4
 801195c:	f7ff f88c 	bl	8010a78 <tcp_eff_send_mss_netif>
 8011960:	4603      	mov	r3, r0
 8011962:	461a      	mov	r2, r3
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801196c:	009a      	lsls	r2, r3, #2
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011972:	005b      	lsls	r3, r3, #1
 8011974:	f241 111c 	movw	r1, #4380	; 0x111c
 8011978:	428b      	cmp	r3, r1
 801197a:	bf38      	it	cc
 801197c:	460b      	movcc	r3, r1
 801197e:	429a      	cmp	r2, r3
 8011980:	d204      	bcs.n	801198c <tcp_process+0x210>
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011986:	009b      	lsls	r3, r3, #2
 8011988:	b29b      	uxth	r3, r3
 801198a:	e00d      	b.n	80119a8 <tcp_process+0x22c>
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011990:	005b      	lsls	r3, r3, #1
 8011992:	f241 121c 	movw	r2, #4380	; 0x111c
 8011996:	4293      	cmp	r3, r2
 8011998:	d904      	bls.n	80119a4 <tcp_process+0x228>
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801199e:	005b      	lsls	r3, r3, #1
 80119a0:	b29b      	uxth	r3, r3
 80119a2:	e001      	b.n	80119a8 <tcp_process+0x22c>
 80119a4:	f241 131c 	movw	r3, #4380	; 0x111c
 80119a8:	687a      	ldr	r2, [r7, #4]
 80119aa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d106      	bne.n	80119c6 <tcp_process+0x24a>
 80119b8:	4b13      	ldr	r3, [pc, #76]	; (8011a08 <tcp_process+0x28c>)
 80119ba:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80119be:	491c      	ldr	r1, [pc, #112]	; (8011a30 <tcp_process+0x2b4>)
 80119c0:	4813      	ldr	r0, [pc, #76]	; (8011a10 <tcp_process+0x294>)
 80119c2:	f00b fed5 	bl	801d770 <iprintf>
        --pcb->snd_queuelen;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80119cc:	3b01      	subs	r3, #1
 80119ce:	b29a      	uxth	r2, r3
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119da:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80119dc:	69fb      	ldr	r3, [r7, #28]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d12a      	bne.n	8011a38 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119e6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80119e8:	69fb      	ldr	r3, [r7, #28]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d106      	bne.n	80119fc <tcp_process+0x280>
 80119ee:	4b06      	ldr	r3, [pc, #24]	; (8011a08 <tcp_process+0x28c>)
 80119f0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80119f4:	490f      	ldr	r1, [pc, #60]	; (8011a34 <tcp_process+0x2b8>)
 80119f6:	4806      	ldr	r0, [pc, #24]	; (8011a10 <tcp_process+0x294>)
 80119f8:	f00b feba 	bl	801d770 <iprintf>
          pcb->unsent = rseg->next;
 80119fc:	69fb      	ldr	r3, [r7, #28]
 80119fe:	681a      	ldr	r2, [r3, #0]
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	66da      	str	r2, [r3, #108]	; 0x6c
 8011a04:	e01c      	b.n	8011a40 <tcp_process+0x2c4>
 8011a06:	bf00      	nop
 8011a08:	08020718 	.word	0x08020718
 8011a0c:	08020950 	.word	0x08020950
 8011a10:	08020764 	.word	0x08020764
 8011a14:	20011400 	.word	0x20011400
 8011a18:	200113f8 	.word	0x200113f8
 8011a1c:	200113f4 	.word	0x200113f4
 8011a20:	0802096c 	.word	0x0802096c
 8011a24:	20011401 	.word	0x20011401
 8011a28:	200113bc 	.word	0x200113bc
 8011a2c:	200113e4 	.word	0x200113e4
 8011a30:	0802098c 	.word	0x0802098c
 8011a34:	080209a4 	.word	0x080209a4
        } else {
          pcb->unacked = rseg->next;
 8011a38:	69fb      	ldr	r3, [r7, #28]
 8011a3a:	681a      	ldr	r2, [r3, #0]
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011a40:	69f8      	ldr	r0, [r7, #28]
 8011a42:	f7fe fc54 	bl	80102ee <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d104      	bne.n	8011a58 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a54:	861a      	strh	r2, [r3, #48]	; 0x30
 8011a56:	e006      	b.n	8011a66 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2200      	movs	r2, #0
 8011a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d00a      	beq.n	8011a86 <tcp_process+0x30a>
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a76:	687a      	ldr	r2, [r7, #4]
 8011a78:	6910      	ldr	r0, [r2, #16]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	6879      	ldr	r1, [r7, #4]
 8011a7e:	4798      	blx	r3
 8011a80:	4603      	mov	r3, r0
 8011a82:	76bb      	strb	r3, [r7, #26]
 8011a84:	e001      	b.n	8011a8a <tcp_process+0x30e>
 8011a86:	2300      	movs	r3, #0
 8011a88:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011a8a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011a8e:	f113 0f0d 	cmn.w	r3, #13
 8011a92:	d102      	bne.n	8011a9a <tcp_process+0x31e>
          return ERR_ABRT;
 8011a94:	f06f 030c 	mvn.w	r3, #12
 8011a98:	e250      	b.n	8011f3c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	8b5b      	ldrh	r3, [r3, #26]
 8011a9e:	f043 0302 	orr.w	r3, r3, #2
 8011aa2:	b29a      	uxth	r2, r3
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011aa8:	e23a      	b.n	8011f20 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011aaa:	4b98      	ldr	r3, [pc, #608]	; (8011d0c <tcp_process+0x590>)
 8011aac:	781b      	ldrb	r3, [r3, #0]
 8011aae:	f003 0310 	and.w	r3, r3, #16
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	f000 8234 	beq.w	8011f20 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ab8:	4b95      	ldr	r3, [pc, #596]	; (8011d10 <tcp_process+0x594>)
 8011aba:	6819      	ldr	r1, [r3, #0]
 8011abc:	4b95      	ldr	r3, [pc, #596]	; (8011d14 <tcp_process+0x598>)
 8011abe:	881b      	ldrh	r3, [r3, #0]
 8011ac0:	461a      	mov	r2, r3
 8011ac2:	4b95      	ldr	r3, [pc, #596]	; (8011d18 <tcp_process+0x59c>)
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011ac8:	4b94      	ldr	r3, [pc, #592]	; (8011d1c <tcp_process+0x5a0>)
 8011aca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011acc:	885b      	ldrh	r3, [r3, #2]
 8011ace:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011ad0:	4a92      	ldr	r2, [pc, #584]	; (8011d1c <tcp_process+0x5a0>)
 8011ad2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ad4:	8812      	ldrh	r2, [r2, #0]
 8011ad6:	b292      	uxth	r2, r2
 8011ad8:	9202      	str	r2, [sp, #8]
 8011ada:	9301      	str	r3, [sp, #4]
 8011adc:	4b90      	ldr	r3, [pc, #576]	; (8011d20 <tcp_process+0x5a4>)
 8011ade:	9300      	str	r3, [sp, #0]
 8011ae0:	4b90      	ldr	r3, [pc, #576]	; (8011d24 <tcp_process+0x5a8>)
 8011ae2:	4602      	mov	r2, r0
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f003 f8dd 	bl	8014ca4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011af0:	2b05      	cmp	r3, #5
 8011af2:	f200 8215 	bhi.w	8011f20 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2200      	movs	r2, #0
 8011afa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011afc:	6878      	ldr	r0, [r7, #4]
 8011afe:	f002 fea7 	bl	8014850 <tcp_rexmit_rto>
      break;
 8011b02:	e20d      	b.n	8011f20 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011b04:	4b81      	ldr	r3, [pc, #516]	; (8011d0c <tcp_process+0x590>)
 8011b06:	781b      	ldrb	r3, [r3, #0]
 8011b08:	f003 0310 	and.w	r3, r3, #16
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	f000 80a1 	beq.w	8011c54 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011b12:	4b7f      	ldr	r3, [pc, #508]	; (8011d10 <tcp_process+0x594>)
 8011b14:	681a      	ldr	r2, [r3, #0]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b1a:	1ad3      	subs	r3, r2, r3
 8011b1c:	3b01      	subs	r3, #1
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	db7e      	blt.n	8011c20 <tcp_process+0x4a4>
 8011b22:	4b7b      	ldr	r3, [pc, #492]	; (8011d10 <tcp_process+0x594>)
 8011b24:	681a      	ldr	r2, [r3, #0]
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b2a:	1ad3      	subs	r3, r2, r3
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	dc77      	bgt.n	8011c20 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2204      	movs	r2, #4
 8011b34:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d102      	bne.n	8011b44 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011b3e:	23fa      	movs	r3, #250	; 0xfa
 8011b40:	76bb      	strb	r3, [r7, #26]
 8011b42:	e01d      	b.n	8011b80 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b48:	699b      	ldr	r3, [r3, #24]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d106      	bne.n	8011b5c <tcp_process+0x3e0>
 8011b4e:	4b76      	ldr	r3, [pc, #472]	; (8011d28 <tcp_process+0x5ac>)
 8011b50:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011b54:	4975      	ldr	r1, [pc, #468]	; (8011d2c <tcp_process+0x5b0>)
 8011b56:	4876      	ldr	r0, [pc, #472]	; (8011d30 <tcp_process+0x5b4>)
 8011b58:	f00b fe0a 	bl	801d770 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b60:	699b      	ldr	r3, [r3, #24]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d00a      	beq.n	8011b7c <tcp_process+0x400>
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b6a:	699b      	ldr	r3, [r3, #24]
 8011b6c:	687a      	ldr	r2, [r7, #4]
 8011b6e:	6910      	ldr	r0, [r2, #16]
 8011b70:	2200      	movs	r2, #0
 8011b72:	6879      	ldr	r1, [r7, #4]
 8011b74:	4798      	blx	r3
 8011b76:	4603      	mov	r3, r0
 8011b78:	76bb      	strb	r3, [r7, #26]
 8011b7a:	e001      	b.n	8011b80 <tcp_process+0x404>
 8011b7c:	23f0      	movs	r3, #240	; 0xf0
 8011b7e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011b80:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d00a      	beq.n	8011b9e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011b88:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011b8c:	f113 0f0d 	cmn.w	r3, #13
 8011b90:	d002      	beq.n	8011b98 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011b92:	6878      	ldr	r0, [r7, #4]
 8011b94:	f7fd fd62 	bl	800f65c <tcp_abort>
            }
            return ERR_ABRT;
 8011b98:	f06f 030c 	mvn.w	r3, #12
 8011b9c:	e1ce      	b.n	8011f3c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011b9e:	6878      	ldr	r0, [r7, #4]
 8011ba0:	f000 fae0 	bl	8012164 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011ba4:	4b63      	ldr	r3, [pc, #396]	; (8011d34 <tcp_process+0x5b8>)
 8011ba6:	881b      	ldrh	r3, [r3, #0]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d005      	beq.n	8011bb8 <tcp_process+0x43c>
            recv_acked--;
 8011bac:	4b61      	ldr	r3, [pc, #388]	; (8011d34 <tcp_process+0x5b8>)
 8011bae:	881b      	ldrh	r3, [r3, #0]
 8011bb0:	3b01      	subs	r3, #1
 8011bb2:	b29a      	uxth	r2, r3
 8011bb4:	4b5f      	ldr	r3, [pc, #380]	; (8011d34 <tcp_process+0x5b8>)
 8011bb6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bbc:	009a      	lsls	r2, r3, #2
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bc2:	005b      	lsls	r3, r3, #1
 8011bc4:	f241 111c 	movw	r1, #4380	; 0x111c
 8011bc8:	428b      	cmp	r3, r1
 8011bca:	bf38      	it	cc
 8011bcc:	460b      	movcc	r3, r1
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	d204      	bcs.n	8011bdc <tcp_process+0x460>
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bd6:	009b      	lsls	r3, r3, #2
 8011bd8:	b29b      	uxth	r3, r3
 8011bda:	e00d      	b.n	8011bf8 <tcp_process+0x47c>
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011be0:	005b      	lsls	r3, r3, #1
 8011be2:	f241 121c 	movw	r2, #4380	; 0x111c
 8011be6:	4293      	cmp	r3, r2
 8011be8:	d904      	bls.n	8011bf4 <tcp_process+0x478>
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bee:	005b      	lsls	r3, r3, #1
 8011bf0:	b29b      	uxth	r3, r3
 8011bf2:	e001      	b.n	8011bf8 <tcp_process+0x47c>
 8011bf4:	f241 131c 	movw	r3, #4380	; 0x111c
 8011bf8:	687a      	ldr	r2, [r7, #4]
 8011bfa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011bfe:	4b4e      	ldr	r3, [pc, #312]	; (8011d38 <tcp_process+0x5bc>)
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	f003 0320 	and.w	r3, r3, #32
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d037      	beq.n	8011c7a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	8b5b      	ldrh	r3, [r3, #26]
 8011c0e:	f043 0302 	orr.w	r3, r3, #2
 8011c12:	b29a      	uxth	r2, r3
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	2207      	movs	r2, #7
 8011c1c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011c1e:	e02c      	b.n	8011c7a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c20:	4b3b      	ldr	r3, [pc, #236]	; (8011d10 <tcp_process+0x594>)
 8011c22:	6819      	ldr	r1, [r3, #0]
 8011c24:	4b3b      	ldr	r3, [pc, #236]	; (8011d14 <tcp_process+0x598>)
 8011c26:	881b      	ldrh	r3, [r3, #0]
 8011c28:	461a      	mov	r2, r3
 8011c2a:	4b3b      	ldr	r3, [pc, #236]	; (8011d18 <tcp_process+0x59c>)
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c30:	4b3a      	ldr	r3, [pc, #232]	; (8011d1c <tcp_process+0x5a0>)
 8011c32:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c34:	885b      	ldrh	r3, [r3, #2]
 8011c36:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c38:	4a38      	ldr	r2, [pc, #224]	; (8011d1c <tcp_process+0x5a0>)
 8011c3a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c3c:	8812      	ldrh	r2, [r2, #0]
 8011c3e:	b292      	uxth	r2, r2
 8011c40:	9202      	str	r2, [sp, #8]
 8011c42:	9301      	str	r3, [sp, #4]
 8011c44:	4b36      	ldr	r3, [pc, #216]	; (8011d20 <tcp_process+0x5a4>)
 8011c46:	9300      	str	r3, [sp, #0]
 8011c48:	4b36      	ldr	r3, [pc, #216]	; (8011d24 <tcp_process+0x5a8>)
 8011c4a:	4602      	mov	r2, r0
 8011c4c:	6878      	ldr	r0, [r7, #4]
 8011c4e:	f003 f829 	bl	8014ca4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011c52:	e167      	b.n	8011f24 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011c54:	4b2d      	ldr	r3, [pc, #180]	; (8011d0c <tcp_process+0x590>)
 8011c56:	781b      	ldrb	r3, [r3, #0]
 8011c58:	f003 0302 	and.w	r3, r3, #2
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	f000 8161 	beq.w	8011f24 <tcp_process+0x7a8>
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c66:	1e5a      	subs	r2, r3, #1
 8011c68:	4b2b      	ldr	r3, [pc, #172]	; (8011d18 <tcp_process+0x59c>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	f040 8159 	bne.w	8011f24 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f002 fe0e 	bl	8014894 <tcp_rexmit>
      break;
 8011c78:	e154      	b.n	8011f24 <tcp_process+0x7a8>
 8011c7a:	e153      	b.n	8011f24 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f000 fa71 	bl	8012164 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011c82:	4b2d      	ldr	r3, [pc, #180]	; (8011d38 <tcp_process+0x5bc>)
 8011c84:	781b      	ldrb	r3, [r3, #0]
 8011c86:	f003 0320 	and.w	r3, r3, #32
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	f000 814c 	beq.w	8011f28 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	8b5b      	ldrh	r3, [r3, #26]
 8011c94:	f043 0302 	orr.w	r3, r3, #2
 8011c98:	b29a      	uxth	r2, r3
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2207      	movs	r2, #7
 8011ca2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011ca4:	e140      	b.n	8011f28 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011ca6:	6878      	ldr	r0, [r7, #4]
 8011ca8:	f000 fa5c 	bl	8012164 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011cac:	4b22      	ldr	r3, [pc, #136]	; (8011d38 <tcp_process+0x5bc>)
 8011cae:	781b      	ldrb	r3, [r3, #0]
 8011cb0:	f003 0320 	and.w	r3, r3, #32
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d071      	beq.n	8011d9c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011cb8:	4b14      	ldr	r3, [pc, #80]	; (8011d0c <tcp_process+0x590>)
 8011cba:	781b      	ldrb	r3, [r3, #0]
 8011cbc:	f003 0310 	and.w	r3, r3, #16
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d060      	beq.n	8011d86 <tcp_process+0x60a>
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011cc8:	4b11      	ldr	r3, [pc, #68]	; (8011d10 <tcp_process+0x594>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	d15a      	bne.n	8011d86 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d156      	bne.n	8011d86 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	8b5b      	ldrh	r3, [r3, #26]
 8011cdc:	f043 0302 	orr.w	r3, r3, #2
 8011ce0:	b29a      	uxth	r2, r3
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011ce6:	6878      	ldr	r0, [r7, #4]
 8011ce8:	f7fe fdbc 	bl	8010864 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011cec:	4b13      	ldr	r3, [pc, #76]	; (8011d3c <tcp_process+0x5c0>)
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	687a      	ldr	r2, [r7, #4]
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	d105      	bne.n	8011d02 <tcp_process+0x586>
 8011cf6:	4b11      	ldr	r3, [pc, #68]	; (8011d3c <tcp_process+0x5c0>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	68db      	ldr	r3, [r3, #12]
 8011cfc:	4a0f      	ldr	r2, [pc, #60]	; (8011d3c <tcp_process+0x5c0>)
 8011cfe:	6013      	str	r3, [r2, #0]
 8011d00:	e02e      	b.n	8011d60 <tcp_process+0x5e4>
 8011d02:	4b0e      	ldr	r3, [pc, #56]	; (8011d3c <tcp_process+0x5c0>)
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	617b      	str	r3, [r7, #20]
 8011d08:	e027      	b.n	8011d5a <tcp_process+0x5de>
 8011d0a:	bf00      	nop
 8011d0c:	20011400 	.word	0x20011400
 8011d10:	200113f8 	.word	0x200113f8
 8011d14:	200113fe 	.word	0x200113fe
 8011d18:	200113f4 	.word	0x200113f4
 8011d1c:	200113e4 	.word	0x200113e4
 8011d20:	2000a2d0 	.word	0x2000a2d0
 8011d24:	2000a2d4 	.word	0x2000a2d4
 8011d28:	08020718 	.word	0x08020718
 8011d2c:	080209b8 	.word	0x080209b8
 8011d30:	08020764 	.word	0x08020764
 8011d34:	200113fc 	.word	0x200113fc
 8011d38:	20011401 	.word	0x20011401
 8011d3c:	200113c8 	.word	0x200113c8
 8011d40:	697b      	ldr	r3, [r7, #20]
 8011d42:	68db      	ldr	r3, [r3, #12]
 8011d44:	687a      	ldr	r2, [r7, #4]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d104      	bne.n	8011d54 <tcp_process+0x5d8>
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	68da      	ldr	r2, [r3, #12]
 8011d4e:	697b      	ldr	r3, [r7, #20]
 8011d50:	60da      	str	r2, [r3, #12]
 8011d52:	e005      	b.n	8011d60 <tcp_process+0x5e4>
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	68db      	ldr	r3, [r3, #12]
 8011d58:	617b      	str	r3, [r7, #20]
 8011d5a:	697b      	ldr	r3, [r7, #20]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d1ef      	bne.n	8011d40 <tcp_process+0x5c4>
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	2200      	movs	r2, #0
 8011d64:	60da      	str	r2, [r3, #12]
 8011d66:	4b77      	ldr	r3, [pc, #476]	; (8011f44 <tcp_process+0x7c8>)
 8011d68:	2201      	movs	r2, #1
 8011d6a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	220a      	movs	r2, #10
 8011d70:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011d72:	4b75      	ldr	r3, [pc, #468]	; (8011f48 <tcp_process+0x7cc>)
 8011d74:	681a      	ldr	r2, [r3, #0]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	60da      	str	r2, [r3, #12]
 8011d7a:	4a73      	ldr	r2, [pc, #460]	; (8011f48 <tcp_process+0x7cc>)
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	6013      	str	r3, [r2, #0]
 8011d80:	f003 f952 	bl	8015028 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011d84:	e0d2      	b.n	8011f2c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	8b5b      	ldrh	r3, [r3, #26]
 8011d8a:	f043 0302 	orr.w	r3, r3, #2
 8011d8e:	b29a      	uxth	r2, r3
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2208      	movs	r2, #8
 8011d98:	751a      	strb	r2, [r3, #20]
      break;
 8011d9a:	e0c7      	b.n	8011f2c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011d9c:	4b6b      	ldr	r3, [pc, #428]	; (8011f4c <tcp_process+0x7d0>)
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	f003 0310 	and.w	r3, r3, #16
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	f000 80c1 	beq.w	8011f2c <tcp_process+0x7b0>
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011dae:	4b68      	ldr	r3, [pc, #416]	; (8011f50 <tcp_process+0x7d4>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	429a      	cmp	r2, r3
 8011db4:	f040 80ba 	bne.w	8011f2c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	f040 80b5 	bne.w	8011f2c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	2206      	movs	r2, #6
 8011dc6:	751a      	strb	r2, [r3, #20]
      break;
 8011dc8:	e0b0      	b.n	8011f2c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011dca:	6878      	ldr	r0, [r7, #4]
 8011dcc:	f000 f9ca 	bl	8012164 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011dd0:	4b60      	ldr	r3, [pc, #384]	; (8011f54 <tcp_process+0x7d8>)
 8011dd2:	781b      	ldrb	r3, [r3, #0]
 8011dd4:	f003 0320 	and.w	r3, r3, #32
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	f000 80a9 	beq.w	8011f30 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	8b5b      	ldrh	r3, [r3, #26]
 8011de2:	f043 0302 	orr.w	r3, r3, #2
 8011de6:	b29a      	uxth	r2, r3
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f7fe fd39 	bl	8010864 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011df2:	4b59      	ldr	r3, [pc, #356]	; (8011f58 <tcp_process+0x7dc>)
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	687a      	ldr	r2, [r7, #4]
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	d105      	bne.n	8011e08 <tcp_process+0x68c>
 8011dfc:	4b56      	ldr	r3, [pc, #344]	; (8011f58 <tcp_process+0x7dc>)
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	68db      	ldr	r3, [r3, #12]
 8011e02:	4a55      	ldr	r2, [pc, #340]	; (8011f58 <tcp_process+0x7dc>)
 8011e04:	6013      	str	r3, [r2, #0]
 8011e06:	e013      	b.n	8011e30 <tcp_process+0x6b4>
 8011e08:	4b53      	ldr	r3, [pc, #332]	; (8011f58 <tcp_process+0x7dc>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	613b      	str	r3, [r7, #16]
 8011e0e:	e00c      	b.n	8011e2a <tcp_process+0x6ae>
 8011e10:	693b      	ldr	r3, [r7, #16]
 8011e12:	68db      	ldr	r3, [r3, #12]
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	429a      	cmp	r2, r3
 8011e18:	d104      	bne.n	8011e24 <tcp_process+0x6a8>
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	68da      	ldr	r2, [r3, #12]
 8011e1e:	693b      	ldr	r3, [r7, #16]
 8011e20:	60da      	str	r2, [r3, #12]
 8011e22:	e005      	b.n	8011e30 <tcp_process+0x6b4>
 8011e24:	693b      	ldr	r3, [r7, #16]
 8011e26:	68db      	ldr	r3, [r3, #12]
 8011e28:	613b      	str	r3, [r7, #16]
 8011e2a:	693b      	ldr	r3, [r7, #16]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d1ef      	bne.n	8011e10 <tcp_process+0x694>
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	2200      	movs	r2, #0
 8011e34:	60da      	str	r2, [r3, #12]
 8011e36:	4b43      	ldr	r3, [pc, #268]	; (8011f44 <tcp_process+0x7c8>)
 8011e38:	2201      	movs	r2, #1
 8011e3a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	220a      	movs	r2, #10
 8011e40:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011e42:	4b41      	ldr	r3, [pc, #260]	; (8011f48 <tcp_process+0x7cc>)
 8011e44:	681a      	ldr	r2, [r3, #0]
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	60da      	str	r2, [r3, #12]
 8011e4a:	4a3f      	ldr	r2, [pc, #252]	; (8011f48 <tcp_process+0x7cc>)
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6013      	str	r3, [r2, #0]
 8011e50:	f003 f8ea 	bl	8015028 <tcp_timer_needed>
      }
      break;
 8011e54:	e06c      	b.n	8011f30 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011e56:	6878      	ldr	r0, [r7, #4]
 8011e58:	f000 f984 	bl	8012164 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011e5c:	4b3b      	ldr	r3, [pc, #236]	; (8011f4c <tcp_process+0x7d0>)
 8011e5e:	781b      	ldrb	r3, [r3, #0]
 8011e60:	f003 0310 	and.w	r3, r3, #16
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d065      	beq.n	8011f34 <tcp_process+0x7b8>
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011e6c:	4b38      	ldr	r3, [pc, #224]	; (8011f50 <tcp_process+0x7d4>)
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	429a      	cmp	r2, r3
 8011e72:	d15f      	bne.n	8011f34 <tcp_process+0x7b8>
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d15b      	bne.n	8011f34 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f7fe fcf1 	bl	8010864 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011e82:	4b35      	ldr	r3, [pc, #212]	; (8011f58 <tcp_process+0x7dc>)
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	687a      	ldr	r2, [r7, #4]
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d105      	bne.n	8011e98 <tcp_process+0x71c>
 8011e8c:	4b32      	ldr	r3, [pc, #200]	; (8011f58 <tcp_process+0x7dc>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	68db      	ldr	r3, [r3, #12]
 8011e92:	4a31      	ldr	r2, [pc, #196]	; (8011f58 <tcp_process+0x7dc>)
 8011e94:	6013      	str	r3, [r2, #0]
 8011e96:	e013      	b.n	8011ec0 <tcp_process+0x744>
 8011e98:	4b2f      	ldr	r3, [pc, #188]	; (8011f58 <tcp_process+0x7dc>)
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	60fb      	str	r3, [r7, #12]
 8011e9e:	e00c      	b.n	8011eba <tcp_process+0x73e>
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	68db      	ldr	r3, [r3, #12]
 8011ea4:	687a      	ldr	r2, [r7, #4]
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d104      	bne.n	8011eb4 <tcp_process+0x738>
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	68da      	ldr	r2, [r3, #12]
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	60da      	str	r2, [r3, #12]
 8011eb2:	e005      	b.n	8011ec0 <tcp_process+0x744>
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	68db      	ldr	r3, [r3, #12]
 8011eb8:	60fb      	str	r3, [r7, #12]
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d1ef      	bne.n	8011ea0 <tcp_process+0x724>
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	60da      	str	r2, [r3, #12]
 8011ec6:	4b1f      	ldr	r3, [pc, #124]	; (8011f44 <tcp_process+0x7c8>)
 8011ec8:	2201      	movs	r2, #1
 8011eca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	220a      	movs	r2, #10
 8011ed0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011ed2:	4b1d      	ldr	r3, [pc, #116]	; (8011f48 <tcp_process+0x7cc>)
 8011ed4:	681a      	ldr	r2, [r3, #0]
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	60da      	str	r2, [r3, #12]
 8011eda:	4a1b      	ldr	r2, [pc, #108]	; (8011f48 <tcp_process+0x7cc>)
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	6013      	str	r3, [r2, #0]
 8011ee0:	f003 f8a2 	bl	8015028 <tcp_timer_needed>
      }
      break;
 8011ee4:	e026      	b.n	8011f34 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	f000 f93c 	bl	8012164 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011eec:	4b17      	ldr	r3, [pc, #92]	; (8011f4c <tcp_process+0x7d0>)
 8011eee:	781b      	ldrb	r3, [r3, #0]
 8011ef0:	f003 0310 	and.w	r3, r3, #16
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d01f      	beq.n	8011f38 <tcp_process+0x7bc>
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011efc:	4b14      	ldr	r3, [pc, #80]	; (8011f50 <tcp_process+0x7d4>)
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d119      	bne.n	8011f38 <tcp_process+0x7bc>
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d115      	bne.n	8011f38 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011f0c:	4b11      	ldr	r3, [pc, #68]	; (8011f54 <tcp_process+0x7d8>)
 8011f0e:	781b      	ldrb	r3, [r3, #0]
 8011f10:	f043 0310 	orr.w	r3, r3, #16
 8011f14:	b2da      	uxtb	r2, r3
 8011f16:	4b0f      	ldr	r3, [pc, #60]	; (8011f54 <tcp_process+0x7d8>)
 8011f18:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011f1a:	e00d      	b.n	8011f38 <tcp_process+0x7bc>
    default:
      break;
 8011f1c:	bf00      	nop
 8011f1e:	e00c      	b.n	8011f3a <tcp_process+0x7be>
      break;
 8011f20:	bf00      	nop
 8011f22:	e00a      	b.n	8011f3a <tcp_process+0x7be>
      break;
 8011f24:	bf00      	nop
 8011f26:	e008      	b.n	8011f3a <tcp_process+0x7be>
      break;
 8011f28:	bf00      	nop
 8011f2a:	e006      	b.n	8011f3a <tcp_process+0x7be>
      break;
 8011f2c:	bf00      	nop
 8011f2e:	e004      	b.n	8011f3a <tcp_process+0x7be>
      break;
 8011f30:	bf00      	nop
 8011f32:	e002      	b.n	8011f3a <tcp_process+0x7be>
      break;
 8011f34:	bf00      	nop
 8011f36:	e000      	b.n	8011f3a <tcp_process+0x7be>
      break;
 8011f38:	bf00      	nop
  }
  return ERR_OK;
 8011f3a:	2300      	movs	r3, #0
}
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	3724      	adds	r7, #36	; 0x24
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd90      	pop	{r4, r7, pc}
 8011f44:	200113d0 	.word	0x200113d0
 8011f48:	200113cc 	.word	0x200113cc
 8011f4c:	20011400 	.word	0x20011400
 8011f50:	200113f8 	.word	0x200113f8
 8011f54:	20011401 	.word	0x20011401
 8011f58:	200113c8 	.word	0x200113c8

08011f5c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011f5c:	b590      	push	{r4, r7, lr}
 8011f5e:	b085      	sub	sp, #20
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
 8011f64:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d106      	bne.n	8011f7a <tcp_oos_insert_segment+0x1e>
 8011f6c:	4b3b      	ldr	r3, [pc, #236]	; (801205c <tcp_oos_insert_segment+0x100>)
 8011f6e:	f240 421f 	movw	r2, #1055	; 0x41f
 8011f72:	493b      	ldr	r1, [pc, #236]	; (8012060 <tcp_oos_insert_segment+0x104>)
 8011f74:	483b      	ldr	r0, [pc, #236]	; (8012064 <tcp_oos_insert_segment+0x108>)
 8011f76:	f00b fbfb 	bl	801d770 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	68db      	ldr	r3, [r3, #12]
 8011f7e:	899b      	ldrh	r3, [r3, #12]
 8011f80:	b29b      	uxth	r3, r3
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7fb f978 	bl	800d278 <lwip_htons>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	b2db      	uxtb	r3, r3
 8011f8c:	f003 0301 	and.w	r3, r3, #1
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d028      	beq.n	8011fe6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011f94:	6838      	ldr	r0, [r7, #0]
 8011f96:	f7fe f995 	bl	80102c4 <tcp_segs_free>
    next = NULL;
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	603b      	str	r3, [r7, #0]
 8011f9e:	e056      	b.n	801204e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	68db      	ldr	r3, [r3, #12]
 8011fa4:	899b      	ldrh	r3, [r3, #12]
 8011fa6:	b29b      	uxth	r3, r3
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7fb f965 	bl	800d278 <lwip_htons>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	b2db      	uxtb	r3, r3
 8011fb2:	f003 0301 	and.w	r3, r3, #1
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d00d      	beq.n	8011fd6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	68db      	ldr	r3, [r3, #12]
 8011fbe:	899b      	ldrh	r3, [r3, #12]
 8011fc0:	b29c      	uxth	r4, r3
 8011fc2:	2001      	movs	r0, #1
 8011fc4:	f7fb f958 	bl	800d278 <lwip_htons>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	461a      	mov	r2, r3
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	68db      	ldr	r3, [r3, #12]
 8011fd0:	4322      	orrs	r2, r4
 8011fd2:	b292      	uxth	r2, r2
 8011fd4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011fe0:	68f8      	ldr	r0, [r7, #12]
 8011fe2:	f7fe f984 	bl	80102ee <tcp_seg_free>
    while (next &&
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d00e      	beq.n	801200a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	891b      	ldrh	r3, [r3, #8]
 8011ff0:	461a      	mov	r2, r3
 8011ff2:	4b1d      	ldr	r3, [pc, #116]	; (8012068 <tcp_oos_insert_segment+0x10c>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	441a      	add	r2, r3
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	68db      	ldr	r3, [r3, #12]
 8011ffc:	685b      	ldr	r3, [r3, #4]
 8011ffe:	6839      	ldr	r1, [r7, #0]
 8012000:	8909      	ldrh	r1, [r1, #8]
 8012002:	440b      	add	r3, r1
 8012004:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012006:	2b00      	cmp	r3, #0
 8012008:	daca      	bge.n	8011fa0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d01e      	beq.n	801204e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	891b      	ldrh	r3, [r3, #8]
 8012014:	461a      	mov	r2, r3
 8012016:	4b14      	ldr	r3, [pc, #80]	; (8012068 <tcp_oos_insert_segment+0x10c>)
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	441a      	add	r2, r3
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	68db      	ldr	r3, [r3, #12]
 8012020:	685b      	ldr	r3, [r3, #4]
 8012022:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012024:	2b00      	cmp	r3, #0
 8012026:	dd12      	ble.n	801204e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	68db      	ldr	r3, [r3, #12]
 801202c:	685b      	ldr	r3, [r3, #4]
 801202e:	b29a      	uxth	r2, r3
 8012030:	4b0d      	ldr	r3, [pc, #52]	; (8012068 <tcp_oos_insert_segment+0x10c>)
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	b29b      	uxth	r3, r3
 8012036:	1ad3      	subs	r3, r2, r3
 8012038:	b29a      	uxth	r2, r3
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	685a      	ldr	r2, [r3, #4]
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	891b      	ldrh	r3, [r3, #8]
 8012046:	4619      	mov	r1, r3
 8012048:	4610      	mov	r0, r2
 801204a:	f7fc fb91 	bl	800e770 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	683a      	ldr	r2, [r7, #0]
 8012052:	601a      	str	r2, [r3, #0]
}
 8012054:	bf00      	nop
 8012056:	3714      	adds	r7, #20
 8012058:	46bd      	mov	sp, r7
 801205a:	bd90      	pop	{r4, r7, pc}
 801205c:	08020718 	.word	0x08020718
 8012060:	080209d8 	.word	0x080209d8
 8012064:	08020764 	.word	0x08020764
 8012068:	200113f4 	.word	0x200113f4

0801206c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801206c:	b5b0      	push	{r4, r5, r7, lr}
 801206e:	b086      	sub	sp, #24
 8012070:	af00      	add	r7, sp, #0
 8012072:	60f8      	str	r0, [r7, #12]
 8012074:	60b9      	str	r1, [r7, #8]
 8012076:	607a      	str	r2, [r7, #4]
 8012078:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801207a:	e03e      	b.n	80120fa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012086:	697b      	ldr	r3, [r7, #20]
 8012088:	685b      	ldr	r3, [r3, #4]
 801208a:	4618      	mov	r0, r3
 801208c:	f7fc fd84 	bl	800eb98 <pbuf_clen>
 8012090:	4603      	mov	r3, r0
 8012092:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801209a:	8a7a      	ldrh	r2, [r7, #18]
 801209c:	429a      	cmp	r2, r3
 801209e:	d906      	bls.n	80120ae <tcp_free_acked_segments+0x42>
 80120a0:	4b2a      	ldr	r3, [pc, #168]	; (801214c <tcp_free_acked_segments+0xe0>)
 80120a2:	f240 4257 	movw	r2, #1111	; 0x457
 80120a6:	492a      	ldr	r1, [pc, #168]	; (8012150 <tcp_free_acked_segments+0xe4>)
 80120a8:	482a      	ldr	r0, [pc, #168]	; (8012154 <tcp_free_acked_segments+0xe8>)
 80120aa:	f00b fb61 	bl	801d770 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80120b4:	8a7b      	ldrh	r3, [r7, #18]
 80120b6:	1ad3      	subs	r3, r2, r3
 80120b8:	b29a      	uxth	r2, r3
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	891a      	ldrh	r2, [r3, #8]
 80120c4:	4b24      	ldr	r3, [pc, #144]	; (8012158 <tcp_free_acked_segments+0xec>)
 80120c6:	881b      	ldrh	r3, [r3, #0]
 80120c8:	4413      	add	r3, r2
 80120ca:	b29a      	uxth	r2, r3
 80120cc:	4b22      	ldr	r3, [pc, #136]	; (8012158 <tcp_free_acked_segments+0xec>)
 80120ce:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80120d0:	6978      	ldr	r0, [r7, #20]
 80120d2:	f7fe f90c 	bl	80102ee <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d00c      	beq.n	80120fa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d109      	bne.n	80120fa <tcp_free_acked_segments+0x8e>
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d106      	bne.n	80120fa <tcp_free_acked_segments+0x8e>
 80120ec:	4b17      	ldr	r3, [pc, #92]	; (801214c <tcp_free_acked_segments+0xe0>)
 80120ee:	f240 4261 	movw	r2, #1121	; 0x461
 80120f2:	491a      	ldr	r1, [pc, #104]	; (801215c <tcp_free_acked_segments+0xf0>)
 80120f4:	4817      	ldr	r0, [pc, #92]	; (8012154 <tcp_free_acked_segments+0xe8>)
 80120f6:	f00b fb3b 	bl	801d770 <iprintf>
  while (seg_list != NULL &&
 80120fa:	68bb      	ldr	r3, [r7, #8]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d020      	beq.n	8012142 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012100:	68bb      	ldr	r3, [r7, #8]
 8012102:	68db      	ldr	r3, [r3, #12]
 8012104:	685b      	ldr	r3, [r3, #4]
 8012106:	4618      	mov	r0, r3
 8012108:	f7fb f8cb 	bl	800d2a2 <lwip_htonl>
 801210c:	4604      	mov	r4, r0
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	891b      	ldrh	r3, [r3, #8]
 8012112:	461d      	mov	r5, r3
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	68db      	ldr	r3, [r3, #12]
 8012118:	899b      	ldrh	r3, [r3, #12]
 801211a:	b29b      	uxth	r3, r3
 801211c:	4618      	mov	r0, r3
 801211e:	f7fb f8ab 	bl	800d278 <lwip_htons>
 8012122:	4603      	mov	r3, r0
 8012124:	b2db      	uxtb	r3, r3
 8012126:	f003 0303 	and.w	r3, r3, #3
 801212a:	2b00      	cmp	r3, #0
 801212c:	d001      	beq.n	8012132 <tcp_free_acked_segments+0xc6>
 801212e:	2301      	movs	r3, #1
 8012130:	e000      	b.n	8012134 <tcp_free_acked_segments+0xc8>
 8012132:	2300      	movs	r3, #0
 8012134:	442b      	add	r3, r5
 8012136:	18e2      	adds	r2, r4, r3
 8012138:	4b09      	ldr	r3, [pc, #36]	; (8012160 <tcp_free_acked_segments+0xf4>)
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801213e:	2b00      	cmp	r3, #0
 8012140:	dd9c      	ble.n	801207c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012142:	68bb      	ldr	r3, [r7, #8]
}
 8012144:	4618      	mov	r0, r3
 8012146:	3718      	adds	r7, #24
 8012148:	46bd      	mov	sp, r7
 801214a:	bdb0      	pop	{r4, r5, r7, pc}
 801214c:	08020718 	.word	0x08020718
 8012150:	08020a00 	.word	0x08020a00
 8012154:	08020764 	.word	0x08020764
 8012158:	200113fc 	.word	0x200113fc
 801215c:	08020a28 	.word	0x08020a28
 8012160:	200113f8 	.word	0x200113f8

08012164 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012164:	b5b0      	push	{r4, r5, r7, lr}
 8012166:	b094      	sub	sp, #80	; 0x50
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801216c:	2300      	movs	r3, #0
 801216e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d106      	bne.n	8012184 <tcp_receive+0x20>
 8012176:	4b91      	ldr	r3, [pc, #580]	; (80123bc <tcp_receive+0x258>)
 8012178:	f240 427b 	movw	r2, #1147	; 0x47b
 801217c:	4990      	ldr	r1, [pc, #576]	; (80123c0 <tcp_receive+0x25c>)
 801217e:	4891      	ldr	r0, [pc, #580]	; (80123c4 <tcp_receive+0x260>)
 8012180:	f00b faf6 	bl	801d770 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	7d1b      	ldrb	r3, [r3, #20]
 8012188:	2b03      	cmp	r3, #3
 801218a:	d806      	bhi.n	801219a <tcp_receive+0x36>
 801218c:	4b8b      	ldr	r3, [pc, #556]	; (80123bc <tcp_receive+0x258>)
 801218e:	f240 427c 	movw	r2, #1148	; 0x47c
 8012192:	498d      	ldr	r1, [pc, #564]	; (80123c8 <tcp_receive+0x264>)
 8012194:	488b      	ldr	r0, [pc, #556]	; (80123c4 <tcp_receive+0x260>)
 8012196:	f00b faeb 	bl	801d770 <iprintf>

  if (flags & TCP_ACK) {
 801219a:	4b8c      	ldr	r3, [pc, #560]	; (80123cc <tcp_receive+0x268>)
 801219c:	781b      	ldrb	r3, [r3, #0]
 801219e:	f003 0310 	and.w	r3, r3, #16
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	f000 8264 	beq.w	8012670 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80121ae:	461a      	mov	r2, r3
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121b4:	4413      	add	r3, r2
 80121b6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80121bc:	4b84      	ldr	r3, [pc, #528]	; (80123d0 <tcp_receive+0x26c>)
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	1ad3      	subs	r3, r2, r3
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	db1b      	blt.n	80121fe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80121ca:	4b81      	ldr	r3, [pc, #516]	; (80123d0 <tcp_receive+0x26c>)
 80121cc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80121ce:	429a      	cmp	r2, r3
 80121d0:	d106      	bne.n	80121e0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80121d6:	4b7f      	ldr	r3, [pc, #508]	; (80123d4 <tcp_receive+0x270>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	1ad3      	subs	r3, r2, r3
 80121dc:	2b00      	cmp	r3, #0
 80121de:	db0e      	blt.n	80121fe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80121e4:	4b7b      	ldr	r3, [pc, #492]	; (80123d4 <tcp_receive+0x270>)
 80121e6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80121e8:	429a      	cmp	r2, r3
 80121ea:	d125      	bne.n	8012238 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80121ec:	4b7a      	ldr	r3, [pc, #488]	; (80123d8 <tcp_receive+0x274>)
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	89db      	ldrh	r3, [r3, #14]
 80121f2:	b29a      	uxth	r2, r3
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80121fa:	429a      	cmp	r2, r3
 80121fc:	d91c      	bls.n	8012238 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80121fe:	4b76      	ldr	r3, [pc, #472]	; (80123d8 <tcp_receive+0x274>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	89db      	ldrh	r3, [r3, #14]
 8012204:	b29a      	uxth	r2, r3
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012218:	429a      	cmp	r2, r3
 801221a:	d205      	bcs.n	8012228 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8012228:	4b69      	ldr	r3, [pc, #420]	; (80123d0 <tcp_receive+0x26c>)
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012230:	4b68      	ldr	r3, [pc, #416]	; (80123d4 <tcp_receive+0x270>)
 8012232:	681a      	ldr	r2, [r3, #0]
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012238:	4b66      	ldr	r3, [pc, #408]	; (80123d4 <tcp_receive+0x270>)
 801223a:	681a      	ldr	r2, [r3, #0]
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012240:	1ad3      	subs	r3, r2, r3
 8012242:	2b00      	cmp	r3, #0
 8012244:	dc58      	bgt.n	80122f8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012246:	4b65      	ldr	r3, [pc, #404]	; (80123dc <tcp_receive+0x278>)
 8012248:	881b      	ldrh	r3, [r3, #0]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d14b      	bne.n	80122e6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012252:	687a      	ldr	r2, [r7, #4]
 8012254:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8012258:	4413      	add	r3, r2
 801225a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801225c:	429a      	cmp	r2, r3
 801225e:	d142      	bne.n	80122e6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012266:	2b00      	cmp	r3, #0
 8012268:	db3d      	blt.n	80122e6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801226e:	4b59      	ldr	r3, [pc, #356]	; (80123d4 <tcp_receive+0x270>)
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	429a      	cmp	r2, r3
 8012274:	d137      	bne.n	80122e6 <tcp_receive+0x182>
              found_dupack = 1;
 8012276:	2301      	movs	r3, #1
 8012278:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012280:	2bff      	cmp	r3, #255	; 0xff
 8012282:	d007      	beq.n	8012294 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801228a:	3301      	adds	r3, #1
 801228c:	b2da      	uxtb	r2, r3
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801229a:	2b03      	cmp	r3, #3
 801229c:	d91b      	bls.n	80122d6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122a8:	4413      	add	r3, r2
 80122aa:	b29a      	uxth	r2, r3
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d30a      	bcc.n	80122cc <tcp_receive+0x168>
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122c0:	4413      	add	r3, r2
 80122c2:	b29a      	uxth	r2, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80122ca:	e004      	b.n	80122d6 <tcp_receive+0x172>
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80122dc:	2b02      	cmp	r3, #2
 80122de:	d902      	bls.n	80122e6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f002 fb43 	bl	801496c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80122e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	f040 8161 	bne.w	80125b0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2200      	movs	r2, #0
 80122f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80122f6:	e15b      	b.n	80125b0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80122f8:	4b36      	ldr	r3, [pc, #216]	; (80123d4 <tcp_receive+0x270>)
 80122fa:	681a      	ldr	r2, [r3, #0]
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012300:	1ad3      	subs	r3, r2, r3
 8012302:	3b01      	subs	r3, #1
 8012304:	2b00      	cmp	r3, #0
 8012306:	f2c0 814e 	blt.w	80125a6 <tcp_receive+0x442>
 801230a:	4b32      	ldr	r3, [pc, #200]	; (80123d4 <tcp_receive+0x270>)
 801230c:	681a      	ldr	r2, [r3, #0]
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012312:	1ad3      	subs	r3, r2, r3
 8012314:	2b00      	cmp	r3, #0
 8012316:	f300 8146 	bgt.w	80125a6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	8b5b      	ldrh	r3, [r3, #26]
 801231e:	f003 0304 	and.w	r3, r3, #4
 8012322:	2b00      	cmp	r3, #0
 8012324:	d010      	beq.n	8012348 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	8b5b      	ldrh	r3, [r3, #26]
 801232a:	f023 0304 	bic.w	r3, r3, #4
 801232e:	b29a      	uxth	r2, r3
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2200      	movs	r2, #0
 8012344:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	2200      	movs	r2, #0
 801234c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012356:	10db      	asrs	r3, r3, #3
 8012358:	b21b      	sxth	r3, r3
 801235a:	b29a      	uxth	r2, r3
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012362:	b29b      	uxth	r3, r3
 8012364:	4413      	add	r3, r2
 8012366:	b29b      	uxth	r3, r3
 8012368:	b21a      	sxth	r2, r3
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012370:	4b18      	ldr	r3, [pc, #96]	; (80123d4 <tcp_receive+0x270>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	b29a      	uxth	r2, r3
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801237a:	b29b      	uxth	r3, r3
 801237c:	1ad3      	subs	r3, r2, r3
 801237e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2200      	movs	r2, #0
 8012384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012388:	4b12      	ldr	r3, [pc, #72]	; (80123d4 <tcp_receive+0x270>)
 801238a:	681a      	ldr	r2, [r3, #0]
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	7d1b      	ldrb	r3, [r3, #20]
 8012394:	2b03      	cmp	r3, #3
 8012396:	f240 8097 	bls.w	80124c8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80123a6:	429a      	cmp	r2, r3
 80123a8:	d245      	bcs.n	8012436 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	8b5b      	ldrh	r3, [r3, #26]
 80123ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d014      	beq.n	80123e0 <tcp_receive+0x27c>
 80123b6:	2301      	movs	r3, #1
 80123b8:	e013      	b.n	80123e2 <tcp_receive+0x27e>
 80123ba:	bf00      	nop
 80123bc:	08020718 	.word	0x08020718
 80123c0:	08020a48 	.word	0x08020a48
 80123c4:	08020764 	.word	0x08020764
 80123c8:	08020a64 	.word	0x08020a64
 80123cc:	20011400 	.word	0x20011400
 80123d0:	200113f4 	.word	0x200113f4
 80123d4:	200113f8 	.word	0x200113f8
 80123d8:	200113e4 	.word	0x200113e4
 80123dc:	200113fe 	.word	0x200113fe
 80123e0:	2302      	movs	r3, #2
 80123e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80123e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80123ea:	b29a      	uxth	r2, r3
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80123f0:	fb12 f303 	smulbb	r3, r2, r3
 80123f4:	b29b      	uxth	r3, r3
 80123f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80123f8:	4293      	cmp	r3, r2
 80123fa:	bf28      	it	cs
 80123fc:	4613      	movcs	r3, r2
 80123fe:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012406:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012408:	4413      	add	r3, r2
 801240a:	b29a      	uxth	r2, r3
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012412:	429a      	cmp	r2, r3
 8012414:	d309      	bcc.n	801242a <tcp_receive+0x2c6>
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801241c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801241e:	4413      	add	r3, r2
 8012420:	b29a      	uxth	r2, r3
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012428:	e04e      	b.n	80124c8 <tcp_receive+0x364>
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012430:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012434:	e048      	b.n	80124c8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801243c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801243e:	4413      	add	r3, r2
 8012440:	b29a      	uxth	r2, r3
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012448:	429a      	cmp	r2, r3
 801244a:	d309      	bcc.n	8012460 <tcp_receive+0x2fc>
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012452:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012454:	4413      	add	r3, r2
 8012456:	b29a      	uxth	r2, r3
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801245e:	e004      	b.n	801246a <tcp_receive+0x306>
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012466:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012476:	429a      	cmp	r2, r3
 8012478:	d326      	bcc.n	80124c8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012486:	1ad3      	subs	r3, r2, r3
 8012488:	b29a      	uxth	r2, r3
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801249a:	4413      	add	r3, r2
 801249c:	b29a      	uxth	r2, r3
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80124a4:	429a      	cmp	r2, r3
 80124a6:	d30a      	bcc.n	80124be <tcp_receive+0x35a>
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80124b2:	4413      	add	r3, r2
 80124b4:	b29a      	uxth	r2, r3
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80124bc:	e004      	b.n	80124c8 <tcp_receive+0x364>
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124d0:	4a98      	ldr	r2, [pc, #608]	; (8012734 <tcp_receive+0x5d0>)
 80124d2:	6878      	ldr	r0, [r7, #4]
 80124d4:	f7ff fdca 	bl	801206c <tcp_free_acked_segments>
 80124d8:	4602      	mov	r2, r0
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124e6:	4a94      	ldr	r2, [pc, #592]	; (8012738 <tcp_receive+0x5d4>)
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	f7ff fdbf 	bl	801206c <tcp_free_acked_segments>
 80124ee:	4602      	mov	r2, r0
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d104      	bne.n	8012506 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012502:	861a      	strh	r2, [r3, #48]	; 0x30
 8012504:	e002      	b.n	801250c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	2200      	movs	r2, #0
 801250a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2200      	movs	r2, #0
 8012510:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012516:	2b00      	cmp	r3, #0
 8012518:	d103      	bne.n	8012522 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2200      	movs	r2, #0
 801251e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012528:	4b84      	ldr	r3, [pc, #528]	; (801273c <tcp_receive+0x5d8>)
 801252a:	881b      	ldrh	r3, [r3, #0]
 801252c:	4413      	add	r3, r2
 801252e:	b29a      	uxth	r2, r3
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	8b5b      	ldrh	r3, [r3, #26]
 801253a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801253e:	2b00      	cmp	r3, #0
 8012540:	d035      	beq.n	80125ae <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012546:	2b00      	cmp	r3, #0
 8012548:	d118      	bne.n	801257c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801254e:	2b00      	cmp	r3, #0
 8012550:	d00c      	beq.n	801256c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801255a:	68db      	ldr	r3, [r3, #12]
 801255c:	685b      	ldr	r3, [r3, #4]
 801255e:	4618      	mov	r0, r3
 8012560:	f7fa fe9f 	bl	800d2a2 <lwip_htonl>
 8012564:	4603      	mov	r3, r0
 8012566:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012568:	2b00      	cmp	r3, #0
 801256a:	dc20      	bgt.n	80125ae <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	8b5b      	ldrh	r3, [r3, #26]
 8012570:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012574:	b29a      	uxth	r2, r3
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801257a:	e018      	b.n	80125ae <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012584:	68db      	ldr	r3, [r3, #12]
 8012586:	685b      	ldr	r3, [r3, #4]
 8012588:	4618      	mov	r0, r3
 801258a:	f7fa fe8a 	bl	800d2a2 <lwip_htonl>
 801258e:	4603      	mov	r3, r0
 8012590:	1ae3      	subs	r3, r4, r3
 8012592:	2b00      	cmp	r3, #0
 8012594:	dc0b      	bgt.n	80125ae <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	8b5b      	ldrh	r3, [r3, #26]
 801259a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801259e:	b29a      	uxth	r2, r3
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80125a4:	e003      	b.n	80125ae <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	f002 fbce 	bl	8014d48 <tcp_send_empty_ack>
 80125ac:	e000      	b.n	80125b0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80125ae:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d05b      	beq.n	8012670 <tcp_receive+0x50c>
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80125bc:	4b60      	ldr	r3, [pc, #384]	; (8012740 <tcp_receive+0x5dc>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	1ad3      	subs	r3, r2, r3
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	da54      	bge.n	8012670 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80125c6:	4b5f      	ldr	r3, [pc, #380]	; (8012744 <tcp_receive+0x5e0>)
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	b29a      	uxth	r2, r3
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125d0:	b29b      	uxth	r3, r3
 80125d2:	1ad3      	subs	r3, r2, r3
 80125d4:	b29b      	uxth	r3, r3
 80125d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80125da:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80125e4:	10db      	asrs	r3, r3, #3
 80125e6:	b21b      	sxth	r3, r3
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	1ad3      	subs	r3, r2, r3
 80125ec:	b29b      	uxth	r3, r3
 80125ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80125f8:	b29a      	uxth	r2, r3
 80125fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80125fe:	4413      	add	r3, r2
 8012600:	b29b      	uxth	r3, r3
 8012602:	b21a      	sxth	r2, r3
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012608:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801260c:	2b00      	cmp	r3, #0
 801260e:	da05      	bge.n	801261c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012610:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012614:	425b      	negs	r3, r3
 8012616:	b29b      	uxth	r3, r3
 8012618:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801261c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012626:	109b      	asrs	r3, r3, #2
 8012628:	b21b      	sxth	r3, r3
 801262a:	b29b      	uxth	r3, r3
 801262c:	1ad3      	subs	r3, r2, r3
 801262e:	b29b      	uxth	r3, r3
 8012630:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801263a:	b29a      	uxth	r2, r3
 801263c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012640:	4413      	add	r3, r2
 8012642:	b29b      	uxth	r3, r3
 8012644:	b21a      	sxth	r2, r3
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012650:	10db      	asrs	r3, r3, #3
 8012652:	b21b      	sxth	r3, r3
 8012654:	b29a      	uxth	r2, r3
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801265c:	b29b      	uxth	r3, r3
 801265e:	4413      	add	r3, r2
 8012660:	b29b      	uxth	r3, r3
 8012662:	b21a      	sxth	r2, r3
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2200      	movs	r2, #0
 801266e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012670:	4b35      	ldr	r3, [pc, #212]	; (8012748 <tcp_receive+0x5e4>)
 8012672:	881b      	ldrh	r3, [r3, #0]
 8012674:	2b00      	cmp	r3, #0
 8012676:	f000 84e2 	beq.w	801303e <tcp_receive+0xeda>
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	7d1b      	ldrb	r3, [r3, #20]
 801267e:	2b06      	cmp	r3, #6
 8012680:	f200 84dd 	bhi.w	801303e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012688:	4b30      	ldr	r3, [pc, #192]	; (801274c <tcp_receive+0x5e8>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	1ad3      	subs	r3, r2, r3
 801268e:	3b01      	subs	r3, #1
 8012690:	2b00      	cmp	r3, #0
 8012692:	f2c0 808f 	blt.w	80127b4 <tcp_receive+0x650>
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801269a:	4b2b      	ldr	r3, [pc, #172]	; (8012748 <tcp_receive+0x5e4>)
 801269c:	881b      	ldrh	r3, [r3, #0]
 801269e:	4619      	mov	r1, r3
 80126a0:	4b2a      	ldr	r3, [pc, #168]	; (801274c <tcp_receive+0x5e8>)
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	440b      	add	r3, r1
 80126a6:	1ad3      	subs	r3, r2, r3
 80126a8:	3301      	adds	r3, #1
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	f300 8082 	bgt.w	80127b4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80126b0:	4b27      	ldr	r3, [pc, #156]	; (8012750 <tcp_receive+0x5ec>)
 80126b2:	685b      	ldr	r3, [r3, #4]
 80126b4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80126ba:	4b24      	ldr	r3, [pc, #144]	; (801274c <tcp_receive+0x5e8>)
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	1ad3      	subs	r3, r2, r3
 80126c0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80126c2:	4b23      	ldr	r3, [pc, #140]	; (8012750 <tcp_receive+0x5ec>)
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d106      	bne.n	80126d8 <tcp_receive+0x574>
 80126ca:	4b22      	ldr	r3, [pc, #136]	; (8012754 <tcp_receive+0x5f0>)
 80126cc:	f240 5294 	movw	r2, #1428	; 0x594
 80126d0:	4921      	ldr	r1, [pc, #132]	; (8012758 <tcp_receive+0x5f4>)
 80126d2:	4822      	ldr	r0, [pc, #136]	; (801275c <tcp_receive+0x5f8>)
 80126d4:	f00b f84c 	bl	801d770 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80126d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80126de:	4293      	cmp	r3, r2
 80126e0:	d906      	bls.n	80126f0 <tcp_receive+0x58c>
 80126e2:	4b1c      	ldr	r3, [pc, #112]	; (8012754 <tcp_receive+0x5f0>)
 80126e4:	f240 5295 	movw	r2, #1429	; 0x595
 80126e8:	491d      	ldr	r1, [pc, #116]	; (8012760 <tcp_receive+0x5fc>)
 80126ea:	481c      	ldr	r0, [pc, #112]	; (801275c <tcp_receive+0x5f8>)
 80126ec:	f00b f840 	bl	801d770 <iprintf>
      off = (u16_t)off32;
 80126f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80126f6:	4b16      	ldr	r3, [pc, #88]	; (8012750 <tcp_receive+0x5ec>)
 80126f8:	685b      	ldr	r3, [r3, #4]
 80126fa:	891b      	ldrh	r3, [r3, #8]
 80126fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012700:	429a      	cmp	r2, r3
 8012702:	d906      	bls.n	8012712 <tcp_receive+0x5ae>
 8012704:	4b13      	ldr	r3, [pc, #76]	; (8012754 <tcp_receive+0x5f0>)
 8012706:	f240 5297 	movw	r2, #1431	; 0x597
 801270a:	4916      	ldr	r1, [pc, #88]	; (8012764 <tcp_receive+0x600>)
 801270c:	4813      	ldr	r0, [pc, #76]	; (801275c <tcp_receive+0x5f8>)
 801270e:	f00b f82f 	bl	801d770 <iprintf>
      inseg.len -= off;
 8012712:	4b0f      	ldr	r3, [pc, #60]	; (8012750 <tcp_receive+0x5ec>)
 8012714:	891a      	ldrh	r2, [r3, #8]
 8012716:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801271a:	1ad3      	subs	r3, r2, r3
 801271c:	b29a      	uxth	r2, r3
 801271e:	4b0c      	ldr	r3, [pc, #48]	; (8012750 <tcp_receive+0x5ec>)
 8012720:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012722:	4b0b      	ldr	r3, [pc, #44]	; (8012750 <tcp_receive+0x5ec>)
 8012724:	685b      	ldr	r3, [r3, #4]
 8012726:	891a      	ldrh	r2, [r3, #8]
 8012728:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801272c:	1ad3      	subs	r3, r2, r3
 801272e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012730:	e02a      	b.n	8012788 <tcp_receive+0x624>
 8012732:	bf00      	nop
 8012734:	08020a80 	.word	0x08020a80
 8012738:	08020a88 	.word	0x08020a88
 801273c:	200113fc 	.word	0x200113fc
 8012740:	200113f8 	.word	0x200113f8
 8012744:	200113bc 	.word	0x200113bc
 8012748:	200113fe 	.word	0x200113fe
 801274c:	200113f4 	.word	0x200113f4
 8012750:	200113d4 	.word	0x200113d4
 8012754:	08020718 	.word	0x08020718
 8012758:	08020a90 	.word	0x08020a90
 801275c:	08020764 	.word	0x08020764
 8012760:	08020aa0 	.word	0x08020aa0
 8012764:	08020ab0 	.word	0x08020ab0
        off -= p->len;
 8012768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801276a:	895b      	ldrh	r3, [r3, #10]
 801276c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012770:	1ad3      	subs	r3, r2, r3
 8012772:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012778:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801277a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801277c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801277e:	2200      	movs	r2, #0
 8012780:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801278a:	895b      	ldrh	r3, [r3, #10]
 801278c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012790:	429a      	cmp	r2, r3
 8012792:	d8e9      	bhi.n	8012768 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012794:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012798:	4619      	mov	r1, r3
 801279a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801279c:	f7fc f8e8 	bl	800e970 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127a4:	4a91      	ldr	r2, [pc, #580]	; (80129ec <tcp_receive+0x888>)
 80127a6:	6013      	str	r3, [r2, #0]
 80127a8:	4b91      	ldr	r3, [pc, #580]	; (80129f0 <tcp_receive+0x88c>)
 80127aa:	68db      	ldr	r3, [r3, #12]
 80127ac:	4a8f      	ldr	r2, [pc, #572]	; (80129ec <tcp_receive+0x888>)
 80127ae:	6812      	ldr	r2, [r2, #0]
 80127b0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80127b2:	e00d      	b.n	80127d0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80127b4:	4b8d      	ldr	r3, [pc, #564]	; (80129ec <tcp_receive+0x888>)
 80127b6:	681a      	ldr	r2, [r3, #0]
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127bc:	1ad3      	subs	r3, r2, r3
 80127be:	2b00      	cmp	r3, #0
 80127c0:	da06      	bge.n	80127d0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	8b5b      	ldrh	r3, [r3, #26]
 80127c6:	f043 0302 	orr.w	r3, r3, #2
 80127ca:	b29a      	uxth	r2, r3
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80127d0:	4b86      	ldr	r3, [pc, #536]	; (80129ec <tcp_receive+0x888>)
 80127d2:	681a      	ldr	r2, [r3, #0]
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127d8:	1ad3      	subs	r3, r2, r3
 80127da:	2b00      	cmp	r3, #0
 80127dc:	f2c0 842a 	blt.w	8013034 <tcp_receive+0xed0>
 80127e0:	4b82      	ldr	r3, [pc, #520]	; (80129ec <tcp_receive+0x888>)
 80127e2:	681a      	ldr	r2, [r3, #0]
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127e8:	6879      	ldr	r1, [r7, #4]
 80127ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80127ec:	440b      	add	r3, r1
 80127ee:	1ad3      	subs	r3, r2, r3
 80127f0:	3301      	adds	r3, #1
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	f300 841e 	bgt.w	8013034 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80127fc:	4b7b      	ldr	r3, [pc, #492]	; (80129ec <tcp_receive+0x888>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	429a      	cmp	r2, r3
 8012802:	f040 829a 	bne.w	8012d3a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012806:	4b7a      	ldr	r3, [pc, #488]	; (80129f0 <tcp_receive+0x88c>)
 8012808:	891c      	ldrh	r4, [r3, #8]
 801280a:	4b79      	ldr	r3, [pc, #484]	; (80129f0 <tcp_receive+0x88c>)
 801280c:	68db      	ldr	r3, [r3, #12]
 801280e:	899b      	ldrh	r3, [r3, #12]
 8012810:	b29b      	uxth	r3, r3
 8012812:	4618      	mov	r0, r3
 8012814:	f7fa fd30 	bl	800d278 <lwip_htons>
 8012818:	4603      	mov	r3, r0
 801281a:	b2db      	uxtb	r3, r3
 801281c:	f003 0303 	and.w	r3, r3, #3
 8012820:	2b00      	cmp	r3, #0
 8012822:	d001      	beq.n	8012828 <tcp_receive+0x6c4>
 8012824:	2301      	movs	r3, #1
 8012826:	e000      	b.n	801282a <tcp_receive+0x6c6>
 8012828:	2300      	movs	r3, #0
 801282a:	4423      	add	r3, r4
 801282c:	b29a      	uxth	r2, r3
 801282e:	4b71      	ldr	r3, [pc, #452]	; (80129f4 <tcp_receive+0x890>)
 8012830:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012836:	4b6f      	ldr	r3, [pc, #444]	; (80129f4 <tcp_receive+0x890>)
 8012838:	881b      	ldrh	r3, [r3, #0]
 801283a:	429a      	cmp	r2, r3
 801283c:	d275      	bcs.n	801292a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801283e:	4b6c      	ldr	r3, [pc, #432]	; (80129f0 <tcp_receive+0x88c>)
 8012840:	68db      	ldr	r3, [r3, #12]
 8012842:	899b      	ldrh	r3, [r3, #12]
 8012844:	b29b      	uxth	r3, r3
 8012846:	4618      	mov	r0, r3
 8012848:	f7fa fd16 	bl	800d278 <lwip_htons>
 801284c:	4603      	mov	r3, r0
 801284e:	b2db      	uxtb	r3, r3
 8012850:	f003 0301 	and.w	r3, r3, #1
 8012854:	2b00      	cmp	r3, #0
 8012856:	d01f      	beq.n	8012898 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012858:	4b65      	ldr	r3, [pc, #404]	; (80129f0 <tcp_receive+0x88c>)
 801285a:	68db      	ldr	r3, [r3, #12]
 801285c:	899b      	ldrh	r3, [r3, #12]
 801285e:	b29b      	uxth	r3, r3
 8012860:	b21b      	sxth	r3, r3
 8012862:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012866:	b21c      	sxth	r4, r3
 8012868:	4b61      	ldr	r3, [pc, #388]	; (80129f0 <tcp_receive+0x88c>)
 801286a:	68db      	ldr	r3, [r3, #12]
 801286c:	899b      	ldrh	r3, [r3, #12]
 801286e:	b29b      	uxth	r3, r3
 8012870:	4618      	mov	r0, r3
 8012872:	f7fa fd01 	bl	800d278 <lwip_htons>
 8012876:	4603      	mov	r3, r0
 8012878:	b2db      	uxtb	r3, r3
 801287a:	b29b      	uxth	r3, r3
 801287c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012880:	b29b      	uxth	r3, r3
 8012882:	4618      	mov	r0, r3
 8012884:	f7fa fcf8 	bl	800d278 <lwip_htons>
 8012888:	4603      	mov	r3, r0
 801288a:	b21b      	sxth	r3, r3
 801288c:	4323      	orrs	r3, r4
 801288e:	b21a      	sxth	r2, r3
 8012890:	4b57      	ldr	r3, [pc, #348]	; (80129f0 <tcp_receive+0x88c>)
 8012892:	68db      	ldr	r3, [r3, #12]
 8012894:	b292      	uxth	r2, r2
 8012896:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801289c:	4b54      	ldr	r3, [pc, #336]	; (80129f0 <tcp_receive+0x88c>)
 801289e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80128a0:	4b53      	ldr	r3, [pc, #332]	; (80129f0 <tcp_receive+0x88c>)
 80128a2:	68db      	ldr	r3, [r3, #12]
 80128a4:	899b      	ldrh	r3, [r3, #12]
 80128a6:	b29b      	uxth	r3, r3
 80128a8:	4618      	mov	r0, r3
 80128aa:	f7fa fce5 	bl	800d278 <lwip_htons>
 80128ae:	4603      	mov	r3, r0
 80128b0:	b2db      	uxtb	r3, r3
 80128b2:	f003 0302 	and.w	r3, r3, #2
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d005      	beq.n	80128c6 <tcp_receive+0x762>
            inseg.len -= 1;
 80128ba:	4b4d      	ldr	r3, [pc, #308]	; (80129f0 <tcp_receive+0x88c>)
 80128bc:	891b      	ldrh	r3, [r3, #8]
 80128be:	3b01      	subs	r3, #1
 80128c0:	b29a      	uxth	r2, r3
 80128c2:	4b4b      	ldr	r3, [pc, #300]	; (80129f0 <tcp_receive+0x88c>)
 80128c4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80128c6:	4b4a      	ldr	r3, [pc, #296]	; (80129f0 <tcp_receive+0x88c>)
 80128c8:	685b      	ldr	r3, [r3, #4]
 80128ca:	4a49      	ldr	r2, [pc, #292]	; (80129f0 <tcp_receive+0x88c>)
 80128cc:	8912      	ldrh	r2, [r2, #8]
 80128ce:	4611      	mov	r1, r2
 80128d0:	4618      	mov	r0, r3
 80128d2:	f7fb ff4d 	bl	800e770 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80128d6:	4b46      	ldr	r3, [pc, #280]	; (80129f0 <tcp_receive+0x88c>)
 80128d8:	891c      	ldrh	r4, [r3, #8]
 80128da:	4b45      	ldr	r3, [pc, #276]	; (80129f0 <tcp_receive+0x88c>)
 80128dc:	68db      	ldr	r3, [r3, #12]
 80128de:	899b      	ldrh	r3, [r3, #12]
 80128e0:	b29b      	uxth	r3, r3
 80128e2:	4618      	mov	r0, r3
 80128e4:	f7fa fcc8 	bl	800d278 <lwip_htons>
 80128e8:	4603      	mov	r3, r0
 80128ea:	b2db      	uxtb	r3, r3
 80128ec:	f003 0303 	and.w	r3, r3, #3
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d001      	beq.n	80128f8 <tcp_receive+0x794>
 80128f4:	2301      	movs	r3, #1
 80128f6:	e000      	b.n	80128fa <tcp_receive+0x796>
 80128f8:	2300      	movs	r3, #0
 80128fa:	4423      	add	r3, r4
 80128fc:	b29a      	uxth	r2, r3
 80128fe:	4b3d      	ldr	r3, [pc, #244]	; (80129f4 <tcp_receive+0x890>)
 8012900:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012902:	4b3c      	ldr	r3, [pc, #240]	; (80129f4 <tcp_receive+0x890>)
 8012904:	881b      	ldrh	r3, [r3, #0]
 8012906:	461a      	mov	r2, r3
 8012908:	4b38      	ldr	r3, [pc, #224]	; (80129ec <tcp_receive+0x888>)
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	441a      	add	r2, r3
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012912:	6879      	ldr	r1, [r7, #4]
 8012914:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012916:	440b      	add	r3, r1
 8012918:	429a      	cmp	r2, r3
 801291a:	d006      	beq.n	801292a <tcp_receive+0x7c6>
 801291c:	4b36      	ldr	r3, [pc, #216]	; (80129f8 <tcp_receive+0x894>)
 801291e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012922:	4936      	ldr	r1, [pc, #216]	; (80129fc <tcp_receive+0x898>)
 8012924:	4836      	ldr	r0, [pc, #216]	; (8012a00 <tcp_receive+0x89c>)
 8012926:	f00a ff23 	bl	801d770 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801292e:	2b00      	cmp	r3, #0
 8012930:	f000 80e7 	beq.w	8012b02 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012934:	4b2e      	ldr	r3, [pc, #184]	; (80129f0 <tcp_receive+0x88c>)
 8012936:	68db      	ldr	r3, [r3, #12]
 8012938:	899b      	ldrh	r3, [r3, #12]
 801293a:	b29b      	uxth	r3, r3
 801293c:	4618      	mov	r0, r3
 801293e:	f7fa fc9b 	bl	800d278 <lwip_htons>
 8012942:	4603      	mov	r3, r0
 8012944:	b2db      	uxtb	r3, r3
 8012946:	f003 0301 	and.w	r3, r3, #1
 801294a:	2b00      	cmp	r3, #0
 801294c:	d010      	beq.n	8012970 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801294e:	e00a      	b.n	8012966 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012954:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801295a:	681a      	ldr	r2, [r3, #0]
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012960:	68f8      	ldr	r0, [r7, #12]
 8012962:	f7fd fcc4 	bl	80102ee <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801296a:	2b00      	cmp	r3, #0
 801296c:	d1f0      	bne.n	8012950 <tcp_receive+0x7ec>
 801296e:	e0c8      	b.n	8012b02 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012974:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012976:	e052      	b.n	8012a1e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801297a:	68db      	ldr	r3, [r3, #12]
 801297c:	899b      	ldrh	r3, [r3, #12]
 801297e:	b29b      	uxth	r3, r3
 8012980:	4618      	mov	r0, r3
 8012982:	f7fa fc79 	bl	800d278 <lwip_htons>
 8012986:	4603      	mov	r3, r0
 8012988:	b2db      	uxtb	r3, r3
 801298a:	f003 0301 	and.w	r3, r3, #1
 801298e:	2b00      	cmp	r3, #0
 8012990:	d03d      	beq.n	8012a0e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012992:	4b17      	ldr	r3, [pc, #92]	; (80129f0 <tcp_receive+0x88c>)
 8012994:	68db      	ldr	r3, [r3, #12]
 8012996:	899b      	ldrh	r3, [r3, #12]
 8012998:	b29b      	uxth	r3, r3
 801299a:	4618      	mov	r0, r3
 801299c:	f7fa fc6c 	bl	800d278 <lwip_htons>
 80129a0:	4603      	mov	r3, r0
 80129a2:	b2db      	uxtb	r3, r3
 80129a4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d130      	bne.n	8012a0e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80129ac:	4b10      	ldr	r3, [pc, #64]	; (80129f0 <tcp_receive+0x88c>)
 80129ae:	68db      	ldr	r3, [r3, #12]
 80129b0:	899b      	ldrh	r3, [r3, #12]
 80129b2:	b29c      	uxth	r4, r3
 80129b4:	2001      	movs	r0, #1
 80129b6:	f7fa fc5f 	bl	800d278 <lwip_htons>
 80129ba:	4603      	mov	r3, r0
 80129bc:	461a      	mov	r2, r3
 80129be:	4b0c      	ldr	r3, [pc, #48]	; (80129f0 <tcp_receive+0x88c>)
 80129c0:	68db      	ldr	r3, [r3, #12]
 80129c2:	4322      	orrs	r2, r4
 80129c4:	b292      	uxth	r2, r2
 80129c6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80129c8:	4b09      	ldr	r3, [pc, #36]	; (80129f0 <tcp_receive+0x88c>)
 80129ca:	891c      	ldrh	r4, [r3, #8]
 80129cc:	4b08      	ldr	r3, [pc, #32]	; (80129f0 <tcp_receive+0x88c>)
 80129ce:	68db      	ldr	r3, [r3, #12]
 80129d0:	899b      	ldrh	r3, [r3, #12]
 80129d2:	b29b      	uxth	r3, r3
 80129d4:	4618      	mov	r0, r3
 80129d6:	f7fa fc4f 	bl	800d278 <lwip_htons>
 80129da:	4603      	mov	r3, r0
 80129dc:	b2db      	uxtb	r3, r3
 80129de:	f003 0303 	and.w	r3, r3, #3
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d00e      	beq.n	8012a04 <tcp_receive+0x8a0>
 80129e6:	2301      	movs	r3, #1
 80129e8:	e00d      	b.n	8012a06 <tcp_receive+0x8a2>
 80129ea:	bf00      	nop
 80129ec:	200113f4 	.word	0x200113f4
 80129f0:	200113d4 	.word	0x200113d4
 80129f4:	200113fe 	.word	0x200113fe
 80129f8:	08020718 	.word	0x08020718
 80129fc:	08020ac0 	.word	0x08020ac0
 8012a00:	08020764 	.word	0x08020764
 8012a04:	2300      	movs	r3, #0
 8012a06:	4423      	add	r3, r4
 8012a08:	b29a      	uxth	r2, r3
 8012a0a:	4b98      	ldr	r3, [pc, #608]	; (8012c6c <tcp_receive+0xb08>)
 8012a0c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a10:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012a18:	6938      	ldr	r0, [r7, #16]
 8012a1a:	f7fd fc68 	bl	80102ee <tcp_seg_free>
            while (next &&
 8012a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d00e      	beq.n	8012a42 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012a24:	4b91      	ldr	r3, [pc, #580]	; (8012c6c <tcp_receive+0xb08>)
 8012a26:	881b      	ldrh	r3, [r3, #0]
 8012a28:	461a      	mov	r2, r3
 8012a2a:	4b91      	ldr	r3, [pc, #580]	; (8012c70 <tcp_receive+0xb0c>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	441a      	add	r2, r3
 8012a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a32:	68db      	ldr	r3, [r3, #12]
 8012a34:	685b      	ldr	r3, [r3, #4]
 8012a36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012a38:	8909      	ldrh	r1, [r1, #8]
 8012a3a:	440b      	add	r3, r1
 8012a3c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	da9a      	bge.n	8012978 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d059      	beq.n	8012afc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8012a48:	4b88      	ldr	r3, [pc, #544]	; (8012c6c <tcp_receive+0xb08>)
 8012a4a:	881b      	ldrh	r3, [r3, #0]
 8012a4c:	461a      	mov	r2, r3
 8012a4e:	4b88      	ldr	r3, [pc, #544]	; (8012c70 <tcp_receive+0xb0c>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	441a      	add	r2, r3
 8012a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a56:	68db      	ldr	r3, [r3, #12]
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	dd4d      	ble.n	8012afc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a62:	68db      	ldr	r3, [r3, #12]
 8012a64:	685b      	ldr	r3, [r3, #4]
 8012a66:	b29a      	uxth	r2, r3
 8012a68:	4b81      	ldr	r3, [pc, #516]	; (8012c70 <tcp_receive+0xb0c>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	b29b      	uxth	r3, r3
 8012a6e:	1ad3      	subs	r3, r2, r3
 8012a70:	b29a      	uxth	r2, r3
 8012a72:	4b80      	ldr	r3, [pc, #512]	; (8012c74 <tcp_receive+0xb10>)
 8012a74:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012a76:	4b7f      	ldr	r3, [pc, #508]	; (8012c74 <tcp_receive+0xb10>)
 8012a78:	68db      	ldr	r3, [r3, #12]
 8012a7a:	899b      	ldrh	r3, [r3, #12]
 8012a7c:	b29b      	uxth	r3, r3
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f7fa fbfa 	bl	800d278 <lwip_htons>
 8012a84:	4603      	mov	r3, r0
 8012a86:	b2db      	uxtb	r3, r3
 8012a88:	f003 0302 	and.w	r3, r3, #2
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d005      	beq.n	8012a9c <tcp_receive+0x938>
                inseg.len -= 1;
 8012a90:	4b78      	ldr	r3, [pc, #480]	; (8012c74 <tcp_receive+0xb10>)
 8012a92:	891b      	ldrh	r3, [r3, #8]
 8012a94:	3b01      	subs	r3, #1
 8012a96:	b29a      	uxth	r2, r3
 8012a98:	4b76      	ldr	r3, [pc, #472]	; (8012c74 <tcp_receive+0xb10>)
 8012a9a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012a9c:	4b75      	ldr	r3, [pc, #468]	; (8012c74 <tcp_receive+0xb10>)
 8012a9e:	685b      	ldr	r3, [r3, #4]
 8012aa0:	4a74      	ldr	r2, [pc, #464]	; (8012c74 <tcp_receive+0xb10>)
 8012aa2:	8912      	ldrh	r2, [r2, #8]
 8012aa4:	4611      	mov	r1, r2
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f7fb fe62 	bl	800e770 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012aac:	4b71      	ldr	r3, [pc, #452]	; (8012c74 <tcp_receive+0xb10>)
 8012aae:	891c      	ldrh	r4, [r3, #8]
 8012ab0:	4b70      	ldr	r3, [pc, #448]	; (8012c74 <tcp_receive+0xb10>)
 8012ab2:	68db      	ldr	r3, [r3, #12]
 8012ab4:	899b      	ldrh	r3, [r3, #12]
 8012ab6:	b29b      	uxth	r3, r3
 8012ab8:	4618      	mov	r0, r3
 8012aba:	f7fa fbdd 	bl	800d278 <lwip_htons>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	b2db      	uxtb	r3, r3
 8012ac2:	f003 0303 	and.w	r3, r3, #3
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d001      	beq.n	8012ace <tcp_receive+0x96a>
 8012aca:	2301      	movs	r3, #1
 8012acc:	e000      	b.n	8012ad0 <tcp_receive+0x96c>
 8012ace:	2300      	movs	r3, #0
 8012ad0:	4423      	add	r3, r4
 8012ad2:	b29a      	uxth	r2, r3
 8012ad4:	4b65      	ldr	r3, [pc, #404]	; (8012c6c <tcp_receive+0xb08>)
 8012ad6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012ad8:	4b64      	ldr	r3, [pc, #400]	; (8012c6c <tcp_receive+0xb08>)
 8012ada:	881b      	ldrh	r3, [r3, #0]
 8012adc:	461a      	mov	r2, r3
 8012ade:	4b64      	ldr	r3, [pc, #400]	; (8012c70 <tcp_receive+0xb0c>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	441a      	add	r2, r3
 8012ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ae6:	68db      	ldr	r3, [r3, #12]
 8012ae8:	685b      	ldr	r3, [r3, #4]
 8012aea:	429a      	cmp	r2, r3
 8012aec:	d006      	beq.n	8012afc <tcp_receive+0x998>
 8012aee:	4b62      	ldr	r3, [pc, #392]	; (8012c78 <tcp_receive+0xb14>)
 8012af0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012af4:	4961      	ldr	r1, [pc, #388]	; (8012c7c <tcp_receive+0xb18>)
 8012af6:	4862      	ldr	r0, [pc, #392]	; (8012c80 <tcp_receive+0xb1c>)
 8012af8:	f00a fe3a 	bl	801d770 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b00:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012b02:	4b5a      	ldr	r3, [pc, #360]	; (8012c6c <tcp_receive+0xb08>)
 8012b04:	881b      	ldrh	r3, [r3, #0]
 8012b06:	461a      	mov	r2, r3
 8012b08:	4b59      	ldr	r3, [pc, #356]	; (8012c70 <tcp_receive+0xb0c>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	441a      	add	r2, r3
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012b16:	4b55      	ldr	r3, [pc, #340]	; (8012c6c <tcp_receive+0xb08>)
 8012b18:	881b      	ldrh	r3, [r3, #0]
 8012b1a:	429a      	cmp	r2, r3
 8012b1c:	d206      	bcs.n	8012b2c <tcp_receive+0x9c8>
 8012b1e:	4b56      	ldr	r3, [pc, #344]	; (8012c78 <tcp_receive+0xb14>)
 8012b20:	f240 6207 	movw	r2, #1543	; 0x607
 8012b24:	4957      	ldr	r1, [pc, #348]	; (8012c84 <tcp_receive+0xb20>)
 8012b26:	4856      	ldr	r0, [pc, #344]	; (8012c80 <tcp_receive+0xb1c>)
 8012b28:	f00a fe22 	bl	801d770 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012b30:	4b4e      	ldr	r3, [pc, #312]	; (8012c6c <tcp_receive+0xb08>)
 8012b32:	881b      	ldrh	r3, [r3, #0]
 8012b34:	1ad3      	subs	r3, r2, r3
 8012b36:	b29a      	uxth	r2, r3
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012b3c:	6878      	ldr	r0, [r7, #4]
 8012b3e:	f7fc fd99 	bl	800f674 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012b42:	4b4c      	ldr	r3, [pc, #304]	; (8012c74 <tcp_receive+0xb10>)
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	891b      	ldrh	r3, [r3, #8]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d006      	beq.n	8012b5a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8012b4c:	4b49      	ldr	r3, [pc, #292]	; (8012c74 <tcp_receive+0xb10>)
 8012b4e:	685b      	ldr	r3, [r3, #4]
 8012b50:	4a4d      	ldr	r2, [pc, #308]	; (8012c88 <tcp_receive+0xb24>)
 8012b52:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012b54:	4b47      	ldr	r3, [pc, #284]	; (8012c74 <tcp_receive+0xb10>)
 8012b56:	2200      	movs	r2, #0
 8012b58:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012b5a:	4b46      	ldr	r3, [pc, #280]	; (8012c74 <tcp_receive+0xb10>)
 8012b5c:	68db      	ldr	r3, [r3, #12]
 8012b5e:	899b      	ldrh	r3, [r3, #12]
 8012b60:	b29b      	uxth	r3, r3
 8012b62:	4618      	mov	r0, r3
 8012b64:	f7fa fb88 	bl	800d278 <lwip_htons>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	b2db      	uxtb	r3, r3
 8012b6c:	f003 0301 	and.w	r3, r3, #1
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	f000 80b8 	beq.w	8012ce6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012b76:	4b45      	ldr	r3, [pc, #276]	; (8012c8c <tcp_receive+0xb28>)
 8012b78:	781b      	ldrb	r3, [r3, #0]
 8012b7a:	f043 0320 	orr.w	r3, r3, #32
 8012b7e:	b2da      	uxtb	r2, r3
 8012b80:	4b42      	ldr	r3, [pc, #264]	; (8012c8c <tcp_receive+0xb28>)
 8012b82:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012b84:	e0af      	b.n	8012ce6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b8a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b90:	68db      	ldr	r3, [r3, #12]
 8012b92:	685b      	ldr	r3, [r3, #4]
 8012b94:	4a36      	ldr	r2, [pc, #216]	; (8012c70 <tcp_receive+0xb0c>)
 8012b96:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	891b      	ldrh	r3, [r3, #8]
 8012b9c:	461c      	mov	r4, r3
 8012b9e:	68bb      	ldr	r3, [r7, #8]
 8012ba0:	68db      	ldr	r3, [r3, #12]
 8012ba2:	899b      	ldrh	r3, [r3, #12]
 8012ba4:	b29b      	uxth	r3, r3
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f7fa fb66 	bl	800d278 <lwip_htons>
 8012bac:	4603      	mov	r3, r0
 8012bae:	b2db      	uxtb	r3, r3
 8012bb0:	f003 0303 	and.w	r3, r3, #3
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d001      	beq.n	8012bbc <tcp_receive+0xa58>
 8012bb8:	2301      	movs	r3, #1
 8012bba:	e000      	b.n	8012bbe <tcp_receive+0xa5a>
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	191a      	adds	r2, r3, r4
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bc4:	441a      	add	r2, r3
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012bce:	461c      	mov	r4, r3
 8012bd0:	68bb      	ldr	r3, [r7, #8]
 8012bd2:	891b      	ldrh	r3, [r3, #8]
 8012bd4:	461d      	mov	r5, r3
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	68db      	ldr	r3, [r3, #12]
 8012bda:	899b      	ldrh	r3, [r3, #12]
 8012bdc:	b29b      	uxth	r3, r3
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7fa fb4a 	bl	800d278 <lwip_htons>
 8012be4:	4603      	mov	r3, r0
 8012be6:	b2db      	uxtb	r3, r3
 8012be8:	f003 0303 	and.w	r3, r3, #3
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d001      	beq.n	8012bf4 <tcp_receive+0xa90>
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	e000      	b.n	8012bf6 <tcp_receive+0xa92>
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	442b      	add	r3, r5
 8012bf8:	429c      	cmp	r4, r3
 8012bfa:	d206      	bcs.n	8012c0a <tcp_receive+0xaa6>
 8012bfc:	4b1e      	ldr	r3, [pc, #120]	; (8012c78 <tcp_receive+0xb14>)
 8012bfe:	f240 622b 	movw	r2, #1579	; 0x62b
 8012c02:	4923      	ldr	r1, [pc, #140]	; (8012c90 <tcp_receive+0xb2c>)
 8012c04:	481e      	ldr	r0, [pc, #120]	; (8012c80 <tcp_receive+0xb1c>)
 8012c06:	f00a fdb3 	bl	801d770 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012c0a:	68bb      	ldr	r3, [r7, #8]
 8012c0c:	891b      	ldrh	r3, [r3, #8]
 8012c0e:	461c      	mov	r4, r3
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	68db      	ldr	r3, [r3, #12]
 8012c14:	899b      	ldrh	r3, [r3, #12]
 8012c16:	b29b      	uxth	r3, r3
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7fa fb2d 	bl	800d278 <lwip_htons>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	b2db      	uxtb	r3, r3
 8012c22:	f003 0303 	and.w	r3, r3, #3
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d001      	beq.n	8012c2e <tcp_receive+0xaca>
 8012c2a:	2301      	movs	r3, #1
 8012c2c:	e000      	b.n	8012c30 <tcp_receive+0xacc>
 8012c2e:	2300      	movs	r3, #0
 8012c30:	1919      	adds	r1, r3, r4
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012c36:	b28b      	uxth	r3, r1
 8012c38:	1ad3      	subs	r3, r2, r3
 8012c3a:	b29a      	uxth	r2, r3
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012c40:	6878      	ldr	r0, [r7, #4]
 8012c42:	f7fc fd17 	bl	800f674 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012c46:	68bb      	ldr	r3, [r7, #8]
 8012c48:	685b      	ldr	r3, [r3, #4]
 8012c4a:	891b      	ldrh	r3, [r3, #8]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d028      	beq.n	8012ca2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012c50:	4b0d      	ldr	r3, [pc, #52]	; (8012c88 <tcp_receive+0xb24>)
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d01d      	beq.n	8012c94 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8012c58:	4b0b      	ldr	r3, [pc, #44]	; (8012c88 <tcp_receive+0xb24>)
 8012c5a:	681a      	ldr	r2, [r3, #0]
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	685b      	ldr	r3, [r3, #4]
 8012c60:	4619      	mov	r1, r3
 8012c62:	4610      	mov	r0, r2
 8012c64:	f7fb ffd8 	bl	800ec18 <pbuf_cat>
 8012c68:	e018      	b.n	8012c9c <tcp_receive+0xb38>
 8012c6a:	bf00      	nop
 8012c6c:	200113fe 	.word	0x200113fe
 8012c70:	200113f4 	.word	0x200113f4
 8012c74:	200113d4 	.word	0x200113d4
 8012c78:	08020718 	.word	0x08020718
 8012c7c:	08020af8 	.word	0x08020af8
 8012c80:	08020764 	.word	0x08020764
 8012c84:	08020b34 	.word	0x08020b34
 8012c88:	20011404 	.word	0x20011404
 8012c8c:	20011401 	.word	0x20011401
 8012c90:	08020b54 	.word	0x08020b54
            } else {
              recv_data = cseg->p;
 8012c94:	68bb      	ldr	r3, [r7, #8]
 8012c96:	685b      	ldr	r3, [r3, #4]
 8012c98:	4a70      	ldr	r2, [pc, #448]	; (8012e5c <tcp_receive+0xcf8>)
 8012c9a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012c9c:	68bb      	ldr	r3, [r7, #8]
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012ca2:	68bb      	ldr	r3, [r7, #8]
 8012ca4:	68db      	ldr	r3, [r3, #12]
 8012ca6:	899b      	ldrh	r3, [r3, #12]
 8012ca8:	b29b      	uxth	r3, r3
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7fa fae4 	bl	800d278 <lwip_htons>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	b2db      	uxtb	r3, r3
 8012cb4:	f003 0301 	and.w	r3, r3, #1
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d00d      	beq.n	8012cd8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012cbc:	4b68      	ldr	r3, [pc, #416]	; (8012e60 <tcp_receive+0xcfc>)
 8012cbe:	781b      	ldrb	r3, [r3, #0]
 8012cc0:	f043 0320 	orr.w	r3, r3, #32
 8012cc4:	b2da      	uxtb	r2, r3
 8012cc6:	4b66      	ldr	r3, [pc, #408]	; (8012e60 <tcp_receive+0xcfc>)
 8012cc8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	7d1b      	ldrb	r3, [r3, #20]
 8012cce:	2b04      	cmp	r3, #4
 8012cd0:	d102      	bne.n	8012cd8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	2207      	movs	r2, #7
 8012cd6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	681a      	ldr	r2, [r3, #0]
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012ce0:	68b8      	ldr	r0, [r7, #8]
 8012ce2:	f7fd fb04 	bl	80102ee <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d008      	beq.n	8012d00 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012cf2:	68db      	ldr	r3, [r3, #12]
 8012cf4:	685a      	ldr	r2, [r3, #4]
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012cfa:	429a      	cmp	r2, r3
 8012cfc:	f43f af43 	beq.w	8012b86 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	8b5b      	ldrh	r3, [r3, #26]
 8012d04:	f003 0301 	and.w	r3, r3, #1
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d00e      	beq.n	8012d2a <tcp_receive+0xbc6>
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	8b5b      	ldrh	r3, [r3, #26]
 8012d10:	f023 0301 	bic.w	r3, r3, #1
 8012d14:	b29a      	uxth	r2, r3
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	835a      	strh	r2, [r3, #26]
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	8b5b      	ldrh	r3, [r3, #26]
 8012d1e:	f043 0302 	orr.w	r3, r3, #2
 8012d22:	b29a      	uxth	r2, r3
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012d28:	e188      	b.n	801303c <tcp_receive+0xed8>
        tcp_ack(pcb);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	8b5b      	ldrh	r3, [r3, #26]
 8012d2e:	f043 0301 	orr.w	r3, r3, #1
 8012d32:	b29a      	uxth	r2, r3
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012d38:	e180      	b.n	801303c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d106      	bne.n	8012d50 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012d42:	4848      	ldr	r0, [pc, #288]	; (8012e64 <tcp_receive+0xd00>)
 8012d44:	f7fd faec 	bl	8010320 <tcp_seg_copy>
 8012d48:	4602      	mov	r2, r0
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	675a      	str	r2, [r3, #116]	; 0x74
 8012d4e:	e16d      	b.n	801302c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012d50:	2300      	movs	r3, #0
 8012d52:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d58:	63bb      	str	r3, [r7, #56]	; 0x38
 8012d5a:	e157      	b.n	801300c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8012d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d5e:	68db      	ldr	r3, [r3, #12]
 8012d60:	685a      	ldr	r2, [r3, #4]
 8012d62:	4b41      	ldr	r3, [pc, #260]	; (8012e68 <tcp_receive+0xd04>)
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	429a      	cmp	r2, r3
 8012d68:	d11d      	bne.n	8012da6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012d6a:	4b3e      	ldr	r3, [pc, #248]	; (8012e64 <tcp_receive+0xd00>)
 8012d6c:	891a      	ldrh	r2, [r3, #8]
 8012d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d70:	891b      	ldrh	r3, [r3, #8]
 8012d72:	429a      	cmp	r2, r3
 8012d74:	f240 814f 	bls.w	8013016 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012d78:	483a      	ldr	r0, [pc, #232]	; (8012e64 <tcp_receive+0xd00>)
 8012d7a:	f7fd fad1 	bl	8010320 <tcp_seg_copy>
 8012d7e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012d80:	697b      	ldr	r3, [r7, #20]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	f000 8149 	beq.w	801301a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8012d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d003      	beq.n	8012d96 <tcp_receive+0xc32>
                    prev->next = cseg;
 8012d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d90:	697a      	ldr	r2, [r7, #20]
 8012d92:	601a      	str	r2, [r3, #0]
 8012d94:	e002      	b.n	8012d9c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	697a      	ldr	r2, [r7, #20]
 8012d9a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012d9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d9e:	6978      	ldr	r0, [r7, #20]
 8012da0:	f7ff f8dc 	bl	8011f5c <tcp_oos_insert_segment>
                }
                break;
 8012da4:	e139      	b.n	801301a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d117      	bne.n	8012ddc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012dac:	4b2e      	ldr	r3, [pc, #184]	; (8012e68 <tcp_receive+0xd04>)
 8012dae:	681a      	ldr	r2, [r3, #0]
 8012db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db2:	68db      	ldr	r3, [r3, #12]
 8012db4:	685b      	ldr	r3, [r3, #4]
 8012db6:	1ad3      	subs	r3, r2, r3
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	da57      	bge.n	8012e6c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012dbc:	4829      	ldr	r0, [pc, #164]	; (8012e64 <tcp_receive+0xd00>)
 8012dbe:	f7fd faaf 	bl	8010320 <tcp_seg_copy>
 8012dc2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012dc4:	69bb      	ldr	r3, [r7, #24]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	f000 8129 	beq.w	801301e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	69ba      	ldr	r2, [r7, #24]
 8012dd0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012dd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012dd4:	69b8      	ldr	r0, [r7, #24]
 8012dd6:	f7ff f8c1 	bl	8011f5c <tcp_oos_insert_segment>
                  }
                  break;
 8012dda:	e120      	b.n	801301e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012ddc:	4b22      	ldr	r3, [pc, #136]	; (8012e68 <tcp_receive+0xd04>)
 8012dde:	681a      	ldr	r2, [r3, #0]
 8012de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012de2:	68db      	ldr	r3, [r3, #12]
 8012de4:	685b      	ldr	r3, [r3, #4]
 8012de6:	1ad3      	subs	r3, r2, r3
 8012de8:	3b01      	subs	r3, #1
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	db3e      	blt.n	8012e6c <tcp_receive+0xd08>
 8012dee:	4b1e      	ldr	r3, [pc, #120]	; (8012e68 <tcp_receive+0xd04>)
 8012df0:	681a      	ldr	r2, [r3, #0]
 8012df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012df4:	68db      	ldr	r3, [r3, #12]
 8012df6:	685b      	ldr	r3, [r3, #4]
 8012df8:	1ad3      	subs	r3, r2, r3
 8012dfa:	3301      	adds	r3, #1
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	dc35      	bgt.n	8012e6c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012e00:	4818      	ldr	r0, [pc, #96]	; (8012e64 <tcp_receive+0xd00>)
 8012e02:	f7fd fa8d 	bl	8010320 <tcp_seg_copy>
 8012e06:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012e08:	69fb      	ldr	r3, [r7, #28]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	f000 8109 	beq.w	8013022 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e12:	68db      	ldr	r3, [r3, #12]
 8012e14:	685b      	ldr	r3, [r3, #4]
 8012e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e18:	8912      	ldrh	r2, [r2, #8]
 8012e1a:	441a      	add	r2, r3
 8012e1c:	4b12      	ldr	r3, [pc, #72]	; (8012e68 <tcp_receive+0xd04>)
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	1ad3      	subs	r3, r2, r3
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	dd12      	ble.n	8012e4c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012e26:	4b10      	ldr	r3, [pc, #64]	; (8012e68 <tcp_receive+0xd04>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	b29a      	uxth	r2, r3
 8012e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e2e:	68db      	ldr	r3, [r3, #12]
 8012e30:	685b      	ldr	r3, [r3, #4]
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	1ad3      	subs	r3, r2, r3
 8012e36:	b29a      	uxth	r2, r3
 8012e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e3a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e3e:	685a      	ldr	r2, [r3, #4]
 8012e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e42:	891b      	ldrh	r3, [r3, #8]
 8012e44:	4619      	mov	r1, r3
 8012e46:	4610      	mov	r0, r2
 8012e48:	f7fb fc92 	bl	800e770 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e4e:	69fa      	ldr	r2, [r7, #28]
 8012e50:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012e52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012e54:	69f8      	ldr	r0, [r7, #28]
 8012e56:	f7ff f881 	bl	8011f5c <tcp_oos_insert_segment>
                  }
                  break;
 8012e5a:	e0e2      	b.n	8013022 <tcp_receive+0xebe>
 8012e5c:	20011404 	.word	0x20011404
 8012e60:	20011401 	.word	0x20011401
 8012e64:	200113d4 	.word	0x200113d4
 8012e68:	200113f4 	.word	0x200113f4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e6e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	f040 80c6 	bne.w	8013006 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012e7a:	4b80      	ldr	r3, [pc, #512]	; (801307c <tcp_receive+0xf18>)
 8012e7c:	681a      	ldr	r2, [r3, #0]
 8012e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e80:	68db      	ldr	r3, [r3, #12]
 8012e82:	685b      	ldr	r3, [r3, #4]
 8012e84:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	f340 80bd 	ble.w	8013006 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e8e:	68db      	ldr	r3, [r3, #12]
 8012e90:	899b      	ldrh	r3, [r3, #12]
 8012e92:	b29b      	uxth	r3, r3
 8012e94:	4618      	mov	r0, r3
 8012e96:	f7fa f9ef 	bl	800d278 <lwip_htons>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	b2db      	uxtb	r3, r3
 8012e9e:	f003 0301 	and.w	r3, r3, #1
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	f040 80bf 	bne.w	8013026 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012ea8:	4875      	ldr	r0, [pc, #468]	; (8013080 <tcp_receive+0xf1c>)
 8012eaa:	f7fd fa39 	bl	8010320 <tcp_seg_copy>
 8012eae:	4602      	mov	r2, r0
 8012eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	f000 80b6 	beq.w	801302a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ec0:	68db      	ldr	r3, [r3, #12]
 8012ec2:	685b      	ldr	r3, [r3, #4]
 8012ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012ec6:	8912      	ldrh	r2, [r2, #8]
 8012ec8:	441a      	add	r2, r3
 8012eca:	4b6c      	ldr	r3, [pc, #432]	; (801307c <tcp_receive+0xf18>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	1ad3      	subs	r3, r2, r3
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	dd12      	ble.n	8012efa <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012ed4:	4b69      	ldr	r3, [pc, #420]	; (801307c <tcp_receive+0xf18>)
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	b29a      	uxth	r2, r3
 8012eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012edc:	68db      	ldr	r3, [r3, #12]
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	b29b      	uxth	r3, r3
 8012ee2:	1ad3      	subs	r3, r2, r3
 8012ee4:	b29a      	uxth	r2, r3
 8012ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ee8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eec:	685a      	ldr	r2, [r3, #4]
 8012eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ef0:	891b      	ldrh	r3, [r3, #8]
 8012ef2:	4619      	mov	r1, r3
 8012ef4:	4610      	mov	r0, r2
 8012ef6:	f7fb fc3b 	bl	800e770 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012efa:	4b62      	ldr	r3, [pc, #392]	; (8013084 <tcp_receive+0xf20>)
 8012efc:	881b      	ldrh	r3, [r3, #0]
 8012efe:	461a      	mov	r2, r3
 8012f00:	4b5e      	ldr	r3, [pc, #376]	; (801307c <tcp_receive+0xf18>)
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	441a      	add	r2, r3
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f0a:	6879      	ldr	r1, [r7, #4]
 8012f0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012f0e:	440b      	add	r3, r1
 8012f10:	1ad3      	subs	r3, r2, r3
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	f340 8089 	ble.w	801302a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	68db      	ldr	r3, [r3, #12]
 8012f1e:	899b      	ldrh	r3, [r3, #12]
 8012f20:	b29b      	uxth	r3, r3
 8012f22:	4618      	mov	r0, r3
 8012f24:	f7fa f9a8 	bl	800d278 <lwip_htons>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	b2db      	uxtb	r3, r3
 8012f2c:	f003 0301 	and.w	r3, r3, #1
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d022      	beq.n	8012f7a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	68db      	ldr	r3, [r3, #12]
 8012f3a:	899b      	ldrh	r3, [r3, #12]
 8012f3c:	b29b      	uxth	r3, r3
 8012f3e:	b21b      	sxth	r3, r3
 8012f40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012f44:	b21c      	sxth	r4, r3
 8012f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	68db      	ldr	r3, [r3, #12]
 8012f4c:	899b      	ldrh	r3, [r3, #12]
 8012f4e:	b29b      	uxth	r3, r3
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7fa f991 	bl	800d278 <lwip_htons>
 8012f56:	4603      	mov	r3, r0
 8012f58:	b2db      	uxtb	r3, r3
 8012f5a:	b29b      	uxth	r3, r3
 8012f5c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012f60:	b29b      	uxth	r3, r3
 8012f62:	4618      	mov	r0, r3
 8012f64:	f7fa f988 	bl	800d278 <lwip_htons>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	b21b      	sxth	r3, r3
 8012f6c:	4323      	orrs	r3, r4
 8012f6e:	b21a      	sxth	r2, r3
 8012f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	68db      	ldr	r3, [r3, #12]
 8012f76:	b292      	uxth	r2, r2
 8012f78:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f7e:	b29a      	uxth	r2, r3
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f84:	4413      	add	r3, r2
 8012f86:	b299      	uxth	r1, r3
 8012f88:	4b3c      	ldr	r3, [pc, #240]	; (801307c <tcp_receive+0xf18>)
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	b29a      	uxth	r2, r3
 8012f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	1a8a      	subs	r2, r1, r2
 8012f94:	b292      	uxth	r2, r2
 8012f96:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	685a      	ldr	r2, [r3, #4]
 8012f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	891b      	ldrh	r3, [r3, #8]
 8012fa4:	4619      	mov	r1, r3
 8012fa6:	4610      	mov	r0, r2
 8012fa8:	f7fb fbe2 	bl	800e770 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	891c      	ldrh	r4, [r3, #8]
 8012fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	68db      	ldr	r3, [r3, #12]
 8012fb8:	899b      	ldrh	r3, [r3, #12]
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7fa f95b 	bl	800d278 <lwip_htons>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	b2db      	uxtb	r3, r3
 8012fc6:	f003 0303 	and.w	r3, r3, #3
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d001      	beq.n	8012fd2 <tcp_receive+0xe6e>
 8012fce:	2301      	movs	r3, #1
 8012fd0:	e000      	b.n	8012fd4 <tcp_receive+0xe70>
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	4423      	add	r3, r4
 8012fd6:	b29a      	uxth	r2, r3
 8012fd8:	4b2a      	ldr	r3, [pc, #168]	; (8013084 <tcp_receive+0xf20>)
 8012fda:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012fdc:	4b29      	ldr	r3, [pc, #164]	; (8013084 <tcp_receive+0xf20>)
 8012fde:	881b      	ldrh	r3, [r3, #0]
 8012fe0:	461a      	mov	r2, r3
 8012fe2:	4b26      	ldr	r3, [pc, #152]	; (801307c <tcp_receive+0xf18>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	441a      	add	r2, r3
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fec:	6879      	ldr	r1, [r7, #4]
 8012fee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012ff0:	440b      	add	r3, r1
 8012ff2:	429a      	cmp	r2, r3
 8012ff4:	d019      	beq.n	801302a <tcp_receive+0xec6>
 8012ff6:	4b24      	ldr	r3, [pc, #144]	; (8013088 <tcp_receive+0xf24>)
 8012ff8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012ffc:	4923      	ldr	r1, [pc, #140]	; (801308c <tcp_receive+0xf28>)
 8012ffe:	4824      	ldr	r0, [pc, #144]	; (8013090 <tcp_receive+0xf2c>)
 8013000:	f00a fbb6 	bl	801d770 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013004:	e011      	b.n	801302a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	63bb      	str	r3, [r7, #56]	; 0x38
 801300c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801300e:	2b00      	cmp	r3, #0
 8013010:	f47f aea4 	bne.w	8012d5c <tcp_receive+0xbf8>
 8013014:	e00a      	b.n	801302c <tcp_receive+0xec8>
                break;
 8013016:	bf00      	nop
 8013018:	e008      	b.n	801302c <tcp_receive+0xec8>
                break;
 801301a:	bf00      	nop
 801301c:	e006      	b.n	801302c <tcp_receive+0xec8>
                  break;
 801301e:	bf00      	nop
 8013020:	e004      	b.n	801302c <tcp_receive+0xec8>
                  break;
 8013022:	bf00      	nop
 8013024:	e002      	b.n	801302c <tcp_receive+0xec8>
                  break;
 8013026:	bf00      	nop
 8013028:	e000      	b.n	801302c <tcp_receive+0xec8>
                break;
 801302a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801302c:	6878      	ldr	r0, [r7, #4]
 801302e:	f001 fe8b 	bl	8014d48 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013032:	e003      	b.n	801303c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013034:	6878      	ldr	r0, [r7, #4]
 8013036:	f001 fe87 	bl	8014d48 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801303a:	e01a      	b.n	8013072 <tcp_receive+0xf0e>
 801303c:	e019      	b.n	8013072 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801303e:	4b0f      	ldr	r3, [pc, #60]	; (801307c <tcp_receive+0xf18>)
 8013040:	681a      	ldr	r2, [r3, #0]
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013046:	1ad3      	subs	r3, r2, r3
 8013048:	2b00      	cmp	r3, #0
 801304a:	db0a      	blt.n	8013062 <tcp_receive+0xefe>
 801304c:	4b0b      	ldr	r3, [pc, #44]	; (801307c <tcp_receive+0xf18>)
 801304e:	681a      	ldr	r2, [r3, #0]
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013054:	6879      	ldr	r1, [r7, #4]
 8013056:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013058:	440b      	add	r3, r1
 801305a:	1ad3      	subs	r3, r2, r3
 801305c:	3301      	adds	r3, #1
 801305e:	2b00      	cmp	r3, #0
 8013060:	dd07      	ble.n	8013072 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	8b5b      	ldrh	r3, [r3, #26]
 8013066:	f043 0302 	orr.w	r3, r3, #2
 801306a:	b29a      	uxth	r2, r3
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013070:	e7ff      	b.n	8013072 <tcp_receive+0xf0e>
 8013072:	bf00      	nop
 8013074:	3750      	adds	r7, #80	; 0x50
 8013076:	46bd      	mov	sp, r7
 8013078:	bdb0      	pop	{r4, r5, r7, pc}
 801307a:	bf00      	nop
 801307c:	200113f4 	.word	0x200113f4
 8013080:	200113d4 	.word	0x200113d4
 8013084:	200113fe 	.word	0x200113fe
 8013088:	08020718 	.word	0x08020718
 801308c:	08020ac0 	.word	0x08020ac0
 8013090:	08020764 	.word	0x08020764

08013094 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013094:	b480      	push	{r7}
 8013096:	b083      	sub	sp, #12
 8013098:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801309a:	4b15      	ldr	r3, [pc, #84]	; (80130f0 <tcp_get_next_optbyte+0x5c>)
 801309c:	881b      	ldrh	r3, [r3, #0]
 801309e:	1c5a      	adds	r2, r3, #1
 80130a0:	b291      	uxth	r1, r2
 80130a2:	4a13      	ldr	r2, [pc, #76]	; (80130f0 <tcp_get_next_optbyte+0x5c>)
 80130a4:	8011      	strh	r1, [r2, #0]
 80130a6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80130a8:	4b12      	ldr	r3, [pc, #72]	; (80130f4 <tcp_get_next_optbyte+0x60>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d004      	beq.n	80130ba <tcp_get_next_optbyte+0x26>
 80130b0:	4b11      	ldr	r3, [pc, #68]	; (80130f8 <tcp_get_next_optbyte+0x64>)
 80130b2:	881b      	ldrh	r3, [r3, #0]
 80130b4:	88fa      	ldrh	r2, [r7, #6]
 80130b6:	429a      	cmp	r2, r3
 80130b8:	d208      	bcs.n	80130cc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80130ba:	4b10      	ldr	r3, [pc, #64]	; (80130fc <tcp_get_next_optbyte+0x68>)
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	3314      	adds	r3, #20
 80130c0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80130c2:	88fb      	ldrh	r3, [r7, #6]
 80130c4:	683a      	ldr	r2, [r7, #0]
 80130c6:	4413      	add	r3, r2
 80130c8:	781b      	ldrb	r3, [r3, #0]
 80130ca:	e00b      	b.n	80130e4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80130cc:	88fb      	ldrh	r3, [r7, #6]
 80130ce:	b2da      	uxtb	r2, r3
 80130d0:	4b09      	ldr	r3, [pc, #36]	; (80130f8 <tcp_get_next_optbyte+0x64>)
 80130d2:	881b      	ldrh	r3, [r3, #0]
 80130d4:	b2db      	uxtb	r3, r3
 80130d6:	1ad3      	subs	r3, r2, r3
 80130d8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80130da:	4b06      	ldr	r3, [pc, #24]	; (80130f4 <tcp_get_next_optbyte+0x60>)
 80130dc:	681a      	ldr	r2, [r3, #0]
 80130de:	797b      	ldrb	r3, [r7, #5]
 80130e0:	4413      	add	r3, r2
 80130e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80130e4:	4618      	mov	r0, r3
 80130e6:	370c      	adds	r7, #12
 80130e8:	46bd      	mov	sp, r7
 80130ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ee:	4770      	bx	lr
 80130f0:	200113f0 	.word	0x200113f0
 80130f4:	200113ec 	.word	0x200113ec
 80130f8:	200113ea 	.word	0x200113ea
 80130fc:	200113e4 	.word	0x200113e4

08013100 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013100:	b580      	push	{r7, lr}
 8013102:	b084      	sub	sp, #16
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d106      	bne.n	801311c <tcp_parseopt+0x1c>
 801310e:	4b32      	ldr	r3, [pc, #200]	; (80131d8 <tcp_parseopt+0xd8>)
 8013110:	f240 727d 	movw	r2, #1917	; 0x77d
 8013114:	4931      	ldr	r1, [pc, #196]	; (80131dc <tcp_parseopt+0xdc>)
 8013116:	4832      	ldr	r0, [pc, #200]	; (80131e0 <tcp_parseopt+0xe0>)
 8013118:	f00a fb2a 	bl	801d770 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801311c:	4b31      	ldr	r3, [pc, #196]	; (80131e4 <tcp_parseopt+0xe4>)
 801311e:	881b      	ldrh	r3, [r3, #0]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d055      	beq.n	80131d0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013124:	4b30      	ldr	r3, [pc, #192]	; (80131e8 <tcp_parseopt+0xe8>)
 8013126:	2200      	movs	r2, #0
 8013128:	801a      	strh	r2, [r3, #0]
 801312a:	e045      	b.n	80131b8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801312c:	f7ff ffb2 	bl	8013094 <tcp_get_next_optbyte>
 8013130:	4603      	mov	r3, r0
 8013132:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013134:	7bfb      	ldrb	r3, [r7, #15]
 8013136:	2b02      	cmp	r3, #2
 8013138:	d006      	beq.n	8013148 <tcp_parseopt+0x48>
 801313a:	2b02      	cmp	r3, #2
 801313c:	dc2b      	bgt.n	8013196 <tcp_parseopt+0x96>
 801313e:	2b00      	cmp	r3, #0
 8013140:	d041      	beq.n	80131c6 <tcp_parseopt+0xc6>
 8013142:	2b01      	cmp	r3, #1
 8013144:	d127      	bne.n	8013196 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8013146:	e037      	b.n	80131b8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013148:	f7ff ffa4 	bl	8013094 <tcp_get_next_optbyte>
 801314c:	4603      	mov	r3, r0
 801314e:	2b04      	cmp	r3, #4
 8013150:	d13b      	bne.n	80131ca <tcp_parseopt+0xca>
 8013152:	4b25      	ldr	r3, [pc, #148]	; (80131e8 <tcp_parseopt+0xe8>)
 8013154:	881b      	ldrh	r3, [r3, #0]
 8013156:	3301      	adds	r3, #1
 8013158:	4a22      	ldr	r2, [pc, #136]	; (80131e4 <tcp_parseopt+0xe4>)
 801315a:	8812      	ldrh	r2, [r2, #0]
 801315c:	4293      	cmp	r3, r2
 801315e:	da34      	bge.n	80131ca <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013160:	f7ff ff98 	bl	8013094 <tcp_get_next_optbyte>
 8013164:	4603      	mov	r3, r0
 8013166:	b29b      	uxth	r3, r3
 8013168:	021b      	lsls	r3, r3, #8
 801316a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801316c:	f7ff ff92 	bl	8013094 <tcp_get_next_optbyte>
 8013170:	4603      	mov	r3, r0
 8013172:	b29a      	uxth	r2, r3
 8013174:	89bb      	ldrh	r3, [r7, #12]
 8013176:	4313      	orrs	r3, r2
 8013178:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801317a:	89bb      	ldrh	r3, [r7, #12]
 801317c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013180:	d804      	bhi.n	801318c <tcp_parseopt+0x8c>
 8013182:	89bb      	ldrh	r3, [r7, #12]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d001      	beq.n	801318c <tcp_parseopt+0x8c>
 8013188:	89ba      	ldrh	r2, [r7, #12]
 801318a:	e001      	b.n	8013190 <tcp_parseopt+0x90>
 801318c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8013194:	e010      	b.n	80131b8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013196:	f7ff ff7d 	bl	8013094 <tcp_get_next_optbyte>
 801319a:	4603      	mov	r3, r0
 801319c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801319e:	7afb      	ldrb	r3, [r7, #11]
 80131a0:	2b01      	cmp	r3, #1
 80131a2:	d914      	bls.n	80131ce <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80131a4:	7afb      	ldrb	r3, [r7, #11]
 80131a6:	b29a      	uxth	r2, r3
 80131a8:	4b0f      	ldr	r3, [pc, #60]	; (80131e8 <tcp_parseopt+0xe8>)
 80131aa:	881b      	ldrh	r3, [r3, #0]
 80131ac:	4413      	add	r3, r2
 80131ae:	b29b      	uxth	r3, r3
 80131b0:	3b02      	subs	r3, #2
 80131b2:	b29a      	uxth	r2, r3
 80131b4:	4b0c      	ldr	r3, [pc, #48]	; (80131e8 <tcp_parseopt+0xe8>)
 80131b6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80131b8:	4b0b      	ldr	r3, [pc, #44]	; (80131e8 <tcp_parseopt+0xe8>)
 80131ba:	881a      	ldrh	r2, [r3, #0]
 80131bc:	4b09      	ldr	r3, [pc, #36]	; (80131e4 <tcp_parseopt+0xe4>)
 80131be:	881b      	ldrh	r3, [r3, #0]
 80131c0:	429a      	cmp	r2, r3
 80131c2:	d3b3      	bcc.n	801312c <tcp_parseopt+0x2c>
 80131c4:	e004      	b.n	80131d0 <tcp_parseopt+0xd0>
          return;
 80131c6:	bf00      	nop
 80131c8:	e002      	b.n	80131d0 <tcp_parseopt+0xd0>
            return;
 80131ca:	bf00      	nop
 80131cc:	e000      	b.n	80131d0 <tcp_parseopt+0xd0>
            return;
 80131ce:	bf00      	nop
      }
    }
  }
}
 80131d0:	3710      	adds	r7, #16
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd80      	pop	{r7, pc}
 80131d6:	bf00      	nop
 80131d8:	08020718 	.word	0x08020718
 80131dc:	08020b7c 	.word	0x08020b7c
 80131e0:	08020764 	.word	0x08020764
 80131e4:	200113e8 	.word	0x200113e8
 80131e8:	200113f0 	.word	0x200113f0

080131ec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80131ec:	b480      	push	{r7}
 80131ee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80131f0:	4b05      	ldr	r3, [pc, #20]	; (8013208 <tcp_trigger_input_pcb_close+0x1c>)
 80131f2:	781b      	ldrb	r3, [r3, #0]
 80131f4:	f043 0310 	orr.w	r3, r3, #16
 80131f8:	b2da      	uxtb	r2, r3
 80131fa:	4b03      	ldr	r3, [pc, #12]	; (8013208 <tcp_trigger_input_pcb_close+0x1c>)
 80131fc:	701a      	strb	r2, [r3, #0]
}
 80131fe:	bf00      	nop
 8013200:	46bd      	mov	sp, r7
 8013202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013206:	4770      	bx	lr
 8013208:	20011401 	.word	0x20011401

0801320c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b084      	sub	sp, #16
 8013210:	af00      	add	r7, sp, #0
 8013212:	60f8      	str	r0, [r7, #12]
 8013214:	60b9      	str	r1, [r7, #8]
 8013216:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d00a      	beq.n	8013234 <tcp_route+0x28>
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	7a1b      	ldrb	r3, [r3, #8]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d006      	beq.n	8013234 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	7a1b      	ldrb	r3, [r3, #8]
 801322a:	4618      	mov	r0, r3
 801322c:	f7fb f898 	bl	800e360 <netif_get_by_index>
 8013230:	4603      	mov	r3, r0
 8013232:	e003      	b.n	801323c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013234:	6878      	ldr	r0, [r7, #4]
 8013236:	f003 fcb9 	bl	8016bac <ip4_route>
 801323a:	4603      	mov	r3, r0
  }
}
 801323c:	4618      	mov	r0, r3
 801323e:	3710      	adds	r7, #16
 8013240:	46bd      	mov	sp, r7
 8013242:	bd80      	pop	{r7, pc}

08013244 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013244:	b590      	push	{r4, r7, lr}
 8013246:	b087      	sub	sp, #28
 8013248:	af00      	add	r7, sp, #0
 801324a:	60f8      	str	r0, [r7, #12]
 801324c:	60b9      	str	r1, [r7, #8]
 801324e:	603b      	str	r3, [r7, #0]
 8013250:	4613      	mov	r3, r2
 8013252:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d105      	bne.n	8013266 <tcp_create_segment+0x22>
 801325a:	4b44      	ldr	r3, [pc, #272]	; (801336c <tcp_create_segment+0x128>)
 801325c:	22a3      	movs	r2, #163	; 0xa3
 801325e:	4944      	ldr	r1, [pc, #272]	; (8013370 <tcp_create_segment+0x12c>)
 8013260:	4844      	ldr	r0, [pc, #272]	; (8013374 <tcp_create_segment+0x130>)
 8013262:	f00a fa85 	bl	801d770 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013266:	68bb      	ldr	r3, [r7, #8]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d105      	bne.n	8013278 <tcp_create_segment+0x34>
 801326c:	4b3f      	ldr	r3, [pc, #252]	; (801336c <tcp_create_segment+0x128>)
 801326e:	22a4      	movs	r2, #164	; 0xa4
 8013270:	4941      	ldr	r1, [pc, #260]	; (8013378 <tcp_create_segment+0x134>)
 8013272:	4840      	ldr	r0, [pc, #256]	; (8013374 <tcp_create_segment+0x130>)
 8013274:	f00a fa7c 	bl	801d770 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013278:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801327c:	009b      	lsls	r3, r3, #2
 801327e:	b2db      	uxtb	r3, r3
 8013280:	f003 0304 	and.w	r3, r3, #4
 8013284:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013286:	2003      	movs	r0, #3
 8013288:	f7fa fcde 	bl	800dc48 <memp_malloc>
 801328c:	6138      	str	r0, [r7, #16]
 801328e:	693b      	ldr	r3, [r7, #16]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d104      	bne.n	801329e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013294:	68b8      	ldr	r0, [r7, #8]
 8013296:	f7fb fbf1 	bl	800ea7c <pbuf_free>
    return NULL;
 801329a:	2300      	movs	r3, #0
 801329c:	e061      	b.n	8013362 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801329e:	693b      	ldr	r3, [r7, #16]
 80132a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80132a4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	2200      	movs	r2, #0
 80132aa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80132ac:	693b      	ldr	r3, [r7, #16]
 80132ae:	68ba      	ldr	r2, [r7, #8]
 80132b0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	891a      	ldrh	r2, [r3, #8]
 80132b6:	7dfb      	ldrb	r3, [r7, #23]
 80132b8:	b29b      	uxth	r3, r3
 80132ba:	429a      	cmp	r2, r3
 80132bc:	d205      	bcs.n	80132ca <tcp_create_segment+0x86>
 80132be:	4b2b      	ldr	r3, [pc, #172]	; (801336c <tcp_create_segment+0x128>)
 80132c0:	22b0      	movs	r2, #176	; 0xb0
 80132c2:	492e      	ldr	r1, [pc, #184]	; (801337c <tcp_create_segment+0x138>)
 80132c4:	482b      	ldr	r0, [pc, #172]	; (8013374 <tcp_create_segment+0x130>)
 80132c6:	f00a fa53 	bl	801d770 <iprintf>
  seg->len = p->tot_len - optlen;
 80132ca:	68bb      	ldr	r3, [r7, #8]
 80132cc:	891a      	ldrh	r2, [r3, #8]
 80132ce:	7dfb      	ldrb	r3, [r7, #23]
 80132d0:	b29b      	uxth	r3, r3
 80132d2:	1ad3      	subs	r3, r2, r3
 80132d4:	b29a      	uxth	r2, r3
 80132d6:	693b      	ldr	r3, [r7, #16]
 80132d8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80132da:	2114      	movs	r1, #20
 80132dc:	68b8      	ldr	r0, [r7, #8]
 80132de:	f7fb fb37 	bl	800e950 <pbuf_add_header>
 80132e2:	4603      	mov	r3, r0
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d004      	beq.n	80132f2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80132e8:	6938      	ldr	r0, [r7, #16]
 80132ea:	f7fd f800 	bl	80102ee <tcp_seg_free>
    return NULL;
 80132ee:	2300      	movs	r3, #0
 80132f0:	e037      	b.n	8013362 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80132f2:	693b      	ldr	r3, [r7, #16]
 80132f4:	685b      	ldr	r3, [r3, #4]
 80132f6:	685a      	ldr	r2, [r3, #4]
 80132f8:	693b      	ldr	r3, [r7, #16]
 80132fa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	8ada      	ldrh	r2, [r3, #22]
 8013300:	693b      	ldr	r3, [r7, #16]
 8013302:	68dc      	ldr	r4, [r3, #12]
 8013304:	4610      	mov	r0, r2
 8013306:	f7f9 ffb7 	bl	800d278 <lwip_htons>
 801330a:	4603      	mov	r3, r0
 801330c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	8b1a      	ldrh	r2, [r3, #24]
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	68dc      	ldr	r4, [r3, #12]
 8013316:	4610      	mov	r0, r2
 8013318:	f7f9 ffae 	bl	800d278 <lwip_htons>
 801331c:	4603      	mov	r3, r0
 801331e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013320:	693b      	ldr	r3, [r7, #16]
 8013322:	68dc      	ldr	r4, [r3, #12]
 8013324:	6838      	ldr	r0, [r7, #0]
 8013326:	f7f9 ffbc 	bl	800d2a2 <lwip_htonl>
 801332a:	4603      	mov	r3, r0
 801332c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801332e:	7dfb      	ldrb	r3, [r7, #23]
 8013330:	089b      	lsrs	r3, r3, #2
 8013332:	b2db      	uxtb	r3, r3
 8013334:	b29b      	uxth	r3, r3
 8013336:	3305      	adds	r3, #5
 8013338:	b29b      	uxth	r3, r3
 801333a:	031b      	lsls	r3, r3, #12
 801333c:	b29a      	uxth	r2, r3
 801333e:	79fb      	ldrb	r3, [r7, #7]
 8013340:	b29b      	uxth	r3, r3
 8013342:	4313      	orrs	r3, r2
 8013344:	b29a      	uxth	r2, r3
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	68dc      	ldr	r4, [r3, #12]
 801334a:	4610      	mov	r0, r2
 801334c:	f7f9 ff94 	bl	800d278 <lwip_htons>
 8013350:	4603      	mov	r3, r0
 8013352:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013354:	693b      	ldr	r3, [r7, #16]
 8013356:	68db      	ldr	r3, [r3, #12]
 8013358:	2200      	movs	r2, #0
 801335a:	749a      	strb	r2, [r3, #18]
 801335c:	2200      	movs	r2, #0
 801335e:	74da      	strb	r2, [r3, #19]
  return seg;
 8013360:	693b      	ldr	r3, [r7, #16]
}
 8013362:	4618      	mov	r0, r3
 8013364:	371c      	adds	r7, #28
 8013366:	46bd      	mov	sp, r7
 8013368:	bd90      	pop	{r4, r7, pc}
 801336a:	bf00      	nop
 801336c:	08020b98 	.word	0x08020b98
 8013370:	08020bcc 	.word	0x08020bcc
 8013374:	08020bec 	.word	0x08020bec
 8013378:	08020c14 	.word	0x08020c14
 801337c:	08020c38 	.word	0x08020c38

08013380 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b086      	sub	sp, #24
 8013384:	af00      	add	r7, sp, #0
 8013386:	607b      	str	r3, [r7, #4]
 8013388:	4603      	mov	r3, r0
 801338a:	73fb      	strb	r3, [r7, #15]
 801338c:	460b      	mov	r3, r1
 801338e:	81bb      	strh	r3, [r7, #12]
 8013390:	4613      	mov	r3, r2
 8013392:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013394:	89bb      	ldrh	r3, [r7, #12]
 8013396:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d105      	bne.n	80133aa <tcp_pbuf_prealloc+0x2a>
 801339e:	4b30      	ldr	r3, [pc, #192]	; (8013460 <tcp_pbuf_prealloc+0xe0>)
 80133a0:	22e8      	movs	r2, #232	; 0xe8
 80133a2:	4930      	ldr	r1, [pc, #192]	; (8013464 <tcp_pbuf_prealloc+0xe4>)
 80133a4:	4830      	ldr	r0, [pc, #192]	; (8013468 <tcp_pbuf_prealloc+0xe8>)
 80133a6:	f00a f9e3 	bl	801d770 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80133aa:	6a3b      	ldr	r3, [r7, #32]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d105      	bne.n	80133bc <tcp_pbuf_prealloc+0x3c>
 80133b0:	4b2b      	ldr	r3, [pc, #172]	; (8013460 <tcp_pbuf_prealloc+0xe0>)
 80133b2:	22e9      	movs	r2, #233	; 0xe9
 80133b4:	492d      	ldr	r1, [pc, #180]	; (801346c <tcp_pbuf_prealloc+0xec>)
 80133b6:	482c      	ldr	r0, [pc, #176]	; (8013468 <tcp_pbuf_prealloc+0xe8>)
 80133b8:	f00a f9da 	bl	801d770 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80133bc:	89ba      	ldrh	r2, [r7, #12]
 80133be:	897b      	ldrh	r3, [r7, #10]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d221      	bcs.n	8013408 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80133c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80133c8:	f003 0302 	and.w	r3, r3, #2
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d111      	bne.n	80133f4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80133d0:	6a3b      	ldr	r3, [r7, #32]
 80133d2:	8b5b      	ldrh	r3, [r3, #26]
 80133d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d115      	bne.n	8013408 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80133dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d007      	beq.n	80133f4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80133e4:	6a3b      	ldr	r3, [r7, #32]
 80133e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d103      	bne.n	80133f4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80133ec:	6a3b      	ldr	r3, [r7, #32]
 80133ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d009      	beq.n	8013408 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80133f4:	89bb      	ldrh	r3, [r7, #12]
 80133f6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80133fa:	f023 0203 	bic.w	r2, r3, #3
 80133fe:	897b      	ldrh	r3, [r7, #10]
 8013400:	4293      	cmp	r3, r2
 8013402:	bf28      	it	cs
 8013404:	4613      	movcs	r3, r2
 8013406:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013408:	8af9      	ldrh	r1, [r7, #22]
 801340a:	7bfb      	ldrb	r3, [r7, #15]
 801340c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013410:	4618      	mov	r0, r3
 8013412:	f7fb f84f 	bl	800e4b4 <pbuf_alloc>
 8013416:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013418:	693b      	ldr	r3, [r7, #16]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d101      	bne.n	8013422 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801341e:	2300      	movs	r3, #0
 8013420:	e019      	b.n	8013456 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013422:	693b      	ldr	r3, [r7, #16]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d006      	beq.n	8013438 <tcp_pbuf_prealloc+0xb8>
 801342a:	4b0d      	ldr	r3, [pc, #52]	; (8013460 <tcp_pbuf_prealloc+0xe0>)
 801342c:	f240 120b 	movw	r2, #267	; 0x10b
 8013430:	490f      	ldr	r1, [pc, #60]	; (8013470 <tcp_pbuf_prealloc+0xf0>)
 8013432:	480d      	ldr	r0, [pc, #52]	; (8013468 <tcp_pbuf_prealloc+0xe8>)
 8013434:	f00a f99c 	bl	801d770 <iprintf>
  *oversize = p->len - length;
 8013438:	693b      	ldr	r3, [r7, #16]
 801343a:	895a      	ldrh	r2, [r3, #10]
 801343c:	89bb      	ldrh	r3, [r7, #12]
 801343e:	1ad3      	subs	r3, r2, r3
 8013440:	b29a      	uxth	r2, r3
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013446:	693b      	ldr	r3, [r7, #16]
 8013448:	89ba      	ldrh	r2, [r7, #12]
 801344a:	811a      	strh	r2, [r3, #8]
 801344c:	693b      	ldr	r3, [r7, #16]
 801344e:	891a      	ldrh	r2, [r3, #8]
 8013450:	693b      	ldr	r3, [r7, #16]
 8013452:	815a      	strh	r2, [r3, #10]
  return p;
 8013454:	693b      	ldr	r3, [r7, #16]
}
 8013456:	4618      	mov	r0, r3
 8013458:	3718      	adds	r7, #24
 801345a:	46bd      	mov	sp, r7
 801345c:	bd80      	pop	{r7, pc}
 801345e:	bf00      	nop
 8013460:	08020b98 	.word	0x08020b98
 8013464:	08020c50 	.word	0x08020c50
 8013468:	08020bec 	.word	0x08020bec
 801346c:	08020c74 	.word	0x08020c74
 8013470:	08020c94 	.word	0x08020c94

08013474 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b082      	sub	sp, #8
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
 801347c:	460b      	mov	r3, r1
 801347e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d106      	bne.n	8013494 <tcp_write_checks+0x20>
 8013486:	4b33      	ldr	r3, [pc, #204]	; (8013554 <tcp_write_checks+0xe0>)
 8013488:	f240 1233 	movw	r2, #307	; 0x133
 801348c:	4932      	ldr	r1, [pc, #200]	; (8013558 <tcp_write_checks+0xe4>)
 801348e:	4833      	ldr	r0, [pc, #204]	; (801355c <tcp_write_checks+0xe8>)
 8013490:	f00a f96e 	bl	801d770 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	7d1b      	ldrb	r3, [r3, #20]
 8013498:	2b04      	cmp	r3, #4
 801349a:	d00e      	beq.n	80134ba <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80134a0:	2b07      	cmp	r3, #7
 80134a2:	d00a      	beq.n	80134ba <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80134a8:	2b02      	cmp	r3, #2
 80134aa:	d006      	beq.n	80134ba <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80134b0:	2b03      	cmp	r3, #3
 80134b2:	d002      	beq.n	80134ba <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80134b4:	f06f 030a 	mvn.w	r3, #10
 80134b8:	e048      	b.n	801354c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80134ba:	887b      	ldrh	r3, [r7, #2]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d101      	bne.n	80134c4 <tcp_write_checks+0x50>
    return ERR_OK;
 80134c0:	2300      	movs	r3, #0
 80134c2:	e043      	b.n	801354c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80134ca:	887a      	ldrh	r2, [r7, #2]
 80134cc:	429a      	cmp	r2, r3
 80134ce:	d909      	bls.n	80134e4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	8b5b      	ldrh	r3, [r3, #26]
 80134d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134d8:	b29a      	uxth	r2, r3
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80134de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134e2:	e033      	b.n	801354c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134ea:	2b08      	cmp	r3, #8
 80134ec:	d909      	bls.n	8013502 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	8b5b      	ldrh	r3, [r3, #26]
 80134f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134f6:	b29a      	uxth	r2, r3
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80134fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013500:	e024      	b.n	801354c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013508:	2b00      	cmp	r3, #0
 801350a:	d00f      	beq.n	801352c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013510:	2b00      	cmp	r3, #0
 8013512:	d11a      	bne.n	801354a <tcp_write_checks+0xd6>
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013518:	2b00      	cmp	r3, #0
 801351a:	d116      	bne.n	801354a <tcp_write_checks+0xd6>
 801351c:	4b0d      	ldr	r3, [pc, #52]	; (8013554 <tcp_write_checks+0xe0>)
 801351e:	f240 1255 	movw	r2, #341	; 0x155
 8013522:	490f      	ldr	r1, [pc, #60]	; (8013560 <tcp_write_checks+0xec>)
 8013524:	480d      	ldr	r0, [pc, #52]	; (801355c <tcp_write_checks+0xe8>)
 8013526:	f00a f923 	bl	801d770 <iprintf>
 801352a:	e00e      	b.n	801354a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013530:	2b00      	cmp	r3, #0
 8013532:	d103      	bne.n	801353c <tcp_write_checks+0xc8>
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013538:	2b00      	cmp	r3, #0
 801353a:	d006      	beq.n	801354a <tcp_write_checks+0xd6>
 801353c:	4b05      	ldr	r3, [pc, #20]	; (8013554 <tcp_write_checks+0xe0>)
 801353e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8013542:	4908      	ldr	r1, [pc, #32]	; (8013564 <tcp_write_checks+0xf0>)
 8013544:	4805      	ldr	r0, [pc, #20]	; (801355c <tcp_write_checks+0xe8>)
 8013546:	f00a f913 	bl	801d770 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801354a:	2300      	movs	r3, #0
}
 801354c:	4618      	mov	r0, r3
 801354e:	3708      	adds	r7, #8
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}
 8013554:	08020b98 	.word	0x08020b98
 8013558:	08020ca8 	.word	0x08020ca8
 801355c:	08020bec 	.word	0x08020bec
 8013560:	08020cc8 	.word	0x08020cc8
 8013564:	08020d04 	.word	0x08020d04

08013568 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013568:	b590      	push	{r4, r7, lr}
 801356a:	b09b      	sub	sp, #108	; 0x6c
 801356c:	af04      	add	r7, sp, #16
 801356e:	60f8      	str	r0, [r7, #12]
 8013570:	60b9      	str	r1, [r7, #8]
 8013572:	4611      	mov	r1, r2
 8013574:	461a      	mov	r2, r3
 8013576:	460b      	mov	r3, r1
 8013578:	80fb      	strh	r3, [r7, #6]
 801357a:	4613      	mov	r3, r2
 801357c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801357e:	2300      	movs	r3, #0
 8013580:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013582:	2300      	movs	r3, #0
 8013584:	653b      	str	r3, [r7, #80]	; 0x50
 8013586:	2300      	movs	r3, #0
 8013588:	64fb      	str	r3, [r7, #76]	; 0x4c
 801358a:	2300      	movs	r3, #0
 801358c:	64bb      	str	r3, [r7, #72]	; 0x48
 801358e:	2300      	movs	r3, #0
 8013590:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013592:	2300      	movs	r3, #0
 8013594:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013598:	2300      	movs	r3, #0
 801359a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801359e:	2300      	movs	r3, #0
 80135a0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80135a2:	2300      	movs	r3, #0
 80135a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80135a6:	2300      	movs	r3, #0
 80135a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d109      	bne.n	80135c4 <tcp_write+0x5c>
 80135b0:	4ba4      	ldr	r3, [pc, #656]	; (8013844 <tcp_write+0x2dc>)
 80135b2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80135b6:	49a4      	ldr	r1, [pc, #656]	; (8013848 <tcp_write+0x2e0>)
 80135b8:	48a4      	ldr	r0, [pc, #656]	; (801384c <tcp_write+0x2e4>)
 80135ba:	f00a f8d9 	bl	801d770 <iprintf>
 80135be:	f06f 030f 	mvn.w	r3, #15
 80135c2:	e32a      	b.n	8013c1a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80135ca:	085b      	lsrs	r3, r3, #1
 80135cc:	b29a      	uxth	r2, r3
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135d2:	4293      	cmp	r3, r2
 80135d4:	bf28      	it	cs
 80135d6:	4613      	movcs	r3, r2
 80135d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80135da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d102      	bne.n	80135e6 <tcp_write+0x7e>
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135e4:	e000      	b.n	80135e8 <tcp_write+0x80>
 80135e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80135e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80135ea:	68bb      	ldr	r3, [r7, #8]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d109      	bne.n	8013604 <tcp_write+0x9c>
 80135f0:	4b94      	ldr	r3, [pc, #592]	; (8013844 <tcp_write+0x2dc>)
 80135f2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80135f6:	4996      	ldr	r1, [pc, #600]	; (8013850 <tcp_write+0x2e8>)
 80135f8:	4894      	ldr	r0, [pc, #592]	; (801384c <tcp_write+0x2e4>)
 80135fa:	f00a f8b9 	bl	801d770 <iprintf>
 80135fe:	f06f 030f 	mvn.w	r3, #15
 8013602:	e30a      	b.n	8013c1a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013604:	88fb      	ldrh	r3, [r7, #6]
 8013606:	4619      	mov	r1, r3
 8013608:	68f8      	ldr	r0, [r7, #12]
 801360a:	f7ff ff33 	bl	8013474 <tcp_write_checks>
 801360e:	4603      	mov	r3, r0
 8013610:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8013614:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013618:	2b00      	cmp	r3, #0
 801361a:	d002      	beq.n	8013622 <tcp_write+0xba>
    return err;
 801361c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013620:	e2fb      	b.n	8013c1a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013628:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801362c:	2300      	movs	r3, #0
 801362e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013636:	2b00      	cmp	r3, #0
 8013638:	f000 80f6 	beq.w	8013828 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013640:	653b      	str	r3, [r7, #80]	; 0x50
 8013642:	e002      	b.n	801364a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801364a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d1f8      	bne.n	8013644 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013654:	7a9b      	ldrb	r3, [r3, #10]
 8013656:	009b      	lsls	r3, r3, #2
 8013658:	b29b      	uxth	r3, r3
 801365a:	f003 0304 	and.w	r3, r3, #4
 801365e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013660:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013664:	891b      	ldrh	r3, [r3, #8]
 8013666:	4619      	mov	r1, r3
 8013668:	8c3b      	ldrh	r3, [r7, #32]
 801366a:	440b      	add	r3, r1
 801366c:	429a      	cmp	r2, r3
 801366e:	da06      	bge.n	801367e <tcp_write+0x116>
 8013670:	4b74      	ldr	r3, [pc, #464]	; (8013844 <tcp_write+0x2dc>)
 8013672:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013676:	4977      	ldr	r1, [pc, #476]	; (8013854 <tcp_write+0x2ec>)
 8013678:	4874      	ldr	r0, [pc, #464]	; (801384c <tcp_write+0x2e4>)
 801367a:	f00a f879 	bl	801d770 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801367e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013680:	891a      	ldrh	r2, [r3, #8]
 8013682:	8c3b      	ldrh	r3, [r7, #32]
 8013684:	4413      	add	r3, r2
 8013686:	b29b      	uxth	r3, r3
 8013688:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801368a:	1ad3      	subs	r3, r2, r3
 801368c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013694:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013696:	8a7b      	ldrh	r3, [r7, #18]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d026      	beq.n	80136ea <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801369c:	8a7b      	ldrh	r3, [r7, #18]
 801369e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80136a0:	429a      	cmp	r2, r3
 80136a2:	d206      	bcs.n	80136b2 <tcp_write+0x14a>
 80136a4:	4b67      	ldr	r3, [pc, #412]	; (8013844 <tcp_write+0x2dc>)
 80136a6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80136aa:	496b      	ldr	r1, [pc, #428]	; (8013858 <tcp_write+0x2f0>)
 80136ac:	4867      	ldr	r0, [pc, #412]	; (801384c <tcp_write+0x2e4>)
 80136ae:	f00a f85f 	bl	801d770 <iprintf>
      seg = last_unsent;
 80136b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136b4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80136b6:	8a7b      	ldrh	r3, [r7, #18]
 80136b8:	88fa      	ldrh	r2, [r7, #6]
 80136ba:	4293      	cmp	r3, r2
 80136bc:	bf28      	it	cs
 80136be:	4613      	movcs	r3, r2
 80136c0:	b29b      	uxth	r3, r3
 80136c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80136c4:	4293      	cmp	r3, r2
 80136c6:	bf28      	it	cs
 80136c8:	4613      	movcs	r3, r2
 80136ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80136cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80136d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80136d2:	4413      	add	r3, r2
 80136d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80136d8:	8a7a      	ldrh	r2, [r7, #18]
 80136da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80136dc:	1ad3      	subs	r3, r2, r3
 80136de:	b29b      	uxth	r3, r3
 80136e0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80136e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80136e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80136e6:	1ad3      	subs	r3, r2, r3
 80136e8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80136ea:	8a7b      	ldrh	r3, [r7, #18]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d00b      	beq.n	8013708 <tcp_write+0x1a0>
 80136f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80136f4:	88fb      	ldrh	r3, [r7, #6]
 80136f6:	429a      	cmp	r2, r3
 80136f8:	d006      	beq.n	8013708 <tcp_write+0x1a0>
 80136fa:	4b52      	ldr	r3, [pc, #328]	; (8013844 <tcp_write+0x2dc>)
 80136fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013700:	4956      	ldr	r1, [pc, #344]	; (801385c <tcp_write+0x2f4>)
 8013702:	4852      	ldr	r0, [pc, #328]	; (801384c <tcp_write+0x2e4>)
 8013704:	f00a f834 	bl	801d770 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013708:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801370c:	88fb      	ldrh	r3, [r7, #6]
 801370e:	429a      	cmp	r2, r3
 8013710:	f080 8167 	bcs.w	80139e2 <tcp_write+0x47a>
 8013714:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013716:	2b00      	cmp	r3, #0
 8013718:	f000 8163 	beq.w	80139e2 <tcp_write+0x47a>
 801371c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801371e:	891b      	ldrh	r3, [r3, #8]
 8013720:	2b00      	cmp	r3, #0
 8013722:	f000 815e 	beq.w	80139e2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013726:	88fa      	ldrh	r2, [r7, #6]
 8013728:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801372c:	1ad2      	subs	r2, r2, r3
 801372e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013730:	4293      	cmp	r3, r2
 8013732:	bfa8      	it	ge
 8013734:	4613      	movge	r3, r2
 8013736:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801373a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801373c:	797b      	ldrb	r3, [r7, #5]
 801373e:	f003 0301 	and.w	r3, r3, #1
 8013742:	2b00      	cmp	r3, #0
 8013744:	d027      	beq.n	8013796 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013746:	f107 0012 	add.w	r0, r7, #18
 801374a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801374c:	8bf9      	ldrh	r1, [r7, #30]
 801374e:	2301      	movs	r3, #1
 8013750:	9302      	str	r3, [sp, #8]
 8013752:	797b      	ldrb	r3, [r7, #5]
 8013754:	9301      	str	r3, [sp, #4]
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	9300      	str	r3, [sp, #0]
 801375a:	4603      	mov	r3, r0
 801375c:	2000      	movs	r0, #0
 801375e:	f7ff fe0f 	bl	8013380 <tcp_pbuf_prealloc>
 8013762:	6578      	str	r0, [r7, #84]	; 0x54
 8013764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013766:	2b00      	cmp	r3, #0
 8013768:	f000 8225 	beq.w	8013bb6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801376c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801376e:	6858      	ldr	r0, [r3, #4]
 8013770:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013774:	68ba      	ldr	r2, [r7, #8]
 8013776:	4413      	add	r3, r2
 8013778:	8bfa      	ldrh	r2, [r7, #30]
 801377a:	4619      	mov	r1, r3
 801377c:	f009 ffe2 	bl	801d744 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013780:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013782:	f7fb fa09 	bl	800eb98 <pbuf_clen>
 8013786:	4603      	mov	r3, r0
 8013788:	461a      	mov	r2, r3
 801378a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801378e:	4413      	add	r3, r2
 8013790:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013794:	e041      	b.n	801381a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013798:	685b      	ldr	r3, [r3, #4]
 801379a:	637b      	str	r3, [r7, #52]	; 0x34
 801379c:	e002      	b.n	80137a4 <tcp_write+0x23c>
 801379e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	637b      	str	r3, [r7, #52]	; 0x34
 80137a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d1f8      	bne.n	801379e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80137ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137ae:	7b1b      	ldrb	r3, [r3, #12]
 80137b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d115      	bne.n	80137e4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80137b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137ba:	685b      	ldr	r3, [r3, #4]
 80137bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137be:	8952      	ldrh	r2, [r2, #10]
 80137c0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80137c2:	68ba      	ldr	r2, [r7, #8]
 80137c4:	429a      	cmp	r2, r3
 80137c6:	d10d      	bne.n	80137e4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80137c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d006      	beq.n	80137de <tcp_write+0x276>
 80137d0:	4b1c      	ldr	r3, [pc, #112]	; (8013844 <tcp_write+0x2dc>)
 80137d2:	f240 2231 	movw	r2, #561	; 0x231
 80137d6:	4922      	ldr	r1, [pc, #136]	; (8013860 <tcp_write+0x2f8>)
 80137d8:	481c      	ldr	r0, [pc, #112]	; (801384c <tcp_write+0x2e4>)
 80137da:	f009 ffc9 	bl	801d770 <iprintf>
          extendlen = seglen;
 80137de:	8bfb      	ldrh	r3, [r7, #30]
 80137e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80137e2:	e01a      	b.n	801381a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80137e4:	8bfb      	ldrh	r3, [r7, #30]
 80137e6:	2201      	movs	r2, #1
 80137e8:	4619      	mov	r1, r3
 80137ea:	2000      	movs	r0, #0
 80137ec:	f7fa fe62 	bl	800e4b4 <pbuf_alloc>
 80137f0:	6578      	str	r0, [r7, #84]	; 0x54
 80137f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	f000 81e0 	beq.w	8013bba <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80137fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137fe:	68ba      	ldr	r2, [r7, #8]
 8013800:	441a      	add	r2, r3
 8013802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013804:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013806:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013808:	f7fb f9c6 	bl	800eb98 <pbuf_clen>
 801380c:	4603      	mov	r3, r0
 801380e:	461a      	mov	r2, r3
 8013810:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013814:	4413      	add	r3, r2
 8013816:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801381a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801381e:	8bfb      	ldrh	r3, [r7, #30]
 8013820:	4413      	add	r3, r2
 8013822:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013826:	e0dc      	b.n	80139e2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801382e:	2b00      	cmp	r3, #0
 8013830:	f000 80d7 	beq.w	80139e2 <tcp_write+0x47a>
 8013834:	4b03      	ldr	r3, [pc, #12]	; (8013844 <tcp_write+0x2dc>)
 8013836:	f240 224a 	movw	r2, #586	; 0x24a
 801383a:	490a      	ldr	r1, [pc, #40]	; (8013864 <tcp_write+0x2fc>)
 801383c:	4803      	ldr	r0, [pc, #12]	; (801384c <tcp_write+0x2e4>)
 801383e:	f009 ff97 	bl	801d770 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013842:	e0ce      	b.n	80139e2 <tcp_write+0x47a>
 8013844:	08020b98 	.word	0x08020b98
 8013848:	08020d38 	.word	0x08020d38
 801384c:	08020bec 	.word	0x08020bec
 8013850:	08020d50 	.word	0x08020d50
 8013854:	08020d84 	.word	0x08020d84
 8013858:	08020d9c 	.word	0x08020d9c
 801385c:	08020dbc 	.word	0x08020dbc
 8013860:	08020ddc 	.word	0x08020ddc
 8013864:	08020e08 	.word	0x08020e08
    struct pbuf *p;
    u16_t left = len - pos;
 8013868:	88fa      	ldrh	r2, [r7, #6]
 801386a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801386e:	1ad3      	subs	r3, r2, r3
 8013870:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013872:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013876:	b29b      	uxth	r3, r3
 8013878:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801387a:	1ad3      	subs	r3, r2, r3
 801387c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801387e:	8b7a      	ldrh	r2, [r7, #26]
 8013880:	8bbb      	ldrh	r3, [r7, #28]
 8013882:	4293      	cmp	r3, r2
 8013884:	bf28      	it	cs
 8013886:	4613      	movcs	r3, r2
 8013888:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801388a:	797b      	ldrb	r3, [r7, #5]
 801388c:	f003 0301 	and.w	r3, r3, #1
 8013890:	2b00      	cmp	r3, #0
 8013892:	d036      	beq.n	8013902 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013894:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013898:	b29a      	uxth	r2, r3
 801389a:	8b3b      	ldrh	r3, [r7, #24]
 801389c:	4413      	add	r3, r2
 801389e:	b299      	uxth	r1, r3
 80138a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	bf0c      	ite	eq
 80138a6:	2301      	moveq	r3, #1
 80138a8:	2300      	movne	r3, #0
 80138aa:	b2db      	uxtb	r3, r3
 80138ac:	f107 0012 	add.w	r0, r7, #18
 80138b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80138b2:	9302      	str	r3, [sp, #8]
 80138b4:	797b      	ldrb	r3, [r7, #5]
 80138b6:	9301      	str	r3, [sp, #4]
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	9300      	str	r3, [sp, #0]
 80138bc:	4603      	mov	r3, r0
 80138be:	2036      	movs	r0, #54	; 0x36
 80138c0:	f7ff fd5e 	bl	8013380 <tcp_pbuf_prealloc>
 80138c4:	6338      	str	r0, [r7, #48]	; 0x30
 80138c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	f000 8178 	beq.w	8013bbe <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80138ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d0:	895b      	ldrh	r3, [r3, #10]
 80138d2:	8b3a      	ldrh	r2, [r7, #24]
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d906      	bls.n	80138e6 <tcp_write+0x37e>
 80138d8:	4b8c      	ldr	r3, [pc, #560]	; (8013b0c <tcp_write+0x5a4>)
 80138da:	f240 2266 	movw	r2, #614	; 0x266
 80138de:	498c      	ldr	r1, [pc, #560]	; (8013b10 <tcp_write+0x5a8>)
 80138e0:	488c      	ldr	r0, [pc, #560]	; (8013b14 <tcp_write+0x5ac>)
 80138e2:	f009 ff45 	bl	801d770 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80138e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e8:	685a      	ldr	r2, [r3, #4]
 80138ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80138ee:	18d0      	adds	r0, r2, r3
 80138f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80138f4:	68ba      	ldr	r2, [r7, #8]
 80138f6:	4413      	add	r3, r2
 80138f8:	8b3a      	ldrh	r2, [r7, #24]
 80138fa:	4619      	mov	r1, r3
 80138fc:	f009 ff22 	bl	801d744 <memcpy>
 8013900:	e02f      	b.n	8013962 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013902:	8a7b      	ldrh	r3, [r7, #18]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d006      	beq.n	8013916 <tcp_write+0x3ae>
 8013908:	4b80      	ldr	r3, [pc, #512]	; (8013b0c <tcp_write+0x5a4>)
 801390a:	f240 2271 	movw	r2, #625	; 0x271
 801390e:	4982      	ldr	r1, [pc, #520]	; (8013b18 <tcp_write+0x5b0>)
 8013910:	4880      	ldr	r0, [pc, #512]	; (8013b14 <tcp_write+0x5ac>)
 8013912:	f009 ff2d 	bl	801d770 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013916:	8b3b      	ldrh	r3, [r7, #24]
 8013918:	2201      	movs	r2, #1
 801391a:	4619      	mov	r1, r3
 801391c:	2036      	movs	r0, #54	; 0x36
 801391e:	f7fa fdc9 	bl	800e4b4 <pbuf_alloc>
 8013922:	6178      	str	r0, [r7, #20]
 8013924:	697b      	ldr	r3, [r7, #20]
 8013926:	2b00      	cmp	r3, #0
 8013928:	f000 814b 	beq.w	8013bc2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801392c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013930:	68ba      	ldr	r2, [r7, #8]
 8013932:	441a      	add	r2, r3
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013938:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801393c:	b29b      	uxth	r3, r3
 801393e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013942:	4619      	mov	r1, r3
 8013944:	2036      	movs	r0, #54	; 0x36
 8013946:	f7fa fdb5 	bl	800e4b4 <pbuf_alloc>
 801394a:	6338      	str	r0, [r7, #48]	; 0x30
 801394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801394e:	2b00      	cmp	r3, #0
 8013950:	d103      	bne.n	801395a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013952:	6978      	ldr	r0, [r7, #20]
 8013954:	f7fb f892 	bl	800ea7c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013958:	e136      	b.n	8013bc8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801395a:	6979      	ldr	r1, [r7, #20]
 801395c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801395e:	f7fb f95b 	bl	800ec18 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013964:	f7fb f918 	bl	800eb98 <pbuf_clen>
 8013968:	4603      	mov	r3, r0
 801396a:	461a      	mov	r2, r3
 801396c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013970:	4413      	add	r3, r2
 8013972:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013976:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801397a:	2b09      	cmp	r3, #9
 801397c:	d903      	bls.n	8013986 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801397e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013980:	f7fb f87c 	bl	800ea7c <pbuf_free>
      goto memerr;
 8013984:	e120      	b.n	8013bc8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801398a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801398e:	441a      	add	r2, r3
 8013990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013994:	9300      	str	r3, [sp, #0]
 8013996:	4613      	mov	r3, r2
 8013998:	2200      	movs	r2, #0
 801399a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801399c:	68f8      	ldr	r0, [r7, #12]
 801399e:	f7ff fc51 	bl	8013244 <tcp_create_segment>
 80139a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80139a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	f000 810d 	beq.w	8013bc6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80139ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d102      	bne.n	80139b8 <tcp_write+0x450>
      queue = seg;
 80139b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139b4:	647b      	str	r3, [r7, #68]	; 0x44
 80139b6:	e00c      	b.n	80139d2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80139b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d106      	bne.n	80139cc <tcp_write+0x464>
 80139be:	4b53      	ldr	r3, [pc, #332]	; (8013b0c <tcp_write+0x5a4>)
 80139c0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80139c4:	4955      	ldr	r1, [pc, #340]	; (8013b1c <tcp_write+0x5b4>)
 80139c6:	4853      	ldr	r0, [pc, #332]	; (8013b14 <tcp_write+0x5ac>)
 80139c8:	f009 fed2 	bl	801d770 <iprintf>
      prev_seg->next = seg;
 80139cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80139d0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80139d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139d4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80139d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80139da:	8b3b      	ldrh	r3, [r7, #24]
 80139dc:	4413      	add	r3, r2
 80139de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80139e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80139e6:	88fb      	ldrh	r3, [r7, #6]
 80139e8:	429a      	cmp	r2, r3
 80139ea:	f4ff af3d 	bcc.w	8013868 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80139ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d02c      	beq.n	8013a4e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80139f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139f6:	685b      	ldr	r3, [r3, #4]
 80139f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80139fa:	e01e      	b.n	8013a3a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80139fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139fe:	891a      	ldrh	r2, [r3, #8]
 8013a00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a02:	4413      	add	r3, r2
 8013a04:	b29a      	uxth	r2, r3
 8013a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a08:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8013a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d110      	bne.n	8013a34 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a14:	685b      	ldr	r3, [r3, #4]
 8013a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a18:	8952      	ldrh	r2, [r2, #10]
 8013a1a:	4413      	add	r3, r2
 8013a1c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013a1e:	68b9      	ldr	r1, [r7, #8]
 8013a20:	4618      	mov	r0, r3
 8013a22:	f009 fe8f 	bl	801d744 <memcpy>
        p->len += oversize_used;
 8013a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a28:	895a      	ldrh	r2, [r3, #10]
 8013a2a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a2c:	4413      	add	r3, r2
 8013a2e:	b29a      	uxth	r2, r3
 8013a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a32:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d1dd      	bne.n	80139fc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8013a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a42:	891a      	ldrh	r2, [r3, #8]
 8013a44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a46:	4413      	add	r3, r2
 8013a48:	b29a      	uxth	r2, r3
 8013a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a4c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8013a4e:	8a7a      	ldrh	r2, [r7, #18]
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d018      	beq.n	8013a8e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d106      	bne.n	8013a70 <tcp_write+0x508>
 8013a62:	4b2a      	ldr	r3, [pc, #168]	; (8013b0c <tcp_write+0x5a4>)
 8013a64:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8013a68:	492d      	ldr	r1, [pc, #180]	; (8013b20 <tcp_write+0x5b8>)
 8013a6a:	482a      	ldr	r0, [pc, #168]	; (8013b14 <tcp_write+0x5ac>)
 8013a6c:	f009 fe80 	bl	801d770 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a72:	685b      	ldr	r3, [r3, #4]
 8013a74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013a76:	4618      	mov	r0, r3
 8013a78:	f7fb f8ce 	bl	800ec18 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a7e:	891a      	ldrh	r2, [r3, #8]
 8013a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a82:	891b      	ldrh	r3, [r3, #8]
 8013a84:	4413      	add	r3, r2
 8013a86:	b29a      	uxth	r2, r3
 8013a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a8a:	811a      	strh	r2, [r3, #8]
 8013a8c:	e037      	b.n	8013afe <tcp_write+0x596>
  } else if (extendlen > 0) {
 8013a8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d034      	beq.n	8013afe <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d003      	beq.n	8013aa2 <tcp_write+0x53a>
 8013a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a9c:	685b      	ldr	r3, [r3, #4]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d106      	bne.n	8013ab0 <tcp_write+0x548>
 8013aa2:	4b1a      	ldr	r3, [pc, #104]	; (8013b0c <tcp_write+0x5a4>)
 8013aa4:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013aa8:	491e      	ldr	r1, [pc, #120]	; (8013b24 <tcp_write+0x5bc>)
 8013aaa:	481a      	ldr	r0, [pc, #104]	; (8013b14 <tcp_write+0x5ac>)
 8013aac:	f009 fe60 	bl	801d770 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ab2:	685b      	ldr	r3, [r3, #4]
 8013ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8013ab6:	e009      	b.n	8013acc <tcp_write+0x564>
      p->tot_len += extendlen;
 8013ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aba:	891a      	ldrh	r2, [r3, #8]
 8013abc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013abe:	4413      	add	r3, r2
 8013ac0:	b29a      	uxth	r2, r3
 8013ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ac4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8013acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d1f1      	bne.n	8013ab8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ad6:	891a      	ldrh	r2, [r3, #8]
 8013ad8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013ada:	4413      	add	r3, r2
 8013adc:	b29a      	uxth	r2, r3
 8013ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae4:	895a      	ldrh	r2, [r3, #10]
 8013ae6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013ae8:	4413      	add	r3, r2
 8013aea:	b29a      	uxth	r2, r3
 8013aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aee:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013af2:	891a      	ldrh	r2, [r3, #8]
 8013af4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013af6:	4413      	add	r3, r2
 8013af8:	b29a      	uxth	r2, r3
 8013afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013afc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8013afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d111      	bne.n	8013b28 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013b08:	66da      	str	r2, [r3, #108]	; 0x6c
 8013b0a:	e010      	b.n	8013b2e <tcp_write+0x5c6>
 8013b0c:	08020b98 	.word	0x08020b98
 8013b10:	08020e38 	.word	0x08020e38
 8013b14:	08020bec 	.word	0x08020bec
 8013b18:	08020e78 	.word	0x08020e78
 8013b1c:	08020e88 	.word	0x08020e88
 8013b20:	08020e9c 	.word	0x08020e9c
 8013b24:	08020ed4 	.word	0x08020ed4
  } else {
    last_unsent->next = queue;
 8013b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013b2c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013b32:	88fb      	ldrh	r3, [r7, #6]
 8013b34:	441a      	add	r2, r3
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013b40:	88fb      	ldrh	r3, [r7, #6]
 8013b42:	1ad3      	subs	r3, r2, r3
 8013b44:	b29a      	uxth	r2, r3
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013b52:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d00e      	beq.n	8013b7e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d10a      	bne.n	8013b7e <tcp_write+0x616>
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d106      	bne.n	8013b7e <tcp_write+0x616>
 8013b70:	4b2c      	ldr	r3, [pc, #176]	; (8013c24 <tcp_write+0x6bc>)
 8013b72:	f240 3212 	movw	r2, #786	; 0x312
 8013b76:	492c      	ldr	r1, [pc, #176]	; (8013c28 <tcp_write+0x6c0>)
 8013b78:	482c      	ldr	r0, [pc, #176]	; (8013c2c <tcp_write+0x6c4>)
 8013b7a:	f009 fdf9 	bl	801d770 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d016      	beq.n	8013bb2 <tcp_write+0x64a>
 8013b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b86:	68db      	ldr	r3, [r3, #12]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d012      	beq.n	8013bb2 <tcp_write+0x64a>
 8013b8c:	797b      	ldrb	r3, [r7, #5]
 8013b8e:	f003 0302 	and.w	r3, r3, #2
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d10d      	bne.n	8013bb2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b98:	68db      	ldr	r3, [r3, #12]
 8013b9a:	899b      	ldrh	r3, [r3, #12]
 8013b9c:	b29c      	uxth	r4, r3
 8013b9e:	2008      	movs	r0, #8
 8013ba0:	f7f9 fb6a 	bl	800d278 <lwip_htons>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	461a      	mov	r2, r3
 8013ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013baa:	68db      	ldr	r3, [r3, #12]
 8013bac:	4322      	orrs	r2, r4
 8013bae:	b292      	uxth	r2, r2
 8013bb0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	e031      	b.n	8013c1a <tcp_write+0x6b2>
          goto memerr;
 8013bb6:	bf00      	nop
 8013bb8:	e006      	b.n	8013bc8 <tcp_write+0x660>
            goto memerr;
 8013bba:	bf00      	nop
 8013bbc:	e004      	b.n	8013bc8 <tcp_write+0x660>
        goto memerr;
 8013bbe:	bf00      	nop
 8013bc0:	e002      	b.n	8013bc8 <tcp_write+0x660>
        goto memerr;
 8013bc2:	bf00      	nop
 8013bc4:	e000      	b.n	8013bc8 <tcp_write+0x660>
      goto memerr;
 8013bc6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	8b5b      	ldrh	r3, [r3, #26]
 8013bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013bd0:	b29a      	uxth	r2, r3
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d002      	beq.n	8013be2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8013bdc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013bde:	f7fa ff4d 	bl	800ea7c <pbuf_free>
  }
  if (queue != NULL) {
 8013be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d002      	beq.n	8013bee <tcp_write+0x686>
    tcp_segs_free(queue);
 8013be8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013bea:	f7fc fb6b 	bl	80102c4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d00e      	beq.n	8013c16 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d10a      	bne.n	8013c16 <tcp_write+0x6ae>
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d106      	bne.n	8013c16 <tcp_write+0x6ae>
 8013c08:	4b06      	ldr	r3, [pc, #24]	; (8013c24 <tcp_write+0x6bc>)
 8013c0a:	f240 3227 	movw	r2, #807	; 0x327
 8013c0e:	4906      	ldr	r1, [pc, #24]	; (8013c28 <tcp_write+0x6c0>)
 8013c10:	4806      	ldr	r0, [pc, #24]	; (8013c2c <tcp_write+0x6c4>)
 8013c12:	f009 fdad 	bl	801d770 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	375c      	adds	r7, #92	; 0x5c
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd90      	pop	{r4, r7, pc}
 8013c22:	bf00      	nop
 8013c24:	08020b98 	.word	0x08020b98
 8013c28:	08020f0c 	.word	0x08020f0c
 8013c2c:	08020bec 	.word	0x08020bec

08013c30 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013c30:	b590      	push	{r4, r7, lr}
 8013c32:	b08b      	sub	sp, #44	; 0x2c
 8013c34:	af02      	add	r7, sp, #8
 8013c36:	6078      	str	r0, [r7, #4]
 8013c38:	460b      	mov	r3, r1
 8013c3a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	61fb      	str	r3, [r7, #28]
 8013c40:	2300      	movs	r3, #0
 8013c42:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013c44:	2300      	movs	r3, #0
 8013c46:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d106      	bne.n	8013c5c <tcp_split_unsent_seg+0x2c>
 8013c4e:	4b95      	ldr	r3, [pc, #596]	; (8013ea4 <tcp_split_unsent_seg+0x274>)
 8013c50:	f240 324b 	movw	r2, #843	; 0x34b
 8013c54:	4994      	ldr	r1, [pc, #592]	; (8013ea8 <tcp_split_unsent_seg+0x278>)
 8013c56:	4895      	ldr	r0, [pc, #596]	; (8013eac <tcp_split_unsent_seg+0x27c>)
 8013c58:	f009 fd8a 	bl	801d770 <iprintf>

  useg = pcb->unsent;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c60:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013c62:	697b      	ldr	r3, [r7, #20]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d102      	bne.n	8013c6e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c6c:	e116      	b.n	8013e9c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013c6e:	887b      	ldrh	r3, [r7, #2]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d109      	bne.n	8013c88 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013c74:	4b8b      	ldr	r3, [pc, #556]	; (8013ea4 <tcp_split_unsent_seg+0x274>)
 8013c76:	f240 3253 	movw	r2, #851	; 0x353
 8013c7a:	498d      	ldr	r1, [pc, #564]	; (8013eb0 <tcp_split_unsent_seg+0x280>)
 8013c7c:	488b      	ldr	r0, [pc, #556]	; (8013eac <tcp_split_unsent_seg+0x27c>)
 8013c7e:	f009 fd77 	bl	801d770 <iprintf>
    return ERR_VAL;
 8013c82:	f06f 0305 	mvn.w	r3, #5
 8013c86:	e109      	b.n	8013e9c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013c88:	697b      	ldr	r3, [r7, #20]
 8013c8a:	891b      	ldrh	r3, [r3, #8]
 8013c8c:	887a      	ldrh	r2, [r7, #2]
 8013c8e:	429a      	cmp	r2, r3
 8013c90:	d301      	bcc.n	8013c96 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013c92:	2300      	movs	r3, #0
 8013c94:	e102      	b.n	8013e9c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c9a:	887a      	ldrh	r2, [r7, #2]
 8013c9c:	429a      	cmp	r2, r3
 8013c9e:	d906      	bls.n	8013cae <tcp_split_unsent_seg+0x7e>
 8013ca0:	4b80      	ldr	r3, [pc, #512]	; (8013ea4 <tcp_split_unsent_seg+0x274>)
 8013ca2:	f240 325b 	movw	r2, #859	; 0x35b
 8013ca6:	4983      	ldr	r1, [pc, #524]	; (8013eb4 <tcp_split_unsent_seg+0x284>)
 8013ca8:	4880      	ldr	r0, [pc, #512]	; (8013eac <tcp_split_unsent_seg+0x27c>)
 8013caa:	f009 fd61 	bl	801d770 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013cae:	697b      	ldr	r3, [r7, #20]
 8013cb0:	891b      	ldrh	r3, [r3, #8]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d106      	bne.n	8013cc4 <tcp_split_unsent_seg+0x94>
 8013cb6:	4b7b      	ldr	r3, [pc, #492]	; (8013ea4 <tcp_split_unsent_seg+0x274>)
 8013cb8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013cbc:	497e      	ldr	r1, [pc, #504]	; (8013eb8 <tcp_split_unsent_seg+0x288>)
 8013cbe:	487b      	ldr	r0, [pc, #492]	; (8013eac <tcp_split_unsent_seg+0x27c>)
 8013cc0:	f009 fd56 	bl	801d770 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	7a9b      	ldrb	r3, [r3, #10]
 8013cc8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013cca:	7bfb      	ldrb	r3, [r7, #15]
 8013ccc:	009b      	lsls	r3, r3, #2
 8013cce:	b2db      	uxtb	r3, r3
 8013cd0:	f003 0304 	and.w	r3, r3, #4
 8013cd4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013cd6:	697b      	ldr	r3, [r7, #20]
 8013cd8:	891a      	ldrh	r2, [r3, #8]
 8013cda:	887b      	ldrh	r3, [r7, #2]
 8013cdc:	1ad3      	subs	r3, r2, r3
 8013cde:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013ce0:	7bbb      	ldrb	r3, [r7, #14]
 8013ce2:	b29a      	uxth	r2, r3
 8013ce4:	89bb      	ldrh	r3, [r7, #12]
 8013ce6:	4413      	add	r3, r2
 8013ce8:	b29b      	uxth	r3, r3
 8013cea:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013cee:	4619      	mov	r1, r3
 8013cf0:	2036      	movs	r0, #54	; 0x36
 8013cf2:	f7fa fbdf 	bl	800e4b4 <pbuf_alloc>
 8013cf6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013cf8:	693b      	ldr	r3, [r7, #16]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	f000 80b7 	beq.w	8013e6e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013d00:	697b      	ldr	r3, [r7, #20]
 8013d02:	685b      	ldr	r3, [r3, #4]
 8013d04:	891a      	ldrh	r2, [r3, #8]
 8013d06:	697b      	ldr	r3, [r7, #20]
 8013d08:	891b      	ldrh	r3, [r3, #8]
 8013d0a:	1ad3      	subs	r3, r2, r3
 8013d0c:	b29a      	uxth	r2, r3
 8013d0e:	887b      	ldrh	r3, [r7, #2]
 8013d10:	4413      	add	r3, r2
 8013d12:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013d14:	697b      	ldr	r3, [r7, #20]
 8013d16:	6858      	ldr	r0, [r3, #4]
 8013d18:	693b      	ldr	r3, [r7, #16]
 8013d1a:	685a      	ldr	r2, [r3, #4]
 8013d1c:	7bbb      	ldrb	r3, [r7, #14]
 8013d1e:	18d1      	adds	r1, r2, r3
 8013d20:	897b      	ldrh	r3, [r7, #10]
 8013d22:	89ba      	ldrh	r2, [r7, #12]
 8013d24:	f7fb f8a0 	bl	800ee68 <pbuf_copy_partial>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	461a      	mov	r2, r3
 8013d2c:	89bb      	ldrh	r3, [r7, #12]
 8013d2e:	4293      	cmp	r3, r2
 8013d30:	f040 809f 	bne.w	8013e72 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013d34:	697b      	ldr	r3, [r7, #20]
 8013d36:	68db      	ldr	r3, [r3, #12]
 8013d38:	899b      	ldrh	r3, [r3, #12]
 8013d3a:	b29b      	uxth	r3, r3
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f7f9 fa9b 	bl	800d278 <lwip_htons>
 8013d42:	4603      	mov	r3, r0
 8013d44:	b2db      	uxtb	r3, r3
 8013d46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013d4a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013d50:	7efb      	ldrb	r3, [r7, #27]
 8013d52:	f003 0308 	and.w	r3, r3, #8
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d007      	beq.n	8013d6a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013d5a:	7efb      	ldrb	r3, [r7, #27]
 8013d5c:	f023 0308 	bic.w	r3, r3, #8
 8013d60:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013d62:	7ebb      	ldrb	r3, [r7, #26]
 8013d64:	f043 0308 	orr.w	r3, r3, #8
 8013d68:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013d6a:	7efb      	ldrb	r3, [r7, #27]
 8013d6c:	f003 0301 	and.w	r3, r3, #1
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d007      	beq.n	8013d84 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013d74:	7efb      	ldrb	r3, [r7, #27]
 8013d76:	f023 0301 	bic.w	r3, r3, #1
 8013d7a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013d7c:	7ebb      	ldrb	r3, [r7, #26]
 8013d7e:	f043 0301 	orr.w	r3, r3, #1
 8013d82:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013d84:	697b      	ldr	r3, [r7, #20]
 8013d86:	68db      	ldr	r3, [r3, #12]
 8013d88:	685b      	ldr	r3, [r3, #4]
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7f9 fa89 	bl	800d2a2 <lwip_htonl>
 8013d90:	4602      	mov	r2, r0
 8013d92:	887b      	ldrh	r3, [r7, #2]
 8013d94:	18d1      	adds	r1, r2, r3
 8013d96:	7eba      	ldrb	r2, [r7, #26]
 8013d98:	7bfb      	ldrb	r3, [r7, #15]
 8013d9a:	9300      	str	r3, [sp, #0]
 8013d9c:	460b      	mov	r3, r1
 8013d9e:	6939      	ldr	r1, [r7, #16]
 8013da0:	6878      	ldr	r0, [r7, #4]
 8013da2:	f7ff fa4f 	bl	8013244 <tcp_create_segment>
 8013da6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013da8:	69fb      	ldr	r3, [r7, #28]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d063      	beq.n	8013e76 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013dae:	697b      	ldr	r3, [r7, #20]
 8013db0:	685b      	ldr	r3, [r3, #4]
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7fa fef0 	bl	800eb98 <pbuf_clen>
 8013db8:	4603      	mov	r3, r0
 8013dba:	461a      	mov	r2, r3
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013dc2:	1a9b      	subs	r3, r3, r2
 8013dc4:	b29a      	uxth	r2, r3
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013dcc:	697b      	ldr	r3, [r7, #20]
 8013dce:	6858      	ldr	r0, [r3, #4]
 8013dd0:	697b      	ldr	r3, [r7, #20]
 8013dd2:	685b      	ldr	r3, [r3, #4]
 8013dd4:	891a      	ldrh	r2, [r3, #8]
 8013dd6:	89bb      	ldrh	r3, [r7, #12]
 8013dd8:	1ad3      	subs	r3, r2, r3
 8013dda:	b29b      	uxth	r3, r3
 8013ddc:	4619      	mov	r1, r3
 8013dde:	f7fa fcc7 	bl	800e770 <pbuf_realloc>
  useg->len -= remainder;
 8013de2:	697b      	ldr	r3, [r7, #20]
 8013de4:	891a      	ldrh	r2, [r3, #8]
 8013de6:	89bb      	ldrh	r3, [r7, #12]
 8013de8:	1ad3      	subs	r3, r2, r3
 8013dea:	b29a      	uxth	r2, r3
 8013dec:	697b      	ldr	r3, [r7, #20]
 8013dee:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013df0:	697b      	ldr	r3, [r7, #20]
 8013df2:	68db      	ldr	r3, [r3, #12]
 8013df4:	899b      	ldrh	r3, [r3, #12]
 8013df6:	b29c      	uxth	r4, r3
 8013df8:	7efb      	ldrb	r3, [r7, #27]
 8013dfa:	b29b      	uxth	r3, r3
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f7f9 fa3b 	bl	800d278 <lwip_htons>
 8013e02:	4603      	mov	r3, r0
 8013e04:	461a      	mov	r2, r3
 8013e06:	697b      	ldr	r3, [r7, #20]
 8013e08:	68db      	ldr	r3, [r3, #12]
 8013e0a:	4322      	orrs	r2, r4
 8013e0c:	b292      	uxth	r2, r2
 8013e0e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	685b      	ldr	r3, [r3, #4]
 8013e14:	4618      	mov	r0, r3
 8013e16:	f7fa febf 	bl	800eb98 <pbuf_clen>
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	461a      	mov	r2, r3
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e24:	4413      	add	r3, r2
 8013e26:	b29a      	uxth	r2, r3
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013e2e:	69fb      	ldr	r3, [r7, #28]
 8013e30:	685b      	ldr	r3, [r3, #4]
 8013e32:	4618      	mov	r0, r3
 8013e34:	f7fa feb0 	bl	800eb98 <pbuf_clen>
 8013e38:	4603      	mov	r3, r0
 8013e3a:	461a      	mov	r2, r3
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e42:	4413      	add	r3, r2
 8013e44:	b29a      	uxth	r2, r3
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013e4c:	697b      	ldr	r3, [r7, #20]
 8013e4e:	681a      	ldr	r2, [r3, #0]
 8013e50:	69fb      	ldr	r3, [r7, #28]
 8013e52:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013e54:	697b      	ldr	r3, [r7, #20]
 8013e56:	69fa      	ldr	r2, [r7, #28]
 8013e58:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013e5a:	69fb      	ldr	r3, [r7, #28]
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d103      	bne.n	8013e6a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	2200      	movs	r2, #0
 8013e66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	e016      	b.n	8013e9c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013e6e:	bf00      	nop
 8013e70:	e002      	b.n	8013e78 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013e72:	bf00      	nop
 8013e74:	e000      	b.n	8013e78 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013e76:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013e78:	69fb      	ldr	r3, [r7, #28]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d006      	beq.n	8013e8c <tcp_split_unsent_seg+0x25c>
 8013e7e:	4b09      	ldr	r3, [pc, #36]	; (8013ea4 <tcp_split_unsent_seg+0x274>)
 8013e80:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013e84:	490d      	ldr	r1, [pc, #52]	; (8013ebc <tcp_split_unsent_seg+0x28c>)
 8013e86:	4809      	ldr	r0, [pc, #36]	; (8013eac <tcp_split_unsent_seg+0x27c>)
 8013e88:	f009 fc72 	bl	801d770 <iprintf>
  if (p != NULL) {
 8013e8c:	693b      	ldr	r3, [r7, #16]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d002      	beq.n	8013e98 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013e92:	6938      	ldr	r0, [r7, #16]
 8013e94:	f7fa fdf2 	bl	800ea7c <pbuf_free>
  }

  return ERR_MEM;
 8013e98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	3724      	adds	r7, #36	; 0x24
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	bd90      	pop	{r4, r7, pc}
 8013ea4:	08020b98 	.word	0x08020b98
 8013ea8:	08020f2c 	.word	0x08020f2c
 8013eac:	08020bec 	.word	0x08020bec
 8013eb0:	08020f50 	.word	0x08020f50
 8013eb4:	08020f74 	.word	0x08020f74
 8013eb8:	08020f84 	.word	0x08020f84
 8013ebc:	08020f94 	.word	0x08020f94

08013ec0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013ec0:	b590      	push	{r4, r7, lr}
 8013ec2:	b085      	sub	sp, #20
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d106      	bne.n	8013edc <tcp_send_fin+0x1c>
 8013ece:	4b21      	ldr	r3, [pc, #132]	; (8013f54 <tcp_send_fin+0x94>)
 8013ed0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013ed4:	4920      	ldr	r1, [pc, #128]	; (8013f58 <tcp_send_fin+0x98>)
 8013ed6:	4821      	ldr	r0, [pc, #132]	; (8013f5c <tcp_send_fin+0x9c>)
 8013ed8:	f009 fc4a 	bl	801d770 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d02e      	beq.n	8013f42 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ee8:	60fb      	str	r3, [r7, #12]
 8013eea:	e002      	b.n	8013ef2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d1f8      	bne.n	8013eec <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	68db      	ldr	r3, [r3, #12]
 8013efe:	899b      	ldrh	r3, [r3, #12]
 8013f00:	b29b      	uxth	r3, r3
 8013f02:	4618      	mov	r0, r3
 8013f04:	f7f9 f9b8 	bl	800d278 <lwip_htons>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	b2db      	uxtb	r3, r3
 8013f0c:	f003 0307 	and.w	r3, r3, #7
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d116      	bne.n	8013f42 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	68db      	ldr	r3, [r3, #12]
 8013f18:	899b      	ldrh	r3, [r3, #12]
 8013f1a:	b29c      	uxth	r4, r3
 8013f1c:	2001      	movs	r0, #1
 8013f1e:	f7f9 f9ab 	bl	800d278 <lwip_htons>
 8013f22:	4603      	mov	r3, r0
 8013f24:	461a      	mov	r2, r3
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	68db      	ldr	r3, [r3, #12]
 8013f2a:	4322      	orrs	r2, r4
 8013f2c:	b292      	uxth	r2, r2
 8013f2e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	8b5b      	ldrh	r3, [r3, #26]
 8013f34:	f043 0320 	orr.w	r3, r3, #32
 8013f38:	b29a      	uxth	r2, r3
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	e004      	b.n	8013f4c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013f42:	2101      	movs	r1, #1
 8013f44:	6878      	ldr	r0, [r7, #4]
 8013f46:	f000 f80b 	bl	8013f60 <tcp_enqueue_flags>
 8013f4a:	4603      	mov	r3, r0
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3714      	adds	r7, #20
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd90      	pop	{r4, r7, pc}
 8013f54:	08020b98 	.word	0x08020b98
 8013f58:	08020fa0 	.word	0x08020fa0
 8013f5c:	08020bec 	.word	0x08020bec

08013f60 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b08a      	sub	sp, #40	; 0x28
 8013f64:	af02      	add	r7, sp, #8
 8013f66:	6078      	str	r0, [r7, #4]
 8013f68:	460b      	mov	r3, r1
 8013f6a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013f70:	2300      	movs	r3, #0
 8013f72:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013f74:	78fb      	ldrb	r3, [r7, #3]
 8013f76:	f003 0303 	and.w	r3, r3, #3
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d106      	bne.n	8013f8c <tcp_enqueue_flags+0x2c>
 8013f7e:	4b67      	ldr	r3, [pc, #412]	; (801411c <tcp_enqueue_flags+0x1bc>)
 8013f80:	f240 4211 	movw	r2, #1041	; 0x411
 8013f84:	4966      	ldr	r1, [pc, #408]	; (8014120 <tcp_enqueue_flags+0x1c0>)
 8013f86:	4867      	ldr	r0, [pc, #412]	; (8014124 <tcp_enqueue_flags+0x1c4>)
 8013f88:	f009 fbf2 	bl	801d770 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d106      	bne.n	8013fa0 <tcp_enqueue_flags+0x40>
 8013f92:	4b62      	ldr	r3, [pc, #392]	; (801411c <tcp_enqueue_flags+0x1bc>)
 8013f94:	f240 4213 	movw	r2, #1043	; 0x413
 8013f98:	4963      	ldr	r1, [pc, #396]	; (8014128 <tcp_enqueue_flags+0x1c8>)
 8013f9a:	4862      	ldr	r0, [pc, #392]	; (8014124 <tcp_enqueue_flags+0x1c4>)
 8013f9c:	f009 fbe8 	bl	801d770 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013fa0:	78fb      	ldrb	r3, [r7, #3]
 8013fa2:	f003 0302 	and.w	r3, r3, #2
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d001      	beq.n	8013fae <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013faa:	2301      	movs	r3, #1
 8013fac:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013fae:	7ffb      	ldrb	r3, [r7, #31]
 8013fb0:	009b      	lsls	r3, r3, #2
 8013fb2:	b2db      	uxtb	r3, r3
 8013fb4:	f003 0304 	and.w	r3, r3, #4
 8013fb8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013fba:	7dfb      	ldrb	r3, [r7, #23]
 8013fbc:	b29b      	uxth	r3, r3
 8013fbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013fc2:	4619      	mov	r1, r3
 8013fc4:	2036      	movs	r0, #54	; 0x36
 8013fc6:	f7fa fa75 	bl	800e4b4 <pbuf_alloc>
 8013fca:	6138      	str	r0, [r7, #16]
 8013fcc:	693b      	ldr	r3, [r7, #16]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d109      	bne.n	8013fe6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	8b5b      	ldrh	r3, [r3, #26]
 8013fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013fda:	b29a      	uxth	r2, r3
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013fe4:	e095      	b.n	8014112 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013fe6:	693b      	ldr	r3, [r7, #16]
 8013fe8:	895a      	ldrh	r2, [r3, #10]
 8013fea:	7dfb      	ldrb	r3, [r7, #23]
 8013fec:	b29b      	uxth	r3, r3
 8013fee:	429a      	cmp	r2, r3
 8013ff0:	d206      	bcs.n	8014000 <tcp_enqueue_flags+0xa0>
 8013ff2:	4b4a      	ldr	r3, [pc, #296]	; (801411c <tcp_enqueue_flags+0x1bc>)
 8013ff4:	f240 4239 	movw	r2, #1081	; 0x439
 8013ff8:	494c      	ldr	r1, [pc, #304]	; (801412c <tcp_enqueue_flags+0x1cc>)
 8013ffa:	484a      	ldr	r0, [pc, #296]	; (8014124 <tcp_enqueue_flags+0x1c4>)
 8013ffc:	f009 fbb8 	bl	801d770 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014004:	78fa      	ldrb	r2, [r7, #3]
 8014006:	7ffb      	ldrb	r3, [r7, #31]
 8014008:	9300      	str	r3, [sp, #0]
 801400a:	460b      	mov	r3, r1
 801400c:	6939      	ldr	r1, [r7, #16]
 801400e:	6878      	ldr	r0, [r7, #4]
 8014010:	f7ff f918 	bl	8013244 <tcp_create_segment>
 8014014:	60f8      	str	r0, [r7, #12]
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d109      	bne.n	8014030 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	8b5b      	ldrh	r3, [r3, #26]
 8014020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014024:	b29a      	uxth	r2, r3
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801402a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801402e:	e070      	b.n	8014112 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	68db      	ldr	r3, [r3, #12]
 8014034:	f003 0303 	and.w	r3, r3, #3
 8014038:	2b00      	cmp	r3, #0
 801403a:	d006      	beq.n	801404a <tcp_enqueue_flags+0xea>
 801403c:	4b37      	ldr	r3, [pc, #220]	; (801411c <tcp_enqueue_flags+0x1bc>)
 801403e:	f240 4242 	movw	r2, #1090	; 0x442
 8014042:	493b      	ldr	r1, [pc, #236]	; (8014130 <tcp_enqueue_flags+0x1d0>)
 8014044:	4837      	ldr	r0, [pc, #220]	; (8014124 <tcp_enqueue_flags+0x1c4>)
 8014046:	f009 fb93 	bl	801d770 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	891b      	ldrh	r3, [r3, #8]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d006      	beq.n	8014060 <tcp_enqueue_flags+0x100>
 8014052:	4b32      	ldr	r3, [pc, #200]	; (801411c <tcp_enqueue_flags+0x1bc>)
 8014054:	f240 4243 	movw	r2, #1091	; 0x443
 8014058:	4936      	ldr	r1, [pc, #216]	; (8014134 <tcp_enqueue_flags+0x1d4>)
 801405a:	4832      	ldr	r0, [pc, #200]	; (8014124 <tcp_enqueue_flags+0x1c4>)
 801405c:	f009 fb88 	bl	801d770 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014064:	2b00      	cmp	r3, #0
 8014066:	d103      	bne.n	8014070 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	68fa      	ldr	r2, [r7, #12]
 801406c:	66da      	str	r2, [r3, #108]	; 0x6c
 801406e:	e00d      	b.n	801408c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014074:	61bb      	str	r3, [r7, #24]
 8014076:	e002      	b.n	801407e <tcp_enqueue_flags+0x11e>
 8014078:	69bb      	ldr	r3, [r7, #24]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	61bb      	str	r3, [r7, #24]
 801407e:	69bb      	ldr	r3, [r7, #24]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d1f8      	bne.n	8014078 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014086:	69bb      	ldr	r3, [r7, #24]
 8014088:	68fa      	ldr	r2, [r7, #12]
 801408a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2200      	movs	r2, #0
 8014090:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014094:	78fb      	ldrb	r3, [r7, #3]
 8014096:	f003 0302 	and.w	r3, r3, #2
 801409a:	2b00      	cmp	r3, #0
 801409c:	d104      	bne.n	80140a8 <tcp_enqueue_flags+0x148>
 801409e:	78fb      	ldrb	r3, [r7, #3]
 80140a0:	f003 0301 	and.w	r3, r3, #1
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d004      	beq.n	80140b2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80140ac:	1c5a      	adds	r2, r3, #1
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80140b2:	78fb      	ldrb	r3, [r7, #3]
 80140b4:	f003 0301 	and.w	r3, r3, #1
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d006      	beq.n	80140ca <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	8b5b      	ldrh	r3, [r3, #26]
 80140c0:	f043 0320 	orr.w	r3, r3, #32
 80140c4:	b29a      	uxth	r2, r3
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	685b      	ldr	r3, [r3, #4]
 80140ce:	4618      	mov	r0, r3
 80140d0:	f7fa fd62 	bl	800eb98 <pbuf_clen>
 80140d4:	4603      	mov	r3, r0
 80140d6:	461a      	mov	r2, r3
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80140de:	4413      	add	r3, r2
 80140e0:	b29a      	uxth	r2, r3
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d00e      	beq.n	8014110 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d10a      	bne.n	8014110 <tcp_enqueue_flags+0x1b0>
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d106      	bne.n	8014110 <tcp_enqueue_flags+0x1b0>
 8014102:	4b06      	ldr	r3, [pc, #24]	; (801411c <tcp_enqueue_flags+0x1bc>)
 8014104:	f240 4265 	movw	r2, #1125	; 0x465
 8014108:	490b      	ldr	r1, [pc, #44]	; (8014138 <tcp_enqueue_flags+0x1d8>)
 801410a:	4806      	ldr	r0, [pc, #24]	; (8014124 <tcp_enqueue_flags+0x1c4>)
 801410c:	f009 fb30 	bl	801d770 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014110:	2300      	movs	r3, #0
}
 8014112:	4618      	mov	r0, r3
 8014114:	3720      	adds	r7, #32
 8014116:	46bd      	mov	sp, r7
 8014118:	bd80      	pop	{r7, pc}
 801411a:	bf00      	nop
 801411c:	08020b98 	.word	0x08020b98
 8014120:	08020fbc 	.word	0x08020fbc
 8014124:	08020bec 	.word	0x08020bec
 8014128:	08021014 	.word	0x08021014
 801412c:	08021034 	.word	0x08021034
 8014130:	08021070 	.word	0x08021070
 8014134:	08021088 	.word	0x08021088
 8014138:	080210b4 	.word	0x080210b4

0801413c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801413c:	b5b0      	push	{r4, r5, r7, lr}
 801413e:	b08a      	sub	sp, #40	; 0x28
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d106      	bne.n	8014158 <tcp_output+0x1c>
 801414a:	4b8a      	ldr	r3, [pc, #552]	; (8014374 <tcp_output+0x238>)
 801414c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014150:	4989      	ldr	r1, [pc, #548]	; (8014378 <tcp_output+0x23c>)
 8014152:	488a      	ldr	r0, [pc, #552]	; (801437c <tcp_output+0x240>)
 8014154:	f009 fb0c 	bl	801d770 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	7d1b      	ldrb	r3, [r3, #20]
 801415c:	2b01      	cmp	r3, #1
 801415e:	d106      	bne.n	801416e <tcp_output+0x32>
 8014160:	4b84      	ldr	r3, [pc, #528]	; (8014374 <tcp_output+0x238>)
 8014162:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014166:	4986      	ldr	r1, [pc, #536]	; (8014380 <tcp_output+0x244>)
 8014168:	4884      	ldr	r0, [pc, #528]	; (801437c <tcp_output+0x240>)
 801416a:	f009 fb01 	bl	801d770 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801416e:	4b85      	ldr	r3, [pc, #532]	; (8014384 <tcp_output+0x248>)
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	687a      	ldr	r2, [r7, #4]
 8014174:	429a      	cmp	r2, r3
 8014176:	d101      	bne.n	801417c <tcp_output+0x40>
    return ERR_OK;
 8014178:	2300      	movs	r3, #0
 801417a:	e1ce      	b.n	801451a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014188:	4293      	cmp	r3, r2
 801418a:	bf28      	it	cs
 801418c:	4613      	movcs	r3, r2
 801418e:	b29b      	uxth	r3, r3
 8014190:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014196:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801419a:	2b00      	cmp	r3, #0
 801419c:	d10b      	bne.n	80141b6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	8b5b      	ldrh	r3, [r3, #26]
 80141a2:	f003 0302 	and.w	r3, r3, #2
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	f000 81aa 	beq.w	8014500 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80141ac:	6878      	ldr	r0, [r7, #4]
 80141ae:	f000 fdcb 	bl	8014d48 <tcp_send_empty_ack>
 80141b2:	4603      	mov	r3, r0
 80141b4:	e1b1      	b.n	801451a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80141b6:	6879      	ldr	r1, [r7, #4]
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	3304      	adds	r3, #4
 80141bc:	461a      	mov	r2, r3
 80141be:	6878      	ldr	r0, [r7, #4]
 80141c0:	f7ff f824 	bl	801320c <tcp_route>
 80141c4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80141c6:	697b      	ldr	r3, [r7, #20]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d102      	bne.n	80141d2 <tcp_output+0x96>
    return ERR_RTE;
 80141cc:	f06f 0303 	mvn.w	r3, #3
 80141d0:	e1a3      	b.n	801451a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d003      	beq.n	80141e0 <tcp_output+0xa4>
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d111      	bne.n	8014204 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80141e0:	697b      	ldr	r3, [r7, #20]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d002      	beq.n	80141ec <tcp_output+0xb0>
 80141e6:	697b      	ldr	r3, [r7, #20]
 80141e8:	3304      	adds	r3, #4
 80141ea:	e000      	b.n	80141ee <tcp_output+0xb2>
 80141ec:	2300      	movs	r3, #0
 80141ee:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80141f0:	693b      	ldr	r3, [r7, #16]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d102      	bne.n	80141fc <tcp_output+0xc0>
      return ERR_RTE;
 80141f6:	f06f 0303 	mvn.w	r3, #3
 80141fa:	e18e      	b.n	801451a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80141fc:	693b      	ldr	r3, [r7, #16]
 80141fe:	681a      	ldr	r2, [r3, #0]
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014206:	68db      	ldr	r3, [r3, #12]
 8014208:	685b      	ldr	r3, [r3, #4]
 801420a:	4618      	mov	r0, r3
 801420c:	f7f9 f849 	bl	800d2a2 <lwip_htonl>
 8014210:	4602      	mov	r2, r0
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014216:	1ad3      	subs	r3, r2, r3
 8014218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801421a:	8912      	ldrh	r2, [r2, #8]
 801421c:	4413      	add	r3, r2
 801421e:	69ba      	ldr	r2, [r7, #24]
 8014220:	429a      	cmp	r2, r3
 8014222:	d227      	bcs.n	8014274 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801422a:	461a      	mov	r2, r3
 801422c:	69bb      	ldr	r3, [r7, #24]
 801422e:	4293      	cmp	r3, r2
 8014230:	d114      	bne.n	801425c <tcp_output+0x120>
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014236:	2b00      	cmp	r3, #0
 8014238:	d110      	bne.n	801425c <tcp_output+0x120>
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014240:	2b00      	cmp	r3, #0
 8014242:	d10b      	bne.n	801425c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	2200      	movs	r2, #0
 8014248:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	2201      	movs	r2, #1
 8014250:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	2200      	movs	r2, #0
 8014258:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	8b5b      	ldrh	r3, [r3, #26]
 8014260:	f003 0302 	and.w	r3, r3, #2
 8014264:	2b00      	cmp	r3, #0
 8014266:	f000 814d 	beq.w	8014504 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801426a:	6878      	ldr	r0, [r7, #4]
 801426c:	f000 fd6c 	bl	8014d48 <tcp_send_empty_ack>
 8014270:	4603      	mov	r3, r0
 8014272:	e152      	b.n	801451a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	2200      	movs	r2, #0
 8014278:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014280:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014282:	6a3b      	ldr	r3, [r7, #32]
 8014284:	2b00      	cmp	r3, #0
 8014286:	f000 811c 	beq.w	80144c2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801428a:	e002      	b.n	8014292 <tcp_output+0x156>
 801428c:	6a3b      	ldr	r3, [r7, #32]
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	623b      	str	r3, [r7, #32]
 8014292:	6a3b      	ldr	r3, [r7, #32]
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d1f8      	bne.n	801428c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801429a:	e112      	b.n	80144c2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801429e:	68db      	ldr	r3, [r3, #12]
 80142a0:	899b      	ldrh	r3, [r3, #12]
 80142a2:	b29b      	uxth	r3, r3
 80142a4:	4618      	mov	r0, r3
 80142a6:	f7f8 ffe7 	bl	800d278 <lwip_htons>
 80142aa:	4603      	mov	r3, r0
 80142ac:	b2db      	uxtb	r3, r3
 80142ae:	f003 0304 	and.w	r3, r3, #4
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d006      	beq.n	80142c4 <tcp_output+0x188>
 80142b6:	4b2f      	ldr	r3, [pc, #188]	; (8014374 <tcp_output+0x238>)
 80142b8:	f240 5236 	movw	r2, #1334	; 0x536
 80142bc:	4932      	ldr	r1, [pc, #200]	; (8014388 <tcp_output+0x24c>)
 80142be:	482f      	ldr	r0, [pc, #188]	; (801437c <tcp_output+0x240>)
 80142c0:	f009 fa56 	bl	801d770 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d01f      	beq.n	801430c <tcp_output+0x1d0>
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	8b5b      	ldrh	r3, [r3, #26]
 80142d0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d119      	bne.n	801430c <tcp_output+0x1d0>
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d00b      	beq.n	80142f8 <tcp_output+0x1bc>
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d110      	bne.n	801430c <tcp_output+0x1d0>
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142ee:	891a      	ldrh	r2, [r3, #8]
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80142f4:	429a      	cmp	r2, r3
 80142f6:	d209      	bcs.n	801430c <tcp_output+0x1d0>
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d004      	beq.n	801430c <tcp_output+0x1d0>
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014308:	2b08      	cmp	r3, #8
 801430a:	d901      	bls.n	8014310 <tcp_output+0x1d4>
 801430c:	2301      	movs	r3, #1
 801430e:	e000      	b.n	8014312 <tcp_output+0x1d6>
 8014310:	2300      	movs	r3, #0
 8014312:	2b00      	cmp	r3, #0
 8014314:	d106      	bne.n	8014324 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	8b5b      	ldrh	r3, [r3, #26]
 801431a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801431e:	2b00      	cmp	r3, #0
 8014320:	f000 80e4 	beq.w	80144ec <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	7d1b      	ldrb	r3, [r3, #20]
 8014328:	2b02      	cmp	r3, #2
 801432a:	d00d      	beq.n	8014348 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801432e:	68db      	ldr	r3, [r3, #12]
 8014330:	899b      	ldrh	r3, [r3, #12]
 8014332:	b29c      	uxth	r4, r3
 8014334:	2010      	movs	r0, #16
 8014336:	f7f8 ff9f 	bl	800d278 <lwip_htons>
 801433a:	4603      	mov	r3, r0
 801433c:	461a      	mov	r2, r3
 801433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014340:	68db      	ldr	r3, [r3, #12]
 8014342:	4322      	orrs	r2, r4
 8014344:	b292      	uxth	r2, r2
 8014346:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014348:	697a      	ldr	r2, [r7, #20]
 801434a:	6879      	ldr	r1, [r7, #4]
 801434c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801434e:	f000 f909 	bl	8014564 <tcp_output_segment>
 8014352:	4603      	mov	r3, r0
 8014354:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d016      	beq.n	801438c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	8b5b      	ldrh	r3, [r3, #26]
 8014362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014366:	b29a      	uxth	r2, r3
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	835a      	strh	r2, [r3, #26]
      return err;
 801436c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014370:	e0d3      	b.n	801451a <tcp_output+0x3de>
 8014372:	bf00      	nop
 8014374:	08020b98 	.word	0x08020b98
 8014378:	080210dc 	.word	0x080210dc
 801437c:	08020bec 	.word	0x08020bec
 8014380:	080210f4 	.word	0x080210f4
 8014384:	20011408 	.word	0x20011408
 8014388:	0802111c 	.word	0x0802111c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801438e:	681a      	ldr	r2, [r3, #0]
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	7d1b      	ldrb	r3, [r3, #20]
 8014398:	2b02      	cmp	r3, #2
 801439a:	d006      	beq.n	80143aa <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	8b5b      	ldrh	r3, [r3, #26]
 80143a0:	f023 0303 	bic.w	r3, r3, #3
 80143a4:	b29a      	uxth	r2, r3
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80143aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ac:	68db      	ldr	r3, [r3, #12]
 80143ae:	685b      	ldr	r3, [r3, #4]
 80143b0:	4618      	mov	r0, r3
 80143b2:	f7f8 ff76 	bl	800d2a2 <lwip_htonl>
 80143b6:	4604      	mov	r4, r0
 80143b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ba:	891b      	ldrh	r3, [r3, #8]
 80143bc:	461d      	mov	r5, r3
 80143be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143c0:	68db      	ldr	r3, [r3, #12]
 80143c2:	899b      	ldrh	r3, [r3, #12]
 80143c4:	b29b      	uxth	r3, r3
 80143c6:	4618      	mov	r0, r3
 80143c8:	f7f8 ff56 	bl	800d278 <lwip_htons>
 80143cc:	4603      	mov	r3, r0
 80143ce:	b2db      	uxtb	r3, r3
 80143d0:	f003 0303 	and.w	r3, r3, #3
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d001      	beq.n	80143dc <tcp_output+0x2a0>
 80143d8:	2301      	movs	r3, #1
 80143da:	e000      	b.n	80143de <tcp_output+0x2a2>
 80143dc:	2300      	movs	r3, #0
 80143de:	442b      	add	r3, r5
 80143e0:	4423      	add	r3, r4
 80143e2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80143e8:	68bb      	ldr	r3, [r7, #8]
 80143ea:	1ad3      	subs	r3, r2, r3
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	da02      	bge.n	80143f6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	68ba      	ldr	r2, [r7, #8]
 80143f4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80143f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f8:	891b      	ldrh	r3, [r3, #8]
 80143fa:	461c      	mov	r4, r3
 80143fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143fe:	68db      	ldr	r3, [r3, #12]
 8014400:	899b      	ldrh	r3, [r3, #12]
 8014402:	b29b      	uxth	r3, r3
 8014404:	4618      	mov	r0, r3
 8014406:	f7f8 ff37 	bl	800d278 <lwip_htons>
 801440a:	4603      	mov	r3, r0
 801440c:	b2db      	uxtb	r3, r3
 801440e:	f003 0303 	and.w	r3, r3, #3
 8014412:	2b00      	cmp	r3, #0
 8014414:	d001      	beq.n	801441a <tcp_output+0x2de>
 8014416:	2301      	movs	r3, #1
 8014418:	e000      	b.n	801441c <tcp_output+0x2e0>
 801441a:	2300      	movs	r3, #0
 801441c:	4423      	add	r3, r4
 801441e:	2b00      	cmp	r3, #0
 8014420:	d049      	beq.n	80144b6 <tcp_output+0x37a>
      seg->next = NULL;
 8014422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014424:	2200      	movs	r2, #0
 8014426:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801442c:	2b00      	cmp	r3, #0
 801442e:	d105      	bne.n	801443c <tcp_output+0x300>
        pcb->unacked = seg;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014434:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014438:	623b      	str	r3, [r7, #32]
 801443a:	e03f      	b.n	80144bc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801443e:	68db      	ldr	r3, [r3, #12]
 8014440:	685b      	ldr	r3, [r3, #4]
 8014442:	4618      	mov	r0, r3
 8014444:	f7f8 ff2d 	bl	800d2a2 <lwip_htonl>
 8014448:	4604      	mov	r4, r0
 801444a:	6a3b      	ldr	r3, [r7, #32]
 801444c:	68db      	ldr	r3, [r3, #12]
 801444e:	685b      	ldr	r3, [r3, #4]
 8014450:	4618      	mov	r0, r3
 8014452:	f7f8 ff26 	bl	800d2a2 <lwip_htonl>
 8014456:	4603      	mov	r3, r0
 8014458:	1ae3      	subs	r3, r4, r3
 801445a:	2b00      	cmp	r3, #0
 801445c:	da24      	bge.n	80144a8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	3370      	adds	r3, #112	; 0x70
 8014462:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014464:	e002      	b.n	801446c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014466:	69fb      	ldr	r3, [r7, #28]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801446c:	69fb      	ldr	r3, [r7, #28]
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d011      	beq.n	8014498 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014474:	69fb      	ldr	r3, [r7, #28]
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	68db      	ldr	r3, [r3, #12]
 801447a:	685b      	ldr	r3, [r3, #4]
 801447c:	4618      	mov	r0, r3
 801447e:	f7f8 ff10 	bl	800d2a2 <lwip_htonl>
 8014482:	4604      	mov	r4, r0
 8014484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014486:	68db      	ldr	r3, [r3, #12]
 8014488:	685b      	ldr	r3, [r3, #4]
 801448a:	4618      	mov	r0, r3
 801448c:	f7f8 ff09 	bl	800d2a2 <lwip_htonl>
 8014490:	4603      	mov	r3, r0
 8014492:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014494:	2b00      	cmp	r3, #0
 8014496:	dbe6      	blt.n	8014466 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014498:	69fb      	ldr	r3, [r7, #28]
 801449a:	681a      	ldr	r2, [r3, #0]
 801449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801449e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80144a0:	69fb      	ldr	r3, [r7, #28]
 80144a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144a4:	601a      	str	r2, [r3, #0]
 80144a6:	e009      	b.n	80144bc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80144a8:	6a3b      	ldr	r3, [r7, #32]
 80144aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144ac:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80144ae:	6a3b      	ldr	r3, [r7, #32]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	623b      	str	r3, [r7, #32]
 80144b4:	e002      	b.n	80144bc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80144b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80144b8:	f7fb ff19 	bl	80102ee <tcp_seg_free>
    }
    seg = pcb->unsent;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144c0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80144c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d012      	beq.n	80144ee <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80144c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ca:	68db      	ldr	r3, [r3, #12]
 80144cc:	685b      	ldr	r3, [r3, #4]
 80144ce:	4618      	mov	r0, r3
 80144d0:	f7f8 fee7 	bl	800d2a2 <lwip_htonl>
 80144d4:	4602      	mov	r2, r0
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80144da:	1ad3      	subs	r3, r2, r3
 80144dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144de:	8912      	ldrh	r2, [r2, #8]
 80144e0:	4413      	add	r3, r2
  while (seg != NULL &&
 80144e2:	69ba      	ldr	r2, [r7, #24]
 80144e4:	429a      	cmp	r2, r3
 80144e6:	f4bf aed9 	bcs.w	801429c <tcp_output+0x160>
 80144ea:	e000      	b.n	80144ee <tcp_output+0x3b2>
      break;
 80144ec:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d108      	bne.n	8014508 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	2200      	movs	r2, #0
 80144fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80144fe:	e004      	b.n	801450a <tcp_output+0x3ce>
    goto output_done;
 8014500:	bf00      	nop
 8014502:	e002      	b.n	801450a <tcp_output+0x3ce>
    goto output_done;
 8014504:	bf00      	nop
 8014506:	e000      	b.n	801450a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014508:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	8b5b      	ldrh	r3, [r3, #26]
 801450e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014512:	b29a      	uxth	r2, r3
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014518:	2300      	movs	r3, #0
}
 801451a:	4618      	mov	r0, r3
 801451c:	3728      	adds	r7, #40	; 0x28
 801451e:	46bd      	mov	sp, r7
 8014520:	bdb0      	pop	{r4, r5, r7, pc}
 8014522:	bf00      	nop

08014524 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b082      	sub	sp, #8
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d106      	bne.n	8014540 <tcp_output_segment_busy+0x1c>
 8014532:	4b09      	ldr	r3, [pc, #36]	; (8014558 <tcp_output_segment_busy+0x34>)
 8014534:	f240 529a 	movw	r2, #1434	; 0x59a
 8014538:	4908      	ldr	r1, [pc, #32]	; (801455c <tcp_output_segment_busy+0x38>)
 801453a:	4809      	ldr	r0, [pc, #36]	; (8014560 <tcp_output_segment_busy+0x3c>)
 801453c:	f009 f918 	bl	801d770 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	685b      	ldr	r3, [r3, #4]
 8014544:	7b9b      	ldrb	r3, [r3, #14]
 8014546:	2b01      	cmp	r3, #1
 8014548:	d001      	beq.n	801454e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801454a:	2301      	movs	r3, #1
 801454c:	e000      	b.n	8014550 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801454e:	2300      	movs	r3, #0
}
 8014550:	4618      	mov	r0, r3
 8014552:	3708      	adds	r7, #8
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}
 8014558:	08020b98 	.word	0x08020b98
 801455c:	08021134 	.word	0x08021134
 8014560:	08020bec 	.word	0x08020bec

08014564 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014564:	b5b0      	push	{r4, r5, r7, lr}
 8014566:	b08c      	sub	sp, #48	; 0x30
 8014568:	af04      	add	r7, sp, #16
 801456a:	60f8      	str	r0, [r7, #12]
 801456c:	60b9      	str	r1, [r7, #8]
 801456e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d106      	bne.n	8014584 <tcp_output_segment+0x20>
 8014576:	4b63      	ldr	r3, [pc, #396]	; (8014704 <tcp_output_segment+0x1a0>)
 8014578:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801457c:	4962      	ldr	r1, [pc, #392]	; (8014708 <tcp_output_segment+0x1a4>)
 801457e:	4863      	ldr	r0, [pc, #396]	; (801470c <tcp_output_segment+0x1a8>)
 8014580:	f009 f8f6 	bl	801d770 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014584:	68bb      	ldr	r3, [r7, #8]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d106      	bne.n	8014598 <tcp_output_segment+0x34>
 801458a:	4b5e      	ldr	r3, [pc, #376]	; (8014704 <tcp_output_segment+0x1a0>)
 801458c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014590:	495f      	ldr	r1, [pc, #380]	; (8014710 <tcp_output_segment+0x1ac>)
 8014592:	485e      	ldr	r0, [pc, #376]	; (801470c <tcp_output_segment+0x1a8>)
 8014594:	f009 f8ec 	bl	801d770 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d106      	bne.n	80145ac <tcp_output_segment+0x48>
 801459e:	4b59      	ldr	r3, [pc, #356]	; (8014704 <tcp_output_segment+0x1a0>)
 80145a0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80145a4:	495b      	ldr	r1, [pc, #364]	; (8014714 <tcp_output_segment+0x1b0>)
 80145a6:	4859      	ldr	r0, [pc, #356]	; (801470c <tcp_output_segment+0x1a8>)
 80145a8:	f009 f8e2 	bl	801d770 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80145ac:	68f8      	ldr	r0, [r7, #12]
 80145ae:	f7ff ffb9 	bl	8014524 <tcp_output_segment_busy>
 80145b2:	4603      	mov	r3, r0
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d001      	beq.n	80145bc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80145b8:	2300      	movs	r3, #0
 80145ba:	e09f      	b.n	80146fc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80145bc:	68bb      	ldr	r3, [r7, #8]
 80145be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	68dc      	ldr	r4, [r3, #12]
 80145c4:	4610      	mov	r0, r2
 80145c6:	f7f8 fe6c 	bl	800d2a2 <lwip_htonl>
 80145ca:	4603      	mov	r3, r0
 80145cc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80145ce:	68bb      	ldr	r3, [r7, #8]
 80145d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	68dc      	ldr	r4, [r3, #12]
 80145d6:	4610      	mov	r0, r2
 80145d8:	f7f8 fe4e 	bl	800d278 <lwip_htons>
 80145dc:	4603      	mov	r3, r0
 80145de:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80145e0:	68bb      	ldr	r3, [r7, #8]
 80145e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145e4:	68ba      	ldr	r2, [r7, #8]
 80145e6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80145e8:	441a      	add	r2, r3
 80145ea:	68bb      	ldr	r3, [r7, #8]
 80145ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	68db      	ldr	r3, [r3, #12]
 80145f2:	3314      	adds	r3, #20
 80145f4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	7a9b      	ldrb	r3, [r3, #10]
 80145fa:	f003 0301 	and.w	r3, r3, #1
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d015      	beq.n	801462e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014602:	68bb      	ldr	r3, [r7, #8]
 8014604:	3304      	adds	r3, #4
 8014606:	461a      	mov	r2, r3
 8014608:	6879      	ldr	r1, [r7, #4]
 801460a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801460e:	f7fc fa33 	bl	8010a78 <tcp_eff_send_mss_netif>
 8014612:	4603      	mov	r3, r0
 8014614:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014616:	8b7b      	ldrh	r3, [r7, #26]
 8014618:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801461c:	4618      	mov	r0, r3
 801461e:	f7f8 fe40 	bl	800d2a2 <lwip_htonl>
 8014622:	4602      	mov	r2, r0
 8014624:	69fb      	ldr	r3, [r7, #28]
 8014626:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014628:	69fb      	ldr	r3, [r7, #28]
 801462a:	3304      	adds	r3, #4
 801462c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801462e:	68bb      	ldr	r3, [r7, #8]
 8014630:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014634:	2b00      	cmp	r3, #0
 8014636:	da02      	bge.n	801463e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014638:	68bb      	ldr	r3, [r7, #8]
 801463a:	2200      	movs	r2, #0
 801463c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014642:	2b00      	cmp	r3, #0
 8014644:	d10c      	bne.n	8014660 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014646:	4b34      	ldr	r3, [pc, #208]	; (8014718 <tcp_output_segment+0x1b4>)
 8014648:	681a      	ldr	r2, [r3, #0]
 801464a:	68bb      	ldr	r3, [r7, #8]
 801464c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	68db      	ldr	r3, [r3, #12]
 8014652:	685b      	ldr	r3, [r3, #4]
 8014654:	4618      	mov	r0, r3
 8014656:	f7f8 fe24 	bl	800d2a2 <lwip_htonl>
 801465a:	4602      	mov	r2, r0
 801465c:	68bb      	ldr	r3, [r7, #8]
 801465e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	68da      	ldr	r2, [r3, #12]
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	685b      	ldr	r3, [r3, #4]
 8014668:	685b      	ldr	r3, [r3, #4]
 801466a:	1ad3      	subs	r3, r2, r3
 801466c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	685b      	ldr	r3, [r3, #4]
 8014672:	8959      	ldrh	r1, [r3, #10]
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	685b      	ldr	r3, [r3, #4]
 8014678:	8b3a      	ldrh	r2, [r7, #24]
 801467a:	1a8a      	subs	r2, r1, r2
 801467c:	b292      	uxth	r2, r2
 801467e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	685b      	ldr	r3, [r3, #4]
 8014684:	8919      	ldrh	r1, [r3, #8]
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	685b      	ldr	r3, [r3, #4]
 801468a:	8b3a      	ldrh	r2, [r7, #24]
 801468c:	1a8a      	subs	r2, r1, r2
 801468e:	b292      	uxth	r2, r2
 8014690:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	685b      	ldr	r3, [r3, #4]
 8014696:	68fa      	ldr	r2, [r7, #12]
 8014698:	68d2      	ldr	r2, [r2, #12]
 801469a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	68db      	ldr	r3, [r3, #12]
 80146a0:	2200      	movs	r2, #0
 80146a2:	741a      	strb	r2, [r3, #16]
 80146a4:	2200      	movs	r2, #0
 80146a6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	68db      	ldr	r3, [r3, #12]
 80146ac:	f103 0214 	add.w	r2, r3, #20
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	7a9b      	ldrb	r3, [r3, #10]
 80146b4:	009b      	lsls	r3, r3, #2
 80146b6:	f003 0304 	and.w	r3, r3, #4
 80146ba:	4413      	add	r3, r2
 80146bc:	69fa      	ldr	r2, [r7, #28]
 80146be:	429a      	cmp	r2, r3
 80146c0:	d006      	beq.n	80146d0 <tcp_output_segment+0x16c>
 80146c2:	4b10      	ldr	r3, [pc, #64]	; (8014704 <tcp_output_segment+0x1a0>)
 80146c4:	f240 621c 	movw	r2, #1564	; 0x61c
 80146c8:	4914      	ldr	r1, [pc, #80]	; (801471c <tcp_output_segment+0x1b8>)
 80146ca:	4810      	ldr	r0, [pc, #64]	; (801470c <tcp_output_segment+0x1a8>)
 80146cc:	f009 f850 	bl	801d770 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	6858      	ldr	r0, [r3, #4]
 80146d4:	68b9      	ldr	r1, [r7, #8]
 80146d6:	68bb      	ldr	r3, [r7, #8]
 80146d8:	1d1c      	adds	r4, r3, #4
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	7add      	ldrb	r5, [r3, #11]
 80146de:	68bb      	ldr	r3, [r7, #8]
 80146e0:	7a9b      	ldrb	r3, [r3, #10]
 80146e2:	687a      	ldr	r2, [r7, #4]
 80146e4:	9202      	str	r2, [sp, #8]
 80146e6:	2206      	movs	r2, #6
 80146e8:	9201      	str	r2, [sp, #4]
 80146ea:	9300      	str	r3, [sp, #0]
 80146ec:	462b      	mov	r3, r5
 80146ee:	4622      	mov	r2, r4
 80146f0:	f002 fc1a 	bl	8016f28 <ip4_output_if>
 80146f4:	4603      	mov	r3, r0
 80146f6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80146f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80146fc:	4618      	mov	r0, r3
 80146fe:	3720      	adds	r7, #32
 8014700:	46bd      	mov	sp, r7
 8014702:	bdb0      	pop	{r4, r5, r7, pc}
 8014704:	08020b98 	.word	0x08020b98
 8014708:	0802115c 	.word	0x0802115c
 801470c:	08020bec 	.word	0x08020bec
 8014710:	0802117c 	.word	0x0802117c
 8014714:	0802119c 	.word	0x0802119c
 8014718:	200113bc 	.word	0x200113bc
 801471c:	080211c0 	.word	0x080211c0

08014720 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014720:	b5b0      	push	{r4, r5, r7, lr}
 8014722:	b084      	sub	sp, #16
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d106      	bne.n	801473c <tcp_rexmit_rto_prepare+0x1c>
 801472e:	4b31      	ldr	r3, [pc, #196]	; (80147f4 <tcp_rexmit_rto_prepare+0xd4>)
 8014730:	f240 6263 	movw	r2, #1635	; 0x663
 8014734:	4930      	ldr	r1, [pc, #192]	; (80147f8 <tcp_rexmit_rto_prepare+0xd8>)
 8014736:	4831      	ldr	r0, [pc, #196]	; (80147fc <tcp_rexmit_rto_prepare+0xdc>)
 8014738:	f009 f81a 	bl	801d770 <iprintf>

  if (pcb->unacked == NULL) {
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014740:	2b00      	cmp	r3, #0
 8014742:	d102      	bne.n	801474a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014744:	f06f 0305 	mvn.w	r3, #5
 8014748:	e050      	b.n	80147ec <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801474e:	60fb      	str	r3, [r7, #12]
 8014750:	e00b      	b.n	801476a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014752:	68f8      	ldr	r0, [r7, #12]
 8014754:	f7ff fee6 	bl	8014524 <tcp_output_segment_busy>
 8014758:	4603      	mov	r3, r0
 801475a:	2b00      	cmp	r3, #0
 801475c:	d002      	beq.n	8014764 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801475e:	f06f 0305 	mvn.w	r3, #5
 8014762:	e043      	b.n	80147ec <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	60fb      	str	r3, [r7, #12]
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d1ef      	bne.n	8014752 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014772:	68f8      	ldr	r0, [r7, #12]
 8014774:	f7ff fed6 	bl	8014524 <tcp_output_segment_busy>
 8014778:	4603      	mov	r3, r0
 801477a:	2b00      	cmp	r3, #0
 801477c:	d002      	beq.n	8014784 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801477e:	f06f 0305 	mvn.w	r3, #5
 8014782:	e033      	b.n	80147ec <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2200      	movs	r2, #0
 8014798:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	8b5b      	ldrh	r3, [r3, #26]
 801479e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80147a2:	b29a      	uxth	r2, r3
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	68db      	ldr	r3, [r3, #12]
 80147ac:	685b      	ldr	r3, [r3, #4]
 80147ae:	4618      	mov	r0, r3
 80147b0:	f7f8 fd77 	bl	800d2a2 <lwip_htonl>
 80147b4:	4604      	mov	r4, r0
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	891b      	ldrh	r3, [r3, #8]
 80147ba:	461d      	mov	r5, r3
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	68db      	ldr	r3, [r3, #12]
 80147c0:	899b      	ldrh	r3, [r3, #12]
 80147c2:	b29b      	uxth	r3, r3
 80147c4:	4618      	mov	r0, r3
 80147c6:	f7f8 fd57 	bl	800d278 <lwip_htons>
 80147ca:	4603      	mov	r3, r0
 80147cc:	b2db      	uxtb	r3, r3
 80147ce:	f003 0303 	and.w	r3, r3, #3
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d001      	beq.n	80147da <tcp_rexmit_rto_prepare+0xba>
 80147d6:	2301      	movs	r3, #1
 80147d8:	e000      	b.n	80147dc <tcp_rexmit_rto_prepare+0xbc>
 80147da:	2300      	movs	r3, #0
 80147dc:	442b      	add	r3, r5
 80147de:	18e2      	adds	r2, r4, r3
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	2200      	movs	r2, #0
 80147e8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80147ea:	2300      	movs	r3, #0
}
 80147ec:	4618      	mov	r0, r3
 80147ee:	3710      	adds	r7, #16
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bdb0      	pop	{r4, r5, r7, pc}
 80147f4:	08020b98 	.word	0x08020b98
 80147f8:	080211d4 	.word	0x080211d4
 80147fc:	08020bec 	.word	0x08020bec

08014800 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014800:	b580      	push	{r7, lr}
 8014802:	b082      	sub	sp, #8
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d106      	bne.n	801481c <tcp_rexmit_rto_commit+0x1c>
 801480e:	4b0d      	ldr	r3, [pc, #52]	; (8014844 <tcp_rexmit_rto_commit+0x44>)
 8014810:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014814:	490c      	ldr	r1, [pc, #48]	; (8014848 <tcp_rexmit_rto_commit+0x48>)
 8014816:	480d      	ldr	r0, [pc, #52]	; (801484c <tcp_rexmit_rto_commit+0x4c>)
 8014818:	f008 ffaa 	bl	801d770 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014822:	2bff      	cmp	r3, #255	; 0xff
 8014824:	d007      	beq.n	8014836 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801482c:	3301      	adds	r3, #1
 801482e:	b2da      	uxtb	r2, r3
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f7ff fc80 	bl	801413c <tcp_output>
}
 801483c:	bf00      	nop
 801483e:	3708      	adds	r7, #8
 8014840:	46bd      	mov	sp, r7
 8014842:	bd80      	pop	{r7, pc}
 8014844:	08020b98 	.word	0x08020b98
 8014848:	080211f8 	.word	0x080211f8
 801484c:	08020bec 	.word	0x08020bec

08014850 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b082      	sub	sp, #8
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d106      	bne.n	801486c <tcp_rexmit_rto+0x1c>
 801485e:	4b0a      	ldr	r3, [pc, #40]	; (8014888 <tcp_rexmit_rto+0x38>)
 8014860:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014864:	4909      	ldr	r1, [pc, #36]	; (801488c <tcp_rexmit_rto+0x3c>)
 8014866:	480a      	ldr	r0, [pc, #40]	; (8014890 <tcp_rexmit_rto+0x40>)
 8014868:	f008 ff82 	bl	801d770 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801486c:	6878      	ldr	r0, [r7, #4]
 801486e:	f7ff ff57 	bl	8014720 <tcp_rexmit_rto_prepare>
 8014872:	4603      	mov	r3, r0
 8014874:	2b00      	cmp	r3, #0
 8014876:	d102      	bne.n	801487e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f7ff ffc1 	bl	8014800 <tcp_rexmit_rto_commit>
  }
}
 801487e:	bf00      	nop
 8014880:	3708      	adds	r7, #8
 8014882:	46bd      	mov	sp, r7
 8014884:	bd80      	pop	{r7, pc}
 8014886:	bf00      	nop
 8014888:	08020b98 	.word	0x08020b98
 801488c:	0802121c 	.word	0x0802121c
 8014890:	08020bec 	.word	0x08020bec

08014894 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014894:	b590      	push	{r4, r7, lr}
 8014896:	b085      	sub	sp, #20
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d106      	bne.n	80148b0 <tcp_rexmit+0x1c>
 80148a2:	4b2f      	ldr	r3, [pc, #188]	; (8014960 <tcp_rexmit+0xcc>)
 80148a4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80148a8:	492e      	ldr	r1, [pc, #184]	; (8014964 <tcp_rexmit+0xd0>)
 80148aa:	482f      	ldr	r0, [pc, #188]	; (8014968 <tcp_rexmit+0xd4>)
 80148ac:	f008 ff60 	bl	801d770 <iprintf>

  if (pcb->unacked == NULL) {
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d102      	bne.n	80148be <tcp_rexmit+0x2a>
    return ERR_VAL;
 80148b8:	f06f 0305 	mvn.w	r3, #5
 80148bc:	e04c      	b.n	8014958 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80148c2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80148c4:	68b8      	ldr	r0, [r7, #8]
 80148c6:	f7ff fe2d 	bl	8014524 <tcp_output_segment_busy>
 80148ca:	4603      	mov	r3, r0
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d002      	beq.n	80148d6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80148d0:	f06f 0305 	mvn.w	r3, #5
 80148d4:	e040      	b.n	8014958 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80148d6:	68bb      	ldr	r3, [r7, #8]
 80148d8:	681a      	ldr	r2, [r3, #0]
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	336c      	adds	r3, #108	; 0x6c
 80148e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80148e4:	e002      	b.n	80148ec <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d011      	beq.n	8014918 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	68db      	ldr	r3, [r3, #12]
 80148fa:	685b      	ldr	r3, [r3, #4]
 80148fc:	4618      	mov	r0, r3
 80148fe:	f7f8 fcd0 	bl	800d2a2 <lwip_htonl>
 8014902:	4604      	mov	r4, r0
 8014904:	68bb      	ldr	r3, [r7, #8]
 8014906:	68db      	ldr	r3, [r3, #12]
 8014908:	685b      	ldr	r3, [r3, #4]
 801490a:	4618      	mov	r0, r3
 801490c:	f7f8 fcc9 	bl	800d2a2 <lwip_htonl>
 8014910:	4603      	mov	r3, r0
 8014912:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014914:	2b00      	cmp	r3, #0
 8014916:	dbe6      	blt.n	80148e6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	681a      	ldr	r2, [r3, #0]
 801491c:	68bb      	ldr	r3, [r7, #8]
 801491e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	68ba      	ldr	r2, [r7, #8]
 8014924:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014926:	68bb      	ldr	r3, [r7, #8]
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d103      	bne.n	8014936 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	2200      	movs	r2, #0
 8014932:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801493c:	2bff      	cmp	r3, #255	; 0xff
 801493e:	d007      	beq.n	8014950 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014946:	3301      	adds	r3, #1
 8014948:	b2da      	uxtb	r2, r3
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	2200      	movs	r2, #0
 8014954:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014956:	2300      	movs	r3, #0
}
 8014958:	4618      	mov	r0, r3
 801495a:	3714      	adds	r7, #20
 801495c:	46bd      	mov	sp, r7
 801495e:	bd90      	pop	{r4, r7, pc}
 8014960:	08020b98 	.word	0x08020b98
 8014964:	08021238 	.word	0x08021238
 8014968:	08020bec 	.word	0x08020bec

0801496c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801496c:	b580      	push	{r7, lr}
 801496e:	b082      	sub	sp, #8
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d106      	bne.n	8014988 <tcp_rexmit_fast+0x1c>
 801497a:	4b2a      	ldr	r3, [pc, #168]	; (8014a24 <tcp_rexmit_fast+0xb8>)
 801497c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014980:	4929      	ldr	r1, [pc, #164]	; (8014a28 <tcp_rexmit_fast+0xbc>)
 8014982:	482a      	ldr	r0, [pc, #168]	; (8014a2c <tcp_rexmit_fast+0xc0>)
 8014984:	f008 fef4 	bl	801d770 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801498c:	2b00      	cmp	r3, #0
 801498e:	d045      	beq.n	8014a1c <tcp_rexmit_fast+0xb0>
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	8b5b      	ldrh	r3, [r3, #26]
 8014994:	f003 0304 	and.w	r3, r3, #4
 8014998:	2b00      	cmp	r3, #0
 801499a:	d13f      	bne.n	8014a1c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f7ff ff79 	bl	8014894 <tcp_rexmit>
 80149a2:	4603      	mov	r3, r0
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d139      	bne.n	8014a1c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80149b4:	4293      	cmp	r3, r2
 80149b6:	bf28      	it	cs
 80149b8:	4613      	movcs	r3, r2
 80149ba:	b29b      	uxth	r3, r3
 80149bc:	2b00      	cmp	r3, #0
 80149be:	da00      	bge.n	80149c2 <tcp_rexmit_fast+0x56>
 80149c0:	3301      	adds	r3, #1
 80149c2:	105b      	asrs	r3, r3, #1
 80149c4:	b29a      	uxth	r2, r3
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80149d2:	461a      	mov	r2, r3
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80149d8:	005b      	lsls	r3, r3, #1
 80149da:	429a      	cmp	r2, r3
 80149dc:	d206      	bcs.n	80149ec <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80149e2:	005b      	lsls	r3, r3, #1
 80149e4:	b29a      	uxth	r2, r3
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80149f6:	4619      	mov	r1, r3
 80149f8:	0049      	lsls	r1, r1, #1
 80149fa:	440b      	add	r3, r1
 80149fc:	b29b      	uxth	r3, r3
 80149fe:	4413      	add	r3, r2
 8014a00:	b29a      	uxth	r2, r3
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	8b5b      	ldrh	r3, [r3, #26]
 8014a0c:	f043 0304 	orr.w	r3, r3, #4
 8014a10:	b29a      	uxth	r2, r3
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	2200      	movs	r2, #0
 8014a1a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014a1c:	bf00      	nop
 8014a1e:	3708      	adds	r7, #8
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd80      	pop	{r7, pc}
 8014a24:	08020b98 	.word	0x08020b98
 8014a28:	08021250 	.word	0x08021250
 8014a2c:	08020bec 	.word	0x08020bec

08014a30 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b086      	sub	sp, #24
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	60f8      	str	r0, [r7, #12]
 8014a38:	607b      	str	r3, [r7, #4]
 8014a3a:	460b      	mov	r3, r1
 8014a3c:	817b      	strh	r3, [r7, #10]
 8014a3e:	4613      	mov	r3, r2
 8014a40:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014a42:	897a      	ldrh	r2, [r7, #10]
 8014a44:	893b      	ldrh	r3, [r7, #8]
 8014a46:	4413      	add	r3, r2
 8014a48:	b29b      	uxth	r3, r3
 8014a4a:	3314      	adds	r3, #20
 8014a4c:	b29b      	uxth	r3, r3
 8014a4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014a52:	4619      	mov	r1, r3
 8014a54:	2022      	movs	r0, #34	; 0x22
 8014a56:	f7f9 fd2d 	bl	800e4b4 <pbuf_alloc>
 8014a5a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014a5c:	697b      	ldr	r3, [r7, #20]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d04d      	beq.n	8014afe <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014a62:	897b      	ldrh	r3, [r7, #10]
 8014a64:	3313      	adds	r3, #19
 8014a66:	697a      	ldr	r2, [r7, #20]
 8014a68:	8952      	ldrh	r2, [r2, #10]
 8014a6a:	4293      	cmp	r3, r2
 8014a6c:	db06      	blt.n	8014a7c <tcp_output_alloc_header_common+0x4c>
 8014a6e:	4b26      	ldr	r3, [pc, #152]	; (8014b08 <tcp_output_alloc_header_common+0xd8>)
 8014a70:	f240 7223 	movw	r2, #1827	; 0x723
 8014a74:	4925      	ldr	r1, [pc, #148]	; (8014b0c <tcp_output_alloc_header_common+0xdc>)
 8014a76:	4826      	ldr	r0, [pc, #152]	; (8014b10 <tcp_output_alloc_header_common+0xe0>)
 8014a78:	f008 fe7a 	bl	801d770 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	685b      	ldr	r3, [r3, #4]
 8014a80:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014a82:	8c3b      	ldrh	r3, [r7, #32]
 8014a84:	4618      	mov	r0, r3
 8014a86:	f7f8 fbf7 	bl	800d278 <lwip_htons>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	461a      	mov	r2, r3
 8014a8e:	693b      	ldr	r3, [r7, #16]
 8014a90:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014a92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a94:	4618      	mov	r0, r3
 8014a96:	f7f8 fbef 	bl	800d278 <lwip_htons>
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	461a      	mov	r2, r3
 8014a9e:	693b      	ldr	r3, [r7, #16]
 8014aa0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014aa2:	693b      	ldr	r3, [r7, #16]
 8014aa4:	687a      	ldr	r2, [r7, #4]
 8014aa6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014aa8:	68f8      	ldr	r0, [r7, #12]
 8014aaa:	f7f8 fbfa 	bl	800d2a2 <lwip_htonl>
 8014aae:	4602      	mov	r2, r0
 8014ab0:	693b      	ldr	r3, [r7, #16]
 8014ab2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014ab4:	897b      	ldrh	r3, [r7, #10]
 8014ab6:	089b      	lsrs	r3, r3, #2
 8014ab8:	b29b      	uxth	r3, r3
 8014aba:	3305      	adds	r3, #5
 8014abc:	b29b      	uxth	r3, r3
 8014abe:	031b      	lsls	r3, r3, #12
 8014ac0:	b29a      	uxth	r2, r3
 8014ac2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014ac6:	b29b      	uxth	r3, r3
 8014ac8:	4313      	orrs	r3, r2
 8014aca:	b29b      	uxth	r3, r3
 8014acc:	4618      	mov	r0, r3
 8014ace:	f7f8 fbd3 	bl	800d278 <lwip_htons>
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	461a      	mov	r2, r3
 8014ad6:	693b      	ldr	r3, [r7, #16]
 8014ad8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014ada:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014adc:	4618      	mov	r0, r3
 8014ade:	f7f8 fbcb 	bl	800d278 <lwip_htons>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	461a      	mov	r2, r3
 8014ae6:	693b      	ldr	r3, [r7, #16]
 8014ae8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014aea:	693b      	ldr	r3, [r7, #16]
 8014aec:	2200      	movs	r2, #0
 8014aee:	741a      	strb	r2, [r3, #16]
 8014af0:	2200      	movs	r2, #0
 8014af2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014af4:	693b      	ldr	r3, [r7, #16]
 8014af6:	2200      	movs	r2, #0
 8014af8:	749a      	strb	r2, [r3, #18]
 8014afa:	2200      	movs	r2, #0
 8014afc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014afe:	697b      	ldr	r3, [r7, #20]
}
 8014b00:	4618      	mov	r0, r3
 8014b02:	3718      	adds	r7, #24
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd80      	pop	{r7, pc}
 8014b08:	08020b98 	.word	0x08020b98
 8014b0c:	08021270 	.word	0x08021270
 8014b10:	08020bec 	.word	0x08020bec

08014b14 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014b14:	b5b0      	push	{r4, r5, r7, lr}
 8014b16:	b08a      	sub	sp, #40	; 0x28
 8014b18:	af04      	add	r7, sp, #16
 8014b1a:	60f8      	str	r0, [r7, #12]
 8014b1c:	607b      	str	r3, [r7, #4]
 8014b1e:	460b      	mov	r3, r1
 8014b20:	817b      	strh	r3, [r7, #10]
 8014b22:	4613      	mov	r3, r2
 8014b24:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d106      	bne.n	8014b3a <tcp_output_alloc_header+0x26>
 8014b2c:	4b15      	ldr	r3, [pc, #84]	; (8014b84 <tcp_output_alloc_header+0x70>)
 8014b2e:	f240 7242 	movw	r2, #1858	; 0x742
 8014b32:	4915      	ldr	r1, [pc, #84]	; (8014b88 <tcp_output_alloc_header+0x74>)
 8014b34:	4815      	ldr	r0, [pc, #84]	; (8014b8c <tcp_output_alloc_header+0x78>)
 8014b36:	f008 fe1b 	bl	801d770 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	8adb      	ldrh	r3, [r3, #22]
 8014b42:	68fa      	ldr	r2, [r7, #12]
 8014b44:	8b12      	ldrh	r2, [r2, #24]
 8014b46:	68f9      	ldr	r1, [r7, #12]
 8014b48:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014b4a:	893d      	ldrh	r5, [r7, #8]
 8014b4c:	897c      	ldrh	r4, [r7, #10]
 8014b4e:	9103      	str	r1, [sp, #12]
 8014b50:	2110      	movs	r1, #16
 8014b52:	9102      	str	r1, [sp, #8]
 8014b54:	9201      	str	r2, [sp, #4]
 8014b56:	9300      	str	r3, [sp, #0]
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	462a      	mov	r2, r5
 8014b5c:	4621      	mov	r1, r4
 8014b5e:	f7ff ff67 	bl	8014a30 <tcp_output_alloc_header_common>
 8014b62:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014b64:	697b      	ldr	r3, [r7, #20]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d006      	beq.n	8014b78 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b6e:	68fa      	ldr	r2, [r7, #12]
 8014b70:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014b72:	441a      	add	r2, r3
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014b78:	697b      	ldr	r3, [r7, #20]
}
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	3718      	adds	r7, #24
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	bdb0      	pop	{r4, r5, r7, pc}
 8014b82:	bf00      	nop
 8014b84:	08020b98 	.word	0x08020b98
 8014b88:	080212a0 	.word	0x080212a0
 8014b8c:	08020bec 	.word	0x08020bec

08014b90 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b088      	sub	sp, #32
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	60f8      	str	r0, [r7, #12]
 8014b98:	60b9      	str	r1, [r7, #8]
 8014b9a:	4611      	mov	r1, r2
 8014b9c:	461a      	mov	r2, r3
 8014b9e:	460b      	mov	r3, r1
 8014ba0:	71fb      	strb	r3, [r7, #7]
 8014ba2:	4613      	mov	r3, r2
 8014ba4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014baa:	68bb      	ldr	r3, [r7, #8]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d106      	bne.n	8014bbe <tcp_output_fill_options+0x2e>
 8014bb0:	4b13      	ldr	r3, [pc, #76]	; (8014c00 <tcp_output_fill_options+0x70>)
 8014bb2:	f240 7256 	movw	r2, #1878	; 0x756
 8014bb6:	4913      	ldr	r1, [pc, #76]	; (8014c04 <tcp_output_fill_options+0x74>)
 8014bb8:	4813      	ldr	r0, [pc, #76]	; (8014c08 <tcp_output_fill_options+0x78>)
 8014bba:	f008 fdd9 	bl	801d770 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014bbe:	68bb      	ldr	r3, [r7, #8]
 8014bc0:	685b      	ldr	r3, [r3, #4]
 8014bc2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014bc4:	69bb      	ldr	r3, [r7, #24]
 8014bc6:	3314      	adds	r3, #20
 8014bc8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014bca:	69bb      	ldr	r3, [r7, #24]
 8014bcc:	f103 0214 	add.w	r2, r3, #20
 8014bd0:	8bfb      	ldrh	r3, [r7, #30]
 8014bd2:	009b      	lsls	r3, r3, #2
 8014bd4:	4619      	mov	r1, r3
 8014bd6:	79fb      	ldrb	r3, [r7, #7]
 8014bd8:	009b      	lsls	r3, r3, #2
 8014bda:	f003 0304 	and.w	r3, r3, #4
 8014bde:	440b      	add	r3, r1
 8014be0:	4413      	add	r3, r2
 8014be2:	697a      	ldr	r2, [r7, #20]
 8014be4:	429a      	cmp	r2, r3
 8014be6:	d006      	beq.n	8014bf6 <tcp_output_fill_options+0x66>
 8014be8:	4b05      	ldr	r3, [pc, #20]	; (8014c00 <tcp_output_fill_options+0x70>)
 8014bea:	f240 7275 	movw	r2, #1909	; 0x775
 8014bee:	4907      	ldr	r1, [pc, #28]	; (8014c0c <tcp_output_fill_options+0x7c>)
 8014bf0:	4805      	ldr	r0, [pc, #20]	; (8014c08 <tcp_output_fill_options+0x78>)
 8014bf2:	f008 fdbd 	bl	801d770 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014bf6:	bf00      	nop
 8014bf8:	3720      	adds	r7, #32
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	bd80      	pop	{r7, pc}
 8014bfe:	bf00      	nop
 8014c00:	08020b98 	.word	0x08020b98
 8014c04:	080212c8 	.word	0x080212c8
 8014c08:	08020bec 	.word	0x08020bec
 8014c0c:	080211c0 	.word	0x080211c0

08014c10 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b08a      	sub	sp, #40	; 0x28
 8014c14:	af04      	add	r7, sp, #16
 8014c16:	60f8      	str	r0, [r7, #12]
 8014c18:	60b9      	str	r1, [r7, #8]
 8014c1a:	607a      	str	r2, [r7, #4]
 8014c1c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014c1e:	68bb      	ldr	r3, [r7, #8]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d106      	bne.n	8014c32 <tcp_output_control_segment+0x22>
 8014c24:	4b1c      	ldr	r3, [pc, #112]	; (8014c98 <tcp_output_control_segment+0x88>)
 8014c26:	f240 7287 	movw	r2, #1927	; 0x787
 8014c2a:	491c      	ldr	r1, [pc, #112]	; (8014c9c <tcp_output_control_segment+0x8c>)
 8014c2c:	481c      	ldr	r0, [pc, #112]	; (8014ca0 <tcp_output_control_segment+0x90>)
 8014c2e:	f008 fd9f 	bl	801d770 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014c32:	683a      	ldr	r2, [r7, #0]
 8014c34:	6879      	ldr	r1, [r7, #4]
 8014c36:	68f8      	ldr	r0, [r7, #12]
 8014c38:	f7fe fae8 	bl	801320c <tcp_route>
 8014c3c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014c3e:	693b      	ldr	r3, [r7, #16]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d102      	bne.n	8014c4a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014c44:	23fc      	movs	r3, #252	; 0xfc
 8014c46:	75fb      	strb	r3, [r7, #23]
 8014c48:	e01c      	b.n	8014c84 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d006      	beq.n	8014c5e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	7adb      	ldrb	r3, [r3, #11]
 8014c54:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	7a9b      	ldrb	r3, [r3, #10]
 8014c5a:	757b      	strb	r3, [r7, #21]
 8014c5c:	e003      	b.n	8014c66 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014c5e:	23ff      	movs	r3, #255	; 0xff
 8014c60:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014c62:	2300      	movs	r3, #0
 8014c64:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014c66:	7dba      	ldrb	r2, [r7, #22]
 8014c68:	693b      	ldr	r3, [r7, #16]
 8014c6a:	9302      	str	r3, [sp, #8]
 8014c6c:	2306      	movs	r3, #6
 8014c6e:	9301      	str	r3, [sp, #4]
 8014c70:	7d7b      	ldrb	r3, [r7, #21]
 8014c72:	9300      	str	r3, [sp, #0]
 8014c74:	4613      	mov	r3, r2
 8014c76:	683a      	ldr	r2, [r7, #0]
 8014c78:	6879      	ldr	r1, [r7, #4]
 8014c7a:	68b8      	ldr	r0, [r7, #8]
 8014c7c:	f002 f954 	bl	8016f28 <ip4_output_if>
 8014c80:	4603      	mov	r3, r0
 8014c82:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014c84:	68b8      	ldr	r0, [r7, #8]
 8014c86:	f7f9 fef9 	bl	800ea7c <pbuf_free>
  return err;
 8014c8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014c8e:	4618      	mov	r0, r3
 8014c90:	3718      	adds	r7, #24
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bd80      	pop	{r7, pc}
 8014c96:	bf00      	nop
 8014c98:	08020b98 	.word	0x08020b98
 8014c9c:	080212f0 	.word	0x080212f0
 8014ca0:	08020bec 	.word	0x08020bec

08014ca4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014ca4:	b590      	push	{r4, r7, lr}
 8014ca6:	b08b      	sub	sp, #44	; 0x2c
 8014ca8:	af04      	add	r7, sp, #16
 8014caa:	60f8      	str	r0, [r7, #12]
 8014cac:	60b9      	str	r1, [r7, #8]
 8014cae:	607a      	str	r2, [r7, #4]
 8014cb0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014cb2:	683b      	ldr	r3, [r7, #0]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d106      	bne.n	8014cc6 <tcp_rst+0x22>
 8014cb8:	4b1f      	ldr	r3, [pc, #124]	; (8014d38 <tcp_rst+0x94>)
 8014cba:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014cbe:	491f      	ldr	r1, [pc, #124]	; (8014d3c <tcp_rst+0x98>)
 8014cc0:	481f      	ldr	r0, [pc, #124]	; (8014d40 <tcp_rst+0x9c>)
 8014cc2:	f008 fd55 	bl	801d770 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d106      	bne.n	8014cda <tcp_rst+0x36>
 8014ccc:	4b1a      	ldr	r3, [pc, #104]	; (8014d38 <tcp_rst+0x94>)
 8014cce:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014cd2:	491c      	ldr	r1, [pc, #112]	; (8014d44 <tcp_rst+0xa0>)
 8014cd4:	481a      	ldr	r0, [pc, #104]	; (8014d40 <tcp_rst+0x9c>)
 8014cd6:	f008 fd4b 	bl	801d770 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014cda:	2300      	movs	r3, #0
 8014cdc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014cde:	f246 0308 	movw	r3, #24584	; 0x6008
 8014ce2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014ce4:	7dfb      	ldrb	r3, [r7, #23]
 8014ce6:	b29c      	uxth	r4, r3
 8014ce8:	68b8      	ldr	r0, [r7, #8]
 8014cea:	f7f8 fada 	bl	800d2a2 <lwip_htonl>
 8014cee:	4602      	mov	r2, r0
 8014cf0:	8abb      	ldrh	r3, [r7, #20]
 8014cf2:	9303      	str	r3, [sp, #12]
 8014cf4:	2314      	movs	r3, #20
 8014cf6:	9302      	str	r3, [sp, #8]
 8014cf8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014cfa:	9301      	str	r3, [sp, #4]
 8014cfc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014cfe:	9300      	str	r3, [sp, #0]
 8014d00:	4613      	mov	r3, r2
 8014d02:	2200      	movs	r2, #0
 8014d04:	4621      	mov	r1, r4
 8014d06:	6878      	ldr	r0, [r7, #4]
 8014d08:	f7ff fe92 	bl	8014a30 <tcp_output_alloc_header_common>
 8014d0c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014d0e:	693b      	ldr	r3, [r7, #16]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d00c      	beq.n	8014d2e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014d14:	7dfb      	ldrb	r3, [r7, #23]
 8014d16:	2200      	movs	r2, #0
 8014d18:	6939      	ldr	r1, [r7, #16]
 8014d1a:	68f8      	ldr	r0, [r7, #12]
 8014d1c:	f7ff ff38 	bl	8014b90 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d22:	683a      	ldr	r2, [r7, #0]
 8014d24:	6939      	ldr	r1, [r7, #16]
 8014d26:	68f8      	ldr	r0, [r7, #12]
 8014d28:	f7ff ff72 	bl	8014c10 <tcp_output_control_segment>
 8014d2c:	e000      	b.n	8014d30 <tcp_rst+0x8c>
    return;
 8014d2e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014d30:	371c      	adds	r7, #28
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bd90      	pop	{r4, r7, pc}
 8014d36:	bf00      	nop
 8014d38:	08020b98 	.word	0x08020b98
 8014d3c:	0802131c 	.word	0x0802131c
 8014d40:	08020bec 	.word	0x08020bec
 8014d44:	08021338 	.word	0x08021338

08014d48 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014d48:	b590      	push	{r4, r7, lr}
 8014d4a:	b087      	sub	sp, #28
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014d50:	2300      	movs	r3, #0
 8014d52:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014d54:	2300      	movs	r3, #0
 8014d56:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d106      	bne.n	8014d6c <tcp_send_empty_ack+0x24>
 8014d5e:	4b28      	ldr	r3, [pc, #160]	; (8014e00 <tcp_send_empty_ack+0xb8>)
 8014d60:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014d64:	4927      	ldr	r1, [pc, #156]	; (8014e04 <tcp_send_empty_ack+0xbc>)
 8014d66:	4828      	ldr	r0, [pc, #160]	; (8014e08 <tcp_send_empty_ack+0xc0>)
 8014d68:	f008 fd02 	bl	801d770 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014d6c:	7dfb      	ldrb	r3, [r7, #23]
 8014d6e:	009b      	lsls	r3, r3, #2
 8014d70:	b2db      	uxtb	r3, r3
 8014d72:	f003 0304 	and.w	r3, r3, #4
 8014d76:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014d78:	7d7b      	ldrb	r3, [r7, #21]
 8014d7a:	b29c      	uxth	r4, r3
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d80:	4618      	mov	r0, r3
 8014d82:	f7f8 fa8e 	bl	800d2a2 <lwip_htonl>
 8014d86:	4603      	mov	r3, r0
 8014d88:	2200      	movs	r2, #0
 8014d8a:	4621      	mov	r1, r4
 8014d8c:	6878      	ldr	r0, [r7, #4]
 8014d8e:	f7ff fec1 	bl	8014b14 <tcp_output_alloc_header>
 8014d92:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014d94:	693b      	ldr	r3, [r7, #16]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d109      	bne.n	8014dae <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	8b5b      	ldrh	r3, [r3, #26]
 8014d9e:	f043 0303 	orr.w	r3, r3, #3
 8014da2:	b29a      	uxth	r2, r3
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014da8:	f06f 0301 	mvn.w	r3, #1
 8014dac:	e023      	b.n	8014df6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014dae:	7dbb      	ldrb	r3, [r7, #22]
 8014db0:	7dfa      	ldrb	r2, [r7, #23]
 8014db2:	6939      	ldr	r1, [r7, #16]
 8014db4:	6878      	ldr	r0, [r7, #4]
 8014db6:	f7ff feeb 	bl	8014b90 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014dba:	687a      	ldr	r2, [r7, #4]
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	3304      	adds	r3, #4
 8014dc0:	6939      	ldr	r1, [r7, #16]
 8014dc2:	6878      	ldr	r0, [r7, #4]
 8014dc4:	f7ff ff24 	bl	8014c10 <tcp_output_control_segment>
 8014dc8:	4603      	mov	r3, r0
 8014dca:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d007      	beq.n	8014de4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	8b5b      	ldrh	r3, [r3, #26]
 8014dd8:	f043 0303 	orr.w	r3, r3, #3
 8014ddc:	b29a      	uxth	r2, r3
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	835a      	strh	r2, [r3, #26]
 8014de2:	e006      	b.n	8014df2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	8b5b      	ldrh	r3, [r3, #26]
 8014de8:	f023 0303 	bic.w	r3, r3, #3
 8014dec:	b29a      	uxth	r2, r3
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014df6:	4618      	mov	r0, r3
 8014df8:	371c      	adds	r7, #28
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	bd90      	pop	{r4, r7, pc}
 8014dfe:	bf00      	nop
 8014e00:	08020b98 	.word	0x08020b98
 8014e04:	08021354 	.word	0x08021354
 8014e08:	08020bec 	.word	0x08020bec

08014e0c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014e0c:	b590      	push	{r4, r7, lr}
 8014e0e:	b087      	sub	sp, #28
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014e14:	2300      	movs	r3, #0
 8014e16:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d106      	bne.n	8014e2c <tcp_keepalive+0x20>
 8014e1e:	4b18      	ldr	r3, [pc, #96]	; (8014e80 <tcp_keepalive+0x74>)
 8014e20:	f640 0224 	movw	r2, #2084	; 0x824
 8014e24:	4917      	ldr	r1, [pc, #92]	; (8014e84 <tcp_keepalive+0x78>)
 8014e26:	4818      	ldr	r0, [pc, #96]	; (8014e88 <tcp_keepalive+0x7c>)
 8014e28:	f008 fca2 	bl	801d770 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014e2c:	7dfb      	ldrb	r3, [r7, #23]
 8014e2e:	b29c      	uxth	r4, r3
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e34:	3b01      	subs	r3, #1
 8014e36:	4618      	mov	r0, r3
 8014e38:	f7f8 fa33 	bl	800d2a2 <lwip_htonl>
 8014e3c:	4603      	mov	r3, r0
 8014e3e:	2200      	movs	r2, #0
 8014e40:	4621      	mov	r1, r4
 8014e42:	6878      	ldr	r0, [r7, #4]
 8014e44:	f7ff fe66 	bl	8014b14 <tcp_output_alloc_header>
 8014e48:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d102      	bne.n	8014e56 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e54:	e010      	b.n	8014e78 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014e56:	7dfb      	ldrb	r3, [r7, #23]
 8014e58:	2200      	movs	r2, #0
 8014e5a:	6939      	ldr	r1, [r7, #16]
 8014e5c:	6878      	ldr	r0, [r7, #4]
 8014e5e:	f7ff fe97 	bl	8014b90 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014e62:	687a      	ldr	r2, [r7, #4]
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	3304      	adds	r3, #4
 8014e68:	6939      	ldr	r1, [r7, #16]
 8014e6a:	6878      	ldr	r0, [r7, #4]
 8014e6c:	f7ff fed0 	bl	8014c10 <tcp_output_control_segment>
 8014e70:	4603      	mov	r3, r0
 8014e72:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014e78:	4618      	mov	r0, r3
 8014e7a:	371c      	adds	r7, #28
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bd90      	pop	{r4, r7, pc}
 8014e80:	08020b98 	.word	0x08020b98
 8014e84:	08021374 	.word	0x08021374
 8014e88:	08020bec 	.word	0x08020bec

08014e8c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014e8c:	b590      	push	{r4, r7, lr}
 8014e8e:	b08b      	sub	sp, #44	; 0x2c
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014e94:	2300      	movs	r3, #0
 8014e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d106      	bne.n	8014eae <tcp_zero_window_probe+0x22>
 8014ea0:	4b4c      	ldr	r3, [pc, #304]	; (8014fd4 <tcp_zero_window_probe+0x148>)
 8014ea2:	f640 024f 	movw	r2, #2127	; 0x84f
 8014ea6:	494c      	ldr	r1, [pc, #304]	; (8014fd8 <tcp_zero_window_probe+0x14c>)
 8014ea8:	484c      	ldr	r0, [pc, #304]	; (8014fdc <tcp_zero_window_probe+0x150>)
 8014eaa:	f008 fc61 	bl	801d770 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014eb2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014eb4:	6a3b      	ldr	r3, [r7, #32]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d101      	bne.n	8014ebe <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014eba:	2300      	movs	r3, #0
 8014ebc:	e086      	b.n	8014fcc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014ec4:	2bff      	cmp	r3, #255	; 0xff
 8014ec6:	d007      	beq.n	8014ed8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014ece:	3301      	adds	r3, #1
 8014ed0:	b2da      	uxtb	r2, r3
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014ed8:	6a3b      	ldr	r3, [r7, #32]
 8014eda:	68db      	ldr	r3, [r3, #12]
 8014edc:	899b      	ldrh	r3, [r3, #12]
 8014ede:	b29b      	uxth	r3, r3
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	f7f8 f9c9 	bl	800d278 <lwip_htons>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	b2db      	uxtb	r3, r3
 8014eea:	f003 0301 	and.w	r3, r3, #1
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d005      	beq.n	8014efe <tcp_zero_window_probe+0x72>
 8014ef2:	6a3b      	ldr	r3, [r7, #32]
 8014ef4:	891b      	ldrh	r3, [r3, #8]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d101      	bne.n	8014efe <tcp_zero_window_probe+0x72>
 8014efa:	2301      	movs	r3, #1
 8014efc:	e000      	b.n	8014f00 <tcp_zero_window_probe+0x74>
 8014efe:	2300      	movs	r3, #0
 8014f00:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014f02:	7ffb      	ldrb	r3, [r7, #31]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	bf0c      	ite	eq
 8014f08:	2301      	moveq	r3, #1
 8014f0a:	2300      	movne	r3, #0
 8014f0c:	b2db      	uxtb	r3, r3
 8014f0e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f14:	b299      	uxth	r1, r3
 8014f16:	6a3b      	ldr	r3, [r7, #32]
 8014f18:	68db      	ldr	r3, [r3, #12]
 8014f1a:	685b      	ldr	r3, [r3, #4]
 8014f1c:	8bba      	ldrh	r2, [r7, #28]
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	f7ff fdf8 	bl	8014b14 <tcp_output_alloc_header>
 8014f24:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014f26:	69bb      	ldr	r3, [r7, #24]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d102      	bne.n	8014f32 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f30:	e04c      	b.n	8014fcc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014f32:	69bb      	ldr	r3, [r7, #24]
 8014f34:	685b      	ldr	r3, [r3, #4]
 8014f36:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014f38:	7ffb      	ldrb	r3, [r7, #31]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d011      	beq.n	8014f62 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014f3e:	697b      	ldr	r3, [r7, #20]
 8014f40:	899b      	ldrh	r3, [r3, #12]
 8014f42:	b29b      	uxth	r3, r3
 8014f44:	b21b      	sxth	r3, r3
 8014f46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014f4a:	b21c      	sxth	r4, r3
 8014f4c:	2011      	movs	r0, #17
 8014f4e:	f7f8 f993 	bl	800d278 <lwip_htons>
 8014f52:	4603      	mov	r3, r0
 8014f54:	b21b      	sxth	r3, r3
 8014f56:	4323      	orrs	r3, r4
 8014f58:	b21b      	sxth	r3, r3
 8014f5a:	b29a      	uxth	r2, r3
 8014f5c:	697b      	ldr	r3, [r7, #20]
 8014f5e:	819a      	strh	r2, [r3, #12]
 8014f60:	e010      	b.n	8014f84 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014f62:	69bb      	ldr	r3, [r7, #24]
 8014f64:	685b      	ldr	r3, [r3, #4]
 8014f66:	3314      	adds	r3, #20
 8014f68:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014f6a:	6a3b      	ldr	r3, [r7, #32]
 8014f6c:	6858      	ldr	r0, [r3, #4]
 8014f6e:	6a3b      	ldr	r3, [r7, #32]
 8014f70:	685b      	ldr	r3, [r3, #4]
 8014f72:	891a      	ldrh	r2, [r3, #8]
 8014f74:	6a3b      	ldr	r3, [r7, #32]
 8014f76:	891b      	ldrh	r3, [r3, #8]
 8014f78:	1ad3      	subs	r3, r2, r3
 8014f7a:	b29b      	uxth	r3, r3
 8014f7c:	2201      	movs	r2, #1
 8014f7e:	6939      	ldr	r1, [r7, #16]
 8014f80:	f7f9 ff72 	bl	800ee68 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014f84:	6a3b      	ldr	r3, [r7, #32]
 8014f86:	68db      	ldr	r3, [r3, #12]
 8014f88:	685b      	ldr	r3, [r3, #4]
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	f7f8 f989 	bl	800d2a2 <lwip_htonl>
 8014f90:	4603      	mov	r3, r0
 8014f92:	3301      	adds	r3, #1
 8014f94:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	1ad3      	subs	r3, r2, r3
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	da02      	bge.n	8014fa8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	68fa      	ldr	r2, [r7, #12]
 8014fa6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fac:	2200      	movs	r2, #0
 8014fae:	69b9      	ldr	r1, [r7, #24]
 8014fb0:	6878      	ldr	r0, [r7, #4]
 8014fb2:	f7ff fded 	bl	8014b90 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014fb6:	687a      	ldr	r2, [r7, #4]
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	3304      	adds	r3, #4
 8014fbc:	69b9      	ldr	r1, [r7, #24]
 8014fbe:	6878      	ldr	r0, [r7, #4]
 8014fc0:	f7ff fe26 	bl	8014c10 <tcp_output_control_segment>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014fc8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014fcc:	4618      	mov	r0, r3
 8014fce:	372c      	adds	r7, #44	; 0x2c
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bd90      	pop	{r4, r7, pc}
 8014fd4:	08020b98 	.word	0x08020b98
 8014fd8:	08021390 	.word	0x08021390
 8014fdc:	08020bec 	.word	0x08020bec

08014fe0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b082      	sub	sp, #8
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014fe8:	f7fa f82c 	bl	800f044 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014fec:	4b0a      	ldr	r3, [pc, #40]	; (8015018 <tcpip_tcp_timer+0x38>)
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d103      	bne.n	8014ffc <tcpip_tcp_timer+0x1c>
 8014ff4:	4b09      	ldr	r3, [pc, #36]	; (801501c <tcpip_tcp_timer+0x3c>)
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d005      	beq.n	8015008 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	4908      	ldr	r1, [pc, #32]	; (8015020 <tcpip_tcp_timer+0x40>)
 8015000:	20fa      	movs	r0, #250	; 0xfa
 8015002:	f000 f8f3 	bl	80151ec <sys_timeout>
 8015006:	e003      	b.n	8015010 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015008:	4b06      	ldr	r3, [pc, #24]	; (8015024 <tcpip_tcp_timer+0x44>)
 801500a:	2200      	movs	r2, #0
 801500c:	601a      	str	r2, [r3, #0]
  }
}
 801500e:	bf00      	nop
 8015010:	bf00      	nop
 8015012:	3708      	adds	r7, #8
 8015014:	46bd      	mov	sp, r7
 8015016:	bd80      	pop	{r7, pc}
 8015018:	200113c8 	.word	0x200113c8
 801501c:	200113cc 	.word	0x200113cc
 8015020:	08014fe1 	.word	0x08014fe1
 8015024:	20011414 	.word	0x20011414

08015028 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015028:	b580      	push	{r7, lr}
 801502a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801502c:	4b0a      	ldr	r3, [pc, #40]	; (8015058 <tcp_timer_needed+0x30>)
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d10f      	bne.n	8015054 <tcp_timer_needed+0x2c>
 8015034:	4b09      	ldr	r3, [pc, #36]	; (801505c <tcp_timer_needed+0x34>)
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d103      	bne.n	8015044 <tcp_timer_needed+0x1c>
 801503c:	4b08      	ldr	r3, [pc, #32]	; (8015060 <tcp_timer_needed+0x38>)
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d007      	beq.n	8015054 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015044:	4b04      	ldr	r3, [pc, #16]	; (8015058 <tcp_timer_needed+0x30>)
 8015046:	2201      	movs	r2, #1
 8015048:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801504a:	2200      	movs	r2, #0
 801504c:	4905      	ldr	r1, [pc, #20]	; (8015064 <tcp_timer_needed+0x3c>)
 801504e:	20fa      	movs	r0, #250	; 0xfa
 8015050:	f000 f8cc 	bl	80151ec <sys_timeout>
  }
}
 8015054:	bf00      	nop
 8015056:	bd80      	pop	{r7, pc}
 8015058:	20011414 	.word	0x20011414
 801505c:	200113c8 	.word	0x200113c8
 8015060:	200113cc 	.word	0x200113cc
 8015064:	08014fe1 	.word	0x08014fe1

08015068 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b086      	sub	sp, #24
 801506c:	af00      	add	r7, sp, #0
 801506e:	60f8      	str	r0, [r7, #12]
 8015070:	60b9      	str	r1, [r7, #8]
 8015072:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015074:	200a      	movs	r0, #10
 8015076:	f7f8 fde7 	bl	800dc48 <memp_malloc>
 801507a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801507c:	693b      	ldr	r3, [r7, #16]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d109      	bne.n	8015096 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015082:	693b      	ldr	r3, [r7, #16]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d151      	bne.n	801512c <sys_timeout_abs+0xc4>
 8015088:	4b2a      	ldr	r3, [pc, #168]	; (8015134 <sys_timeout_abs+0xcc>)
 801508a:	22be      	movs	r2, #190	; 0xbe
 801508c:	492a      	ldr	r1, [pc, #168]	; (8015138 <sys_timeout_abs+0xd0>)
 801508e:	482b      	ldr	r0, [pc, #172]	; (801513c <sys_timeout_abs+0xd4>)
 8015090:	f008 fb6e 	bl	801d770 <iprintf>
    return;
 8015094:	e04a      	b.n	801512c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015096:	693b      	ldr	r3, [r7, #16]
 8015098:	2200      	movs	r2, #0
 801509a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801509c:	693b      	ldr	r3, [r7, #16]
 801509e:	68ba      	ldr	r2, [r7, #8]
 80150a0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80150a2:	693b      	ldr	r3, [r7, #16]
 80150a4:	687a      	ldr	r2, [r7, #4]
 80150a6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80150a8:	693b      	ldr	r3, [r7, #16]
 80150aa:	68fa      	ldr	r2, [r7, #12]
 80150ac:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80150ae:	4b24      	ldr	r3, [pc, #144]	; (8015140 <sys_timeout_abs+0xd8>)
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d103      	bne.n	80150be <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80150b6:	4a22      	ldr	r2, [pc, #136]	; (8015140 <sys_timeout_abs+0xd8>)
 80150b8:	693b      	ldr	r3, [r7, #16]
 80150ba:	6013      	str	r3, [r2, #0]
    return;
 80150bc:	e037      	b.n	801512e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80150be:	693b      	ldr	r3, [r7, #16]
 80150c0:	685a      	ldr	r2, [r3, #4]
 80150c2:	4b1f      	ldr	r3, [pc, #124]	; (8015140 <sys_timeout_abs+0xd8>)
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	685b      	ldr	r3, [r3, #4]
 80150c8:	1ad3      	subs	r3, r2, r3
 80150ca:	0fdb      	lsrs	r3, r3, #31
 80150cc:	f003 0301 	and.w	r3, r3, #1
 80150d0:	b2db      	uxtb	r3, r3
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d007      	beq.n	80150e6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80150d6:	4b1a      	ldr	r3, [pc, #104]	; (8015140 <sys_timeout_abs+0xd8>)
 80150d8:	681a      	ldr	r2, [r3, #0]
 80150da:	693b      	ldr	r3, [r7, #16]
 80150dc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80150de:	4a18      	ldr	r2, [pc, #96]	; (8015140 <sys_timeout_abs+0xd8>)
 80150e0:	693b      	ldr	r3, [r7, #16]
 80150e2:	6013      	str	r3, [r2, #0]
 80150e4:	e023      	b.n	801512e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80150e6:	4b16      	ldr	r3, [pc, #88]	; (8015140 <sys_timeout_abs+0xd8>)
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	617b      	str	r3, [r7, #20]
 80150ec:	e01a      	b.n	8015124 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80150ee:	697b      	ldr	r3, [r7, #20]
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d00b      	beq.n	801510e <sys_timeout_abs+0xa6>
 80150f6:	693b      	ldr	r3, [r7, #16]
 80150f8:	685a      	ldr	r2, [r3, #4]
 80150fa:	697b      	ldr	r3, [r7, #20]
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	685b      	ldr	r3, [r3, #4]
 8015100:	1ad3      	subs	r3, r2, r3
 8015102:	0fdb      	lsrs	r3, r3, #31
 8015104:	f003 0301 	and.w	r3, r3, #1
 8015108:	b2db      	uxtb	r3, r3
 801510a:	2b00      	cmp	r3, #0
 801510c:	d007      	beq.n	801511e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801510e:	697b      	ldr	r3, [r7, #20]
 8015110:	681a      	ldr	r2, [r3, #0]
 8015112:	693b      	ldr	r3, [r7, #16]
 8015114:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015116:	697b      	ldr	r3, [r7, #20]
 8015118:	693a      	ldr	r2, [r7, #16]
 801511a:	601a      	str	r2, [r3, #0]
        break;
 801511c:	e007      	b.n	801512e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801511e:	697b      	ldr	r3, [r7, #20]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	617b      	str	r3, [r7, #20]
 8015124:	697b      	ldr	r3, [r7, #20]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d1e1      	bne.n	80150ee <sys_timeout_abs+0x86>
 801512a:	e000      	b.n	801512e <sys_timeout_abs+0xc6>
    return;
 801512c:	bf00      	nop
      }
    }
  }
}
 801512e:	3718      	adds	r7, #24
 8015130:	46bd      	mov	sp, r7
 8015132:	bd80      	pop	{r7, pc}
 8015134:	080213b4 	.word	0x080213b4
 8015138:	080213e8 	.word	0x080213e8
 801513c:	08021428 	.word	0x08021428
 8015140:	2001140c 	.word	0x2001140c

08015144 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b086      	sub	sp, #24
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015150:	697b      	ldr	r3, [r7, #20]
 8015152:	685b      	ldr	r3, [r3, #4]
 8015154:	4798      	blx	r3

  now = sys_now();
 8015156:	f7f2 fc9f 	bl	8007a98 <sys_now>
 801515a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801515c:	697b      	ldr	r3, [r7, #20]
 801515e:	681a      	ldr	r2, [r3, #0]
 8015160:	4b0f      	ldr	r3, [pc, #60]	; (80151a0 <lwip_cyclic_timer+0x5c>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	4413      	add	r3, r2
 8015166:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015168:	68fa      	ldr	r2, [r7, #12]
 801516a:	693b      	ldr	r3, [r7, #16]
 801516c:	1ad3      	subs	r3, r2, r3
 801516e:	0fdb      	lsrs	r3, r3, #31
 8015170:	f003 0301 	and.w	r3, r3, #1
 8015174:	b2db      	uxtb	r3, r3
 8015176:	2b00      	cmp	r3, #0
 8015178:	d009      	beq.n	801518e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801517a:	697b      	ldr	r3, [r7, #20]
 801517c:	681a      	ldr	r2, [r3, #0]
 801517e:	693b      	ldr	r3, [r7, #16]
 8015180:	4413      	add	r3, r2
 8015182:	687a      	ldr	r2, [r7, #4]
 8015184:	4907      	ldr	r1, [pc, #28]	; (80151a4 <lwip_cyclic_timer+0x60>)
 8015186:	4618      	mov	r0, r3
 8015188:	f7ff ff6e 	bl	8015068 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801518c:	e004      	b.n	8015198 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801518e:	687a      	ldr	r2, [r7, #4]
 8015190:	4904      	ldr	r1, [pc, #16]	; (80151a4 <lwip_cyclic_timer+0x60>)
 8015192:	68f8      	ldr	r0, [r7, #12]
 8015194:	f7ff ff68 	bl	8015068 <sys_timeout_abs>
}
 8015198:	bf00      	nop
 801519a:	3718      	adds	r7, #24
 801519c:	46bd      	mov	sp, r7
 801519e:	bd80      	pop	{r7, pc}
 80151a0:	20011410 	.word	0x20011410
 80151a4:	08015145 	.word	0x08015145

080151a8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b082      	sub	sp, #8
 80151ac:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80151ae:	2301      	movs	r3, #1
 80151b0:	607b      	str	r3, [r7, #4]
 80151b2:	e00e      	b.n	80151d2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80151b4:	4a0b      	ldr	r2, [pc, #44]	; (80151e4 <sys_timeouts_init+0x3c>)
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	00db      	lsls	r3, r3, #3
 80151c0:	4a08      	ldr	r2, [pc, #32]	; (80151e4 <sys_timeouts_init+0x3c>)
 80151c2:	4413      	add	r3, r2
 80151c4:	461a      	mov	r2, r3
 80151c6:	4908      	ldr	r1, [pc, #32]	; (80151e8 <sys_timeouts_init+0x40>)
 80151c8:	f000 f810 	bl	80151ec <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	3301      	adds	r3, #1
 80151d0:	607b      	str	r3, [r7, #4]
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	2b02      	cmp	r3, #2
 80151d6:	d9ed      	bls.n	80151b4 <sys_timeouts_init+0xc>
  }
}
 80151d8:	bf00      	nop
 80151da:	bf00      	nop
 80151dc:	3708      	adds	r7, #8
 80151de:	46bd      	mov	sp, r7
 80151e0:	bd80      	pop	{r7, pc}
 80151e2:	bf00      	nop
 80151e4:	08022380 	.word	0x08022380
 80151e8:	08015145 	.word	0x08015145

080151ec <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b086      	sub	sp, #24
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	60f8      	str	r0, [r7, #12]
 80151f4:	60b9      	str	r1, [r7, #8]
 80151f6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80151fe:	d306      	bcc.n	801520e <sys_timeout+0x22>
 8015200:	4b0a      	ldr	r3, [pc, #40]	; (801522c <sys_timeout+0x40>)
 8015202:	f240 1229 	movw	r2, #297	; 0x129
 8015206:	490a      	ldr	r1, [pc, #40]	; (8015230 <sys_timeout+0x44>)
 8015208:	480a      	ldr	r0, [pc, #40]	; (8015234 <sys_timeout+0x48>)
 801520a:	f008 fab1 	bl	801d770 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801520e:	f7f2 fc43 	bl	8007a98 <sys_now>
 8015212:	4602      	mov	r2, r0
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	4413      	add	r3, r2
 8015218:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801521a:	687a      	ldr	r2, [r7, #4]
 801521c:	68b9      	ldr	r1, [r7, #8]
 801521e:	6978      	ldr	r0, [r7, #20]
 8015220:	f7ff ff22 	bl	8015068 <sys_timeout_abs>
#endif
}
 8015224:	bf00      	nop
 8015226:	3718      	adds	r7, #24
 8015228:	46bd      	mov	sp, r7
 801522a:	bd80      	pop	{r7, pc}
 801522c:	080213b4 	.word	0x080213b4
 8015230:	08021450 	.word	0x08021450
 8015234:	08021428 	.word	0x08021428

08015238 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b084      	sub	sp, #16
 801523c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801523e:	f7f2 fc2b 	bl	8007a98 <sys_now>
 8015242:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015244:	4b17      	ldr	r3, [pc, #92]	; (80152a4 <sys_check_timeouts+0x6c>)
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801524a:	68bb      	ldr	r3, [r7, #8]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d022      	beq.n	8015296 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015250:	68bb      	ldr	r3, [r7, #8]
 8015252:	685b      	ldr	r3, [r3, #4]
 8015254:	68fa      	ldr	r2, [r7, #12]
 8015256:	1ad3      	subs	r3, r2, r3
 8015258:	0fdb      	lsrs	r3, r3, #31
 801525a:	f003 0301 	and.w	r3, r3, #1
 801525e:	b2db      	uxtb	r3, r3
 8015260:	2b00      	cmp	r3, #0
 8015262:	d11a      	bne.n	801529a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015264:	68bb      	ldr	r3, [r7, #8]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	4a0e      	ldr	r2, [pc, #56]	; (80152a4 <sys_check_timeouts+0x6c>)
 801526a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801526c:	68bb      	ldr	r3, [r7, #8]
 801526e:	689b      	ldr	r3, [r3, #8]
 8015270:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015272:	68bb      	ldr	r3, [r7, #8]
 8015274:	68db      	ldr	r3, [r3, #12]
 8015276:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015278:	68bb      	ldr	r3, [r7, #8]
 801527a:	685b      	ldr	r3, [r3, #4]
 801527c:	4a0a      	ldr	r2, [pc, #40]	; (80152a8 <sys_check_timeouts+0x70>)
 801527e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015280:	68b9      	ldr	r1, [r7, #8]
 8015282:	200a      	movs	r0, #10
 8015284:	f7f8 fd56 	bl	800dd34 <memp_free>
    if (handler != NULL) {
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d0da      	beq.n	8015244 <sys_check_timeouts+0xc>
      handler(arg);
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	6838      	ldr	r0, [r7, #0]
 8015292:	4798      	blx	r3
  do {
 8015294:	e7d6      	b.n	8015244 <sys_check_timeouts+0xc>
      return;
 8015296:	bf00      	nop
 8015298:	e000      	b.n	801529c <sys_check_timeouts+0x64>
      return;
 801529a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801529c:	3710      	adds	r7, #16
 801529e:	46bd      	mov	sp, r7
 80152a0:	bd80      	pop	{r7, pc}
 80152a2:	bf00      	nop
 80152a4:	2001140c 	.word	0x2001140c
 80152a8:	20011410 	.word	0x20011410

080152ac <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b082      	sub	sp, #8
 80152b0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80152b2:	4b16      	ldr	r3, [pc, #88]	; (801530c <sys_timeouts_sleeptime+0x60>)
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d102      	bne.n	80152c0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80152ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80152be:	e020      	b.n	8015302 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80152c0:	f7f2 fbea 	bl	8007a98 <sys_now>
 80152c4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80152c6:	4b11      	ldr	r3, [pc, #68]	; (801530c <sys_timeouts_sleeptime+0x60>)
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	685a      	ldr	r2, [r3, #4]
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	1ad3      	subs	r3, r2, r3
 80152d0:	0fdb      	lsrs	r3, r3, #31
 80152d2:	f003 0301 	and.w	r3, r3, #1
 80152d6:	b2db      	uxtb	r3, r3
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d001      	beq.n	80152e0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80152dc:	2300      	movs	r3, #0
 80152de:	e010      	b.n	8015302 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80152e0:	4b0a      	ldr	r3, [pc, #40]	; (801530c <sys_timeouts_sleeptime+0x60>)
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	685a      	ldr	r2, [r3, #4]
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	1ad3      	subs	r3, r2, r3
 80152ea:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	da06      	bge.n	8015300 <sys_timeouts_sleeptime+0x54>
 80152f2:	4b07      	ldr	r3, [pc, #28]	; (8015310 <sys_timeouts_sleeptime+0x64>)
 80152f4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80152f8:	4906      	ldr	r1, [pc, #24]	; (8015314 <sys_timeouts_sleeptime+0x68>)
 80152fa:	4807      	ldr	r0, [pc, #28]	; (8015318 <sys_timeouts_sleeptime+0x6c>)
 80152fc:	f008 fa38 	bl	801d770 <iprintf>
    return ret;
 8015300:	683b      	ldr	r3, [r7, #0]
  }
}
 8015302:	4618      	mov	r0, r3
 8015304:	3708      	adds	r7, #8
 8015306:	46bd      	mov	sp, r7
 8015308:	bd80      	pop	{r7, pc}
 801530a:	bf00      	nop
 801530c:	2001140c 	.word	0x2001140c
 8015310:	080213b4 	.word	0x080213b4
 8015314:	08021488 	.word	0x08021488
 8015318:	08021428 	.word	0x08021428

0801531c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015320:	f008 fab4 	bl	801d88c <rand>
 8015324:	4603      	mov	r3, r0
 8015326:	b29b      	uxth	r3, r3
 8015328:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801532c:	b29b      	uxth	r3, r3
 801532e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015332:	b29a      	uxth	r2, r3
 8015334:	4b01      	ldr	r3, [pc, #4]	; (801533c <udp_init+0x20>)
 8015336:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015338:	bf00      	nop
 801533a:	bd80      	pop	{r7, pc}
 801533c:	2000002c 	.word	0x2000002c

08015340 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015340:	b480      	push	{r7}
 8015342:	b083      	sub	sp, #12
 8015344:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015346:	2300      	movs	r3, #0
 8015348:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801534a:	4b17      	ldr	r3, [pc, #92]	; (80153a8 <udp_new_port+0x68>)
 801534c:	881b      	ldrh	r3, [r3, #0]
 801534e:	1c5a      	adds	r2, r3, #1
 8015350:	b291      	uxth	r1, r2
 8015352:	4a15      	ldr	r2, [pc, #84]	; (80153a8 <udp_new_port+0x68>)
 8015354:	8011      	strh	r1, [r2, #0]
 8015356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801535a:	4293      	cmp	r3, r2
 801535c:	d103      	bne.n	8015366 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801535e:	4b12      	ldr	r3, [pc, #72]	; (80153a8 <udp_new_port+0x68>)
 8015360:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015364:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015366:	4b11      	ldr	r3, [pc, #68]	; (80153ac <udp_new_port+0x6c>)
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	603b      	str	r3, [r7, #0]
 801536c:	e011      	b.n	8015392 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801536e:	683b      	ldr	r3, [r7, #0]
 8015370:	8a5a      	ldrh	r2, [r3, #18]
 8015372:	4b0d      	ldr	r3, [pc, #52]	; (80153a8 <udp_new_port+0x68>)
 8015374:	881b      	ldrh	r3, [r3, #0]
 8015376:	429a      	cmp	r2, r3
 8015378:	d108      	bne.n	801538c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801537a:	88fb      	ldrh	r3, [r7, #6]
 801537c:	3301      	adds	r3, #1
 801537e:	80fb      	strh	r3, [r7, #6]
 8015380:	88fb      	ldrh	r3, [r7, #6]
 8015382:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015386:	d3e0      	bcc.n	801534a <udp_new_port+0xa>
        return 0;
 8015388:	2300      	movs	r3, #0
 801538a:	e007      	b.n	801539c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801538c:	683b      	ldr	r3, [r7, #0]
 801538e:	68db      	ldr	r3, [r3, #12]
 8015390:	603b      	str	r3, [r7, #0]
 8015392:	683b      	ldr	r3, [r7, #0]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d1ea      	bne.n	801536e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015398:	4b03      	ldr	r3, [pc, #12]	; (80153a8 <udp_new_port+0x68>)
 801539a:	881b      	ldrh	r3, [r3, #0]
}
 801539c:	4618      	mov	r0, r3
 801539e:	370c      	adds	r7, #12
 80153a0:	46bd      	mov	sp, r7
 80153a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a6:	4770      	bx	lr
 80153a8:	2000002c 	.word	0x2000002c
 80153ac:	20011418 	.word	0x20011418

080153b0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b084      	sub	sp, #16
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	60f8      	str	r0, [r7, #12]
 80153b8:	60b9      	str	r1, [r7, #8]
 80153ba:	4613      	mov	r3, r2
 80153bc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d105      	bne.n	80153d0 <udp_input_local_match+0x20>
 80153c4:	4b27      	ldr	r3, [pc, #156]	; (8015464 <udp_input_local_match+0xb4>)
 80153c6:	2287      	movs	r2, #135	; 0x87
 80153c8:	4927      	ldr	r1, [pc, #156]	; (8015468 <udp_input_local_match+0xb8>)
 80153ca:	4828      	ldr	r0, [pc, #160]	; (801546c <udp_input_local_match+0xbc>)
 80153cc:	f008 f9d0 	bl	801d770 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80153d0:	68bb      	ldr	r3, [r7, #8]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d105      	bne.n	80153e2 <udp_input_local_match+0x32>
 80153d6:	4b23      	ldr	r3, [pc, #140]	; (8015464 <udp_input_local_match+0xb4>)
 80153d8:	2288      	movs	r2, #136	; 0x88
 80153da:	4925      	ldr	r1, [pc, #148]	; (8015470 <udp_input_local_match+0xc0>)
 80153dc:	4823      	ldr	r0, [pc, #140]	; (801546c <udp_input_local_match+0xbc>)
 80153de:	f008 f9c7 	bl	801d770 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	7a1b      	ldrb	r3, [r3, #8]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d00b      	beq.n	8015402 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	7a1a      	ldrb	r2, [r3, #8]
 80153ee:	4b21      	ldr	r3, [pc, #132]	; (8015474 <udp_input_local_match+0xc4>)
 80153f0:	685b      	ldr	r3, [r3, #4]
 80153f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80153f6:	3301      	adds	r3, #1
 80153f8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80153fa:	429a      	cmp	r2, r3
 80153fc:	d001      	beq.n	8015402 <udp_input_local_match+0x52>
    return 0;
 80153fe:	2300      	movs	r3, #0
 8015400:	e02b      	b.n	801545a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015402:	79fb      	ldrb	r3, [r7, #7]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d018      	beq.n	801543a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d013      	beq.n	8015436 <udp_input_local_match+0x86>
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d00f      	beq.n	8015436 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015416:	4b17      	ldr	r3, [pc, #92]	; (8015474 <udp_input_local_match+0xc4>)
 8015418:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801541a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801541e:	d00a      	beq.n	8015436 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	681a      	ldr	r2, [r3, #0]
 8015424:	4b13      	ldr	r3, [pc, #76]	; (8015474 <udp_input_local_match+0xc4>)
 8015426:	695b      	ldr	r3, [r3, #20]
 8015428:	405a      	eors	r2, r3
 801542a:	68bb      	ldr	r3, [r7, #8]
 801542c:	3308      	adds	r3, #8
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015432:	2b00      	cmp	r3, #0
 8015434:	d110      	bne.n	8015458 <udp_input_local_match+0xa8>
          return 1;
 8015436:	2301      	movs	r3, #1
 8015438:	e00f      	b.n	801545a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d009      	beq.n	8015454 <udp_input_local_match+0xa4>
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d005      	beq.n	8015454 <udp_input_local_match+0xa4>
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	681a      	ldr	r2, [r3, #0]
 801544c:	4b09      	ldr	r3, [pc, #36]	; (8015474 <udp_input_local_match+0xc4>)
 801544e:	695b      	ldr	r3, [r3, #20]
 8015450:	429a      	cmp	r2, r3
 8015452:	d101      	bne.n	8015458 <udp_input_local_match+0xa8>
        return 1;
 8015454:	2301      	movs	r3, #1
 8015456:	e000      	b.n	801545a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015458:	2300      	movs	r3, #0
}
 801545a:	4618      	mov	r0, r3
 801545c:	3710      	adds	r7, #16
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}
 8015462:	bf00      	nop
 8015464:	0802149c 	.word	0x0802149c
 8015468:	080214cc 	.word	0x080214cc
 801546c:	080214f0 	.word	0x080214f0
 8015470:	08021518 	.word	0x08021518
 8015474:	2000a2c0 	.word	0x2000a2c0

08015478 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015478:	b590      	push	{r4, r7, lr}
 801547a:	b08d      	sub	sp, #52	; 0x34
 801547c:	af02      	add	r7, sp, #8
 801547e:	6078      	str	r0, [r7, #4]
 8015480:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015482:	2300      	movs	r3, #0
 8015484:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d105      	bne.n	8015498 <udp_input+0x20>
 801548c:	4b7c      	ldr	r3, [pc, #496]	; (8015680 <udp_input+0x208>)
 801548e:	22cf      	movs	r2, #207	; 0xcf
 8015490:	497c      	ldr	r1, [pc, #496]	; (8015684 <udp_input+0x20c>)
 8015492:	487d      	ldr	r0, [pc, #500]	; (8015688 <udp_input+0x210>)
 8015494:	f008 f96c 	bl	801d770 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015498:	683b      	ldr	r3, [r7, #0]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d105      	bne.n	80154aa <udp_input+0x32>
 801549e:	4b78      	ldr	r3, [pc, #480]	; (8015680 <udp_input+0x208>)
 80154a0:	22d0      	movs	r2, #208	; 0xd0
 80154a2:	497a      	ldr	r1, [pc, #488]	; (801568c <udp_input+0x214>)
 80154a4:	4878      	ldr	r0, [pc, #480]	; (8015688 <udp_input+0x210>)
 80154a6:	f008 f963 	bl	801d770 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	895b      	ldrh	r3, [r3, #10]
 80154ae:	2b07      	cmp	r3, #7
 80154b0:	d803      	bhi.n	80154ba <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80154b2:	6878      	ldr	r0, [r7, #4]
 80154b4:	f7f9 fae2 	bl	800ea7c <pbuf_free>
    goto end;
 80154b8:	e0de      	b.n	8015678 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	685b      	ldr	r3, [r3, #4]
 80154be:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80154c0:	4b73      	ldr	r3, [pc, #460]	; (8015690 <udp_input+0x218>)
 80154c2:	695b      	ldr	r3, [r3, #20]
 80154c4:	4a72      	ldr	r2, [pc, #456]	; (8015690 <udp_input+0x218>)
 80154c6:	6812      	ldr	r2, [r2, #0]
 80154c8:	4611      	mov	r1, r2
 80154ca:	4618      	mov	r0, r3
 80154cc:	f001 fe04 	bl	80170d8 <ip4_addr_isbroadcast_u32>
 80154d0:	4603      	mov	r3, r0
 80154d2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80154d4:	697b      	ldr	r3, [r7, #20]
 80154d6:	881b      	ldrh	r3, [r3, #0]
 80154d8:	b29b      	uxth	r3, r3
 80154da:	4618      	mov	r0, r3
 80154dc:	f7f7 fecc 	bl	800d278 <lwip_htons>
 80154e0:	4603      	mov	r3, r0
 80154e2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80154e4:	697b      	ldr	r3, [r7, #20]
 80154e6:	885b      	ldrh	r3, [r3, #2]
 80154e8:	b29b      	uxth	r3, r3
 80154ea:	4618      	mov	r0, r3
 80154ec:	f7f7 fec4 	bl	800d278 <lwip_htons>
 80154f0:	4603      	mov	r3, r0
 80154f2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80154f4:	2300      	movs	r3, #0
 80154f6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80154f8:	2300      	movs	r3, #0
 80154fa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80154fc:	2300      	movs	r3, #0
 80154fe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015500:	4b64      	ldr	r3, [pc, #400]	; (8015694 <udp_input+0x21c>)
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	627b      	str	r3, [r7, #36]	; 0x24
 8015506:	e054      	b.n	80155b2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801550a:	8a5b      	ldrh	r3, [r3, #18]
 801550c:	89fa      	ldrh	r2, [r7, #14]
 801550e:	429a      	cmp	r2, r3
 8015510:	d14a      	bne.n	80155a8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015512:	7cfb      	ldrb	r3, [r7, #19]
 8015514:	461a      	mov	r2, r3
 8015516:	6839      	ldr	r1, [r7, #0]
 8015518:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801551a:	f7ff ff49 	bl	80153b0 <udp_input_local_match>
 801551e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015520:	2b00      	cmp	r3, #0
 8015522:	d041      	beq.n	80155a8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015526:	7c1b      	ldrb	r3, [r3, #16]
 8015528:	f003 0304 	and.w	r3, r3, #4
 801552c:	2b00      	cmp	r3, #0
 801552e:	d11d      	bne.n	801556c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015530:	69fb      	ldr	r3, [r7, #28]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d102      	bne.n	801553c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015538:	61fb      	str	r3, [r7, #28]
 801553a:	e017      	b.n	801556c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801553c:	7cfb      	ldrb	r3, [r7, #19]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d014      	beq.n	801556c <udp_input+0xf4>
 8015542:	4b53      	ldr	r3, [pc, #332]	; (8015690 <udp_input+0x218>)
 8015544:	695b      	ldr	r3, [r3, #20]
 8015546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801554a:	d10f      	bne.n	801556c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801554c:	69fb      	ldr	r3, [r7, #28]
 801554e:	681a      	ldr	r2, [r3, #0]
 8015550:	683b      	ldr	r3, [r7, #0]
 8015552:	3304      	adds	r3, #4
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	429a      	cmp	r2, r3
 8015558:	d008      	beq.n	801556c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801555c:	681a      	ldr	r2, [r3, #0]
 801555e:	683b      	ldr	r3, [r7, #0]
 8015560:	3304      	adds	r3, #4
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	429a      	cmp	r2, r3
 8015566:	d101      	bne.n	801556c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801556a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801556e:	8a9b      	ldrh	r3, [r3, #20]
 8015570:	8a3a      	ldrh	r2, [r7, #16]
 8015572:	429a      	cmp	r2, r3
 8015574:	d118      	bne.n	80155a8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015578:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801557a:	2b00      	cmp	r3, #0
 801557c:	d005      	beq.n	801558a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015580:	685a      	ldr	r2, [r3, #4]
 8015582:	4b43      	ldr	r3, [pc, #268]	; (8015690 <udp_input+0x218>)
 8015584:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015586:	429a      	cmp	r2, r3
 8015588:	d10e      	bne.n	80155a8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801558a:	6a3b      	ldr	r3, [r7, #32]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d014      	beq.n	80155ba <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015592:	68da      	ldr	r2, [r3, #12]
 8015594:	6a3b      	ldr	r3, [r7, #32]
 8015596:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015598:	4b3e      	ldr	r3, [pc, #248]	; (8015694 <udp_input+0x21c>)
 801559a:	681a      	ldr	r2, [r3, #0]
 801559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801559e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80155a0:	4a3c      	ldr	r2, [pc, #240]	; (8015694 <udp_input+0x21c>)
 80155a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155a4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80155a6:	e008      	b.n	80155ba <udp_input+0x142>
      }
    }

    prev = pcb;
 80155a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155aa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80155ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ae:	68db      	ldr	r3, [r3, #12]
 80155b0:	627b      	str	r3, [r7, #36]	; 0x24
 80155b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d1a7      	bne.n	8015508 <udp_input+0x90>
 80155b8:	e000      	b.n	80155bc <udp_input+0x144>
        break;
 80155ba:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80155bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d101      	bne.n	80155c6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80155c2:	69fb      	ldr	r3, [r7, #28]
 80155c4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80155c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d002      	beq.n	80155d2 <udp_input+0x15a>
    for_us = 1;
 80155cc:	2301      	movs	r3, #1
 80155ce:	76fb      	strb	r3, [r7, #27]
 80155d0:	e00a      	b.n	80155e8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80155d2:	683b      	ldr	r3, [r7, #0]
 80155d4:	3304      	adds	r3, #4
 80155d6:	681a      	ldr	r2, [r3, #0]
 80155d8:	4b2d      	ldr	r3, [pc, #180]	; (8015690 <udp_input+0x218>)
 80155da:	695b      	ldr	r3, [r3, #20]
 80155dc:	429a      	cmp	r2, r3
 80155de:	bf0c      	ite	eq
 80155e0:	2301      	moveq	r3, #1
 80155e2:	2300      	movne	r3, #0
 80155e4:	b2db      	uxtb	r3, r3
 80155e6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80155e8:	7efb      	ldrb	r3, [r7, #27]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d041      	beq.n	8015672 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80155ee:	2108      	movs	r1, #8
 80155f0:	6878      	ldr	r0, [r7, #4]
 80155f2:	f7f9 f9bd 	bl	800e970 <pbuf_remove_header>
 80155f6:	4603      	mov	r3, r0
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d00a      	beq.n	8015612 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80155fc:	4b20      	ldr	r3, [pc, #128]	; (8015680 <udp_input+0x208>)
 80155fe:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015602:	4925      	ldr	r1, [pc, #148]	; (8015698 <udp_input+0x220>)
 8015604:	4820      	ldr	r0, [pc, #128]	; (8015688 <udp_input+0x210>)
 8015606:	f008 f8b3 	bl	801d770 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801560a:	6878      	ldr	r0, [r7, #4]
 801560c:	f7f9 fa36 	bl	800ea7c <pbuf_free>
      goto end;
 8015610:	e032      	b.n	8015678 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015614:	2b00      	cmp	r3, #0
 8015616:	d012      	beq.n	801563e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801561a:	699b      	ldr	r3, [r3, #24]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d00a      	beq.n	8015636 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015622:	699c      	ldr	r4, [r3, #24]
 8015624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015626:	69d8      	ldr	r0, [r3, #28]
 8015628:	8a3b      	ldrh	r3, [r7, #16]
 801562a:	9300      	str	r3, [sp, #0]
 801562c:	4b1b      	ldr	r3, [pc, #108]	; (801569c <udp_input+0x224>)
 801562e:	687a      	ldr	r2, [r7, #4]
 8015630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015632:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015634:	e021      	b.n	801567a <udp_input+0x202>
        pbuf_free(p);
 8015636:	6878      	ldr	r0, [r7, #4]
 8015638:	f7f9 fa20 	bl	800ea7c <pbuf_free>
        goto end;
 801563c:	e01c      	b.n	8015678 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801563e:	7cfb      	ldrb	r3, [r7, #19]
 8015640:	2b00      	cmp	r3, #0
 8015642:	d112      	bne.n	801566a <udp_input+0x1f2>
 8015644:	4b12      	ldr	r3, [pc, #72]	; (8015690 <udp_input+0x218>)
 8015646:	695b      	ldr	r3, [r3, #20]
 8015648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801564c:	2be0      	cmp	r3, #224	; 0xe0
 801564e:	d00c      	beq.n	801566a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015650:	4b0f      	ldr	r3, [pc, #60]	; (8015690 <udp_input+0x218>)
 8015652:	899b      	ldrh	r3, [r3, #12]
 8015654:	3308      	adds	r3, #8
 8015656:	b29b      	uxth	r3, r3
 8015658:	b21b      	sxth	r3, r3
 801565a:	4619      	mov	r1, r3
 801565c:	6878      	ldr	r0, [r7, #4]
 801565e:	f7f9 f9fa 	bl	800ea56 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015662:	2103      	movs	r1, #3
 8015664:	6878      	ldr	r0, [r7, #4]
 8015666:	f001 fa17 	bl	8016a98 <icmp_dest_unreach>
      pbuf_free(p);
 801566a:	6878      	ldr	r0, [r7, #4]
 801566c:	f7f9 fa06 	bl	800ea7c <pbuf_free>
  return;
 8015670:	e003      	b.n	801567a <udp_input+0x202>
    pbuf_free(p);
 8015672:	6878      	ldr	r0, [r7, #4]
 8015674:	f7f9 fa02 	bl	800ea7c <pbuf_free>
  return;
 8015678:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801567a:	372c      	adds	r7, #44	; 0x2c
 801567c:	46bd      	mov	sp, r7
 801567e:	bd90      	pop	{r4, r7, pc}
 8015680:	0802149c 	.word	0x0802149c
 8015684:	08021540 	.word	0x08021540
 8015688:	080214f0 	.word	0x080214f0
 801568c:	08021558 	.word	0x08021558
 8015690:	2000a2c0 	.word	0x2000a2c0
 8015694:	20011418 	.word	0x20011418
 8015698:	08021574 	.word	0x08021574
 801569c:	2000a2d0 	.word	0x2000a2d0

080156a0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b086      	sub	sp, #24
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	60f8      	str	r0, [r7, #12]
 80156a8:	60b9      	str	r1, [r7, #8]
 80156aa:	4613      	mov	r3, r2
 80156ac:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80156ae:	68bb      	ldr	r3, [r7, #8]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d101      	bne.n	80156b8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80156b4:	4b39      	ldr	r3, [pc, #228]	; (801579c <udp_bind+0xfc>)
 80156b6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d109      	bne.n	80156d2 <udp_bind+0x32>
 80156be:	4b38      	ldr	r3, [pc, #224]	; (80157a0 <udp_bind+0x100>)
 80156c0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80156c4:	4937      	ldr	r1, [pc, #220]	; (80157a4 <udp_bind+0x104>)
 80156c6:	4838      	ldr	r0, [pc, #224]	; (80157a8 <udp_bind+0x108>)
 80156c8:	f008 f852 	bl	801d770 <iprintf>
 80156cc:	f06f 030f 	mvn.w	r3, #15
 80156d0:	e060      	b.n	8015794 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80156d2:	2300      	movs	r3, #0
 80156d4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80156d6:	4b35      	ldr	r3, [pc, #212]	; (80157ac <udp_bind+0x10c>)
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	617b      	str	r3, [r7, #20]
 80156dc:	e009      	b.n	80156f2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80156de:	68fa      	ldr	r2, [r7, #12]
 80156e0:	697b      	ldr	r3, [r7, #20]
 80156e2:	429a      	cmp	r2, r3
 80156e4:	d102      	bne.n	80156ec <udp_bind+0x4c>
      rebind = 1;
 80156e6:	2301      	movs	r3, #1
 80156e8:	74fb      	strb	r3, [r7, #19]
      break;
 80156ea:	e005      	b.n	80156f8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80156ec:	697b      	ldr	r3, [r7, #20]
 80156ee:	68db      	ldr	r3, [r3, #12]
 80156f0:	617b      	str	r3, [r7, #20]
 80156f2:	697b      	ldr	r3, [r7, #20]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d1f2      	bne.n	80156de <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80156f8:	88fb      	ldrh	r3, [r7, #6]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d109      	bne.n	8015712 <udp_bind+0x72>
    port = udp_new_port();
 80156fe:	f7ff fe1f 	bl	8015340 <udp_new_port>
 8015702:	4603      	mov	r3, r0
 8015704:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015706:	88fb      	ldrh	r3, [r7, #6]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d12c      	bne.n	8015766 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801570c:	f06f 0307 	mvn.w	r3, #7
 8015710:	e040      	b.n	8015794 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015712:	4b26      	ldr	r3, [pc, #152]	; (80157ac <udp_bind+0x10c>)
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	617b      	str	r3, [r7, #20]
 8015718:	e022      	b.n	8015760 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801571a:	68fa      	ldr	r2, [r7, #12]
 801571c:	697b      	ldr	r3, [r7, #20]
 801571e:	429a      	cmp	r2, r3
 8015720:	d01b      	beq.n	801575a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015722:	697b      	ldr	r3, [r7, #20]
 8015724:	8a5b      	ldrh	r3, [r3, #18]
 8015726:	88fa      	ldrh	r2, [r7, #6]
 8015728:	429a      	cmp	r2, r3
 801572a:	d116      	bne.n	801575a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801572c:	697b      	ldr	r3, [r7, #20]
 801572e:	681a      	ldr	r2, [r3, #0]
 8015730:	68bb      	ldr	r3, [r7, #8]
 8015732:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015734:	429a      	cmp	r2, r3
 8015736:	d00d      	beq.n	8015754 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015738:	68bb      	ldr	r3, [r7, #8]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d00a      	beq.n	8015754 <udp_bind+0xb4>
 801573e:	68bb      	ldr	r3, [r7, #8]
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d006      	beq.n	8015754 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015746:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015748:	2b00      	cmp	r3, #0
 801574a:	d003      	beq.n	8015754 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801574c:	697b      	ldr	r3, [r7, #20]
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d102      	bne.n	801575a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015754:	f06f 0307 	mvn.w	r3, #7
 8015758:	e01c      	b.n	8015794 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801575a:	697b      	ldr	r3, [r7, #20]
 801575c:	68db      	ldr	r3, [r3, #12]
 801575e:	617b      	str	r3, [r7, #20]
 8015760:	697b      	ldr	r3, [r7, #20]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d1d9      	bne.n	801571a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015766:	68bb      	ldr	r3, [r7, #8]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d002      	beq.n	8015772 <udp_bind+0xd2>
 801576c:	68bb      	ldr	r3, [r7, #8]
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	e000      	b.n	8015774 <udp_bind+0xd4>
 8015772:	2300      	movs	r3, #0
 8015774:	68fa      	ldr	r2, [r7, #12]
 8015776:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	88fa      	ldrh	r2, [r7, #6]
 801577c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801577e:	7cfb      	ldrb	r3, [r7, #19]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d106      	bne.n	8015792 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015784:	4b09      	ldr	r3, [pc, #36]	; (80157ac <udp_bind+0x10c>)
 8015786:	681a      	ldr	r2, [r3, #0]
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801578c:	4a07      	ldr	r2, [pc, #28]	; (80157ac <udp_bind+0x10c>)
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015792:	2300      	movs	r3, #0
}
 8015794:	4618      	mov	r0, r3
 8015796:	3718      	adds	r7, #24
 8015798:	46bd      	mov	sp, r7
 801579a:	bd80      	pop	{r7, pc}
 801579c:	08022398 	.word	0x08022398
 80157a0:	0802149c 	.word	0x0802149c
 80157a4:	08021764 	.word	0x08021764
 80157a8:	080214f0 	.word	0x080214f0
 80157ac:	20011418 	.word	0x20011418

080157b0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b086      	sub	sp, #24
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	60f8      	str	r0, [r7, #12]
 80157b8:	60b9      	str	r1, [r7, #8]
 80157ba:	4613      	mov	r3, r2
 80157bc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d109      	bne.n	80157d8 <udp_connect+0x28>
 80157c4:	4b2c      	ldr	r3, [pc, #176]	; (8015878 <udp_connect+0xc8>)
 80157c6:	f240 4235 	movw	r2, #1077	; 0x435
 80157ca:	492c      	ldr	r1, [pc, #176]	; (801587c <udp_connect+0xcc>)
 80157cc:	482c      	ldr	r0, [pc, #176]	; (8015880 <udp_connect+0xd0>)
 80157ce:	f007 ffcf 	bl	801d770 <iprintf>
 80157d2:	f06f 030f 	mvn.w	r3, #15
 80157d6:	e04b      	b.n	8015870 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80157d8:	68bb      	ldr	r3, [r7, #8]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d109      	bne.n	80157f2 <udp_connect+0x42>
 80157de:	4b26      	ldr	r3, [pc, #152]	; (8015878 <udp_connect+0xc8>)
 80157e0:	f240 4236 	movw	r2, #1078	; 0x436
 80157e4:	4927      	ldr	r1, [pc, #156]	; (8015884 <udp_connect+0xd4>)
 80157e6:	4826      	ldr	r0, [pc, #152]	; (8015880 <udp_connect+0xd0>)
 80157e8:	f007 ffc2 	bl	801d770 <iprintf>
 80157ec:	f06f 030f 	mvn.w	r3, #15
 80157f0:	e03e      	b.n	8015870 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	8a5b      	ldrh	r3, [r3, #18]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d10f      	bne.n	801581a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80157fa:	68f9      	ldr	r1, [r7, #12]
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	8a5b      	ldrh	r3, [r3, #18]
 8015800:	461a      	mov	r2, r3
 8015802:	68f8      	ldr	r0, [r7, #12]
 8015804:	f7ff ff4c 	bl	80156a0 <udp_bind>
 8015808:	4603      	mov	r3, r0
 801580a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801580c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d002      	beq.n	801581a <udp_connect+0x6a>
      return err;
 8015814:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015818:	e02a      	b.n	8015870 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801581a:	68bb      	ldr	r3, [r7, #8]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d002      	beq.n	8015826 <udp_connect+0x76>
 8015820:	68bb      	ldr	r3, [r7, #8]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	e000      	b.n	8015828 <udp_connect+0x78>
 8015826:	2300      	movs	r3, #0
 8015828:	68fa      	ldr	r2, [r7, #12]
 801582a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	88fa      	ldrh	r2, [r7, #6]
 8015830:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	7c1b      	ldrb	r3, [r3, #16]
 8015836:	f043 0304 	orr.w	r3, r3, #4
 801583a:	b2da      	uxtb	r2, r3
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015840:	4b11      	ldr	r3, [pc, #68]	; (8015888 <udp_connect+0xd8>)
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	617b      	str	r3, [r7, #20]
 8015846:	e008      	b.n	801585a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8015848:	68fa      	ldr	r2, [r7, #12]
 801584a:	697b      	ldr	r3, [r7, #20]
 801584c:	429a      	cmp	r2, r3
 801584e:	d101      	bne.n	8015854 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8015850:	2300      	movs	r3, #0
 8015852:	e00d      	b.n	8015870 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015854:	697b      	ldr	r3, [r7, #20]
 8015856:	68db      	ldr	r3, [r3, #12]
 8015858:	617b      	str	r3, [r7, #20]
 801585a:	697b      	ldr	r3, [r7, #20]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d1f3      	bne.n	8015848 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8015860:	4b09      	ldr	r3, [pc, #36]	; (8015888 <udp_connect+0xd8>)
 8015862:	681a      	ldr	r2, [r3, #0]
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8015868:	4a07      	ldr	r2, [pc, #28]	; (8015888 <udp_connect+0xd8>)
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801586e:	2300      	movs	r3, #0
}
 8015870:	4618      	mov	r0, r3
 8015872:	3718      	adds	r7, #24
 8015874:	46bd      	mov	sp, r7
 8015876:	bd80      	pop	{r7, pc}
 8015878:	0802149c 	.word	0x0802149c
 801587c:	0802177c 	.word	0x0802177c
 8015880:	080214f0 	.word	0x080214f0
 8015884:	08021798 	.word	0x08021798
 8015888:	20011418 	.word	0x20011418

0801588c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b084      	sub	sp, #16
 8015890:	af00      	add	r7, sp, #0
 8015892:	60f8      	str	r0, [r7, #12]
 8015894:	60b9      	str	r1, [r7, #8]
 8015896:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d107      	bne.n	80158ae <udp_recv+0x22>
 801589e:	4b08      	ldr	r3, [pc, #32]	; (80158c0 <udp_recv+0x34>)
 80158a0:	f240 428a 	movw	r2, #1162	; 0x48a
 80158a4:	4907      	ldr	r1, [pc, #28]	; (80158c4 <udp_recv+0x38>)
 80158a6:	4808      	ldr	r0, [pc, #32]	; (80158c8 <udp_recv+0x3c>)
 80158a8:	f007 ff62 	bl	801d770 <iprintf>
 80158ac:	e005      	b.n	80158ba <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	68ba      	ldr	r2, [r7, #8]
 80158b2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	687a      	ldr	r2, [r7, #4]
 80158b8:	61da      	str	r2, [r3, #28]
}
 80158ba:	3710      	adds	r7, #16
 80158bc:	46bd      	mov	sp, r7
 80158be:	bd80      	pop	{r7, pc}
 80158c0:	0802149c 	.word	0x0802149c
 80158c4:	080217d0 	.word	0x080217d0
 80158c8:	080214f0 	.word	0x080214f0

080158cc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b084      	sub	sp, #16
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d107      	bne.n	80158ea <udp_remove+0x1e>
 80158da:	4b19      	ldr	r3, [pc, #100]	; (8015940 <udp_remove+0x74>)
 80158dc:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80158e0:	4918      	ldr	r1, [pc, #96]	; (8015944 <udp_remove+0x78>)
 80158e2:	4819      	ldr	r0, [pc, #100]	; (8015948 <udp_remove+0x7c>)
 80158e4:	f007 ff44 	bl	801d770 <iprintf>
 80158e8:	e026      	b.n	8015938 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80158ea:	4b18      	ldr	r3, [pc, #96]	; (801594c <udp_remove+0x80>)
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	687a      	ldr	r2, [r7, #4]
 80158f0:	429a      	cmp	r2, r3
 80158f2:	d105      	bne.n	8015900 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80158f4:	4b15      	ldr	r3, [pc, #84]	; (801594c <udp_remove+0x80>)
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	68db      	ldr	r3, [r3, #12]
 80158fa:	4a14      	ldr	r2, [pc, #80]	; (801594c <udp_remove+0x80>)
 80158fc:	6013      	str	r3, [r2, #0]
 80158fe:	e017      	b.n	8015930 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015900:	4b12      	ldr	r3, [pc, #72]	; (801594c <udp_remove+0x80>)
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	60fb      	str	r3, [r7, #12]
 8015906:	e010      	b.n	801592a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	68db      	ldr	r3, [r3, #12]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d009      	beq.n	8015924 <udp_remove+0x58>
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	68db      	ldr	r3, [r3, #12]
 8015914:	687a      	ldr	r2, [r7, #4]
 8015916:	429a      	cmp	r2, r3
 8015918:	d104      	bne.n	8015924 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	68da      	ldr	r2, [r3, #12]
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	60da      	str	r2, [r3, #12]
        break;
 8015922:	e005      	b.n	8015930 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	68db      	ldr	r3, [r3, #12]
 8015928:	60fb      	str	r3, [r7, #12]
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d1eb      	bne.n	8015908 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015930:	6879      	ldr	r1, [r7, #4]
 8015932:	2000      	movs	r0, #0
 8015934:	f7f8 f9fe 	bl	800dd34 <memp_free>
}
 8015938:	3710      	adds	r7, #16
 801593a:	46bd      	mov	sp, r7
 801593c:	bd80      	pop	{r7, pc}
 801593e:	bf00      	nop
 8015940:	0802149c 	.word	0x0802149c
 8015944:	080217e8 	.word	0x080217e8
 8015948:	080214f0 	.word	0x080214f0
 801594c:	20011418 	.word	0x20011418

08015950 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b082      	sub	sp, #8
 8015954:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015956:	2000      	movs	r0, #0
 8015958:	f7f8 f976 	bl	800dc48 <memp_malloc>
 801595c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d007      	beq.n	8015974 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015964:	2220      	movs	r2, #32
 8015966:	2100      	movs	r1, #0
 8015968:	6878      	ldr	r0, [r7, #4]
 801596a:	f007 fef9 	bl	801d760 <memset>
    pcb->ttl = UDP_TTL;
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	22ff      	movs	r2, #255	; 0xff
 8015972:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015974:	687b      	ldr	r3, [r7, #4]
}
 8015976:	4618      	mov	r0, r3
 8015978:	3708      	adds	r7, #8
 801597a:	46bd      	mov	sp, r7
 801597c:	bd80      	pop	{r7, pc}

0801597e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801597e:	b580      	push	{r7, lr}
 8015980:	b084      	sub	sp, #16
 8015982:	af00      	add	r7, sp, #0
 8015984:	4603      	mov	r3, r0
 8015986:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8015988:	f7ff ffe2 	bl	8015950 <udp_new>
 801598c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801598e:	68fb      	ldr	r3, [r7, #12]
}
 8015990:	4618      	mov	r0, r3
 8015992:	3710      	adds	r7, #16
 8015994:	46bd      	mov	sp, r7
 8015996:	bd80      	pop	{r7, pc}

08015998 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015998:	b480      	push	{r7}
 801599a:	b085      	sub	sp, #20
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
 80159a0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d01e      	beq.n	80159e6 <udp_netif_ip_addr_changed+0x4e>
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d01a      	beq.n	80159e6 <udp_netif_ip_addr_changed+0x4e>
 80159b0:	683b      	ldr	r3, [r7, #0]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d017      	beq.n	80159e6 <udp_netif_ip_addr_changed+0x4e>
 80159b6:	683b      	ldr	r3, [r7, #0]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d013      	beq.n	80159e6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80159be:	4b0d      	ldr	r3, [pc, #52]	; (80159f4 <udp_netif_ip_addr_changed+0x5c>)
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	60fb      	str	r3, [r7, #12]
 80159c4:	e00c      	b.n	80159e0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	681a      	ldr	r2, [r3, #0]
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	429a      	cmp	r2, r3
 80159d0:	d103      	bne.n	80159da <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80159d2:	683b      	ldr	r3, [r7, #0]
 80159d4:	681a      	ldr	r2, [r3, #0]
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	68db      	ldr	r3, [r3, #12]
 80159de:	60fb      	str	r3, [r7, #12]
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d1ef      	bne.n	80159c6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80159e6:	bf00      	nop
 80159e8:	3714      	adds	r7, #20
 80159ea:	46bd      	mov	sp, r7
 80159ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f0:	4770      	bx	lr
 80159f2:	bf00      	nop
 80159f4:	20011418 	.word	0x20011418

080159f8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b082      	sub	sp, #8
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015a00:	4915      	ldr	r1, [pc, #84]	; (8015a58 <etharp_free_entry+0x60>)
 8015a02:	687a      	ldr	r2, [r7, #4]
 8015a04:	4613      	mov	r3, r2
 8015a06:	005b      	lsls	r3, r3, #1
 8015a08:	4413      	add	r3, r2
 8015a0a:	00db      	lsls	r3, r3, #3
 8015a0c:	440b      	add	r3, r1
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d013      	beq.n	8015a3c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015a14:	4910      	ldr	r1, [pc, #64]	; (8015a58 <etharp_free_entry+0x60>)
 8015a16:	687a      	ldr	r2, [r7, #4]
 8015a18:	4613      	mov	r3, r2
 8015a1a:	005b      	lsls	r3, r3, #1
 8015a1c:	4413      	add	r3, r2
 8015a1e:	00db      	lsls	r3, r3, #3
 8015a20:	440b      	add	r3, r1
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	4618      	mov	r0, r3
 8015a26:	f7f9 f829 	bl	800ea7c <pbuf_free>
    arp_table[i].q = NULL;
 8015a2a:	490b      	ldr	r1, [pc, #44]	; (8015a58 <etharp_free_entry+0x60>)
 8015a2c:	687a      	ldr	r2, [r7, #4]
 8015a2e:	4613      	mov	r3, r2
 8015a30:	005b      	lsls	r3, r3, #1
 8015a32:	4413      	add	r3, r2
 8015a34:	00db      	lsls	r3, r3, #3
 8015a36:	440b      	add	r3, r1
 8015a38:	2200      	movs	r2, #0
 8015a3a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015a3c:	4906      	ldr	r1, [pc, #24]	; (8015a58 <etharp_free_entry+0x60>)
 8015a3e:	687a      	ldr	r2, [r7, #4]
 8015a40:	4613      	mov	r3, r2
 8015a42:	005b      	lsls	r3, r3, #1
 8015a44:	4413      	add	r3, r2
 8015a46:	00db      	lsls	r3, r3, #3
 8015a48:	440b      	add	r3, r1
 8015a4a:	3314      	adds	r3, #20
 8015a4c:	2200      	movs	r2, #0
 8015a4e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015a50:	bf00      	nop
 8015a52:	3708      	adds	r7, #8
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd80      	pop	{r7, pc}
 8015a58:	2001141c 	.word	0x2001141c

08015a5c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b082      	sub	sp, #8
 8015a60:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a62:	2300      	movs	r3, #0
 8015a64:	607b      	str	r3, [r7, #4]
 8015a66:	e096      	b.n	8015b96 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015a68:	494f      	ldr	r1, [pc, #316]	; (8015ba8 <etharp_tmr+0x14c>)
 8015a6a:	687a      	ldr	r2, [r7, #4]
 8015a6c:	4613      	mov	r3, r2
 8015a6e:	005b      	lsls	r3, r3, #1
 8015a70:	4413      	add	r3, r2
 8015a72:	00db      	lsls	r3, r3, #3
 8015a74:	440b      	add	r3, r1
 8015a76:	3314      	adds	r3, #20
 8015a78:	781b      	ldrb	r3, [r3, #0]
 8015a7a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015a7c:	78fb      	ldrb	r3, [r7, #3]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	f000 8086 	beq.w	8015b90 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015a84:	4948      	ldr	r1, [pc, #288]	; (8015ba8 <etharp_tmr+0x14c>)
 8015a86:	687a      	ldr	r2, [r7, #4]
 8015a88:	4613      	mov	r3, r2
 8015a8a:	005b      	lsls	r3, r3, #1
 8015a8c:	4413      	add	r3, r2
 8015a8e:	00db      	lsls	r3, r3, #3
 8015a90:	440b      	add	r3, r1
 8015a92:	3312      	adds	r3, #18
 8015a94:	881b      	ldrh	r3, [r3, #0]
 8015a96:	3301      	adds	r3, #1
 8015a98:	b298      	uxth	r0, r3
 8015a9a:	4943      	ldr	r1, [pc, #268]	; (8015ba8 <etharp_tmr+0x14c>)
 8015a9c:	687a      	ldr	r2, [r7, #4]
 8015a9e:	4613      	mov	r3, r2
 8015aa0:	005b      	lsls	r3, r3, #1
 8015aa2:	4413      	add	r3, r2
 8015aa4:	00db      	lsls	r3, r3, #3
 8015aa6:	440b      	add	r3, r1
 8015aa8:	3312      	adds	r3, #18
 8015aaa:	4602      	mov	r2, r0
 8015aac:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015aae:	493e      	ldr	r1, [pc, #248]	; (8015ba8 <etharp_tmr+0x14c>)
 8015ab0:	687a      	ldr	r2, [r7, #4]
 8015ab2:	4613      	mov	r3, r2
 8015ab4:	005b      	lsls	r3, r3, #1
 8015ab6:	4413      	add	r3, r2
 8015ab8:	00db      	lsls	r3, r3, #3
 8015aba:	440b      	add	r3, r1
 8015abc:	3312      	adds	r3, #18
 8015abe:	881b      	ldrh	r3, [r3, #0]
 8015ac0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015ac4:	d215      	bcs.n	8015af2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015ac6:	4938      	ldr	r1, [pc, #224]	; (8015ba8 <etharp_tmr+0x14c>)
 8015ac8:	687a      	ldr	r2, [r7, #4]
 8015aca:	4613      	mov	r3, r2
 8015acc:	005b      	lsls	r3, r3, #1
 8015ace:	4413      	add	r3, r2
 8015ad0:	00db      	lsls	r3, r3, #3
 8015ad2:	440b      	add	r3, r1
 8015ad4:	3314      	adds	r3, #20
 8015ad6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015ad8:	2b01      	cmp	r3, #1
 8015ada:	d10e      	bne.n	8015afa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015adc:	4932      	ldr	r1, [pc, #200]	; (8015ba8 <etharp_tmr+0x14c>)
 8015ade:	687a      	ldr	r2, [r7, #4]
 8015ae0:	4613      	mov	r3, r2
 8015ae2:	005b      	lsls	r3, r3, #1
 8015ae4:	4413      	add	r3, r2
 8015ae6:	00db      	lsls	r3, r3, #3
 8015ae8:	440b      	add	r3, r1
 8015aea:	3312      	adds	r3, #18
 8015aec:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015aee:	2b04      	cmp	r3, #4
 8015af0:	d903      	bls.n	8015afa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015af2:	6878      	ldr	r0, [r7, #4]
 8015af4:	f7ff ff80 	bl	80159f8 <etharp_free_entry>
 8015af8:	e04a      	b.n	8015b90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015afa:	492b      	ldr	r1, [pc, #172]	; (8015ba8 <etharp_tmr+0x14c>)
 8015afc:	687a      	ldr	r2, [r7, #4]
 8015afe:	4613      	mov	r3, r2
 8015b00:	005b      	lsls	r3, r3, #1
 8015b02:	4413      	add	r3, r2
 8015b04:	00db      	lsls	r3, r3, #3
 8015b06:	440b      	add	r3, r1
 8015b08:	3314      	adds	r3, #20
 8015b0a:	781b      	ldrb	r3, [r3, #0]
 8015b0c:	2b03      	cmp	r3, #3
 8015b0e:	d10a      	bne.n	8015b26 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015b10:	4925      	ldr	r1, [pc, #148]	; (8015ba8 <etharp_tmr+0x14c>)
 8015b12:	687a      	ldr	r2, [r7, #4]
 8015b14:	4613      	mov	r3, r2
 8015b16:	005b      	lsls	r3, r3, #1
 8015b18:	4413      	add	r3, r2
 8015b1a:	00db      	lsls	r3, r3, #3
 8015b1c:	440b      	add	r3, r1
 8015b1e:	3314      	adds	r3, #20
 8015b20:	2204      	movs	r2, #4
 8015b22:	701a      	strb	r2, [r3, #0]
 8015b24:	e034      	b.n	8015b90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015b26:	4920      	ldr	r1, [pc, #128]	; (8015ba8 <etharp_tmr+0x14c>)
 8015b28:	687a      	ldr	r2, [r7, #4]
 8015b2a:	4613      	mov	r3, r2
 8015b2c:	005b      	lsls	r3, r3, #1
 8015b2e:	4413      	add	r3, r2
 8015b30:	00db      	lsls	r3, r3, #3
 8015b32:	440b      	add	r3, r1
 8015b34:	3314      	adds	r3, #20
 8015b36:	781b      	ldrb	r3, [r3, #0]
 8015b38:	2b04      	cmp	r3, #4
 8015b3a:	d10a      	bne.n	8015b52 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015b3c:	491a      	ldr	r1, [pc, #104]	; (8015ba8 <etharp_tmr+0x14c>)
 8015b3e:	687a      	ldr	r2, [r7, #4]
 8015b40:	4613      	mov	r3, r2
 8015b42:	005b      	lsls	r3, r3, #1
 8015b44:	4413      	add	r3, r2
 8015b46:	00db      	lsls	r3, r3, #3
 8015b48:	440b      	add	r3, r1
 8015b4a:	3314      	adds	r3, #20
 8015b4c:	2202      	movs	r2, #2
 8015b4e:	701a      	strb	r2, [r3, #0]
 8015b50:	e01e      	b.n	8015b90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015b52:	4915      	ldr	r1, [pc, #84]	; (8015ba8 <etharp_tmr+0x14c>)
 8015b54:	687a      	ldr	r2, [r7, #4]
 8015b56:	4613      	mov	r3, r2
 8015b58:	005b      	lsls	r3, r3, #1
 8015b5a:	4413      	add	r3, r2
 8015b5c:	00db      	lsls	r3, r3, #3
 8015b5e:	440b      	add	r3, r1
 8015b60:	3314      	adds	r3, #20
 8015b62:	781b      	ldrb	r3, [r3, #0]
 8015b64:	2b01      	cmp	r3, #1
 8015b66:	d113      	bne.n	8015b90 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015b68:	490f      	ldr	r1, [pc, #60]	; (8015ba8 <etharp_tmr+0x14c>)
 8015b6a:	687a      	ldr	r2, [r7, #4]
 8015b6c:	4613      	mov	r3, r2
 8015b6e:	005b      	lsls	r3, r3, #1
 8015b70:	4413      	add	r3, r2
 8015b72:	00db      	lsls	r3, r3, #3
 8015b74:	440b      	add	r3, r1
 8015b76:	3308      	adds	r3, #8
 8015b78:	6818      	ldr	r0, [r3, #0]
 8015b7a:	687a      	ldr	r2, [r7, #4]
 8015b7c:	4613      	mov	r3, r2
 8015b7e:	005b      	lsls	r3, r3, #1
 8015b80:	4413      	add	r3, r2
 8015b82:	00db      	lsls	r3, r3, #3
 8015b84:	4a08      	ldr	r2, [pc, #32]	; (8015ba8 <etharp_tmr+0x14c>)
 8015b86:	4413      	add	r3, r2
 8015b88:	3304      	adds	r3, #4
 8015b8a:	4619      	mov	r1, r3
 8015b8c:	f000 fe6e 	bl	801686c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	3301      	adds	r3, #1
 8015b94:	607b      	str	r3, [r7, #4]
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	2b09      	cmp	r3, #9
 8015b9a:	f77f af65 	ble.w	8015a68 <etharp_tmr+0xc>
      }
    }
  }
}
 8015b9e:	bf00      	nop
 8015ba0:	bf00      	nop
 8015ba2:	3708      	adds	r7, #8
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	bd80      	pop	{r7, pc}
 8015ba8:	2001141c 	.word	0x2001141c

08015bac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b08a      	sub	sp, #40	; 0x28
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	60f8      	str	r0, [r7, #12]
 8015bb4:	460b      	mov	r3, r1
 8015bb6:	607a      	str	r2, [r7, #4]
 8015bb8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015bba:	230a      	movs	r3, #10
 8015bbc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015bbe:	230a      	movs	r3, #10
 8015bc0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015bc2:	230a      	movs	r3, #10
 8015bc4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015bca:	230a      	movs	r3, #10
 8015bcc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015bce:	2300      	movs	r3, #0
 8015bd0:	83bb      	strh	r3, [r7, #28]
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	837b      	strh	r3, [r7, #26]
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015bda:	2300      	movs	r3, #0
 8015bdc:	843b      	strh	r3, [r7, #32]
 8015bde:	e0ae      	b.n	8015d3e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015be0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015be4:	49a6      	ldr	r1, [pc, #664]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015be6:	4613      	mov	r3, r2
 8015be8:	005b      	lsls	r3, r3, #1
 8015bea:	4413      	add	r3, r2
 8015bec:	00db      	lsls	r3, r3, #3
 8015bee:	440b      	add	r3, r1
 8015bf0:	3314      	adds	r3, #20
 8015bf2:	781b      	ldrb	r3, [r3, #0]
 8015bf4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015bf6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015bfa:	2b0a      	cmp	r3, #10
 8015bfc:	d105      	bne.n	8015c0a <etharp_find_entry+0x5e>
 8015bfe:	7dfb      	ldrb	r3, [r7, #23]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d102      	bne.n	8015c0a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015c04:	8c3b      	ldrh	r3, [r7, #32]
 8015c06:	847b      	strh	r3, [r7, #34]	; 0x22
 8015c08:	e095      	b.n	8015d36 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015c0a:	7dfb      	ldrb	r3, [r7, #23]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	f000 8092 	beq.w	8015d36 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015c12:	7dfb      	ldrb	r3, [r7, #23]
 8015c14:	2b01      	cmp	r3, #1
 8015c16:	d009      	beq.n	8015c2c <etharp_find_entry+0x80>
 8015c18:	7dfb      	ldrb	r3, [r7, #23]
 8015c1a:	2b01      	cmp	r3, #1
 8015c1c:	d806      	bhi.n	8015c2c <etharp_find_entry+0x80>
 8015c1e:	4b99      	ldr	r3, [pc, #612]	; (8015e84 <etharp_find_entry+0x2d8>)
 8015c20:	f240 1223 	movw	r2, #291	; 0x123
 8015c24:	4998      	ldr	r1, [pc, #608]	; (8015e88 <etharp_find_entry+0x2dc>)
 8015c26:	4899      	ldr	r0, [pc, #612]	; (8015e8c <etharp_find_entry+0x2e0>)
 8015c28:	f007 fda2 	bl	801d770 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d020      	beq.n	8015c74 <etharp_find_entry+0xc8>
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	6819      	ldr	r1, [r3, #0]
 8015c36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c3a:	4891      	ldr	r0, [pc, #580]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015c3c:	4613      	mov	r3, r2
 8015c3e:	005b      	lsls	r3, r3, #1
 8015c40:	4413      	add	r3, r2
 8015c42:	00db      	lsls	r3, r3, #3
 8015c44:	4403      	add	r3, r0
 8015c46:	3304      	adds	r3, #4
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	4299      	cmp	r1, r3
 8015c4c:	d112      	bne.n	8015c74 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d00c      	beq.n	8015c6e <etharp_find_entry+0xc2>
 8015c54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c58:	4989      	ldr	r1, [pc, #548]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015c5a:	4613      	mov	r3, r2
 8015c5c:	005b      	lsls	r3, r3, #1
 8015c5e:	4413      	add	r3, r2
 8015c60:	00db      	lsls	r3, r3, #3
 8015c62:	440b      	add	r3, r1
 8015c64:	3308      	adds	r3, #8
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	687a      	ldr	r2, [r7, #4]
 8015c6a:	429a      	cmp	r2, r3
 8015c6c:	d102      	bne.n	8015c74 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015c6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c72:	e100      	b.n	8015e76 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015c74:	7dfb      	ldrb	r3, [r7, #23]
 8015c76:	2b01      	cmp	r3, #1
 8015c78:	d140      	bne.n	8015cfc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015c7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c7e:	4980      	ldr	r1, [pc, #512]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015c80:	4613      	mov	r3, r2
 8015c82:	005b      	lsls	r3, r3, #1
 8015c84:	4413      	add	r3, r2
 8015c86:	00db      	lsls	r3, r3, #3
 8015c88:	440b      	add	r3, r1
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d01a      	beq.n	8015cc6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015c90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c94:	497a      	ldr	r1, [pc, #488]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015c96:	4613      	mov	r3, r2
 8015c98:	005b      	lsls	r3, r3, #1
 8015c9a:	4413      	add	r3, r2
 8015c9c:	00db      	lsls	r3, r3, #3
 8015c9e:	440b      	add	r3, r1
 8015ca0:	3312      	adds	r3, #18
 8015ca2:	881b      	ldrh	r3, [r3, #0]
 8015ca4:	8bba      	ldrh	r2, [r7, #28]
 8015ca6:	429a      	cmp	r2, r3
 8015ca8:	d845      	bhi.n	8015d36 <etharp_find_entry+0x18a>
            old_queue = i;
 8015caa:	8c3b      	ldrh	r3, [r7, #32]
 8015cac:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015cae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cb2:	4973      	ldr	r1, [pc, #460]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015cb4:	4613      	mov	r3, r2
 8015cb6:	005b      	lsls	r3, r3, #1
 8015cb8:	4413      	add	r3, r2
 8015cba:	00db      	lsls	r3, r3, #3
 8015cbc:	440b      	add	r3, r1
 8015cbe:	3312      	adds	r3, #18
 8015cc0:	881b      	ldrh	r3, [r3, #0]
 8015cc2:	83bb      	strh	r3, [r7, #28]
 8015cc4:	e037      	b.n	8015d36 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015cc6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cca:	496d      	ldr	r1, [pc, #436]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015ccc:	4613      	mov	r3, r2
 8015cce:	005b      	lsls	r3, r3, #1
 8015cd0:	4413      	add	r3, r2
 8015cd2:	00db      	lsls	r3, r3, #3
 8015cd4:	440b      	add	r3, r1
 8015cd6:	3312      	adds	r3, #18
 8015cd8:	881b      	ldrh	r3, [r3, #0]
 8015cda:	8b7a      	ldrh	r2, [r7, #26]
 8015cdc:	429a      	cmp	r2, r3
 8015cde:	d82a      	bhi.n	8015d36 <etharp_find_entry+0x18a>
            old_pending = i;
 8015ce0:	8c3b      	ldrh	r3, [r7, #32]
 8015ce2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015ce4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ce8:	4965      	ldr	r1, [pc, #404]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015cea:	4613      	mov	r3, r2
 8015cec:	005b      	lsls	r3, r3, #1
 8015cee:	4413      	add	r3, r2
 8015cf0:	00db      	lsls	r3, r3, #3
 8015cf2:	440b      	add	r3, r1
 8015cf4:	3312      	adds	r3, #18
 8015cf6:	881b      	ldrh	r3, [r3, #0]
 8015cf8:	837b      	strh	r3, [r7, #26]
 8015cfa:	e01c      	b.n	8015d36 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015cfc:	7dfb      	ldrb	r3, [r7, #23]
 8015cfe:	2b01      	cmp	r3, #1
 8015d00:	d919      	bls.n	8015d36 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015d02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d06:	495e      	ldr	r1, [pc, #376]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015d08:	4613      	mov	r3, r2
 8015d0a:	005b      	lsls	r3, r3, #1
 8015d0c:	4413      	add	r3, r2
 8015d0e:	00db      	lsls	r3, r3, #3
 8015d10:	440b      	add	r3, r1
 8015d12:	3312      	adds	r3, #18
 8015d14:	881b      	ldrh	r3, [r3, #0]
 8015d16:	8b3a      	ldrh	r2, [r7, #24]
 8015d18:	429a      	cmp	r2, r3
 8015d1a:	d80c      	bhi.n	8015d36 <etharp_find_entry+0x18a>
            old_stable = i;
 8015d1c:	8c3b      	ldrh	r3, [r7, #32]
 8015d1e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015d20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d24:	4956      	ldr	r1, [pc, #344]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015d26:	4613      	mov	r3, r2
 8015d28:	005b      	lsls	r3, r3, #1
 8015d2a:	4413      	add	r3, r2
 8015d2c:	00db      	lsls	r3, r3, #3
 8015d2e:	440b      	add	r3, r1
 8015d30:	3312      	adds	r3, #18
 8015d32:	881b      	ldrh	r3, [r3, #0]
 8015d34:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015d36:	8c3b      	ldrh	r3, [r7, #32]
 8015d38:	3301      	adds	r3, #1
 8015d3a:	b29b      	uxth	r3, r3
 8015d3c:	843b      	strh	r3, [r7, #32]
 8015d3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d42:	2b09      	cmp	r3, #9
 8015d44:	f77f af4c 	ble.w	8015be0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015d48:	7afb      	ldrb	r3, [r7, #11]
 8015d4a:	f003 0302 	and.w	r3, r3, #2
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d108      	bne.n	8015d64 <etharp_find_entry+0x1b8>
 8015d52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015d56:	2b0a      	cmp	r3, #10
 8015d58:	d107      	bne.n	8015d6a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015d5a:	7afb      	ldrb	r3, [r7, #11]
 8015d5c:	f003 0301 	and.w	r3, r3, #1
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d102      	bne.n	8015d6a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d68:	e085      	b.n	8015e76 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015d6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015d6e:	2b09      	cmp	r3, #9
 8015d70:	dc02      	bgt.n	8015d78 <etharp_find_entry+0x1cc>
    i = empty;
 8015d72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d74:	843b      	strh	r3, [r7, #32]
 8015d76:	e039      	b.n	8015dec <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015d78:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015d7c:	2b09      	cmp	r3, #9
 8015d7e:	dc14      	bgt.n	8015daa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015d80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d82:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015d84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d88:	493d      	ldr	r1, [pc, #244]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015d8a:	4613      	mov	r3, r2
 8015d8c:	005b      	lsls	r3, r3, #1
 8015d8e:	4413      	add	r3, r2
 8015d90:	00db      	lsls	r3, r3, #3
 8015d92:	440b      	add	r3, r1
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d018      	beq.n	8015dcc <etharp_find_entry+0x220>
 8015d9a:	4b3a      	ldr	r3, [pc, #232]	; (8015e84 <etharp_find_entry+0x2d8>)
 8015d9c:	f240 126d 	movw	r2, #365	; 0x16d
 8015da0:	493b      	ldr	r1, [pc, #236]	; (8015e90 <etharp_find_entry+0x2e4>)
 8015da2:	483a      	ldr	r0, [pc, #232]	; (8015e8c <etharp_find_entry+0x2e0>)
 8015da4:	f007 fce4 	bl	801d770 <iprintf>
 8015da8:	e010      	b.n	8015dcc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015daa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015dae:	2b09      	cmp	r3, #9
 8015db0:	dc02      	bgt.n	8015db8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015db2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015db4:	843b      	strh	r3, [r7, #32]
 8015db6:	e009      	b.n	8015dcc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015db8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015dbc:	2b09      	cmp	r3, #9
 8015dbe:	dc02      	bgt.n	8015dc6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015dc0:	8bfb      	ldrh	r3, [r7, #30]
 8015dc2:	843b      	strh	r3, [r7, #32]
 8015dc4:	e002      	b.n	8015dcc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015dca:	e054      	b.n	8015e76 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015dcc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015dd0:	2b09      	cmp	r3, #9
 8015dd2:	dd06      	ble.n	8015de2 <etharp_find_entry+0x236>
 8015dd4:	4b2b      	ldr	r3, [pc, #172]	; (8015e84 <etharp_find_entry+0x2d8>)
 8015dd6:	f240 127f 	movw	r2, #383	; 0x17f
 8015dda:	492e      	ldr	r1, [pc, #184]	; (8015e94 <etharp_find_entry+0x2e8>)
 8015ddc:	482b      	ldr	r0, [pc, #172]	; (8015e8c <etharp_find_entry+0x2e0>)
 8015dde:	f007 fcc7 	bl	801d770 <iprintf>
    etharp_free_entry(i);
 8015de2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015de6:	4618      	mov	r0, r3
 8015de8:	f7ff fe06 	bl	80159f8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015dec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015df0:	2b09      	cmp	r3, #9
 8015df2:	dd06      	ble.n	8015e02 <etharp_find_entry+0x256>
 8015df4:	4b23      	ldr	r3, [pc, #140]	; (8015e84 <etharp_find_entry+0x2d8>)
 8015df6:	f240 1283 	movw	r2, #387	; 0x183
 8015dfa:	4926      	ldr	r1, [pc, #152]	; (8015e94 <etharp_find_entry+0x2e8>)
 8015dfc:	4823      	ldr	r0, [pc, #140]	; (8015e8c <etharp_find_entry+0x2e0>)
 8015dfe:	f007 fcb7 	bl	801d770 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015e02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e06:	491e      	ldr	r1, [pc, #120]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015e08:	4613      	mov	r3, r2
 8015e0a:	005b      	lsls	r3, r3, #1
 8015e0c:	4413      	add	r3, r2
 8015e0e:	00db      	lsls	r3, r3, #3
 8015e10:	440b      	add	r3, r1
 8015e12:	3314      	adds	r3, #20
 8015e14:	781b      	ldrb	r3, [r3, #0]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d006      	beq.n	8015e28 <etharp_find_entry+0x27c>
 8015e1a:	4b1a      	ldr	r3, [pc, #104]	; (8015e84 <etharp_find_entry+0x2d8>)
 8015e1c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015e20:	491d      	ldr	r1, [pc, #116]	; (8015e98 <etharp_find_entry+0x2ec>)
 8015e22:	481a      	ldr	r0, [pc, #104]	; (8015e8c <etharp_find_entry+0x2e0>)
 8015e24:	f007 fca4 	bl	801d770 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d00b      	beq.n	8015e46 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015e2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	6819      	ldr	r1, [r3, #0]
 8015e36:	4812      	ldr	r0, [pc, #72]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015e38:	4613      	mov	r3, r2
 8015e3a:	005b      	lsls	r3, r3, #1
 8015e3c:	4413      	add	r3, r2
 8015e3e:	00db      	lsls	r3, r3, #3
 8015e40:	4403      	add	r3, r0
 8015e42:	3304      	adds	r3, #4
 8015e44:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015e46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e4a:	490d      	ldr	r1, [pc, #52]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015e4c:	4613      	mov	r3, r2
 8015e4e:	005b      	lsls	r3, r3, #1
 8015e50:	4413      	add	r3, r2
 8015e52:	00db      	lsls	r3, r3, #3
 8015e54:	440b      	add	r3, r1
 8015e56:	3312      	adds	r3, #18
 8015e58:	2200      	movs	r2, #0
 8015e5a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015e5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e60:	4907      	ldr	r1, [pc, #28]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015e62:	4613      	mov	r3, r2
 8015e64:	005b      	lsls	r3, r3, #1
 8015e66:	4413      	add	r3, r2
 8015e68:	00db      	lsls	r3, r3, #3
 8015e6a:	440b      	add	r3, r1
 8015e6c:	3308      	adds	r3, #8
 8015e6e:	687a      	ldr	r2, [r7, #4]
 8015e70:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015e72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015e76:	4618      	mov	r0, r3
 8015e78:	3728      	adds	r7, #40	; 0x28
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	bd80      	pop	{r7, pc}
 8015e7e:	bf00      	nop
 8015e80:	2001141c 	.word	0x2001141c
 8015e84:	08021800 	.word	0x08021800
 8015e88:	08021838 	.word	0x08021838
 8015e8c:	08021878 	.word	0x08021878
 8015e90:	080218a0 	.word	0x080218a0
 8015e94:	080218b8 	.word	0x080218b8
 8015e98:	080218cc 	.word	0x080218cc

08015e9c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b088      	sub	sp, #32
 8015ea0:	af02      	add	r7, sp, #8
 8015ea2:	60f8      	str	r0, [r7, #12]
 8015ea4:	60b9      	str	r1, [r7, #8]
 8015ea6:	607a      	str	r2, [r7, #4]
 8015ea8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015eb0:	2b06      	cmp	r3, #6
 8015eb2:	d006      	beq.n	8015ec2 <etharp_update_arp_entry+0x26>
 8015eb4:	4b48      	ldr	r3, [pc, #288]	; (8015fd8 <etharp_update_arp_entry+0x13c>)
 8015eb6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015eba:	4948      	ldr	r1, [pc, #288]	; (8015fdc <etharp_update_arp_entry+0x140>)
 8015ebc:	4848      	ldr	r0, [pc, #288]	; (8015fe0 <etharp_update_arp_entry+0x144>)
 8015ebe:	f007 fc57 	bl	801d770 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015ec2:	68bb      	ldr	r3, [r7, #8]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d012      	beq.n	8015eee <etharp_update_arp_entry+0x52>
 8015ec8:	68bb      	ldr	r3, [r7, #8]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d00e      	beq.n	8015eee <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015ed0:	68bb      	ldr	r3, [r7, #8]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	68f9      	ldr	r1, [r7, #12]
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	f001 f8fe 	bl	80170d8 <ip4_addr_isbroadcast_u32>
 8015edc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d105      	bne.n	8015eee <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015ee2:	68bb      	ldr	r3, [r7, #8]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015eea:	2be0      	cmp	r3, #224	; 0xe0
 8015eec:	d102      	bne.n	8015ef4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015eee:	f06f 030f 	mvn.w	r3, #15
 8015ef2:	e06c      	b.n	8015fce <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015ef4:	78fb      	ldrb	r3, [r7, #3]
 8015ef6:	68fa      	ldr	r2, [r7, #12]
 8015ef8:	4619      	mov	r1, r3
 8015efa:	68b8      	ldr	r0, [r7, #8]
 8015efc:	f7ff fe56 	bl	8015bac <etharp_find_entry>
 8015f00:	4603      	mov	r3, r0
 8015f02:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015f04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	da02      	bge.n	8015f12 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015f0c:	8afb      	ldrh	r3, [r7, #22]
 8015f0e:	b25b      	sxtb	r3, r3
 8015f10:	e05d      	b.n	8015fce <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015f12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f16:	4933      	ldr	r1, [pc, #204]	; (8015fe4 <etharp_update_arp_entry+0x148>)
 8015f18:	4613      	mov	r3, r2
 8015f1a:	005b      	lsls	r3, r3, #1
 8015f1c:	4413      	add	r3, r2
 8015f1e:	00db      	lsls	r3, r3, #3
 8015f20:	440b      	add	r3, r1
 8015f22:	3314      	adds	r3, #20
 8015f24:	2202      	movs	r2, #2
 8015f26:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015f28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f2c:	492d      	ldr	r1, [pc, #180]	; (8015fe4 <etharp_update_arp_entry+0x148>)
 8015f2e:	4613      	mov	r3, r2
 8015f30:	005b      	lsls	r3, r3, #1
 8015f32:	4413      	add	r3, r2
 8015f34:	00db      	lsls	r3, r3, #3
 8015f36:	440b      	add	r3, r1
 8015f38:	3308      	adds	r3, #8
 8015f3a:	68fa      	ldr	r2, [r7, #12]
 8015f3c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015f3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f42:	4613      	mov	r3, r2
 8015f44:	005b      	lsls	r3, r3, #1
 8015f46:	4413      	add	r3, r2
 8015f48:	00db      	lsls	r3, r3, #3
 8015f4a:	3308      	adds	r3, #8
 8015f4c:	4a25      	ldr	r2, [pc, #148]	; (8015fe4 <etharp_update_arp_entry+0x148>)
 8015f4e:	4413      	add	r3, r2
 8015f50:	3304      	adds	r3, #4
 8015f52:	2206      	movs	r2, #6
 8015f54:	6879      	ldr	r1, [r7, #4]
 8015f56:	4618      	mov	r0, r3
 8015f58:	f007 fbf4 	bl	801d744 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015f5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f60:	4920      	ldr	r1, [pc, #128]	; (8015fe4 <etharp_update_arp_entry+0x148>)
 8015f62:	4613      	mov	r3, r2
 8015f64:	005b      	lsls	r3, r3, #1
 8015f66:	4413      	add	r3, r2
 8015f68:	00db      	lsls	r3, r3, #3
 8015f6a:	440b      	add	r3, r1
 8015f6c:	3312      	adds	r3, #18
 8015f6e:	2200      	movs	r2, #0
 8015f70:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015f72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f76:	491b      	ldr	r1, [pc, #108]	; (8015fe4 <etharp_update_arp_entry+0x148>)
 8015f78:	4613      	mov	r3, r2
 8015f7a:	005b      	lsls	r3, r3, #1
 8015f7c:	4413      	add	r3, r2
 8015f7e:	00db      	lsls	r3, r3, #3
 8015f80:	440b      	add	r3, r1
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d021      	beq.n	8015fcc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015f88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f8c:	4915      	ldr	r1, [pc, #84]	; (8015fe4 <etharp_update_arp_entry+0x148>)
 8015f8e:	4613      	mov	r3, r2
 8015f90:	005b      	lsls	r3, r3, #1
 8015f92:	4413      	add	r3, r2
 8015f94:	00db      	lsls	r3, r3, #3
 8015f96:	440b      	add	r3, r1
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015f9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015fa0:	4910      	ldr	r1, [pc, #64]	; (8015fe4 <etharp_update_arp_entry+0x148>)
 8015fa2:	4613      	mov	r3, r2
 8015fa4:	005b      	lsls	r3, r3, #1
 8015fa6:	4413      	add	r3, r2
 8015fa8:	00db      	lsls	r3, r3, #3
 8015faa:	440b      	add	r3, r1
 8015fac:	2200      	movs	r2, #0
 8015fae:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015fb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015fba:	9300      	str	r3, [sp, #0]
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	6939      	ldr	r1, [r7, #16]
 8015fc0:	68f8      	ldr	r0, [r7, #12]
 8015fc2:	f002 f8c1 	bl	8018148 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015fc6:	6938      	ldr	r0, [r7, #16]
 8015fc8:	f7f8 fd58 	bl	800ea7c <pbuf_free>
  }
  return ERR_OK;
 8015fcc:	2300      	movs	r3, #0
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	3718      	adds	r7, #24
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
 8015fd6:	bf00      	nop
 8015fd8:	08021800 	.word	0x08021800
 8015fdc:	080218f8 	.word	0x080218f8
 8015fe0:	08021878 	.word	0x08021878
 8015fe4:	2001141c 	.word	0x2001141c

08015fe8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b084      	sub	sp, #16
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	60fb      	str	r3, [r7, #12]
 8015ff4:	e01e      	b.n	8016034 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015ff6:	4913      	ldr	r1, [pc, #76]	; (8016044 <etharp_cleanup_netif+0x5c>)
 8015ff8:	68fa      	ldr	r2, [r7, #12]
 8015ffa:	4613      	mov	r3, r2
 8015ffc:	005b      	lsls	r3, r3, #1
 8015ffe:	4413      	add	r3, r2
 8016000:	00db      	lsls	r3, r3, #3
 8016002:	440b      	add	r3, r1
 8016004:	3314      	adds	r3, #20
 8016006:	781b      	ldrb	r3, [r3, #0]
 8016008:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801600a:	7afb      	ldrb	r3, [r7, #11]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d00e      	beq.n	801602e <etharp_cleanup_netif+0x46>
 8016010:	490c      	ldr	r1, [pc, #48]	; (8016044 <etharp_cleanup_netif+0x5c>)
 8016012:	68fa      	ldr	r2, [r7, #12]
 8016014:	4613      	mov	r3, r2
 8016016:	005b      	lsls	r3, r3, #1
 8016018:	4413      	add	r3, r2
 801601a:	00db      	lsls	r3, r3, #3
 801601c:	440b      	add	r3, r1
 801601e:	3308      	adds	r3, #8
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	429a      	cmp	r2, r3
 8016026:	d102      	bne.n	801602e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016028:	68f8      	ldr	r0, [r7, #12]
 801602a:	f7ff fce5 	bl	80159f8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	3301      	adds	r3, #1
 8016032:	60fb      	str	r3, [r7, #12]
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	2b09      	cmp	r3, #9
 8016038:	dddd      	ble.n	8015ff6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801603a:	bf00      	nop
 801603c:	bf00      	nop
 801603e:	3710      	adds	r7, #16
 8016040:	46bd      	mov	sp, r7
 8016042:	bd80      	pop	{r7, pc}
 8016044:	2001141c 	.word	0x2001141c

08016048 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016048:	b5b0      	push	{r4, r5, r7, lr}
 801604a:	b08a      	sub	sp, #40	; 0x28
 801604c:	af04      	add	r7, sp, #16
 801604e:	6078      	str	r0, [r7, #4]
 8016050:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016052:	683b      	ldr	r3, [r7, #0]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d107      	bne.n	8016068 <etharp_input+0x20>
 8016058:	4b3d      	ldr	r3, [pc, #244]	; (8016150 <etharp_input+0x108>)
 801605a:	f240 228a 	movw	r2, #650	; 0x28a
 801605e:	493d      	ldr	r1, [pc, #244]	; (8016154 <etharp_input+0x10c>)
 8016060:	483d      	ldr	r0, [pc, #244]	; (8016158 <etharp_input+0x110>)
 8016062:	f007 fb85 	bl	801d770 <iprintf>
 8016066:	e06f      	b.n	8016148 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	685b      	ldr	r3, [r3, #4]
 801606c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801606e:	693b      	ldr	r3, [r7, #16]
 8016070:	881b      	ldrh	r3, [r3, #0]
 8016072:	b29b      	uxth	r3, r3
 8016074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016078:	d10c      	bne.n	8016094 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801607a:	693b      	ldr	r3, [r7, #16]
 801607c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801607e:	2b06      	cmp	r3, #6
 8016080:	d108      	bne.n	8016094 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016082:	693b      	ldr	r3, [r7, #16]
 8016084:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016086:	2b04      	cmp	r3, #4
 8016088:	d104      	bne.n	8016094 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801608a:	693b      	ldr	r3, [r7, #16]
 801608c:	885b      	ldrh	r3, [r3, #2]
 801608e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016090:	2b08      	cmp	r3, #8
 8016092:	d003      	beq.n	801609c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f7f8 fcf1 	bl	800ea7c <pbuf_free>
    return;
 801609a:	e055      	b.n	8016148 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801609c:	693b      	ldr	r3, [r7, #16]
 801609e:	330e      	adds	r3, #14
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80160a4:	693b      	ldr	r3, [r7, #16]
 80160a6:	3318      	adds	r3, #24
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80160ac:	683b      	ldr	r3, [r7, #0]
 80160ae:	3304      	adds	r3, #4
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d102      	bne.n	80160bc <etharp_input+0x74>
    for_us = 0;
 80160b6:	2300      	movs	r3, #0
 80160b8:	75fb      	strb	r3, [r7, #23]
 80160ba:	e009      	b.n	80160d0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80160bc:	68ba      	ldr	r2, [r7, #8]
 80160be:	683b      	ldr	r3, [r7, #0]
 80160c0:	3304      	adds	r3, #4
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	429a      	cmp	r2, r3
 80160c6:	bf0c      	ite	eq
 80160c8:	2301      	moveq	r3, #1
 80160ca:	2300      	movne	r3, #0
 80160cc:	b2db      	uxtb	r3, r3
 80160ce:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80160d0:	693b      	ldr	r3, [r7, #16]
 80160d2:	f103 0208 	add.w	r2, r3, #8
 80160d6:	7dfb      	ldrb	r3, [r7, #23]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d001      	beq.n	80160e0 <etharp_input+0x98>
 80160dc:	2301      	movs	r3, #1
 80160de:	e000      	b.n	80160e2 <etharp_input+0x9a>
 80160e0:	2302      	movs	r3, #2
 80160e2:	f107 010c 	add.w	r1, r7, #12
 80160e6:	6838      	ldr	r0, [r7, #0]
 80160e8:	f7ff fed8 	bl	8015e9c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80160ec:	693b      	ldr	r3, [r7, #16]
 80160ee:	88db      	ldrh	r3, [r3, #6]
 80160f0:	b29b      	uxth	r3, r3
 80160f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80160f6:	d003      	beq.n	8016100 <etharp_input+0xb8>
 80160f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80160fc:	d01e      	beq.n	801613c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80160fe:	e020      	b.n	8016142 <etharp_input+0xfa>
      if (for_us) {
 8016100:	7dfb      	ldrb	r3, [r7, #23]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d01c      	beq.n	8016140 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016106:	683b      	ldr	r3, [r7, #0]
 8016108:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801610c:	693b      	ldr	r3, [r7, #16]
 801610e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016112:	683b      	ldr	r3, [r7, #0]
 8016114:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8016118:	683b      	ldr	r3, [r7, #0]
 801611a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801611c:	693a      	ldr	r2, [r7, #16]
 801611e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016120:	2102      	movs	r1, #2
 8016122:	9103      	str	r1, [sp, #12]
 8016124:	f107 010c 	add.w	r1, r7, #12
 8016128:	9102      	str	r1, [sp, #8]
 801612a:	9201      	str	r2, [sp, #4]
 801612c:	9300      	str	r3, [sp, #0]
 801612e:	462b      	mov	r3, r5
 8016130:	4622      	mov	r2, r4
 8016132:	4601      	mov	r1, r0
 8016134:	6838      	ldr	r0, [r7, #0]
 8016136:	f000 faeb 	bl	8016710 <etharp_raw>
      break;
 801613a:	e001      	b.n	8016140 <etharp_input+0xf8>
      break;
 801613c:	bf00      	nop
 801613e:	e000      	b.n	8016142 <etharp_input+0xfa>
      break;
 8016140:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016142:	6878      	ldr	r0, [r7, #4]
 8016144:	f7f8 fc9a 	bl	800ea7c <pbuf_free>
}
 8016148:	3718      	adds	r7, #24
 801614a:	46bd      	mov	sp, r7
 801614c:	bdb0      	pop	{r4, r5, r7, pc}
 801614e:	bf00      	nop
 8016150:	08021800 	.word	0x08021800
 8016154:	08021950 	.word	0x08021950
 8016158:	08021878 	.word	0x08021878

0801615c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b086      	sub	sp, #24
 8016160:	af02      	add	r7, sp, #8
 8016162:	60f8      	str	r0, [r7, #12]
 8016164:	60b9      	str	r1, [r7, #8]
 8016166:	4613      	mov	r3, r2
 8016168:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801616a:	79fa      	ldrb	r2, [r7, #7]
 801616c:	4944      	ldr	r1, [pc, #272]	; (8016280 <etharp_output_to_arp_index+0x124>)
 801616e:	4613      	mov	r3, r2
 8016170:	005b      	lsls	r3, r3, #1
 8016172:	4413      	add	r3, r2
 8016174:	00db      	lsls	r3, r3, #3
 8016176:	440b      	add	r3, r1
 8016178:	3314      	adds	r3, #20
 801617a:	781b      	ldrb	r3, [r3, #0]
 801617c:	2b01      	cmp	r3, #1
 801617e:	d806      	bhi.n	801618e <etharp_output_to_arp_index+0x32>
 8016180:	4b40      	ldr	r3, [pc, #256]	; (8016284 <etharp_output_to_arp_index+0x128>)
 8016182:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016186:	4940      	ldr	r1, [pc, #256]	; (8016288 <etharp_output_to_arp_index+0x12c>)
 8016188:	4840      	ldr	r0, [pc, #256]	; (801628c <etharp_output_to_arp_index+0x130>)
 801618a:	f007 faf1 	bl	801d770 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801618e:	79fa      	ldrb	r2, [r7, #7]
 8016190:	493b      	ldr	r1, [pc, #236]	; (8016280 <etharp_output_to_arp_index+0x124>)
 8016192:	4613      	mov	r3, r2
 8016194:	005b      	lsls	r3, r3, #1
 8016196:	4413      	add	r3, r2
 8016198:	00db      	lsls	r3, r3, #3
 801619a:	440b      	add	r3, r1
 801619c:	3314      	adds	r3, #20
 801619e:	781b      	ldrb	r3, [r3, #0]
 80161a0:	2b02      	cmp	r3, #2
 80161a2:	d153      	bne.n	801624c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80161a4:	79fa      	ldrb	r2, [r7, #7]
 80161a6:	4936      	ldr	r1, [pc, #216]	; (8016280 <etharp_output_to_arp_index+0x124>)
 80161a8:	4613      	mov	r3, r2
 80161aa:	005b      	lsls	r3, r3, #1
 80161ac:	4413      	add	r3, r2
 80161ae:	00db      	lsls	r3, r3, #3
 80161b0:	440b      	add	r3, r1
 80161b2:	3312      	adds	r3, #18
 80161b4:	881b      	ldrh	r3, [r3, #0]
 80161b6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80161ba:	d919      	bls.n	80161f0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80161bc:	79fa      	ldrb	r2, [r7, #7]
 80161be:	4613      	mov	r3, r2
 80161c0:	005b      	lsls	r3, r3, #1
 80161c2:	4413      	add	r3, r2
 80161c4:	00db      	lsls	r3, r3, #3
 80161c6:	4a2e      	ldr	r2, [pc, #184]	; (8016280 <etharp_output_to_arp_index+0x124>)
 80161c8:	4413      	add	r3, r2
 80161ca:	3304      	adds	r3, #4
 80161cc:	4619      	mov	r1, r3
 80161ce:	68f8      	ldr	r0, [r7, #12]
 80161d0:	f000 fb4c 	bl	801686c <etharp_request>
 80161d4:	4603      	mov	r3, r0
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d138      	bne.n	801624c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80161da:	79fa      	ldrb	r2, [r7, #7]
 80161dc:	4928      	ldr	r1, [pc, #160]	; (8016280 <etharp_output_to_arp_index+0x124>)
 80161de:	4613      	mov	r3, r2
 80161e0:	005b      	lsls	r3, r3, #1
 80161e2:	4413      	add	r3, r2
 80161e4:	00db      	lsls	r3, r3, #3
 80161e6:	440b      	add	r3, r1
 80161e8:	3314      	adds	r3, #20
 80161ea:	2203      	movs	r2, #3
 80161ec:	701a      	strb	r2, [r3, #0]
 80161ee:	e02d      	b.n	801624c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80161f0:	79fa      	ldrb	r2, [r7, #7]
 80161f2:	4923      	ldr	r1, [pc, #140]	; (8016280 <etharp_output_to_arp_index+0x124>)
 80161f4:	4613      	mov	r3, r2
 80161f6:	005b      	lsls	r3, r3, #1
 80161f8:	4413      	add	r3, r2
 80161fa:	00db      	lsls	r3, r3, #3
 80161fc:	440b      	add	r3, r1
 80161fe:	3312      	adds	r3, #18
 8016200:	881b      	ldrh	r3, [r3, #0]
 8016202:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016206:	d321      	bcc.n	801624c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016208:	79fa      	ldrb	r2, [r7, #7]
 801620a:	4613      	mov	r3, r2
 801620c:	005b      	lsls	r3, r3, #1
 801620e:	4413      	add	r3, r2
 8016210:	00db      	lsls	r3, r3, #3
 8016212:	4a1b      	ldr	r2, [pc, #108]	; (8016280 <etharp_output_to_arp_index+0x124>)
 8016214:	4413      	add	r3, r2
 8016216:	1d19      	adds	r1, r3, #4
 8016218:	79fa      	ldrb	r2, [r7, #7]
 801621a:	4613      	mov	r3, r2
 801621c:	005b      	lsls	r3, r3, #1
 801621e:	4413      	add	r3, r2
 8016220:	00db      	lsls	r3, r3, #3
 8016222:	3308      	adds	r3, #8
 8016224:	4a16      	ldr	r2, [pc, #88]	; (8016280 <etharp_output_to_arp_index+0x124>)
 8016226:	4413      	add	r3, r2
 8016228:	3304      	adds	r3, #4
 801622a:	461a      	mov	r2, r3
 801622c:	68f8      	ldr	r0, [r7, #12]
 801622e:	f000 fafb 	bl	8016828 <etharp_request_dst>
 8016232:	4603      	mov	r3, r0
 8016234:	2b00      	cmp	r3, #0
 8016236:	d109      	bne.n	801624c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016238:	79fa      	ldrb	r2, [r7, #7]
 801623a:	4911      	ldr	r1, [pc, #68]	; (8016280 <etharp_output_to_arp_index+0x124>)
 801623c:	4613      	mov	r3, r2
 801623e:	005b      	lsls	r3, r3, #1
 8016240:	4413      	add	r3, r2
 8016242:	00db      	lsls	r3, r3, #3
 8016244:	440b      	add	r3, r1
 8016246:	3314      	adds	r3, #20
 8016248:	2203      	movs	r2, #3
 801624a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8016252:	79fa      	ldrb	r2, [r7, #7]
 8016254:	4613      	mov	r3, r2
 8016256:	005b      	lsls	r3, r3, #1
 8016258:	4413      	add	r3, r2
 801625a:	00db      	lsls	r3, r3, #3
 801625c:	3308      	adds	r3, #8
 801625e:	4a08      	ldr	r2, [pc, #32]	; (8016280 <etharp_output_to_arp_index+0x124>)
 8016260:	4413      	add	r3, r2
 8016262:	3304      	adds	r3, #4
 8016264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016268:	9200      	str	r2, [sp, #0]
 801626a:	460a      	mov	r2, r1
 801626c:	68b9      	ldr	r1, [r7, #8]
 801626e:	68f8      	ldr	r0, [r7, #12]
 8016270:	f001 ff6a 	bl	8018148 <ethernet_output>
 8016274:	4603      	mov	r3, r0
}
 8016276:	4618      	mov	r0, r3
 8016278:	3710      	adds	r7, #16
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}
 801627e:	bf00      	nop
 8016280:	2001141c 	.word	0x2001141c
 8016284:	08021800 	.word	0x08021800
 8016288:	08021970 	.word	0x08021970
 801628c:	08021878 	.word	0x08021878

08016290 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b08a      	sub	sp, #40	; 0x28
 8016294:	af02      	add	r7, sp, #8
 8016296:	60f8      	str	r0, [r7, #12]
 8016298:	60b9      	str	r1, [r7, #8]
 801629a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d106      	bne.n	80162b4 <etharp_output+0x24>
 80162a6:	4b73      	ldr	r3, [pc, #460]	; (8016474 <etharp_output+0x1e4>)
 80162a8:	f240 321e 	movw	r2, #798	; 0x31e
 80162ac:	4972      	ldr	r1, [pc, #456]	; (8016478 <etharp_output+0x1e8>)
 80162ae:	4873      	ldr	r0, [pc, #460]	; (801647c <etharp_output+0x1ec>)
 80162b0:	f007 fa5e 	bl	801d770 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80162b4:	68bb      	ldr	r3, [r7, #8]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d106      	bne.n	80162c8 <etharp_output+0x38>
 80162ba:	4b6e      	ldr	r3, [pc, #440]	; (8016474 <etharp_output+0x1e4>)
 80162bc:	f240 321f 	movw	r2, #799	; 0x31f
 80162c0:	496f      	ldr	r1, [pc, #444]	; (8016480 <etharp_output+0x1f0>)
 80162c2:	486e      	ldr	r0, [pc, #440]	; (801647c <etharp_output+0x1ec>)
 80162c4:	f007 fa54 	bl	801d770 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d106      	bne.n	80162dc <etharp_output+0x4c>
 80162ce:	4b69      	ldr	r3, [pc, #420]	; (8016474 <etharp_output+0x1e4>)
 80162d0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80162d4:	496b      	ldr	r1, [pc, #428]	; (8016484 <etharp_output+0x1f4>)
 80162d6:	4869      	ldr	r0, [pc, #420]	; (801647c <etharp_output+0x1ec>)
 80162d8:	f007 fa4a 	bl	801d770 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	68f9      	ldr	r1, [r7, #12]
 80162e2:	4618      	mov	r0, r3
 80162e4:	f000 fef8 	bl	80170d8 <ip4_addr_isbroadcast_u32>
 80162e8:	4603      	mov	r3, r0
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d002      	beq.n	80162f4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80162ee:	4b66      	ldr	r3, [pc, #408]	; (8016488 <etharp_output+0x1f8>)
 80162f0:	61fb      	str	r3, [r7, #28]
 80162f2:	e0af      	b.n	8016454 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80162fc:	2be0      	cmp	r3, #224	; 0xe0
 80162fe:	d118      	bne.n	8016332 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016300:	2301      	movs	r3, #1
 8016302:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016304:	2300      	movs	r3, #0
 8016306:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016308:	235e      	movs	r3, #94	; 0x5e
 801630a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	3301      	adds	r3, #1
 8016310:	781b      	ldrb	r3, [r3, #0]
 8016312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016316:	b2db      	uxtb	r3, r3
 8016318:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	3302      	adds	r3, #2
 801631e:	781b      	ldrb	r3, [r3, #0]
 8016320:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	3303      	adds	r3, #3
 8016326:	781b      	ldrb	r3, [r3, #0]
 8016328:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801632a:	f107 0310 	add.w	r3, r7, #16
 801632e:	61fb      	str	r3, [r7, #28]
 8016330:	e090      	b.n	8016454 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	681a      	ldr	r2, [r3, #0]
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	3304      	adds	r3, #4
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	405a      	eors	r2, r3
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	3308      	adds	r3, #8
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	4013      	ands	r3, r2
 8016346:	2b00      	cmp	r3, #0
 8016348:	d012      	beq.n	8016370 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016350:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016354:	4293      	cmp	r3, r2
 8016356:	d00b      	beq.n	8016370 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	330c      	adds	r3, #12
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d003      	beq.n	801636a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	330c      	adds	r3, #12
 8016366:	61bb      	str	r3, [r7, #24]
 8016368:	e002      	b.n	8016370 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801636a:	f06f 0303 	mvn.w	r3, #3
 801636e:	e07d      	b.n	801646c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016370:	4b46      	ldr	r3, [pc, #280]	; (801648c <etharp_output+0x1fc>)
 8016372:	781b      	ldrb	r3, [r3, #0]
 8016374:	4619      	mov	r1, r3
 8016376:	4a46      	ldr	r2, [pc, #280]	; (8016490 <etharp_output+0x200>)
 8016378:	460b      	mov	r3, r1
 801637a:	005b      	lsls	r3, r3, #1
 801637c:	440b      	add	r3, r1
 801637e:	00db      	lsls	r3, r3, #3
 8016380:	4413      	add	r3, r2
 8016382:	3314      	adds	r3, #20
 8016384:	781b      	ldrb	r3, [r3, #0]
 8016386:	2b01      	cmp	r3, #1
 8016388:	d925      	bls.n	80163d6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801638a:	4b40      	ldr	r3, [pc, #256]	; (801648c <etharp_output+0x1fc>)
 801638c:	781b      	ldrb	r3, [r3, #0]
 801638e:	4619      	mov	r1, r3
 8016390:	4a3f      	ldr	r2, [pc, #252]	; (8016490 <etharp_output+0x200>)
 8016392:	460b      	mov	r3, r1
 8016394:	005b      	lsls	r3, r3, #1
 8016396:	440b      	add	r3, r1
 8016398:	00db      	lsls	r3, r3, #3
 801639a:	4413      	add	r3, r2
 801639c:	3308      	adds	r3, #8
 801639e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80163a0:	68fa      	ldr	r2, [r7, #12]
 80163a2:	429a      	cmp	r2, r3
 80163a4:	d117      	bne.n	80163d6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80163a6:	69bb      	ldr	r3, [r7, #24]
 80163a8:	681a      	ldr	r2, [r3, #0]
 80163aa:	4b38      	ldr	r3, [pc, #224]	; (801648c <etharp_output+0x1fc>)
 80163ac:	781b      	ldrb	r3, [r3, #0]
 80163ae:	4618      	mov	r0, r3
 80163b0:	4937      	ldr	r1, [pc, #220]	; (8016490 <etharp_output+0x200>)
 80163b2:	4603      	mov	r3, r0
 80163b4:	005b      	lsls	r3, r3, #1
 80163b6:	4403      	add	r3, r0
 80163b8:	00db      	lsls	r3, r3, #3
 80163ba:	440b      	add	r3, r1
 80163bc:	3304      	adds	r3, #4
 80163be:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80163c0:	429a      	cmp	r2, r3
 80163c2:	d108      	bne.n	80163d6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80163c4:	4b31      	ldr	r3, [pc, #196]	; (801648c <etharp_output+0x1fc>)
 80163c6:	781b      	ldrb	r3, [r3, #0]
 80163c8:	461a      	mov	r2, r3
 80163ca:	68b9      	ldr	r1, [r7, #8]
 80163cc:	68f8      	ldr	r0, [r7, #12]
 80163ce:	f7ff fec5 	bl	801615c <etharp_output_to_arp_index>
 80163d2:	4603      	mov	r3, r0
 80163d4:	e04a      	b.n	801646c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80163d6:	2300      	movs	r3, #0
 80163d8:	75fb      	strb	r3, [r7, #23]
 80163da:	e031      	b.n	8016440 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80163dc:	7dfa      	ldrb	r2, [r7, #23]
 80163de:	492c      	ldr	r1, [pc, #176]	; (8016490 <etharp_output+0x200>)
 80163e0:	4613      	mov	r3, r2
 80163e2:	005b      	lsls	r3, r3, #1
 80163e4:	4413      	add	r3, r2
 80163e6:	00db      	lsls	r3, r3, #3
 80163e8:	440b      	add	r3, r1
 80163ea:	3314      	adds	r3, #20
 80163ec:	781b      	ldrb	r3, [r3, #0]
 80163ee:	2b01      	cmp	r3, #1
 80163f0:	d923      	bls.n	801643a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80163f2:	7dfa      	ldrb	r2, [r7, #23]
 80163f4:	4926      	ldr	r1, [pc, #152]	; (8016490 <etharp_output+0x200>)
 80163f6:	4613      	mov	r3, r2
 80163f8:	005b      	lsls	r3, r3, #1
 80163fa:	4413      	add	r3, r2
 80163fc:	00db      	lsls	r3, r3, #3
 80163fe:	440b      	add	r3, r1
 8016400:	3308      	adds	r3, #8
 8016402:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016404:	68fa      	ldr	r2, [r7, #12]
 8016406:	429a      	cmp	r2, r3
 8016408:	d117      	bne.n	801643a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801640a:	69bb      	ldr	r3, [r7, #24]
 801640c:	6819      	ldr	r1, [r3, #0]
 801640e:	7dfa      	ldrb	r2, [r7, #23]
 8016410:	481f      	ldr	r0, [pc, #124]	; (8016490 <etharp_output+0x200>)
 8016412:	4613      	mov	r3, r2
 8016414:	005b      	lsls	r3, r3, #1
 8016416:	4413      	add	r3, r2
 8016418:	00db      	lsls	r3, r3, #3
 801641a:	4403      	add	r3, r0
 801641c:	3304      	adds	r3, #4
 801641e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016420:	4299      	cmp	r1, r3
 8016422:	d10a      	bne.n	801643a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016424:	4a19      	ldr	r2, [pc, #100]	; (801648c <etharp_output+0x1fc>)
 8016426:	7dfb      	ldrb	r3, [r7, #23]
 8016428:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801642a:	7dfb      	ldrb	r3, [r7, #23]
 801642c:	461a      	mov	r2, r3
 801642e:	68b9      	ldr	r1, [r7, #8]
 8016430:	68f8      	ldr	r0, [r7, #12]
 8016432:	f7ff fe93 	bl	801615c <etharp_output_to_arp_index>
 8016436:	4603      	mov	r3, r0
 8016438:	e018      	b.n	801646c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801643a:	7dfb      	ldrb	r3, [r7, #23]
 801643c:	3301      	adds	r3, #1
 801643e:	75fb      	strb	r3, [r7, #23]
 8016440:	7dfb      	ldrb	r3, [r7, #23]
 8016442:	2b09      	cmp	r3, #9
 8016444:	d9ca      	bls.n	80163dc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016446:	68ba      	ldr	r2, [r7, #8]
 8016448:	69b9      	ldr	r1, [r7, #24]
 801644a:	68f8      	ldr	r0, [r7, #12]
 801644c:	f000 f822 	bl	8016494 <etharp_query>
 8016450:	4603      	mov	r3, r0
 8016452:	e00b      	b.n	801646c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801645a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801645e:	9300      	str	r3, [sp, #0]
 8016460:	69fb      	ldr	r3, [r7, #28]
 8016462:	68b9      	ldr	r1, [r7, #8]
 8016464:	68f8      	ldr	r0, [r7, #12]
 8016466:	f001 fe6f 	bl	8018148 <ethernet_output>
 801646a:	4603      	mov	r3, r0
}
 801646c:	4618      	mov	r0, r3
 801646e:	3720      	adds	r7, #32
 8016470:	46bd      	mov	sp, r7
 8016472:	bd80      	pop	{r7, pc}
 8016474:	08021800 	.word	0x08021800
 8016478:	08021950 	.word	0x08021950
 801647c:	08021878 	.word	0x08021878
 8016480:	080219a0 	.word	0x080219a0
 8016484:	08021940 	.word	0x08021940
 8016488:	0802239c 	.word	0x0802239c
 801648c:	2001150c 	.word	0x2001150c
 8016490:	2001141c 	.word	0x2001141c

08016494 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b08c      	sub	sp, #48	; 0x30
 8016498:	af02      	add	r7, sp, #8
 801649a:	60f8      	str	r0, [r7, #12]
 801649c:	60b9      	str	r1, [r7, #8]
 801649e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	3326      	adds	r3, #38	; 0x26
 80164a4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80164a6:	23ff      	movs	r3, #255	; 0xff
 80164a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80164ac:	2300      	movs	r3, #0
 80164ae:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80164b0:	68bb      	ldr	r3, [r7, #8]
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	68f9      	ldr	r1, [r7, #12]
 80164b6:	4618      	mov	r0, r3
 80164b8:	f000 fe0e 	bl	80170d8 <ip4_addr_isbroadcast_u32>
 80164bc:	4603      	mov	r3, r0
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d10c      	bne.n	80164dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80164c2:	68bb      	ldr	r3, [r7, #8]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80164ca:	2be0      	cmp	r3, #224	; 0xe0
 80164cc:	d006      	beq.n	80164dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80164ce:	68bb      	ldr	r3, [r7, #8]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d003      	beq.n	80164dc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80164d4:	68bb      	ldr	r3, [r7, #8]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d102      	bne.n	80164e2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80164dc:	f06f 030f 	mvn.w	r3, #15
 80164e0:	e101      	b.n	80166e6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80164e2:	68fa      	ldr	r2, [r7, #12]
 80164e4:	2101      	movs	r1, #1
 80164e6:	68b8      	ldr	r0, [r7, #8]
 80164e8:	f7ff fb60 	bl	8015bac <etharp_find_entry>
 80164ec:	4603      	mov	r3, r0
 80164ee:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80164f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	da02      	bge.n	80164fe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80164f8:	8a7b      	ldrh	r3, [r7, #18]
 80164fa:	b25b      	sxtb	r3, r3
 80164fc:	e0f3      	b.n	80166e6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80164fe:	8a7b      	ldrh	r3, [r7, #18]
 8016500:	2b7e      	cmp	r3, #126	; 0x7e
 8016502:	d906      	bls.n	8016512 <etharp_query+0x7e>
 8016504:	4b7a      	ldr	r3, [pc, #488]	; (80166f0 <etharp_query+0x25c>)
 8016506:	f240 32c1 	movw	r2, #961	; 0x3c1
 801650a:	497a      	ldr	r1, [pc, #488]	; (80166f4 <etharp_query+0x260>)
 801650c:	487a      	ldr	r0, [pc, #488]	; (80166f8 <etharp_query+0x264>)
 801650e:	f007 f92f 	bl	801d770 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016512:	8a7b      	ldrh	r3, [r7, #18]
 8016514:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016516:	7c7a      	ldrb	r2, [r7, #17]
 8016518:	4978      	ldr	r1, [pc, #480]	; (80166fc <etharp_query+0x268>)
 801651a:	4613      	mov	r3, r2
 801651c:	005b      	lsls	r3, r3, #1
 801651e:	4413      	add	r3, r2
 8016520:	00db      	lsls	r3, r3, #3
 8016522:	440b      	add	r3, r1
 8016524:	3314      	adds	r3, #20
 8016526:	781b      	ldrb	r3, [r3, #0]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d115      	bne.n	8016558 <etharp_query+0xc4>
    is_new_entry = 1;
 801652c:	2301      	movs	r3, #1
 801652e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016530:	7c7a      	ldrb	r2, [r7, #17]
 8016532:	4972      	ldr	r1, [pc, #456]	; (80166fc <etharp_query+0x268>)
 8016534:	4613      	mov	r3, r2
 8016536:	005b      	lsls	r3, r3, #1
 8016538:	4413      	add	r3, r2
 801653a:	00db      	lsls	r3, r3, #3
 801653c:	440b      	add	r3, r1
 801653e:	3314      	adds	r3, #20
 8016540:	2201      	movs	r2, #1
 8016542:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016544:	7c7a      	ldrb	r2, [r7, #17]
 8016546:	496d      	ldr	r1, [pc, #436]	; (80166fc <etharp_query+0x268>)
 8016548:	4613      	mov	r3, r2
 801654a:	005b      	lsls	r3, r3, #1
 801654c:	4413      	add	r3, r2
 801654e:	00db      	lsls	r3, r3, #3
 8016550:	440b      	add	r3, r1
 8016552:	3308      	adds	r3, #8
 8016554:	68fa      	ldr	r2, [r7, #12]
 8016556:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016558:	7c7a      	ldrb	r2, [r7, #17]
 801655a:	4968      	ldr	r1, [pc, #416]	; (80166fc <etharp_query+0x268>)
 801655c:	4613      	mov	r3, r2
 801655e:	005b      	lsls	r3, r3, #1
 8016560:	4413      	add	r3, r2
 8016562:	00db      	lsls	r3, r3, #3
 8016564:	440b      	add	r3, r1
 8016566:	3314      	adds	r3, #20
 8016568:	781b      	ldrb	r3, [r3, #0]
 801656a:	2b01      	cmp	r3, #1
 801656c:	d011      	beq.n	8016592 <etharp_query+0xfe>
 801656e:	7c7a      	ldrb	r2, [r7, #17]
 8016570:	4962      	ldr	r1, [pc, #392]	; (80166fc <etharp_query+0x268>)
 8016572:	4613      	mov	r3, r2
 8016574:	005b      	lsls	r3, r3, #1
 8016576:	4413      	add	r3, r2
 8016578:	00db      	lsls	r3, r3, #3
 801657a:	440b      	add	r3, r1
 801657c:	3314      	adds	r3, #20
 801657e:	781b      	ldrb	r3, [r3, #0]
 8016580:	2b01      	cmp	r3, #1
 8016582:	d806      	bhi.n	8016592 <etharp_query+0xfe>
 8016584:	4b5a      	ldr	r3, [pc, #360]	; (80166f0 <etharp_query+0x25c>)
 8016586:	f240 32cd 	movw	r2, #973	; 0x3cd
 801658a:	495d      	ldr	r1, [pc, #372]	; (8016700 <etharp_query+0x26c>)
 801658c:	485a      	ldr	r0, [pc, #360]	; (80166f8 <etharp_query+0x264>)
 801658e:	f007 f8ef 	bl	801d770 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016592:	6a3b      	ldr	r3, [r7, #32]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d102      	bne.n	801659e <etharp_query+0x10a>
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d10c      	bne.n	80165b8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801659e:	68b9      	ldr	r1, [r7, #8]
 80165a0:	68f8      	ldr	r0, [r7, #12]
 80165a2:	f000 f963 	bl	801686c <etharp_request>
 80165a6:	4603      	mov	r3, r0
 80165a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d102      	bne.n	80165b8 <etharp_query+0x124>
      return result;
 80165b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80165b6:	e096      	b.n	80166e6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d106      	bne.n	80165cc <etharp_query+0x138>
 80165be:	4b4c      	ldr	r3, [pc, #304]	; (80166f0 <etharp_query+0x25c>)
 80165c0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80165c4:	494f      	ldr	r1, [pc, #316]	; (8016704 <etharp_query+0x270>)
 80165c6:	484c      	ldr	r0, [pc, #304]	; (80166f8 <etharp_query+0x264>)
 80165c8:	f007 f8d2 	bl	801d770 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80165cc:	7c7a      	ldrb	r2, [r7, #17]
 80165ce:	494b      	ldr	r1, [pc, #300]	; (80166fc <etharp_query+0x268>)
 80165d0:	4613      	mov	r3, r2
 80165d2:	005b      	lsls	r3, r3, #1
 80165d4:	4413      	add	r3, r2
 80165d6:	00db      	lsls	r3, r3, #3
 80165d8:	440b      	add	r3, r1
 80165da:	3314      	adds	r3, #20
 80165dc:	781b      	ldrb	r3, [r3, #0]
 80165de:	2b01      	cmp	r3, #1
 80165e0:	d917      	bls.n	8016612 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80165e2:	4a49      	ldr	r2, [pc, #292]	; (8016708 <etharp_query+0x274>)
 80165e4:	7c7b      	ldrb	r3, [r7, #17]
 80165e6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80165e8:	7c7a      	ldrb	r2, [r7, #17]
 80165ea:	4613      	mov	r3, r2
 80165ec:	005b      	lsls	r3, r3, #1
 80165ee:	4413      	add	r3, r2
 80165f0:	00db      	lsls	r3, r3, #3
 80165f2:	3308      	adds	r3, #8
 80165f4:	4a41      	ldr	r2, [pc, #260]	; (80166fc <etharp_query+0x268>)
 80165f6:	4413      	add	r3, r2
 80165f8:	3304      	adds	r3, #4
 80165fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80165fe:	9200      	str	r2, [sp, #0]
 8016600:	697a      	ldr	r2, [r7, #20]
 8016602:	6879      	ldr	r1, [r7, #4]
 8016604:	68f8      	ldr	r0, [r7, #12]
 8016606:	f001 fd9f 	bl	8018148 <ethernet_output>
 801660a:	4603      	mov	r3, r0
 801660c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016610:	e067      	b.n	80166e2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016612:	7c7a      	ldrb	r2, [r7, #17]
 8016614:	4939      	ldr	r1, [pc, #228]	; (80166fc <etharp_query+0x268>)
 8016616:	4613      	mov	r3, r2
 8016618:	005b      	lsls	r3, r3, #1
 801661a:	4413      	add	r3, r2
 801661c:	00db      	lsls	r3, r3, #3
 801661e:	440b      	add	r3, r1
 8016620:	3314      	adds	r3, #20
 8016622:	781b      	ldrb	r3, [r3, #0]
 8016624:	2b01      	cmp	r3, #1
 8016626:	d15c      	bne.n	80166e2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016628:	2300      	movs	r3, #0
 801662a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016630:	e01c      	b.n	801666c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016632:	69fb      	ldr	r3, [r7, #28]
 8016634:	895a      	ldrh	r2, [r3, #10]
 8016636:	69fb      	ldr	r3, [r7, #28]
 8016638:	891b      	ldrh	r3, [r3, #8]
 801663a:	429a      	cmp	r2, r3
 801663c:	d10a      	bne.n	8016654 <etharp_query+0x1c0>
 801663e:	69fb      	ldr	r3, [r7, #28]
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d006      	beq.n	8016654 <etharp_query+0x1c0>
 8016646:	4b2a      	ldr	r3, [pc, #168]	; (80166f0 <etharp_query+0x25c>)
 8016648:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801664c:	492f      	ldr	r1, [pc, #188]	; (801670c <etharp_query+0x278>)
 801664e:	482a      	ldr	r0, [pc, #168]	; (80166f8 <etharp_query+0x264>)
 8016650:	f007 f88e 	bl	801d770 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016654:	69fb      	ldr	r3, [r7, #28]
 8016656:	7b1b      	ldrb	r3, [r3, #12]
 8016658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801665c:	2b00      	cmp	r3, #0
 801665e:	d002      	beq.n	8016666 <etharp_query+0x1d2>
        copy_needed = 1;
 8016660:	2301      	movs	r3, #1
 8016662:	61bb      	str	r3, [r7, #24]
        break;
 8016664:	e005      	b.n	8016672 <etharp_query+0x1de>
      }
      p = p->next;
 8016666:	69fb      	ldr	r3, [r7, #28]
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801666c:	69fb      	ldr	r3, [r7, #28]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d1df      	bne.n	8016632 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016672:	69bb      	ldr	r3, [r7, #24]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d007      	beq.n	8016688 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016678:	687a      	ldr	r2, [r7, #4]
 801667a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801667e:	200e      	movs	r0, #14
 8016680:	f7f8 fc64 	bl	800ef4c <pbuf_clone>
 8016684:	61f8      	str	r0, [r7, #28]
 8016686:	e004      	b.n	8016692 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801668c:	69f8      	ldr	r0, [r7, #28]
 801668e:	f7f8 fa9b 	bl	800ebc8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016692:	69fb      	ldr	r3, [r7, #28]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d021      	beq.n	80166dc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016698:	7c7a      	ldrb	r2, [r7, #17]
 801669a:	4918      	ldr	r1, [pc, #96]	; (80166fc <etharp_query+0x268>)
 801669c:	4613      	mov	r3, r2
 801669e:	005b      	lsls	r3, r3, #1
 80166a0:	4413      	add	r3, r2
 80166a2:	00db      	lsls	r3, r3, #3
 80166a4:	440b      	add	r3, r1
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d00a      	beq.n	80166c2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80166ac:	7c7a      	ldrb	r2, [r7, #17]
 80166ae:	4913      	ldr	r1, [pc, #76]	; (80166fc <etharp_query+0x268>)
 80166b0:	4613      	mov	r3, r2
 80166b2:	005b      	lsls	r3, r3, #1
 80166b4:	4413      	add	r3, r2
 80166b6:	00db      	lsls	r3, r3, #3
 80166b8:	440b      	add	r3, r1
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	4618      	mov	r0, r3
 80166be:	f7f8 f9dd 	bl	800ea7c <pbuf_free>
      }
      arp_table[i].q = p;
 80166c2:	7c7a      	ldrb	r2, [r7, #17]
 80166c4:	490d      	ldr	r1, [pc, #52]	; (80166fc <etharp_query+0x268>)
 80166c6:	4613      	mov	r3, r2
 80166c8:	005b      	lsls	r3, r3, #1
 80166ca:	4413      	add	r3, r2
 80166cc:	00db      	lsls	r3, r3, #3
 80166ce:	440b      	add	r3, r1
 80166d0:	69fa      	ldr	r2, [r7, #28]
 80166d2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80166d4:	2300      	movs	r3, #0
 80166d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80166da:	e002      	b.n	80166e2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80166dc:	23ff      	movs	r3, #255	; 0xff
 80166de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80166e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80166e6:	4618      	mov	r0, r3
 80166e8:	3728      	adds	r7, #40	; 0x28
 80166ea:	46bd      	mov	sp, r7
 80166ec:	bd80      	pop	{r7, pc}
 80166ee:	bf00      	nop
 80166f0:	08021800 	.word	0x08021800
 80166f4:	080219ac 	.word	0x080219ac
 80166f8:	08021878 	.word	0x08021878
 80166fc:	2001141c 	.word	0x2001141c
 8016700:	080219bc 	.word	0x080219bc
 8016704:	080219a0 	.word	0x080219a0
 8016708:	2001150c 	.word	0x2001150c
 801670c:	080219e4 	.word	0x080219e4

08016710 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016710:	b580      	push	{r7, lr}
 8016712:	b08a      	sub	sp, #40	; 0x28
 8016714:	af02      	add	r7, sp, #8
 8016716:	60f8      	str	r0, [r7, #12]
 8016718:	60b9      	str	r1, [r7, #8]
 801671a:	607a      	str	r2, [r7, #4]
 801671c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801671e:	2300      	movs	r3, #0
 8016720:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d106      	bne.n	8016736 <etharp_raw+0x26>
 8016728:	4b3a      	ldr	r3, [pc, #232]	; (8016814 <etharp_raw+0x104>)
 801672a:	f240 4257 	movw	r2, #1111	; 0x457
 801672e:	493a      	ldr	r1, [pc, #232]	; (8016818 <etharp_raw+0x108>)
 8016730:	483a      	ldr	r0, [pc, #232]	; (801681c <etharp_raw+0x10c>)
 8016732:	f007 f81d 	bl	801d770 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016736:	f44f 7220 	mov.w	r2, #640	; 0x280
 801673a:	211c      	movs	r1, #28
 801673c:	200e      	movs	r0, #14
 801673e:	f7f7 feb9 	bl	800e4b4 <pbuf_alloc>
 8016742:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016744:	69bb      	ldr	r3, [r7, #24]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d102      	bne.n	8016750 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801674a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801674e:	e05d      	b.n	801680c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016750:	69bb      	ldr	r3, [r7, #24]
 8016752:	895b      	ldrh	r3, [r3, #10]
 8016754:	2b1b      	cmp	r3, #27
 8016756:	d806      	bhi.n	8016766 <etharp_raw+0x56>
 8016758:	4b2e      	ldr	r3, [pc, #184]	; (8016814 <etharp_raw+0x104>)
 801675a:	f240 4262 	movw	r2, #1122	; 0x462
 801675e:	4930      	ldr	r1, [pc, #192]	; (8016820 <etharp_raw+0x110>)
 8016760:	482e      	ldr	r0, [pc, #184]	; (801681c <etharp_raw+0x10c>)
 8016762:	f007 f805 	bl	801d770 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016766:	69bb      	ldr	r3, [r7, #24]
 8016768:	685b      	ldr	r3, [r3, #4]
 801676a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801676c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801676e:	4618      	mov	r0, r3
 8016770:	f7f6 fd82 	bl	800d278 <lwip_htons>
 8016774:	4603      	mov	r3, r0
 8016776:	461a      	mov	r2, r3
 8016778:	697b      	ldr	r3, [r7, #20]
 801677a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016782:	2b06      	cmp	r3, #6
 8016784:	d006      	beq.n	8016794 <etharp_raw+0x84>
 8016786:	4b23      	ldr	r3, [pc, #140]	; (8016814 <etharp_raw+0x104>)
 8016788:	f240 4269 	movw	r2, #1129	; 0x469
 801678c:	4925      	ldr	r1, [pc, #148]	; (8016824 <etharp_raw+0x114>)
 801678e:	4823      	ldr	r0, [pc, #140]	; (801681c <etharp_raw+0x10c>)
 8016790:	f006 ffee 	bl	801d770 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016794:	697b      	ldr	r3, [r7, #20]
 8016796:	3308      	adds	r3, #8
 8016798:	2206      	movs	r2, #6
 801679a:	6839      	ldr	r1, [r7, #0]
 801679c:	4618      	mov	r0, r3
 801679e:	f006 ffd1 	bl	801d744 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80167a2:	697b      	ldr	r3, [r7, #20]
 80167a4:	3312      	adds	r3, #18
 80167a6:	2206      	movs	r2, #6
 80167a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80167aa:	4618      	mov	r0, r3
 80167ac:	f006 ffca 	bl	801d744 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80167b0:	697b      	ldr	r3, [r7, #20]
 80167b2:	330e      	adds	r3, #14
 80167b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80167b6:	6812      	ldr	r2, [r2, #0]
 80167b8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80167ba:	697b      	ldr	r3, [r7, #20]
 80167bc:	3318      	adds	r3, #24
 80167be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80167c0:	6812      	ldr	r2, [r2, #0]
 80167c2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80167c4:	697b      	ldr	r3, [r7, #20]
 80167c6:	2200      	movs	r2, #0
 80167c8:	701a      	strb	r2, [r3, #0]
 80167ca:	2200      	movs	r2, #0
 80167cc:	f042 0201 	orr.w	r2, r2, #1
 80167d0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80167d2:	697b      	ldr	r3, [r7, #20]
 80167d4:	2200      	movs	r2, #0
 80167d6:	f042 0208 	orr.w	r2, r2, #8
 80167da:	709a      	strb	r2, [r3, #2]
 80167dc:	2200      	movs	r2, #0
 80167de:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80167e0:	697b      	ldr	r3, [r7, #20]
 80167e2:	2206      	movs	r2, #6
 80167e4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80167e6:	697b      	ldr	r3, [r7, #20]
 80167e8:	2204      	movs	r2, #4
 80167ea:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80167ec:	f640 0306 	movw	r3, #2054	; 0x806
 80167f0:	9300      	str	r3, [sp, #0]
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	68ba      	ldr	r2, [r7, #8]
 80167f6:	69b9      	ldr	r1, [r7, #24]
 80167f8:	68f8      	ldr	r0, [r7, #12]
 80167fa:	f001 fca5 	bl	8018148 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80167fe:	69b8      	ldr	r0, [r7, #24]
 8016800:	f7f8 f93c 	bl	800ea7c <pbuf_free>
  p = NULL;
 8016804:	2300      	movs	r3, #0
 8016806:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016808:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801680c:	4618      	mov	r0, r3
 801680e:	3720      	adds	r7, #32
 8016810:	46bd      	mov	sp, r7
 8016812:	bd80      	pop	{r7, pc}
 8016814:	08021800 	.word	0x08021800
 8016818:	08021950 	.word	0x08021950
 801681c:	08021878 	.word	0x08021878
 8016820:	08021a00 	.word	0x08021a00
 8016824:	08021a34 	.word	0x08021a34

08016828 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016828:	b580      	push	{r7, lr}
 801682a:	b088      	sub	sp, #32
 801682c:	af04      	add	r7, sp, #16
 801682e:	60f8      	str	r0, [r7, #12]
 8016830:	60b9      	str	r1, [r7, #8]
 8016832:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016844:	2201      	movs	r2, #1
 8016846:	9203      	str	r2, [sp, #12]
 8016848:	68ba      	ldr	r2, [r7, #8]
 801684a:	9202      	str	r2, [sp, #8]
 801684c:	4a06      	ldr	r2, [pc, #24]	; (8016868 <etharp_request_dst+0x40>)
 801684e:	9201      	str	r2, [sp, #4]
 8016850:	9300      	str	r3, [sp, #0]
 8016852:	4603      	mov	r3, r0
 8016854:	687a      	ldr	r2, [r7, #4]
 8016856:	68f8      	ldr	r0, [r7, #12]
 8016858:	f7ff ff5a 	bl	8016710 <etharp_raw>
 801685c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801685e:	4618      	mov	r0, r3
 8016860:	3710      	adds	r7, #16
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}
 8016866:	bf00      	nop
 8016868:	080223a4 	.word	0x080223a4

0801686c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b082      	sub	sp, #8
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
 8016874:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016876:	4a05      	ldr	r2, [pc, #20]	; (801688c <etharp_request+0x20>)
 8016878:	6839      	ldr	r1, [r7, #0]
 801687a:	6878      	ldr	r0, [r7, #4]
 801687c:	f7ff ffd4 	bl	8016828 <etharp_request_dst>
 8016880:	4603      	mov	r3, r0
}
 8016882:	4618      	mov	r0, r3
 8016884:	3708      	adds	r7, #8
 8016886:	46bd      	mov	sp, r7
 8016888:	bd80      	pop	{r7, pc}
 801688a:	bf00      	nop
 801688c:	0802239c 	.word	0x0802239c

08016890 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016890:	b580      	push	{r7, lr}
 8016892:	b08e      	sub	sp, #56	; 0x38
 8016894:	af04      	add	r7, sp, #16
 8016896:	6078      	str	r0, [r7, #4]
 8016898:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801689a:	4b79      	ldr	r3, [pc, #484]	; (8016a80 <icmp_input+0x1f0>)
 801689c:	689b      	ldr	r3, [r3, #8]
 801689e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80168a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168a2:	781b      	ldrb	r3, [r3, #0]
 80168a4:	f003 030f 	and.w	r3, r3, #15
 80168a8:	b2db      	uxtb	r3, r3
 80168aa:	009b      	lsls	r3, r3, #2
 80168ac:	b2db      	uxtb	r3, r3
 80168ae:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80168b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80168b2:	2b13      	cmp	r3, #19
 80168b4:	f240 80cd 	bls.w	8016a52 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	895b      	ldrh	r3, [r3, #10]
 80168bc:	2b03      	cmp	r3, #3
 80168be:	f240 80ca 	bls.w	8016a56 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	685b      	ldr	r3, [r3, #4]
 80168c6:	781b      	ldrb	r3, [r3, #0]
 80168c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80168cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	f000 80b7 	beq.w	8016a44 <icmp_input+0x1b4>
 80168d6:	2b08      	cmp	r3, #8
 80168d8:	f040 80b7 	bne.w	8016a4a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80168dc:	4b69      	ldr	r3, [pc, #420]	; (8016a84 <icmp_input+0x1f4>)
 80168de:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80168e0:	4b67      	ldr	r3, [pc, #412]	; (8016a80 <icmp_input+0x1f0>)
 80168e2:	695b      	ldr	r3, [r3, #20]
 80168e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80168e8:	2be0      	cmp	r3, #224	; 0xe0
 80168ea:	f000 80bb 	beq.w	8016a64 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80168ee:	4b64      	ldr	r3, [pc, #400]	; (8016a80 <icmp_input+0x1f0>)
 80168f0:	695b      	ldr	r3, [r3, #20]
 80168f2:	4a63      	ldr	r2, [pc, #396]	; (8016a80 <icmp_input+0x1f0>)
 80168f4:	6812      	ldr	r2, [r2, #0]
 80168f6:	4611      	mov	r1, r2
 80168f8:	4618      	mov	r0, r3
 80168fa:	f000 fbed 	bl	80170d8 <ip4_addr_isbroadcast_u32>
 80168fe:	4603      	mov	r3, r0
 8016900:	2b00      	cmp	r3, #0
 8016902:	f040 80b1 	bne.w	8016a68 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	891b      	ldrh	r3, [r3, #8]
 801690a:	2b07      	cmp	r3, #7
 801690c:	f240 80a5 	bls.w	8016a5a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016910:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016912:	330e      	adds	r3, #14
 8016914:	4619      	mov	r1, r3
 8016916:	6878      	ldr	r0, [r7, #4]
 8016918:	f7f8 f81a 	bl	800e950 <pbuf_add_header>
 801691c:	4603      	mov	r3, r0
 801691e:	2b00      	cmp	r3, #0
 8016920:	d04b      	beq.n	80169ba <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	891a      	ldrh	r2, [r3, #8]
 8016926:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016928:	4413      	add	r3, r2
 801692a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	891b      	ldrh	r3, [r3, #8]
 8016930:	8b7a      	ldrh	r2, [r7, #26]
 8016932:	429a      	cmp	r2, r3
 8016934:	f0c0 809a 	bcc.w	8016a6c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016938:	8b7b      	ldrh	r3, [r7, #26]
 801693a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801693e:	4619      	mov	r1, r3
 8016940:	200e      	movs	r0, #14
 8016942:	f7f7 fdb7 	bl	800e4b4 <pbuf_alloc>
 8016946:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016948:	697b      	ldr	r3, [r7, #20]
 801694a:	2b00      	cmp	r3, #0
 801694c:	f000 8090 	beq.w	8016a70 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016950:	697b      	ldr	r3, [r7, #20]
 8016952:	895b      	ldrh	r3, [r3, #10]
 8016954:	461a      	mov	r2, r3
 8016956:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016958:	3308      	adds	r3, #8
 801695a:	429a      	cmp	r2, r3
 801695c:	d203      	bcs.n	8016966 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801695e:	6978      	ldr	r0, [r7, #20]
 8016960:	f7f8 f88c 	bl	800ea7c <pbuf_free>
          goto icmperr;
 8016964:	e085      	b.n	8016a72 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016966:	697b      	ldr	r3, [r7, #20]
 8016968:	685b      	ldr	r3, [r3, #4]
 801696a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801696c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801696e:	4618      	mov	r0, r3
 8016970:	f006 fee8 	bl	801d744 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016974:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016976:	4619      	mov	r1, r3
 8016978:	6978      	ldr	r0, [r7, #20]
 801697a:	f7f7 fff9 	bl	800e970 <pbuf_remove_header>
 801697e:	4603      	mov	r3, r0
 8016980:	2b00      	cmp	r3, #0
 8016982:	d009      	beq.n	8016998 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016984:	4b40      	ldr	r3, [pc, #256]	; (8016a88 <icmp_input+0x1f8>)
 8016986:	22b6      	movs	r2, #182	; 0xb6
 8016988:	4940      	ldr	r1, [pc, #256]	; (8016a8c <icmp_input+0x1fc>)
 801698a:	4841      	ldr	r0, [pc, #260]	; (8016a90 <icmp_input+0x200>)
 801698c:	f006 fef0 	bl	801d770 <iprintf>
          pbuf_free(r);
 8016990:	6978      	ldr	r0, [r7, #20]
 8016992:	f7f8 f873 	bl	800ea7c <pbuf_free>
          goto icmperr;
 8016996:	e06c      	b.n	8016a72 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016998:	6879      	ldr	r1, [r7, #4]
 801699a:	6978      	ldr	r0, [r7, #20]
 801699c:	f7f8 f992 	bl	800ecc4 <pbuf_copy>
 80169a0:	4603      	mov	r3, r0
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d003      	beq.n	80169ae <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80169a6:	6978      	ldr	r0, [r7, #20]
 80169a8:	f7f8 f868 	bl	800ea7c <pbuf_free>
          goto icmperr;
 80169ac:	e061      	b.n	8016a72 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80169ae:	6878      	ldr	r0, [r7, #4]
 80169b0:	f7f8 f864 	bl	800ea7c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80169b4:	697b      	ldr	r3, [r7, #20]
 80169b6:	607b      	str	r3, [r7, #4]
 80169b8:	e00f      	b.n	80169da <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80169ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80169bc:	330e      	adds	r3, #14
 80169be:	4619      	mov	r1, r3
 80169c0:	6878      	ldr	r0, [r7, #4]
 80169c2:	f7f7 ffd5 	bl	800e970 <pbuf_remove_header>
 80169c6:	4603      	mov	r3, r0
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d006      	beq.n	80169da <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80169cc:	4b2e      	ldr	r3, [pc, #184]	; (8016a88 <icmp_input+0x1f8>)
 80169ce:	22c7      	movs	r2, #199	; 0xc7
 80169d0:	4930      	ldr	r1, [pc, #192]	; (8016a94 <icmp_input+0x204>)
 80169d2:	482f      	ldr	r0, [pc, #188]	; (8016a90 <icmp_input+0x200>)
 80169d4:	f006 fecc 	bl	801d770 <iprintf>
          goto icmperr;
 80169d8:	e04b      	b.n	8016a72 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	685b      	ldr	r3, [r3, #4]
 80169de:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80169e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80169e2:	4619      	mov	r1, r3
 80169e4:	6878      	ldr	r0, [r7, #4]
 80169e6:	f7f7 ffb3 	bl	800e950 <pbuf_add_header>
 80169ea:	4603      	mov	r3, r0
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d12b      	bne.n	8016a48 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	685b      	ldr	r3, [r3, #4]
 80169f4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80169f6:	69fb      	ldr	r3, [r7, #28]
 80169f8:	681a      	ldr	r2, [r3, #0]
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80169fe:	4b20      	ldr	r3, [pc, #128]	; (8016a80 <icmp_input+0x1f0>)
 8016a00:	691a      	ldr	r2, [r3, #16]
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016a06:	693b      	ldr	r3, [r7, #16]
 8016a08:	2200      	movs	r2, #0
 8016a0a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016a0c:	693b      	ldr	r3, [r7, #16]
 8016a0e:	2200      	movs	r2, #0
 8016a10:	709a      	strb	r2, [r3, #2]
 8016a12:	2200      	movs	r2, #0
 8016a14:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	22ff      	movs	r2, #255	; 0xff
 8016a1a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	2200      	movs	r2, #0
 8016a20:	729a      	strb	r2, [r3, #10]
 8016a22:	2200      	movs	r2, #0
 8016a24:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016a26:	683b      	ldr	r3, [r7, #0]
 8016a28:	9302      	str	r3, [sp, #8]
 8016a2a:	2301      	movs	r3, #1
 8016a2c:	9301      	str	r3, [sp, #4]
 8016a2e:	2300      	movs	r3, #0
 8016a30:	9300      	str	r3, [sp, #0]
 8016a32:	23ff      	movs	r3, #255	; 0xff
 8016a34:	2200      	movs	r2, #0
 8016a36:	69f9      	ldr	r1, [r7, #28]
 8016a38:	6878      	ldr	r0, [r7, #4]
 8016a3a:	f000 fa75 	bl	8016f28 <ip4_output_if>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016a42:	e001      	b.n	8016a48 <icmp_input+0x1b8>
      break;
 8016a44:	bf00      	nop
 8016a46:	e000      	b.n	8016a4a <icmp_input+0x1ba>
      break;
 8016a48:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016a4a:	6878      	ldr	r0, [r7, #4]
 8016a4c:	f7f8 f816 	bl	800ea7c <pbuf_free>
  return;
 8016a50:	e013      	b.n	8016a7a <icmp_input+0x1ea>
    goto lenerr;
 8016a52:	bf00      	nop
 8016a54:	e002      	b.n	8016a5c <icmp_input+0x1cc>
    goto lenerr;
 8016a56:	bf00      	nop
 8016a58:	e000      	b.n	8016a5c <icmp_input+0x1cc>
        goto lenerr;
 8016a5a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016a5c:	6878      	ldr	r0, [r7, #4]
 8016a5e:	f7f8 f80d 	bl	800ea7c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016a62:	e00a      	b.n	8016a7a <icmp_input+0x1ea>
        goto icmperr;
 8016a64:	bf00      	nop
 8016a66:	e004      	b.n	8016a72 <icmp_input+0x1e2>
        goto icmperr;
 8016a68:	bf00      	nop
 8016a6a:	e002      	b.n	8016a72 <icmp_input+0x1e2>
          goto icmperr;
 8016a6c:	bf00      	nop
 8016a6e:	e000      	b.n	8016a72 <icmp_input+0x1e2>
          goto icmperr;
 8016a70:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016a72:	6878      	ldr	r0, [r7, #4]
 8016a74:	f7f8 f802 	bl	800ea7c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016a78:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016a7a:	3728      	adds	r7, #40	; 0x28
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	bd80      	pop	{r7, pc}
 8016a80:	2000a2c0 	.word	0x2000a2c0
 8016a84:	2000a2d4 	.word	0x2000a2d4
 8016a88:	08021a78 	.word	0x08021a78
 8016a8c:	08021ab0 	.word	0x08021ab0
 8016a90:	08021ae8 	.word	0x08021ae8
 8016a94:	08021b10 	.word	0x08021b10

08016a98 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b082      	sub	sp, #8
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	6078      	str	r0, [r7, #4]
 8016aa0:	460b      	mov	r3, r1
 8016aa2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016aa4:	78fb      	ldrb	r3, [r7, #3]
 8016aa6:	461a      	mov	r2, r3
 8016aa8:	2103      	movs	r1, #3
 8016aaa:	6878      	ldr	r0, [r7, #4]
 8016aac:	f000 f814 	bl	8016ad8 <icmp_send_response>
}
 8016ab0:	bf00      	nop
 8016ab2:	3708      	adds	r7, #8
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	bd80      	pop	{r7, pc}

08016ab8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b082      	sub	sp, #8
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
 8016ac0:	460b      	mov	r3, r1
 8016ac2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016ac4:	78fb      	ldrb	r3, [r7, #3]
 8016ac6:	461a      	mov	r2, r3
 8016ac8:	210b      	movs	r1, #11
 8016aca:	6878      	ldr	r0, [r7, #4]
 8016acc:	f000 f804 	bl	8016ad8 <icmp_send_response>
}
 8016ad0:	bf00      	nop
 8016ad2:	3708      	adds	r7, #8
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	bd80      	pop	{r7, pc}

08016ad8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b08c      	sub	sp, #48	; 0x30
 8016adc:	af04      	add	r7, sp, #16
 8016ade:	6078      	str	r0, [r7, #4]
 8016ae0:	460b      	mov	r3, r1
 8016ae2:	70fb      	strb	r3, [r7, #3]
 8016ae4:	4613      	mov	r3, r2
 8016ae6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016ae8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016aec:	2124      	movs	r1, #36	; 0x24
 8016aee:	2022      	movs	r0, #34	; 0x22
 8016af0:	f7f7 fce0 	bl	800e4b4 <pbuf_alloc>
 8016af4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016af6:	69fb      	ldr	r3, [r7, #28]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d04c      	beq.n	8016b96 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016afc:	69fb      	ldr	r3, [r7, #28]
 8016afe:	895b      	ldrh	r3, [r3, #10]
 8016b00:	2b23      	cmp	r3, #35	; 0x23
 8016b02:	d806      	bhi.n	8016b12 <icmp_send_response+0x3a>
 8016b04:	4b26      	ldr	r3, [pc, #152]	; (8016ba0 <icmp_send_response+0xc8>)
 8016b06:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016b0a:	4926      	ldr	r1, [pc, #152]	; (8016ba4 <icmp_send_response+0xcc>)
 8016b0c:	4826      	ldr	r0, [pc, #152]	; (8016ba8 <icmp_send_response+0xd0>)
 8016b0e:	f006 fe2f 	bl	801d770 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	685b      	ldr	r3, [r3, #4]
 8016b16:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016b18:	69fb      	ldr	r3, [r7, #28]
 8016b1a:	685b      	ldr	r3, [r3, #4]
 8016b1c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016b1e:	697b      	ldr	r3, [r7, #20]
 8016b20:	78fa      	ldrb	r2, [r7, #3]
 8016b22:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016b24:	697b      	ldr	r3, [r7, #20]
 8016b26:	78ba      	ldrb	r2, [r7, #2]
 8016b28:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016b2a:	697b      	ldr	r3, [r7, #20]
 8016b2c:	2200      	movs	r2, #0
 8016b2e:	711a      	strb	r2, [r3, #4]
 8016b30:	2200      	movs	r2, #0
 8016b32:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016b34:	697b      	ldr	r3, [r7, #20]
 8016b36:	2200      	movs	r2, #0
 8016b38:	719a      	strb	r2, [r3, #6]
 8016b3a:	2200      	movs	r2, #0
 8016b3c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016b3e:	69fb      	ldr	r3, [r7, #28]
 8016b40:	685b      	ldr	r3, [r3, #4]
 8016b42:	f103 0008 	add.w	r0, r3, #8
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	685b      	ldr	r3, [r3, #4]
 8016b4a:	221c      	movs	r2, #28
 8016b4c:	4619      	mov	r1, r3
 8016b4e:	f006 fdf9 	bl	801d744 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016b52:	69bb      	ldr	r3, [r7, #24]
 8016b54:	68db      	ldr	r3, [r3, #12]
 8016b56:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016b58:	f107 030c 	add.w	r3, r7, #12
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f000 f825 	bl	8016bac <ip4_route>
 8016b62:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016b64:	693b      	ldr	r3, [r7, #16]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d011      	beq.n	8016b8e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016b6a:	697b      	ldr	r3, [r7, #20]
 8016b6c:	2200      	movs	r2, #0
 8016b6e:	709a      	strb	r2, [r3, #2]
 8016b70:	2200      	movs	r2, #0
 8016b72:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016b74:	f107 020c 	add.w	r2, r7, #12
 8016b78:	693b      	ldr	r3, [r7, #16]
 8016b7a:	9302      	str	r3, [sp, #8]
 8016b7c:	2301      	movs	r3, #1
 8016b7e:	9301      	str	r3, [sp, #4]
 8016b80:	2300      	movs	r3, #0
 8016b82:	9300      	str	r3, [sp, #0]
 8016b84:	23ff      	movs	r3, #255	; 0xff
 8016b86:	2100      	movs	r1, #0
 8016b88:	69f8      	ldr	r0, [r7, #28]
 8016b8a:	f000 f9cd 	bl	8016f28 <ip4_output_if>
  }
  pbuf_free(q);
 8016b8e:	69f8      	ldr	r0, [r7, #28]
 8016b90:	f7f7 ff74 	bl	800ea7c <pbuf_free>
 8016b94:	e000      	b.n	8016b98 <icmp_send_response+0xc0>
    return;
 8016b96:	bf00      	nop
}
 8016b98:	3720      	adds	r7, #32
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	bd80      	pop	{r7, pc}
 8016b9e:	bf00      	nop
 8016ba0:	08021a78 	.word	0x08021a78
 8016ba4:	08021b44 	.word	0x08021b44
 8016ba8:	08021ae8 	.word	0x08021ae8

08016bac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016bac:	b480      	push	{r7}
 8016bae:	b085      	sub	sp, #20
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016bb4:	4b33      	ldr	r3, [pc, #204]	; (8016c84 <ip4_route+0xd8>)
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	60fb      	str	r3, [r7, #12]
 8016bba:	e036      	b.n	8016c2a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016bc2:	f003 0301 	and.w	r3, r3, #1
 8016bc6:	b2db      	uxtb	r3, r3
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d02b      	beq.n	8016c24 <ip4_route+0x78>
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016bd2:	089b      	lsrs	r3, r3, #2
 8016bd4:	f003 0301 	and.w	r3, r3, #1
 8016bd8:	b2db      	uxtb	r3, r3
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d022      	beq.n	8016c24 <ip4_route+0x78>
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	3304      	adds	r3, #4
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d01d      	beq.n	8016c24 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	681a      	ldr	r2, [r3, #0]
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	3304      	adds	r3, #4
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	405a      	eors	r2, r3
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	3308      	adds	r3, #8
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	4013      	ands	r3, r2
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d101      	bne.n	8016c04 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	e038      	b.n	8016c76 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c0a:	f003 0302 	and.w	r3, r3, #2
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d108      	bne.n	8016c24 <ip4_route+0x78>
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	681a      	ldr	r2, [r3, #0]
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	330c      	adds	r3, #12
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	429a      	cmp	r2, r3
 8016c1e:	d101      	bne.n	8016c24 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	e028      	b.n	8016c76 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	60fb      	str	r3, [r7, #12]
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d1c5      	bne.n	8016bbc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016c30:	4b15      	ldr	r3, [pc, #84]	; (8016c88 <ip4_route+0xdc>)
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d01a      	beq.n	8016c6e <ip4_route+0xc2>
 8016c38:	4b13      	ldr	r3, [pc, #76]	; (8016c88 <ip4_route+0xdc>)
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c40:	f003 0301 	and.w	r3, r3, #1
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d012      	beq.n	8016c6e <ip4_route+0xc2>
 8016c48:	4b0f      	ldr	r3, [pc, #60]	; (8016c88 <ip4_route+0xdc>)
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c50:	f003 0304 	and.w	r3, r3, #4
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d00a      	beq.n	8016c6e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016c58:	4b0b      	ldr	r3, [pc, #44]	; (8016c88 <ip4_route+0xdc>)
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	3304      	adds	r3, #4
 8016c5e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d004      	beq.n	8016c6e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	b2db      	uxtb	r3, r3
 8016c6a:	2b7f      	cmp	r3, #127	; 0x7f
 8016c6c:	d101      	bne.n	8016c72 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016c6e:	2300      	movs	r3, #0
 8016c70:	e001      	b.n	8016c76 <ip4_route+0xca>
  }

  return netif_default;
 8016c72:	4b05      	ldr	r3, [pc, #20]	; (8016c88 <ip4_route+0xdc>)
 8016c74:	681b      	ldr	r3, [r3, #0]
}
 8016c76:	4618      	mov	r0, r3
 8016c78:	3714      	adds	r7, #20
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c80:	4770      	bx	lr
 8016c82:	bf00      	nop
 8016c84:	200113b0 	.word	0x200113b0
 8016c88:	200113b4 	.word	0x200113b4

08016c8c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016c8c:	b580      	push	{r7, lr}
 8016c8e:	b082      	sub	sp, #8
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c9a:	f003 0301 	and.w	r3, r3, #1
 8016c9e:	b2db      	uxtb	r3, r3
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d016      	beq.n	8016cd2 <ip4_input_accept+0x46>
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	3304      	adds	r3, #4
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d011      	beq.n	8016cd2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016cae:	4b0b      	ldr	r3, [pc, #44]	; (8016cdc <ip4_input_accept+0x50>)
 8016cb0:	695a      	ldr	r2, [r3, #20]
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	3304      	adds	r3, #4
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	429a      	cmp	r2, r3
 8016cba:	d008      	beq.n	8016cce <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016cbc:	4b07      	ldr	r3, [pc, #28]	; (8016cdc <ip4_input_accept+0x50>)
 8016cbe:	695b      	ldr	r3, [r3, #20]
 8016cc0:	6879      	ldr	r1, [r7, #4]
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f000 fa08 	bl	80170d8 <ip4_addr_isbroadcast_u32>
 8016cc8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d001      	beq.n	8016cd2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016cce:	2301      	movs	r3, #1
 8016cd0:	e000      	b.n	8016cd4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016cd2:	2300      	movs	r3, #0
}
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	3708      	adds	r7, #8
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}
 8016cdc:	2000a2c0 	.word	0x2000a2c0

08016ce0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b086      	sub	sp, #24
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
 8016ce8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	685b      	ldr	r3, [r3, #4]
 8016cee:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016cf0:	697b      	ldr	r3, [r7, #20]
 8016cf2:	781b      	ldrb	r3, [r3, #0]
 8016cf4:	091b      	lsrs	r3, r3, #4
 8016cf6:	b2db      	uxtb	r3, r3
 8016cf8:	2b04      	cmp	r3, #4
 8016cfa:	d004      	beq.n	8016d06 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016cfc:	6878      	ldr	r0, [r7, #4]
 8016cfe:	f7f7 febd 	bl	800ea7c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016d02:	2300      	movs	r3, #0
 8016d04:	e107      	b.n	8016f16 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016d06:	697b      	ldr	r3, [r7, #20]
 8016d08:	781b      	ldrb	r3, [r3, #0]
 8016d0a:	f003 030f 	and.w	r3, r3, #15
 8016d0e:	b2db      	uxtb	r3, r3
 8016d10:	009b      	lsls	r3, r3, #2
 8016d12:	b2db      	uxtb	r3, r3
 8016d14:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016d16:	697b      	ldr	r3, [r7, #20]
 8016d18:	885b      	ldrh	r3, [r3, #2]
 8016d1a:	b29b      	uxth	r3, r3
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	f7f6 faab 	bl	800d278 <lwip_htons>
 8016d22:	4603      	mov	r3, r0
 8016d24:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	891b      	ldrh	r3, [r3, #8]
 8016d2a:	89ba      	ldrh	r2, [r7, #12]
 8016d2c:	429a      	cmp	r2, r3
 8016d2e:	d204      	bcs.n	8016d3a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016d30:	89bb      	ldrh	r3, [r7, #12]
 8016d32:	4619      	mov	r1, r3
 8016d34:	6878      	ldr	r0, [r7, #4]
 8016d36:	f7f7 fd1b 	bl	800e770 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	895b      	ldrh	r3, [r3, #10]
 8016d3e:	89fa      	ldrh	r2, [r7, #14]
 8016d40:	429a      	cmp	r2, r3
 8016d42:	d807      	bhi.n	8016d54 <ip4_input+0x74>
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	891b      	ldrh	r3, [r3, #8]
 8016d48:	89ba      	ldrh	r2, [r7, #12]
 8016d4a:	429a      	cmp	r2, r3
 8016d4c:	d802      	bhi.n	8016d54 <ip4_input+0x74>
 8016d4e:	89fb      	ldrh	r3, [r7, #14]
 8016d50:	2b13      	cmp	r3, #19
 8016d52:	d804      	bhi.n	8016d5e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016d54:	6878      	ldr	r0, [r7, #4]
 8016d56:	f7f7 fe91 	bl	800ea7c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016d5a:	2300      	movs	r3, #0
 8016d5c:	e0db      	b.n	8016f16 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016d5e:	697b      	ldr	r3, [r7, #20]
 8016d60:	691b      	ldr	r3, [r3, #16]
 8016d62:	4a6f      	ldr	r2, [pc, #444]	; (8016f20 <ip4_input+0x240>)
 8016d64:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016d66:	697b      	ldr	r3, [r7, #20]
 8016d68:	68db      	ldr	r3, [r3, #12]
 8016d6a:	4a6d      	ldr	r2, [pc, #436]	; (8016f20 <ip4_input+0x240>)
 8016d6c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016d6e:	4b6c      	ldr	r3, [pc, #432]	; (8016f20 <ip4_input+0x240>)
 8016d70:	695b      	ldr	r3, [r3, #20]
 8016d72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016d76:	2be0      	cmp	r3, #224	; 0xe0
 8016d78:	d112      	bne.n	8016da0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016d7a:	683b      	ldr	r3, [r7, #0]
 8016d7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016d80:	f003 0301 	and.w	r3, r3, #1
 8016d84:	b2db      	uxtb	r3, r3
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d007      	beq.n	8016d9a <ip4_input+0xba>
 8016d8a:	683b      	ldr	r3, [r7, #0]
 8016d8c:	3304      	adds	r3, #4
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d002      	beq.n	8016d9a <ip4_input+0xba>
      netif = inp;
 8016d94:	683b      	ldr	r3, [r7, #0]
 8016d96:	613b      	str	r3, [r7, #16]
 8016d98:	e02a      	b.n	8016df0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	613b      	str	r3, [r7, #16]
 8016d9e:	e027      	b.n	8016df0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016da0:	6838      	ldr	r0, [r7, #0]
 8016da2:	f7ff ff73 	bl	8016c8c <ip4_input_accept>
 8016da6:	4603      	mov	r3, r0
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d002      	beq.n	8016db2 <ip4_input+0xd2>
      netif = inp;
 8016dac:	683b      	ldr	r3, [r7, #0]
 8016dae:	613b      	str	r3, [r7, #16]
 8016db0:	e01e      	b.n	8016df0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016db2:	2300      	movs	r3, #0
 8016db4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016db6:	4b5a      	ldr	r3, [pc, #360]	; (8016f20 <ip4_input+0x240>)
 8016db8:	695b      	ldr	r3, [r3, #20]
 8016dba:	b2db      	uxtb	r3, r3
 8016dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8016dbe:	d017      	beq.n	8016df0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016dc0:	4b58      	ldr	r3, [pc, #352]	; (8016f24 <ip4_input+0x244>)
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	613b      	str	r3, [r7, #16]
 8016dc6:	e00e      	b.n	8016de6 <ip4_input+0x106>
          if (netif == inp) {
 8016dc8:	693a      	ldr	r2, [r7, #16]
 8016dca:	683b      	ldr	r3, [r7, #0]
 8016dcc:	429a      	cmp	r2, r3
 8016dce:	d006      	beq.n	8016dde <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016dd0:	6938      	ldr	r0, [r7, #16]
 8016dd2:	f7ff ff5b 	bl	8016c8c <ip4_input_accept>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d108      	bne.n	8016dee <ip4_input+0x10e>
 8016ddc:	e000      	b.n	8016de0 <ip4_input+0x100>
            continue;
 8016dde:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016de0:	693b      	ldr	r3, [r7, #16]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	613b      	str	r3, [r7, #16]
 8016de6:	693b      	ldr	r3, [r7, #16]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d1ed      	bne.n	8016dc8 <ip4_input+0xe8>
 8016dec:	e000      	b.n	8016df0 <ip4_input+0x110>
            break;
 8016dee:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016df0:	4b4b      	ldr	r3, [pc, #300]	; (8016f20 <ip4_input+0x240>)
 8016df2:	691b      	ldr	r3, [r3, #16]
 8016df4:	6839      	ldr	r1, [r7, #0]
 8016df6:	4618      	mov	r0, r3
 8016df8:	f000 f96e 	bl	80170d8 <ip4_addr_isbroadcast_u32>
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d105      	bne.n	8016e0e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016e02:	4b47      	ldr	r3, [pc, #284]	; (8016f20 <ip4_input+0x240>)
 8016e04:	691b      	ldr	r3, [r3, #16]
 8016e06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016e0a:	2be0      	cmp	r3, #224	; 0xe0
 8016e0c:	d104      	bne.n	8016e18 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016e0e:	6878      	ldr	r0, [r7, #4]
 8016e10:	f7f7 fe34 	bl	800ea7c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016e14:	2300      	movs	r3, #0
 8016e16:	e07e      	b.n	8016f16 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016e18:	693b      	ldr	r3, [r7, #16]
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d104      	bne.n	8016e28 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016e1e:	6878      	ldr	r0, [r7, #4]
 8016e20:	f7f7 fe2c 	bl	800ea7c <pbuf_free>
    return ERR_OK;
 8016e24:	2300      	movs	r3, #0
 8016e26:	e076      	b.n	8016f16 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016e28:	697b      	ldr	r3, [r7, #20]
 8016e2a:	88db      	ldrh	r3, [r3, #6]
 8016e2c:	b29b      	uxth	r3, r3
 8016e2e:	461a      	mov	r2, r3
 8016e30:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016e34:	4013      	ands	r3, r2
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d00b      	beq.n	8016e52 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016e3a:	6878      	ldr	r0, [r7, #4]
 8016e3c:	f000 fdbc 	bl	80179b8 <ip4_reass>
 8016e40:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d101      	bne.n	8016e4c <ip4_input+0x16c>
      return ERR_OK;
 8016e48:	2300      	movs	r3, #0
 8016e4a:	e064      	b.n	8016f16 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	685b      	ldr	r3, [r3, #4]
 8016e50:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016e52:	4a33      	ldr	r2, [pc, #204]	; (8016f20 <ip4_input+0x240>)
 8016e54:	693b      	ldr	r3, [r7, #16]
 8016e56:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016e58:	4a31      	ldr	r2, [pc, #196]	; (8016f20 <ip4_input+0x240>)
 8016e5a:	683b      	ldr	r3, [r7, #0]
 8016e5c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016e5e:	4a30      	ldr	r2, [pc, #192]	; (8016f20 <ip4_input+0x240>)
 8016e60:	697b      	ldr	r3, [r7, #20]
 8016e62:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016e64:	697b      	ldr	r3, [r7, #20]
 8016e66:	781b      	ldrb	r3, [r3, #0]
 8016e68:	f003 030f 	and.w	r3, r3, #15
 8016e6c:	b2db      	uxtb	r3, r3
 8016e6e:	009b      	lsls	r3, r3, #2
 8016e70:	b2db      	uxtb	r3, r3
 8016e72:	b29a      	uxth	r2, r3
 8016e74:	4b2a      	ldr	r3, [pc, #168]	; (8016f20 <ip4_input+0x240>)
 8016e76:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016e78:	89fb      	ldrh	r3, [r7, #14]
 8016e7a:	4619      	mov	r1, r3
 8016e7c:	6878      	ldr	r0, [r7, #4]
 8016e7e:	f7f7 fd77 	bl	800e970 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016e82:	697b      	ldr	r3, [r7, #20]
 8016e84:	7a5b      	ldrb	r3, [r3, #9]
 8016e86:	2b11      	cmp	r3, #17
 8016e88:	d006      	beq.n	8016e98 <ip4_input+0x1b8>
 8016e8a:	2b11      	cmp	r3, #17
 8016e8c:	dc13      	bgt.n	8016eb6 <ip4_input+0x1d6>
 8016e8e:	2b01      	cmp	r3, #1
 8016e90:	d00c      	beq.n	8016eac <ip4_input+0x1cc>
 8016e92:	2b06      	cmp	r3, #6
 8016e94:	d005      	beq.n	8016ea2 <ip4_input+0x1c2>
 8016e96:	e00e      	b.n	8016eb6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016e98:	6839      	ldr	r1, [r7, #0]
 8016e9a:	6878      	ldr	r0, [r7, #4]
 8016e9c:	f7fe faec 	bl	8015478 <udp_input>
        break;
 8016ea0:	e026      	b.n	8016ef0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016ea2:	6839      	ldr	r1, [r7, #0]
 8016ea4:	6878      	ldr	r0, [r7, #4]
 8016ea6:	f7f9 fea5 	bl	8010bf4 <tcp_input>
        break;
 8016eaa:	e021      	b.n	8016ef0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016eac:	6839      	ldr	r1, [r7, #0]
 8016eae:	6878      	ldr	r0, [r7, #4]
 8016eb0:	f7ff fcee 	bl	8016890 <icmp_input>
        break;
 8016eb4:	e01c      	b.n	8016ef0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016eb6:	4b1a      	ldr	r3, [pc, #104]	; (8016f20 <ip4_input+0x240>)
 8016eb8:	695b      	ldr	r3, [r3, #20]
 8016eba:	6939      	ldr	r1, [r7, #16]
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f000 f90b 	bl	80170d8 <ip4_addr_isbroadcast_u32>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d10f      	bne.n	8016ee8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016ec8:	4b15      	ldr	r3, [pc, #84]	; (8016f20 <ip4_input+0x240>)
 8016eca:	695b      	ldr	r3, [r3, #20]
 8016ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016ed0:	2be0      	cmp	r3, #224	; 0xe0
 8016ed2:	d009      	beq.n	8016ee8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016ed4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016ed8:	4619      	mov	r1, r3
 8016eda:	6878      	ldr	r0, [r7, #4]
 8016edc:	f7f7 fdbb 	bl	800ea56 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016ee0:	2102      	movs	r1, #2
 8016ee2:	6878      	ldr	r0, [r7, #4]
 8016ee4:	f7ff fdd8 	bl	8016a98 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016ee8:	6878      	ldr	r0, [r7, #4]
 8016eea:	f7f7 fdc7 	bl	800ea7c <pbuf_free>
        break;
 8016eee:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016ef0:	4b0b      	ldr	r3, [pc, #44]	; (8016f20 <ip4_input+0x240>)
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016ef6:	4b0a      	ldr	r3, [pc, #40]	; (8016f20 <ip4_input+0x240>)
 8016ef8:	2200      	movs	r2, #0
 8016efa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016efc:	4b08      	ldr	r3, [pc, #32]	; (8016f20 <ip4_input+0x240>)
 8016efe:	2200      	movs	r2, #0
 8016f00:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016f02:	4b07      	ldr	r3, [pc, #28]	; (8016f20 <ip4_input+0x240>)
 8016f04:	2200      	movs	r2, #0
 8016f06:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016f08:	4b05      	ldr	r3, [pc, #20]	; (8016f20 <ip4_input+0x240>)
 8016f0a:	2200      	movs	r2, #0
 8016f0c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016f0e:	4b04      	ldr	r3, [pc, #16]	; (8016f20 <ip4_input+0x240>)
 8016f10:	2200      	movs	r2, #0
 8016f12:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016f14:	2300      	movs	r3, #0
}
 8016f16:	4618      	mov	r0, r3
 8016f18:	3718      	adds	r7, #24
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	bd80      	pop	{r7, pc}
 8016f1e:	bf00      	nop
 8016f20:	2000a2c0 	.word	0x2000a2c0
 8016f24:	200113b0 	.word	0x200113b0

08016f28 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b08a      	sub	sp, #40	; 0x28
 8016f2c:	af04      	add	r7, sp, #16
 8016f2e:	60f8      	str	r0, [r7, #12]
 8016f30:	60b9      	str	r1, [r7, #8]
 8016f32:	607a      	str	r2, [r7, #4]
 8016f34:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016f36:	68bb      	ldr	r3, [r7, #8]
 8016f38:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d009      	beq.n	8016f54 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016f40:	68bb      	ldr	r3, [r7, #8]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d003      	beq.n	8016f4e <ip4_output_if+0x26>
 8016f46:	68bb      	ldr	r3, [r7, #8]
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d102      	bne.n	8016f54 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f50:	3304      	adds	r3, #4
 8016f52:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016f54:	78fa      	ldrb	r2, [r7, #3]
 8016f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f58:	9302      	str	r3, [sp, #8]
 8016f5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016f5e:	9301      	str	r3, [sp, #4]
 8016f60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016f64:	9300      	str	r3, [sp, #0]
 8016f66:	4613      	mov	r3, r2
 8016f68:	687a      	ldr	r2, [r7, #4]
 8016f6a:	6979      	ldr	r1, [r7, #20]
 8016f6c:	68f8      	ldr	r0, [r7, #12]
 8016f6e:	f000 f805 	bl	8016f7c <ip4_output_if_src>
 8016f72:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016f74:	4618      	mov	r0, r3
 8016f76:	3718      	adds	r7, #24
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	bd80      	pop	{r7, pc}

08016f7c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016f7c:	b580      	push	{r7, lr}
 8016f7e:	b088      	sub	sp, #32
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	60f8      	str	r0, [r7, #12]
 8016f84:	60b9      	str	r1, [r7, #8]
 8016f86:	607a      	str	r2, [r7, #4]
 8016f88:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	7b9b      	ldrb	r3, [r3, #14]
 8016f8e:	2b01      	cmp	r3, #1
 8016f90:	d006      	beq.n	8016fa0 <ip4_output_if_src+0x24>
 8016f92:	4b4b      	ldr	r3, [pc, #300]	; (80170c0 <ip4_output_if_src+0x144>)
 8016f94:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016f98:	494a      	ldr	r1, [pc, #296]	; (80170c4 <ip4_output_if_src+0x148>)
 8016f9a:	484b      	ldr	r0, [pc, #300]	; (80170c8 <ip4_output_if_src+0x14c>)
 8016f9c:	f006 fbe8 	bl	801d770 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d060      	beq.n	8017068 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016fa6:	2314      	movs	r3, #20
 8016fa8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016faa:	2114      	movs	r1, #20
 8016fac:	68f8      	ldr	r0, [r7, #12]
 8016fae:	f7f7 fccf 	bl	800e950 <pbuf_add_header>
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d002      	beq.n	8016fbe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016fb8:	f06f 0301 	mvn.w	r3, #1
 8016fbc:	e07c      	b.n	80170b8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	685b      	ldr	r3, [r3, #4]
 8016fc2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	895b      	ldrh	r3, [r3, #10]
 8016fc8:	2b13      	cmp	r3, #19
 8016fca:	d806      	bhi.n	8016fda <ip4_output_if_src+0x5e>
 8016fcc:	4b3c      	ldr	r3, [pc, #240]	; (80170c0 <ip4_output_if_src+0x144>)
 8016fce:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016fd2:	493e      	ldr	r1, [pc, #248]	; (80170cc <ip4_output_if_src+0x150>)
 8016fd4:	483c      	ldr	r0, [pc, #240]	; (80170c8 <ip4_output_if_src+0x14c>)
 8016fd6:	f006 fbcb 	bl	801d770 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016fda:	69fb      	ldr	r3, [r7, #28]
 8016fdc:	78fa      	ldrb	r2, [r7, #3]
 8016fde:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016fe0:	69fb      	ldr	r3, [r7, #28]
 8016fe2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016fe6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	681a      	ldr	r2, [r3, #0]
 8016fec:	69fb      	ldr	r3, [r7, #28]
 8016fee:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016ff0:	8b7b      	ldrh	r3, [r7, #26]
 8016ff2:	089b      	lsrs	r3, r3, #2
 8016ff4:	b29b      	uxth	r3, r3
 8016ff6:	b2db      	uxtb	r3, r3
 8016ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ffc:	b2da      	uxtb	r2, r3
 8016ffe:	69fb      	ldr	r3, [r7, #28]
 8017000:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017002:	69fb      	ldr	r3, [r7, #28]
 8017004:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017008:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	891b      	ldrh	r3, [r3, #8]
 801700e:	4618      	mov	r0, r3
 8017010:	f7f6 f932 	bl	800d278 <lwip_htons>
 8017014:	4603      	mov	r3, r0
 8017016:	461a      	mov	r2, r3
 8017018:	69fb      	ldr	r3, [r7, #28]
 801701a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801701c:	69fb      	ldr	r3, [r7, #28]
 801701e:	2200      	movs	r2, #0
 8017020:	719a      	strb	r2, [r3, #6]
 8017022:	2200      	movs	r2, #0
 8017024:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017026:	4b2a      	ldr	r3, [pc, #168]	; (80170d0 <ip4_output_if_src+0x154>)
 8017028:	881b      	ldrh	r3, [r3, #0]
 801702a:	4618      	mov	r0, r3
 801702c:	f7f6 f924 	bl	800d278 <lwip_htons>
 8017030:	4603      	mov	r3, r0
 8017032:	461a      	mov	r2, r3
 8017034:	69fb      	ldr	r3, [r7, #28]
 8017036:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017038:	4b25      	ldr	r3, [pc, #148]	; (80170d0 <ip4_output_if_src+0x154>)
 801703a:	881b      	ldrh	r3, [r3, #0]
 801703c:	3301      	adds	r3, #1
 801703e:	b29a      	uxth	r2, r3
 8017040:	4b23      	ldr	r3, [pc, #140]	; (80170d0 <ip4_output_if_src+0x154>)
 8017042:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017044:	68bb      	ldr	r3, [r7, #8]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d104      	bne.n	8017054 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801704a:	4b22      	ldr	r3, [pc, #136]	; (80170d4 <ip4_output_if_src+0x158>)
 801704c:	681a      	ldr	r2, [r3, #0]
 801704e:	69fb      	ldr	r3, [r7, #28]
 8017050:	60da      	str	r2, [r3, #12]
 8017052:	e003      	b.n	801705c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017054:	68bb      	ldr	r3, [r7, #8]
 8017056:	681a      	ldr	r2, [r3, #0]
 8017058:	69fb      	ldr	r3, [r7, #28]
 801705a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801705c:	69fb      	ldr	r3, [r7, #28]
 801705e:	2200      	movs	r2, #0
 8017060:	729a      	strb	r2, [r3, #10]
 8017062:	2200      	movs	r2, #0
 8017064:	72da      	strb	r2, [r3, #11]
 8017066:	e00f      	b.n	8017088 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	895b      	ldrh	r3, [r3, #10]
 801706c:	2b13      	cmp	r3, #19
 801706e:	d802      	bhi.n	8017076 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017070:	f06f 0301 	mvn.w	r3, #1
 8017074:	e020      	b.n	80170b8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	685b      	ldr	r3, [r3, #4]
 801707a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801707c:	69fb      	ldr	r3, [r7, #28]
 801707e:	691b      	ldr	r3, [r3, #16]
 8017080:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017082:	f107 0314 	add.w	r3, r7, #20
 8017086:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801708a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801708c:	2b00      	cmp	r3, #0
 801708e:	d00c      	beq.n	80170aa <ip4_output_if_src+0x12e>
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	891a      	ldrh	r2, [r3, #8]
 8017094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017096:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017098:	429a      	cmp	r2, r3
 801709a:	d906      	bls.n	80170aa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801709c:	687a      	ldr	r2, [r7, #4]
 801709e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80170a0:	68f8      	ldr	r0, [r7, #12]
 80170a2:	f000 fe7d 	bl	8017da0 <ip4_frag>
 80170a6:	4603      	mov	r3, r0
 80170a8:	e006      	b.n	80170b8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80170aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ac:	695b      	ldr	r3, [r3, #20]
 80170ae:	687a      	ldr	r2, [r7, #4]
 80170b0:	68f9      	ldr	r1, [r7, #12]
 80170b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80170b4:	4798      	blx	r3
 80170b6:	4603      	mov	r3, r0
}
 80170b8:	4618      	mov	r0, r3
 80170ba:	3720      	adds	r7, #32
 80170bc:	46bd      	mov	sp, r7
 80170be:	bd80      	pop	{r7, pc}
 80170c0:	08021b70 	.word	0x08021b70
 80170c4:	08021ba4 	.word	0x08021ba4
 80170c8:	08021bb0 	.word	0x08021bb0
 80170cc:	08021bd8 	.word	0x08021bd8
 80170d0:	2001150e 	.word	0x2001150e
 80170d4:	08022398 	.word	0x08022398

080170d8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80170d8:	b480      	push	{r7}
 80170da:	b085      	sub	sp, #20
 80170dc:	af00      	add	r7, sp, #0
 80170de:	6078      	str	r0, [r7, #4]
 80170e0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80170ec:	d002      	beq.n	80170f4 <ip4_addr_isbroadcast_u32+0x1c>
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d101      	bne.n	80170f8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80170f4:	2301      	movs	r3, #1
 80170f6:	e02a      	b.n	801714e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80170f8:	683b      	ldr	r3, [r7, #0]
 80170fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80170fe:	f003 0302 	and.w	r3, r3, #2
 8017102:	2b00      	cmp	r3, #0
 8017104:	d101      	bne.n	801710a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017106:	2300      	movs	r3, #0
 8017108:	e021      	b.n	801714e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801710a:	683b      	ldr	r3, [r7, #0]
 801710c:	3304      	adds	r3, #4
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	687a      	ldr	r2, [r7, #4]
 8017112:	429a      	cmp	r2, r3
 8017114:	d101      	bne.n	801711a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017116:	2300      	movs	r3, #0
 8017118:	e019      	b.n	801714e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801711a:	68fa      	ldr	r2, [r7, #12]
 801711c:	683b      	ldr	r3, [r7, #0]
 801711e:	3304      	adds	r3, #4
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	405a      	eors	r2, r3
 8017124:	683b      	ldr	r3, [r7, #0]
 8017126:	3308      	adds	r3, #8
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	4013      	ands	r3, r2
 801712c:	2b00      	cmp	r3, #0
 801712e:	d10d      	bne.n	801714c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017130:	683b      	ldr	r3, [r7, #0]
 8017132:	3308      	adds	r3, #8
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	43da      	mvns	r2, r3
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801713c:	683b      	ldr	r3, [r7, #0]
 801713e:	3308      	adds	r3, #8
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017144:	429a      	cmp	r2, r3
 8017146:	d101      	bne.n	801714c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017148:	2301      	movs	r3, #1
 801714a:	e000      	b.n	801714e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801714c:	2300      	movs	r3, #0
  }
}
 801714e:	4618      	mov	r0, r3
 8017150:	3714      	adds	r7, #20
 8017152:	46bd      	mov	sp, r7
 8017154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017158:	4770      	bx	lr
	...

0801715c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801715c:	b580      	push	{r7, lr}
 801715e:	b08a      	sub	sp, #40	; 0x28
 8017160:	af00      	add	r7, sp, #0
 8017162:	6078      	str	r0, [r7, #4]
 8017164:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8017166:	f107 030c 	add.w	r3, r7, #12
 801716a:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	781b      	ldrb	r3, [r3, #0]
 8017170:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8017174:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017178:	3301      	adds	r3, #1
 801717a:	4a89      	ldr	r2, [pc, #548]	; (80173a0 <ip4addr_aton+0x244>)
 801717c:	4413      	add	r3, r2
 801717e:	781b      	ldrb	r3, [r3, #0]
 8017180:	f003 0304 	and.w	r3, r3, #4
 8017184:	2b00      	cmp	r3, #0
 8017186:	d101      	bne.n	801718c <ip4addr_aton+0x30>
      return 0;
 8017188:	2300      	movs	r3, #0
 801718a:	e105      	b.n	8017398 <ip4addr_aton+0x23c>
    }
    val = 0;
 801718c:	2300      	movs	r3, #0
 801718e:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8017190:	230a      	movs	r3, #10
 8017192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8017196:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801719a:	2b30      	cmp	r3, #48	; 0x30
 801719c:	d11c      	bne.n	80171d8 <ip4addr_aton+0x7c>
      c = *++cp;
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	3301      	adds	r3, #1
 80171a2:	607b      	str	r3, [r7, #4]
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	781b      	ldrb	r3, [r3, #0]
 80171a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 80171ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80171b0:	2b78      	cmp	r3, #120	; 0x78
 80171b2:	d003      	beq.n	80171bc <ip4addr_aton+0x60>
 80171b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80171b8:	2b58      	cmp	r3, #88	; 0x58
 80171ba:	d10a      	bne.n	80171d2 <ip4addr_aton+0x76>
        base = 16;
 80171bc:	2310      	movs	r3, #16
 80171be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	3301      	adds	r3, #1
 80171c6:	607b      	str	r3, [r7, #4]
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	781b      	ldrb	r3, [r3, #0]
 80171cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80171d0:	e002      	b.n	80171d8 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 80171d2:	2308      	movs	r3, #8
 80171d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 80171d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80171dc:	3301      	adds	r3, #1
 80171de:	4a70      	ldr	r2, [pc, #448]	; (80173a0 <ip4addr_aton+0x244>)
 80171e0:	4413      	add	r3, r2
 80171e2:	781b      	ldrb	r3, [r3, #0]
 80171e4:	f003 0304 	and.w	r3, r3, #4
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d011      	beq.n	8017210 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 80171ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80171f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171f2:	fb03 f202 	mul.w	r2, r3, r2
 80171f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80171fa:	4413      	add	r3, r2
 80171fc:	3b30      	subs	r3, #48	; 0x30
 80171fe:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	3301      	adds	r3, #1
 8017204:	607b      	str	r3, [r7, #4]
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	781b      	ldrb	r3, [r3, #0]
 801720a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801720e:	e7e3      	b.n	80171d8 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8017210:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017214:	2b10      	cmp	r3, #16
 8017216:	d127      	bne.n	8017268 <ip4addr_aton+0x10c>
 8017218:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801721c:	3301      	adds	r3, #1
 801721e:	4a60      	ldr	r2, [pc, #384]	; (80173a0 <ip4addr_aton+0x244>)
 8017220:	4413      	add	r3, r2
 8017222:	781b      	ldrb	r3, [r3, #0]
 8017224:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8017228:	2b00      	cmp	r3, #0
 801722a:	d01d      	beq.n	8017268 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801722e:	011b      	lsls	r3, r3, #4
 8017230:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017234:	f102 010a 	add.w	r1, r2, #10
 8017238:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801723c:	3201      	adds	r2, #1
 801723e:	4858      	ldr	r0, [pc, #352]	; (80173a0 <ip4addr_aton+0x244>)
 8017240:	4402      	add	r2, r0
 8017242:	7812      	ldrb	r2, [r2, #0]
 8017244:	f002 0203 	and.w	r2, r2, #3
 8017248:	2a02      	cmp	r2, #2
 801724a:	d101      	bne.n	8017250 <ip4addr_aton+0xf4>
 801724c:	2261      	movs	r2, #97	; 0x61
 801724e:	e000      	b.n	8017252 <ip4addr_aton+0xf6>
 8017250:	2241      	movs	r2, #65	; 0x41
 8017252:	1a8a      	subs	r2, r1, r2
 8017254:	4313      	orrs	r3, r2
 8017256:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	3301      	adds	r3, #1
 801725c:	607b      	str	r3, [r7, #4]
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	781b      	ldrb	r3, [r3, #0]
 8017262:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8017266:	e7b7      	b.n	80171d8 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8017268:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801726c:	2b2e      	cmp	r3, #46	; 0x2e
 801726e:	d114      	bne.n	801729a <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8017270:	f107 030c 	add.w	r3, r7, #12
 8017274:	330c      	adds	r3, #12
 8017276:	69fa      	ldr	r2, [r7, #28]
 8017278:	429a      	cmp	r2, r3
 801727a:	d301      	bcc.n	8017280 <ip4addr_aton+0x124>
        return 0;
 801727c:	2300      	movs	r3, #0
 801727e:	e08b      	b.n	8017398 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8017280:	69fb      	ldr	r3, [r7, #28]
 8017282:	1d1a      	adds	r2, r3, #4
 8017284:	61fa      	str	r2, [r7, #28]
 8017286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017288:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	3301      	adds	r3, #1
 801728e:	607b      	str	r3, [r7, #4]
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	781b      	ldrb	r3, [r3, #0]
 8017294:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8017298:	e76c      	b.n	8017174 <ip4addr_aton+0x18>
    } else {
      break;
 801729a:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801729c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d00b      	beq.n	80172bc <ip4addr_aton+0x160>
 80172a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80172a8:	3301      	adds	r3, #1
 80172aa:	4a3d      	ldr	r2, [pc, #244]	; (80173a0 <ip4addr_aton+0x244>)
 80172ac:	4413      	add	r3, r2
 80172ae:	781b      	ldrb	r3, [r3, #0]
 80172b0:	f003 0308 	and.w	r3, r3, #8
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d101      	bne.n	80172bc <ip4addr_aton+0x160>
    return 0;
 80172b8:	2300      	movs	r3, #0
 80172ba:	e06d      	b.n	8017398 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 80172bc:	f107 030c 	add.w	r3, r7, #12
 80172c0:	69fa      	ldr	r2, [r7, #28]
 80172c2:	1ad3      	subs	r3, r2, r3
 80172c4:	109b      	asrs	r3, r3, #2
 80172c6:	3301      	adds	r3, #1
 80172c8:	2b04      	cmp	r3, #4
 80172ca:	d853      	bhi.n	8017374 <ip4addr_aton+0x218>
 80172cc:	a201      	add	r2, pc, #4	; (adr r2, 80172d4 <ip4addr_aton+0x178>)
 80172ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172d2:	bf00      	nop
 80172d4:	080172e9 	.word	0x080172e9
 80172d8:	08017383 	.word	0x08017383
 80172dc:	080172ed 	.word	0x080172ed
 80172e0:	0801730f 	.word	0x0801730f
 80172e4:	0801733d 	.word	0x0801733d

    case 0:
      return 0;       /* initial nondigit */
 80172e8:	2300      	movs	r3, #0
 80172ea:	e055      	b.n	8017398 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 80172ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80172f2:	d301      	bcc.n	80172f8 <ip4addr_aton+0x19c>
        return 0;
 80172f4:	2300      	movs	r3, #0
 80172f6:	e04f      	b.n	8017398 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	2bff      	cmp	r3, #255	; 0xff
 80172fc:	d901      	bls.n	8017302 <ip4addr_aton+0x1a6>
        return 0;
 80172fe:	2300      	movs	r3, #0
 8017300:	e04a      	b.n	8017398 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	061b      	lsls	r3, r3, #24
 8017306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017308:	4313      	orrs	r3, r2
 801730a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801730c:	e03a      	b.n	8017384 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017314:	d301      	bcc.n	801731a <ip4addr_aton+0x1be>
        return 0;
 8017316:	2300      	movs	r3, #0
 8017318:	e03e      	b.n	8017398 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	2bff      	cmp	r3, #255	; 0xff
 801731e:	d802      	bhi.n	8017326 <ip4addr_aton+0x1ca>
 8017320:	693b      	ldr	r3, [r7, #16]
 8017322:	2bff      	cmp	r3, #255	; 0xff
 8017324:	d901      	bls.n	801732a <ip4addr_aton+0x1ce>
        return 0;
 8017326:	2300      	movs	r3, #0
 8017328:	e036      	b.n	8017398 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	061a      	lsls	r2, r3, #24
 801732e:	693b      	ldr	r3, [r7, #16]
 8017330:	041b      	lsls	r3, r3, #16
 8017332:	4313      	orrs	r3, r2
 8017334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017336:	4313      	orrs	r3, r2
 8017338:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801733a:	e023      	b.n	8017384 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801733e:	2bff      	cmp	r3, #255	; 0xff
 8017340:	d901      	bls.n	8017346 <ip4addr_aton+0x1ea>
        return 0;
 8017342:	2300      	movs	r3, #0
 8017344:	e028      	b.n	8017398 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	2bff      	cmp	r3, #255	; 0xff
 801734a:	d805      	bhi.n	8017358 <ip4addr_aton+0x1fc>
 801734c:	693b      	ldr	r3, [r7, #16]
 801734e:	2bff      	cmp	r3, #255	; 0xff
 8017350:	d802      	bhi.n	8017358 <ip4addr_aton+0x1fc>
 8017352:	697b      	ldr	r3, [r7, #20]
 8017354:	2bff      	cmp	r3, #255	; 0xff
 8017356:	d901      	bls.n	801735c <ip4addr_aton+0x200>
        return 0;
 8017358:	2300      	movs	r3, #0
 801735a:	e01d      	b.n	8017398 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	061a      	lsls	r2, r3, #24
 8017360:	693b      	ldr	r3, [r7, #16]
 8017362:	041b      	lsls	r3, r3, #16
 8017364:	431a      	orrs	r2, r3
 8017366:	697b      	ldr	r3, [r7, #20]
 8017368:	021b      	lsls	r3, r3, #8
 801736a:	4313      	orrs	r3, r2
 801736c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801736e:	4313      	orrs	r3, r2
 8017370:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8017372:	e007      	b.n	8017384 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8017374:	4b0b      	ldr	r3, [pc, #44]	; (80173a4 <ip4addr_aton+0x248>)
 8017376:	22f9      	movs	r2, #249	; 0xf9
 8017378:	490b      	ldr	r1, [pc, #44]	; (80173a8 <ip4addr_aton+0x24c>)
 801737a:	480c      	ldr	r0, [pc, #48]	; (80173ac <ip4addr_aton+0x250>)
 801737c:	f006 f9f8 	bl	801d770 <iprintf>
      break;
 8017380:	e000      	b.n	8017384 <ip4addr_aton+0x228>
      break;
 8017382:	bf00      	nop
  }
  if (addr) {
 8017384:	683b      	ldr	r3, [r7, #0]
 8017386:	2b00      	cmp	r3, #0
 8017388:	d005      	beq.n	8017396 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801738a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801738c:	f7f5 ff89 	bl	800d2a2 <lwip_htonl>
 8017390:	4602      	mov	r2, r0
 8017392:	683b      	ldr	r3, [r7, #0]
 8017394:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8017396:	2301      	movs	r3, #1
}
 8017398:	4618      	mov	r0, r3
 801739a:	3728      	adds	r7, #40	; 0x28
 801739c:	46bd      	mov	sp, r7
 801739e:	bd80      	pop	{r7, pc}
 80173a0:	080223e8 	.word	0x080223e8
 80173a4:	08021c08 	.word	0x08021c08
 80173a8:	08021c44 	.word	0x08021c44
 80173ac:	08021c50 	.word	0x08021c50

080173b0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b084      	sub	sp, #16
 80173b4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80173b6:	2300      	movs	r3, #0
 80173b8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80173ba:	4b12      	ldr	r3, [pc, #72]	; (8017404 <ip_reass_tmr+0x54>)
 80173bc:	681b      	ldr	r3, [r3, #0]
 80173be:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80173c0:	e018      	b.n	80173f4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	7fdb      	ldrb	r3, [r3, #31]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d00b      	beq.n	80173e2 <ip_reass_tmr+0x32>
      r->timer--;
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	7fdb      	ldrb	r3, [r3, #31]
 80173ce:	3b01      	subs	r3, #1
 80173d0:	b2da      	uxtb	r2, r3
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	60fb      	str	r3, [r7, #12]
 80173e0:	e008      	b.n	80173f4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80173ec:	68b9      	ldr	r1, [r7, #8]
 80173ee:	6878      	ldr	r0, [r7, #4]
 80173f0:	f000 f80a 	bl	8017408 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d1e3      	bne.n	80173c2 <ip_reass_tmr+0x12>
    }
  }
}
 80173fa:	bf00      	nop
 80173fc:	bf00      	nop
 80173fe:	3710      	adds	r7, #16
 8017400:	46bd      	mov	sp, r7
 8017402:	bd80      	pop	{r7, pc}
 8017404:	20011510 	.word	0x20011510

08017408 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017408:	b580      	push	{r7, lr}
 801740a:	b088      	sub	sp, #32
 801740c:	af00      	add	r7, sp, #0
 801740e:	6078      	str	r0, [r7, #4]
 8017410:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017412:	2300      	movs	r3, #0
 8017414:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017416:	683a      	ldr	r2, [r7, #0]
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	429a      	cmp	r2, r3
 801741c:	d105      	bne.n	801742a <ip_reass_free_complete_datagram+0x22>
 801741e:	4b45      	ldr	r3, [pc, #276]	; (8017534 <ip_reass_free_complete_datagram+0x12c>)
 8017420:	22ab      	movs	r2, #171	; 0xab
 8017422:	4945      	ldr	r1, [pc, #276]	; (8017538 <ip_reass_free_complete_datagram+0x130>)
 8017424:	4845      	ldr	r0, [pc, #276]	; (801753c <ip_reass_free_complete_datagram+0x134>)
 8017426:	f006 f9a3 	bl	801d770 <iprintf>
  if (prev != NULL) {
 801742a:	683b      	ldr	r3, [r7, #0]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d00a      	beq.n	8017446 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017430:	683b      	ldr	r3, [r7, #0]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	687a      	ldr	r2, [r7, #4]
 8017436:	429a      	cmp	r2, r3
 8017438:	d005      	beq.n	8017446 <ip_reass_free_complete_datagram+0x3e>
 801743a:	4b3e      	ldr	r3, [pc, #248]	; (8017534 <ip_reass_free_complete_datagram+0x12c>)
 801743c:	22ad      	movs	r2, #173	; 0xad
 801743e:	4940      	ldr	r1, [pc, #256]	; (8017540 <ip_reass_free_complete_datagram+0x138>)
 8017440:	483e      	ldr	r0, [pc, #248]	; (801753c <ip_reass_free_complete_datagram+0x134>)
 8017442:	f006 f995 	bl	801d770 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	685b      	ldr	r3, [r3, #4]
 801744a:	685b      	ldr	r3, [r3, #4]
 801744c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801744e:	697b      	ldr	r3, [r7, #20]
 8017450:	889b      	ldrh	r3, [r3, #4]
 8017452:	b29b      	uxth	r3, r3
 8017454:	2b00      	cmp	r3, #0
 8017456:	d12a      	bne.n	80174ae <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	685b      	ldr	r3, [r3, #4]
 801745c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801745e:	697b      	ldr	r3, [r7, #20]
 8017460:	681a      	ldr	r2, [r3, #0]
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017466:	69bb      	ldr	r3, [r7, #24]
 8017468:	6858      	ldr	r0, [r3, #4]
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	3308      	adds	r3, #8
 801746e:	2214      	movs	r2, #20
 8017470:	4619      	mov	r1, r3
 8017472:	f006 f967 	bl	801d744 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017476:	2101      	movs	r1, #1
 8017478:	69b8      	ldr	r0, [r7, #24]
 801747a:	f7ff fb1d 	bl	8016ab8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801747e:	69b8      	ldr	r0, [r7, #24]
 8017480:	f7f7 fb8a 	bl	800eb98 <pbuf_clen>
 8017484:	4603      	mov	r3, r0
 8017486:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017488:	8bfa      	ldrh	r2, [r7, #30]
 801748a:	8a7b      	ldrh	r3, [r7, #18]
 801748c:	4413      	add	r3, r2
 801748e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017492:	db05      	blt.n	80174a0 <ip_reass_free_complete_datagram+0x98>
 8017494:	4b27      	ldr	r3, [pc, #156]	; (8017534 <ip_reass_free_complete_datagram+0x12c>)
 8017496:	22bc      	movs	r2, #188	; 0xbc
 8017498:	492a      	ldr	r1, [pc, #168]	; (8017544 <ip_reass_free_complete_datagram+0x13c>)
 801749a:	4828      	ldr	r0, [pc, #160]	; (801753c <ip_reass_free_complete_datagram+0x134>)
 801749c:	f006 f968 	bl	801d770 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80174a0:	8bfa      	ldrh	r2, [r7, #30]
 80174a2:	8a7b      	ldrh	r3, [r7, #18]
 80174a4:	4413      	add	r3, r2
 80174a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80174a8:	69b8      	ldr	r0, [r7, #24]
 80174aa:	f7f7 fae7 	bl	800ea7c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	685b      	ldr	r3, [r3, #4]
 80174b2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80174b4:	e01f      	b.n	80174f6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80174b6:	69bb      	ldr	r3, [r7, #24]
 80174b8:	685b      	ldr	r3, [r3, #4]
 80174ba:	617b      	str	r3, [r7, #20]
    pcur = p;
 80174bc:	69bb      	ldr	r3, [r7, #24]
 80174be:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80174c0:	697b      	ldr	r3, [r7, #20]
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80174c6:	68f8      	ldr	r0, [r7, #12]
 80174c8:	f7f7 fb66 	bl	800eb98 <pbuf_clen>
 80174cc:	4603      	mov	r3, r0
 80174ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80174d0:	8bfa      	ldrh	r2, [r7, #30]
 80174d2:	8a7b      	ldrh	r3, [r7, #18]
 80174d4:	4413      	add	r3, r2
 80174d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80174da:	db05      	blt.n	80174e8 <ip_reass_free_complete_datagram+0xe0>
 80174dc:	4b15      	ldr	r3, [pc, #84]	; (8017534 <ip_reass_free_complete_datagram+0x12c>)
 80174de:	22cc      	movs	r2, #204	; 0xcc
 80174e0:	4918      	ldr	r1, [pc, #96]	; (8017544 <ip_reass_free_complete_datagram+0x13c>)
 80174e2:	4816      	ldr	r0, [pc, #88]	; (801753c <ip_reass_free_complete_datagram+0x134>)
 80174e4:	f006 f944 	bl	801d770 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80174e8:	8bfa      	ldrh	r2, [r7, #30]
 80174ea:	8a7b      	ldrh	r3, [r7, #18]
 80174ec:	4413      	add	r3, r2
 80174ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80174f0:	68f8      	ldr	r0, [r7, #12]
 80174f2:	f7f7 fac3 	bl	800ea7c <pbuf_free>
  while (p != NULL) {
 80174f6:	69bb      	ldr	r3, [r7, #24]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d1dc      	bne.n	80174b6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80174fc:	6839      	ldr	r1, [r7, #0]
 80174fe:	6878      	ldr	r0, [r7, #4]
 8017500:	f000 f8c2 	bl	8017688 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017504:	4b10      	ldr	r3, [pc, #64]	; (8017548 <ip_reass_free_complete_datagram+0x140>)
 8017506:	881b      	ldrh	r3, [r3, #0]
 8017508:	8bfa      	ldrh	r2, [r7, #30]
 801750a:	429a      	cmp	r2, r3
 801750c:	d905      	bls.n	801751a <ip_reass_free_complete_datagram+0x112>
 801750e:	4b09      	ldr	r3, [pc, #36]	; (8017534 <ip_reass_free_complete_datagram+0x12c>)
 8017510:	22d2      	movs	r2, #210	; 0xd2
 8017512:	490e      	ldr	r1, [pc, #56]	; (801754c <ip_reass_free_complete_datagram+0x144>)
 8017514:	4809      	ldr	r0, [pc, #36]	; (801753c <ip_reass_free_complete_datagram+0x134>)
 8017516:	f006 f92b 	bl	801d770 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801751a:	4b0b      	ldr	r3, [pc, #44]	; (8017548 <ip_reass_free_complete_datagram+0x140>)
 801751c:	881a      	ldrh	r2, [r3, #0]
 801751e:	8bfb      	ldrh	r3, [r7, #30]
 8017520:	1ad3      	subs	r3, r2, r3
 8017522:	b29a      	uxth	r2, r3
 8017524:	4b08      	ldr	r3, [pc, #32]	; (8017548 <ip_reass_free_complete_datagram+0x140>)
 8017526:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017528:	8bfb      	ldrh	r3, [r7, #30]
}
 801752a:	4618      	mov	r0, r3
 801752c:	3720      	adds	r7, #32
 801752e:	46bd      	mov	sp, r7
 8017530:	bd80      	pop	{r7, pc}
 8017532:	bf00      	nop
 8017534:	08021c78 	.word	0x08021c78
 8017538:	08021cb4 	.word	0x08021cb4
 801753c:	08021cc0 	.word	0x08021cc0
 8017540:	08021ce8 	.word	0x08021ce8
 8017544:	08021cfc 	.word	0x08021cfc
 8017548:	20011514 	.word	0x20011514
 801754c:	08021d1c 	.word	0x08021d1c

08017550 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017550:	b580      	push	{r7, lr}
 8017552:	b08a      	sub	sp, #40	; 0x28
 8017554:	af00      	add	r7, sp, #0
 8017556:	6078      	str	r0, [r7, #4]
 8017558:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801755a:	2300      	movs	r3, #0
 801755c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801755e:	2300      	movs	r3, #0
 8017560:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017562:	2300      	movs	r3, #0
 8017564:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017566:	2300      	movs	r3, #0
 8017568:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801756a:	2300      	movs	r3, #0
 801756c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801756e:	4b28      	ldr	r3, [pc, #160]	; (8017610 <ip_reass_remove_oldest_datagram+0xc0>)
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017574:	e030      	b.n	80175d8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017578:	695a      	ldr	r2, [r3, #20]
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	68db      	ldr	r3, [r3, #12]
 801757e:	429a      	cmp	r2, r3
 8017580:	d10c      	bne.n	801759c <ip_reass_remove_oldest_datagram+0x4c>
 8017582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017584:	699a      	ldr	r2, [r3, #24]
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	691b      	ldr	r3, [r3, #16]
 801758a:	429a      	cmp	r2, r3
 801758c:	d106      	bne.n	801759c <ip_reass_remove_oldest_datagram+0x4c>
 801758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017590:	899a      	ldrh	r2, [r3, #12]
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	889b      	ldrh	r3, [r3, #4]
 8017596:	b29b      	uxth	r3, r3
 8017598:	429a      	cmp	r2, r3
 801759a:	d014      	beq.n	80175c6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801759c:	693b      	ldr	r3, [r7, #16]
 801759e:	3301      	adds	r3, #1
 80175a0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80175a2:	6a3b      	ldr	r3, [r7, #32]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d104      	bne.n	80175b2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80175a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175aa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80175ac:	69fb      	ldr	r3, [r7, #28]
 80175ae:	61bb      	str	r3, [r7, #24]
 80175b0:	e009      	b.n	80175c6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80175b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175b4:	7fda      	ldrb	r2, [r3, #31]
 80175b6:	6a3b      	ldr	r3, [r7, #32]
 80175b8:	7fdb      	ldrb	r3, [r3, #31]
 80175ba:	429a      	cmp	r2, r3
 80175bc:	d803      	bhi.n	80175c6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80175be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175c0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80175c2:	69fb      	ldr	r3, [r7, #28]
 80175c4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80175c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d001      	beq.n	80175d2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80175ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175d0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80175d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80175d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d1cb      	bne.n	8017576 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80175de:	6a3b      	ldr	r3, [r7, #32]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d008      	beq.n	80175f6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80175e4:	69b9      	ldr	r1, [r7, #24]
 80175e6:	6a38      	ldr	r0, [r7, #32]
 80175e8:	f7ff ff0e 	bl	8017408 <ip_reass_free_complete_datagram>
 80175ec:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80175ee:	697a      	ldr	r2, [r7, #20]
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	4413      	add	r3, r2
 80175f4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80175f6:	697a      	ldr	r2, [r7, #20]
 80175f8:	683b      	ldr	r3, [r7, #0]
 80175fa:	429a      	cmp	r2, r3
 80175fc:	da02      	bge.n	8017604 <ip_reass_remove_oldest_datagram+0xb4>
 80175fe:	693b      	ldr	r3, [r7, #16]
 8017600:	2b01      	cmp	r3, #1
 8017602:	dcac      	bgt.n	801755e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017604:	697b      	ldr	r3, [r7, #20]
}
 8017606:	4618      	mov	r0, r3
 8017608:	3728      	adds	r7, #40	; 0x28
 801760a:	46bd      	mov	sp, r7
 801760c:	bd80      	pop	{r7, pc}
 801760e:	bf00      	nop
 8017610:	20011510 	.word	0x20011510

08017614 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b084      	sub	sp, #16
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
 801761c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801761e:	2004      	movs	r0, #4
 8017620:	f7f6 fb12 	bl	800dc48 <memp_malloc>
 8017624:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	2b00      	cmp	r3, #0
 801762a:	d110      	bne.n	801764e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801762c:	6839      	ldr	r1, [r7, #0]
 801762e:	6878      	ldr	r0, [r7, #4]
 8017630:	f7ff ff8e 	bl	8017550 <ip_reass_remove_oldest_datagram>
 8017634:	4602      	mov	r2, r0
 8017636:	683b      	ldr	r3, [r7, #0]
 8017638:	4293      	cmp	r3, r2
 801763a:	dc03      	bgt.n	8017644 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801763c:	2004      	movs	r0, #4
 801763e:	f7f6 fb03 	bl	800dc48 <memp_malloc>
 8017642:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d101      	bne.n	801764e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801764a:	2300      	movs	r3, #0
 801764c:	e016      	b.n	801767c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801764e:	2220      	movs	r2, #32
 8017650:	2100      	movs	r1, #0
 8017652:	68f8      	ldr	r0, [r7, #12]
 8017654:	f006 f884 	bl	801d760 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	220f      	movs	r2, #15
 801765c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801765e:	4b09      	ldr	r3, [pc, #36]	; (8017684 <ip_reass_enqueue_new_datagram+0x70>)
 8017660:	681a      	ldr	r2, [r3, #0]
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017666:	4a07      	ldr	r2, [pc, #28]	; (8017684 <ip_reass_enqueue_new_datagram+0x70>)
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	3308      	adds	r3, #8
 8017670:	2214      	movs	r2, #20
 8017672:	6879      	ldr	r1, [r7, #4]
 8017674:	4618      	mov	r0, r3
 8017676:	f006 f865 	bl	801d744 <memcpy>
  return ipr;
 801767a:	68fb      	ldr	r3, [r7, #12]
}
 801767c:	4618      	mov	r0, r3
 801767e:	3710      	adds	r7, #16
 8017680:	46bd      	mov	sp, r7
 8017682:	bd80      	pop	{r7, pc}
 8017684:	20011510 	.word	0x20011510

08017688 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017688:	b580      	push	{r7, lr}
 801768a:	b082      	sub	sp, #8
 801768c:	af00      	add	r7, sp, #0
 801768e:	6078      	str	r0, [r7, #4]
 8017690:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017692:	4b10      	ldr	r3, [pc, #64]	; (80176d4 <ip_reass_dequeue_datagram+0x4c>)
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	687a      	ldr	r2, [r7, #4]
 8017698:	429a      	cmp	r2, r3
 801769a:	d104      	bne.n	80176a6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	4a0c      	ldr	r2, [pc, #48]	; (80176d4 <ip_reass_dequeue_datagram+0x4c>)
 80176a2:	6013      	str	r3, [r2, #0]
 80176a4:	e00d      	b.n	80176c2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d106      	bne.n	80176ba <ip_reass_dequeue_datagram+0x32>
 80176ac:	4b0a      	ldr	r3, [pc, #40]	; (80176d8 <ip_reass_dequeue_datagram+0x50>)
 80176ae:	f240 1245 	movw	r2, #325	; 0x145
 80176b2:	490a      	ldr	r1, [pc, #40]	; (80176dc <ip_reass_dequeue_datagram+0x54>)
 80176b4:	480a      	ldr	r0, [pc, #40]	; (80176e0 <ip_reass_dequeue_datagram+0x58>)
 80176b6:	f006 f85b 	bl	801d770 <iprintf>
    prev->next = ipr->next;
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	681a      	ldr	r2, [r3, #0]
 80176be:	683b      	ldr	r3, [r7, #0]
 80176c0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80176c2:	6879      	ldr	r1, [r7, #4]
 80176c4:	2004      	movs	r0, #4
 80176c6:	f7f6 fb35 	bl	800dd34 <memp_free>
}
 80176ca:	bf00      	nop
 80176cc:	3708      	adds	r7, #8
 80176ce:	46bd      	mov	sp, r7
 80176d0:	bd80      	pop	{r7, pc}
 80176d2:	bf00      	nop
 80176d4:	20011510 	.word	0x20011510
 80176d8:	08021c78 	.word	0x08021c78
 80176dc:	08021d40 	.word	0x08021d40
 80176e0:	08021cc0 	.word	0x08021cc0

080176e4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b08c      	sub	sp, #48	; 0x30
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	60f8      	str	r0, [r7, #12]
 80176ec:	60b9      	str	r1, [r7, #8]
 80176ee:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80176f0:	2300      	movs	r3, #0
 80176f2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80176f4:	2301      	movs	r3, #1
 80176f6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80176f8:	68bb      	ldr	r3, [r7, #8]
 80176fa:	685b      	ldr	r3, [r3, #4]
 80176fc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80176fe:	69fb      	ldr	r3, [r7, #28]
 8017700:	885b      	ldrh	r3, [r3, #2]
 8017702:	b29b      	uxth	r3, r3
 8017704:	4618      	mov	r0, r3
 8017706:	f7f5 fdb7 	bl	800d278 <lwip_htons>
 801770a:	4603      	mov	r3, r0
 801770c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801770e:	69fb      	ldr	r3, [r7, #28]
 8017710:	781b      	ldrb	r3, [r3, #0]
 8017712:	f003 030f 	and.w	r3, r3, #15
 8017716:	b2db      	uxtb	r3, r3
 8017718:	009b      	lsls	r3, r3, #2
 801771a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801771c:	7e7b      	ldrb	r3, [r7, #25]
 801771e:	b29b      	uxth	r3, r3
 8017720:	8b7a      	ldrh	r2, [r7, #26]
 8017722:	429a      	cmp	r2, r3
 8017724:	d202      	bcs.n	801772c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801772a:	e135      	b.n	8017998 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801772c:	7e7b      	ldrb	r3, [r7, #25]
 801772e:	b29b      	uxth	r3, r3
 8017730:	8b7a      	ldrh	r2, [r7, #26]
 8017732:	1ad3      	subs	r3, r2, r3
 8017734:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017736:	69fb      	ldr	r3, [r7, #28]
 8017738:	88db      	ldrh	r3, [r3, #6]
 801773a:	b29b      	uxth	r3, r3
 801773c:	4618      	mov	r0, r3
 801773e:	f7f5 fd9b 	bl	800d278 <lwip_htons>
 8017742:	4603      	mov	r3, r0
 8017744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017748:	b29b      	uxth	r3, r3
 801774a:	00db      	lsls	r3, r3, #3
 801774c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801774e:	68bb      	ldr	r3, [r7, #8]
 8017750:	685b      	ldr	r3, [r3, #4]
 8017752:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017756:	2200      	movs	r2, #0
 8017758:	701a      	strb	r2, [r3, #0]
 801775a:	2200      	movs	r2, #0
 801775c:	705a      	strb	r2, [r3, #1]
 801775e:	2200      	movs	r2, #0
 8017760:	709a      	strb	r2, [r3, #2]
 8017762:	2200      	movs	r2, #0
 8017764:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017768:	8afa      	ldrh	r2, [r7, #22]
 801776a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801776c:	8afa      	ldrh	r2, [r7, #22]
 801776e:	8b7b      	ldrh	r3, [r7, #26]
 8017770:	4413      	add	r3, r2
 8017772:	b29a      	uxth	r2, r3
 8017774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017776:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801777a:	88db      	ldrh	r3, [r3, #6]
 801777c:	b29b      	uxth	r3, r3
 801777e:	8afa      	ldrh	r2, [r7, #22]
 8017780:	429a      	cmp	r2, r3
 8017782:	d902      	bls.n	801778a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017788:	e106      	b.n	8017998 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	685b      	ldr	r3, [r3, #4]
 801778e:	627b      	str	r3, [r7, #36]	; 0x24
 8017790:	e068      	b.n	8017864 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017794:	685b      	ldr	r3, [r3, #4]
 8017796:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801779a:	889b      	ldrh	r3, [r3, #4]
 801779c:	b29a      	uxth	r2, r3
 801779e:	693b      	ldr	r3, [r7, #16]
 80177a0:	889b      	ldrh	r3, [r3, #4]
 80177a2:	b29b      	uxth	r3, r3
 80177a4:	429a      	cmp	r2, r3
 80177a6:	d235      	bcs.n	8017814 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80177a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80177ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d020      	beq.n	80177f6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80177b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177b6:	889b      	ldrh	r3, [r3, #4]
 80177b8:	b29a      	uxth	r2, r3
 80177ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177bc:	88db      	ldrh	r3, [r3, #6]
 80177be:	b29b      	uxth	r3, r3
 80177c0:	429a      	cmp	r2, r3
 80177c2:	d307      	bcc.n	80177d4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80177c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177c6:	88db      	ldrh	r3, [r3, #6]
 80177c8:	b29a      	uxth	r2, r3
 80177ca:	693b      	ldr	r3, [r7, #16]
 80177cc:	889b      	ldrh	r3, [r3, #4]
 80177ce:	b29b      	uxth	r3, r3
 80177d0:	429a      	cmp	r2, r3
 80177d2:	d902      	bls.n	80177da <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80177d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80177d8:	e0de      	b.n	8017998 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80177da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177dc:	68ba      	ldr	r2, [r7, #8]
 80177de:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80177e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177e2:	88db      	ldrh	r3, [r3, #6]
 80177e4:	b29a      	uxth	r2, r3
 80177e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177e8:	889b      	ldrh	r3, [r3, #4]
 80177ea:	b29b      	uxth	r3, r3
 80177ec:	429a      	cmp	r2, r3
 80177ee:	d03d      	beq.n	801786c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80177f0:	2300      	movs	r3, #0
 80177f2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80177f4:	e03a      	b.n	801786c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80177f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177f8:	88db      	ldrh	r3, [r3, #6]
 80177fa:	b29a      	uxth	r2, r3
 80177fc:	693b      	ldr	r3, [r7, #16]
 80177fe:	889b      	ldrh	r3, [r3, #4]
 8017800:	b29b      	uxth	r3, r3
 8017802:	429a      	cmp	r2, r3
 8017804:	d902      	bls.n	801780c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801780a:	e0c5      	b.n	8017998 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	68ba      	ldr	r2, [r7, #8]
 8017810:	605a      	str	r2, [r3, #4]
      break;
 8017812:	e02b      	b.n	801786c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017816:	889b      	ldrh	r3, [r3, #4]
 8017818:	b29a      	uxth	r2, r3
 801781a:	693b      	ldr	r3, [r7, #16]
 801781c:	889b      	ldrh	r3, [r3, #4]
 801781e:	b29b      	uxth	r3, r3
 8017820:	429a      	cmp	r2, r3
 8017822:	d102      	bne.n	801782a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017828:	e0b6      	b.n	8017998 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801782a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801782c:	889b      	ldrh	r3, [r3, #4]
 801782e:	b29a      	uxth	r2, r3
 8017830:	693b      	ldr	r3, [r7, #16]
 8017832:	88db      	ldrh	r3, [r3, #6]
 8017834:	b29b      	uxth	r3, r3
 8017836:	429a      	cmp	r2, r3
 8017838:	d202      	bcs.n	8017840 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801783a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801783e:	e0ab      	b.n	8017998 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017842:	2b00      	cmp	r3, #0
 8017844:	d009      	beq.n	801785a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017848:	88db      	ldrh	r3, [r3, #6]
 801784a:	b29a      	uxth	r2, r3
 801784c:	693b      	ldr	r3, [r7, #16]
 801784e:	889b      	ldrh	r3, [r3, #4]
 8017850:	b29b      	uxth	r3, r3
 8017852:	429a      	cmp	r2, r3
 8017854:	d001      	beq.n	801785a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017856:	2300      	movs	r3, #0
 8017858:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801785a:	693b      	ldr	r3, [r7, #16]
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017860:	693b      	ldr	r3, [r7, #16]
 8017862:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017866:	2b00      	cmp	r3, #0
 8017868:	d193      	bne.n	8017792 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801786a:	e000      	b.n	801786e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801786c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017870:	2b00      	cmp	r3, #0
 8017872:	d12d      	bne.n	80178d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017876:	2b00      	cmp	r3, #0
 8017878:	d01c      	beq.n	80178b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801787a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801787c:	88db      	ldrh	r3, [r3, #6]
 801787e:	b29a      	uxth	r2, r3
 8017880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017882:	889b      	ldrh	r3, [r3, #4]
 8017884:	b29b      	uxth	r3, r3
 8017886:	429a      	cmp	r2, r3
 8017888:	d906      	bls.n	8017898 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801788a:	4b45      	ldr	r3, [pc, #276]	; (80179a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801788c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017890:	4944      	ldr	r1, [pc, #272]	; (80179a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017892:	4845      	ldr	r0, [pc, #276]	; (80179a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017894:	f005 ff6c 	bl	801d770 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801789a:	68ba      	ldr	r2, [r7, #8]
 801789c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178a0:	88db      	ldrh	r3, [r3, #6]
 80178a2:	b29a      	uxth	r2, r3
 80178a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178a6:	889b      	ldrh	r3, [r3, #4]
 80178a8:	b29b      	uxth	r3, r3
 80178aa:	429a      	cmp	r2, r3
 80178ac:	d010      	beq.n	80178d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80178ae:	2300      	movs	r3, #0
 80178b0:	623b      	str	r3, [r7, #32]
 80178b2:	e00d      	b.n	80178d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	685b      	ldr	r3, [r3, #4]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d006      	beq.n	80178ca <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80178bc:	4b38      	ldr	r3, [pc, #224]	; (80179a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80178be:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80178c2:	493a      	ldr	r1, [pc, #232]	; (80179ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80178c4:	4838      	ldr	r0, [pc, #224]	; (80179a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80178c6:	f005 ff53 	bl	801d770 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	68ba      	ldr	r2, [r7, #8]
 80178ce:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d105      	bne.n	80178e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	7f9b      	ldrb	r3, [r3, #30]
 80178da:	f003 0301 	and.w	r3, r3, #1
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d059      	beq.n	8017996 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80178e2:	6a3b      	ldr	r3, [r7, #32]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d04f      	beq.n	8017988 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	685b      	ldr	r3, [r3, #4]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d006      	beq.n	80178fe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	685b      	ldr	r3, [r3, #4]
 80178f4:	685b      	ldr	r3, [r3, #4]
 80178f6:	889b      	ldrh	r3, [r3, #4]
 80178f8:	b29b      	uxth	r3, r3
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d002      	beq.n	8017904 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80178fe:	2300      	movs	r3, #0
 8017900:	623b      	str	r3, [r7, #32]
 8017902:	e041      	b.n	8017988 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017906:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801790e:	e012      	b.n	8017936 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017912:	685b      	ldr	r3, [r3, #4]
 8017914:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017918:	88db      	ldrh	r3, [r3, #6]
 801791a:	b29a      	uxth	r2, r3
 801791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801791e:	889b      	ldrh	r3, [r3, #4]
 8017920:	b29b      	uxth	r3, r3
 8017922:	429a      	cmp	r2, r3
 8017924:	d002      	beq.n	801792c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017926:	2300      	movs	r3, #0
 8017928:	623b      	str	r3, [r7, #32]
            break;
 801792a:	e007      	b.n	801793c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801792c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801792e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017938:	2b00      	cmp	r3, #0
 801793a:	d1e9      	bne.n	8017910 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801793c:	6a3b      	ldr	r3, [r7, #32]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d022      	beq.n	8017988 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	685b      	ldr	r3, [r3, #4]
 8017946:	2b00      	cmp	r3, #0
 8017948:	d106      	bne.n	8017958 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801794a:	4b15      	ldr	r3, [pc, #84]	; (80179a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801794c:	f240 12df 	movw	r2, #479	; 0x1df
 8017950:	4917      	ldr	r1, [pc, #92]	; (80179b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017952:	4815      	ldr	r0, [pc, #84]	; (80179a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017954:	f005 ff0c 	bl	801d770 <iprintf>
          LWIP_ASSERT("sanity check",
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	685b      	ldr	r3, [r3, #4]
 801795c:	685b      	ldr	r3, [r3, #4]
 801795e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017960:	429a      	cmp	r2, r3
 8017962:	d106      	bne.n	8017972 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017964:	4b0e      	ldr	r3, [pc, #56]	; (80179a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017966:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801796a:	4911      	ldr	r1, [pc, #68]	; (80179b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801796c:	480e      	ldr	r0, [pc, #56]	; (80179a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801796e:	f005 feff 	bl	801d770 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d006      	beq.n	8017988 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801797a:	4b09      	ldr	r3, [pc, #36]	; (80179a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801797c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017980:	490c      	ldr	r1, [pc, #48]	; (80179b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017982:	4809      	ldr	r0, [pc, #36]	; (80179a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017984:	f005 fef4 	bl	801d770 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017988:	6a3b      	ldr	r3, [r7, #32]
 801798a:	2b00      	cmp	r3, #0
 801798c:	bf14      	ite	ne
 801798e:	2301      	movne	r3, #1
 8017990:	2300      	moveq	r3, #0
 8017992:	b2db      	uxtb	r3, r3
 8017994:	e000      	b.n	8017998 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017996:	2300      	movs	r3, #0
}
 8017998:	4618      	mov	r0, r3
 801799a:	3730      	adds	r7, #48	; 0x30
 801799c:	46bd      	mov	sp, r7
 801799e:	bd80      	pop	{r7, pc}
 80179a0:	08021c78 	.word	0x08021c78
 80179a4:	08021d5c 	.word	0x08021d5c
 80179a8:	08021cc0 	.word	0x08021cc0
 80179ac:	08021d7c 	.word	0x08021d7c
 80179b0:	08021db4 	.word	0x08021db4
 80179b4:	08021dc4 	.word	0x08021dc4

080179b8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80179b8:	b580      	push	{r7, lr}
 80179ba:	b08e      	sub	sp, #56	; 0x38
 80179bc:	af00      	add	r7, sp, #0
 80179be:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	685b      	ldr	r3, [r3, #4]
 80179c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80179c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179c8:	781b      	ldrb	r3, [r3, #0]
 80179ca:	f003 030f 	and.w	r3, r3, #15
 80179ce:	b2db      	uxtb	r3, r3
 80179d0:	009b      	lsls	r3, r3, #2
 80179d2:	b2db      	uxtb	r3, r3
 80179d4:	2b14      	cmp	r3, #20
 80179d6:	f040 8171 	bne.w	8017cbc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80179da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179dc:	88db      	ldrh	r3, [r3, #6]
 80179de:	b29b      	uxth	r3, r3
 80179e0:	4618      	mov	r0, r3
 80179e2:	f7f5 fc49 	bl	800d278 <lwip_htons>
 80179e6:	4603      	mov	r3, r0
 80179e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80179ec:	b29b      	uxth	r3, r3
 80179ee:	00db      	lsls	r3, r3, #3
 80179f0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80179f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179f4:	885b      	ldrh	r3, [r3, #2]
 80179f6:	b29b      	uxth	r3, r3
 80179f8:	4618      	mov	r0, r3
 80179fa:	f7f5 fc3d 	bl	800d278 <lwip_htons>
 80179fe:	4603      	mov	r3, r0
 8017a00:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a04:	781b      	ldrb	r3, [r3, #0]
 8017a06:	f003 030f 	and.w	r3, r3, #15
 8017a0a:	b2db      	uxtb	r3, r3
 8017a0c:	009b      	lsls	r3, r3, #2
 8017a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017a12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017a16:	b29b      	uxth	r3, r3
 8017a18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017a1a:	429a      	cmp	r2, r3
 8017a1c:	f0c0 8150 	bcc.w	8017cc0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017a20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017a24:	b29b      	uxth	r3, r3
 8017a26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017a28:	1ad3      	subs	r3, r2, r3
 8017a2a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017a2c:	6878      	ldr	r0, [r7, #4]
 8017a2e:	f7f7 f8b3 	bl	800eb98 <pbuf_clen>
 8017a32:	4603      	mov	r3, r0
 8017a34:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017a36:	4b8c      	ldr	r3, [pc, #560]	; (8017c68 <ip4_reass+0x2b0>)
 8017a38:	881b      	ldrh	r3, [r3, #0]
 8017a3a:	461a      	mov	r2, r3
 8017a3c:	8c3b      	ldrh	r3, [r7, #32]
 8017a3e:	4413      	add	r3, r2
 8017a40:	2b0a      	cmp	r3, #10
 8017a42:	dd10      	ble.n	8017a66 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017a44:	8c3b      	ldrh	r3, [r7, #32]
 8017a46:	4619      	mov	r1, r3
 8017a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a4a:	f7ff fd81 	bl	8017550 <ip_reass_remove_oldest_datagram>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	f000 8137 	beq.w	8017cc4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017a56:	4b84      	ldr	r3, [pc, #528]	; (8017c68 <ip4_reass+0x2b0>)
 8017a58:	881b      	ldrh	r3, [r3, #0]
 8017a5a:	461a      	mov	r2, r3
 8017a5c:	8c3b      	ldrh	r3, [r7, #32]
 8017a5e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017a60:	2b0a      	cmp	r3, #10
 8017a62:	f300 812f 	bgt.w	8017cc4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017a66:	4b81      	ldr	r3, [pc, #516]	; (8017c6c <ip4_reass+0x2b4>)
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	633b      	str	r3, [r7, #48]	; 0x30
 8017a6c:	e015      	b.n	8017a9a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a70:	695a      	ldr	r2, [r3, #20]
 8017a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a74:	68db      	ldr	r3, [r3, #12]
 8017a76:	429a      	cmp	r2, r3
 8017a78:	d10c      	bne.n	8017a94 <ip4_reass+0xdc>
 8017a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a7c:	699a      	ldr	r2, [r3, #24]
 8017a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a80:	691b      	ldr	r3, [r3, #16]
 8017a82:	429a      	cmp	r2, r3
 8017a84:	d106      	bne.n	8017a94 <ip4_reass+0xdc>
 8017a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a88:	899a      	ldrh	r2, [r3, #12]
 8017a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a8c:	889b      	ldrh	r3, [r3, #4]
 8017a8e:	b29b      	uxth	r3, r3
 8017a90:	429a      	cmp	r2, r3
 8017a92:	d006      	beq.n	8017aa2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	633b      	str	r3, [r7, #48]	; 0x30
 8017a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d1e6      	bne.n	8017a6e <ip4_reass+0xb6>
 8017aa0:	e000      	b.n	8017aa4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017aa2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d109      	bne.n	8017abe <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017aaa:	8c3b      	ldrh	r3, [r7, #32]
 8017aac:	4619      	mov	r1, r3
 8017aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ab0:	f7ff fdb0 	bl	8017614 <ip_reass_enqueue_new_datagram>
 8017ab4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d11c      	bne.n	8017af6 <ip4_reass+0x13e>
      goto nullreturn;
 8017abc:	e105      	b.n	8017cca <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ac0:	88db      	ldrh	r3, [r3, #6]
 8017ac2:	b29b      	uxth	r3, r3
 8017ac4:	4618      	mov	r0, r3
 8017ac6:	f7f5 fbd7 	bl	800d278 <lwip_htons>
 8017aca:	4603      	mov	r3, r0
 8017acc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d110      	bne.n	8017af6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ad6:	89db      	ldrh	r3, [r3, #14]
 8017ad8:	4618      	mov	r0, r3
 8017ada:	f7f5 fbcd 	bl	800d278 <lwip_htons>
 8017ade:	4603      	mov	r3, r0
 8017ae0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d006      	beq.n	8017af6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aea:	3308      	adds	r3, #8
 8017aec:	2214      	movs	r2, #20
 8017aee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017af0:	4618      	mov	r0, r3
 8017af2:	f005 fe27 	bl	801d744 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017af8:	88db      	ldrh	r3, [r3, #6]
 8017afa:	b29b      	uxth	r3, r3
 8017afc:	f003 0320 	and.w	r3, r3, #32
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	bf0c      	ite	eq
 8017b04:	2301      	moveq	r3, #1
 8017b06:	2300      	movne	r3, #0
 8017b08:	b2db      	uxtb	r3, r3
 8017b0a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017b0c:	69fb      	ldr	r3, [r7, #28]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d00e      	beq.n	8017b30 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017b12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017b14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017b16:	4413      	add	r3, r2
 8017b18:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017b1a:	8b7a      	ldrh	r2, [r7, #26]
 8017b1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017b1e:	429a      	cmp	r2, r3
 8017b20:	f0c0 80a0 	bcc.w	8017c64 <ip4_reass+0x2ac>
 8017b24:	8b7b      	ldrh	r3, [r7, #26]
 8017b26:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017b2a:	4293      	cmp	r3, r2
 8017b2c:	f200 809a 	bhi.w	8017c64 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017b30:	69fa      	ldr	r2, [r7, #28]
 8017b32:	6879      	ldr	r1, [r7, #4]
 8017b34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b36:	f7ff fdd5 	bl	80176e4 <ip_reass_chain_frag_into_datagram_and_validate>
 8017b3a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017b3c:	697b      	ldr	r3, [r7, #20]
 8017b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017b42:	f000 809b 	beq.w	8017c7c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017b46:	4b48      	ldr	r3, [pc, #288]	; (8017c68 <ip4_reass+0x2b0>)
 8017b48:	881a      	ldrh	r2, [r3, #0]
 8017b4a:	8c3b      	ldrh	r3, [r7, #32]
 8017b4c:	4413      	add	r3, r2
 8017b4e:	b29a      	uxth	r2, r3
 8017b50:	4b45      	ldr	r3, [pc, #276]	; (8017c68 <ip4_reass+0x2b0>)
 8017b52:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017b54:	69fb      	ldr	r3, [r7, #28]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d00d      	beq.n	8017b76 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017b5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017b5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017b5e:	4413      	add	r3, r2
 8017b60:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b64:	8a7a      	ldrh	r2, [r7, #18]
 8017b66:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b6a:	7f9b      	ldrb	r3, [r3, #30]
 8017b6c:	f043 0301 	orr.w	r3, r3, #1
 8017b70:	b2da      	uxtb	r2, r3
 8017b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b74:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017b76:	697b      	ldr	r3, [r7, #20]
 8017b78:	2b01      	cmp	r3, #1
 8017b7a:	d171      	bne.n	8017c60 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b7e:	8b9b      	ldrh	r3, [r3, #28]
 8017b80:	3314      	adds	r3, #20
 8017b82:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b86:	685b      	ldr	r3, [r3, #4]
 8017b88:	685b      	ldr	r3, [r3, #4]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b90:	685b      	ldr	r3, [r3, #4]
 8017b92:	685b      	ldr	r3, [r3, #4]
 8017b94:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b98:	3308      	adds	r3, #8
 8017b9a:	2214      	movs	r2, #20
 8017b9c:	4619      	mov	r1, r3
 8017b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ba0:	f005 fdd0 	bl	801d744 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017ba4:	8a3b      	ldrh	r3, [r7, #16]
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	f7f5 fb66 	bl	800d278 <lwip_htons>
 8017bac:	4603      	mov	r3, r0
 8017bae:	461a      	mov	r2, r3
 8017bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bb2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bb6:	2200      	movs	r2, #0
 8017bb8:	719a      	strb	r2, [r3, #6]
 8017bba:	2200      	movs	r2, #0
 8017bbc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	729a      	strb	r2, [r3, #10]
 8017bc4:	2200      	movs	r2, #0
 8017bc6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bca:	685b      	ldr	r3, [r3, #4]
 8017bcc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017bce:	e00d      	b.n	8017bec <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bd2:	685b      	ldr	r3, [r3, #4]
 8017bd4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017bd6:	2114      	movs	r1, #20
 8017bd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017bda:	f7f6 fec9 	bl	800e970 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017bde:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017be0:	6878      	ldr	r0, [r7, #4]
 8017be2:	f7f7 f819 	bl	800ec18 <pbuf_cat>
      r = iprh->next_pbuf;
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d1ee      	bne.n	8017bd0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017bf2:	4b1e      	ldr	r3, [pc, #120]	; (8017c6c <ip4_reass+0x2b4>)
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017bf8:	429a      	cmp	r2, r3
 8017bfa:	d102      	bne.n	8017c02 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017c00:	e010      	b.n	8017c24 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017c02:	4b1a      	ldr	r3, [pc, #104]	; (8017c6c <ip4_reass+0x2b4>)
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017c08:	e007      	b.n	8017c1a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c10:	429a      	cmp	r2, r3
 8017c12:	d006      	beq.n	8017c22 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d1f4      	bne.n	8017c0a <ip4_reass+0x252>
 8017c20:	e000      	b.n	8017c24 <ip4_reass+0x26c>
          break;
 8017c22:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017c24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017c26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017c28:	f7ff fd2e 	bl	8017688 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017c2c:	6878      	ldr	r0, [r7, #4]
 8017c2e:	f7f6 ffb3 	bl	800eb98 <pbuf_clen>
 8017c32:	4603      	mov	r3, r0
 8017c34:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017c36:	4b0c      	ldr	r3, [pc, #48]	; (8017c68 <ip4_reass+0x2b0>)
 8017c38:	881b      	ldrh	r3, [r3, #0]
 8017c3a:	8c3a      	ldrh	r2, [r7, #32]
 8017c3c:	429a      	cmp	r2, r3
 8017c3e:	d906      	bls.n	8017c4e <ip4_reass+0x296>
 8017c40:	4b0b      	ldr	r3, [pc, #44]	; (8017c70 <ip4_reass+0x2b8>)
 8017c42:	f240 229b 	movw	r2, #667	; 0x29b
 8017c46:	490b      	ldr	r1, [pc, #44]	; (8017c74 <ip4_reass+0x2bc>)
 8017c48:	480b      	ldr	r0, [pc, #44]	; (8017c78 <ip4_reass+0x2c0>)
 8017c4a:	f005 fd91 	bl	801d770 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017c4e:	4b06      	ldr	r3, [pc, #24]	; (8017c68 <ip4_reass+0x2b0>)
 8017c50:	881a      	ldrh	r2, [r3, #0]
 8017c52:	8c3b      	ldrh	r3, [r7, #32]
 8017c54:	1ad3      	subs	r3, r2, r3
 8017c56:	b29a      	uxth	r2, r3
 8017c58:	4b03      	ldr	r3, [pc, #12]	; (8017c68 <ip4_reass+0x2b0>)
 8017c5a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	e038      	b.n	8017cd2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017c60:	2300      	movs	r3, #0
 8017c62:	e036      	b.n	8017cd2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017c64:	bf00      	nop
 8017c66:	e00a      	b.n	8017c7e <ip4_reass+0x2c6>
 8017c68:	20011514 	.word	0x20011514
 8017c6c:	20011510 	.word	0x20011510
 8017c70:	08021c78 	.word	0x08021c78
 8017c74:	08021de8 	.word	0x08021de8
 8017c78:	08021cc0 	.word	0x08021cc0
    goto nullreturn_ipr;
 8017c7c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d106      	bne.n	8017c92 <ip4_reass+0x2da>
 8017c84:	4b15      	ldr	r3, [pc, #84]	; (8017cdc <ip4_reass+0x324>)
 8017c86:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017c8a:	4915      	ldr	r1, [pc, #84]	; (8017ce0 <ip4_reass+0x328>)
 8017c8c:	4815      	ldr	r0, [pc, #84]	; (8017ce4 <ip4_reass+0x32c>)
 8017c8e:	f005 fd6f 	bl	801d770 <iprintf>
  if (ipr->p == NULL) {
 8017c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c94:	685b      	ldr	r3, [r3, #4]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d116      	bne.n	8017cc8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017c9a:	4b13      	ldr	r3, [pc, #76]	; (8017ce8 <ip4_reass+0x330>)
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ca0:	429a      	cmp	r2, r3
 8017ca2:	d006      	beq.n	8017cb2 <ip4_reass+0x2fa>
 8017ca4:	4b0d      	ldr	r3, [pc, #52]	; (8017cdc <ip4_reass+0x324>)
 8017ca6:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017caa:	4910      	ldr	r1, [pc, #64]	; (8017cec <ip4_reass+0x334>)
 8017cac:	480d      	ldr	r0, [pc, #52]	; (8017ce4 <ip4_reass+0x32c>)
 8017cae:	f005 fd5f 	bl	801d770 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017cb2:	2100      	movs	r1, #0
 8017cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017cb6:	f7ff fce7 	bl	8017688 <ip_reass_dequeue_datagram>
 8017cba:	e006      	b.n	8017cca <ip4_reass+0x312>
    goto nullreturn;
 8017cbc:	bf00      	nop
 8017cbe:	e004      	b.n	8017cca <ip4_reass+0x312>
    goto nullreturn;
 8017cc0:	bf00      	nop
 8017cc2:	e002      	b.n	8017cca <ip4_reass+0x312>
      goto nullreturn;
 8017cc4:	bf00      	nop
 8017cc6:	e000      	b.n	8017cca <ip4_reass+0x312>
  }

nullreturn:
 8017cc8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017cca:	6878      	ldr	r0, [r7, #4]
 8017ccc:	f7f6 fed6 	bl	800ea7c <pbuf_free>
  return NULL;
 8017cd0:	2300      	movs	r3, #0
}
 8017cd2:	4618      	mov	r0, r3
 8017cd4:	3738      	adds	r7, #56	; 0x38
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	bd80      	pop	{r7, pc}
 8017cda:	bf00      	nop
 8017cdc:	08021c78 	.word	0x08021c78
 8017ce0:	08021e04 	.word	0x08021e04
 8017ce4:	08021cc0 	.word	0x08021cc0
 8017ce8:	20011510 	.word	0x20011510
 8017cec:	08021e10 	.word	0x08021e10

08017cf0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017cf4:	2005      	movs	r0, #5
 8017cf6:	f7f5 ffa7 	bl	800dc48 <memp_malloc>
 8017cfa:	4603      	mov	r3, r0
}
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	bd80      	pop	{r7, pc}

08017d00 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017d00:	b580      	push	{r7, lr}
 8017d02:	b082      	sub	sp, #8
 8017d04:	af00      	add	r7, sp, #0
 8017d06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d106      	bne.n	8017d1c <ip_frag_free_pbuf_custom_ref+0x1c>
 8017d0e:	4b07      	ldr	r3, [pc, #28]	; (8017d2c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017d10:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017d14:	4906      	ldr	r1, [pc, #24]	; (8017d30 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017d16:	4807      	ldr	r0, [pc, #28]	; (8017d34 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017d18:	f005 fd2a 	bl	801d770 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017d1c:	6879      	ldr	r1, [r7, #4]
 8017d1e:	2005      	movs	r0, #5
 8017d20:	f7f6 f808 	bl	800dd34 <memp_free>
}
 8017d24:	bf00      	nop
 8017d26:	3708      	adds	r7, #8
 8017d28:	46bd      	mov	sp, r7
 8017d2a:	bd80      	pop	{r7, pc}
 8017d2c:	08021c78 	.word	0x08021c78
 8017d30:	08021e30 	.word	0x08021e30
 8017d34:	08021cc0 	.word	0x08021cc0

08017d38 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	b084      	sub	sp, #16
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d106      	bne.n	8017d58 <ipfrag_free_pbuf_custom+0x20>
 8017d4a:	4b11      	ldr	r3, [pc, #68]	; (8017d90 <ipfrag_free_pbuf_custom+0x58>)
 8017d4c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017d50:	4910      	ldr	r1, [pc, #64]	; (8017d94 <ipfrag_free_pbuf_custom+0x5c>)
 8017d52:	4811      	ldr	r0, [pc, #68]	; (8017d98 <ipfrag_free_pbuf_custom+0x60>)
 8017d54:	f005 fd0c 	bl	801d770 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017d58:	68fa      	ldr	r2, [r7, #12]
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	429a      	cmp	r2, r3
 8017d5e:	d006      	beq.n	8017d6e <ipfrag_free_pbuf_custom+0x36>
 8017d60:	4b0b      	ldr	r3, [pc, #44]	; (8017d90 <ipfrag_free_pbuf_custom+0x58>)
 8017d62:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017d66:	490d      	ldr	r1, [pc, #52]	; (8017d9c <ipfrag_free_pbuf_custom+0x64>)
 8017d68:	480b      	ldr	r0, [pc, #44]	; (8017d98 <ipfrag_free_pbuf_custom+0x60>)
 8017d6a:	f005 fd01 	bl	801d770 <iprintf>
  if (pcr->original != NULL) {
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	695b      	ldr	r3, [r3, #20]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d004      	beq.n	8017d80 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	695b      	ldr	r3, [r3, #20]
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	f7f6 fe7e 	bl	800ea7c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017d80:	68f8      	ldr	r0, [r7, #12]
 8017d82:	f7ff ffbd 	bl	8017d00 <ip_frag_free_pbuf_custom_ref>
}
 8017d86:	bf00      	nop
 8017d88:	3710      	adds	r7, #16
 8017d8a:	46bd      	mov	sp, r7
 8017d8c:	bd80      	pop	{r7, pc}
 8017d8e:	bf00      	nop
 8017d90:	08021c78 	.word	0x08021c78
 8017d94:	08021e3c 	.word	0x08021e3c
 8017d98:	08021cc0 	.word	0x08021cc0
 8017d9c:	08021e48 	.word	0x08021e48

08017da0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017da0:	b580      	push	{r7, lr}
 8017da2:	b094      	sub	sp, #80	; 0x50
 8017da4:	af02      	add	r7, sp, #8
 8017da6:	60f8      	str	r0, [r7, #12]
 8017da8:	60b9      	str	r1, [r7, #8]
 8017daa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017dac:	2300      	movs	r3, #0
 8017dae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017db2:	68bb      	ldr	r3, [r7, #8]
 8017db4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017db6:	3b14      	subs	r3, #20
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	da00      	bge.n	8017dbe <ip4_frag+0x1e>
 8017dbc:	3307      	adds	r3, #7
 8017dbe:	10db      	asrs	r3, r3, #3
 8017dc0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017dc2:	2314      	movs	r3, #20
 8017dc4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	685b      	ldr	r3, [r3, #4]
 8017dca:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017dce:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dd2:	781b      	ldrb	r3, [r3, #0]
 8017dd4:	f003 030f 	and.w	r3, r3, #15
 8017dd8:	b2db      	uxtb	r3, r3
 8017dda:	009b      	lsls	r3, r3, #2
 8017ddc:	b2db      	uxtb	r3, r3
 8017dde:	2b14      	cmp	r3, #20
 8017de0:	d002      	beq.n	8017de8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017de2:	f06f 0305 	mvn.w	r3, #5
 8017de6:	e110      	b.n	801800a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	895b      	ldrh	r3, [r3, #10]
 8017dec:	2b13      	cmp	r3, #19
 8017dee:	d809      	bhi.n	8017e04 <ip4_frag+0x64>
 8017df0:	4b88      	ldr	r3, [pc, #544]	; (8018014 <ip4_frag+0x274>)
 8017df2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017df6:	4988      	ldr	r1, [pc, #544]	; (8018018 <ip4_frag+0x278>)
 8017df8:	4888      	ldr	r0, [pc, #544]	; (801801c <ip4_frag+0x27c>)
 8017dfa:	f005 fcb9 	bl	801d770 <iprintf>
 8017dfe:	f06f 0305 	mvn.w	r3, #5
 8017e02:	e102      	b.n	801800a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e06:	88db      	ldrh	r3, [r3, #6]
 8017e08:	b29b      	uxth	r3, r3
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	f7f5 fa34 	bl	800d278 <lwip_htons>
 8017e10:	4603      	mov	r3, r0
 8017e12:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017e14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017e16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017e1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017e1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017e24:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	891b      	ldrh	r3, [r3, #8]
 8017e2a:	3b14      	subs	r3, #20
 8017e2c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017e30:	e0e1      	b.n	8017ff6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017e32:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017e34:	00db      	lsls	r3, r3, #3
 8017e36:	b29b      	uxth	r3, r3
 8017e38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017e3c:	4293      	cmp	r3, r2
 8017e3e:	bf28      	it	cs
 8017e40:	4613      	movcs	r3, r2
 8017e42:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017e44:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017e48:	2114      	movs	r1, #20
 8017e4a:	200e      	movs	r0, #14
 8017e4c:	f7f6 fb32 	bl	800e4b4 <pbuf_alloc>
 8017e50:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	f000 80d5 	beq.w	8018004 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e5c:	895b      	ldrh	r3, [r3, #10]
 8017e5e:	2b13      	cmp	r3, #19
 8017e60:	d806      	bhi.n	8017e70 <ip4_frag+0xd0>
 8017e62:	4b6c      	ldr	r3, [pc, #432]	; (8018014 <ip4_frag+0x274>)
 8017e64:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017e68:	496d      	ldr	r1, [pc, #436]	; (8018020 <ip4_frag+0x280>)
 8017e6a:	486c      	ldr	r0, [pc, #432]	; (801801c <ip4_frag+0x27c>)
 8017e6c:	f005 fc80 	bl	801d770 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e72:	685b      	ldr	r3, [r3, #4]
 8017e74:	2214      	movs	r2, #20
 8017e76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017e78:	4618      	mov	r0, r3
 8017e7a:	f005 fc63 	bl	801d744 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e80:	685b      	ldr	r3, [r3, #4]
 8017e82:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017e84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017e86:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017e8a:	e064      	b.n	8017f56 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	895a      	ldrh	r2, [r3, #10]
 8017e90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017e92:	1ad3      	subs	r3, r2, r3
 8017e94:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	895b      	ldrh	r3, [r3, #10]
 8017e9a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017e9c:	429a      	cmp	r2, r3
 8017e9e:	d906      	bls.n	8017eae <ip4_frag+0x10e>
 8017ea0:	4b5c      	ldr	r3, [pc, #368]	; (8018014 <ip4_frag+0x274>)
 8017ea2:	f240 322d 	movw	r2, #813	; 0x32d
 8017ea6:	495f      	ldr	r1, [pc, #380]	; (8018024 <ip4_frag+0x284>)
 8017ea8:	485c      	ldr	r0, [pc, #368]	; (801801c <ip4_frag+0x27c>)
 8017eaa:	f005 fc61 	bl	801d770 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017eae:	8bfa      	ldrh	r2, [r7, #30]
 8017eb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017eb4:	4293      	cmp	r3, r2
 8017eb6:	bf28      	it	cs
 8017eb8:	4613      	movcs	r3, r2
 8017eba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017ebe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d105      	bne.n	8017ed2 <ip4_frag+0x132>
        poff = 0;
 8017ec6:	2300      	movs	r3, #0
 8017ec8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	60fb      	str	r3, [r7, #12]
        continue;
 8017ed0:	e041      	b.n	8017f56 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017ed2:	f7ff ff0d 	bl	8017cf0 <ip_frag_alloc_pbuf_custom_ref>
 8017ed6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017ed8:	69bb      	ldr	r3, [r7, #24]
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d103      	bne.n	8017ee6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017ede:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ee0:	f7f6 fdcc 	bl	800ea7c <pbuf_free>
        goto memerr;
 8017ee4:	e08f      	b.n	8018006 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017ee6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017eec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017eee:	4413      	add	r3, r2
 8017ef0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017ef4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017ef8:	9201      	str	r2, [sp, #4]
 8017efa:	9300      	str	r3, [sp, #0]
 8017efc:	4603      	mov	r3, r0
 8017efe:	2241      	movs	r2, #65	; 0x41
 8017f00:	2000      	movs	r0, #0
 8017f02:	f7f6 fc01 	bl	800e708 <pbuf_alloced_custom>
 8017f06:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017f08:	697b      	ldr	r3, [r7, #20]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d106      	bne.n	8017f1c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017f0e:	69b8      	ldr	r0, [r7, #24]
 8017f10:	f7ff fef6 	bl	8017d00 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017f14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f16:	f7f6 fdb1 	bl	800ea7c <pbuf_free>
        goto memerr;
 8017f1a:	e074      	b.n	8018006 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017f1c:	68f8      	ldr	r0, [r7, #12]
 8017f1e:	f7f6 fe53 	bl	800ebc8 <pbuf_ref>
      pcr->original = p;
 8017f22:	69bb      	ldr	r3, [r7, #24]
 8017f24:	68fa      	ldr	r2, [r7, #12]
 8017f26:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017f28:	69bb      	ldr	r3, [r7, #24]
 8017f2a:	4a3f      	ldr	r2, [pc, #252]	; (8018028 <ip4_frag+0x288>)
 8017f2c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017f2e:	6979      	ldr	r1, [r7, #20]
 8017f30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f32:	f7f6 fe71 	bl	800ec18 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017f36:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017f3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017f3e:	1ad3      	subs	r3, r2, r3
 8017f40:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017f44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d004      	beq.n	8017f56 <ip4_frag+0x1b6>
        poff = 0;
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017f56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d196      	bne.n	8017e8c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017f5e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017f60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017f64:	4413      	add	r3, r2
 8017f66:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017f68:	68bb      	ldr	r3, [r7, #8]
 8017f6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017f6c:	f1a3 0213 	sub.w	r2, r3, #19
 8017f70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017f74:	429a      	cmp	r2, r3
 8017f76:	bfcc      	ite	gt
 8017f78:	2301      	movgt	r3, #1
 8017f7a:	2300      	movle	r3, #0
 8017f7c:	b2db      	uxtb	r3, r3
 8017f7e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017f80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017f84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017f88:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017f8a:	6a3b      	ldr	r3, [r7, #32]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d002      	beq.n	8017f96 <ip4_frag+0x1f6>
 8017f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d003      	beq.n	8017f9e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017f96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017f98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017f9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017f9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	f7f5 f969 	bl	800d278 <lwip_htons>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	461a      	mov	r2, r3
 8017faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fac:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017fae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017fb0:	3314      	adds	r3, #20
 8017fb2:	b29b      	uxth	r3, r3
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	f7f5 f95f 	bl	800d278 <lwip_htons>
 8017fba:	4603      	mov	r3, r0
 8017fbc:	461a      	mov	r2, r3
 8017fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fc0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fc4:	2200      	movs	r2, #0
 8017fc6:	729a      	strb	r2, [r3, #10]
 8017fc8:	2200      	movs	r2, #0
 8017fca:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017fcc:	68bb      	ldr	r3, [r7, #8]
 8017fce:	695b      	ldr	r3, [r3, #20]
 8017fd0:	687a      	ldr	r2, [r7, #4]
 8017fd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017fd4:	68b8      	ldr	r0, [r7, #8]
 8017fd6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017fd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017fda:	f7f6 fd4f 	bl	800ea7c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017fde:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017fe2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017fe4:	1ad3      	subs	r3, r2, r3
 8017fe6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017fea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017fee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017ff0:	4413      	add	r3, r2
 8017ff2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017ff6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	f47f af19 	bne.w	8017e32 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018000:	2300      	movs	r3, #0
 8018002:	e002      	b.n	801800a <ip4_frag+0x26a>
      goto memerr;
 8018004:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801800a:	4618      	mov	r0, r3
 801800c:	3748      	adds	r7, #72	; 0x48
 801800e:	46bd      	mov	sp, r7
 8018010:	bd80      	pop	{r7, pc}
 8018012:	bf00      	nop
 8018014:	08021c78 	.word	0x08021c78
 8018018:	08021e54 	.word	0x08021e54
 801801c:	08021cc0 	.word	0x08021cc0
 8018020:	08021e70 	.word	0x08021e70
 8018024:	08021e90 	.word	0x08021e90
 8018028:	08017d39 	.word	0x08017d39

0801802c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801802c:	b580      	push	{r7, lr}
 801802e:	b086      	sub	sp, #24
 8018030:	af00      	add	r7, sp, #0
 8018032:	6078      	str	r0, [r7, #4]
 8018034:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018036:	230e      	movs	r3, #14
 8018038:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	895b      	ldrh	r3, [r3, #10]
 801803e:	2b0e      	cmp	r3, #14
 8018040:	d96e      	bls.n	8018120 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	7bdb      	ldrb	r3, [r3, #15]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d106      	bne.n	8018058 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801804a:	683b      	ldr	r3, [r7, #0]
 801804c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018050:	3301      	adds	r3, #1
 8018052:	b2da      	uxtb	r2, r3
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	685b      	ldr	r3, [r3, #4]
 801805c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801805e:	693b      	ldr	r3, [r7, #16]
 8018060:	7b1a      	ldrb	r2, [r3, #12]
 8018062:	7b5b      	ldrb	r3, [r3, #13]
 8018064:	021b      	lsls	r3, r3, #8
 8018066:	4313      	orrs	r3, r2
 8018068:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801806a:	693b      	ldr	r3, [r7, #16]
 801806c:	781b      	ldrb	r3, [r3, #0]
 801806e:	f003 0301 	and.w	r3, r3, #1
 8018072:	2b00      	cmp	r3, #0
 8018074:	d023      	beq.n	80180be <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018076:	693b      	ldr	r3, [r7, #16]
 8018078:	781b      	ldrb	r3, [r3, #0]
 801807a:	2b01      	cmp	r3, #1
 801807c:	d10f      	bne.n	801809e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801807e:	693b      	ldr	r3, [r7, #16]
 8018080:	785b      	ldrb	r3, [r3, #1]
 8018082:	2b00      	cmp	r3, #0
 8018084:	d11b      	bne.n	80180be <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018086:	693b      	ldr	r3, [r7, #16]
 8018088:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801808a:	2b5e      	cmp	r3, #94	; 0x5e
 801808c:	d117      	bne.n	80180be <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	7b5b      	ldrb	r3, [r3, #13]
 8018092:	f043 0310 	orr.w	r3, r3, #16
 8018096:	b2da      	uxtb	r2, r3
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	735a      	strb	r2, [r3, #13]
 801809c:	e00f      	b.n	80180be <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801809e:	693b      	ldr	r3, [r7, #16]
 80180a0:	2206      	movs	r2, #6
 80180a2:	4928      	ldr	r1, [pc, #160]	; (8018144 <ethernet_input+0x118>)
 80180a4:	4618      	mov	r0, r3
 80180a6:	f005 fb3d 	bl	801d724 <memcmp>
 80180aa:	4603      	mov	r3, r0
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d106      	bne.n	80180be <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	7b5b      	ldrb	r3, [r3, #13]
 80180b4:	f043 0308 	orr.w	r3, r3, #8
 80180b8:	b2da      	uxtb	r2, r3
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80180be:	89fb      	ldrh	r3, [r7, #14]
 80180c0:	2b08      	cmp	r3, #8
 80180c2:	d003      	beq.n	80180cc <ethernet_input+0xa0>
 80180c4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80180c8:	d014      	beq.n	80180f4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80180ca:	e032      	b.n	8018132 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80180cc:	683b      	ldr	r3, [r7, #0]
 80180ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80180d2:	f003 0308 	and.w	r3, r3, #8
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d024      	beq.n	8018124 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80180da:	8afb      	ldrh	r3, [r7, #22]
 80180dc:	4619      	mov	r1, r3
 80180de:	6878      	ldr	r0, [r7, #4]
 80180e0:	f7f6 fc46 	bl	800e970 <pbuf_remove_header>
 80180e4:	4603      	mov	r3, r0
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d11e      	bne.n	8018128 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80180ea:	6839      	ldr	r1, [r7, #0]
 80180ec:	6878      	ldr	r0, [r7, #4]
 80180ee:	f7fe fdf7 	bl	8016ce0 <ip4_input>
      break;
 80180f2:	e013      	b.n	801811c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80180f4:	683b      	ldr	r3, [r7, #0]
 80180f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80180fa:	f003 0308 	and.w	r3, r3, #8
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d014      	beq.n	801812c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018102:	8afb      	ldrh	r3, [r7, #22]
 8018104:	4619      	mov	r1, r3
 8018106:	6878      	ldr	r0, [r7, #4]
 8018108:	f7f6 fc32 	bl	800e970 <pbuf_remove_header>
 801810c:	4603      	mov	r3, r0
 801810e:	2b00      	cmp	r3, #0
 8018110:	d10e      	bne.n	8018130 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018112:	6839      	ldr	r1, [r7, #0]
 8018114:	6878      	ldr	r0, [r7, #4]
 8018116:	f7fd ff97 	bl	8016048 <etharp_input>
      break;
 801811a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801811c:	2300      	movs	r3, #0
 801811e:	e00c      	b.n	801813a <ethernet_input+0x10e>
    goto free_and_return;
 8018120:	bf00      	nop
 8018122:	e006      	b.n	8018132 <ethernet_input+0x106>
        goto free_and_return;
 8018124:	bf00      	nop
 8018126:	e004      	b.n	8018132 <ethernet_input+0x106>
        goto free_and_return;
 8018128:	bf00      	nop
 801812a:	e002      	b.n	8018132 <ethernet_input+0x106>
        goto free_and_return;
 801812c:	bf00      	nop
 801812e:	e000      	b.n	8018132 <ethernet_input+0x106>
        goto free_and_return;
 8018130:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018132:	6878      	ldr	r0, [r7, #4]
 8018134:	f7f6 fca2 	bl	800ea7c <pbuf_free>
  return ERR_OK;
 8018138:	2300      	movs	r3, #0
}
 801813a:	4618      	mov	r0, r3
 801813c:	3718      	adds	r7, #24
 801813e:	46bd      	mov	sp, r7
 8018140:	bd80      	pop	{r7, pc}
 8018142:	bf00      	nop
 8018144:	0802239c 	.word	0x0802239c

08018148 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018148:	b580      	push	{r7, lr}
 801814a:	b086      	sub	sp, #24
 801814c:	af00      	add	r7, sp, #0
 801814e:	60f8      	str	r0, [r7, #12]
 8018150:	60b9      	str	r1, [r7, #8]
 8018152:	607a      	str	r2, [r7, #4]
 8018154:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018156:	8c3b      	ldrh	r3, [r7, #32]
 8018158:	4618      	mov	r0, r3
 801815a:	f7f5 f88d 	bl	800d278 <lwip_htons>
 801815e:	4603      	mov	r3, r0
 8018160:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018162:	210e      	movs	r1, #14
 8018164:	68b8      	ldr	r0, [r7, #8]
 8018166:	f7f6 fbf3 	bl	800e950 <pbuf_add_header>
 801816a:	4603      	mov	r3, r0
 801816c:	2b00      	cmp	r3, #0
 801816e:	d125      	bne.n	80181bc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018170:	68bb      	ldr	r3, [r7, #8]
 8018172:	685b      	ldr	r3, [r3, #4]
 8018174:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018176:	693b      	ldr	r3, [r7, #16]
 8018178:	8afa      	ldrh	r2, [r7, #22]
 801817a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801817c:	693b      	ldr	r3, [r7, #16]
 801817e:	2206      	movs	r2, #6
 8018180:	6839      	ldr	r1, [r7, #0]
 8018182:	4618      	mov	r0, r3
 8018184:	f005 fade 	bl	801d744 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018188:	693b      	ldr	r3, [r7, #16]
 801818a:	3306      	adds	r3, #6
 801818c:	2206      	movs	r2, #6
 801818e:	6879      	ldr	r1, [r7, #4]
 8018190:	4618      	mov	r0, r3
 8018192:	f005 fad7 	bl	801d744 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018196:	68fb      	ldr	r3, [r7, #12]
 8018198:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801819c:	2b06      	cmp	r3, #6
 801819e:	d006      	beq.n	80181ae <ethernet_output+0x66>
 80181a0:	4b0a      	ldr	r3, [pc, #40]	; (80181cc <ethernet_output+0x84>)
 80181a2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80181a6:	490a      	ldr	r1, [pc, #40]	; (80181d0 <ethernet_output+0x88>)
 80181a8:	480a      	ldr	r0, [pc, #40]	; (80181d4 <ethernet_output+0x8c>)
 80181aa:	f005 fae1 	bl	801d770 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80181ae:	68fb      	ldr	r3, [r7, #12]
 80181b0:	699b      	ldr	r3, [r3, #24]
 80181b2:	68b9      	ldr	r1, [r7, #8]
 80181b4:	68f8      	ldr	r0, [r7, #12]
 80181b6:	4798      	blx	r3
 80181b8:	4603      	mov	r3, r0
 80181ba:	e002      	b.n	80181c2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80181bc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80181be:	f06f 0301 	mvn.w	r3, #1
}
 80181c2:	4618      	mov	r0, r3
 80181c4:	3718      	adds	r7, #24
 80181c6:	46bd      	mov	sp, r7
 80181c8:	bd80      	pop	{r7, pc}
 80181ca:	bf00      	nop
 80181cc:	08021ea0 	.word	0x08021ea0
 80181d0:	08021ed8 	.word	0x08021ed8
 80181d4:	08021f0c 	.word	0x08021f0c

080181d8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80181d8:	b580      	push	{r7, lr}
 80181da:	b086      	sub	sp, #24
 80181dc:	af00      	add	r7, sp, #0
 80181de:	6078      	str	r0, [r7, #4]
 80181e0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80181e2:	683b      	ldr	r3, [r7, #0]
 80181e4:	60bb      	str	r3, [r7, #8]
 80181e6:	2304      	movs	r3, #4
 80181e8:	60fb      	str	r3, [r7, #12]
 80181ea:	2300      	movs	r3, #0
 80181ec:	613b      	str	r3, [r7, #16]
 80181ee:	2300      	movs	r3, #0
 80181f0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80181f2:	f107 0308 	add.w	r3, r7, #8
 80181f6:	2100      	movs	r1, #0
 80181f8:	4618      	mov	r0, r3
 80181fa:	f7f0 f874 	bl	80082e6 <osMessageCreate>
 80181fe:	4602      	mov	r2, r0
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	2b00      	cmp	r3, #0
 801820a:	d102      	bne.n	8018212 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801820c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018210:	e000      	b.n	8018214 <sys_mbox_new+0x3c>

  return ERR_OK;
 8018212:	2300      	movs	r3, #0
}
 8018214:	4618      	mov	r0, r3
 8018216:	3718      	adds	r7, #24
 8018218:	46bd      	mov	sp, r7
 801821a:	bd80      	pop	{r7, pc}

0801821c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801821c:	b580      	push	{r7, lr}
 801821e:	b082      	sub	sp, #8
 8018220:	af00      	add	r7, sp, #0
 8018222:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	4618      	mov	r0, r3
 801822a:	f7f0 f939 	bl	80084a0 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	4618      	mov	r0, r3
 8018234:	f7f0 f94a 	bl	80084cc <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018238:	bf00      	nop
 801823a:	3708      	adds	r7, #8
 801823c:	46bd      	mov	sp, r7
 801823e:	bd80      	pop	{r7, pc}

08018240 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018240:	b580      	push	{r7, lr}
 8018242:	b084      	sub	sp, #16
 8018244:	af00      	add	r7, sp, #0
 8018246:	6078      	str	r0, [r7, #4]
 8018248:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	6839      	ldr	r1, [r7, #0]
 8018250:	2200      	movs	r2, #0
 8018252:	4618      	mov	r0, r3
 8018254:	f7f0 f870 	bl	8008338 <osMessagePut>
 8018258:	4603      	mov	r3, r0
 801825a:	2b00      	cmp	r3, #0
 801825c:	d102      	bne.n	8018264 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801825e:	2300      	movs	r3, #0
 8018260:	73fb      	strb	r3, [r7, #15]
 8018262:	e001      	b.n	8018268 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018264:	23ff      	movs	r3, #255	; 0xff
 8018266:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018268:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801826c:	4618      	mov	r0, r3
 801826e:	3710      	adds	r7, #16
 8018270:	46bd      	mov	sp, r7
 8018272:	bd80      	pop	{r7, pc}

08018274 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018274:	b580      	push	{r7, lr}
 8018276:	b08c      	sub	sp, #48	; 0x30
 8018278:	af00      	add	r7, sp, #0
 801827a:	61f8      	str	r0, [r7, #28]
 801827c:	61b9      	str	r1, [r7, #24]
 801827e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018280:	f7ef fe5c 	bl	8007f3c <osKernelSysTick>
 8018284:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018286:	697b      	ldr	r3, [r7, #20]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d017      	beq.n	80182bc <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801828c:	69fb      	ldr	r3, [r7, #28]
 801828e:	6819      	ldr	r1, [r3, #0]
 8018290:	f107 0320 	add.w	r3, r7, #32
 8018294:	697a      	ldr	r2, [r7, #20]
 8018296:	4618      	mov	r0, r3
 8018298:	f7f0 f88e 	bl	80083b8 <osMessageGet>

    if(event.status == osEventMessage)
 801829c:	6a3b      	ldr	r3, [r7, #32]
 801829e:	2b10      	cmp	r3, #16
 80182a0:	d109      	bne.n	80182b6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80182a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182a4:	461a      	mov	r2, r3
 80182a6:	69bb      	ldr	r3, [r7, #24]
 80182a8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80182aa:	f7ef fe47 	bl	8007f3c <osKernelSysTick>
 80182ae:	4602      	mov	r2, r0
 80182b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182b2:	1ad3      	subs	r3, r2, r3
 80182b4:	e019      	b.n	80182ea <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80182b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80182ba:	e016      	b.n	80182ea <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80182bc:	69fb      	ldr	r3, [r7, #28]
 80182be:	6819      	ldr	r1, [r3, #0]
 80182c0:	463b      	mov	r3, r7
 80182c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80182c6:	4618      	mov	r0, r3
 80182c8:	f7f0 f876 	bl	80083b8 <osMessageGet>
 80182cc:	f107 0320 	add.w	r3, r7, #32
 80182d0:	463a      	mov	r2, r7
 80182d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80182d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80182d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182da:	461a      	mov	r2, r3
 80182dc:	69bb      	ldr	r3, [r7, #24]
 80182de:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80182e0:	f7ef fe2c 	bl	8007f3c <osKernelSysTick>
 80182e4:	4602      	mov	r2, r0
 80182e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182e8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80182ea:	4618      	mov	r0, r3
 80182ec:	3730      	adds	r7, #48	; 0x30
 80182ee:	46bd      	mov	sp, r7
 80182f0:	bd80      	pop	{r7, pc}

080182f2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80182f2:	b580      	push	{r7, lr}
 80182f4:	b086      	sub	sp, #24
 80182f6:	af00      	add	r7, sp, #0
 80182f8:	6078      	str	r0, [r7, #4]
 80182fa:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	6819      	ldr	r1, [r3, #0]
 8018300:	f107 030c 	add.w	r3, r7, #12
 8018304:	2200      	movs	r2, #0
 8018306:	4618      	mov	r0, r3
 8018308:	f7f0 f856 	bl	80083b8 <osMessageGet>

  if(event.status == osEventMessage)
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	2b10      	cmp	r3, #16
 8018310:	d105      	bne.n	801831e <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8018312:	693b      	ldr	r3, [r7, #16]
 8018314:	461a      	mov	r2, r3
 8018316:	683b      	ldr	r3, [r7, #0]
 8018318:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801831a:	2300      	movs	r3, #0
 801831c:	e001      	b.n	8018322 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801831e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8018322:	4618      	mov	r0, r3
 8018324:	3718      	adds	r7, #24
 8018326:	46bd      	mov	sp, r7
 8018328:	bd80      	pop	{r7, pc}

0801832a <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801832a:	b480      	push	{r7}
 801832c:	b083      	sub	sp, #12
 801832e:	af00      	add	r7, sp, #0
 8018330:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d101      	bne.n	801833e <sys_mbox_valid+0x14>
    return 0;
 801833a:	2300      	movs	r3, #0
 801833c:	e000      	b.n	8018340 <sys_mbox_valid+0x16>
  else
    return 1;
 801833e:	2301      	movs	r3, #1
}
 8018340:	4618      	mov	r0, r3
 8018342:	370c      	adds	r7, #12
 8018344:	46bd      	mov	sp, r7
 8018346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801834a:	4770      	bx	lr

0801834c <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801834c:	b480      	push	{r7}
 801834e:	b083      	sub	sp, #12
 8018350:	af00      	add	r7, sp, #0
 8018352:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	2200      	movs	r2, #0
 8018358:	601a      	str	r2, [r3, #0]
}
 801835a:	bf00      	nop
 801835c:	370c      	adds	r7, #12
 801835e:	46bd      	mov	sp, r7
 8018360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018364:	4770      	bx	lr

08018366 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018366:	b580      	push	{r7, lr}
 8018368:	b084      	sub	sp, #16
 801836a:	af00      	add	r7, sp, #0
 801836c:	6078      	str	r0, [r7, #4]
 801836e:	460b      	mov	r3, r1
 8018370:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018372:	2300      	movs	r3, #0
 8018374:	60bb      	str	r3, [r7, #8]
 8018376:	2300      	movs	r3, #0
 8018378:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801837a:	f107 0308 	add.w	r3, r7, #8
 801837e:	2101      	movs	r1, #1
 8018380:	4618      	mov	r0, r3
 8018382:	f7ef fee7 	bl	8008154 <osSemaphoreCreate>
 8018386:	4602      	mov	r2, r0
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	2b00      	cmp	r3, #0
 8018392:	d102      	bne.n	801839a <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018398:	e009      	b.n	80183ae <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801839a:	78fb      	ldrb	r3, [r7, #3]
 801839c:	2b00      	cmp	r3, #0
 801839e:	d105      	bne.n	80183ac <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	2100      	movs	r1, #0
 80183a6:	4618      	mov	r0, r3
 80183a8:	f7ef ff06 	bl	80081b8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80183ac:	2300      	movs	r3, #0
}
 80183ae:	4618      	mov	r0, r3
 80183b0:	3710      	adds	r7, #16
 80183b2:	46bd      	mov	sp, r7
 80183b4:	bd80      	pop	{r7, pc}

080183b6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80183b6:	b580      	push	{r7, lr}
 80183b8:	b084      	sub	sp, #16
 80183ba:	af00      	add	r7, sp, #0
 80183bc:	6078      	str	r0, [r7, #4]
 80183be:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80183c0:	f7ef fdbc 	bl	8007f3c <osKernelSysTick>
 80183c4:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80183c6:	683b      	ldr	r3, [r7, #0]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d011      	beq.n	80183f0 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	6839      	ldr	r1, [r7, #0]
 80183d2:	4618      	mov	r0, r3
 80183d4:	f7ef fef0 	bl	80081b8 <osSemaphoreWait>
 80183d8:	4603      	mov	r3, r0
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d105      	bne.n	80183ea <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80183de:	f7ef fdad 	bl	8007f3c <osKernelSysTick>
 80183e2:	4602      	mov	r2, r0
 80183e4:	68fb      	ldr	r3, [r7, #12]
 80183e6:	1ad3      	subs	r3, r2, r3
 80183e8:	e012      	b.n	8018410 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80183ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80183ee:	e00f      	b.n	8018410 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80183f0:	bf00      	nop
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80183fa:	4618      	mov	r0, r3
 80183fc:	f7ef fedc 	bl	80081b8 <osSemaphoreWait>
 8018400:	4603      	mov	r3, r0
 8018402:	2b00      	cmp	r3, #0
 8018404:	d1f5      	bne.n	80183f2 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8018406:	f7ef fd99 	bl	8007f3c <osKernelSysTick>
 801840a:	4602      	mov	r2, r0
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018410:	4618      	mov	r0, r3
 8018412:	3710      	adds	r7, #16
 8018414:	46bd      	mov	sp, r7
 8018416:	bd80      	pop	{r7, pc}

08018418 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018418:	b580      	push	{r7, lr}
 801841a:	b082      	sub	sp, #8
 801841c:	af00      	add	r7, sp, #0
 801841e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	4618      	mov	r0, r3
 8018426:	f7ef ff15 	bl	8008254 <osSemaphoreRelease>
}
 801842a:	bf00      	nop
 801842c:	3708      	adds	r7, #8
 801842e:	46bd      	mov	sp, r7
 8018430:	bd80      	pop	{r7, pc}

08018432 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018432:	b580      	push	{r7, lr}
 8018434:	b082      	sub	sp, #8
 8018436:	af00      	add	r7, sp, #0
 8018438:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	4618      	mov	r0, r3
 8018440:	f7ef ff3e 	bl	80082c0 <osSemaphoreDelete>
}
 8018444:	bf00      	nop
 8018446:	3708      	adds	r7, #8
 8018448:	46bd      	mov	sp, r7
 801844a:	bd80      	pop	{r7, pc}

0801844c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801844c:	b480      	push	{r7}
 801844e:	b083      	sub	sp, #12
 8018450:	af00      	add	r7, sp, #0
 8018452:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d101      	bne.n	8018460 <sys_sem_valid+0x14>
    return 0;
 801845c:	2300      	movs	r3, #0
 801845e:	e000      	b.n	8018462 <sys_sem_valid+0x16>
  else
    return 1;
 8018460:	2301      	movs	r3, #1
}
 8018462:	4618      	mov	r0, r3
 8018464:	370c      	adds	r7, #12
 8018466:	46bd      	mov	sp, r7
 8018468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801846c:	4770      	bx	lr

0801846e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801846e:	b480      	push	{r7}
 8018470:	b083      	sub	sp, #12
 8018472:	af00      	add	r7, sp, #0
 8018474:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	2200      	movs	r2, #0
 801847a:	601a      	str	r2, [r3, #0]
}
 801847c:	bf00      	nop
 801847e:	370c      	adds	r7, #12
 8018480:	46bd      	mov	sp, r7
 8018482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018486:	4770      	bx	lr

08018488 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018488:	b580      	push	{r7, lr}
 801848a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801848c:	4803      	ldr	r0, [pc, #12]	; (801849c <sys_init+0x14>)
 801848e:	f7ef fdc5 	bl	800801c <osMutexCreate>
 8018492:	4603      	mov	r3, r0
 8018494:	4a02      	ldr	r2, [pc, #8]	; (80184a0 <sys_init+0x18>)
 8018496:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018498:	bf00      	nop
 801849a:	bd80      	pop	{r7, pc}
 801849c:	080223ac 	.word	0x080223ac
 80184a0:	20011518 	.word	0x20011518

080184a4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80184a4:	b580      	push	{r7, lr}
 80184a6:	b084      	sub	sp, #16
 80184a8:	af00      	add	r7, sp, #0
 80184aa:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80184ac:	2300      	movs	r3, #0
 80184ae:	60bb      	str	r3, [r7, #8]
 80184b0:	2300      	movs	r3, #0
 80184b2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80184b4:	f107 0308 	add.w	r3, r7, #8
 80184b8:	4618      	mov	r0, r3
 80184ba:	f7ef fdaf 	bl	800801c <osMutexCreate>
 80184be:	4602      	mov	r2, r0
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d102      	bne.n	80184d2 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80184cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80184d0:	e000      	b.n	80184d4 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80184d2:	2300      	movs	r3, #0
}
 80184d4:	4618      	mov	r0, r3
 80184d6:	3710      	adds	r7, #16
 80184d8:	46bd      	mov	sp, r7
 80184da:	bd80      	pop	{r7, pc}

080184dc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80184dc:	b580      	push	{r7, lr}
 80184de:	b082      	sub	sp, #8
 80184e0:	af00      	add	r7, sp, #0
 80184e2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80184ec:	4618      	mov	r0, r3
 80184ee:	f7ef fdad 	bl	800804c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80184f2:	bf00      	nop
 80184f4:	3708      	adds	r7, #8
 80184f6:	46bd      	mov	sp, r7
 80184f8:	bd80      	pop	{r7, pc}

080184fa <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80184fa:	b580      	push	{r7, lr}
 80184fc:	b082      	sub	sp, #8
 80184fe:	af00      	add	r7, sp, #0
 8018500:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	4618      	mov	r0, r3
 8018508:	f7ef fdee 	bl	80080e8 <osMutexRelease>
}
 801850c:	bf00      	nop
 801850e:	3708      	adds	r7, #8
 8018510:	46bd      	mov	sp, r7
 8018512:	bd80      	pop	{r7, pc}

08018514 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018514:	b580      	push	{r7, lr}
 8018516:	b08c      	sub	sp, #48	; 0x30
 8018518:	af00      	add	r7, sp, #0
 801851a:	60f8      	str	r0, [r7, #12]
 801851c:	60b9      	str	r1, [r7, #8]
 801851e:	607a      	str	r2, [r7, #4]
 8018520:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018522:	f107 0314 	add.w	r3, r7, #20
 8018526:	2200      	movs	r2, #0
 8018528:	601a      	str	r2, [r3, #0]
 801852a:	605a      	str	r2, [r3, #4]
 801852c:	609a      	str	r2, [r3, #8]
 801852e:	60da      	str	r2, [r3, #12]
 8018530:	611a      	str	r2, [r3, #16]
 8018532:	615a      	str	r2, [r3, #20]
 8018534:	619a      	str	r2, [r3, #24]
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	617b      	str	r3, [r7, #20]
 801853a:	68bb      	ldr	r3, [r7, #8]
 801853c:	61bb      	str	r3, [r7, #24]
 801853e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018540:	b21b      	sxth	r3, r3
 8018542:	83bb      	strh	r3, [r7, #28]
 8018544:	683b      	ldr	r3, [r7, #0]
 8018546:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018548:	f107 0314 	add.w	r3, r7, #20
 801854c:	6879      	ldr	r1, [r7, #4]
 801854e:	4618      	mov	r0, r3
 8018550:	f7ef fd04 	bl	8007f5c <osThreadCreate>
 8018554:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018556:	4618      	mov	r0, r3
 8018558:	3730      	adds	r7, #48	; 0x30
 801855a:	46bd      	mov	sp, r7
 801855c:	bd80      	pop	{r7, pc}
	...

08018560 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018560:	b580      	push	{r7, lr}
 8018562:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018564:	4b04      	ldr	r3, [pc, #16]	; (8018578 <sys_arch_protect+0x18>)
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801856c:	4618      	mov	r0, r3
 801856e:	f7ef fd6d 	bl	800804c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018572:	2301      	movs	r3, #1
}
 8018574:	4618      	mov	r0, r3
 8018576:	bd80      	pop	{r7, pc}
 8018578:	20011518 	.word	0x20011518

0801857c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801857c:	b580      	push	{r7, lr}
 801857e:	b082      	sub	sp, #8
 8018580:	af00      	add	r7, sp, #0
 8018582:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018584:	4b04      	ldr	r3, [pc, #16]	; (8018598 <sys_arch_unprotect+0x1c>)
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	4618      	mov	r0, r3
 801858a:	f7ef fdad 	bl	80080e8 <osMutexRelease>
}
 801858e:	bf00      	nop
 8018590:	3708      	adds	r7, #8
 8018592:	46bd      	mov	sp, r7
 8018594:	bd80      	pop	{r7, pc}
 8018596:	bf00      	nop
 8018598:	20011518 	.word	0x20011518

0801859c <NewMessageData>:
#include "MQTTClient.h"

#include <stdio.h>
#include <string.h>

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 801859c:	b480      	push	{r7}
 801859e:	b085      	sub	sp, #20
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	60f8      	str	r0, [r7, #12]
 80185a4:	60b9      	str	r1, [r7, #8]
 80185a6:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	68ba      	ldr	r2, [r7, #8]
 80185ac:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	687a      	ldr	r2, [r7, #4]
 80185b2:	601a      	str	r2, [r3, #0]
}
 80185b4:	bf00      	nop
 80185b6:	3714      	adds	r7, #20
 80185b8:	46bd      	mov	sp, r7
 80185ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185be:	4770      	bx	lr

080185c0 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 80185c0:	b480      	push	{r7}
 80185c2:	b083      	sub	sp, #12
 80185c4:	af00      	add	r7, sp, #0
 80185c6:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80185d0:	4293      	cmp	r3, r2
 80185d2:	d003      	beq.n	80185dc <getNextPacketId+0x1c>
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	3301      	adds	r3, #1
 80185da:	e000      	b.n	80185de <getNextPacketId+0x1e>
 80185dc:	2301      	movs	r3, #1
 80185de:	687a      	ldr	r2, [r7, #4]
 80185e0:	6013      	str	r3, [r2, #0]
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	681b      	ldr	r3, [r3, #0]
}
 80185e6:	4618      	mov	r0, r3
 80185e8:	370c      	adds	r7, #12
 80185ea:	46bd      	mov	sp, r7
 80185ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185f0:	4770      	bx	lr

080185f2 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 80185f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185f4:	b087      	sub	sp, #28
 80185f6:	af00      	add	r7, sp, #0
 80185f8:	60f8      	str	r0, [r7, #12]
 80185fa:	60b9      	str	r1, [r7, #8]
 80185fc:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 80185fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018602:	617b      	str	r3, [r7, #20]
        sent = 0;
 8018604:	2300      	movs	r3, #0
 8018606:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 8018608:	e018      	b.n	801863c <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801860e:	691c      	ldr	r4, [r3, #16]
 8018610:	68fb      	ldr	r3, [r7, #12]
 8018612:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	691a      	ldr	r2, [r3, #16]
 8018618:	693b      	ldr	r3, [r7, #16]
 801861a:	18d6      	adds	r6, r2, r3
 801861c:	6878      	ldr	r0, [r7, #4]
 801861e:	f000 fecb 	bl	80193b8 <TimerLeftMS>
 8018622:	4603      	mov	r3, r0
 8018624:	68ba      	ldr	r2, [r7, #8]
 8018626:	4631      	mov	r1, r6
 8018628:	4628      	mov	r0, r5
 801862a:	47a0      	blx	r4
 801862c:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 801862e:	697b      	ldr	r3, [r7, #20]
 8018630:	2b00      	cmp	r3, #0
 8018632:	db0e      	blt.n	8018652 <sendPacket+0x60>
            break;
        sent += rc;
 8018634:	693a      	ldr	r2, [r7, #16]
 8018636:	697b      	ldr	r3, [r7, #20]
 8018638:	4413      	add	r3, r2
 801863a:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 801863c:	693a      	ldr	r2, [r7, #16]
 801863e:	68bb      	ldr	r3, [r7, #8]
 8018640:	429a      	cmp	r2, r3
 8018642:	da07      	bge.n	8018654 <sendPacket+0x62>
 8018644:	6878      	ldr	r0, [r7, #4]
 8018646:	f000 fe75 	bl	8019334 <TimerIsExpired>
 801864a:	4603      	mov	r3, r0
 801864c:	2b00      	cmp	r3, #0
 801864e:	d0dc      	beq.n	801860a <sendPacket+0x18>
 8018650:	e000      	b.n	8018654 <sendPacket+0x62>
            break;
 8018652:	bf00      	nop
    }
    if (sent == length)
 8018654:	693a      	ldr	r2, [r7, #16]
 8018656:	68bb      	ldr	r3, [r7, #8]
 8018658:	429a      	cmp	r2, r3
 801865a:	d10b      	bne.n	8018674 <sendPacket+0x82>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	699b      	ldr	r3, [r3, #24]
 8018666:	4619      	mov	r1, r3
 8018668:	4610      	mov	r0, r2
 801866a:	f000 fe8d 	bl	8019388 <TimerCountdown>
        rc = MQTT_SUCCESS;
 801866e:	2300      	movs	r3, #0
 8018670:	617b      	str	r3, [r7, #20]
 8018672:	e002      	b.n	801867a <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8018674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018678:	617b      	str	r3, [r7, #20]
    return rc;
 801867a:	697b      	ldr	r3, [r7, #20]
}
 801867c:	4618      	mov	r0, r3
 801867e:	371c      	adds	r7, #28
 8018680:	46bd      	mov	sp, r7
 8018682:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018684 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8018684:	b580      	push	{r7, lr}
 8018686:	b086      	sub	sp, #24
 8018688:	af00      	add	r7, sp, #0
 801868a:	60f8      	str	r0, [r7, #12]
 801868c:	60b9      	str	r1, [r7, #8]
 801868e:	607a      	str	r2, [r7, #4]
 8018690:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	68ba      	ldr	r2, [r7, #8]
 8018696:	655a      	str	r2, [r3, #84]	; 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018698:	2300      	movs	r3, #0
 801869a:	617b      	str	r3, [r7, #20]
 801869c:	e008      	b.n	80186b0 <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	697a      	ldr	r2, [r7, #20]
 80186a2:	3205      	adds	r2, #5
 80186a4:	2100      	movs	r1, #0
 80186a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80186aa:	697b      	ldr	r3, [r7, #20]
 80186ac:	3301      	adds	r3, #1
 80186ae:	617b      	str	r3, [r7, #20]
 80186b0:	697b      	ldr	r3, [r7, #20]
 80186b2:	2b04      	cmp	r3, #4
 80186b4:	ddf3      	ble.n	801869e <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	687a      	ldr	r2, [r7, #4]
 80186ba:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 80186bc:	68fb      	ldr	r3, [r7, #12]
 80186be:	683a      	ldr	r2, [r7, #0]
 80186c0:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	6a3a      	ldr	r2, [r7, #32]
 80186c6:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80186cc:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80186d2:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	2200      	movs	r2, #0
 80186d8:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	2200      	movs	r2, #0
 80186de:	625a      	str	r2, [r3, #36]	; 0x24
    c->ping_outstanding = 0;
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	2200      	movs	r2, #0
 80186e4:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	2200      	movs	r2, #0
 80186ea:	651a      	str	r2, [r3, #80]	; 0x50
	  c->next_packetid = 1;
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	2201      	movs	r2, #1
 80186f0:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	3358      	adds	r3, #88	; 0x58
 80186f6:	4618      	mov	r0, r3
 80186f8:	f000 fe74 	bl	80193e4 <TimerInit>
    TimerInit(&c->last_received);
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	3360      	adds	r3, #96	; 0x60
 8018700:	4618      	mov	r0, r3
 8018702:	f000 fe6f 	bl	80193e4 <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 8018706:	bf00      	nop
 8018708:	3718      	adds	r7, #24
 801870a:	46bd      	mov	sp, r7
 801870c:	bd80      	pop	{r7, pc}

0801870e <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 801870e:	b590      	push	{r4, r7, lr}
 8018710:	b08b      	sub	sp, #44	; 0x2c
 8018712:	af00      	add	r7, sp, #0
 8018714:	60f8      	str	r0, [r7, #12]
 8018716:	60b9      	str	r1, [r7, #8]
 8018718:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 801871a:	2301      	movs	r3, #1
 801871c:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 801871e:	2300      	movs	r3, #0
 8018720:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8018722:	2304      	movs	r3, #4
 8018724:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8018726:	68bb      	ldr	r3, [r7, #8]
 8018728:	2200      	movs	r2, #0
 801872a:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 801872c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018730:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8018732:	6a3b      	ldr	r3, [r7, #32]
 8018734:	3301      	adds	r3, #1
 8018736:	623b      	str	r3, [r7, #32]
 8018738:	6a3a      	ldr	r2, [r7, #32]
 801873a:	69fb      	ldr	r3, [r7, #28]
 801873c:	429a      	cmp	r2, r3
 801873e:	dd03      	ble.n	8018748 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8018740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018744:	61bb      	str	r3, [r7, #24]
            goto exit;
 8018746:	e021      	b.n	801878c <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801874c:	68dc      	ldr	r4, [r3, #12]
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8018752:	f107 0117 	add.w	r1, r7, #23
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	2201      	movs	r2, #1
 801875a:	47a0      	blx	r4
 801875c:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 801875e:	69bb      	ldr	r3, [r7, #24]
 8018760:	2b01      	cmp	r3, #1
 8018762:	d112      	bne.n	801878a <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8018764:	68bb      	ldr	r3, [r7, #8]
 8018766:	681a      	ldr	r2, [r3, #0]
 8018768:	7dfb      	ldrb	r3, [r7, #23]
 801876a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801876e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018770:	fb01 f303 	mul.w	r3, r1, r3
 8018774:	441a      	add	r2, r3
 8018776:	68bb      	ldr	r3, [r7, #8]
 8018778:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 801877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801877c:	01db      	lsls	r3, r3, #7
 801877e:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 8018780:	7dfb      	ldrb	r3, [r7, #23]
 8018782:	b25b      	sxtb	r3, r3
 8018784:	2b00      	cmp	r3, #0
 8018786:	dbd1      	blt.n	801872c <decodePacket+0x1e>
exit:
 8018788:	e000      	b.n	801878c <decodePacket+0x7e>
            goto exit;
 801878a:	bf00      	nop
    return len;
 801878c:	6a3b      	ldr	r3, [r7, #32]
}
 801878e:	4618      	mov	r0, r3
 8018790:	372c      	adds	r7, #44	; 0x2c
 8018792:	46bd      	mov	sp, r7
 8018794:	bd90      	pop	{r4, r7, pc}

08018796 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8018796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018798:	b089      	sub	sp, #36	; 0x24
 801879a:	af00      	add	r7, sp, #0
 801879c:	60f8      	str	r0, [r7, #12]
 801879e:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 80187a0:	2300      	movs	r3, #0
 80187a2:	617b      	str	r3, [r7, #20]
    int len = 0;
 80187a4:	2300      	movs	r3, #0
 80187a6:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 80187a8:	2300      	movs	r3, #0
 80187aa:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80187b0:	68dc      	ldr	r4, [r3, #12]
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80187b6:	68fb      	ldr	r3, [r7, #12]
 80187b8:	695e      	ldr	r6, [r3, #20]
 80187ba:	68b8      	ldr	r0, [r7, #8]
 80187bc:	f000 fdfc 	bl	80193b8 <TimerLeftMS>
 80187c0:	4603      	mov	r3, r0
 80187c2:	2201      	movs	r2, #1
 80187c4:	4631      	mov	r1, r6
 80187c6:	4628      	mov	r0, r5
 80187c8:	47a0      	blx	r4
 80187ca:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 80187cc:	69fb      	ldr	r3, [r7, #28]
 80187ce:	2b01      	cmp	r3, #1
 80187d0:	d15d      	bne.n	801888e <readPacket+0xf8>
        goto exit;

    len = 1;
 80187d2:	2301      	movs	r3, #1
 80187d4:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 80187d6:	68b8      	ldr	r0, [r7, #8]
 80187d8:	f000 fdee 	bl	80193b8 <TimerLeftMS>
 80187dc:	4602      	mov	r2, r0
 80187de:	f107 0310 	add.w	r3, r7, #16
 80187e2:	4619      	mov	r1, r3
 80187e4:	68f8      	ldr	r0, [r7, #12]
 80187e6:	f7ff ff92 	bl	801870e <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	695b      	ldr	r3, [r3, #20]
 80187ee:	3301      	adds	r3, #1
 80187f0:	693a      	ldr	r2, [r7, #16]
 80187f2:	4611      	mov	r1, r2
 80187f4:	4618      	mov	r0, r3
 80187f6:	f001 f9bd 	bl	8019b74 <MQTTPacket_encode>
 80187fa:	4602      	mov	r2, r0
 80187fc:	69bb      	ldr	r3, [r7, #24]
 80187fe:	4413      	add	r3, r2
 8018800:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	68da      	ldr	r2, [r3, #12]
 8018806:	69bb      	ldr	r3, [r7, #24]
 8018808:	1ad3      	subs	r3, r2, r3
 801880a:	693a      	ldr	r2, [r7, #16]
 801880c:	4293      	cmp	r3, r2
 801880e:	d203      	bcs.n	8018818 <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 8018810:	f06f 0301 	mvn.w	r3, #1
 8018814:	61fb      	str	r3, [r7, #28]
        goto exit;
 8018816:	e03d      	b.n	8018894 <readPacket+0xfe>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 8018818:	693b      	ldr	r3, [r7, #16]
 801881a:	2b00      	cmp	r3, #0
 801881c:	dd20      	ble.n	8018860 <readPacket+0xca>
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018822:	68dc      	ldr	r4, [r3, #12]
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	695a      	ldr	r2, [r3, #20]
 801882c:	69bb      	ldr	r3, [r7, #24]
 801882e:	18d6      	adds	r6, r2, r3
 8018830:	693b      	ldr	r3, [r7, #16]
 8018832:	607b      	str	r3, [r7, #4]
 8018834:	68b8      	ldr	r0, [r7, #8]
 8018836:	f000 fdbf 	bl	80193b8 <TimerLeftMS>
 801883a:	4603      	mov	r3, r0
 801883c:	687a      	ldr	r2, [r7, #4]
 801883e:	4631      	mov	r1, r6
 8018840:	4628      	mov	r0, r5
 8018842:	47a0      	blx	r4
 8018844:	4602      	mov	r2, r0
 8018846:	693b      	ldr	r3, [r7, #16]
 8018848:	429a      	cmp	r2, r3
 801884a:	bf14      	ite	ne
 801884c:	2301      	movne	r3, #1
 801884e:	2300      	moveq	r3, #0
 8018850:	b2db      	uxtb	r3, r3
 8018852:	61fb      	str	r3, [r7, #28]
 8018854:	69fb      	ldr	r3, [r7, #28]
 8018856:	2b00      	cmp	r3, #0
 8018858:	d002      	beq.n	8018860 <readPacket+0xca>
        rc = 0;
 801885a:	2300      	movs	r3, #0
 801885c:	61fb      	str	r3, [r7, #28]
        goto exit;
 801885e:	e019      	b.n	8018894 <readPacket+0xfe>
    }

    header.byte = c->readbuf[0];
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	695b      	ldr	r3, [r3, #20]
 8018864:	781b      	ldrb	r3, [r3, #0]
 8018866:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8018868:	7d3b      	ldrb	r3, [r7, #20]
 801886a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801886e:	b2db      	uxtb	r3, r3
 8018870:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	699b      	ldr	r3, [r3, #24]
 8018876:	2b00      	cmp	r3, #0
 8018878:	d00b      	beq.n	8018892 <readPacket+0xfc>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have successfully received a packet
 801887a:	68fb      	ldr	r3, [r7, #12]
 801887c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8018880:	68fb      	ldr	r3, [r7, #12]
 8018882:	699b      	ldr	r3, [r3, #24]
 8018884:	4619      	mov	r1, r3
 8018886:	4610      	mov	r0, r2
 8018888:	f000 fd7e 	bl	8019388 <TimerCountdown>
 801888c:	e002      	b.n	8018894 <readPacket+0xfe>
        goto exit;
 801888e:	bf00      	nop
 8018890:	e000      	b.n	8018894 <readPacket+0xfe>
exit:
 8018892:	bf00      	nop
    return rc;
 8018894:	69fb      	ldr	r3, [r7, #28]
}
 8018896:	4618      	mov	r0, r3
 8018898:	3724      	adds	r7, #36	; 0x24
 801889a:	46bd      	mov	sp, r7
 801889c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801889e <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 801889e:	b480      	push	{r7}
 80188a0:	b087      	sub	sp, #28
 80188a2:	af00      	add	r7, sp, #0
 80188a4:	6078      	str	r0, [r7, #4]
 80188a6:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 80188ac:	683b      	ldr	r3, [r7, #0]
 80188ae:	689b      	ldr	r3, [r3, #8]
 80188b0:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 80188b2:	683b      	ldr	r3, [r7, #0]
 80188b4:	685b      	ldr	r3, [r3, #4]
 80188b6:	461a      	mov	r2, r3
 80188b8:	693b      	ldr	r3, [r7, #16]
 80188ba:	4413      	add	r3, r2
 80188bc:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 80188be:	e039      	b.n	8018934 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 80188c0:	693b      	ldr	r3, [r7, #16]
 80188c2:	781b      	ldrb	r3, [r3, #0]
 80188c4:	2b2f      	cmp	r3, #47	; 0x2f
 80188c6:	d103      	bne.n	80188d0 <isTopicMatched+0x32>
 80188c8:	697b      	ldr	r3, [r7, #20]
 80188ca:	781b      	ldrb	r3, [r3, #0]
 80188cc:	2b2f      	cmp	r3, #47	; 0x2f
 80188ce:	d13a      	bne.n	8018946 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 80188d0:	697b      	ldr	r3, [r7, #20]
 80188d2:	781b      	ldrb	r3, [r3, #0]
 80188d4:	2b2b      	cmp	r3, #43	; 0x2b
 80188d6:	d009      	beq.n	80188ec <isTopicMatched+0x4e>
 80188d8:	697b      	ldr	r3, [r7, #20]
 80188da:	781b      	ldrb	r3, [r3, #0]
 80188dc:	2b23      	cmp	r3, #35	; 0x23
 80188de:	d005      	beq.n	80188ec <isTopicMatched+0x4e>
 80188e0:	697b      	ldr	r3, [r7, #20]
 80188e2:	781a      	ldrb	r2, [r3, #0]
 80188e4:	693b      	ldr	r3, [r7, #16]
 80188e6:	781b      	ldrb	r3, [r3, #0]
 80188e8:	429a      	cmp	r2, r3
 80188ea:	d12e      	bne.n	801894a <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 80188ec:	697b      	ldr	r3, [r7, #20]
 80188ee:	781b      	ldrb	r3, [r3, #0]
 80188f0:	2b2b      	cmp	r3, #43	; 0x2b
 80188f2:	d112      	bne.n	801891a <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 80188f4:	693b      	ldr	r3, [r7, #16]
 80188f6:	3301      	adds	r3, #1
 80188f8:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 80188fa:	e005      	b.n	8018908 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 80188fc:	693b      	ldr	r3, [r7, #16]
 80188fe:	3301      	adds	r3, #1
 8018900:	613b      	str	r3, [r7, #16]
 8018902:	693b      	ldr	r3, [r7, #16]
 8018904:	3301      	adds	r3, #1
 8018906:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8018908:	68fa      	ldr	r2, [r7, #12]
 801890a:	68bb      	ldr	r3, [r7, #8]
 801890c:	429a      	cmp	r2, r3
 801890e:	d20b      	bcs.n	8018928 <isTopicMatched+0x8a>
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	781b      	ldrb	r3, [r3, #0]
 8018914:	2b2f      	cmp	r3, #47	; 0x2f
 8018916:	d1f1      	bne.n	80188fc <isTopicMatched+0x5e>
 8018918:	e006      	b.n	8018928 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 801891a:	697b      	ldr	r3, [r7, #20]
 801891c:	781b      	ldrb	r3, [r3, #0]
 801891e:	2b23      	cmp	r3, #35	; 0x23
 8018920:	d102      	bne.n	8018928 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8018922:	68bb      	ldr	r3, [r7, #8]
 8018924:	3b01      	subs	r3, #1
 8018926:	613b      	str	r3, [r7, #16]
        curf++;
 8018928:	697b      	ldr	r3, [r7, #20]
 801892a:	3301      	adds	r3, #1
 801892c:	617b      	str	r3, [r7, #20]
        curn++;
 801892e:	693b      	ldr	r3, [r7, #16]
 8018930:	3301      	adds	r3, #1
 8018932:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8018934:	697b      	ldr	r3, [r7, #20]
 8018936:	781b      	ldrb	r3, [r3, #0]
 8018938:	2b00      	cmp	r3, #0
 801893a:	d007      	beq.n	801894c <isTopicMatched+0xae>
 801893c:	693a      	ldr	r2, [r7, #16]
 801893e:	68bb      	ldr	r3, [r7, #8]
 8018940:	429a      	cmp	r2, r3
 8018942:	d3bd      	bcc.n	80188c0 <isTopicMatched+0x22>
 8018944:	e002      	b.n	801894c <isTopicMatched+0xae>
            break;
 8018946:	bf00      	nop
 8018948:	e000      	b.n	801894c <isTopicMatched+0xae>
            break;
 801894a:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 801894c:	693a      	ldr	r2, [r7, #16]
 801894e:	68bb      	ldr	r3, [r7, #8]
 8018950:	429a      	cmp	r2, r3
 8018952:	d105      	bne.n	8018960 <isTopicMatched+0xc2>
 8018954:	697b      	ldr	r3, [r7, #20]
 8018956:	781b      	ldrb	r3, [r3, #0]
 8018958:	2b00      	cmp	r3, #0
 801895a:	d101      	bne.n	8018960 <isTopicMatched+0xc2>
 801895c:	2301      	movs	r3, #1
 801895e:	e000      	b.n	8018962 <isTopicMatched+0xc4>
 8018960:	2300      	movs	r3, #0
 8018962:	b2db      	uxtb	r3, r3
}
 8018964:	4618      	mov	r0, r3
 8018966:	371c      	adds	r7, #28
 8018968:	46bd      	mov	sp, r7
 801896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801896e:	4770      	bx	lr

08018970 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8018970:	b580      	push	{r7, lr}
 8018972:	b08a      	sub	sp, #40	; 0x28
 8018974:	af00      	add	r7, sp, #0
 8018976:	60f8      	str	r0, [r7, #12]
 8018978:	60b9      	str	r1, [r7, #8]
 801897a:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 801897c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018980:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018982:	2300      	movs	r3, #0
 8018984:	627b      	str	r3, [r7, #36]	; 0x24
 8018986:	e03c      	b.n	8018a02 <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801898c:	3205      	adds	r2, #5
 801898e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018992:	2b00      	cmp	r3, #0
 8018994:	d032      	beq.n	80189fc <deliverMessage+0x8c>
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801899a:	3205      	adds	r2, #5
 801899c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80189a0:	4619      	mov	r1, r3
 80189a2:	68b8      	ldr	r0, [r7, #8]
 80189a4:	f001 fab6 	bl	8019f14 <MQTTPacket_equals>
 80189a8:	4603      	mov	r3, r0
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d10b      	bne.n	80189c6 <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 80189ae:	68fb      	ldr	r3, [r7, #12]
 80189b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80189b2:	3205      	adds	r2, #5
 80189b4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80189b8:	68b9      	ldr	r1, [r7, #8]
 80189ba:	4618      	mov	r0, r3
 80189bc:	f7ff ff6f 	bl	801889e <isTopicMatched>
 80189c0:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	d01a      	beq.n	80189fc <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 80189c6:	68fa      	ldr	r2, [r7, #12]
 80189c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189ca:	3305      	adds	r3, #5
 80189cc:	00db      	lsls	r3, r3, #3
 80189ce:	4413      	add	r3, r2
 80189d0:	685b      	ldr	r3, [r3, #4]
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d012      	beq.n	80189fc <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 80189d6:	f107 0318 	add.w	r3, r7, #24
 80189da:	687a      	ldr	r2, [r7, #4]
 80189dc:	68b9      	ldr	r1, [r7, #8]
 80189de:	4618      	mov	r0, r3
 80189e0:	f7ff fddc 	bl	801859c <NewMessageData>
                c->messageHandlers[i].fp(&md);
 80189e4:	68fa      	ldr	r2, [r7, #12]
 80189e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189e8:	3305      	adds	r3, #5
 80189ea:	00db      	lsls	r3, r3, #3
 80189ec:	4413      	add	r3, r2
 80189ee:	685b      	ldr	r3, [r3, #4]
 80189f0:	f107 0218 	add.w	r2, r7, #24
 80189f4:	4610      	mov	r0, r2
 80189f6:	4798      	blx	r3
                rc = MQTT_SUCCESS;
 80189f8:	2300      	movs	r3, #0
 80189fa:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80189fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189fe:	3301      	adds	r3, #1
 8018a00:	627b      	str	r3, [r7, #36]	; 0x24
 8018a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a04:	2b04      	cmp	r3, #4
 8018a06:	ddbf      	ble.n	8018988 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8018a08:	6a3b      	ldr	r3, [r7, #32]
 8018a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018a0e:	d112      	bne.n	8018a36 <deliverMessage+0xc6>
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d00e      	beq.n	8018a36 <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8018a18:	f107 0310 	add.w	r3, r7, #16
 8018a1c:	687a      	ldr	r2, [r7, #4]
 8018a1e:	68b9      	ldr	r1, [r7, #8]
 8018a20:	4618      	mov	r0, r3
 8018a22:	f7ff fdbb 	bl	801859c <NewMessageData>
        c->defaultMessageHandler(&md);
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a2a:	f107 0210 	add.w	r2, r7, #16
 8018a2e:	4610      	mov	r0, r2
 8018a30:	4798      	blx	r3
        rc = MQTT_SUCCESS;
 8018a32:	2300      	movs	r3, #0
 8018a34:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8018a36:	6a3b      	ldr	r3, [r7, #32]
}
 8018a38:	4618      	mov	r0, r3
 8018a3a:	3728      	adds	r7, #40	; 0x28
 8018a3c:	46bd      	mov	sp, r7
 8018a3e:	bd80      	pop	{r7, pc}

08018a40 <keepalive>:


int keepalive(MQTTClient* c)
{
 8018a40:	b580      	push	{r7, lr}
 8018a42:	b086      	sub	sp, #24
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	6078      	str	r0, [r7, #4]
    int rc = MQTT_SUCCESS;
 8018a48:	2300      	movs	r3, #0
 8018a4a:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	699b      	ldr	r3, [r3, #24]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d03e      	beq.n	8018ad2 <keepalive+0x92>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	3358      	adds	r3, #88	; 0x58
 8018a58:	4618      	mov	r0, r3
 8018a5a:	f000 fc6b 	bl	8019334 <TimerIsExpired>
 8018a5e:	4603      	mov	r3, r0
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d107      	bne.n	8018a74 <keepalive+0x34>
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	3360      	adds	r3, #96	; 0x60
 8018a68:	4618      	mov	r0, r3
 8018a6a:	f000 fc63 	bl	8019334 <TimerIsExpired>
 8018a6e:	4603      	mov	r3, r0
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d030      	beq.n	8018ad6 <keepalive+0x96>
    {
        if (c->ping_outstanding)
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	7f1b      	ldrb	r3, [r3, #28]
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d003      	beq.n	8018a84 <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 8018a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018a80:	617b      	str	r3, [r7, #20]
 8018a82:	e029      	b.n	8018ad8 <keepalive+0x98>
        else
        {
            Timer timer;
            TimerInit(&timer);
 8018a84:	f107 0308 	add.w	r3, r7, #8
 8018a88:	4618      	mov	r0, r3
 8018a8a:	f000 fcab 	bl	80193e4 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8018a8e:	f107 0308 	add.w	r3, r7, #8
 8018a92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018a96:	4618      	mov	r0, r3
 8018a98:	f000 fc62 	bl	8019360 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	691a      	ldr	r2, [r3, #16]
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	689b      	ldr	r3, [r3, #8]
 8018aa4:	4619      	mov	r1, r3
 8018aa6:	4610      	mov	r0, r2
 8018aa8:	f000 ff98 	bl	80199dc <MQTTSerialize_pingreq>
 8018aac:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTT_SUCCESS) // send the ping packet
 8018aae:	693b      	ldr	r3, [r7, #16]
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	dd11      	ble.n	8018ad8 <keepalive+0x98>
 8018ab4:	f107 0308 	add.w	r3, r7, #8
 8018ab8:	461a      	mov	r2, r3
 8018aba:	6939      	ldr	r1, [r7, #16]
 8018abc:	6878      	ldr	r0, [r7, #4]
 8018abe:	f7ff fd98 	bl	80185f2 <sendPacket>
 8018ac2:	6178      	str	r0, [r7, #20]
 8018ac4:	697b      	ldr	r3, [r7, #20]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d106      	bne.n	8018ad8 <keepalive+0x98>
                c->ping_outstanding = 1;
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	2201      	movs	r2, #1
 8018ace:	771a      	strb	r2, [r3, #28]
 8018ad0:	e002      	b.n	8018ad8 <keepalive+0x98>
        goto exit;
 8018ad2:	bf00      	nop
 8018ad4:	e000      	b.n	8018ad8 <keepalive+0x98>
        }
    }

exit:
 8018ad6:	bf00      	nop
    return rc;
 8018ad8:	697b      	ldr	r3, [r7, #20]
}
 8018ada:	4618      	mov	r0, r3
 8018adc:	3718      	adds	r7, #24
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	bd80      	pop	{r7, pc}

08018ae2 <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 8018ae2:	b480      	push	{r7}
 8018ae4:	b085      	sub	sp, #20
 8018ae6:	af00      	add	r7, sp, #0
 8018ae8:	6078      	str	r0, [r7, #4]
    int i = 0;
 8018aea:	2300      	movs	r3, #0
 8018aec:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018aee:	2300      	movs	r3, #0
 8018af0:	60fb      	str	r3, [r7, #12]
 8018af2:	e008      	b.n	8018b06 <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	68fa      	ldr	r2, [r7, #12]
 8018af8:	3205      	adds	r2, #5
 8018afa:	2100      	movs	r1, #0
 8018afc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	3301      	adds	r3, #1
 8018b04:	60fb      	str	r3, [r7, #12]
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	2b04      	cmp	r3, #4
 8018b0a:	ddf3      	ble.n	8018af4 <MQTTCleanSession+0x12>
}
 8018b0c:	bf00      	nop
 8018b0e:	bf00      	nop
 8018b10:	3714      	adds	r7, #20
 8018b12:	46bd      	mov	sp, r7
 8018b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b18:	4770      	bx	lr

08018b1a <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 8018b1a:	b580      	push	{r7, lr}
 8018b1c:	b082      	sub	sp, #8
 8018b1e:	af00      	add	r7, sp, #0
 8018b20:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	2200      	movs	r2, #0
 8018b26:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	2200      	movs	r2, #0
 8018b2c:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d002      	beq.n	8018b3c <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 8018b36:	6878      	ldr	r0, [r7, #4]
 8018b38:	f7ff ffd3 	bl	8018ae2 <MQTTCleanSession>
}
 8018b3c:	bf00      	nop
 8018b3e:	3708      	adds	r7, #8
 8018b40:	46bd      	mov	sp, r7
 8018b42:	bd80      	pop	{r7, pc}

08018b44 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8018b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b46:	b095      	sub	sp, #84	; 0x54
 8018b48:	af06      	add	r7, sp, #24
 8018b4a:	6078      	str	r0, [r7, #4]
 8018b4c:	6039      	str	r1, [r7, #0]
    int len = 0,
 8018b4e:	2300      	movs	r3, #0
 8018b50:	637b      	str	r3, [r7, #52]	; 0x34
        rc = MQTT_SUCCESS;
 8018b52:	2300      	movs	r3, #0
 8018b54:	633b      	str	r3, [r7, #48]	; 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 8018b56:	6839      	ldr	r1, [r7, #0]
 8018b58:	6878      	ldr	r0, [r7, #4]
 8018b5a:	f7ff fe1c 	bl	8018796 <readPacket>
 8018b5e:	62f8      	str	r0, [r7, #44]	; 0x2c

    switch (packet_type)
 8018b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b62:	2b0d      	cmp	r3, #13
 8018b64:	d81e      	bhi.n	8018ba4 <cycle+0x60>
 8018b66:	a201      	add	r2, pc, #4	; (adr r2, 8018b6c <cycle+0x28>)
 8018b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b6c:	08018cfb 	.word	0x08018cfb
 8018b70:	08018ba5 	.word	0x08018ba5
 8018b74:	08018cfb 	.word	0x08018cfb
 8018b78:	08018bab 	.word	0x08018bab
 8018b7c:	08018cfb 	.word	0x08018cfb
 8018b80:	08018c77 	.word	0x08018c77
 8018b84:	08018c77 	.word	0x08018c77
 8018b88:	08018cfb 	.word	0x08018cfb
 8018b8c:	08018ba5 	.word	0x08018ba5
 8018b90:	08018cfb 	.word	0x08018cfb
 8018b94:	08018ba5 	.word	0x08018ba5
 8018b98:	08018cfb 	.word	0x08018cfb
 8018b9c:	08018ba5 	.word	0x08018ba5
 8018ba0:	08018cf3 	.word	0x08018cf3
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 8018ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ba6:	633b      	str	r3, [r7, #48]	; 0x30
            goto exit;
 8018ba8:	e0b9      	b.n	8018d1e <cycle+0x1da>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 8018baa:	2300      	movs	r3, #0
 8018bac:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8018bb2:	687a      	ldr	r2, [r7, #4]
 8018bb4:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8018bb6:	4616      	mov	r6, r2
 8018bb8:	f107 0210 	add.w	r2, r7, #16
 8018bbc:	1d15      	adds	r5, r2, #4
 8018bbe:	f107 0210 	add.w	r2, r7, #16
 8018bc2:	1c54      	adds	r4, r2, #1
 8018bc4:	f107 010c 	add.w	r1, r7, #12
 8018bc8:	f107 0210 	add.w	r2, r7, #16
 8018bcc:	1c90      	adds	r0, r2, #2
 8018bce:	9604      	str	r6, [sp, #16]
 8018bd0:	9303      	str	r3, [sp, #12]
 8018bd2:	f107 0310 	add.w	r3, r7, #16
 8018bd6:	330c      	adds	r3, #12
 8018bd8:	9302      	str	r3, [sp, #8]
 8018bda:	f107 0310 	add.w	r3, r7, #16
 8018bde:	3308      	adds	r3, #8
 8018be0:	9301      	str	r3, [sp, #4]
 8018be2:	f107 0320 	add.w	r3, r7, #32
 8018be6:	9300      	str	r3, [sp, #0]
 8018be8:	462b      	mov	r3, r5
 8018bea:	4622      	mov	r2, r4
 8018bec:	f000 ff05 	bl	80199fa <MQTTDeserialize_publish>
 8018bf0:	4603      	mov	r3, r0
 8018bf2:	2b01      	cmp	r3, #1
 8018bf4:	f040 8090 	bne.w	8018d18 <cycle+0x1d4>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	b2db      	uxtb	r3, r3
 8018bfc:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 8018bfe:	f107 0210 	add.w	r2, r7, #16
 8018c02:	f107 0320 	add.w	r3, r7, #32
 8018c06:	4619      	mov	r1, r3
 8018c08:	6878      	ldr	r0, [r7, #4]
 8018c0a:	f7ff feb1 	bl	8018970 <deliverMessage>
            if (msg.qos != QOS0)
 8018c0e:	7c3b      	ldrb	r3, [r7, #16]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d074      	beq.n	8018cfe <cycle+0x1ba>
            {
                if (msg.qos == QOS1)
 8018c14:	7c3b      	ldrb	r3, [r7, #16]
 8018c16:	2b01      	cmp	r3, #1
 8018c18:	d10c      	bne.n	8018c34 <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	6918      	ldr	r0, [r3, #16]
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	689b      	ldr	r3, [r3, #8]
 8018c22:	4619      	mov	r1, r3
 8018c24:	8abb      	ldrh	r3, [r7, #20]
 8018c26:	9300      	str	r3, [sp, #0]
 8018c28:	2300      	movs	r3, #0
 8018c2a:	2204      	movs	r2, #4
 8018c2c:	f001 fa3f 	bl	801a0ae <MQTTSerialize_ack>
 8018c30:	6378      	str	r0, [r7, #52]	; 0x34
 8018c32:	e00e      	b.n	8018c52 <cycle+0x10e>
                else if (msg.qos == QOS2)
 8018c34:	7c3b      	ldrb	r3, [r7, #16]
 8018c36:	2b02      	cmp	r3, #2
 8018c38:	d10b      	bne.n	8018c52 <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	6918      	ldr	r0, [r3, #16]
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	689b      	ldr	r3, [r3, #8]
 8018c42:	4619      	mov	r1, r3
 8018c44:	8abb      	ldrh	r3, [r7, #20]
 8018c46:	9300      	str	r3, [sp, #0]
 8018c48:	2300      	movs	r3, #0
 8018c4a:	2205      	movs	r2, #5
 8018c4c:	f001 fa2f 	bl	801a0ae <MQTTSerialize_ack>
 8018c50:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 8018c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	dc03      	bgt.n	8018c60 <cycle+0x11c>
                    rc = FAILURE;
 8018c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8018c5e:	e005      	b.n	8018c6c <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 8018c60:	683a      	ldr	r2, [r7, #0]
 8018c62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018c64:	6878      	ldr	r0, [r7, #4]
 8018c66:	f7ff fcc4 	bl	80185f2 <sendPacket>
 8018c6a:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 8018c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018c72:	d144      	bne.n	8018cfe <cycle+0x1ba>
                    goto exit; // there was a problem
 8018c74:	e053      	b.n	8018d1e <cycle+0x1da>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	695c      	ldr	r4, [r3, #20]
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	68db      	ldr	r3, [r3, #12]
 8018c7e:	f107 020a 	add.w	r2, r7, #10
 8018c82:	f107 0109 	add.w	r1, r7, #9
 8018c86:	f107 0008 	add.w	r0, r7, #8
 8018c8a:	9300      	str	r3, [sp, #0]
 8018c8c:	4623      	mov	r3, r4
 8018c8e:	f000 ff26 	bl	8019ade <MQTTDeserialize_ack>
 8018c92:	4603      	mov	r3, r0
 8018c94:	2b01      	cmp	r3, #1
 8018c96:	d003      	beq.n	8018ca0 <cycle+0x15c>
                rc = FAILURE;
 8018c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8018c9e:	e023      	b.n	8018ce8 <cycle+0x1a4>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	6918      	ldr	r0, [r3, #16]
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	689b      	ldr	r3, [r3, #8]
 8018ca8:	4619      	mov	r1, r3
 8018caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cac:	2b05      	cmp	r3, #5
 8018cae:	d101      	bne.n	8018cb4 <cycle+0x170>
 8018cb0:	2206      	movs	r2, #6
 8018cb2:	e000      	b.n	8018cb6 <cycle+0x172>
 8018cb4:	2207      	movs	r2, #7
 8018cb6:	897b      	ldrh	r3, [r7, #10]
 8018cb8:	9300      	str	r3, [sp, #0]
 8018cba:	2300      	movs	r3, #0
 8018cbc:	f001 f9f7 	bl	801a0ae <MQTTSerialize_ack>
 8018cc0:	6378      	str	r0, [r7, #52]	; 0x34
 8018cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	dc03      	bgt.n	8018cd0 <cycle+0x18c>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 8018cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ccc:	633b      	str	r3, [r7, #48]	; 0x30
 8018cce:	e00b      	b.n	8018ce8 <cycle+0x1a4>
            else if ((rc = sendPacket(c, len, timer)) != MQTT_SUCCESS) // send the PUBREL packet
 8018cd0:	683a      	ldr	r2, [r7, #0]
 8018cd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018cd4:	6878      	ldr	r0, [r7, #4]
 8018cd6:	f7ff fc8c 	bl	80185f2 <sendPacket>
 8018cda:	6338      	str	r0, [r7, #48]	; 0x30
 8018cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d002      	beq.n	8018ce8 <cycle+0x1a4>
                rc = FAILURE; // there was a problem
 8018ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ce6:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 8018ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018cee:	d108      	bne.n	8018d02 <cycle+0x1be>
                goto exit; // there was a problem
 8018cf0:	e015      	b.n	8018d1e <cycle+0x1da>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	2200      	movs	r2, #0
 8018cf6:	771a      	strb	r2, [r3, #28]
            break;
 8018cf8:	e004      	b.n	8018d04 <cycle+0x1c0>
            break;
 8018cfa:	bf00      	nop
 8018cfc:	e002      	b.n	8018d04 <cycle+0x1c0>
            break;
 8018cfe:	bf00      	nop
 8018d00:	e000      	b.n	8018d04 <cycle+0x1c0>
            break;
 8018d02:	bf00      	nop
    }

    if (keepalive(c) != MQTT_SUCCESS) {
 8018d04:	6878      	ldr	r0, [r7, #4]
 8018d06:	f7ff fe9b 	bl	8018a40 <keepalive>
 8018d0a:	4603      	mov	r3, r0
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d005      	beq.n	8018d1c <cycle+0x1d8>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 8018d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d14:	633b      	str	r3, [r7, #48]	; 0x30
 8018d16:	e002      	b.n	8018d1e <cycle+0x1da>
                goto exit;
 8018d18:	bf00      	nop
 8018d1a:	e000      	b.n	8018d1e <cycle+0x1da>
    }

exit:
 8018d1c:	bf00      	nop
    if (rc == MQTT_SUCCESS)
 8018d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d102      	bne.n	8018d2a <cycle+0x1e6>
        rc = packet_type;
 8018d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d26:	633b      	str	r3, [r7, #48]	; 0x30
 8018d28:	e006      	b.n	8018d38 <cycle+0x1f4>
    else if (c->isconnected)
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	6a1b      	ldr	r3, [r3, #32]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d002      	beq.n	8018d38 <cycle+0x1f4>
        MQTTCloseSession(c);
 8018d32:	6878      	ldr	r0, [r7, #4]
 8018d34:	f7ff fef1 	bl	8018b1a <MQTTCloseSession>
    return rc;
 8018d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8018d3a:	4618      	mov	r0, r3
 8018d3c:	373c      	adds	r7, #60	; 0x3c
 8018d3e:	46bd      	mov	sp, r7
 8018d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d42:	bf00      	nop

08018d44 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8018d44:	b580      	push	{r7, lr}
 8018d46:	b086      	sub	sp, #24
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	6078      	str	r0, [r7, #4]
 8018d4c:	6039      	str	r1, [r7, #0]
    int rc = MQTT_SUCCESS;
 8018d4e:	2300      	movs	r3, #0
 8018d50:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8018d52:	f107 030c 	add.w	r3, r7, #12
 8018d56:	4618      	mov	r0, r3
 8018d58:	f000 fb44 	bl	80193e4 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 8018d5c:	683a      	ldr	r2, [r7, #0]
 8018d5e:	f107 030c 	add.w	r3, r7, #12
 8018d62:	4611      	mov	r1, r2
 8018d64:	4618      	mov	r0, r3
 8018d66:	f000 fafb 	bl	8019360 <TimerCountdownMS>

	  do
    {
        if (cycle(c, &timer) < 0)
 8018d6a:	f107 030c 	add.w	r3, r7, #12
 8018d6e:	4619      	mov	r1, r3
 8018d70:	6878      	ldr	r0, [r7, #4]
 8018d72:	f7ff fee7 	bl	8018b44 <cycle>
 8018d76:	4603      	mov	r3, r0
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	da03      	bge.n	8018d84 <MQTTYield+0x40>
        {
            rc = FAILURE;
 8018d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d80:	617b      	str	r3, [r7, #20]
            break;
 8018d82:	e007      	b.n	8018d94 <MQTTYield+0x50>
        }
  	} while (!TimerIsExpired(&timer));
 8018d84:	f107 030c 	add.w	r3, r7, #12
 8018d88:	4618      	mov	r0, r3
 8018d8a:	f000 fad3 	bl	8019334 <TimerIsExpired>
 8018d8e:	4603      	mov	r3, r0
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d0ea      	beq.n	8018d6a <MQTTYield+0x26>

    return rc;
 8018d94:	697b      	ldr	r3, [r7, #20]
}
 8018d96:	4618      	mov	r0, r3
 8018d98:	3718      	adds	r7, #24
 8018d9a:	46bd      	mov	sp, r7
 8018d9c:	bd80      	pop	{r7, pc}

08018d9e <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8018d9e:	b580      	push	{r7, lr}
 8018da0:	b086      	sub	sp, #24
 8018da2:	af00      	add	r7, sp, #0
 8018da4:	60f8      	str	r0, [r7, #12]
 8018da6:	60b9      	str	r1, [r7, #8]
 8018da8:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8018daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018dae:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8018db0:	6878      	ldr	r0, [r7, #4]
 8018db2:	f000 fabf 	bl	8019334 <TimerIsExpired>
 8018db6:	4603      	mov	r3, r0
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d10c      	bne.n	8018dd6 <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 8018dbc:	6879      	ldr	r1, [r7, #4]
 8018dbe:	68f8      	ldr	r0, [r7, #12]
 8018dc0:	f7ff fec0 	bl	8018b44 <cycle>
 8018dc4:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 8018dc6:	697a      	ldr	r2, [r7, #20]
 8018dc8:	68bb      	ldr	r3, [r7, #8]
 8018dca:	429a      	cmp	r2, r3
 8018dcc:	d004      	beq.n	8018dd8 <waitfor+0x3a>
 8018dce:	697b      	ldr	r3, [r7, #20]
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	daed      	bge.n	8018db0 <waitfor+0x12>
 8018dd4:	e000      	b.n	8018dd8 <waitfor+0x3a>
            break; // we timed out
 8018dd6:	bf00      	nop

    return rc;
 8018dd8:	697b      	ldr	r3, [r7, #20]
}
 8018dda:	4618      	mov	r0, r3
 8018ddc:	3718      	adds	r7, #24
 8018dde:	46bd      	mov	sp, r7
 8018de0:	bd80      	pop	{r7, pc}
	...

08018de4 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 8018de4:	b580      	push	{r7, lr}
 8018de6:	b09e      	sub	sp, #120	; 0x78
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	60f8      	str	r0, [r7, #12]
 8018dec:	60b9      	str	r1, [r7, #8]
 8018dee:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 8018df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018df4:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8018df6:	4a43      	ldr	r2, [pc, #268]	; (8018f04 <MQTTConnectWithResults+0x120>)
 8018df8:	f107 0310 	add.w	r3, r7, #16
 8018dfc:	4611      	mov	r1, r2
 8018dfe:	2258      	movs	r2, #88	; 0x58
 8018e00:	4618      	mov	r0, r3
 8018e02:	f004 fc9f 	bl	801d744 <memcpy>
    int len = 0;
 8018e06:	2300      	movs	r3, #0
 8018e08:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 8018e0a:	68fb      	ldr	r3, [r7, #12]
 8018e0c:	6a1b      	ldr	r3, [r3, #32]
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	d164      	bne.n	8018edc <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 8018e12:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018e16:	4618      	mov	r0, r3
 8018e18:	f000 fae4 	bl	80193e4 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8018e1c:	68fb      	ldr	r3, [r7, #12]
 8018e1e:	685a      	ldr	r2, [r3, #4]
 8018e20:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018e24:	4611      	mov	r1, r2
 8018e26:	4618      	mov	r0, r3
 8018e28:	f000 fa9a 	bl	8019360 <TimerCountdownMS>

    if (options == 0)
 8018e2c:	68bb      	ldr	r3, [r7, #8]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d102      	bne.n	8018e38 <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 8018e32:	f107 0310 	add.w	r3, r7, #16
 8018e36:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 8018e38:	68bb      	ldr	r3, [r7, #8]
 8018e3a:	8b1b      	ldrh	r3, [r3, #24]
 8018e3c:	461a      	mov	r2, r3
 8018e3e:	68fb      	ldr	r3, [r7, #12]
 8018e40:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 8018e42:	68bb      	ldr	r3, [r7, #8]
 8018e44:	7e9b      	ldrb	r3, [r3, #26]
 8018e46:	461a      	mov	r2, r3
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	625a      	str	r2, [r3, #36]	; 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	699b      	ldr	r3, [r3, #24]
 8018e56:	4619      	mov	r1, r3
 8018e58:	4610      	mov	r0, r2
 8018e5a:	f000 fa95 	bl	8019388 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	6918      	ldr	r0, [r3, #16]
 8018e62:	68fb      	ldr	r3, [r7, #12]
 8018e64:	689b      	ldr	r3, [r3, #8]
 8018e66:	68ba      	ldr	r2, [r7, #8]
 8018e68:	4619      	mov	r1, r3
 8018e6a:	f000 fc2f 	bl	80196cc <MQTTSerialize_connect>
 8018e6e:	6738      	str	r0, [r7, #112]	; 0x70
 8018e70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	dd34      	ble.n	8018ee0 <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTT_SUCCESS)  // send the connect packet
 8018e76:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018e7a:	461a      	mov	r2, r3
 8018e7c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8018e7e:	68f8      	ldr	r0, [r7, #12]
 8018e80:	f7ff fbb7 	bl	80185f2 <sendPacket>
 8018e84:	6778      	str	r0, [r7, #116]	; 0x74
 8018e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d12b      	bne.n	8018ee4 <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8018e8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018e90:	461a      	mov	r2, r3
 8018e92:	2102      	movs	r1, #2
 8018e94:	68f8      	ldr	r0, [r7, #12]
 8018e96:	f7ff ff82 	bl	8018d9e <waitfor>
 8018e9a:	4603      	mov	r3, r0
 8018e9c:	2b02      	cmp	r3, #2
 8018e9e:	d119      	bne.n	8018ed4 <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	2200      	movs	r2, #0
 8018eaa:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	1c58      	adds	r0, r3, #1
 8018eb0:	6879      	ldr	r1, [r7, #4]
 8018eb2:	68fb      	ldr	r3, [r7, #12]
 8018eb4:	695a      	ldr	r2, [r3, #20]
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	68db      	ldr	r3, [r3, #12]
 8018eba:	f000 fcf3 	bl	80198a4 <MQTTDeserialize_connack>
 8018ebe:	4603      	mov	r3, r0
 8018ec0:	2b01      	cmp	r3, #1
 8018ec2:	d103      	bne.n	8018ecc <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	781b      	ldrb	r3, [r3, #0]
 8018ec8:	677b      	str	r3, [r7, #116]	; 0x74
 8018eca:	e00c      	b.n	8018ee6 <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 8018ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ed0:	677b      	str	r3, [r7, #116]	; 0x74
 8018ed2:	e008      	b.n	8018ee6 <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 8018ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ed8:	677b      	str	r3, [r7, #116]	; 0x74
 8018eda:	e004      	b.n	8018ee6 <MQTTConnectWithResults+0x102>
		  goto exit;
 8018edc:	bf00      	nop
 8018ede:	e002      	b.n	8018ee6 <MQTTConnectWithResults+0x102>
        goto exit;
 8018ee0:	bf00      	nop
 8018ee2:	e000      	b.n	8018ee6 <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 8018ee4:	bf00      	nop

exit:
    if (rc == MQTT_SUCCESS)
 8018ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d105      	bne.n	8018ef8 <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 8018eec:	68fb      	ldr	r3, [r7, #12]
 8018eee:	2201      	movs	r2, #1
 8018ef0:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	2200      	movs	r2, #0
 8018ef6:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 8018ef8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8018efa:	4618      	mov	r0, r3
 8018efc:	3778      	adds	r7, #120	; 0x78
 8018efe:	46bd      	mov	sp, r7
 8018f00:	bd80      	pop	{r7, pc}
 8018f02:	bf00      	nop
 8018f04:	08021f34 	.word	0x08021f34

08018f08 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b084      	sub	sp, #16
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
 8018f10:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 8018f12:	f107 030c 	add.w	r3, r7, #12
 8018f16:	461a      	mov	r2, r3
 8018f18:	6839      	ldr	r1, [r7, #0]
 8018f1a:	6878      	ldr	r0, [r7, #4]
 8018f1c:	f7ff ff62 	bl	8018de4 <MQTTConnectWithResults>
 8018f20:	4603      	mov	r3, r0
}
 8018f22:	4618      	mov	r0, r3
 8018f24:	3710      	adds	r7, #16
 8018f26:	46bd      	mov	sp, r7
 8018f28:	bd80      	pop	{r7, pc}

08018f2a <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 8018f2a:	b580      	push	{r7, lr}
 8018f2c:	b086      	sub	sp, #24
 8018f2e:	af00      	add	r7, sp, #0
 8018f30:	60f8      	str	r0, [r7, #12]
 8018f32:	60b9      	str	r1, [r7, #8]
 8018f34:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8018f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018f3a:	617b      	str	r3, [r7, #20]
    int i = -1;
 8018f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018f40:	613b      	str	r3, [r7, #16]

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018f42:	2300      	movs	r3, #0
 8018f44:	613b      	str	r3, [r7, #16]
 8018f46:	e028      	b.n	8018f9a <MQTTSetMessageHandler+0x70>
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	693a      	ldr	r2, [r7, #16]
 8018f4c:	3205      	adds	r2, #5
 8018f4e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d01e      	beq.n	8018f94 <MQTTSetMessageHandler+0x6a>
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	693a      	ldr	r2, [r7, #16]
 8018f5a:	3205      	adds	r2, #5
 8018f5c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018f60:	68b9      	ldr	r1, [r7, #8]
 8018f62:	4618      	mov	r0, r3
 8018f64:	f7e7 f96c 	bl	8000240 <strcmp>
 8018f68:	4603      	mov	r3, r0
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d112      	bne.n	8018f94 <MQTTSetMessageHandler+0x6a>
        {
            if (messageHandler == NULL) /* remove existing */
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d10c      	bne.n	8018f8e <MQTTSetMessageHandler+0x64>
            {
                c->messageHandlers[i].topicFilter = NULL;
 8018f74:	68fb      	ldr	r3, [r7, #12]
 8018f76:	693a      	ldr	r2, [r7, #16]
 8018f78:	3205      	adds	r2, #5
 8018f7a:	2100      	movs	r1, #0
 8018f7c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                c->messageHandlers[i].fp = NULL;
 8018f80:	68fa      	ldr	r2, [r7, #12]
 8018f82:	693b      	ldr	r3, [r7, #16]
 8018f84:	3305      	adds	r3, #5
 8018f86:	00db      	lsls	r3, r3, #3
 8018f88:	4413      	add	r3, r2
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	605a      	str	r2, [r3, #4]
            }
            rc = MQTT_SUCCESS; /* return i when adding new subscription */
 8018f8e:	2300      	movs	r3, #0
 8018f90:	617b      	str	r3, [r7, #20]
            break;
 8018f92:	e005      	b.n	8018fa0 <MQTTSetMessageHandler+0x76>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018f94:	693b      	ldr	r3, [r7, #16]
 8018f96:	3301      	adds	r3, #1
 8018f98:	613b      	str	r3, [r7, #16]
 8018f9a:	693b      	ldr	r3, [r7, #16]
 8018f9c:	2b04      	cmp	r3, #4
 8018f9e:	ddd3      	ble.n	8018f48 <MQTTSetMessageHandler+0x1e>
        }
    }
    /* if no existing, look for empty slot (unless we are removing) */
    if (messageHandler != NULL) {
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d026      	beq.n	8018ff4 <MQTTSetMessageHandler+0xca>
        if (rc == FAILURE)
 8018fa6:	697b      	ldr	r3, [r7, #20]
 8018fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018fac:	d112      	bne.n	8018fd4 <MQTTSetMessageHandler+0xaa>
        {
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018fae:	2300      	movs	r3, #0
 8018fb0:	613b      	str	r3, [r7, #16]
 8018fb2:	e00c      	b.n	8018fce <MQTTSetMessageHandler+0xa4>
            {
                if (c->messageHandlers[i].topicFilter == NULL)
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	693a      	ldr	r2, [r7, #16]
 8018fb8:	3205      	adds	r2, #5
 8018fba:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d102      	bne.n	8018fc8 <MQTTSetMessageHandler+0x9e>
                {
                    rc = MQTT_SUCCESS;
 8018fc2:	2300      	movs	r3, #0
 8018fc4:	617b      	str	r3, [r7, #20]
                    break;
 8018fc6:	e005      	b.n	8018fd4 <MQTTSetMessageHandler+0xaa>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018fc8:	693b      	ldr	r3, [r7, #16]
 8018fca:	3301      	adds	r3, #1
 8018fcc:	613b      	str	r3, [r7, #16]
 8018fce:	693b      	ldr	r3, [r7, #16]
 8018fd0:	2b04      	cmp	r3, #4
 8018fd2:	ddef      	ble.n	8018fb4 <MQTTSetMessageHandler+0x8a>
                }
            }
        }
        if (i < MAX_MESSAGE_HANDLERS)
 8018fd4:	693b      	ldr	r3, [r7, #16]
 8018fd6:	2b04      	cmp	r3, #4
 8018fd8:	dc0c      	bgt.n	8018ff4 <MQTTSetMessageHandler+0xca>
        {
            c->messageHandlers[i].topicFilter = topicFilter;
 8018fda:	68fb      	ldr	r3, [r7, #12]
 8018fdc:	693a      	ldr	r2, [r7, #16]
 8018fde:	3205      	adds	r2, #5
 8018fe0:	68b9      	ldr	r1, [r7, #8]
 8018fe2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            c->messageHandlers[i].fp = messageHandler;
 8018fe6:	68fa      	ldr	r2, [r7, #12]
 8018fe8:	693b      	ldr	r3, [r7, #16]
 8018fea:	3305      	adds	r3, #5
 8018fec:	00db      	lsls	r3, r3, #3
 8018fee:	4413      	add	r3, r2
 8018ff0:	687a      	ldr	r2, [r7, #4]
 8018ff2:	605a      	str	r2, [r3, #4]
        }
    }
    return rc;
 8018ff4:	697b      	ldr	r3, [r7, #20]
}
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	3718      	adds	r7, #24
 8018ffa:	46bd      	mov	sp, r7
 8018ffc:	bd80      	pop	{r7, pc}

08018ffe <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 8018ffe:	b5b0      	push	{r4, r5, r7, lr}
 8019000:	b092      	sub	sp, #72	; 0x48
 8019002:	af04      	add	r7, sp, #16
 8019004:	60f8      	str	r0, [r7, #12]
 8019006:	60b9      	str	r1, [r7, #8]
 8019008:	603b      	str	r3, [r7, #0]
 801900a:	4613      	mov	r3, r2
 801900c:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 801900e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019012:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    int len = 0;
 8019014:	2300      	movs	r3, #0
 8019016:	633b      	str	r3, [r7, #48]	; 0x30
    MQTTString topic = MQTTString_initializer;
 8019018:	2300      	movs	r3, #0
 801901a:	61fb      	str	r3, [r7, #28]
 801901c:	2300      	movs	r3, #0
 801901e:	623b      	str	r3, [r7, #32]
 8019020:	2300      	movs	r3, #0
 8019022:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicFilter;
 8019024:	68bb      	ldr	r3, [r7, #8]
 8019026:	61fb      	str	r3, [r7, #28]

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 8019028:	68fb      	ldr	r3, [r7, #12]
 801902a:	6a1b      	ldr	r3, [r3, #32]
 801902c:	2b00      	cmp	r3, #0
 801902e:	d062      	beq.n	80190f6 <MQTTSubscribeWithResults+0xf8>
		    goto exit;

    TimerInit(&timer);
 8019030:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019034:	4618      	mov	r0, r3
 8019036:	f000 f9d5 	bl	80193e4 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	685a      	ldr	r2, [r3, #4]
 801903e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019042:	4611      	mov	r1, r2
 8019044:	4618      	mov	r0, r3
 8019046:	f000 f98b 	bl	8019360 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic,(int*)&qos);
 801904a:	68fb      	ldr	r3, [r7, #12]
 801904c:	691c      	ldr	r4, [r3, #16]
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	689b      	ldr	r3, [r3, #8]
 8019052:	461d      	mov	r5, r3
 8019054:	68f8      	ldr	r0, [r7, #12]
 8019056:	f7ff fab3 	bl	80185c0 <getNextPacketId>
 801905a:	4603      	mov	r3, r0
 801905c:	b29a      	uxth	r2, r3
 801905e:	1dfb      	adds	r3, r7, #7
 8019060:	9302      	str	r3, [sp, #8]
 8019062:	f107 031c 	add.w	r3, r7, #28
 8019066:	9301      	str	r3, [sp, #4]
 8019068:	2301      	movs	r3, #1
 801906a:	9300      	str	r3, [sp, #0]
 801906c:	4613      	mov	r3, r2
 801906e:	2200      	movs	r2, #0
 8019070:	4629      	mov	r1, r5
 8019072:	4620      	mov	r0, r4
 8019074:	f001 f897 	bl	801a1a6 <MQTTSerialize_subscribe>
 8019078:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 801907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801907c:	2b00      	cmp	r3, #0
 801907e:	dd3c      	ble.n	80190fa <MQTTSubscribeWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 8019080:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019084:	461a      	mov	r2, r3
 8019086:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019088:	68f8      	ldr	r0, [r7, #12]
 801908a:	f7ff fab2 	bl	80185f2 <sendPacket>
 801908e:	6378      	str	r0, [r7, #52]	; 0x34
 8019090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019092:	2b00      	cmp	r3, #0
 8019094:	d133      	bne.n	80190fe <MQTTSubscribeWithResults+0x100>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 8019096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801909a:	461a      	mov	r2, r3
 801909c:	2109      	movs	r1, #9
 801909e:	68f8      	ldr	r0, [r7, #12]
 80190a0:	f7ff fe7d 	bl	8018d9e <waitfor>
 80190a4:	4603      	mov	r3, r0
 80190a6:	2b09      	cmp	r3, #9
 80190a8:	d121      	bne.n	80190ee <MQTTSubscribeWithResults+0xf0>
    {
        int count = 0;
 80190aa:	2300      	movs	r3, #0
 80190ac:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        data->grantedQoS = QOS0;
 80190ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80190b0:	2200      	movs	r2, #0
 80190b2:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, 0, c->readbuf, c->readbuf_size) == 1)
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	695b      	ldr	r3, [r3, #20]
 80190b8:	68fa      	ldr	r2, [r7, #12]
 80190ba:	68d2      	ldr	r2, [r2, #12]
 80190bc:	4611      	mov	r1, r2
 80190be:	f107 0218 	add.w	r2, r7, #24
 80190c2:	f107 0016 	add.w	r0, r7, #22
 80190c6:	9101      	str	r1, [sp, #4]
 80190c8:	9300      	str	r3, [sp, #0]
 80190ca:	2300      	movs	r3, #0
 80190cc:	2101      	movs	r1, #1
 80190ce:	f001 f8e6 	bl	801a29e <MQTTDeserialize_suback>
 80190d2:	4603      	mov	r3, r0
 80190d4:	2b01      	cmp	r3, #1
 80190d6:	d113      	bne.n	8019100 <MQTTSubscribeWithResults+0x102>
        {
            if (data->grantedQoS != 0x80)
 80190d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80190da:	781b      	ldrb	r3, [r3, #0]
 80190dc:	2b80      	cmp	r3, #128	; 0x80
 80190de:	d00f      	beq.n	8019100 <MQTTSubscribeWithResults+0x102>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 80190e0:	683a      	ldr	r2, [r7, #0]
 80190e2:	68b9      	ldr	r1, [r7, #8]
 80190e4:	68f8      	ldr	r0, [r7, #12]
 80190e6:	f7ff ff20 	bl	8018f2a <MQTTSetMessageHandler>
 80190ea:	6378      	str	r0, [r7, #52]	; 0x34
 80190ec:	e008      	b.n	8019100 <MQTTSubscribeWithResults+0x102>
        }
    }
    else
        rc = FAILURE;
 80190ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80190f2:	637b      	str	r3, [r7, #52]	; 0x34
 80190f4:	e004      	b.n	8019100 <MQTTSubscribeWithResults+0x102>
		    goto exit;
 80190f6:	bf00      	nop
 80190f8:	e002      	b.n	8019100 <MQTTSubscribeWithResults+0x102>
        goto exit;
 80190fa:	bf00      	nop
 80190fc:	e000      	b.n	8019100 <MQTTSubscribeWithResults+0x102>
        goto exit;             // there was a problem
 80190fe:	bf00      	nop

exit:
    if (rc == FAILURE)
 8019100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019102:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019106:	d102      	bne.n	801910e <MQTTSubscribeWithResults+0x110>
        MQTTCloseSession(c);
 8019108:	68f8      	ldr	r0, [r7, #12]
 801910a:	f7ff fd06 	bl	8018b1a <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 801910e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019110:	4618      	mov	r0, r3
 8019112:	3738      	adds	r7, #56	; 0x38
 8019114:	46bd      	mov	sp, r7
 8019116:	bdb0      	pop	{r4, r5, r7, pc}

08019118 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 8019118:	b580      	push	{r7, lr}
 801911a:	b088      	sub	sp, #32
 801911c:	af02      	add	r7, sp, #8
 801911e:	60f8      	str	r0, [r7, #12]
 8019120:	60b9      	str	r1, [r7, #8]
 8019122:	603b      	str	r3, [r7, #0]
 8019124:	4613      	mov	r3, r2
 8019126:	71fb      	strb	r3, [r7, #7]
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 8019128:	79fa      	ldrb	r2, [r7, #7]
 801912a:	f107 0314 	add.w	r3, r7, #20
 801912e:	9300      	str	r3, [sp, #0]
 8019130:	683b      	ldr	r3, [r7, #0]
 8019132:	68b9      	ldr	r1, [r7, #8]
 8019134:	68f8      	ldr	r0, [r7, #12]
 8019136:	f7ff ff62 	bl	8018ffe <MQTTSubscribeWithResults>
 801913a:	4603      	mov	r3, r0
}
 801913c:	4618      	mov	r0, r3
 801913e:	3718      	adds	r7, #24
 8019140:	46bd      	mov	sp, r7
 8019142:	bd80      	pop	{r7, pc}

08019144 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 8019144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019146:	b097      	sub	sp, #92	; 0x5c
 8019148:	af08      	add	r7, sp, #32
 801914a:	60f8      	str	r0, [r7, #12]
 801914c:	60b9      	str	r1, [r7, #8]
 801914e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8019150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019154:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 8019156:	2300      	movs	r3, #0
 8019158:	61fb      	str	r3, [r7, #28]
 801915a:	2300      	movs	r3, #0
 801915c:	623b      	str	r3, [r7, #32]
 801915e:	2300      	movs	r3, #0
 8019160:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 8019162:	68bb      	ldr	r3, [r7, #8]
 8019164:	61fb      	str	r3, [r7, #28]
    int len = 0;
 8019166:	2300      	movs	r3, #0
 8019168:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	6a1b      	ldr	r3, [r3, #32]
 801916e:	2b00      	cmp	r3, #0
 8019170:	f000 809b 	beq.w	80192aa <MQTTPublish+0x166>
		    goto exit;

    TimerInit(&timer);
 8019174:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019178:	4618      	mov	r0, r3
 801917a:	f000 f933 	bl	80193e4 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	685a      	ldr	r2, [r3, #4]
 8019182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019186:	4611      	mov	r1, r2
 8019188:	4618      	mov	r0, r3
 801918a:	f000 f8e9 	bl	8019360 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	781b      	ldrb	r3, [r3, #0]
 8019192:	2b01      	cmp	r3, #1
 8019194:	d003      	beq.n	801919e <MQTTPublish+0x5a>
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	781b      	ldrb	r3, [r3, #0]
 801919a:	2b02      	cmp	r3, #2
 801919c:	d106      	bne.n	80191ac <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 801919e:	68f8      	ldr	r0, [r7, #12]
 80191a0:	f7ff fa0e 	bl	80185c0 <getNextPacketId>
 80191a4:	4603      	mov	r3, r0
 80191a6:	b29a      	uxth	r2, r3
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	691b      	ldr	r3, [r3, #16]
 80191b0:	603b      	str	r3, [r7, #0]
 80191b2:	68fb      	ldr	r3, [r7, #12]
 80191b4:	689b      	ldr	r3, [r3, #8]
 80191b6:	469c      	mov	ip, r3
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	781b      	ldrb	r3, [r3, #0]
 80191bc:	469e      	mov	lr, r3
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	785d      	ldrb	r5, [r3, #1]
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	689b      	ldr	r3, [r3, #8]
 80191ca:	687a      	ldr	r2, [r7, #4]
 80191cc:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 80191ce:	9206      	str	r2, [sp, #24]
 80191d0:	9305      	str	r3, [sp, #20]
 80191d2:	ac02      	add	r4, sp, #8
 80191d4:	f107 031c 	add.w	r3, r7, #28
 80191d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80191dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80191e0:	9601      	str	r6, [sp, #4]
 80191e2:	9500      	str	r5, [sp, #0]
 80191e4:	4673      	mov	r3, lr
 80191e6:	2200      	movs	r2, #0
 80191e8:	4661      	mov	r1, ip
 80191ea:	6838      	ldr	r0, [r7, #0]
 80191ec:	f000 fee9 	bl	8019fc2 <MQTTSerialize_publish>
 80191f0:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 80191f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	dd5a      	ble.n	80192ae <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 80191f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80191fc:	461a      	mov	r2, r3
 80191fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019200:	68f8      	ldr	r0, [r7, #12]
 8019202:	f7ff f9f6 	bl	80185f2 <sendPacket>
 8019206:	6378      	str	r0, [r7, #52]	; 0x34
 8019208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801920a:	2b00      	cmp	r3, #0
 801920c:	d151      	bne.n	80192b2 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	781b      	ldrb	r3, [r3, #0]
 8019212:	2b01      	cmp	r3, #1
 8019214:	d122      	bne.n	801925c <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 8019216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801921a:	461a      	mov	r2, r3
 801921c:	2104      	movs	r1, #4
 801921e:	68f8      	ldr	r0, [r7, #12]
 8019220:	f7ff fdbd 	bl	8018d9e <waitfor>
 8019224:	4603      	mov	r3, r0
 8019226:	2b04      	cmp	r3, #4
 8019228:	d114      	bne.n	8019254 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	695c      	ldr	r4, [r3, #20]
 801922e:	68fb      	ldr	r3, [r7, #12]
 8019230:	68db      	ldr	r3, [r3, #12]
 8019232:	f107 021a 	add.w	r2, r7, #26
 8019236:	f107 0119 	add.w	r1, r7, #25
 801923a:	f107 0018 	add.w	r0, r7, #24
 801923e:	9300      	str	r3, [sp, #0]
 8019240:	4623      	mov	r3, r4
 8019242:	f000 fc4c 	bl	8019ade <MQTTDeserialize_ack>
 8019246:	4603      	mov	r3, r0
 8019248:	2b01      	cmp	r3, #1
 801924a:	d035      	beq.n	80192b8 <MQTTPublish+0x174>
                rc = FAILURE;
 801924c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019250:	637b      	str	r3, [r7, #52]	; 0x34
 8019252:	e031      	b.n	80192b8 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8019254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019258:	637b      	str	r3, [r7, #52]	; 0x34
 801925a:	e02d      	b.n	80192b8 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	781b      	ldrb	r3, [r3, #0]
 8019260:	2b02      	cmp	r3, #2
 8019262:	d128      	bne.n	80192b6 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 8019264:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019268:	461a      	mov	r2, r3
 801926a:	2107      	movs	r1, #7
 801926c:	68f8      	ldr	r0, [r7, #12]
 801926e:	f7ff fd96 	bl	8018d9e <waitfor>
 8019272:	4603      	mov	r3, r0
 8019274:	2b07      	cmp	r3, #7
 8019276:	d114      	bne.n	80192a2 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	695c      	ldr	r4, [r3, #20]
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	68db      	ldr	r3, [r3, #12]
 8019280:	f107 0216 	add.w	r2, r7, #22
 8019284:	f107 0115 	add.w	r1, r7, #21
 8019288:	f107 0014 	add.w	r0, r7, #20
 801928c:	9300      	str	r3, [sp, #0]
 801928e:	4623      	mov	r3, r4
 8019290:	f000 fc25 	bl	8019ade <MQTTDeserialize_ack>
 8019294:	4603      	mov	r3, r0
 8019296:	2b01      	cmp	r3, #1
 8019298:	d00e      	beq.n	80192b8 <MQTTPublish+0x174>
                rc = FAILURE;
 801929a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801929e:	637b      	str	r3, [r7, #52]	; 0x34
 80192a0:	e00a      	b.n	80192b8 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 80192a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80192a6:	637b      	str	r3, [r7, #52]	; 0x34
 80192a8:	e006      	b.n	80192b8 <MQTTPublish+0x174>
		    goto exit;
 80192aa:	bf00      	nop
 80192ac:	e004      	b.n	80192b8 <MQTTPublish+0x174>
        goto exit;
 80192ae:	bf00      	nop
 80192b0:	e002      	b.n	80192b8 <MQTTPublish+0x174>
        goto exit; // there was a problem
 80192b2:	bf00      	nop
 80192b4:	e000      	b.n	80192b8 <MQTTPublish+0x174>
    }

exit:
 80192b6:	bf00      	nop
    if (rc == FAILURE)
 80192b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80192be:	d102      	bne.n	80192c6 <MQTTPublish+0x182>
        MQTTCloseSession(c);
 80192c0:	68f8      	ldr	r0, [r7, #12]
 80192c2:	f7ff fc2a 	bl	8018b1a <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 80192c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80192c8:	4618      	mov	r0, r3
 80192ca:	373c      	adds	r7, #60	; 0x3c
 80192cc:	46bd      	mov	sp, r7
 80192ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080192d0 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 80192d0:	b580      	push	{r7, lr}
 80192d2:	b086      	sub	sp, #24
 80192d4:	af00      	add	r7, sp, #0
 80192d6:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 80192d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80192dc:	617b      	str	r3, [r7, #20]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
 80192de:	2300      	movs	r3, #0
 80192e0:	613b      	str	r3, [r7, #16]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 80192e2:	f107 0308 	add.w	r3, r7, #8
 80192e6:	4618      	mov	r0, r3
 80192e8:	f000 f87c 	bl	80193e4 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	685a      	ldr	r2, [r3, #4]
 80192f0:	f107 0308 	add.w	r3, r7, #8
 80192f4:	4611      	mov	r1, r2
 80192f6:	4618      	mov	r0, r3
 80192f8:	f000 f832 	bl	8019360 <TimerCountdownMS>

	  len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	691a      	ldr	r2, [r3, #16]
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	689b      	ldr	r3, [r3, #8]
 8019304:	4619      	mov	r1, r3
 8019306:	4610      	mov	r0, r2
 8019308:	f000 fb59 	bl	80199be <MQTTSerialize_disconnect>
 801930c:	6138      	str	r0, [r7, #16]
    if (len > 0)
 801930e:	693b      	ldr	r3, [r7, #16]
 8019310:	2b00      	cmp	r3, #0
 8019312:	dd07      	ble.n	8019324 <MQTTDisconnect+0x54>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 8019314:	f107 0308 	add.w	r3, r7, #8
 8019318:	461a      	mov	r2, r3
 801931a:	6939      	ldr	r1, [r7, #16]
 801931c:	6878      	ldr	r0, [r7, #4]
 801931e:	f7ff f968 	bl	80185f2 <sendPacket>
 8019322:	6178      	str	r0, [r7, #20]
    MQTTCloseSession(c);
 8019324:	6878      	ldr	r0, [r7, #4]
 8019326:	f7ff fbf8 	bl	8018b1a <MQTTCloseSession>

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 801932a:	697b      	ldr	r3, [r7, #20]
}
 801932c:	4618      	mov	r0, r3
 801932e:	3718      	adds	r7, #24
 8019330:	46bd      	mov	sp, r7
 8019332:	bd80      	pop	{r7, pc}

08019334 <TimerIsExpired>:
//#define SERVER_IP4	84

uint32_t MilliTimer;

//Timer functions
char TimerIsExpired(Timer *timer) {
 8019334:	b480      	push	{r7}
 8019336:	b085      	sub	sp, #20
 8019338:	af00      	add	r7, sp, #0
 801933a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	685a      	ldr	r2, [r3, #4]
 8019340:	4b06      	ldr	r3, [pc, #24]	; (801935c <TimerIsExpired+0x28>)
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	1ad3      	subs	r3, r2, r3
 8019346:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	0fdb      	lsrs	r3, r3, #31
 801934c:	b2db      	uxtb	r3, r3
}
 801934e:	4618      	mov	r0, r3
 8019350:	3714      	adds	r7, #20
 8019352:	46bd      	mov	sp, r7
 8019354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019358:	4770      	bx	lr
 801935a:	bf00      	nop
 801935c:	2001151c 	.word	0x2001151c

08019360 <TimerCountdownMS>:

void TimerCountdownMS(Timer *timer, unsigned int timeout) {
 8019360:	b480      	push	{r7}
 8019362:	b083      	sub	sp, #12
 8019364:	af00      	add	r7, sp, #0
 8019366:	6078      	str	r0, [r7, #4]
 8019368:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 801936a:	4b06      	ldr	r3, [pc, #24]	; (8019384 <TimerCountdownMS+0x24>)
 801936c:	681a      	ldr	r2, [r3, #0]
 801936e:	683b      	ldr	r3, [r7, #0]
 8019370:	441a      	add	r2, r3
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	605a      	str	r2, [r3, #4]
}
 8019376:	bf00      	nop
 8019378:	370c      	adds	r7, #12
 801937a:	46bd      	mov	sp, r7
 801937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019380:	4770      	bx	lr
 8019382:	bf00      	nop
 8019384:	2001151c 	.word	0x2001151c

08019388 <TimerCountdown>:

void TimerCountdown(Timer *timer, unsigned int timeout) {
 8019388:	b480      	push	{r7}
 801938a:	b083      	sub	sp, #12
 801938c:	af00      	add	r7, sp, #0
 801938e:	6078      	str	r0, [r7, #4]
 8019390:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8019392:	683b      	ldr	r3, [r7, #0]
 8019394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019398:	fb03 f202 	mul.w	r2, r3, r2
 801939c:	4b05      	ldr	r3, [pc, #20]	; (80193b4 <TimerCountdown+0x2c>)
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	441a      	add	r2, r3
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	605a      	str	r2, [r3, #4]
}
 80193a6:	bf00      	nop
 80193a8:	370c      	adds	r7, #12
 80193aa:	46bd      	mov	sp, r7
 80193ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193b0:	4770      	bx	lr
 80193b2:	bf00      	nop
 80193b4:	2001151c 	.word	0x2001151c

080193b8 <TimerLeftMS>:

int TimerLeftMS(Timer *timer) {
 80193b8:	b480      	push	{r7}
 80193ba:	b085      	sub	sp, #20
 80193bc:	af00      	add	r7, sp, #0
 80193be:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	685a      	ldr	r2, [r3, #4]
 80193c4:	4b06      	ldr	r3, [pc, #24]	; (80193e0 <TimerLeftMS+0x28>)
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	1ad3      	subs	r3, r2, r3
 80193ca:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 80193d2:	4618      	mov	r0, r3
 80193d4:	3714      	adds	r7, #20
 80193d6:	46bd      	mov	sp, r7
 80193d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193dc:	4770      	bx	lr
 80193de:	bf00      	nop
 80193e0:	2001151c 	.word	0x2001151c

080193e4 <TimerInit>:

void TimerInit(Timer *timer) {
 80193e4:	b480      	push	{r7}
 80193e6:	b083      	sub	sp, #12
 80193e8:	af00      	add	r7, sp, #0
 80193ea:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	2200      	movs	r2, #0
 80193f0:	605a      	str	r2, [r3, #4]
}
 80193f2:	bf00      	nop
 80193f4:	370c      	adds	r7, #12
 80193f6:	46bd      	mov	sp, r7
 80193f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193fc:	4770      	bx	lr
	...

08019400 <NewNetwork>:
	close(n->socket);
	n->socket = 0;
}

#elif defined(MQTT_LWIP_NETCONN)
void NewNetwork(Network *n) {
 8019400:	b480      	push	{r7}
 8019402:	b083      	sub	sp, #12
 8019404:	af00      	add	r7, sp, #0
 8019406:	6078      	str	r0, [r7, #4]
	n->conn = NULL;
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	2200      	movs	r2, #0
 801940c:	601a      	str	r2, [r3, #0]
	n->buf = NULL;
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	2200      	movs	r2, #0
 8019412:	605a      	str	r2, [r3, #4]
	n->offset = 0;
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	2200      	movs	r2, #0
 8019418:	609a      	str	r2, [r3, #8]

	n->mqttread = net_read;
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	4a06      	ldr	r2, [pc, #24]	; (8019438 <NewNetwork+0x38>)
 801941e:	60da      	str	r2, [r3, #12]
	n->mqttwrite = net_write;
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	4a06      	ldr	r2, [pc, #24]	; (801943c <NewNetwork+0x3c>)
 8019424:	611a      	str	r2, [r3, #16]
	n->disconnect = net_disconnect;
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	4a05      	ldr	r2, [pc, #20]	; (8019440 <NewNetwork+0x40>)
 801942a:	615a      	str	r2, [r3, #20]
}
 801942c:	bf00      	nop
 801942e:	370c      	adds	r7, #12
 8019430:	46bd      	mov	sp, r7
 8019432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019436:	4770      	bx	lr
 8019438:	080194ad 	.word	0x080194ad
 801943c:	080195a7 	.word	0x080195a7
 8019440:	080195e1 	.word	0x080195e1

08019444 <ConnectNetwork>:

int ConnectNetwork(Network *n, char *ip, int port) {
 8019444:	b580      	push	{r7, lr}
 8019446:	b086      	sub	sp, #24
 8019448:	af00      	add	r7, sp, #0
 801944a:	60f8      	str	r0, [r7, #12]
 801944c:	60b9      	str	r1, [r7, #8]
 801944e:	607a      	str	r2, [r7, #4]
	err_t err;
	ip_addr_t server_ip;

	ipaddr_aton(ip, &server_ip);
 8019450:	f107 0310 	add.w	r3, r7, #16
 8019454:	4619      	mov	r1, r3
 8019456:	68b8      	ldr	r0, [r7, #8]
 8019458:	f7fd fe80 	bl	801715c <ip4addr_aton>

	n->conn = netconn_new(NETCONN_TCP);
 801945c:	2200      	movs	r2, #0
 801945e:	2100      	movs	r1, #0
 8019460:	2010      	movs	r0, #16
 8019462:	f7f1 fd89 	bl	800af78 <netconn_new_with_proto_and_callback>
 8019466:	4602      	mov	r2, r0
 8019468:	68fb      	ldr	r3, [r7, #12]
 801946a:	601a      	str	r2, [r3, #0]
	if (n->conn != NULL) {
 801946c:	68fb      	ldr	r3, [r7, #12]
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	2b00      	cmp	r3, #0
 8019472:	d016      	beq.n	80194a2 <ConnectNetwork+0x5e>
		err = netconn_connect(n->conn, &server_ip, port);
 8019474:	68fb      	ldr	r3, [r7, #12]
 8019476:	681b      	ldr	r3, [r3, #0]
 8019478:	687a      	ldr	r2, [r7, #4]
 801947a:	b292      	uxth	r2, r2
 801947c:	f107 0110 	add.w	r1, r7, #16
 8019480:	4618      	mov	r0, r3
 8019482:	f7f1 fe33 	bl	800b0ec <netconn_connect>
 8019486:	4603      	mov	r3, r0
 8019488:	75fb      	strb	r3, [r7, #23]

		if (err != ERR_OK) {
 801948a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801948e:	2b00      	cmp	r3, #0
 8019490:	d007      	beq.n	80194a2 <ConnectNetwork+0x5e>
			netconn_delete(n->conn); //free memory
 8019492:	68fb      	ldr	r3, [r7, #12]
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	4618      	mov	r0, r3
 8019498:	f7f1 fe0c 	bl	800b0b4 <netconn_delete>
			return -1;
 801949c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80194a0:	e000      	b.n	80194a4 <ConnectNetwork+0x60>
		}
	}

	return 0;
 80194a2:	2300      	movs	r3, #0
}
 80194a4:	4618      	mov	r0, r3
 80194a6:	3718      	adds	r7, #24
 80194a8:	46bd      	mov	sp, r7
 80194aa:	bd80      	pop	{r7, pc}

080194ac <net_read>:

int net_read(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 80194ac:	b580      	push	{r7, lr}
 80194ae:	b08a      	sub	sp, #40	; 0x28
 80194b0:	af00      	add	r7, sp, #0
 80194b2:	60f8      	str	r0, [r7, #12]
 80194b4:	60b9      	str	r1, [r7, #8]
 80194b6:	607a      	str	r2, [r7, #4]
 80194b8:	603b      	str	r3, [r7, #0]
	int rc;
	struct netbuf *inbuf;
	int offset = 0;
 80194ba:	2300      	movs	r3, #0
 80194bc:	623b      	str	r3, [r7, #32]
	int bytes = 0;
 80194be:	2300      	movs	r3, #0
 80194c0:	61fb      	str	r3, [r7, #28]

	while(bytes < len) {
 80194c2:	e065      	b.n	8019590 <net_read+0xe4>
		if(n->buf != NULL) {
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	685b      	ldr	r3, [r3, #4]
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d008      	beq.n	80194de <net_read+0x32>
			inbuf = n->buf;
 80194cc:	68fb      	ldr	r3, [r7, #12]
 80194ce:	685b      	ldr	r3, [r3, #4]
 80194d0:	617b      	str	r3, [r7, #20]
			offset = n->offset;
 80194d2:	68fb      	ldr	r3, [r7, #12]
 80194d4:	689b      	ldr	r3, [r3, #8]
 80194d6:	623b      	str	r3, [r7, #32]
			rc = ERR_OK;
 80194d8:	2300      	movs	r3, #0
 80194da:	627b      	str	r3, [r7, #36]	; 0x24
 80194dc:	e00b      	b.n	80194f6 <net_read+0x4a>
		} else {
			rc = netconn_recv(n->conn, &inbuf);
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	f107 0214 	add.w	r2, r7, #20
 80194e6:	4611      	mov	r1, r2
 80194e8:	4618      	mov	r0, r3
 80194ea:	f7f1 ffb3 	bl	800b454 <netconn_recv>
 80194ee:	4603      	mov	r3, r0
 80194f0:	627b      	str	r3, [r7, #36]	; 0x24
			offset = 0;
 80194f2:	2300      	movs	r3, #0
 80194f4:	623b      	str	r3, [r7, #32]
		}

		if(rc != ERR_OK) {
 80194f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d007      	beq.n	801950c <net_read+0x60>
			if(rc != ERR_TIMEOUT) {
 80194fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194fe:	f113 0f03 	cmn.w	r3, #3
 8019502:	d04a      	beq.n	801959a <net_read+0xee>
				bytes = -1;
 8019504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019508:	61fb      	str	r3, [r7, #28]
			}
			break;
 801950a:	e046      	b.n	801959a <net_read+0xee>
		} else {
			int nblen = netbuf_len(inbuf) - offset;
 801950c:	697b      	ldr	r3, [r7, #20]
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	891b      	ldrh	r3, [r3, #8]
 8019512:	461a      	mov	r2, r3
 8019514:	6a3b      	ldr	r3, [r7, #32]
 8019516:	1ad3      	subs	r3, r2, r3
 8019518:	61bb      	str	r3, [r7, #24]
			if((bytes+nblen) > len) {
 801951a:	69fa      	ldr	r2, [r7, #28]
 801951c:	69bb      	ldr	r3, [r7, #24]
 801951e:	4413      	add	r3, r2
 8019520:	687a      	ldr	r2, [r7, #4]
 8019522:	429a      	cmp	r2, r3
 8019524:	da1b      	bge.n	801955e <net_read+0xb2>
				netbuf_copy_partial(inbuf, buffer+bytes, len-bytes,offset);
 8019526:	697b      	ldr	r3, [r7, #20]
 8019528:	6818      	ldr	r0, [r3, #0]
 801952a:	69fb      	ldr	r3, [r7, #28]
 801952c:	68ba      	ldr	r2, [r7, #8]
 801952e:	18d1      	adds	r1, r2, r3
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	b29a      	uxth	r2, r3
 8019534:	69fb      	ldr	r3, [r7, #28]
 8019536:	b29b      	uxth	r3, r3
 8019538:	1ad3      	subs	r3, r2, r3
 801953a:	b29a      	uxth	r2, r3
 801953c:	6a3b      	ldr	r3, [r7, #32]
 801953e:	b29b      	uxth	r3, r3
 8019540:	f7f5 fc92 	bl	800ee68 <pbuf_copy_partial>
				n->buf = inbuf;
 8019544:	697a      	ldr	r2, [r7, #20]
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	605a      	str	r2, [r3, #4]
				n->offset = offset + len - bytes;
 801954a:	6a3a      	ldr	r2, [r7, #32]
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	441a      	add	r2, r3
 8019550:	69fb      	ldr	r3, [r7, #28]
 8019552:	1ad2      	subs	r2, r2, r3
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	609a      	str	r2, [r3, #8]
				bytes = len;
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	61fb      	str	r3, [r7, #28]
 801955c:	e018      	b.n	8019590 <net_read+0xe4>
			} else {
				netbuf_copy_partial(inbuf, buffer+bytes, nblen, offset);
 801955e:	697b      	ldr	r3, [r7, #20]
 8019560:	6818      	ldr	r0, [r3, #0]
 8019562:	69fb      	ldr	r3, [r7, #28]
 8019564:	68ba      	ldr	r2, [r7, #8]
 8019566:	18d1      	adds	r1, r2, r3
 8019568:	69bb      	ldr	r3, [r7, #24]
 801956a:	b29a      	uxth	r2, r3
 801956c:	6a3b      	ldr	r3, [r7, #32]
 801956e:	b29b      	uxth	r3, r3
 8019570:	f7f5 fc7a 	bl	800ee68 <pbuf_copy_partial>
				bytes += nblen;
 8019574:	69fa      	ldr	r2, [r7, #28]
 8019576:	69bb      	ldr	r3, [r7, #24]
 8019578:	4413      	add	r3, r2
 801957a:	61fb      	str	r3, [r7, #28]
				netbuf_delete(inbuf);
 801957c:	697b      	ldr	r3, [r7, #20]
 801957e:	4618      	mov	r0, r3
 8019580:	f7f3 fca2 	bl	800cec8 <netbuf_delete>
				n->buf = NULL;
 8019584:	68fb      	ldr	r3, [r7, #12]
 8019586:	2200      	movs	r2, #0
 8019588:	605a      	str	r2, [r3, #4]
				n->offset = 0;
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	2200      	movs	r2, #0
 801958e:	609a      	str	r2, [r3, #8]
	while(bytes < len) {
 8019590:	69fa      	ldr	r2, [r7, #28]
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	429a      	cmp	r2, r3
 8019596:	db95      	blt.n	80194c4 <net_read+0x18>
 8019598:	e000      	b.n	801959c <net_read+0xf0>
			break;
 801959a:	bf00      	nop
			}
		}
	}
	return bytes;
 801959c:	69fb      	ldr	r3, [r7, #28]
}
 801959e:	4618      	mov	r0, r3
 80195a0:	3728      	adds	r7, #40	; 0x28
 80195a2:	46bd      	mov	sp, r7
 80195a4:	bd80      	pop	{r7, pc}

080195a6 <net_write>:

int net_write(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 80195a6:	b580      	push	{r7, lr}
 80195a8:	b088      	sub	sp, #32
 80195aa:	af02      	add	r7, sp, #8
 80195ac:	60f8      	str	r0, [r7, #12]
 80195ae:	60b9      	str	r1, [r7, #8]
 80195b0:	607a      	str	r2, [r7, #4]
 80195b2:	603b      	str	r3, [r7, #0]
	int rc = netconn_write(n->conn, buffer, len, NETCONN_NOCOPY);
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	6818      	ldr	r0, [r3, #0]
 80195b8:	687a      	ldr	r2, [r7, #4]
 80195ba:	2300      	movs	r3, #0
 80195bc:	9300      	str	r3, [sp, #0]
 80195be:	2300      	movs	r3, #0
 80195c0:	68b9      	ldr	r1, [r7, #8]
 80195c2:	f7f1 ffc1 	bl	800b548 <netconn_write_partly>
 80195c6:	4603      	mov	r3, r0
 80195c8:	617b      	str	r3, [r7, #20]
	if(rc != ERR_OK) return -1;
 80195ca:	697b      	ldr	r3, [r7, #20]
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d002      	beq.n	80195d6 <net_write+0x30>
 80195d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80195d4:	e000      	b.n	80195d8 <net_write+0x32>
	return len;
 80195d6:	687b      	ldr	r3, [r7, #4]
}
 80195d8:	4618      	mov	r0, r3
 80195da:	3718      	adds	r7, #24
 80195dc:	46bd      	mov	sp, r7
 80195de:	bd80      	pop	{r7, pc}

080195e0 <net_disconnect>:

void net_disconnect(Network *n) {
 80195e0:	b580      	push	{r7, lr}
 80195e2:	b082      	sub	sp, #8
 80195e4:	af00      	add	r7, sp, #0
 80195e6:	6078      	str	r0, [r7, #4]
	netconn_close(n->conn); //close session
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	4618      	mov	r0, r3
 80195ee:	f7f2 f8ad 	bl	800b74c <netconn_close>
	netconn_delete(n->conn); //free memory
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	4618      	mov	r0, r3
 80195f8:	f7f1 fd5c 	bl	800b0b4 <netconn_delete>
	n->conn = NULL;
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	2200      	movs	r2, #0
 8019600:	601a      	str	r2, [r3, #0]
}
 8019602:	bf00      	nop
 8019604:	3708      	adds	r7, #8
 8019606:	46bd      	mov	sp, r7
 8019608:	bd80      	pop	{r7, pc}

0801960a <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 801960a:	b590      	push	{r4, r7, lr}
 801960c:	b085      	sub	sp, #20
 801960e:	af00      	add	r7, sp, #0
 8019610:	6078      	str	r0, [r7, #4]
	int len = 0;
 8019612:	2300      	movs	r3, #0
 8019614:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	7a1b      	ldrb	r3, [r3, #8]
 801961a:	2b03      	cmp	r3, #3
 801961c:	d102      	bne.n	8019624 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 801961e:	230c      	movs	r3, #12
 8019620:	60fb      	str	r3, [r7, #12]
 8019622:	e005      	b.n	8019630 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	7a1b      	ldrb	r3, [r3, #8]
 8019628:	2b04      	cmp	r3, #4
 801962a:	d101      	bne.n	8019630 <MQTTSerialize_connectLength+0x26>
		len = 10;
 801962c:	230a      	movs	r3, #10
 801962e:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	330c      	adds	r3, #12
 8019634:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019638:	f000 fc53 	bl	8019ee2 <MQTTstrlen>
 801963c:	4603      	mov	r3, r0
 801963e:	3302      	adds	r3, #2
 8019640:	68fa      	ldr	r2, [r7, #12]
 8019642:	4413      	add	r3, r2
 8019644:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	7edb      	ldrb	r3, [r3, #27]
 801964a:	2b00      	cmp	r3, #0
 801964c:	d013      	beq.n	8019676 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	3324      	adds	r3, #36	; 0x24
 8019652:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019656:	f000 fc44 	bl	8019ee2 <MQTTstrlen>
 801965a:	4603      	mov	r3, r0
 801965c:	1c9c      	adds	r4, r3, #2
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	3330      	adds	r3, #48	; 0x30
 8019662:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019666:	f000 fc3c 	bl	8019ee2 <MQTTstrlen>
 801966a:	4603      	mov	r3, r0
 801966c:	4423      	add	r3, r4
 801966e:	3302      	adds	r3, #2
 8019670:	68fa      	ldr	r2, [r7, #12]
 8019672:	4413      	add	r3, r2
 8019674:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801967a:	2b00      	cmp	r3, #0
 801967c:	d103      	bne.n	8019686 <MQTTSerialize_connectLength+0x7c>
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019682:	2b00      	cmp	r3, #0
 8019684:	d00a      	beq.n	801969c <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	3340      	adds	r3, #64	; 0x40
 801968a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801968e:	f000 fc28 	bl	8019ee2 <MQTTstrlen>
 8019692:	4603      	mov	r3, r0
 8019694:	3302      	adds	r3, #2
 8019696:	68fa      	ldr	r2, [r7, #12]
 8019698:	4413      	add	r3, r2
 801969a:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d103      	bne.n	80196ac <MQTTSerialize_connectLength+0xa2>
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d00a      	beq.n	80196c2 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	334c      	adds	r3, #76	; 0x4c
 80196b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80196b4:	f000 fc15 	bl	8019ee2 <MQTTstrlen>
 80196b8:	4603      	mov	r3, r0
 80196ba:	3302      	adds	r3, #2
 80196bc:	68fa      	ldr	r2, [r7, #12]
 80196be:	4413      	add	r3, r2
 80196c0:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 80196c2:	68fb      	ldr	r3, [r7, #12]
}
 80196c4:	4618      	mov	r0, r3
 80196c6:	3714      	adds	r7, #20
 80196c8:	46bd      	mov	sp, r7
 80196ca:	bd90      	pop	{r4, r7, pc}

080196cc <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 80196cc:	b580      	push	{r7, lr}
 80196ce:	b08a      	sub	sp, #40	; 0x28
 80196d0:	af00      	add	r7, sp, #0
 80196d2:	60f8      	str	r0, [r7, #12]
 80196d4:	60b9      	str	r1, [r7, #8]
 80196d6:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 80196d8:	68fb      	ldr	r3, [r7, #12]
 80196da:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 80196dc:	2300      	movs	r3, #0
 80196de:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 80196e0:	2300      	movs	r3, #0
 80196e2:	617b      	str	r3, [r7, #20]
	int len = 0;
 80196e4:	2300      	movs	r3, #0
 80196e6:	623b      	str	r3, [r7, #32]
	int rc = -1;
 80196e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80196ec:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 80196ee:	6878      	ldr	r0, [r7, #4]
 80196f0:	f7ff ff8b 	bl	801960a <MQTTSerialize_connectLength>
 80196f4:	6238      	str	r0, [r7, #32]
 80196f6:	6a38      	ldr	r0, [r7, #32]
 80196f8:	f000 faa8 	bl	8019c4c <MQTTPacket_len>
 80196fc:	4602      	mov	r2, r0
 80196fe:	68bb      	ldr	r3, [r7, #8]
 8019700:	4293      	cmp	r3, r2
 8019702:	da03      	bge.n	801970c <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8019704:	f06f 0301 	mvn.w	r3, #1
 8019708:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 801970a:	e0c2      	b.n	8019892 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 801970c:	2300      	movs	r3, #0
 801970e:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8019710:	7e3b      	ldrb	r3, [r7, #24]
 8019712:	2201      	movs	r2, #1
 8019714:	f362 1307 	bfi	r3, r2, #4, #4
 8019718:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801971a:	7e3a      	ldrb	r2, [r7, #24]
 801971c:	f107 031c 	add.w	r3, r7, #28
 8019720:	4611      	mov	r1, r2
 8019722:	4618      	mov	r0, r3
 8019724:	f000 fb21 	bl	8019d6a <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8019728:	69fb      	ldr	r3, [r7, #28]
 801972a:	6a39      	ldr	r1, [r7, #32]
 801972c:	4618      	mov	r0, r3
 801972e:	f000 fa21 	bl	8019b74 <MQTTPacket_encode>
 8019732:	4602      	mov	r2, r0
 8019734:	69fb      	ldr	r3, [r7, #28]
 8019736:	4413      	add	r3, r2
 8019738:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	7a1b      	ldrb	r3, [r3, #8]
 801973e:	2b04      	cmp	r3, #4
 8019740:	d10c      	bne.n	801975c <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8019742:	f107 031c 	add.w	r3, r7, #28
 8019746:	4955      	ldr	r1, [pc, #340]	; (801989c <MQTTSerialize_connect+0x1d0>)
 8019748:	4618      	mov	r0, r3
 801974a:	f000 fb4c 	bl	8019de6 <writeCString>
		writeChar(&ptr, (char) 4);
 801974e:	f107 031c 	add.w	r3, r7, #28
 8019752:	2104      	movs	r1, #4
 8019754:	4618      	mov	r0, r3
 8019756:	f000 fb08 	bl	8019d6a <writeChar>
 801975a:	e00b      	b.n	8019774 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 801975c:	f107 031c 	add.w	r3, r7, #28
 8019760:	494f      	ldr	r1, [pc, #316]	; (80198a0 <MQTTSerialize_connect+0x1d4>)
 8019762:	4618      	mov	r0, r3
 8019764:	f000 fb3f 	bl	8019de6 <writeCString>
		writeChar(&ptr, (char) 3);
 8019768:	f107 031c 	add.w	r3, r7, #28
 801976c:	2103      	movs	r1, #3
 801976e:	4618      	mov	r0, r3
 8019770:	f000 fafb 	bl	8019d6a <writeChar>
	}

	flags.all = 0;
 8019774:	2300      	movs	r3, #0
 8019776:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	7e9b      	ldrb	r3, [r3, #26]
 801977c:	f003 0301 	and.w	r3, r3, #1
 8019780:	b2da      	uxtb	r2, r3
 8019782:	7d3b      	ldrb	r3, [r7, #20]
 8019784:	f362 0341 	bfi	r3, r2, #1, #1
 8019788:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	7edb      	ldrb	r3, [r3, #27]
 801978e:	2b00      	cmp	r3, #0
 8019790:	bf14      	ite	ne
 8019792:	2301      	movne	r3, #1
 8019794:	2300      	moveq	r3, #0
 8019796:	b2da      	uxtb	r2, r3
 8019798:	7d3b      	ldrb	r3, [r7, #20]
 801979a:	f362 0382 	bfi	r3, r2, #2, #1
 801979e:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 80197a0:	7d3b      	ldrb	r3, [r7, #20]
 80197a2:	f003 0304 	and.w	r3, r3, #4
 80197a6:	b2db      	uxtb	r3, r3
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d013      	beq.n	80197d4 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80197b2:	f003 0303 	and.w	r3, r3, #3
 80197b6:	b2da      	uxtb	r2, r3
 80197b8:	7d3b      	ldrb	r3, [r7, #20]
 80197ba:	f362 03c4 	bfi	r3, r2, #3, #2
 80197be:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80197c6:	f003 0301 	and.w	r3, r3, #1
 80197ca:	b2da      	uxtb	r2, r3
 80197cc:	7d3b      	ldrb	r3, [r7, #20]
 80197ce:	f362 1345 	bfi	r3, r2, #5, #1
 80197d2:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d103      	bne.n	80197e4 <MQTTSerialize_connect+0x118>
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d003      	beq.n	80197ec <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 80197e4:	7d3b      	ldrb	r3, [r7, #20]
 80197e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80197ea:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d103      	bne.n	80197fc <MQTTSerialize_connect+0x130>
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d003      	beq.n	8019804 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 80197fc:	7d3b      	ldrb	r3, [r7, #20]
 80197fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019802:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8019804:	7d3a      	ldrb	r2, [r7, #20]
 8019806:	f107 031c 	add.w	r3, r7, #28
 801980a:	4611      	mov	r1, r2
 801980c:	4618      	mov	r0, r3
 801980e:	f000 faac 	bl	8019d6a <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	8b1b      	ldrh	r3, [r3, #24]
 8019816:	461a      	mov	r2, r3
 8019818:	f107 031c 	add.w	r3, r7, #28
 801981c:	4611      	mov	r1, r2
 801981e:	4618      	mov	r0, r3
 8019820:	f000 fab8 	bl	8019d94 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	f107 001c 	add.w	r0, r7, #28
 801982a:	330c      	adds	r3, #12
 801982c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801982e:	f000 faf9 	bl	8019e24 <writeMQTTString>
	if (options->willFlag)
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	7edb      	ldrb	r3, [r3, #27]
 8019836:	2b00      	cmp	r3, #0
 8019838:	d00d      	beq.n	8019856 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	f107 001c 	add.w	r0, r7, #28
 8019840:	3324      	adds	r3, #36	; 0x24
 8019842:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019844:	f000 faee 	bl	8019e24 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	f107 001c 	add.w	r0, r7, #28
 801984e:	3330      	adds	r3, #48	; 0x30
 8019850:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019852:	f000 fae7 	bl	8019e24 <writeMQTTString>
	}
	if (flags.bits.username)
 8019856:	7d3b      	ldrb	r3, [r7, #20]
 8019858:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801985c:	b2db      	uxtb	r3, r3
 801985e:	2b00      	cmp	r3, #0
 8019860:	d006      	beq.n	8019870 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	f107 001c 	add.w	r0, r7, #28
 8019868:	3340      	adds	r3, #64	; 0x40
 801986a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801986c:	f000 fada 	bl	8019e24 <writeMQTTString>
	if (flags.bits.password)
 8019870:	7d3b      	ldrb	r3, [r7, #20]
 8019872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019876:	b2db      	uxtb	r3, r3
 8019878:	2b00      	cmp	r3, #0
 801987a:	d006      	beq.n	801988a <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	f107 001c 	add.w	r0, r7, #28
 8019882:	334c      	adds	r3, #76	; 0x4c
 8019884:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019886:	f000 facd 	bl	8019e24 <writeMQTTString>

	rc = ptr - buf;
 801988a:	69fa      	ldr	r2, [r7, #28]
 801988c:	68fb      	ldr	r3, [r7, #12]
 801988e:	1ad3      	subs	r3, r2, r3
 8019890:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8019892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019894:	4618      	mov	r0, r3
 8019896:	3728      	adds	r7, #40	; 0x28
 8019898:	46bd      	mov	sp, r7
 801989a:	bd80      	pop	{r7, pc}
 801989c:	08021f8c 	.word	0x08021f8c
 80198a0:	08021f94 	.word	0x08021f94

080198a4 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 80198a4:	b580      	push	{r7, lr}
 80198a6:	b08a      	sub	sp, #40	; 0x28
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	60f8      	str	r0, [r7, #12]
 80198ac:	60b9      	str	r1, [r7, #8]
 80198ae:	607a      	str	r2, [r7, #4]
 80198b0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80198b2:	2300      	movs	r3, #0
 80198b4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80198ba:	2300      	movs	r3, #0
 80198bc:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80198be:	2300      	movs	r3, #0
 80198c0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 80198c2:	2300      	movs	r3, #0
 80198c4:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80198c6:	f107 0318 	add.w	r3, r7, #24
 80198ca:	4618      	mov	r0, r3
 80198cc:	f000 fa39 	bl	8019d42 <readChar>
 80198d0:	4603      	mov	r3, r0
 80198d2:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 80198d4:	7f3b      	ldrb	r3, [r7, #28]
 80198d6:	f023 030f 	bic.w	r3, r3, #15
 80198da:	b2db      	uxtb	r3, r3
 80198dc:	2b20      	cmp	r3, #32
 80198de:	d12e      	bne.n	801993e <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80198e0:	69bb      	ldr	r3, [r7, #24]
 80198e2:	f107 0214 	add.w	r2, r7, #20
 80198e6:	4611      	mov	r1, r2
 80198e8:	4618      	mov	r0, r3
 80198ea:	f000 f9f9 	bl	8019ce0 <MQTTPacket_decodeBuf>
 80198ee:	6278      	str	r0, [r7, #36]	; 0x24
 80198f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198f2:	69bb      	ldr	r3, [r7, #24]
 80198f4:	4413      	add	r3, r2
 80198f6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80198f8:	69bb      	ldr	r3, [r7, #24]
 80198fa:	697a      	ldr	r2, [r7, #20]
 80198fc:	4413      	add	r3, r2
 80198fe:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8019900:	69bb      	ldr	r3, [r7, #24]
 8019902:	6a3a      	ldr	r2, [r7, #32]
 8019904:	1ad3      	subs	r3, r2, r3
 8019906:	2b01      	cmp	r3, #1
 8019908:	dd1b      	ble.n	8019942 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 801990a:	f107 0318 	add.w	r3, r7, #24
 801990e:	4618      	mov	r0, r3
 8019910:	f000 fa17 	bl	8019d42 <readChar>
 8019914:	4603      	mov	r3, r0
 8019916:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8019918:	7c3b      	ldrb	r3, [r7, #16]
 801991a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801991e:	b2db      	uxtb	r3, r3
 8019920:	461a      	mov	r2, r3
 8019922:	68fb      	ldr	r3, [r7, #12]
 8019924:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8019926:	f107 0318 	add.w	r3, r7, #24
 801992a:	4618      	mov	r0, r3
 801992c:	f000 fa09 	bl	8019d42 <readChar>
 8019930:	4603      	mov	r3, r0
 8019932:	461a      	mov	r2, r3
 8019934:	68bb      	ldr	r3, [r7, #8]
 8019936:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8019938:	2301      	movs	r3, #1
 801993a:	627b      	str	r3, [r7, #36]	; 0x24
 801993c:	e002      	b.n	8019944 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801993e:	bf00      	nop
 8019940:	e000      	b.n	8019944 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8019942:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019946:	4618      	mov	r0, r3
 8019948:	3728      	adds	r7, #40	; 0x28
 801994a:	46bd      	mov	sp, r7
 801994c:	bd80      	pop	{r7, pc}

0801994e <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 801994e:	b580      	push	{r7, lr}
 8019950:	b088      	sub	sp, #32
 8019952:	af00      	add	r7, sp, #0
 8019954:	60f8      	str	r0, [r7, #12]
 8019956:	60b9      	str	r1, [r7, #8]
 8019958:	4613      	mov	r3, r2
 801995a:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 801995c:	2300      	movs	r3, #0
 801995e:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8019960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019964:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 801996a:	68bb      	ldr	r3, [r7, #8]
 801996c:	2b01      	cmp	r3, #1
 801996e:	dc03      	bgt.n	8019978 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8019970:	f06f 0301 	mvn.w	r3, #1
 8019974:	61fb      	str	r3, [r7, #28]
		goto exit;
 8019976:	e01d      	b.n	80199b4 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 8019978:	2300      	movs	r3, #0
 801997a:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 801997c:	79fb      	ldrb	r3, [r7, #7]
 801997e:	f003 030f 	and.w	r3, r3, #15
 8019982:	b2da      	uxtb	r2, r3
 8019984:	7e3b      	ldrb	r3, [r7, #24]
 8019986:	f362 1307 	bfi	r3, r2, #4, #4
 801998a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801998c:	7e3a      	ldrb	r2, [r7, #24]
 801998e:	f107 0314 	add.w	r3, r7, #20
 8019992:	4611      	mov	r1, r2
 8019994:	4618      	mov	r0, r3
 8019996:	f000 f9e8 	bl	8019d6a <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 801999a:	697b      	ldr	r3, [r7, #20]
 801999c:	2100      	movs	r1, #0
 801999e:	4618      	mov	r0, r3
 80199a0:	f000 f8e8 	bl	8019b74 <MQTTPacket_encode>
 80199a4:	4602      	mov	r2, r0
 80199a6:	697b      	ldr	r3, [r7, #20]
 80199a8:	4413      	add	r3, r2
 80199aa:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 80199ac:	697a      	ldr	r2, [r7, #20]
 80199ae:	68fb      	ldr	r3, [r7, #12]
 80199b0:	1ad3      	subs	r3, r2, r3
 80199b2:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80199b4:	69fb      	ldr	r3, [r7, #28]
}
 80199b6:	4618      	mov	r0, r3
 80199b8:	3720      	adds	r7, #32
 80199ba:	46bd      	mov	sp, r7
 80199bc:	bd80      	pop	{r7, pc}

080199be <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 80199be:	b580      	push	{r7, lr}
 80199c0:	b082      	sub	sp, #8
 80199c2:	af00      	add	r7, sp, #0
 80199c4:	6078      	str	r0, [r7, #4]
 80199c6:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 80199c8:	220e      	movs	r2, #14
 80199ca:	6839      	ldr	r1, [r7, #0]
 80199cc:	6878      	ldr	r0, [r7, #4]
 80199ce:	f7ff ffbe 	bl	801994e <MQTTSerialize_zero>
 80199d2:	4603      	mov	r3, r0
}
 80199d4:	4618      	mov	r0, r3
 80199d6:	3708      	adds	r7, #8
 80199d8:	46bd      	mov	sp, r7
 80199da:	bd80      	pop	{r7, pc}

080199dc <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 80199dc:	b580      	push	{r7, lr}
 80199de:	b082      	sub	sp, #8
 80199e0:	af00      	add	r7, sp, #0
 80199e2:	6078      	str	r0, [r7, #4]
 80199e4:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 80199e6:	220c      	movs	r2, #12
 80199e8:	6839      	ldr	r1, [r7, #0]
 80199ea:	6878      	ldr	r0, [r7, #4]
 80199ec:	f7ff ffaf 	bl	801994e <MQTTSerialize_zero>
 80199f0:	4603      	mov	r3, r0
}
 80199f2:	4618      	mov	r0, r3
 80199f4:	3708      	adds	r7, #8
 80199f6:	46bd      	mov	sp, r7
 80199f8:	bd80      	pop	{r7, pc}

080199fa <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 80199fa:	b580      	push	{r7, lr}
 80199fc:	b08a      	sub	sp, #40	; 0x28
 80199fe:	af00      	add	r7, sp, #0
 8019a00:	60f8      	str	r0, [r7, #12]
 8019a02:	60b9      	str	r1, [r7, #8]
 8019a04:	607a      	str	r2, [r7, #4]
 8019a06:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8019a08:	2300      	movs	r3, #0
 8019a0a:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8019a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a0e:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8019a10:	2300      	movs	r3, #0
 8019a12:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8019a14:	2300      	movs	r3, #0
 8019a16:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8019a18:	2300      	movs	r3, #0
 8019a1a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8019a1c:	f107 0318 	add.w	r3, r7, #24
 8019a20:	4618      	mov	r0, r3
 8019a22:	f000 f98e 	bl	8019d42 <readChar>
 8019a26:	4603      	mov	r3, r0
 8019a28:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8019a2a:	7f3b      	ldrb	r3, [r7, #28]
 8019a2c:	f023 030f 	bic.w	r3, r3, #15
 8019a30:	b2db      	uxtb	r3, r3
 8019a32:	2b30      	cmp	r3, #48	; 0x30
 8019a34:	d14b      	bne.n	8019ace <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8019a36:	7f3b      	ldrb	r3, [r7, #28]
 8019a38:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019a3c:	b2db      	uxtb	r3, r3
 8019a3e:	461a      	mov	r2, r3
 8019a40:	68fb      	ldr	r3, [r7, #12]
 8019a42:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8019a44:	7f3b      	ldrb	r3, [r7, #28]
 8019a46:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8019a4a:	b2db      	uxtb	r3, r3
 8019a4c:	461a      	mov	r2, r3
 8019a4e:	68bb      	ldr	r3, [r7, #8]
 8019a50:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8019a52:	7f3b      	ldrb	r3, [r7, #28]
 8019a54:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019a58:	b2db      	uxtb	r3, r3
 8019a5a:	461a      	mov	r2, r3
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8019a60:	69bb      	ldr	r3, [r7, #24]
 8019a62:	f107 0214 	add.w	r2, r7, #20
 8019a66:	4611      	mov	r1, r2
 8019a68:	4618      	mov	r0, r3
 8019a6a:	f000 f939 	bl	8019ce0 <MQTTPacket_decodeBuf>
 8019a6e:	6278      	str	r0, [r7, #36]	; 0x24
 8019a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a72:	69bb      	ldr	r3, [r7, #24]
 8019a74:	4413      	add	r3, r2
 8019a76:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8019a78:	69bb      	ldr	r3, [r7, #24]
 8019a7a:	697a      	ldr	r2, [r7, #20]
 8019a7c:	4413      	add	r3, r2
 8019a7e:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8019a80:	f107 0318 	add.w	r3, r7, #24
 8019a84:	6a3a      	ldr	r2, [r7, #32]
 8019a86:	4619      	mov	r1, r3
 8019a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019a8a:	f000 f9f9 	bl	8019e80 <readMQTTLenString>
 8019a8e:	4603      	mov	r3, r0
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d01e      	beq.n	8019ad2 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8019a94:	69bb      	ldr	r3, [r7, #24]
 8019a96:	6a3a      	ldr	r2, [r7, #32]
 8019a98:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	db19      	blt.n	8019ad2 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8019a9e:	68bb      	ldr	r3, [r7, #8]
 8019aa0:	681b      	ldr	r3, [r3, #0]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	dd08      	ble.n	8019ab8 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8019aa6:	f107 0318 	add.w	r3, r7, #24
 8019aaa:	4618      	mov	r0, r3
 8019aac:	f000 f92e 	bl	8019d0c <readInt>
 8019ab0:	4603      	mov	r3, r0
 8019ab2:	b29a      	uxth	r2, r3
 8019ab4:	683b      	ldr	r3, [r7, #0]
 8019ab6:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8019ab8:	69bb      	ldr	r3, [r7, #24]
 8019aba:	6a3a      	ldr	r2, [r7, #32]
 8019abc:	1ad2      	subs	r2, r2, r3
 8019abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ac0:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8019ac2:	69ba      	ldr	r2, [r7, #24]
 8019ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ac6:	601a      	str	r2, [r3, #0]
	rc = 1;
 8019ac8:	2301      	movs	r3, #1
 8019aca:	627b      	str	r3, [r7, #36]	; 0x24
 8019acc:	e002      	b.n	8019ad4 <MQTTDeserialize_publish+0xda>
		goto exit;
 8019ace:	bf00      	nop
 8019ad0:	e000      	b.n	8019ad4 <MQTTDeserialize_publish+0xda>
		goto exit;
 8019ad2:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019ad6:	4618      	mov	r0, r3
 8019ad8:	3728      	adds	r7, #40	; 0x28
 8019ada:	46bd      	mov	sp, r7
 8019adc:	bd80      	pop	{r7, pc}

08019ade <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8019ade:	b580      	push	{r7, lr}
 8019ae0:	b08a      	sub	sp, #40	; 0x28
 8019ae2:	af00      	add	r7, sp, #0
 8019ae4:	60f8      	str	r0, [r7, #12]
 8019ae6:	60b9      	str	r1, [r7, #8]
 8019ae8:	607a      	str	r2, [r7, #4]
 8019aea:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8019aec:	2300      	movs	r3, #0
 8019aee:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8019af0:	683b      	ldr	r3, [r7, #0]
 8019af2:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8019af4:	2300      	movs	r3, #0
 8019af6:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8019af8:	2300      	movs	r3, #0
 8019afa:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8019afc:	f107 0318 	add.w	r3, r7, #24
 8019b00:	4618      	mov	r0, r3
 8019b02:	f000 f91e 	bl	8019d42 <readChar>
 8019b06:	4603      	mov	r3, r0
 8019b08:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8019b0a:	7f3b      	ldrb	r3, [r7, #28]
 8019b0c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019b10:	b2db      	uxtb	r3, r3
 8019b12:	461a      	mov	r2, r3
 8019b14:	68bb      	ldr	r3, [r7, #8]
 8019b16:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8019b18:	7f3b      	ldrb	r3, [r7, #28]
 8019b1a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8019b1e:	b2db      	uxtb	r3, r3
 8019b20:	461a      	mov	r2, r3
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8019b26:	69bb      	ldr	r3, [r7, #24]
 8019b28:	f107 0214 	add.w	r2, r7, #20
 8019b2c:	4611      	mov	r1, r2
 8019b2e:	4618      	mov	r0, r3
 8019b30:	f000 f8d6 	bl	8019ce0 <MQTTPacket_decodeBuf>
 8019b34:	6278      	str	r0, [r7, #36]	; 0x24
 8019b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019b38:	69bb      	ldr	r3, [r7, #24]
 8019b3a:	4413      	add	r3, r2
 8019b3c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8019b3e:	69bb      	ldr	r3, [r7, #24]
 8019b40:	697a      	ldr	r2, [r7, #20]
 8019b42:	4413      	add	r3, r2
 8019b44:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8019b46:	69bb      	ldr	r3, [r7, #24]
 8019b48:	6a3a      	ldr	r2, [r7, #32]
 8019b4a:	1ad3      	subs	r3, r2, r3
 8019b4c:	2b01      	cmp	r3, #1
 8019b4e:	dd0b      	ble.n	8019b68 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8019b50:	f107 0318 	add.w	r3, r7, #24
 8019b54:	4618      	mov	r0, r3
 8019b56:	f000 f8d9 	bl	8019d0c <readInt>
 8019b5a:	4603      	mov	r3, r0
 8019b5c:	b29a      	uxth	r2, r3
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8019b62:	2301      	movs	r3, #1
 8019b64:	627b      	str	r3, [r7, #36]	; 0x24
 8019b66:	e000      	b.n	8019b6a <MQTTDeserialize_ack+0x8c>
		goto exit;
 8019b68:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	3728      	adds	r7, #40	; 0x28
 8019b70:	46bd      	mov	sp, r7
 8019b72:	bd80      	pop	{r7, pc}

08019b74 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8019b74:	b480      	push	{r7}
 8019b76:	b085      	sub	sp, #20
 8019b78:	af00      	add	r7, sp, #0
 8019b7a:	6078      	str	r0, [r7, #4]
 8019b7c:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8019b7e:	2300      	movs	r3, #0
 8019b80:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8019b82:	683b      	ldr	r3, [r7, #0]
 8019b84:	425a      	negs	r2, r3
 8019b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019b8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8019b8e:	bf58      	it	pl
 8019b90:	4253      	negpl	r3, r2
 8019b92:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8019b94:	683b      	ldr	r3, [r7, #0]
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	da00      	bge.n	8019b9c <MQTTPacket_encode+0x28>
 8019b9a:	337f      	adds	r3, #127	; 0x7f
 8019b9c:	11db      	asrs	r3, r3, #7
 8019b9e:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8019ba0:	683b      	ldr	r3, [r7, #0]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	dd03      	ble.n	8019bae <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8019ba6:	7afb      	ldrb	r3, [r7, #11]
 8019ba8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019bac:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	1c5a      	adds	r2, r3, #1
 8019bb2:	60fa      	str	r2, [r7, #12]
 8019bb4:	461a      	mov	r2, r3
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	4413      	add	r3, r2
 8019bba:	7afa      	ldrb	r2, [r7, #11]
 8019bbc:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8019bbe:	683b      	ldr	r3, [r7, #0]
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	dcde      	bgt.n	8019b82 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8019bc4:	68fb      	ldr	r3, [r7, #12]
}
 8019bc6:	4618      	mov	r0, r3
 8019bc8:	3714      	adds	r7, #20
 8019bca:	46bd      	mov	sp, r7
 8019bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bd0:	4770      	bx	lr

08019bd2 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8019bd2:	b580      	push	{r7, lr}
 8019bd4:	b086      	sub	sp, #24
 8019bd6:	af00      	add	r7, sp, #0
 8019bd8:	6078      	str	r0, [r7, #4]
 8019bda:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8019bdc:	2301      	movs	r3, #1
 8019bde:	617b      	str	r3, [r7, #20]
	int len = 0;
 8019be0:	2300      	movs	r3, #0
 8019be2:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8019be4:	683b      	ldr	r3, [r7, #0]
 8019be6:	2200      	movs	r2, #0
 8019be8:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8019bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019bee:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8019bf0:	693b      	ldr	r3, [r7, #16]
 8019bf2:	3301      	adds	r3, #1
 8019bf4:	613b      	str	r3, [r7, #16]
 8019bf6:	693b      	ldr	r3, [r7, #16]
 8019bf8:	2b04      	cmp	r3, #4
 8019bfa:	dd03      	ble.n	8019c04 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8019bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019c00:	60fb      	str	r3, [r7, #12]
			goto exit;
 8019c02:	e01d      	b.n	8019c40 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8019c04:	f107 020b 	add.w	r2, r7, #11
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	2101      	movs	r1, #1
 8019c0c:	4610      	mov	r0, r2
 8019c0e:	4798      	blx	r3
 8019c10:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	2b01      	cmp	r3, #1
 8019c16:	d112      	bne.n	8019c3e <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8019c18:	683b      	ldr	r3, [r7, #0]
 8019c1a:	681a      	ldr	r2, [r3, #0]
 8019c1c:	7afb      	ldrb	r3, [r7, #11]
 8019c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019c22:	6979      	ldr	r1, [r7, #20]
 8019c24:	fb01 f303 	mul.w	r3, r1, r3
 8019c28:	441a      	add	r2, r3
 8019c2a:	683b      	ldr	r3, [r7, #0]
 8019c2c:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8019c2e:	697b      	ldr	r3, [r7, #20]
 8019c30:	01db      	lsls	r3, r3, #7
 8019c32:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8019c34:	7afb      	ldrb	r3, [r7, #11]
 8019c36:	b25b      	sxtb	r3, r3
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	dbd6      	blt.n	8019bea <MQTTPacket_decode+0x18>
exit:
 8019c3c:	e000      	b.n	8019c40 <MQTTPacket_decode+0x6e>
			goto exit;
 8019c3e:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8019c40:	693b      	ldr	r3, [r7, #16]
}
 8019c42:	4618      	mov	r0, r3
 8019c44:	3718      	adds	r7, #24
 8019c46:	46bd      	mov	sp, r7
 8019c48:	bd80      	pop	{r7, pc}
	...

08019c4c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8019c4c:	b480      	push	{r7}
 8019c4e:	b083      	sub	sp, #12
 8019c50:	af00      	add	r7, sp, #0
 8019c52:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	3301      	adds	r3, #1
 8019c58:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	2b7f      	cmp	r3, #127	; 0x7f
 8019c5e:	dc03      	bgt.n	8019c68 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	3301      	adds	r3, #1
 8019c64:	607b      	str	r3, [r7, #4]
 8019c66:	e012      	b.n	8019c8e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019c6e:	da03      	bge.n	8019c78 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	3302      	adds	r3, #2
 8019c74:	607b      	str	r3, [r7, #4]
 8019c76:	e00a      	b.n	8019c8e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	4a08      	ldr	r2, [pc, #32]	; (8019c9c <MQTTPacket_len+0x50>)
 8019c7c:	4293      	cmp	r3, r2
 8019c7e:	dc03      	bgt.n	8019c88 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	3303      	adds	r3, #3
 8019c84:	607b      	str	r3, [r7, #4]
 8019c86:	e002      	b.n	8019c8e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	3304      	adds	r3, #4
 8019c8c:	607b      	str	r3, [r7, #4]
	return rem_len;
 8019c8e:	687b      	ldr	r3, [r7, #4]
}
 8019c90:	4618      	mov	r0, r3
 8019c92:	370c      	adds	r7, #12
 8019c94:	46bd      	mov	sp, r7
 8019c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c9a:	4770      	bx	lr
 8019c9c:	001ffffe 	.word	0x001ffffe

08019ca0 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8019ca0:	b480      	push	{r7}
 8019ca2:	b085      	sub	sp, #20
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	6078      	str	r0, [r7, #4]
 8019ca8:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8019caa:	2300      	movs	r3, #0
 8019cac:	60fb      	str	r3, [r7, #12]
 8019cae:	e00a      	b.n	8019cc6 <bufchar+0x26>
		*c = *bufptr++;
 8019cb0:	4b0a      	ldr	r3, [pc, #40]	; (8019cdc <bufchar+0x3c>)
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	1c5a      	adds	r2, r3, #1
 8019cb6:	4909      	ldr	r1, [pc, #36]	; (8019cdc <bufchar+0x3c>)
 8019cb8:	600a      	str	r2, [r1, #0]
 8019cba:	781a      	ldrb	r2, [r3, #0]
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	3301      	adds	r3, #1
 8019cc4:	60fb      	str	r3, [r7, #12]
 8019cc6:	68fa      	ldr	r2, [r7, #12]
 8019cc8:	683b      	ldr	r3, [r7, #0]
 8019cca:	429a      	cmp	r2, r3
 8019ccc:	dbf0      	blt.n	8019cb0 <bufchar+0x10>
	return count;
 8019cce:	683b      	ldr	r3, [r7, #0]
}
 8019cd0:	4618      	mov	r0, r3
 8019cd2:	3714      	adds	r7, #20
 8019cd4:	46bd      	mov	sp, r7
 8019cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cda:	4770      	bx	lr
 8019cdc:	20011520 	.word	0x20011520

08019ce0 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	b082      	sub	sp, #8
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	6078      	str	r0, [r7, #4]
 8019ce8:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8019cea:	4a06      	ldr	r2, [pc, #24]	; (8019d04 <MQTTPacket_decodeBuf+0x24>)
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8019cf0:	6839      	ldr	r1, [r7, #0]
 8019cf2:	4805      	ldr	r0, [pc, #20]	; (8019d08 <MQTTPacket_decodeBuf+0x28>)
 8019cf4:	f7ff ff6d 	bl	8019bd2 <MQTTPacket_decode>
 8019cf8:	4603      	mov	r3, r0
}
 8019cfa:	4618      	mov	r0, r3
 8019cfc:	3708      	adds	r7, #8
 8019cfe:	46bd      	mov	sp, r7
 8019d00:	bd80      	pop	{r7, pc}
 8019d02:	bf00      	nop
 8019d04:	20011520 	.word	0x20011520
 8019d08:	08019ca1 	.word	0x08019ca1

08019d0c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8019d0c:	b480      	push	{r7}
 8019d0e:	b085      	sub	sp, #20
 8019d10:	af00      	add	r7, sp, #0
 8019d12:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	781b      	ldrb	r3, [r3, #0]
 8019d1e:	021b      	lsls	r3, r3, #8
 8019d20:	68fa      	ldr	r2, [r7, #12]
 8019d22:	3201      	adds	r2, #1
 8019d24:	7812      	ldrb	r2, [r2, #0]
 8019d26:	4413      	add	r3, r2
 8019d28:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	1c9a      	adds	r2, r3, #2
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	601a      	str	r2, [r3, #0]
	return len;
 8019d34:	68bb      	ldr	r3, [r7, #8]
}
 8019d36:	4618      	mov	r0, r3
 8019d38:	3714      	adds	r7, #20
 8019d3a:	46bd      	mov	sp, r7
 8019d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d40:	4770      	bx	lr

08019d42 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8019d42:	b480      	push	{r7}
 8019d44:	b085      	sub	sp, #20
 8019d46:	af00      	add	r7, sp, #0
 8019d48:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	781b      	ldrb	r3, [r3, #0]
 8019d50:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	1c5a      	adds	r2, r3, #1
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	601a      	str	r2, [r3, #0]
	return c;
 8019d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8019d5e:	4618      	mov	r0, r3
 8019d60:	3714      	adds	r7, #20
 8019d62:	46bd      	mov	sp, r7
 8019d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d68:	4770      	bx	lr

08019d6a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8019d6a:	b480      	push	{r7}
 8019d6c:	b083      	sub	sp, #12
 8019d6e:	af00      	add	r7, sp, #0
 8019d70:	6078      	str	r0, [r7, #4]
 8019d72:	460b      	mov	r3, r1
 8019d74:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	78fa      	ldrb	r2, [r7, #3]
 8019d7c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	1c5a      	adds	r2, r3, #1
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	601a      	str	r2, [r3, #0]
}
 8019d88:	bf00      	nop
 8019d8a:	370c      	adds	r7, #12
 8019d8c:	46bd      	mov	sp, r7
 8019d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d92:	4770      	bx	lr

08019d94 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8019d94:	b480      	push	{r7}
 8019d96:	b083      	sub	sp, #12
 8019d98:	af00      	add	r7, sp, #0
 8019d9a:	6078      	str	r0, [r7, #4]
 8019d9c:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8019d9e:	683b      	ldr	r3, [r7, #0]
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	da00      	bge.n	8019da6 <writeInt+0x12>
 8019da4:	33ff      	adds	r3, #255	; 0xff
 8019da6:	121b      	asrs	r3, r3, #8
 8019da8:	461a      	mov	r2, r3
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	b2d2      	uxtb	r2, r2
 8019db0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	1c5a      	adds	r2, r3, #1
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8019dbc:	683b      	ldr	r3, [r7, #0]
 8019dbe:	425a      	negs	r2, r3
 8019dc0:	b2db      	uxtb	r3, r3
 8019dc2:	b2d2      	uxtb	r2, r2
 8019dc4:	bf58      	it	pl
 8019dc6:	4253      	negpl	r3, r2
 8019dc8:	687a      	ldr	r2, [r7, #4]
 8019dca:	6812      	ldr	r2, [r2, #0]
 8019dcc:	b2db      	uxtb	r3, r3
 8019dce:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	1c5a      	adds	r2, r3, #1
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	601a      	str	r2, [r3, #0]
}
 8019dda:	bf00      	nop
 8019ddc:	370c      	adds	r7, #12
 8019dde:	46bd      	mov	sp, r7
 8019de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019de4:	4770      	bx	lr

08019de6 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8019de6:	b580      	push	{r7, lr}
 8019de8:	b084      	sub	sp, #16
 8019dea:	af00      	add	r7, sp, #0
 8019dec:	6078      	str	r0, [r7, #4]
 8019dee:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8019df0:	6838      	ldr	r0, [r7, #0]
 8019df2:	f7e6 fa2f 	bl	8000254 <strlen>
 8019df6:	4603      	mov	r3, r0
 8019df8:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8019dfa:	68f9      	ldr	r1, [r7, #12]
 8019dfc:	6878      	ldr	r0, [r7, #4]
 8019dfe:	f7ff ffc9 	bl	8019d94 <writeInt>
	memcpy(*pptr, string, len);
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	68fa      	ldr	r2, [r7, #12]
 8019e08:	6839      	ldr	r1, [r7, #0]
 8019e0a:	4618      	mov	r0, r3
 8019e0c:	f003 fc9a 	bl	801d744 <memcpy>
	*pptr += len;
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	681a      	ldr	r2, [r3, #0]
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	441a      	add	r2, r3
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	601a      	str	r2, [r3, #0]
}
 8019e1c:	bf00      	nop
 8019e1e:	3710      	adds	r7, #16
 8019e20:	46bd      	mov	sp, r7
 8019e22:	bd80      	pop	{r7, pc}

08019e24 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8019e24:	b580      	push	{r7, lr}
 8019e26:	b084      	sub	sp, #16
 8019e28:	af00      	add	r7, sp, #0
 8019e2a:	60f8      	str	r0, [r7, #12]
 8019e2c:	4638      	mov	r0, r7
 8019e2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	dd12      	ble.n	8019e5e <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	4619      	mov	r1, r3
 8019e3c:	68f8      	ldr	r0, [r7, #12]
 8019e3e:	f7ff ffa9 	bl	8019d94 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	68b9      	ldr	r1, [r7, #8]
 8019e48:	687a      	ldr	r2, [r7, #4]
 8019e4a:	4618      	mov	r0, r3
 8019e4c:	f003 fc7a 	bl	801d744 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	687a      	ldr	r2, [r7, #4]
 8019e56:	441a      	add	r2, r3
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8019e5c:	e00c      	b.n	8019e78 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8019e5e:	683b      	ldr	r3, [r7, #0]
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	d005      	beq.n	8019e70 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8019e64:	683b      	ldr	r3, [r7, #0]
 8019e66:	4619      	mov	r1, r3
 8019e68:	68f8      	ldr	r0, [r7, #12]
 8019e6a:	f7ff ffbc 	bl	8019de6 <writeCString>
}
 8019e6e:	e003      	b.n	8019e78 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8019e70:	2100      	movs	r1, #0
 8019e72:	68f8      	ldr	r0, [r7, #12]
 8019e74:	f7ff ff8e 	bl	8019d94 <writeInt>
}
 8019e78:	bf00      	nop
 8019e7a:	3710      	adds	r7, #16
 8019e7c:	46bd      	mov	sp, r7
 8019e7e:	bd80      	pop	{r7, pc}

08019e80 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8019e80:	b580      	push	{r7, lr}
 8019e82:	b086      	sub	sp, #24
 8019e84:	af00      	add	r7, sp, #0
 8019e86:	60f8      	str	r0, [r7, #12]
 8019e88:	60b9      	str	r1, [r7, #8]
 8019e8a:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8019e8c:	2300      	movs	r3, #0
 8019e8e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8019e90:	68bb      	ldr	r3, [r7, #8]
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	687a      	ldr	r2, [r7, #4]
 8019e96:	1ad3      	subs	r3, r2, r3
 8019e98:	2b01      	cmp	r3, #1
 8019e9a:	dd1a      	ble.n	8019ed2 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8019e9c:	68b8      	ldr	r0, [r7, #8]
 8019e9e:	f7ff ff35 	bl	8019d0c <readInt>
 8019ea2:	4602      	mov	r2, r0
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8019ea8:	68bb      	ldr	r3, [r7, #8]
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	68fa      	ldr	r2, [r7, #12]
 8019eae:	6852      	ldr	r2, [r2, #4]
 8019eb0:	4413      	add	r3, r2
 8019eb2:	687a      	ldr	r2, [r7, #4]
 8019eb4:	429a      	cmp	r2, r3
 8019eb6:	d30c      	bcc.n	8019ed2 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8019eb8:	68bb      	ldr	r3, [r7, #8]
 8019eba:	681a      	ldr	r2, [r3, #0]
 8019ebc:	68fb      	ldr	r3, [r7, #12]
 8019ebe:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8019ec0:	68bb      	ldr	r3, [r7, #8]
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	68fa      	ldr	r2, [r7, #12]
 8019ec6:	6852      	ldr	r2, [r2, #4]
 8019ec8:	441a      	add	r2, r3
 8019eca:	68bb      	ldr	r3, [r7, #8]
 8019ecc:	601a      	str	r2, [r3, #0]
			rc = 1;
 8019ece:	2301      	movs	r3, #1
 8019ed0:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8019ed2:	68fb      	ldr	r3, [r7, #12]
 8019ed4:	2200      	movs	r2, #0
 8019ed6:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8019ed8:	697b      	ldr	r3, [r7, #20]
}
 8019eda:	4618      	mov	r0, r3
 8019edc:	3718      	adds	r7, #24
 8019ede:	46bd      	mov	sp, r7
 8019ee0:	bd80      	pop	{r7, pc}

08019ee2 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8019ee2:	b580      	push	{r7, lr}
 8019ee4:	b086      	sub	sp, #24
 8019ee6:	af00      	add	r7, sp, #0
 8019ee8:	1d3b      	adds	r3, r7, #4
 8019eea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8019eee:	2300      	movs	r3, #0
 8019ef0:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d006      	beq.n	8019f06 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	4618      	mov	r0, r3
 8019efc:	f7e6 f9aa 	bl	8000254 <strlen>
 8019f00:	4603      	mov	r3, r0
 8019f02:	617b      	str	r3, [r7, #20]
 8019f04:	e001      	b.n	8019f0a <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8019f06:	68bb      	ldr	r3, [r7, #8]
 8019f08:	617b      	str	r3, [r7, #20]
	return rc;
 8019f0a:	697b      	ldr	r3, [r7, #20]
}
 8019f0c:	4618      	mov	r0, r3
 8019f0e:	3718      	adds	r7, #24
 8019f10:	46bd      	mov	sp, r7
 8019f12:	bd80      	pop	{r7, pc}

08019f14 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8019f14:	b580      	push	{r7, lr}
 8019f16:	b086      	sub	sp, #24
 8019f18:	af00      	add	r7, sp, #0
 8019f1a:	6078      	str	r0, [r7, #4]
 8019f1c:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8019f1e:	2300      	movs	r3, #0
 8019f20:	617b      	str	r3, [r7, #20]
		blen = 0;
 8019f22:	2300      	movs	r3, #0
 8019f24:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d00a      	beq.n	8019f44 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	4618      	mov	r0, r3
 8019f3a:	f7e6 f98b 	bl	8000254 <strlen>
 8019f3e:	4603      	mov	r3, r0
 8019f40:	617b      	str	r3, [r7, #20]
 8019f42:	e005      	b.n	8019f50 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	689b      	ldr	r3, [r3, #8]
 8019f48:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	685b      	ldr	r3, [r3, #4]
 8019f4e:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8019f50:	6838      	ldr	r0, [r7, #0]
 8019f52:	f7e6 f97f 	bl	8000254 <strlen>
 8019f56:	4603      	mov	r3, r0
 8019f58:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 8019f5a:	697a      	ldr	r2, [r7, #20]
 8019f5c:	68fb      	ldr	r3, [r7, #12]
 8019f5e:	429a      	cmp	r2, r3
 8019f60:	d10a      	bne.n	8019f78 <MQTTPacket_equals+0x64>
 8019f62:	697b      	ldr	r3, [r7, #20]
 8019f64:	461a      	mov	r2, r3
 8019f66:	6839      	ldr	r1, [r7, #0]
 8019f68:	6938      	ldr	r0, [r7, #16]
 8019f6a:	f003 fcd5 	bl	801d918 <strncmp>
 8019f6e:	4603      	mov	r3, r0
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	d101      	bne.n	8019f78 <MQTTPacket_equals+0x64>
 8019f74:	2301      	movs	r3, #1
 8019f76:	e000      	b.n	8019f7a <MQTTPacket_equals+0x66>
 8019f78:	2300      	movs	r3, #0
}
 8019f7a:	4618      	mov	r0, r3
 8019f7c:	3718      	adds	r7, #24
 8019f7e:	46bd      	mov	sp, r7
 8019f80:	bd80      	pop	{r7, pc}

08019f82 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8019f82:	b580      	push	{r7, lr}
 8019f84:	b086      	sub	sp, #24
 8019f86:	af00      	add	r7, sp, #0
 8019f88:	60f8      	str	r0, [r7, #12]
 8019f8a:	4638      	mov	r0, r7
 8019f8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8019f90:	2300      	movs	r3, #0
 8019f92:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8019f94:	463b      	mov	r3, r7
 8019f96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019f9a:	f7ff ffa2 	bl	8019ee2 <MQTTstrlen>
 8019f9e:	4603      	mov	r3, r0
 8019fa0:	1c9a      	adds	r2, r3, #2
 8019fa2:	6a3b      	ldr	r3, [r7, #32]
 8019fa4:	4413      	add	r3, r2
 8019fa6:	697a      	ldr	r2, [r7, #20]
 8019fa8:	4413      	add	r3, r2
 8019faa:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8019fac:	68fb      	ldr	r3, [r7, #12]
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	dd02      	ble.n	8019fb8 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8019fb2:	697b      	ldr	r3, [r7, #20]
 8019fb4:	3302      	adds	r3, #2
 8019fb6:	617b      	str	r3, [r7, #20]
	return len;
 8019fb8:	697b      	ldr	r3, [r7, #20]
}
 8019fba:	4618      	mov	r0, r3
 8019fbc:	3718      	adds	r7, #24
 8019fbe:	46bd      	mov	sp, r7
 8019fc0:	bd80      	pop	{r7, pc}

08019fc2 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8019fc2:	b580      	push	{r7, lr}
 8019fc4:	b08a      	sub	sp, #40	; 0x28
 8019fc6:	af02      	add	r7, sp, #8
 8019fc8:	60f8      	str	r0, [r7, #12]
 8019fca:	60b9      	str	r1, [r7, #8]
 8019fcc:	603b      	str	r3, [r7, #0]
 8019fce:	4613      	mov	r3, r2
 8019fd0:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8019fd2:	68fb      	ldr	r3, [r7, #12]
 8019fd4:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8019fd6:	2300      	movs	r3, #0
 8019fd8:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8019fda:	2300      	movs	r3, #0
 8019fdc:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8019fde:	2300      	movs	r3, #0
 8019fe0:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8019fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019fe4:	9300      	str	r3, [sp, #0]
 8019fe6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019fec:	6838      	ldr	r0, [r7, #0]
 8019fee:	f7ff ffc8 	bl	8019f82 <MQTTSerialize_publishLength>
 8019ff2:	61b8      	str	r0, [r7, #24]
 8019ff4:	69b8      	ldr	r0, [r7, #24]
 8019ff6:	f7ff fe29 	bl	8019c4c <MQTTPacket_len>
 8019ffa:	4602      	mov	r2, r0
 8019ffc:	68bb      	ldr	r3, [r7, #8]
 8019ffe:	4293      	cmp	r3, r2
 801a000:	da03      	bge.n	801a00a <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801a002:	f06f 0301 	mvn.w	r3, #1
 801a006:	61fb      	str	r3, [r7, #28]
		goto exit;
 801a008:	e04c      	b.n	801a0a4 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 801a00a:	7c3b      	ldrb	r3, [r7, #16]
 801a00c:	2203      	movs	r2, #3
 801a00e:	f362 1307 	bfi	r3, r2, #4, #4
 801a012:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 801a014:	79fb      	ldrb	r3, [r7, #7]
 801a016:	f003 0301 	and.w	r3, r3, #1
 801a01a:	b2da      	uxtb	r2, r3
 801a01c:	7c3b      	ldrb	r3, [r7, #16]
 801a01e:	f362 03c3 	bfi	r3, r2, #3, #1
 801a022:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 801a024:	683b      	ldr	r3, [r7, #0]
 801a026:	f003 0303 	and.w	r3, r3, #3
 801a02a:	b2da      	uxtb	r2, r3
 801a02c:	7c3b      	ldrb	r3, [r7, #16]
 801a02e:	f362 0342 	bfi	r3, r2, #1, #2
 801a032:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 801a034:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a038:	f003 0301 	and.w	r3, r3, #1
 801a03c:	b2da      	uxtb	r2, r3
 801a03e:	7c3b      	ldrb	r3, [r7, #16]
 801a040:	f362 0300 	bfi	r3, r2, #0, #1
 801a044:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 801a046:	7c3a      	ldrb	r2, [r7, #16]
 801a048:	f107 0314 	add.w	r3, r7, #20
 801a04c:	4611      	mov	r1, r2
 801a04e:	4618      	mov	r0, r3
 801a050:	f7ff fe8b 	bl	8019d6a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801a054:	697b      	ldr	r3, [r7, #20]
 801a056:	69b9      	ldr	r1, [r7, #24]
 801a058:	4618      	mov	r0, r3
 801a05a:	f7ff fd8b 	bl	8019b74 <MQTTPacket_encode>
 801a05e:	4602      	mov	r2, r0
 801a060:	697b      	ldr	r3, [r7, #20]
 801a062:	4413      	add	r3, r2
 801a064:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 801a066:	f107 0014 	add.w	r0, r7, #20
 801a06a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a06e:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a070:	f7ff fed8 	bl	8019e24 <writeMQTTString>

	if (qos > 0)
 801a074:	683b      	ldr	r3, [r7, #0]
 801a076:	2b00      	cmp	r3, #0
 801a078:	dd06      	ble.n	801a088 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 801a07a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801a07c:	f107 0314 	add.w	r3, r7, #20
 801a080:	4611      	mov	r1, r2
 801a082:	4618      	mov	r0, r3
 801a084:	f7ff fe86 	bl	8019d94 <writeInt>

	memcpy(ptr, payload, payloadlen);
 801a088:	697b      	ldr	r3, [r7, #20]
 801a08a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a08c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801a08e:	4618      	mov	r0, r3
 801a090:	f003 fb58 	bl	801d744 <memcpy>
	ptr += payloadlen;
 801a094:	697a      	ldr	r2, [r7, #20]
 801a096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a098:	4413      	add	r3, r2
 801a09a:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 801a09c:	697a      	ldr	r2, [r7, #20]
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	1ad3      	subs	r3, r2, r3
 801a0a2:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801a0a4:	69fb      	ldr	r3, [r7, #28]
}
 801a0a6:	4618      	mov	r0, r3
 801a0a8:	3720      	adds	r7, #32
 801a0aa:	46bd      	mov	sp, r7
 801a0ac:	bd80      	pop	{r7, pc}

0801a0ae <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 801a0ae:	b580      	push	{r7, lr}
 801a0b0:	b088      	sub	sp, #32
 801a0b2:	af00      	add	r7, sp, #0
 801a0b4:	60f8      	str	r0, [r7, #12]
 801a0b6:	60b9      	str	r1, [r7, #8]
 801a0b8:	4611      	mov	r1, r2
 801a0ba:	461a      	mov	r2, r3
 801a0bc:	460b      	mov	r3, r1
 801a0be:	71fb      	strb	r3, [r7, #7]
 801a0c0:	4613      	mov	r3, r2
 801a0c2:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801a0c8:	2300      	movs	r3, #0
 801a0ca:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 801a0d0:	68bb      	ldr	r3, [r7, #8]
 801a0d2:	2b03      	cmp	r3, #3
 801a0d4:	dc03      	bgt.n	801a0de <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801a0d6:	f06f 0301 	mvn.w	r3, #1
 801a0da:	61fb      	str	r3, [r7, #28]
		goto exit;
 801a0dc:	e037      	b.n	801a14e <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 801a0de:	79fb      	ldrb	r3, [r7, #7]
 801a0e0:	f003 030f 	and.w	r3, r3, #15
 801a0e4:	b2da      	uxtb	r2, r3
 801a0e6:	7e3b      	ldrb	r3, [r7, #24]
 801a0e8:	f362 1307 	bfi	r3, r2, #4, #4
 801a0ec:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 801a0ee:	79bb      	ldrb	r3, [r7, #6]
 801a0f0:	f003 0301 	and.w	r3, r3, #1
 801a0f4:	b2da      	uxtb	r2, r3
 801a0f6:	7e3b      	ldrb	r3, [r7, #24]
 801a0f8:	f362 03c3 	bfi	r3, r2, #3, #1
 801a0fc:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 801a0fe:	79fb      	ldrb	r3, [r7, #7]
 801a100:	2b06      	cmp	r3, #6
 801a102:	bf0c      	ite	eq
 801a104:	2301      	moveq	r3, #1
 801a106:	2300      	movne	r3, #0
 801a108:	b2db      	uxtb	r3, r3
 801a10a:	f003 0303 	and.w	r3, r3, #3
 801a10e:	b2da      	uxtb	r2, r3
 801a110:	7e3b      	ldrb	r3, [r7, #24]
 801a112:	f362 0342 	bfi	r3, r2, #1, #2
 801a116:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801a118:	7e3a      	ldrb	r2, [r7, #24]
 801a11a:	f107 0314 	add.w	r3, r7, #20
 801a11e:	4611      	mov	r1, r2
 801a120:	4618      	mov	r0, r3
 801a122:	f7ff fe22 	bl	8019d6a <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 801a126:	697b      	ldr	r3, [r7, #20]
 801a128:	2102      	movs	r1, #2
 801a12a:	4618      	mov	r0, r3
 801a12c:	f7ff fd22 	bl	8019b74 <MQTTPacket_encode>
 801a130:	4602      	mov	r2, r0
 801a132:	697b      	ldr	r3, [r7, #20]
 801a134:	4413      	add	r3, r2
 801a136:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 801a138:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801a13a:	f107 0314 	add.w	r3, r7, #20
 801a13e:	4611      	mov	r1, r2
 801a140:	4618      	mov	r0, r3
 801a142:	f7ff fe27 	bl	8019d94 <writeInt>
	rc = ptr - buf;
 801a146:	697a      	ldr	r2, [r7, #20]
 801a148:	68fb      	ldr	r3, [r7, #12]
 801a14a:	1ad3      	subs	r3, r2, r3
 801a14c:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801a14e:	69fb      	ldr	r3, [r7, #28]
}
 801a150:	4618      	mov	r0, r3
 801a152:	3720      	adds	r7, #32
 801a154:	46bd      	mov	sp, r7
 801a156:	bd80      	pop	{r7, pc}

0801a158 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 801a158:	b580      	push	{r7, lr}
 801a15a:	b084      	sub	sp, #16
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	6078      	str	r0, [r7, #4]
 801a160:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 801a162:	2302      	movs	r3, #2
 801a164:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 801a166:	2300      	movs	r3, #0
 801a168:	60fb      	str	r3, [r7, #12]
 801a16a:	e013      	b.n	801a194 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 801a16c:	68fa      	ldr	r2, [r7, #12]
 801a16e:	4613      	mov	r3, r2
 801a170:	005b      	lsls	r3, r3, #1
 801a172:	4413      	add	r3, r2
 801a174:	009b      	lsls	r3, r3, #2
 801a176:	461a      	mov	r2, r3
 801a178:	683b      	ldr	r3, [r7, #0]
 801a17a:	4413      	add	r3, r2
 801a17c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a180:	f7ff feaf 	bl	8019ee2 <MQTTstrlen>
 801a184:	4603      	mov	r3, r0
 801a186:	3303      	adds	r3, #3
 801a188:	68ba      	ldr	r2, [r7, #8]
 801a18a:	4413      	add	r3, r2
 801a18c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	3301      	adds	r3, #1
 801a192:	60fb      	str	r3, [r7, #12]
 801a194:	68fa      	ldr	r2, [r7, #12]
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	429a      	cmp	r2, r3
 801a19a:	dbe7      	blt.n	801a16c <MQTTSerialize_subscribeLength+0x14>
	return len;
 801a19c:	68bb      	ldr	r3, [r7, #8]
}
 801a19e:	4618      	mov	r0, r3
 801a1a0:	3710      	adds	r7, #16
 801a1a2:	46bd      	mov	sp, r7
 801a1a4:	bd80      	pop	{r7, pc}

0801a1a6 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 801a1a6:	b580      	push	{r7, lr}
 801a1a8:	b08a      	sub	sp, #40	; 0x28
 801a1aa:	af00      	add	r7, sp, #0
 801a1ac:	60f8      	str	r0, [r7, #12]
 801a1ae:	60b9      	str	r1, [r7, #8]
 801a1b0:	4611      	mov	r1, r2
 801a1b2:	461a      	mov	r2, r3
 801a1b4:	460b      	mov	r3, r1
 801a1b6:	71fb      	strb	r3, [r7, #7]
 801a1b8:	4613      	mov	r3, r2
 801a1ba:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 801a1bc:	68fb      	ldr	r3, [r7, #12]
 801a1be:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 801a1c0:	2300      	movs	r3, #0
 801a1c2:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 801a1c4:	2300      	movs	r3, #0
 801a1c6:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 801a1c8:	2300      	movs	r3, #0
 801a1ca:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 801a1cc:	2300      	movs	r3, #0
 801a1ce:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 801a1d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a1d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a1d4:	f7ff ffc0 	bl	801a158 <MQTTSerialize_subscribeLength>
 801a1d8:	61f8      	str	r0, [r7, #28]
 801a1da:	69f8      	ldr	r0, [r7, #28]
 801a1dc:	f7ff fd36 	bl	8019c4c <MQTTPacket_len>
 801a1e0:	4602      	mov	r2, r0
 801a1e2:	68bb      	ldr	r3, [r7, #8]
 801a1e4:	4293      	cmp	r3, r2
 801a1e6:	da03      	bge.n	801a1f0 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801a1e8:	f06f 0301 	mvn.w	r3, #1
 801a1ec:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 801a1ee:	e051      	b.n	801a294 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 801a1f4:	7d3b      	ldrb	r3, [r7, #20]
 801a1f6:	2208      	movs	r2, #8
 801a1f8:	f362 1307 	bfi	r3, r2, #4, #4
 801a1fc:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 801a1fe:	79fb      	ldrb	r3, [r7, #7]
 801a200:	f003 0301 	and.w	r3, r3, #1
 801a204:	b2da      	uxtb	r2, r3
 801a206:	7d3b      	ldrb	r3, [r7, #20]
 801a208:	f362 03c3 	bfi	r3, r2, #3, #1
 801a20c:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 801a20e:	7d3b      	ldrb	r3, [r7, #20]
 801a210:	2201      	movs	r2, #1
 801a212:	f362 0342 	bfi	r3, r2, #1, #2
 801a216:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 801a218:	7d3a      	ldrb	r2, [r7, #20]
 801a21a:	f107 0318 	add.w	r3, r7, #24
 801a21e:	4611      	mov	r1, r2
 801a220:	4618      	mov	r0, r3
 801a222:	f7ff fda2 	bl	8019d6a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801a226:	69bb      	ldr	r3, [r7, #24]
 801a228:	69f9      	ldr	r1, [r7, #28]
 801a22a:	4618      	mov	r0, r3
 801a22c:	f7ff fca2 	bl	8019b74 <MQTTPacket_encode>
 801a230:	4602      	mov	r2, r0
 801a232:	69bb      	ldr	r3, [r7, #24]
 801a234:	4413      	add	r3, r2
 801a236:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 801a238:	88ba      	ldrh	r2, [r7, #4]
 801a23a:	f107 0318 	add.w	r3, r7, #24
 801a23e:	4611      	mov	r1, r2
 801a240:	4618      	mov	r0, r3
 801a242:	f7ff fda7 	bl	8019d94 <writeInt>

	for (i = 0; i < count; ++i)
 801a246:	2300      	movs	r3, #0
 801a248:	623b      	str	r3, [r7, #32]
 801a24a:	e01b      	b.n	801a284 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 801a24c:	6a3a      	ldr	r2, [r7, #32]
 801a24e:	4613      	mov	r3, r2
 801a250:	005b      	lsls	r3, r3, #1
 801a252:	4413      	add	r3, r2
 801a254:	009b      	lsls	r3, r3, #2
 801a256:	461a      	mov	r2, r3
 801a258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a25a:	4413      	add	r3, r2
 801a25c:	f107 0018 	add.w	r0, r7, #24
 801a260:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a262:	f7ff fddf 	bl	8019e24 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 801a266:	6a3b      	ldr	r3, [r7, #32]
 801a268:	009b      	lsls	r3, r3, #2
 801a26a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a26c:	4413      	add	r3, r2
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	b2da      	uxtb	r2, r3
 801a272:	f107 0318 	add.w	r3, r7, #24
 801a276:	4611      	mov	r1, r2
 801a278:	4618      	mov	r0, r3
 801a27a:	f7ff fd76 	bl	8019d6a <writeChar>
	for (i = 0; i < count; ++i)
 801a27e:	6a3b      	ldr	r3, [r7, #32]
 801a280:	3301      	adds	r3, #1
 801a282:	623b      	str	r3, [r7, #32]
 801a284:	6a3a      	ldr	r2, [r7, #32]
 801a286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a288:	429a      	cmp	r2, r3
 801a28a:	dbdf      	blt.n	801a24c <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 801a28c:	69ba      	ldr	r2, [r7, #24]
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	1ad3      	subs	r3, r2, r3
 801a292:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a296:	4618      	mov	r0, r3
 801a298:	3728      	adds	r7, #40	; 0x28
 801a29a:	46bd      	mov	sp, r7
 801a29c:	bd80      	pop	{r7, pc}

0801a29e <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 801a29e:	b580      	push	{r7, lr}
 801a2a0:	b08a      	sub	sp, #40	; 0x28
 801a2a2:	af00      	add	r7, sp, #0
 801a2a4:	60f8      	str	r0, [r7, #12]
 801a2a6:	60b9      	str	r1, [r7, #8]
 801a2a8:	607a      	str	r2, [r7, #4]
 801a2aa:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801a2ac:	2300      	movs	r3, #0
 801a2ae:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801a2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2b2:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801a2b4:	2300      	movs	r3, #0
 801a2b6:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801a2b8:	2300      	movs	r3, #0
 801a2ba:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801a2bc:	f107 0318 	add.w	r3, r7, #24
 801a2c0:	4618      	mov	r0, r3
 801a2c2:	f7ff fd3e 	bl	8019d42 <readChar>
 801a2c6:	4603      	mov	r3, r0
 801a2c8:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 801a2ca:	7f3b      	ldrb	r3, [r7, #28]
 801a2cc:	f023 030f 	bic.w	r3, r3, #15
 801a2d0:	b2db      	uxtb	r3, r3
 801a2d2:	2b90      	cmp	r3, #144	; 0x90
 801a2d4:	d142      	bne.n	801a35c <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801a2d6:	69bb      	ldr	r3, [r7, #24]
 801a2d8:	f107 0214 	add.w	r2, r7, #20
 801a2dc:	4611      	mov	r1, r2
 801a2de:	4618      	mov	r0, r3
 801a2e0:	f7ff fcfe 	bl	8019ce0 <MQTTPacket_decodeBuf>
 801a2e4:	6278      	str	r0, [r7, #36]	; 0x24
 801a2e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a2e8:	69bb      	ldr	r3, [r7, #24]
 801a2ea:	4413      	add	r3, r2
 801a2ec:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801a2ee:	69bb      	ldr	r3, [r7, #24]
 801a2f0:	697a      	ldr	r2, [r7, #20]
 801a2f2:	4413      	add	r3, r2
 801a2f4:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 801a2f6:	69bb      	ldr	r3, [r7, #24]
 801a2f8:	6a3a      	ldr	r2, [r7, #32]
 801a2fa:	1ad3      	subs	r3, r2, r3
 801a2fc:	2b01      	cmp	r3, #1
 801a2fe:	dd2f      	ble.n	801a360 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 801a300:	f107 0318 	add.w	r3, r7, #24
 801a304:	4618      	mov	r0, r3
 801a306:	f7ff fd01 	bl	8019d0c <readInt>
 801a30a:	4603      	mov	r3, r0
 801a30c:	b29a      	uxth	r2, r3
 801a30e:	68fb      	ldr	r3, [r7, #12]
 801a310:	801a      	strh	r2, [r3, #0]

	*count = 0;
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	2200      	movs	r2, #0
 801a316:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 801a318:	e019      	b.n	801a34e <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	68ba      	ldr	r2, [r7, #8]
 801a320:	429a      	cmp	r2, r3
 801a322:	da03      	bge.n	801a32c <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 801a324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a328:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 801a32a:	e01a      	b.n	801a362 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 801a32c:	f107 0318 	add.w	r3, r7, #24
 801a330:	4618      	mov	r0, r3
 801a332:	f7ff fd06 	bl	8019d42 <readChar>
 801a336:	4603      	mov	r3, r0
 801a338:	4618      	mov	r0, r3
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	1c59      	adds	r1, r3, #1
 801a340:	687a      	ldr	r2, [r7, #4]
 801a342:	6011      	str	r1, [r2, #0]
 801a344:	009b      	lsls	r3, r3, #2
 801a346:	683a      	ldr	r2, [r7, #0]
 801a348:	4413      	add	r3, r2
 801a34a:	4602      	mov	r2, r0
 801a34c:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 801a34e:	69bb      	ldr	r3, [r7, #24]
 801a350:	6a3a      	ldr	r2, [r7, #32]
 801a352:	429a      	cmp	r2, r3
 801a354:	d8e1      	bhi.n	801a31a <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 801a356:	2301      	movs	r3, #1
 801a358:	627b      	str	r3, [r7, #36]	; 0x24
 801a35a:	e002      	b.n	801a362 <MQTTDeserialize_suback+0xc4>
		goto exit;
 801a35c:	bf00      	nop
 801a35e:	e000      	b.n	801a362 <MQTTDeserialize_suback+0xc4>
		goto exit;
 801a360:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a364:	4618      	mov	r0, r3
 801a366:	3728      	adds	r7, #40	; 0x28
 801a368:	46bd      	mov	sp, r7
 801a36a:	bd80      	pop	{r7, pc}

0801a36c <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 801a36c:	b480      	push	{r7}
 801a36e:	b08f      	sub	sp, #60	; 0x3c
 801a370:	af00      	add	r7, sp, #0
 801a372:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	891a      	ldrh	r2, [r3, #8]
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	8a1b      	ldrh	r3, [r3, #16]
 801a37e:	429a      	cmp	r2, r3
 801a380:	d301      	bcc.n	801a386 <load_descriptor_values+0x1a>
        return false;
 801a382:	2300      	movs	r3, #0
 801a384:	e156      	b.n	801a634 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	681a      	ldr	r2, [r3, #0]
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	895b      	ldrh	r3, [r3, #10]
 801a390:	009b      	lsls	r3, r3, #2
 801a392:	4413      	add	r3, r2
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	62fb      	str	r3, [r7, #44]	; 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 801a398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a39a:	0a1b      	lsrs	r3, r3, #8
 801a39c:	b2da      	uxtb	r2, r3
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 801a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3a4:	f003 0303 	and.w	r3, r3, #3
 801a3a8:	2b02      	cmp	r3, #2
 801a3aa:	d05a      	beq.n	801a462 <load_descriptor_values+0xf6>
 801a3ac:	2b02      	cmp	r3, #2
 801a3ae:	f200 8094 	bhi.w	801a4da <load_descriptor_values+0x16e>
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d002      	beq.n	801a3bc <load_descriptor_values+0x50>
 801a3b6:	2b01      	cmp	r3, #1
 801a3b8:	d01f      	beq.n	801a3fa <load_descriptor_values+0x8e>
 801a3ba:	e08e      	b.n	801a4da <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	2201      	movs	r2, #1
 801a3c0:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 801a3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3c4:	089b      	lsrs	r3, r3, #2
 801a3c6:	b29b      	uxth	r3, r3
 801a3c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a3cc:	b29a      	uxth	r2, r3
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 801a3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3d4:	0e1b      	lsrs	r3, r3, #24
 801a3d6:	b25b      	sxtb	r3, r3
 801a3d8:	f003 030f 	and.w	r3, r3, #15
 801a3dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = (word0 >> 16) & 0xFF;
 801a3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3e2:	0c1b      	lsrs	r3, r3, #16
 801a3e4:	b2db      	uxtb	r3, r3
 801a3e6:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 801a3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3ea:	0f1b      	lsrs	r3, r3, #28
 801a3ec:	b29b      	uxth	r3, r3
 801a3ee:	f003 030f 	and.w	r3, r3, #15
 801a3f2:	b29a      	uxth	r2, r3
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	825a      	strh	r2, [r3, #18]
            break;
 801a3f8:	e0b4      	b.n	801a564 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	681a      	ldr	r2, [r3, #0]
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	895b      	ldrh	r3, [r3, #10]
 801a404:	3301      	adds	r3, #1
 801a406:	009b      	lsls	r3, r3, #2
 801a408:	4413      	add	r3, r2
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 801a40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a410:	0c1b      	lsrs	r3, r3, #16
 801a412:	b29b      	uxth	r3, r3
 801a414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a418:	b29a      	uxth	r2, r3
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 801a41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a420:	089b      	lsrs	r3, r3, #2
 801a422:	b29b      	uxth	r3, r3
 801a424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a428:	b29a      	uxth	r2, r3
 801a42a:	69fb      	ldr	r3, [r7, #28]
 801a42c:	0f1b      	lsrs	r3, r3, #28
 801a42e:	b29b      	uxth	r3, r3
 801a430:	019b      	lsls	r3, r3, #6
 801a432:	b29b      	uxth	r3, r3
 801a434:	4313      	orrs	r3, r2
 801a436:	b29a      	uxth	r2, r3
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 801a43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a43e:	0f1b      	lsrs	r3, r3, #28
 801a440:	b25b      	sxtb	r3, r3
 801a442:	f003 030f 	and.w	r3, r3, #15
 801a446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word1 & 0xFFFF;
 801a44a:	69fb      	ldr	r3, [r7, #28]
 801a44c:	b29b      	uxth	r3, r3
 801a44e:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 801a450:	69fb      	ldr	r3, [r7, #28]
 801a452:	0c1b      	lsrs	r3, r3, #16
 801a454:	b29b      	uxth	r3, r3
 801a456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a45a:	b29a      	uxth	r2, r3
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	825a      	strh	r2, [r3, #18]
            break;
 801a460:	e080      	b.n	801a564 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	681a      	ldr	r2, [r3, #0]
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	895b      	ldrh	r3, [r3, #10]
 801a46c:	3301      	adds	r3, #1
 801a46e:	009b      	lsls	r3, r3, #2
 801a470:	4413      	add	r3, r2
 801a472:	681b      	ldr	r3, [r3, #0]
 801a474:	62bb      	str	r3, [r7, #40]	; 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	681b      	ldr	r3, [r3, #0]
 801a47a:	681a      	ldr	r2, [r3, #0]
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	895b      	ldrh	r3, [r3, #10]
 801a480:	3302      	adds	r3, #2
 801a482:	009b      	lsls	r3, r3, #2
 801a484:	4413      	add	r3, r2
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	681a      	ldr	r2, [r3, #0]
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	895b      	ldrh	r3, [r3, #10]
 801a494:	3303      	adds	r3, #3
 801a496:	009b      	lsls	r3, r3, #2
 801a498:	4413      	add	r3, r2
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 801a49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4a0:	0c1b      	lsrs	r3, r3, #16
 801a4a2:	b29a      	uxth	r2, r3
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 801a4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4aa:	089b      	lsrs	r3, r3, #2
 801a4ac:	b29b      	uxth	r3, r3
 801a4ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a4b2:	b29a      	uxth	r2, r3
 801a4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4b6:	0a1b      	lsrs	r3, r3, #8
 801a4b8:	b29b      	uxth	r3, r3
 801a4ba:	019b      	lsls	r3, r3, #6
 801a4bc:	b29b      	uxth	r3, r3
 801a4be:	4313      	orrs	r3, r2
 801a4c0:	b29a      	uxth	r2, r3
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 801a4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 801a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4ce:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 801a4d0:	6a3b      	ldr	r3, [r7, #32]
 801a4d2:	b29a      	uxth	r2, r3
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	825a      	strh	r2, [r3, #18]
            break;
 801a4d8:	e044      	b.n	801a564 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	681a      	ldr	r2, [r3, #0]
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	895b      	ldrh	r3, [r3, #10]
 801a4e4:	3301      	adds	r3, #1
 801a4e6:	009b      	lsls	r3, r3, #2
 801a4e8:	4413      	add	r3, r2
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	681a      	ldr	r2, [r3, #0]
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	895b      	ldrh	r3, [r3, #10]
 801a4f8:	3302      	adds	r3, #2
 801a4fa:	009b      	lsls	r3, r3, #2
 801a4fc:	4413      	add	r3, r2
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	681a      	ldr	r2, [r3, #0]
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	895b      	ldrh	r3, [r3, #10]
 801a50c:	3303      	adds	r3, #3
 801a50e:	009b      	lsls	r3, r3, #2
 801a510:	4413      	add	r3, r2
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	681a      	ldr	r2, [r3, #0]
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	895b      	ldrh	r3, [r3, #10]
 801a520:	3304      	adds	r3, #4
 801a522:	009b      	lsls	r3, r3, #2
 801a524:	4413      	add	r3, r2
 801a526:	681b      	ldr	r3, [r3, #0]
 801a528:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 801a52a:	68fb      	ldr	r3, [r7, #12]
 801a52c:	b29a      	uxth	r2, r3
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 801a532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a534:	089b      	lsrs	r3, r3, #2
 801a536:	b29b      	uxth	r3, r3
 801a538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a53c:	b29a      	uxth	r2, r3
 801a53e:	69bb      	ldr	r3, [r7, #24]
 801a540:	0a1b      	lsrs	r3, r3, #8
 801a542:	b29b      	uxth	r3, r3
 801a544:	019b      	lsls	r3, r3, #6
 801a546:	b29b      	uxth	r3, r3
 801a548:	4313      	orrs	r3, r2
 801a54a:	b29a      	uxth	r2, r3
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 801a550:	69bb      	ldr	r3, [r7, #24]
 801a552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 801a556:	697b      	ldr	r3, [r7, #20]
 801a558:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 801a55a:	693b      	ldr	r3, [r7, #16]
 801a55c:	b29a      	uxth	r2, r3
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	825a      	strh	r2, [r3, #18]
            break;
 801a562:	bf00      	nop
        }
    }

    if (!iter->message)
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	685b      	ldr	r3, [r3, #4]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d106      	bne.n	801a57a <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	2200      	movs	r2, #0
 801a570:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	2200      	movs	r2, #0
 801a576:	621a      	str	r2, [r3, #32]
 801a578:	e041      	b.n	801a5fe <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	685a      	ldr	r2, [r3, #4]
 801a57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a580:	441a      	add	r2, r3
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	619a      	str	r2, [r3, #24]

        if (size_offset)
 801a586:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	d008      	beq.n	801a5a0 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	699a      	ldr	r2, [r3, #24]
 801a592:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801a596:	425b      	negs	r3, r3
 801a598:	441a      	add	r2, r3
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	621a      	str	r2, [r3, #32]
 801a59e:	e01a      	b.n	801a5d6 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	7d9b      	ldrb	r3, [r3, #22]
 801a5a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801a5a8:	2b20      	cmp	r3, #32
 801a5aa:	d111      	bne.n	801a5d0 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	7d9b      	ldrb	r3, [r3, #22]
 801a5b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d005      	beq.n	801a5c4 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	7d9b      	ldrb	r3, [r3, #22]
 801a5bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 801a5c0:	2b80      	cmp	r3, #128	; 0x80
 801a5c2:	d105      	bne.n	801a5d0 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	f103 0214 	add.w	r2, r3, #20
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	621a      	str	r2, [r3, #32]
 801a5ce:	e002      	b.n	801a5d6 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	2200      	movs	r2, #0
 801a5d4:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	7d9b      	ldrb	r3, [r3, #22]
 801a5da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a5de:	2b80      	cmp	r3, #128	; 0x80
 801a5e0:	d109      	bne.n	801a5f6 <load_descriptor_values+0x28a>
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	699b      	ldr	r3, [r3, #24]
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d005      	beq.n	801a5f6 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	699b      	ldr	r3, [r3, #24]
 801a5ee:	681a      	ldr	r2, [r3, #0]
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	61da      	str	r2, [r3, #28]
 801a5f4:	e003      	b.n	801a5fe <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	699a      	ldr	r2, [r3, #24]
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	7d9b      	ldrb	r3, [r3, #22]
 801a602:	f003 030f 	and.w	r3, r3, #15
 801a606:	2b08      	cmp	r3, #8
 801a608:	d005      	beq.n	801a616 <load_descriptor_values+0x2aa>
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	7d9b      	ldrb	r3, [r3, #22]
 801a60e:	f003 030f 	and.w	r3, r3, #15
 801a612:	2b09      	cmp	r3, #9
 801a614:	d10a      	bne.n	801a62c <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	685a      	ldr	r2, [r3, #4]
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	89db      	ldrh	r3, [r3, #14]
 801a620:	009b      	lsls	r3, r3, #2
 801a622:	4413      	add	r3, r2
 801a624:	681a      	ldr	r2, [r3, #0]
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	625a      	str	r2, [r3, #36]	; 0x24
 801a62a:	e002      	b.n	801a632 <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	2200      	movs	r2, #0
 801a630:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return true;
 801a632:	2301      	movs	r3, #1
}
 801a634:	4618      	mov	r0, r3
 801a636:	373c      	adds	r7, #60	; 0x3c
 801a638:	46bd      	mov	sp, r7
 801a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a63e:	4770      	bx	lr

0801a640 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 801a640:	b480      	push	{r7}
 801a642:	b085      	sub	sp, #20
 801a644:	af00      	add	r7, sp, #0
 801a646:	6078      	str	r0, [r7, #4]
    iter->index++;
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	891b      	ldrh	r3, [r3, #8]
 801a64c:	3301      	adds	r3, #1
 801a64e:	b29a      	uxth	r2, r3
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	891a      	ldrh	r2, [r3, #8]
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	8a1b      	ldrh	r3, [r3, #16]
 801a65e:	429a      	cmp	r2, r3
 801a660:	d30c      	bcc.n	801a67c <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	2200      	movs	r2, #0
 801a666:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	2200      	movs	r2, #0
 801a66c:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	2200      	movs	r2, #0
 801a672:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	2200      	movs	r2, #0
 801a678:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 801a67a:	e03c      	b.n	801a6f6 <advance_iterator+0xb6>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	681a      	ldr	r2, [r3, #0]
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	895b      	ldrh	r3, [r3, #10]
 801a686:	009b      	lsls	r3, r3, #2
 801a688:	4413      	add	r3, r2
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	0a1b      	lsrs	r3, r3, #8
 801a692:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 801a694:	68fb      	ldr	r3, [r7, #12]
 801a696:	f003 0303 	and.w	r3, r3, #3
 801a69a:	2201      	movs	r2, #1
 801a69c:	fa02 f303 	lsl.w	r3, r2, r3
 801a6a0:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	895a      	ldrh	r2, [r3, #10]
 801a6a6:	893b      	ldrh	r3, [r7, #8]
 801a6a8:	4413      	add	r3, r2
 801a6aa:	b29a      	uxth	r2, r3
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	899a      	ldrh	r2, [r3, #12]
 801a6b4:	7afb      	ldrb	r3, [r7, #11]
 801a6b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	bf0c      	ite	eq
 801a6be:	2301      	moveq	r3, #1
 801a6c0:	2300      	movne	r3, #0
 801a6c2:	b2db      	uxtb	r3, r3
 801a6c4:	b29b      	uxth	r3, r3
 801a6c6:	4413      	add	r3, r2
 801a6c8:	b29a      	uxth	r2, r3
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	89da      	ldrh	r2, [r3, #14]
 801a6d2:	7afb      	ldrb	r3, [r7, #11]
 801a6d4:	f003 030f 	and.w	r3, r3, #15
 801a6d8:	2b08      	cmp	r3, #8
 801a6da:	d004      	beq.n	801a6e6 <advance_iterator+0xa6>
 801a6dc:	7afb      	ldrb	r3, [r7, #11]
 801a6de:	f003 030f 	and.w	r3, r3, #15
 801a6e2:	2b09      	cmp	r3, #9
 801a6e4:	d101      	bne.n	801a6ea <advance_iterator+0xaa>
 801a6e6:	2301      	movs	r3, #1
 801a6e8:	e000      	b.n	801a6ec <advance_iterator+0xac>
 801a6ea:	2300      	movs	r3, #0
 801a6ec:	b29b      	uxth	r3, r3
 801a6ee:	4413      	add	r3, r2
 801a6f0:	b29a      	uxth	r2, r3
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	81da      	strh	r2, [r3, #14]
}
 801a6f6:	bf00      	nop
 801a6f8:	3714      	adds	r7, #20
 801a6fa:	46bd      	mov	sp, r7
 801a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a700:	4770      	bx	lr

0801a702 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 801a702:	b580      	push	{r7, lr}
 801a704:	b084      	sub	sp, #16
 801a706:	af00      	add	r7, sp, #0
 801a708:	60f8      	str	r0, [r7, #12]
 801a70a:	60b9      	str	r1, [r7, #8]
 801a70c:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 801a70e:	2228      	movs	r2, #40	; 0x28
 801a710:	2100      	movs	r1, #0
 801a712:	68f8      	ldr	r0, [r7, #12]
 801a714:	f003 f824 	bl	801d760 <memset>

    iter->descriptor = desc;
 801a718:	68fb      	ldr	r3, [r7, #12]
 801a71a:	68ba      	ldr	r2, [r7, #8]
 801a71c:	601a      	str	r2, [r3, #0]
    iter->message = message;
 801a71e:	68fb      	ldr	r3, [r7, #12]
 801a720:	687a      	ldr	r2, [r7, #4]
 801a722:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 801a724:	68f8      	ldr	r0, [r7, #12]
 801a726:	f7ff fe21 	bl	801a36c <load_descriptor_values>
 801a72a:	4603      	mov	r3, r0
}
 801a72c:	4618      	mov	r0, r3
 801a72e:	3710      	adds	r7, #16
 801a730:	46bd      	mov	sp, r7
 801a732:	bd80      	pop	{r7, pc}

0801a734 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 801a734:	b580      	push	{r7, lr}
 801a736:	b086      	sub	sp, #24
 801a738:	af00      	add	r7, sp, #0
 801a73a:	6078      	str	r0, [r7, #4]
 801a73c:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 801a73e:	683b      	ldr	r3, [r7, #0]
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	689b      	ldr	r3, [r3, #8]
 801a744:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 801a746:	693b      	ldr	r3, [r7, #16]
 801a748:	681b      	ldr	r3, [r3, #0]
 801a74a:	681b      	ldr	r3, [r3, #0]
 801a74c:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 801a74e:	68fb      	ldr	r3, [r7, #12]
 801a750:	0a1b      	lsrs	r3, r3, #8
 801a752:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a756:	2b80      	cmp	r3, #128	; 0x80
 801a758:	d109      	bne.n	801a76e <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 801a75a:	683b      	ldr	r3, [r7, #0]
 801a75c:	3304      	adds	r3, #4
 801a75e:	461a      	mov	r2, r3
 801a760:	6939      	ldr	r1, [r7, #16]
 801a762:	6878      	ldr	r0, [r7, #4]
 801a764:	f7ff ffcd 	bl	801a702 <pb_field_iter_begin>
 801a768:	4603      	mov	r3, r0
 801a76a:	75fb      	strb	r3, [r7, #23]
 801a76c:	e008      	b.n	801a780 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 801a76e:	683b      	ldr	r3, [r7, #0]
 801a770:	685b      	ldr	r3, [r3, #4]
 801a772:	461a      	mov	r2, r3
 801a774:	6939      	ldr	r1, [r7, #16]
 801a776:	6878      	ldr	r0, [r7, #4]
 801a778:	f7ff ffc3 	bl	801a702 <pb_field_iter_begin>
 801a77c:	4603      	mov	r3, r0
 801a77e:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 801a780:	683b      	ldr	r3, [r7, #0]
 801a782:	f103 020c 	add.w	r2, r3, #12
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	621a      	str	r2, [r3, #32]
    return status;
 801a78a:	7dfb      	ldrb	r3, [r7, #23]
}
 801a78c:	4618      	mov	r0, r3
 801a78e:	3718      	adds	r7, #24
 801a790:	46bd      	mov	sp, r7
 801a792:	bd80      	pop	{r7, pc}

0801a794 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 801a794:	b580      	push	{r7, lr}
 801a796:	b082      	sub	sp, #8
 801a798:	af00      	add	r7, sp, #0
 801a79a:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 801a79c:	6878      	ldr	r0, [r7, #4]
 801a79e:	f7ff ff4f 	bl	801a640 <advance_iterator>
    (void)load_descriptor_values(iter);
 801a7a2:	6878      	ldr	r0, [r7, #4]
 801a7a4:	f7ff fde2 	bl	801a36c <load_descriptor_values>
    return iter->index != 0;
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	891b      	ldrh	r3, [r3, #8]
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	bf14      	ite	ne
 801a7b0:	2301      	movne	r3, #1
 801a7b2:	2300      	moveq	r3, #0
 801a7b4:	b2db      	uxtb	r3, r3
}
 801a7b6:	4618      	mov	r0, r3
 801a7b8:	3708      	adds	r7, #8
 801a7ba:	46bd      	mov	sp, r7
 801a7bc:	bd80      	pop	{r7, pc}

0801a7be <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 801a7be:	b580      	push	{r7, lr}
 801a7c0:	b084      	sub	sp, #16
 801a7c2:	af00      	add	r7, sp, #0
 801a7c4:	6078      	str	r0, [r7, #4]
 801a7c6:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	8a1b      	ldrh	r3, [r3, #16]
 801a7cc:	461a      	mov	r2, r3
 801a7ce:	683b      	ldr	r3, [r7, #0]
 801a7d0:	4293      	cmp	r3, r2
 801a7d2:	d101      	bne.n	801a7d8 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 801a7d4:	2301      	movs	r3, #1
 801a7d6:	e044      	b.n	801a862 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	8a9b      	ldrh	r3, [r3, #20]
 801a7de:	461a      	mov	r2, r3
 801a7e0:	683b      	ldr	r3, [r7, #0]
 801a7e2:	4293      	cmp	r3, r2
 801a7e4:	d901      	bls.n	801a7ea <pb_field_iter_find+0x2c>
    {
        return false;
 801a7e6:	2300      	movs	r3, #0
 801a7e8:	e03b      	b.n	801a862 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	891b      	ldrh	r3, [r3, #8]
 801a7ee:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 801a7f0:	687b      	ldr	r3, [r7, #4]
 801a7f2:	8a1b      	ldrh	r3, [r3, #16]
 801a7f4:	461a      	mov	r2, r3
 801a7f6:	683b      	ldr	r3, [r7, #0]
 801a7f8:	4293      	cmp	r3, r2
 801a7fa:	d204      	bcs.n	801a806 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	8a1a      	ldrh	r2, [r3, #16]
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 801a806:	6878      	ldr	r0, [r7, #4]
 801a808:	f7ff ff1a 	bl	801a640 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	681a      	ldr	r2, [r3, #0]
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	895b      	ldrh	r3, [r3, #10]
 801a816:	009b      	lsls	r3, r3, #2
 801a818:	4413      	add	r3, r2
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 801a81e:	68bb      	ldr	r3, [r7, #8]
 801a820:	089a      	lsrs	r2, r3, #2
 801a822:	683b      	ldr	r3, [r7, #0]
 801a824:	4053      	eors	r3, r2
 801a826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d110      	bne.n	801a850 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 801a82e:	6878      	ldr	r0, [r7, #4]
 801a830:	f7ff fd9c 	bl	801a36c <load_descriptor_values>

                if (iter->tag == tag &&
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	8a1b      	ldrh	r3, [r3, #16]
 801a838:	461a      	mov	r2, r3
 801a83a:	683b      	ldr	r3, [r7, #0]
 801a83c:	4293      	cmp	r3, r2
 801a83e:	d107      	bne.n	801a850 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	7d9b      	ldrb	r3, [r3, #22]
 801a844:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 801a848:	2b0a      	cmp	r3, #10
 801a84a:	d001      	beq.n	801a850 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 801a84c:	2301      	movs	r3, #1
 801a84e:	e008      	b.n	801a862 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	891b      	ldrh	r3, [r3, #8]
 801a854:	89fa      	ldrh	r2, [r7, #14]
 801a856:	429a      	cmp	r2, r3
 801a858:	d1d5      	bne.n	801a806 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 801a85a:	6878      	ldr	r0, [r7, #4]
 801a85c:	f7ff fd86 	bl	801a36c <load_descriptor_values>
        return false;
 801a860:	2300      	movs	r3, #0
    }
}
 801a862:	4618      	mov	r0, r3
 801a864:	3710      	adds	r7, #16
 801a866:	46bd      	mov	sp, r7
 801a868:	bd80      	pop	{r7, pc}

0801a86a <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 801a86a:	b580      	push	{r7, lr}
 801a86c:	b084      	sub	sp, #16
 801a86e:	af00      	add	r7, sp, #0
 801a870:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	7d9b      	ldrb	r3, [r3, #22]
 801a876:	f003 030f 	and.w	r3, r3, #15
 801a87a:	2b0a      	cmp	r3, #10
 801a87c:	d101      	bne.n	801a882 <pb_field_iter_find_extension+0x18>
    {
        return true;
 801a87e:	2301      	movs	r3, #1
 801a880:	e022      	b.n	801a8c8 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	891b      	ldrh	r3, [r3, #8]
 801a886:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 801a888:	6878      	ldr	r0, [r7, #4]
 801a88a:	f7ff fed9 	bl	801a640 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	681a      	ldr	r2, [r3, #0]
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	895b      	ldrh	r3, [r3, #10]
 801a898:	009b      	lsls	r3, r3, #2
 801a89a:	4413      	add	r3, r2
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 801a8a0:	68bb      	ldr	r3, [r7, #8]
 801a8a2:	0a1b      	lsrs	r3, r3, #8
 801a8a4:	f003 030f 	and.w	r3, r3, #15
 801a8a8:	2b0a      	cmp	r3, #10
 801a8aa:	d104      	bne.n	801a8b6 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 801a8ac:	6878      	ldr	r0, [r7, #4]
 801a8ae:	f7ff fd5d 	bl	801a36c <load_descriptor_values>
 801a8b2:	4603      	mov	r3, r0
 801a8b4:	e008      	b.n	801a8c8 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	891b      	ldrh	r3, [r3, #8]
 801a8ba:	89fa      	ldrh	r2, [r7, #14]
 801a8bc:	429a      	cmp	r2, r3
 801a8be:	d1e3      	bne.n	801a888 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 801a8c0:	6878      	ldr	r0, [r7, #4]
 801a8c2:	f7ff fd53 	bl	801a36c <load_descriptor_values>
        return false;
 801a8c6:	2300      	movs	r3, #0
    }
}
 801a8c8:	4618      	mov	r0, r3
 801a8ca:	3710      	adds	r7, #16
 801a8cc:	46bd      	mov	sp, r7
 801a8ce:	bd80      	pop	{r7, pc}

0801a8d0 <pb_const_cast>:

static void *pb_const_cast(const void *p)
{
 801a8d0:	b480      	push	{r7}
 801a8d2:	b085      	sub	sp, #20
 801a8d4:	af00      	add	r7, sp, #0
 801a8d6:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	60fb      	str	r3, [r7, #12]
    return t.p1;
 801a8dc:	68fb      	ldr	r3, [r7, #12]
}
 801a8de:	4618      	mov	r0, r3
 801a8e0:	3714      	adds	r7, #20
 801a8e2:	46bd      	mov	sp, r7
 801a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8e8:	4770      	bx	lr

0801a8ea <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 801a8ea:	b580      	push	{r7, lr}
 801a8ec:	b084      	sub	sp, #16
 801a8ee:	af00      	add	r7, sp, #0
 801a8f0:	60f8      	str	r0, [r7, #12]
 801a8f2:	60b9      	str	r1, [r7, #8]
 801a8f4:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 801a8f6:	6878      	ldr	r0, [r7, #4]
 801a8f8:	f7ff ffea 	bl	801a8d0 <pb_const_cast>
 801a8fc:	4603      	mov	r3, r0
 801a8fe:	461a      	mov	r2, r3
 801a900:	68b9      	ldr	r1, [r7, #8]
 801a902:	68f8      	ldr	r0, [r7, #12]
 801a904:	f7ff fefd 	bl	801a702 <pb_field_iter_begin>
 801a908:	4603      	mov	r3, r0
}
 801a90a:	4618      	mov	r0, r3
 801a90c:	3710      	adds	r7, #16
 801a90e:	46bd      	mov	sp, r7
 801a910:	bd80      	pop	{r7, pc}

0801a912 <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 801a912:	b580      	push	{r7, lr}
 801a914:	b082      	sub	sp, #8
 801a916:	af00      	add	r7, sp, #0
 801a918:	6078      	str	r0, [r7, #4]
 801a91a:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 801a91c:	6838      	ldr	r0, [r7, #0]
 801a91e:	f7ff ffd7 	bl	801a8d0 <pb_const_cast>
 801a922:	4603      	mov	r3, r0
 801a924:	4619      	mov	r1, r3
 801a926:	6878      	ldr	r0, [r7, #4]
 801a928:	f7ff ff04 	bl	801a734 <pb_field_iter_begin_extension>
 801a92c:	4603      	mov	r3, r0
}
 801a92e:	4618      	mov	r0, r3
 801a930:	3708      	adds	r7, #8
 801a932:	46bd      	mov	sp, r7
 801a934:	bd80      	pop	{r7, pc}

0801a936 <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 801a936:	b580      	push	{r7, lr}
 801a938:	b086      	sub	sp, #24
 801a93a:	af00      	add	r7, sp, #0
 801a93c:	60f8      	str	r0, [r7, #12]
 801a93e:	60b9      	str	r1, [r7, #8]
 801a940:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	8a5b      	ldrh	r3, [r3, #18]
 801a946:	2b08      	cmp	r3, #8
 801a948:	d125      	bne.n	801a996 <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	69db      	ldr	r3, [r3, #28]
 801a94e:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 801a950:	697b      	ldr	r3, [r7, #20]
 801a952:	2b00      	cmp	r3, #0
 801a954:	d01f      	beq.n	801a996 <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 801a956:	68fb      	ldr	r3, [r7, #12]
 801a958:	2b00      	cmp	r3, #0
 801a95a:	d00c      	beq.n	801a976 <pb_default_field_callback+0x40>
 801a95c:	697b      	ldr	r3, [r7, #20]
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	2b00      	cmp	r3, #0
 801a962:	d008      	beq.n	801a976 <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 801a964:	697b      	ldr	r3, [r7, #20]
 801a966:	681b      	ldr	r3, [r3, #0]
 801a968:	697a      	ldr	r2, [r7, #20]
 801a96a:	3204      	adds	r2, #4
 801a96c:	6879      	ldr	r1, [r7, #4]
 801a96e:	68f8      	ldr	r0, [r7, #12]
 801a970:	4798      	blx	r3
 801a972:	4603      	mov	r3, r0
 801a974:	e010      	b.n	801a998 <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 801a976:	68bb      	ldr	r3, [r7, #8]
 801a978:	2b00      	cmp	r3, #0
 801a97a:	d00c      	beq.n	801a996 <pb_default_field_callback+0x60>
 801a97c:	697b      	ldr	r3, [r7, #20]
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	2b00      	cmp	r3, #0
 801a982:	d008      	beq.n	801a996 <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 801a984:	697b      	ldr	r3, [r7, #20]
 801a986:	681b      	ldr	r3, [r3, #0]
 801a988:	697a      	ldr	r2, [r7, #20]
 801a98a:	3204      	adds	r2, #4
 801a98c:	6879      	ldr	r1, [r7, #4]
 801a98e:	68b8      	ldr	r0, [r7, #8]
 801a990:	4798      	blx	r3
 801a992:	4603      	mov	r3, r0
 801a994:	e000      	b.n	801a998 <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 801a996:	2301      	movs	r3, #1

}
 801a998:	4618      	mov	r0, r3
 801a99a:	3718      	adds	r7, #24
 801a99c:	46bd      	mov	sp, r7
 801a99e:	bd80      	pop	{r7, pc}

0801a9a0 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 801a9a0:	b580      	push	{r7, lr}
 801a9a2:	b086      	sub	sp, #24
 801a9a4:	af00      	add	r7, sp, #0
 801a9a6:	60f8      	str	r0, [r7, #12]
 801a9a8:	60b9      	str	r1, [r7, #8]
 801a9aa:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	685b      	ldr	r3, [r3, #4]
 801a9b0:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 801a9b2:	68fb      	ldr	r3, [r7, #12]
 801a9b4:	685a      	ldr	r2, [r3, #4]
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	441a      	add	r2, r3
 801a9ba:	68fb      	ldr	r3, [r7, #12]
 801a9bc:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 801a9be:	68bb      	ldr	r3, [r7, #8]
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	d004      	beq.n	801a9ce <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 801a9c4:	687a      	ldr	r2, [r7, #4]
 801a9c6:	6979      	ldr	r1, [r7, #20]
 801a9c8:	68b8      	ldr	r0, [r7, #8]
 801a9ca:	f002 febb 	bl	801d744 <memcpy>
    }
    
    return true;
 801a9ce:	2301      	movs	r3, #1
}
 801a9d0:	4618      	mov	r0, r3
 801a9d2:	3718      	adds	r7, #24
 801a9d4:	46bd      	mov	sp, r7
 801a9d6:	bd80      	pop	{r7, pc}

0801a9d8 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 801a9d8:	b580      	push	{r7, lr}
 801a9da:	b088      	sub	sp, #32
 801a9dc:	af00      	add	r7, sp, #0
 801a9de:	60f8      	str	r0, [r7, #12]
 801a9e0:	60b9      	str	r1, [r7, #8]
 801a9e2:	607a      	str	r2, [r7, #4]
    if (count == 0)
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d101      	bne.n	801a9ee <pb_read+0x16>
        return true;
 801a9ea:	2301      	movs	r3, #1
 801a9ec:	e05f      	b.n	801aaae <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 801a9ee:	68bb      	ldr	r3, [r7, #8]
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d123      	bne.n	801aa3c <pb_read+0x64>
 801a9f4:	68fb      	ldr	r3, [r7, #12]
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	4a2f      	ldr	r2, [pc, #188]	; (801aab8 <pb_read+0xe0>)
 801a9fa:	4293      	cmp	r3, r2
 801a9fc:	d01e      	beq.n	801aa3c <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 801a9fe:	e011      	b.n	801aa24 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 801aa00:	f107 0310 	add.w	r3, r7, #16
 801aa04:	2210      	movs	r2, #16
 801aa06:	4619      	mov	r1, r3
 801aa08:	68f8      	ldr	r0, [r7, #12]
 801aa0a:	f7ff ffe5 	bl	801a9d8 <pb_read>
 801aa0e:	4603      	mov	r3, r0
 801aa10:	f083 0301 	eor.w	r3, r3, #1
 801aa14:	b2db      	uxtb	r3, r3
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d001      	beq.n	801aa1e <pb_read+0x46>
				return false;
 801aa1a:	2300      	movs	r3, #0
 801aa1c:	e047      	b.n	801aaae <pb_read+0xd6>
			
			count -= 16;
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	3b10      	subs	r3, #16
 801aa22:	607b      	str	r3, [r7, #4]
		while (count > 16)
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	2b10      	cmp	r3, #16
 801aa28:	d8ea      	bhi.n	801aa00 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 801aa2a:	f107 0310 	add.w	r3, r7, #16
 801aa2e:	687a      	ldr	r2, [r7, #4]
 801aa30:	4619      	mov	r1, r3
 801aa32:	68f8      	ldr	r0, [r7, #12]
 801aa34:	f7ff ffd0 	bl	801a9d8 <pb_read>
 801aa38:	4603      	mov	r3, r0
 801aa3a:	e038      	b.n	801aaae <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 801aa3c:	68fb      	ldr	r3, [r7, #12]
 801aa3e:	689b      	ldr	r3, [r3, #8]
 801aa40:	687a      	ldr	r2, [r7, #4]
 801aa42:	429a      	cmp	r2, r3
 801aa44:	d90b      	bls.n	801aa5e <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 801aa46:	68fb      	ldr	r3, [r7, #12]
 801aa48:	68db      	ldr	r3, [r3, #12]
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	d002      	beq.n	801aa54 <pb_read+0x7c>
 801aa4e:	68fb      	ldr	r3, [r7, #12]
 801aa50:	68db      	ldr	r3, [r3, #12]
 801aa52:	e000      	b.n	801aa56 <pb_read+0x7e>
 801aa54:	4b19      	ldr	r3, [pc, #100]	; (801aabc <pb_read+0xe4>)
 801aa56:	68fa      	ldr	r2, [r7, #12]
 801aa58:	60d3      	str	r3, [r2, #12]
 801aa5a:	2300      	movs	r3, #0
 801aa5c:	e027      	b.n	801aaae <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	681b      	ldr	r3, [r3, #0]
 801aa62:	687a      	ldr	r2, [r7, #4]
 801aa64:	68b9      	ldr	r1, [r7, #8]
 801aa66:	68f8      	ldr	r0, [r7, #12]
 801aa68:	4798      	blx	r3
 801aa6a:	4603      	mov	r3, r0
 801aa6c:	f083 0301 	eor.w	r3, r3, #1
 801aa70:	b2db      	uxtb	r3, r3
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d00b      	beq.n	801aa8e <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 801aa76:	68fb      	ldr	r3, [r7, #12]
 801aa78:	68db      	ldr	r3, [r3, #12]
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d002      	beq.n	801aa84 <pb_read+0xac>
 801aa7e:	68fb      	ldr	r3, [r7, #12]
 801aa80:	68db      	ldr	r3, [r3, #12]
 801aa82:	e000      	b.n	801aa86 <pb_read+0xae>
 801aa84:	4b0e      	ldr	r3, [pc, #56]	; (801aac0 <pb_read+0xe8>)
 801aa86:	68fa      	ldr	r2, [r7, #12]
 801aa88:	60d3      	str	r3, [r2, #12]
 801aa8a:	2300      	movs	r3, #0
 801aa8c:	e00f      	b.n	801aaae <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 801aa8e:	68fb      	ldr	r3, [r7, #12]
 801aa90:	689b      	ldr	r3, [r3, #8]
 801aa92:	687a      	ldr	r2, [r7, #4]
 801aa94:	429a      	cmp	r2, r3
 801aa96:	d903      	bls.n	801aaa0 <pb_read+0xc8>
        stream->bytes_left = 0;
 801aa98:	68fb      	ldr	r3, [r7, #12]
 801aa9a:	2200      	movs	r2, #0
 801aa9c:	609a      	str	r2, [r3, #8]
 801aa9e:	e005      	b.n	801aaac <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	689a      	ldr	r2, [r3, #8]
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	1ad2      	subs	r2, r2, r3
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	609a      	str	r2, [r3, #8]

    return true;
 801aaac:	2301      	movs	r3, #1
}
 801aaae:	4618      	mov	r0, r3
 801aab0:	3720      	adds	r7, #32
 801aab2:	46bd      	mov	sp, r7
 801aab4:	bd80      	pop	{r7, pc}
 801aab6:	bf00      	nop
 801aab8:	0801a9a1 	.word	0x0801a9a1
 801aabc:	08021f9c 	.word	0x08021f9c
 801aac0:	08021fac 	.word	0x08021fac

0801aac4 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 801aac4:	b580      	push	{r7, lr}
 801aac6:	b082      	sub	sp, #8
 801aac8:	af00      	add	r7, sp, #0
 801aaca:	6078      	str	r0, [r7, #4]
 801aacc:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	689b      	ldr	r3, [r3, #8]
 801aad2:	2b00      	cmp	r3, #0
 801aad4:	d10b      	bne.n	801aaee <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	68db      	ldr	r3, [r3, #12]
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d002      	beq.n	801aae4 <pb_readbyte+0x20>
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	68db      	ldr	r3, [r3, #12]
 801aae2:	e000      	b.n	801aae6 <pb_readbyte+0x22>
 801aae4:	4b13      	ldr	r3, [pc, #76]	; (801ab34 <pb_readbyte+0x70>)
 801aae6:	687a      	ldr	r2, [r7, #4]
 801aae8:	60d3      	str	r3, [r2, #12]
 801aaea:	2300      	movs	r3, #0
 801aaec:	e01d      	b.n	801ab2a <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	681b      	ldr	r3, [r3, #0]
 801aaf2:	2201      	movs	r2, #1
 801aaf4:	6839      	ldr	r1, [r7, #0]
 801aaf6:	6878      	ldr	r0, [r7, #4]
 801aaf8:	4798      	blx	r3
 801aafa:	4603      	mov	r3, r0
 801aafc:	f083 0301 	eor.w	r3, r3, #1
 801ab00:	b2db      	uxtb	r3, r3
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d00b      	beq.n	801ab1e <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	68db      	ldr	r3, [r3, #12]
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d002      	beq.n	801ab14 <pb_readbyte+0x50>
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	68db      	ldr	r3, [r3, #12]
 801ab12:	e000      	b.n	801ab16 <pb_readbyte+0x52>
 801ab14:	4b08      	ldr	r3, [pc, #32]	; (801ab38 <pb_readbyte+0x74>)
 801ab16:	687a      	ldr	r2, [r7, #4]
 801ab18:	60d3      	str	r3, [r2, #12]
 801ab1a:	2300      	movs	r3, #0
 801ab1c:	e005      	b.n	801ab2a <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	689b      	ldr	r3, [r3, #8]
 801ab22:	1e5a      	subs	r2, r3, #1
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	609a      	str	r2, [r3, #8]
    
    return true;    
 801ab28:	2301      	movs	r3, #1
}
 801ab2a:	4618      	mov	r0, r3
 801ab2c:	3708      	adds	r7, #8
 801ab2e:	46bd      	mov	sp, r7
 801ab30:	bd80      	pop	{r7, pc}
 801ab32:	bf00      	nop
 801ab34:	08021f9c 	.word	0x08021f9c
 801ab38:	08021fac 	.word	0x08021fac

0801ab3c <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 801ab3c:	b490      	push	{r4, r7}
 801ab3e:	b08a      	sub	sp, #40	; 0x28
 801ab40:	af00      	add	r7, sp, #0
 801ab42:	60f8      	str	r0, [r7, #12]
 801ab44:	60b9      	str	r1, [r7, #8]
 801ab46:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 801ab48:	4b0a      	ldr	r3, [pc, #40]	; (801ab74 <pb_istream_from_buffer+0x38>)
 801ab4a:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 801ab4c:	68bb      	ldr	r3, [r7, #8]
 801ab4e:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 801ab50:	697b      	ldr	r3, [r7, #20]
 801ab52:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 801ab58:	2300      	movs	r3, #0
 801ab5a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	461c      	mov	r4, r3
 801ab60:	f107 0318 	add.w	r3, r7, #24
 801ab64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ab66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801ab6a:	68f8      	ldr	r0, [r7, #12]
 801ab6c:	3728      	adds	r7, #40	; 0x28
 801ab6e:	46bd      	mov	sp, r7
 801ab70:	bc90      	pop	{r4, r7}
 801ab72:	4770      	bx	lr
 801ab74:	0801a9a1 	.word	0x0801a9a1

0801ab78 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 801ab78:	b580      	push	{r7, lr}
 801ab7a:	b088      	sub	sp, #32
 801ab7c:	af00      	add	r7, sp, #0
 801ab7e:	60f8      	str	r0, [r7, #12]
 801ab80:	60b9      	str	r1, [r7, #8]
 801ab82:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 801ab84:	f107 0315 	add.w	r3, r7, #21
 801ab88:	4619      	mov	r1, r3
 801ab8a:	68f8      	ldr	r0, [r7, #12]
 801ab8c:	f7ff ff9a 	bl	801aac4 <pb_readbyte>
 801ab90:	4603      	mov	r3, r0
 801ab92:	f083 0301 	eor.w	r3, r3, #1
 801ab96:	b2db      	uxtb	r3, r3
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d00b      	beq.n	801abb4 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	689b      	ldr	r3, [r3, #8]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d105      	bne.n	801abb0 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	d002      	beq.n	801abb0 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	2201      	movs	r2, #1
 801abae:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 801abb0:	2300      	movs	r3, #0
 801abb2:	e084      	b.n	801acbe <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 801abb4:	7d7b      	ldrb	r3, [r7, #21]
 801abb6:	b25b      	sxtb	r3, r3
 801abb8:	2b00      	cmp	r3, #0
 801abba:	db02      	blt.n	801abc2 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 801abbc:	7d7b      	ldrb	r3, [r7, #21]
 801abbe:	61fb      	str	r3, [r7, #28]
 801abc0:	e079      	b.n	801acb6 <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 801abc2:	2307      	movs	r3, #7
 801abc4:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 801abc6:	7d7b      	ldrb	r3, [r7, #21]
 801abc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801abcc:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 801abce:	f107 0315 	add.w	r3, r7, #21
 801abd2:	4619      	mov	r1, r3
 801abd4:	68f8      	ldr	r0, [r7, #12]
 801abd6:	f7ff ff75 	bl	801aac4 <pb_readbyte>
 801abda:	4603      	mov	r3, r0
 801abdc:	f083 0301 	eor.w	r3, r3, #1
 801abe0:	b2db      	uxtb	r3, r3
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d001      	beq.n	801abea <pb_decode_varint32_eof+0x72>
                return false;
 801abe6:	2300      	movs	r3, #0
 801abe8:	e069      	b.n	801acbe <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 801abea:	69bb      	ldr	r3, [r7, #24]
 801abec:	2b1f      	cmp	r3, #31
 801abee:	d92f      	bls.n	801ac50 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 801abf0:	69bb      	ldr	r3, [r7, #24]
 801abf2:	2b3e      	cmp	r3, #62	; 0x3e
 801abf4:	d801      	bhi.n	801abfa <pb_decode_varint32_eof+0x82>
 801abf6:	23ff      	movs	r3, #255	; 0xff
 801abf8:	e000      	b.n	801abfc <pb_decode_varint32_eof+0x84>
 801abfa:	2301      	movs	r3, #1
 801abfc:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 801abfe:	7d7b      	ldrb	r3, [r7, #21]
 801ac00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	d006      	beq.n	801ac16 <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 801ac08:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	da05      	bge.n	801ac1a <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 801ac0e:	7d7b      	ldrb	r3, [r7, #21]
 801ac10:	7dfa      	ldrb	r2, [r7, #23]
 801ac12:	429a      	cmp	r2, r3
 801ac14:	d101      	bne.n	801ac1a <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 801ac16:	2301      	movs	r3, #1
 801ac18:	e000      	b.n	801ac1c <pb_decode_varint32_eof+0xa4>
 801ac1a:	2300      	movs	r3, #0
 801ac1c:	75bb      	strb	r3, [r7, #22]
 801ac1e:	7dbb      	ldrb	r3, [r7, #22]
 801ac20:	f003 0301 	and.w	r3, r3, #1
 801ac24:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 801ac26:	69bb      	ldr	r3, [r7, #24]
 801ac28:	2b3f      	cmp	r3, #63	; 0x3f
 801ac2a:	d805      	bhi.n	801ac38 <pb_decode_varint32_eof+0xc0>
 801ac2c:	7dbb      	ldrb	r3, [r7, #22]
 801ac2e:	f083 0301 	eor.w	r3, r3, #1
 801ac32:	b2db      	uxtb	r3, r3
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	d037      	beq.n	801aca8 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	68db      	ldr	r3, [r3, #12]
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d002      	beq.n	801ac46 <pb_decode_varint32_eof+0xce>
 801ac40:	68fb      	ldr	r3, [r7, #12]
 801ac42:	68db      	ldr	r3, [r3, #12]
 801ac44:	e000      	b.n	801ac48 <pb_decode_varint32_eof+0xd0>
 801ac46:	4b20      	ldr	r3, [pc, #128]	; (801acc8 <pb_decode_varint32_eof+0x150>)
 801ac48:	68fa      	ldr	r2, [r7, #12]
 801ac4a:	60d3      	str	r3, [r2, #12]
 801ac4c:	2300      	movs	r3, #0
 801ac4e:	e036      	b.n	801acbe <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 801ac50:	69bb      	ldr	r3, [r7, #24]
 801ac52:	2b1c      	cmp	r3, #28
 801ac54:	d11f      	bne.n	801ac96 <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 801ac56:	7d7b      	ldrb	r3, [r7, #21]
 801ac58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d010      	beq.n	801ac82 <pb_decode_varint32_eof+0x10a>
 801ac60:	7d7b      	ldrb	r3, [r7, #21]
 801ac62:	f003 0378 	and.w	r3, r3, #120	; 0x78
 801ac66:	2b78      	cmp	r3, #120	; 0x78
 801ac68:	d00b      	beq.n	801ac82 <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 801ac6a:	68fb      	ldr	r3, [r7, #12]
 801ac6c:	68db      	ldr	r3, [r3, #12]
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	d002      	beq.n	801ac78 <pb_decode_varint32_eof+0x100>
 801ac72:	68fb      	ldr	r3, [r7, #12]
 801ac74:	68db      	ldr	r3, [r3, #12]
 801ac76:	e000      	b.n	801ac7a <pb_decode_varint32_eof+0x102>
 801ac78:	4b13      	ldr	r3, [pc, #76]	; (801acc8 <pb_decode_varint32_eof+0x150>)
 801ac7a:	68fa      	ldr	r2, [r7, #12]
 801ac7c:	60d3      	str	r3, [r2, #12]
 801ac7e:	2300      	movs	r3, #0
 801ac80:	e01d      	b.n	801acbe <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 801ac82:	7d7b      	ldrb	r3, [r7, #21]
 801ac84:	f003 020f 	and.w	r2, r3, #15
 801ac88:	69bb      	ldr	r3, [r7, #24]
 801ac8a:	fa02 f303 	lsl.w	r3, r2, r3
 801ac8e:	69fa      	ldr	r2, [r7, #28]
 801ac90:	4313      	orrs	r3, r2
 801ac92:	61fb      	str	r3, [r7, #28]
 801ac94:	e008      	b.n	801aca8 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 801ac96:	7d7b      	ldrb	r3, [r7, #21]
 801ac98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ac9c:	69bb      	ldr	r3, [r7, #24]
 801ac9e:	fa02 f303 	lsl.w	r3, r2, r3
 801aca2:	69fa      	ldr	r2, [r7, #28]
 801aca4:	4313      	orrs	r3, r2
 801aca6:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 801aca8:	69bb      	ldr	r3, [r7, #24]
 801acaa:	3307      	adds	r3, #7
 801acac:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 801acae:	7d7b      	ldrb	r3, [r7, #21]
 801acb0:	b25b      	sxtb	r3, r3
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	db8b      	blt.n	801abce <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 801acb6:	68bb      	ldr	r3, [r7, #8]
 801acb8:	69fa      	ldr	r2, [r7, #28]
 801acba:	601a      	str	r2, [r3, #0]
   return true;
 801acbc:	2301      	movs	r3, #1
}
 801acbe:	4618      	mov	r0, r3
 801acc0:	3720      	adds	r7, #32
 801acc2:	46bd      	mov	sp, r7
 801acc4:	bd80      	pop	{r7, pc}
 801acc6:	bf00      	nop
 801acc8:	08021fb8 	.word	0x08021fb8

0801accc <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 801accc:	b580      	push	{r7, lr}
 801acce:	b082      	sub	sp, #8
 801acd0:	af00      	add	r7, sp, #0
 801acd2:	6078      	str	r0, [r7, #4]
 801acd4:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 801acd6:	2200      	movs	r2, #0
 801acd8:	6839      	ldr	r1, [r7, #0]
 801acda:	6878      	ldr	r0, [r7, #4]
 801acdc:	f7ff ff4c 	bl	801ab78 <pb_decode_varint32_eof>
 801ace0:	4603      	mov	r3, r0
}
 801ace2:	4618      	mov	r0, r3
 801ace4:	3708      	adds	r7, #8
 801ace6:	46bd      	mov	sp, r7
 801ace8:	bd80      	pop	{r7, pc}
	...

0801acec <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 801acec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801acf0:	b08a      	sub	sp, #40	; 0x28
 801acf2:	af00      	add	r7, sp, #0
 801acf4:	60f8      	str	r0, [r7, #12]
 801acf6:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 801acf8:	2300      	movs	r3, #0
 801acfa:	627b      	str	r3, [r7, #36]	; 0x24
    uint64_t result = 0;
 801acfc:	f04f 0200 	mov.w	r2, #0
 801ad00:	f04f 0300 	mov.w	r3, #0
 801ad04:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 801ad08:	f107 0317 	add.w	r3, r7, #23
 801ad0c:	4619      	mov	r1, r3
 801ad0e:	68f8      	ldr	r0, [r7, #12]
 801ad10:	f7ff fed8 	bl	801aac4 <pb_readbyte>
 801ad14:	4603      	mov	r3, r0
 801ad16:	f083 0301 	eor.w	r3, r3, #1
 801ad1a:	b2db      	uxtb	r3, r3
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	d001      	beq.n	801ad24 <pb_decode_varint+0x38>
            return false;
 801ad20:	2300      	movs	r3, #0
 801ad22:	e041      	b.n	801ada8 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 801ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad26:	2b3e      	cmp	r3, #62	; 0x3e
 801ad28:	d910      	bls.n	801ad4c <pb_decode_varint+0x60>
 801ad2a:	7dfb      	ldrb	r3, [r7, #23]
 801ad2c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d00b      	beq.n	801ad4c <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 801ad34:	68fb      	ldr	r3, [r7, #12]
 801ad36:	68db      	ldr	r3, [r3, #12]
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	d002      	beq.n	801ad42 <pb_decode_varint+0x56>
 801ad3c:	68fb      	ldr	r3, [r7, #12]
 801ad3e:	68db      	ldr	r3, [r3, #12]
 801ad40:	e000      	b.n	801ad44 <pb_decode_varint+0x58>
 801ad42:	4b1c      	ldr	r3, [pc, #112]	; (801adb4 <pb_decode_varint+0xc8>)
 801ad44:	68fa      	ldr	r2, [r7, #12]
 801ad46:	60d3      	str	r3, [r2, #12]
 801ad48:	2300      	movs	r3, #0
 801ad4a:	e02d      	b.n	801ada8 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 801ad4c:	7dfb      	ldrb	r3, [r7, #23]
 801ad4e:	b2db      	uxtb	r3, r3
 801ad50:	2200      	movs	r2, #0
 801ad52:	603b      	str	r3, [r7, #0]
 801ad54:	607a      	str	r2, [r7, #4]
 801ad56:	683b      	ldr	r3, [r7, #0]
 801ad58:	f003 087f 	and.w	r8, r3, #127	; 0x7f
 801ad5c:	f04f 0900 	mov.w	r9, #0
 801ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad62:	f1a3 0120 	sub.w	r1, r3, #32
 801ad66:	f1c3 0220 	rsb	r2, r3, #32
 801ad6a:	fa09 f503 	lsl.w	r5, r9, r3
 801ad6e:	fa08 f101 	lsl.w	r1, r8, r1
 801ad72:	430d      	orrs	r5, r1
 801ad74:	fa28 f202 	lsr.w	r2, r8, r2
 801ad78:	4315      	orrs	r5, r2
 801ad7a:	fa08 f403 	lsl.w	r4, r8, r3
 801ad7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ad82:	ea42 0a04 	orr.w	sl, r2, r4
 801ad86:	ea43 0b05 	orr.w	fp, r3, r5
 801ad8a:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 801ad8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad90:	3307      	adds	r3, #7
 801ad92:	627b      	str	r3, [r7, #36]	; 0x24
    } while (byte & 0x80);
 801ad94:	7dfb      	ldrb	r3, [r7, #23]
 801ad96:	b25b      	sxtb	r3, r3
 801ad98:	2b00      	cmp	r3, #0
 801ad9a:	dbb5      	blt.n	801ad08 <pb_decode_varint+0x1c>
    
    *dest = result;
 801ad9c:	68b9      	ldr	r1, [r7, #8]
 801ad9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ada2:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 801ada6:	2301      	movs	r3, #1
}
 801ada8:	4618      	mov	r0, r3
 801adaa:	3728      	adds	r7, #40	; 0x28
 801adac:	46bd      	mov	sp, r7
 801adae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801adb2:	bf00      	nop
 801adb4:	08021fb8 	.word	0x08021fb8

0801adb8 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 801adb8:	b580      	push	{r7, lr}
 801adba:	b084      	sub	sp, #16
 801adbc:	af00      	add	r7, sp, #0
 801adbe:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 801adc0:	f107 030f 	add.w	r3, r7, #15
 801adc4:	2201      	movs	r2, #1
 801adc6:	4619      	mov	r1, r3
 801adc8:	6878      	ldr	r0, [r7, #4]
 801adca:	f7ff fe05 	bl	801a9d8 <pb_read>
 801adce:	4603      	mov	r3, r0
 801add0:	f083 0301 	eor.w	r3, r3, #1
 801add4:	b2db      	uxtb	r3, r3
 801add6:	2b00      	cmp	r3, #0
 801add8:	d001      	beq.n	801adde <pb_skip_varint+0x26>
            return false;
 801adda:	2300      	movs	r3, #0
 801addc:	e004      	b.n	801ade8 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 801adde:	7bfb      	ldrb	r3, [r7, #15]
 801ade0:	b25b      	sxtb	r3, r3
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	dbec      	blt.n	801adc0 <pb_skip_varint+0x8>
    return true;
 801ade6:	2301      	movs	r3, #1
}
 801ade8:	4618      	mov	r0, r3
 801adea:	3710      	adds	r7, #16
 801adec:	46bd      	mov	sp, r7
 801adee:	bd80      	pop	{r7, pc}

0801adf0 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 801adf0:	b580      	push	{r7, lr}
 801adf2:	b084      	sub	sp, #16
 801adf4:	af00      	add	r7, sp, #0
 801adf6:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 801adf8:	f107 030c 	add.w	r3, r7, #12
 801adfc:	4619      	mov	r1, r3
 801adfe:	6878      	ldr	r0, [r7, #4]
 801ae00:	f7ff ff64 	bl	801accc <pb_decode_varint32>
 801ae04:	4603      	mov	r3, r0
 801ae06:	f083 0301 	eor.w	r3, r3, #1
 801ae0a:	b2db      	uxtb	r3, r3
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	d001      	beq.n	801ae14 <pb_skip_string+0x24>
        return false;
 801ae10:	2300      	movs	r3, #0
 801ae12:	e006      	b.n	801ae22 <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 801ae14:	68fb      	ldr	r3, [r7, #12]
 801ae16:	461a      	mov	r2, r3
 801ae18:	2100      	movs	r1, #0
 801ae1a:	6878      	ldr	r0, [r7, #4]
 801ae1c:	f7ff fddc 	bl	801a9d8 <pb_read>
 801ae20:	4603      	mov	r3, r0
}
 801ae22:	4618      	mov	r0, r3
 801ae24:	3710      	adds	r7, #16
 801ae26:	46bd      	mov	sp, r7
 801ae28:	bd80      	pop	{r7, pc}

0801ae2a <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 801ae2a:	b580      	push	{r7, lr}
 801ae2c:	b086      	sub	sp, #24
 801ae2e:	af00      	add	r7, sp, #0
 801ae30:	60f8      	str	r0, [r7, #12]
 801ae32:	60b9      	str	r1, [r7, #8]
 801ae34:	607a      	str	r2, [r7, #4]
 801ae36:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 801ae38:	683b      	ldr	r3, [r7, #0]
 801ae3a:	2200      	movs	r2, #0
 801ae3c:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 801ae3e:	68bb      	ldr	r3, [r7, #8]
 801ae40:	2200      	movs	r2, #0
 801ae42:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	2200      	movs	r2, #0
 801ae48:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 801ae4a:	f107 0314 	add.w	r3, r7, #20
 801ae4e:	683a      	ldr	r2, [r7, #0]
 801ae50:	4619      	mov	r1, r3
 801ae52:	68f8      	ldr	r0, [r7, #12]
 801ae54:	f7ff fe90 	bl	801ab78 <pb_decode_varint32_eof>
 801ae58:	4603      	mov	r3, r0
 801ae5a:	f083 0301 	eor.w	r3, r3, #1
 801ae5e:	b2db      	uxtb	r3, r3
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d001      	beq.n	801ae68 <pb_decode_tag+0x3e>
    {
        return false;
 801ae64:	2300      	movs	r3, #0
 801ae66:	e00b      	b.n	801ae80 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 801ae68:	697b      	ldr	r3, [r7, #20]
 801ae6a:	08da      	lsrs	r2, r3, #3
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 801ae70:	697b      	ldr	r3, [r7, #20]
 801ae72:	b2db      	uxtb	r3, r3
 801ae74:	f003 0307 	and.w	r3, r3, #7
 801ae78:	b2da      	uxtb	r2, r3
 801ae7a:	68bb      	ldr	r3, [r7, #8]
 801ae7c:	701a      	strb	r2, [r3, #0]
    return true;
 801ae7e:	2301      	movs	r3, #1
}
 801ae80:	4618      	mov	r0, r3
 801ae82:	3718      	adds	r7, #24
 801ae84:	46bd      	mov	sp, r7
 801ae86:	bd80      	pop	{r7, pc}

0801ae88 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 801ae88:	b580      	push	{r7, lr}
 801ae8a:	b082      	sub	sp, #8
 801ae8c:	af00      	add	r7, sp, #0
 801ae8e:	6078      	str	r0, [r7, #4]
 801ae90:	460b      	mov	r3, r1
 801ae92:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 801ae94:	78fb      	ldrb	r3, [r7, #3]
 801ae96:	2b05      	cmp	r3, #5
 801ae98:	d826      	bhi.n	801aee8 <pb_skip_field+0x60>
 801ae9a:	a201      	add	r2, pc, #4	; (adr r2, 801aea0 <pb_skip_field+0x18>)
 801ae9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aea0:	0801aeb9 	.word	0x0801aeb9
 801aea4:	0801aec3 	.word	0x0801aec3
 801aea8:	0801aed1 	.word	0x0801aed1
 801aeac:	0801aee9 	.word	0x0801aee9
 801aeb0:	0801aee9 	.word	0x0801aee9
 801aeb4:	0801aedb 	.word	0x0801aedb
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 801aeb8:	6878      	ldr	r0, [r7, #4]
 801aeba:	f7ff ff7d 	bl	801adb8 <pb_skip_varint>
 801aebe:	4603      	mov	r3, r0
 801aec0:	e01d      	b.n	801aefe <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 801aec2:	2208      	movs	r2, #8
 801aec4:	2100      	movs	r1, #0
 801aec6:	6878      	ldr	r0, [r7, #4]
 801aec8:	f7ff fd86 	bl	801a9d8 <pb_read>
 801aecc:	4603      	mov	r3, r0
 801aece:	e016      	b.n	801aefe <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 801aed0:	6878      	ldr	r0, [r7, #4]
 801aed2:	f7ff ff8d 	bl	801adf0 <pb_skip_string>
 801aed6:	4603      	mov	r3, r0
 801aed8:	e011      	b.n	801aefe <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 801aeda:	2204      	movs	r2, #4
 801aedc:	2100      	movs	r1, #0
 801aede:	6878      	ldr	r0, [r7, #4]
 801aee0:	f7ff fd7a 	bl	801a9d8 <pb_read>
 801aee4:	4603      	mov	r3, r0
 801aee6:	e00a      	b.n	801aefe <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	68db      	ldr	r3, [r3, #12]
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d002      	beq.n	801aef6 <pb_skip_field+0x6e>
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	68db      	ldr	r3, [r3, #12]
 801aef4:	e000      	b.n	801aef8 <pb_skip_field+0x70>
 801aef6:	4b04      	ldr	r3, [pc, #16]	; (801af08 <pb_skip_field+0x80>)
 801aef8:	687a      	ldr	r2, [r7, #4]
 801aefa:	60d3      	str	r3, [r2, #12]
 801aefc:	2300      	movs	r3, #0
    }
}
 801aefe:	4618      	mov	r0, r3
 801af00:	3708      	adds	r7, #8
 801af02:	46bd      	mov	sp, r7
 801af04:	bd80      	pop	{r7, pc}
 801af06:	bf00      	nop
 801af08:	08021fc8 	.word	0x08021fc8

0801af0c <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 801af0c:	b580      	push	{r7, lr}
 801af0e:	b086      	sub	sp, #24
 801af10:	af00      	add	r7, sp, #0
 801af12:	60f8      	str	r0, [r7, #12]
 801af14:	607a      	str	r2, [r7, #4]
 801af16:	603b      	str	r3, [r7, #0]
 801af18:	460b      	mov	r3, r1
 801af1a:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 801af1c:	683b      	ldr	r3, [r7, #0]
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 801af22:	7afb      	ldrb	r3, [r7, #11]
 801af24:	2b05      	cmp	r3, #5
 801af26:	d03f      	beq.n	801afa8 <read_raw_value+0x9c>
 801af28:	2b05      	cmp	r3, #5
 801af2a:	dc47      	bgt.n	801afbc <read_raw_value+0xb0>
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d002      	beq.n	801af36 <read_raw_value+0x2a>
 801af30:	2b01      	cmp	r3, #1
 801af32:	d02f      	beq.n	801af94 <read_raw_value+0x88>
 801af34:	e042      	b.n	801afbc <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 801af36:	683b      	ldr	r3, [r7, #0]
 801af38:	2200      	movs	r2, #0
 801af3a:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 801af3c:	683b      	ldr	r3, [r7, #0]
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	1c5a      	adds	r2, r3, #1
 801af42:	683b      	ldr	r3, [r7, #0]
 801af44:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 801af46:	683b      	ldr	r3, [r7, #0]
 801af48:	681b      	ldr	r3, [r3, #0]
 801af4a:	697a      	ldr	r2, [r7, #20]
 801af4c:	429a      	cmp	r2, r3
 801af4e:	d20b      	bcs.n	801af68 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 801af50:	68fb      	ldr	r3, [r7, #12]
 801af52:	68db      	ldr	r3, [r3, #12]
 801af54:	2b00      	cmp	r3, #0
 801af56:	d002      	beq.n	801af5e <read_raw_value+0x52>
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	68db      	ldr	r3, [r3, #12]
 801af5c:	e000      	b.n	801af60 <read_raw_value+0x54>
 801af5e:	4b1f      	ldr	r3, [pc, #124]	; (801afdc <read_raw_value+0xd0>)
 801af60:	68fa      	ldr	r2, [r7, #12]
 801af62:	60d3      	str	r3, [r2, #12]
 801af64:	2300      	movs	r3, #0
 801af66:	e034      	b.n	801afd2 <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 801af68:	2201      	movs	r2, #1
 801af6a:	6879      	ldr	r1, [r7, #4]
 801af6c:	68f8      	ldr	r0, [r7, #12]
 801af6e:	f7ff fd33 	bl	801a9d8 <pb_read>
 801af72:	4603      	mov	r3, r0
 801af74:	f083 0301 	eor.w	r3, r3, #1
 801af78:	b2db      	uxtb	r3, r3
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	d001      	beq.n	801af82 <read_raw_value+0x76>
                    return false;
 801af7e:	2300      	movs	r3, #0
 801af80:	e027      	b.n	801afd2 <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	1c5a      	adds	r2, r3, #1
 801af86:	607a      	str	r2, [r7, #4]
 801af88:	781b      	ldrb	r3, [r3, #0]
 801af8a:	b25b      	sxtb	r3, r3
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	dbd5      	blt.n	801af3c <read_raw_value+0x30>
            return true;
 801af90:	2301      	movs	r3, #1
 801af92:	e01e      	b.n	801afd2 <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 801af94:	683b      	ldr	r3, [r7, #0]
 801af96:	2208      	movs	r2, #8
 801af98:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 801af9a:	2208      	movs	r2, #8
 801af9c:	6879      	ldr	r1, [r7, #4]
 801af9e:	68f8      	ldr	r0, [r7, #12]
 801afa0:	f7ff fd1a 	bl	801a9d8 <pb_read>
 801afa4:	4603      	mov	r3, r0
 801afa6:	e014      	b.n	801afd2 <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 801afa8:	683b      	ldr	r3, [r7, #0]
 801afaa:	2204      	movs	r2, #4
 801afac:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 801afae:	2204      	movs	r2, #4
 801afb0:	6879      	ldr	r1, [r7, #4]
 801afb2:	68f8      	ldr	r0, [r7, #12]
 801afb4:	f7ff fd10 	bl	801a9d8 <pb_read>
 801afb8:	4603      	mov	r3, r0
 801afba:	e00a      	b.n	801afd2 <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 801afbc:	68fb      	ldr	r3, [r7, #12]
 801afbe:	68db      	ldr	r3, [r3, #12]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d002      	beq.n	801afca <read_raw_value+0xbe>
 801afc4:	68fb      	ldr	r3, [r7, #12]
 801afc6:	68db      	ldr	r3, [r3, #12]
 801afc8:	e000      	b.n	801afcc <read_raw_value+0xc0>
 801afca:	4b05      	ldr	r3, [pc, #20]	; (801afe0 <read_raw_value+0xd4>)
 801afcc:	68fa      	ldr	r2, [r7, #12]
 801afce:	60d3      	str	r3, [r2, #12]
 801afd0:	2300      	movs	r3, #0
    }
}
 801afd2:	4618      	mov	r0, r3
 801afd4:	3718      	adds	r7, #24
 801afd6:	46bd      	mov	sp, r7
 801afd8:	bd80      	pop	{r7, pc}
 801afda:	bf00      	nop
 801afdc:	08021fb8 	.word	0x08021fb8
 801afe0:	08021fc8 	.word	0x08021fc8

0801afe4 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 801afe4:	b590      	push	{r4, r7, lr}
 801afe6:	b085      	sub	sp, #20
 801afe8:	af00      	add	r7, sp, #0
 801afea:	6078      	str	r0, [r7, #4]
 801afec:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 801afee:	f107 030c 	add.w	r3, r7, #12
 801aff2:	4619      	mov	r1, r3
 801aff4:	6878      	ldr	r0, [r7, #4]
 801aff6:	f7ff fe69 	bl	801accc <pb_decode_varint32>
 801affa:	4603      	mov	r3, r0
 801affc:	f083 0301 	eor.w	r3, r3, #1
 801b000:	b2db      	uxtb	r3, r3
 801b002:	2b00      	cmp	r3, #0
 801b004:	d001      	beq.n	801b00a <pb_make_string_substream+0x26>
        return false;
 801b006:	2300      	movs	r3, #0
 801b008:	e020      	b.n	801b04c <pb_make_string_substream+0x68>
    
    *substream = *stream;
 801b00a:	683a      	ldr	r2, [r7, #0]
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	4614      	mov	r4, r2
 801b010:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b012:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 801b016:	683b      	ldr	r3, [r7, #0]
 801b018:	689a      	ldr	r2, [r3, #8]
 801b01a:	68fb      	ldr	r3, [r7, #12]
 801b01c:	429a      	cmp	r2, r3
 801b01e:	d20b      	bcs.n	801b038 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 801b020:	687b      	ldr	r3, [r7, #4]
 801b022:	68db      	ldr	r3, [r3, #12]
 801b024:	2b00      	cmp	r3, #0
 801b026:	d002      	beq.n	801b02e <pb_make_string_substream+0x4a>
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	68db      	ldr	r3, [r3, #12]
 801b02c:	e000      	b.n	801b030 <pb_make_string_substream+0x4c>
 801b02e:	4b09      	ldr	r3, [pc, #36]	; (801b054 <pb_make_string_substream+0x70>)
 801b030:	687a      	ldr	r2, [r7, #4]
 801b032:	60d3      	str	r3, [r2, #12]
 801b034:	2300      	movs	r3, #0
 801b036:	e009      	b.n	801b04c <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 801b038:	68fa      	ldr	r2, [r7, #12]
 801b03a:	683b      	ldr	r3, [r7, #0]
 801b03c:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	689a      	ldr	r2, [r3, #8]
 801b042:	68fb      	ldr	r3, [r7, #12]
 801b044:	1ad2      	subs	r2, r2, r3
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	609a      	str	r2, [r3, #8]
    return true;
 801b04a:	2301      	movs	r3, #1
}
 801b04c:	4618      	mov	r0, r3
 801b04e:	3714      	adds	r7, #20
 801b050:	46bd      	mov	sp, r7
 801b052:	bd90      	pop	{r4, r7, pc}
 801b054:	08021fdc 	.word	0x08021fdc

0801b058 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 801b058:	b580      	push	{r7, lr}
 801b05a:	b082      	sub	sp, #8
 801b05c:	af00      	add	r7, sp, #0
 801b05e:	6078      	str	r0, [r7, #4]
 801b060:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 801b062:	683b      	ldr	r3, [r7, #0]
 801b064:	689b      	ldr	r3, [r3, #8]
 801b066:	2b00      	cmp	r3, #0
 801b068:	d00e      	beq.n	801b088 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 801b06a:	683b      	ldr	r3, [r7, #0]
 801b06c:	689b      	ldr	r3, [r3, #8]
 801b06e:	461a      	mov	r2, r3
 801b070:	2100      	movs	r1, #0
 801b072:	6838      	ldr	r0, [r7, #0]
 801b074:	f7ff fcb0 	bl	801a9d8 <pb_read>
 801b078:	4603      	mov	r3, r0
 801b07a:	f083 0301 	eor.w	r3, r3, #1
 801b07e:	b2db      	uxtb	r3, r3
 801b080:	2b00      	cmp	r3, #0
 801b082:	d001      	beq.n	801b088 <pb_close_string_substream+0x30>
            return false;
 801b084:	2300      	movs	r3, #0
 801b086:	e008      	b.n	801b09a <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 801b088:	683b      	ldr	r3, [r7, #0]
 801b08a:	685a      	ldr	r2, [r3, #4]
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 801b090:	683b      	ldr	r3, [r7, #0]
 801b092:	68da      	ldr	r2, [r3, #12]
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	60da      	str	r2, [r3, #12]
#endif
    return true;
 801b098:	2301      	movs	r3, #1
}
 801b09a:	4618      	mov	r0, r3
 801b09c:	3708      	adds	r7, #8
 801b09e:	46bd      	mov	sp, r7
 801b0a0:	bd80      	pop	{r7, pc}
	...

0801b0a4 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 801b0a4:	b580      	push	{r7, lr}
 801b0a6:	b084      	sub	sp, #16
 801b0a8:	af00      	add	r7, sp, #0
 801b0aa:	60f8      	str	r0, [r7, #12]
 801b0ac:	460b      	mov	r3, r1
 801b0ae:	607a      	str	r2, [r7, #4]
 801b0b0:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	7d9b      	ldrb	r3, [r3, #22]
 801b0b6:	f003 030f 	and.w	r3, r3, #15
 801b0ba:	2b0b      	cmp	r3, #11
 801b0bc:	f200 80d4 	bhi.w	801b268 <decode_basic_field+0x1c4>
 801b0c0:	a201      	add	r2, pc, #4	; (adr r2, 801b0c8 <decode_basic_field+0x24>)
 801b0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b0c6:	bf00      	nop
 801b0c8:	0801b0f9 	.word	0x0801b0f9
 801b0cc:	0801b129 	.word	0x0801b129
 801b0d0:	0801b129 	.word	0x0801b129
 801b0d4:	0801b129 	.word	0x0801b129
 801b0d8:	0801b159 	.word	0x0801b159
 801b0dc:	0801b18d 	.word	0x0801b18d
 801b0e0:	0801b1c1 	.word	0x0801b1c1
 801b0e4:	0801b1eb 	.word	0x0801b1eb
 801b0e8:	0801b215 	.word	0x0801b215
 801b0ec:	0801b215 	.word	0x0801b215
 801b0f0:	0801b269 	.word	0x0801b269
 801b0f4:	0801b23f 	.word	0x0801b23f
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 801b0f8:	7afb      	ldrb	r3, [r7, #11]
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d00e      	beq.n	801b11c <decode_basic_field+0x78>
 801b0fe:	7afb      	ldrb	r3, [r7, #11]
 801b100:	2bff      	cmp	r3, #255	; 0xff
 801b102:	d00b      	beq.n	801b11c <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b104:	68fb      	ldr	r3, [r7, #12]
 801b106:	68db      	ldr	r3, [r3, #12]
 801b108:	2b00      	cmp	r3, #0
 801b10a:	d002      	beq.n	801b112 <decode_basic_field+0x6e>
 801b10c:	68fb      	ldr	r3, [r7, #12]
 801b10e:	68db      	ldr	r3, [r3, #12]
 801b110:	e000      	b.n	801b114 <decode_basic_field+0x70>
 801b112:	4b5d      	ldr	r3, [pc, #372]	; (801b288 <decode_basic_field+0x1e4>)
 801b114:	68fa      	ldr	r2, [r7, #12]
 801b116:	60d3      	str	r3, [r2, #12]
 801b118:	2300      	movs	r3, #0
 801b11a:	e0b0      	b.n	801b27e <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 801b11c:	6879      	ldr	r1, [r7, #4]
 801b11e:	68f8      	ldr	r0, [r7, #12]
 801b120:	f000 fef6 	bl	801bf10 <pb_dec_bool>
 801b124:	4603      	mov	r3, r0
 801b126:	e0aa      	b.n	801b27e <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 801b128:	7afb      	ldrb	r3, [r7, #11]
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d00e      	beq.n	801b14c <decode_basic_field+0xa8>
 801b12e:	7afb      	ldrb	r3, [r7, #11]
 801b130:	2bff      	cmp	r3, #255	; 0xff
 801b132:	d00b      	beq.n	801b14c <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b134:	68fb      	ldr	r3, [r7, #12]
 801b136:	68db      	ldr	r3, [r3, #12]
 801b138:	2b00      	cmp	r3, #0
 801b13a:	d002      	beq.n	801b142 <decode_basic_field+0x9e>
 801b13c:	68fb      	ldr	r3, [r7, #12]
 801b13e:	68db      	ldr	r3, [r3, #12]
 801b140:	e000      	b.n	801b144 <decode_basic_field+0xa0>
 801b142:	4b51      	ldr	r3, [pc, #324]	; (801b288 <decode_basic_field+0x1e4>)
 801b144:	68fa      	ldr	r2, [r7, #12]
 801b146:	60d3      	str	r3, [r2, #12]
 801b148:	2300      	movs	r3, #0
 801b14a:	e098      	b.n	801b27e <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 801b14c:	6879      	ldr	r1, [r7, #4]
 801b14e:	68f8      	ldr	r0, [r7, #12]
 801b150:	f000 feee 	bl	801bf30 <pb_dec_varint>
 801b154:	4603      	mov	r3, r0
 801b156:	e092      	b.n	801b27e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 801b158:	7afb      	ldrb	r3, [r7, #11]
 801b15a:	2b05      	cmp	r3, #5
 801b15c:	d00e      	beq.n	801b17c <decode_basic_field+0xd8>
 801b15e:	7afb      	ldrb	r3, [r7, #11]
 801b160:	2bff      	cmp	r3, #255	; 0xff
 801b162:	d00b      	beq.n	801b17c <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b164:	68fb      	ldr	r3, [r7, #12]
 801b166:	68db      	ldr	r3, [r3, #12]
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d002      	beq.n	801b172 <decode_basic_field+0xce>
 801b16c:	68fb      	ldr	r3, [r7, #12]
 801b16e:	68db      	ldr	r3, [r3, #12]
 801b170:	e000      	b.n	801b174 <decode_basic_field+0xd0>
 801b172:	4b45      	ldr	r3, [pc, #276]	; (801b288 <decode_basic_field+0x1e4>)
 801b174:	68fa      	ldr	r2, [r7, #12]
 801b176:	60d3      	str	r3, [r2, #12]
 801b178:	2300      	movs	r3, #0
 801b17a:	e080      	b.n	801b27e <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	69db      	ldr	r3, [r3, #28]
 801b180:	4619      	mov	r1, r3
 801b182:	68f8      	ldr	r0, [r7, #12]
 801b184:	f000 fe8a 	bl	801be9c <pb_decode_fixed32>
 801b188:	4603      	mov	r3, r0
 801b18a:	e078      	b.n	801b27e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 801b18c:	7afb      	ldrb	r3, [r7, #11]
 801b18e:	2b01      	cmp	r3, #1
 801b190:	d00e      	beq.n	801b1b0 <decode_basic_field+0x10c>
 801b192:	7afb      	ldrb	r3, [r7, #11]
 801b194:	2bff      	cmp	r3, #255	; 0xff
 801b196:	d00b      	beq.n	801b1b0 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b198:	68fb      	ldr	r3, [r7, #12]
 801b19a:	68db      	ldr	r3, [r3, #12]
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	d002      	beq.n	801b1a6 <decode_basic_field+0x102>
 801b1a0:	68fb      	ldr	r3, [r7, #12]
 801b1a2:	68db      	ldr	r3, [r3, #12]
 801b1a4:	e000      	b.n	801b1a8 <decode_basic_field+0x104>
 801b1a6:	4b38      	ldr	r3, [pc, #224]	; (801b288 <decode_basic_field+0x1e4>)
 801b1a8:	68fa      	ldr	r2, [r7, #12]
 801b1aa:	60d3      	str	r3, [r2, #12]
 801b1ac:	2300      	movs	r3, #0
 801b1ae:	e066      	b.n	801b27e <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	69db      	ldr	r3, [r3, #28]
 801b1b4:	4619      	mov	r1, r3
 801b1b6:	68f8      	ldr	r0, [r7, #12]
 801b1b8:	f000 fe8c 	bl	801bed4 <pb_decode_fixed64>
 801b1bc:	4603      	mov	r3, r0
 801b1be:	e05e      	b.n	801b27e <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 801b1c0:	7afb      	ldrb	r3, [r7, #11]
 801b1c2:	2b02      	cmp	r3, #2
 801b1c4:	d00b      	beq.n	801b1de <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b1c6:	68fb      	ldr	r3, [r7, #12]
 801b1c8:	68db      	ldr	r3, [r3, #12]
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	d002      	beq.n	801b1d4 <decode_basic_field+0x130>
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	68db      	ldr	r3, [r3, #12]
 801b1d2:	e000      	b.n	801b1d6 <decode_basic_field+0x132>
 801b1d4:	4b2c      	ldr	r3, [pc, #176]	; (801b288 <decode_basic_field+0x1e4>)
 801b1d6:	68fa      	ldr	r2, [r7, #12]
 801b1d8:	60d3      	str	r3, [r2, #12]
 801b1da:	2300      	movs	r3, #0
 801b1dc:	e04f      	b.n	801b27e <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 801b1de:	6879      	ldr	r1, [r7, #4]
 801b1e0:	68f8      	ldr	r0, [r7, #12]
 801b1e2:	f000 ffd1 	bl	801c188 <pb_dec_bytes>
 801b1e6:	4603      	mov	r3, r0
 801b1e8:	e049      	b.n	801b27e <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 801b1ea:	7afb      	ldrb	r3, [r7, #11]
 801b1ec:	2b02      	cmp	r3, #2
 801b1ee:	d00b      	beq.n	801b208 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b1f0:	68fb      	ldr	r3, [r7, #12]
 801b1f2:	68db      	ldr	r3, [r3, #12]
 801b1f4:	2b00      	cmp	r3, #0
 801b1f6:	d002      	beq.n	801b1fe <decode_basic_field+0x15a>
 801b1f8:	68fb      	ldr	r3, [r7, #12]
 801b1fa:	68db      	ldr	r3, [r3, #12]
 801b1fc:	e000      	b.n	801b200 <decode_basic_field+0x15c>
 801b1fe:	4b22      	ldr	r3, [pc, #136]	; (801b288 <decode_basic_field+0x1e4>)
 801b200:	68fa      	ldr	r2, [r7, #12]
 801b202:	60d3      	str	r3, [r2, #12]
 801b204:	2300      	movs	r3, #0
 801b206:	e03a      	b.n	801b27e <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 801b208:	6879      	ldr	r1, [r7, #4]
 801b20a:	68f8      	ldr	r0, [r7, #12]
 801b20c:	f001 f830 	bl	801c270 <pb_dec_string>
 801b210:	4603      	mov	r3, r0
 801b212:	e034      	b.n	801b27e <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 801b214:	7afb      	ldrb	r3, [r7, #11]
 801b216:	2b02      	cmp	r3, #2
 801b218:	d00b      	beq.n	801b232 <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b21a:	68fb      	ldr	r3, [r7, #12]
 801b21c:	68db      	ldr	r3, [r3, #12]
 801b21e:	2b00      	cmp	r3, #0
 801b220:	d002      	beq.n	801b228 <decode_basic_field+0x184>
 801b222:	68fb      	ldr	r3, [r7, #12]
 801b224:	68db      	ldr	r3, [r3, #12]
 801b226:	e000      	b.n	801b22a <decode_basic_field+0x186>
 801b228:	4b17      	ldr	r3, [pc, #92]	; (801b288 <decode_basic_field+0x1e4>)
 801b22a:	68fa      	ldr	r2, [r7, #12]
 801b22c:	60d3      	str	r3, [r2, #12]
 801b22e:	2300      	movs	r3, #0
 801b230:	e025      	b.n	801b27e <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 801b232:	6879      	ldr	r1, [r7, #4]
 801b234:	68f8      	ldr	r0, [r7, #12]
 801b236:	f001 f897 	bl	801c368 <pb_dec_submessage>
 801b23a:	4603      	mov	r3, r0
 801b23c:	e01f      	b.n	801b27e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 801b23e:	7afb      	ldrb	r3, [r7, #11]
 801b240:	2b02      	cmp	r3, #2
 801b242:	d00b      	beq.n	801b25c <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b244:	68fb      	ldr	r3, [r7, #12]
 801b246:	68db      	ldr	r3, [r3, #12]
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d002      	beq.n	801b252 <decode_basic_field+0x1ae>
 801b24c:	68fb      	ldr	r3, [r7, #12]
 801b24e:	68db      	ldr	r3, [r3, #12]
 801b250:	e000      	b.n	801b254 <decode_basic_field+0x1b0>
 801b252:	4b0d      	ldr	r3, [pc, #52]	; (801b288 <decode_basic_field+0x1e4>)
 801b254:	68fa      	ldr	r2, [r7, #12]
 801b256:	60d3      	str	r3, [r2, #12]
 801b258:	2300      	movs	r3, #0
 801b25a:	e010      	b.n	801b27e <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 801b25c:	6879      	ldr	r1, [r7, #4]
 801b25e:	68f8      	ldr	r0, [r7, #12]
 801b260:	f001 f90c 	bl	801c47c <pb_dec_fixed_length_bytes>
 801b264:	4603      	mov	r3, r0
 801b266:	e00a      	b.n	801b27e <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 801b268:	68fb      	ldr	r3, [r7, #12]
 801b26a:	68db      	ldr	r3, [r3, #12]
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d002      	beq.n	801b276 <decode_basic_field+0x1d2>
 801b270:	68fb      	ldr	r3, [r7, #12]
 801b272:	68db      	ldr	r3, [r3, #12]
 801b274:	e000      	b.n	801b278 <decode_basic_field+0x1d4>
 801b276:	4b05      	ldr	r3, [pc, #20]	; (801b28c <decode_basic_field+0x1e8>)
 801b278:	68fa      	ldr	r2, [r7, #12]
 801b27a:	60d3      	str	r3, [r2, #12]
 801b27c:	2300      	movs	r3, #0
    }
}
 801b27e:	4618      	mov	r0, r3
 801b280:	3710      	adds	r7, #16
 801b282:	46bd      	mov	sp, r7
 801b284:	bd80      	pop	{r7, pc}
 801b286:	bf00      	nop
 801b288:	08021ff4 	.word	0x08021ff4
 801b28c:	08022004 	.word	0x08022004

0801b290 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 801b290:	b580      	push	{r7, lr}
 801b292:	b096      	sub	sp, #88	; 0x58
 801b294:	af00      	add	r7, sp, #0
 801b296:	60f8      	str	r0, [r7, #12]
 801b298:	460b      	mov	r3, r1
 801b29a:	607a      	str	r2, [r7, #4]
 801b29c:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	7d9b      	ldrb	r3, [r3, #22]
 801b2a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801b2a6:	2b30      	cmp	r3, #48	; 0x30
 801b2a8:	f000 80c2 	beq.w	801b430 <decode_static_field+0x1a0>
 801b2ac:	2b30      	cmp	r3, #48	; 0x30
 801b2ae:	f200 811a 	bhi.w	801b4e6 <decode_static_field+0x256>
 801b2b2:	2b20      	cmp	r3, #32
 801b2b4:	d01f      	beq.n	801b2f6 <decode_static_field+0x66>
 801b2b6:	2b20      	cmp	r3, #32
 801b2b8:	f200 8115 	bhi.w	801b4e6 <decode_static_field+0x256>
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d002      	beq.n	801b2c6 <decode_static_field+0x36>
 801b2c0:	2b10      	cmp	r3, #16
 801b2c2:	d008      	beq.n	801b2d6 <decode_static_field+0x46>
 801b2c4:	e10f      	b.n	801b4e6 <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 801b2c6:	7afb      	ldrb	r3, [r7, #11]
 801b2c8:	687a      	ldr	r2, [r7, #4]
 801b2ca:	4619      	mov	r1, r3
 801b2cc:	68f8      	ldr	r0, [r7, #12]
 801b2ce:	f7ff fee9 	bl	801b0a4 <decode_basic_field>
 801b2d2:	4603      	mov	r3, r0
 801b2d4:	e112      	b.n	801b4fc <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	6a1b      	ldr	r3, [r3, #32]
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d003      	beq.n	801b2e6 <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	6a1b      	ldr	r3, [r3, #32]
 801b2e2:	2201      	movs	r2, #1
 801b2e4:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 801b2e6:	7afb      	ldrb	r3, [r7, #11]
 801b2e8:	687a      	ldr	r2, [r7, #4]
 801b2ea:	4619      	mov	r1, r3
 801b2ec:	68f8      	ldr	r0, [r7, #12]
 801b2ee:	f7ff fed9 	bl	801b0a4 <decode_basic_field>
 801b2f2:	4603      	mov	r3, r0
 801b2f4:	e102      	b.n	801b4fc <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 801b2f6:	7afb      	ldrb	r3, [r7, #11]
 801b2f8:	2b02      	cmp	r3, #2
 801b2fa:	d16c      	bne.n	801b3d6 <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	7d9b      	ldrb	r3, [r3, #22]
 801b300:	f003 030f 	and.w	r3, r3, #15
 801b304:	2b05      	cmp	r3, #5
 801b306:	d866      	bhi.n	801b3d6 <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 801b308:	2301      	movs	r3, #1
 801b30a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	6a1b      	ldr	r3, [r3, #32]
 801b312:	653b      	str	r3, [r7, #80]	; 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	699b      	ldr	r3, [r3, #24]
 801b318:	687a      	ldr	r2, [r7, #4]
 801b31a:	8a52      	ldrh	r2, [r2, #18]
 801b31c:	4611      	mov	r1, r2
 801b31e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b320:	8812      	ldrh	r2, [r2, #0]
 801b322:	fb01 f202 	mul.w	r2, r1, r2
 801b326:	441a      	add	r2, r3
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 801b32c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b330:	4619      	mov	r1, r3
 801b332:	68f8      	ldr	r0, [r7, #12]
 801b334:	f7ff fe56 	bl	801afe4 <pb_make_string_substream>
 801b338:	4603      	mov	r3, r0
 801b33a:	f083 0301 	eor.w	r3, r3, #1
 801b33e:	b2db      	uxtb	r3, r3
 801b340:	2b00      	cmp	r3, #0
 801b342:	d01f      	beq.n	801b384 <decode_static_field+0xf4>
                    return false;
 801b344:	2300      	movs	r3, #0
 801b346:	e0d9      	b.n	801b4fc <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 801b348:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b34c:	687a      	ldr	r2, [r7, #4]
 801b34e:	21ff      	movs	r1, #255	; 0xff
 801b350:	4618      	mov	r0, r3
 801b352:	f7ff fea7 	bl	801b0a4 <decode_basic_field>
 801b356:	4603      	mov	r3, r0
 801b358:	f083 0301 	eor.w	r3, r3, #1
 801b35c:	b2db      	uxtb	r3, r3
 801b35e:	2b00      	cmp	r3, #0
 801b360:	d003      	beq.n	801b36a <decode_static_field+0xda>
                    {
                        status = false;
 801b362:	2300      	movs	r3, #0
 801b364:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 801b368:	e015      	b.n	801b396 <decode_static_field+0x106>
                    }
                    (*size)++;
 801b36a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b36c:	881b      	ldrh	r3, [r3, #0]
 801b36e:	3301      	adds	r3, #1
 801b370:	b29a      	uxth	r2, r3
 801b372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b374:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	69db      	ldr	r3, [r3, #28]
 801b37a:	687a      	ldr	r2, [r7, #4]
 801b37c:	8a52      	ldrh	r2, [r2, #18]
 801b37e:	441a      	add	r2, r3
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 801b384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b386:	2b00      	cmp	r3, #0
 801b388:	d005      	beq.n	801b396 <decode_static_field+0x106>
 801b38a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b38c:	881a      	ldrh	r2, [r3, #0]
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	8a9b      	ldrh	r3, [r3, #20]
 801b392:	429a      	cmp	r2, r3
 801b394:	d3d8      	bcc.n	801b348 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 801b396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d00b      	beq.n	801b3b4 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 801b39c:	68fb      	ldr	r3, [r7, #12]
 801b39e:	68db      	ldr	r3, [r3, #12]
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	d002      	beq.n	801b3aa <decode_static_field+0x11a>
 801b3a4:	68fb      	ldr	r3, [r7, #12]
 801b3a6:	68db      	ldr	r3, [r3, #12]
 801b3a8:	e000      	b.n	801b3ac <decode_static_field+0x11c>
 801b3aa:	4b56      	ldr	r3, [pc, #344]	; (801b504 <decode_static_field+0x274>)
 801b3ac:	68fa      	ldr	r2, [r7, #12]
 801b3ae:	60d3      	str	r3, [r2, #12]
 801b3b0:	2300      	movs	r3, #0
 801b3b2:	e0a3      	b.n	801b4fc <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 801b3b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b3b8:	4619      	mov	r1, r3
 801b3ba:	68f8      	ldr	r0, [r7, #12]
 801b3bc:	f7ff fe4c 	bl	801b058 <pb_close_string_substream>
 801b3c0:	4603      	mov	r3, r0
 801b3c2:	f083 0301 	eor.w	r3, r3, #1
 801b3c6:	b2db      	uxtb	r3, r3
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d001      	beq.n	801b3d0 <decode_static_field+0x140>
                    return false;
 801b3cc:	2300      	movs	r3, #0
 801b3ce:	e095      	b.n	801b4fc <decode_static_field+0x26c>

                return status;
 801b3d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b3d4:	e092      	b.n	801b4fc <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	6a1b      	ldr	r3, [r3, #32]
 801b3da:	64fb      	str	r3, [r7, #76]	; 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	699b      	ldr	r3, [r3, #24]
 801b3e0:	687a      	ldr	r2, [r7, #4]
 801b3e2:	8a52      	ldrh	r2, [r2, #18]
 801b3e4:	4611      	mov	r1, r2
 801b3e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b3e8:	8812      	ldrh	r2, [r2, #0]
 801b3ea:	fb01 f202 	mul.w	r2, r1, r2
 801b3ee:	441a      	add	r2, r3
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 801b3f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b3f6:	881b      	ldrh	r3, [r3, #0]
 801b3f8:	1c5a      	adds	r2, r3, #1
 801b3fa:	b291      	uxth	r1, r2
 801b3fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b3fe:	8011      	strh	r1, [r2, #0]
 801b400:	687a      	ldr	r2, [r7, #4]
 801b402:	8a92      	ldrh	r2, [r2, #20]
 801b404:	4293      	cmp	r3, r2
 801b406:	d30b      	bcc.n	801b420 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 801b408:	68fb      	ldr	r3, [r7, #12]
 801b40a:	68db      	ldr	r3, [r3, #12]
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	d002      	beq.n	801b416 <decode_static_field+0x186>
 801b410:	68fb      	ldr	r3, [r7, #12]
 801b412:	68db      	ldr	r3, [r3, #12]
 801b414:	e000      	b.n	801b418 <decode_static_field+0x188>
 801b416:	4b3b      	ldr	r3, [pc, #236]	; (801b504 <decode_static_field+0x274>)
 801b418:	68fa      	ldr	r2, [r7, #12]
 801b41a:	60d3      	str	r3, [r2, #12]
 801b41c:	2300      	movs	r3, #0
 801b41e:	e06d      	b.n	801b4fc <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 801b420:	7afb      	ldrb	r3, [r7, #11]
 801b422:	687a      	ldr	r2, [r7, #4]
 801b424:	4619      	mov	r1, r3
 801b426:	68f8      	ldr	r0, [r7, #12]
 801b428:	f7ff fe3c 	bl	801b0a4 <decode_basic_field>
 801b42c:	4603      	mov	r3, r0
 801b42e:	e065      	b.n	801b4fc <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	7d9b      	ldrb	r3, [r3, #22]
 801b434:	f003 030f 	and.w	r3, r3, #15
 801b438:	2b08      	cmp	r3, #8
 801b43a:	d005      	beq.n	801b448 <decode_static_field+0x1b8>
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	7d9b      	ldrb	r3, [r3, #22]
 801b440:	f003 030f 	and.w	r3, r3, #15
 801b444:	2b09      	cmp	r3, #9
 801b446:	d141      	bne.n	801b4cc <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	6a1b      	ldr	r3, [r3, #32]
 801b44c:	881a      	ldrh	r2, [r3, #0]
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 801b452:	429a      	cmp	r2, r3
 801b454:	d03a      	beq.n	801b4cc <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	69d8      	ldr	r0, [r3, #28]
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	8a5b      	ldrh	r3, [r3, #18]
 801b45e:	461a      	mov	r2, r3
 801b460:	2100      	movs	r1, #0
 801b462:	f002 f97d 	bl	801d760 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b46a:	689b      	ldr	r3, [r3, #8]
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d10a      	bne.n	801b486 <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b474:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 801b476:	2b00      	cmp	r3, #0
 801b478:	d105      	bne.n	801b486 <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b47e:	685b      	ldr	r3, [r3, #4]
 801b480:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 801b482:	2b00      	cmp	r3, #0
 801b484:	d022      	beq.n	801b4cc <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	69da      	ldr	r2, [r3, #28]
 801b48e:	f107 0314 	add.w	r3, r7, #20
 801b492:	4618      	mov	r0, r3
 801b494:	f7ff f935 	bl	801a702 <pb_field_iter_begin>
 801b498:	4603      	mov	r3, r0
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d016      	beq.n	801b4cc <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 801b49e:	f107 0314 	add.w	r3, r7, #20
 801b4a2:	4618      	mov	r0, r3
 801b4a4:	f000 fa4d 	bl	801b942 <pb_message_set_to_defaults>
 801b4a8:	4603      	mov	r3, r0
 801b4aa:	f083 0301 	eor.w	r3, r3, #1
 801b4ae:	b2db      	uxtb	r3, r3
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d00b      	beq.n	801b4cc <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 801b4b4:	68fb      	ldr	r3, [r7, #12]
 801b4b6:	68db      	ldr	r3, [r3, #12]
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	d002      	beq.n	801b4c2 <decode_static_field+0x232>
 801b4bc:	68fb      	ldr	r3, [r7, #12]
 801b4be:	68db      	ldr	r3, [r3, #12]
 801b4c0:	e000      	b.n	801b4c4 <decode_static_field+0x234>
 801b4c2:	4b11      	ldr	r3, [pc, #68]	; (801b508 <decode_static_field+0x278>)
 801b4c4:	68fa      	ldr	r2, [r7, #12]
 801b4c6:	60d3      	str	r3, [r2, #12]
 801b4c8:	2300      	movs	r3, #0
 801b4ca:	e017      	b.n	801b4fc <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	6a1b      	ldr	r3, [r3, #32]
 801b4d0:	687a      	ldr	r2, [r7, #4]
 801b4d2:	8a12      	ldrh	r2, [r2, #16]
 801b4d4:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 801b4d6:	7afb      	ldrb	r3, [r7, #11]
 801b4d8:	687a      	ldr	r2, [r7, #4]
 801b4da:	4619      	mov	r1, r3
 801b4dc:	68f8      	ldr	r0, [r7, #12]
 801b4de:	f7ff fde1 	bl	801b0a4 <decode_basic_field>
 801b4e2:	4603      	mov	r3, r0
 801b4e4:	e00a      	b.n	801b4fc <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 801b4e6:	68fb      	ldr	r3, [r7, #12]
 801b4e8:	68db      	ldr	r3, [r3, #12]
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d002      	beq.n	801b4f4 <decode_static_field+0x264>
 801b4ee:	68fb      	ldr	r3, [r7, #12]
 801b4f0:	68db      	ldr	r3, [r3, #12]
 801b4f2:	e000      	b.n	801b4f6 <decode_static_field+0x266>
 801b4f4:	4b05      	ldr	r3, [pc, #20]	; (801b50c <decode_static_field+0x27c>)
 801b4f6:	68fa      	ldr	r2, [r7, #12]
 801b4f8:	60d3      	str	r3, [r2, #12]
 801b4fa:	2300      	movs	r3, #0
    }
}
 801b4fc:	4618      	mov	r0, r3
 801b4fe:	3758      	adds	r7, #88	; 0x58
 801b500:	46bd      	mov	sp, r7
 801b502:	bd80      	pop	{r7, pc}
 801b504:	08022018 	.word	0x08022018
 801b508:	08022028 	.word	0x08022028
 801b50c:	08022004 	.word	0x08022004

0801b510 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 801b510:	b480      	push	{r7}
 801b512:	b085      	sub	sp, #20
 801b514:	af00      	add	r7, sp, #0
 801b516:	60f8      	str	r0, [r7, #12]
 801b518:	460b      	mov	r3, r1
 801b51a:	607a      	str	r2, [r7, #4]
 801b51c:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 801b51e:	68fb      	ldr	r3, [r7, #12]
 801b520:	68db      	ldr	r3, [r3, #12]
 801b522:	2b00      	cmp	r3, #0
 801b524:	d002      	beq.n	801b52c <decode_pointer_field+0x1c>
 801b526:	68fb      	ldr	r3, [r7, #12]
 801b528:	68db      	ldr	r3, [r3, #12]
 801b52a:	e000      	b.n	801b52e <decode_pointer_field+0x1e>
 801b52c:	4b04      	ldr	r3, [pc, #16]	; (801b540 <decode_pointer_field+0x30>)
 801b52e:	68fa      	ldr	r2, [r7, #12]
 801b530:	60d3      	str	r3, [r2, #12]
 801b532:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 801b534:	4618      	mov	r0, r3
 801b536:	3714      	adds	r7, #20
 801b538:	46bd      	mov	sp, r7
 801b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b53e:	4770      	bx	lr
 801b540:	08022040 	.word	0x08022040

0801b544 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 801b544:	b590      	push	{r4, r7, lr}
 801b546:	b097      	sub	sp, #92	; 0x5c
 801b548:	af00      	add	r7, sp, #0
 801b54a:	61f8      	str	r0, [r7, #28]
 801b54c:	460b      	mov	r3, r1
 801b54e:	617a      	str	r2, [r7, #20]
 801b550:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 801b552:	697b      	ldr	r3, [r7, #20]
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	68db      	ldr	r3, [r3, #12]
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d106      	bne.n	801b56a <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 801b55c:	7efb      	ldrb	r3, [r7, #27]
 801b55e:	4619      	mov	r1, r3
 801b560:	69f8      	ldr	r0, [r7, #28]
 801b562:	f7ff fc91 	bl	801ae88 <pb_skip_field>
 801b566:	4603      	mov	r3, r0
 801b568:	e070      	b.n	801b64c <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 801b56a:	7efb      	ldrb	r3, [r7, #27]
 801b56c:	2b02      	cmp	r3, #2
 801b56e:	d145      	bne.n	801b5fc <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 801b570:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b574:	4619      	mov	r1, r3
 801b576:	69f8      	ldr	r0, [r7, #28]
 801b578:	f7ff fd34 	bl	801afe4 <pb_make_string_substream>
 801b57c:	4603      	mov	r3, r0
 801b57e:	f083 0301 	eor.w	r3, r3, #1
 801b582:	b2db      	uxtb	r3, r3
 801b584:	2b00      	cmp	r3, #0
 801b586:	d001      	beq.n	801b58c <decode_callback_field+0x48>
            return false;
 801b588:	2300      	movs	r3, #0
 801b58a:	e05f      	b.n	801b64c <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 801b58c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b58e:	657b      	str	r3, [r7, #84]	; 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 801b590:	697b      	ldr	r3, [r7, #20]
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	68db      	ldr	r3, [r3, #12]
 801b596:	f107 0044 	add.w	r0, r7, #68	; 0x44
 801b59a:	697a      	ldr	r2, [r7, #20]
 801b59c:	2100      	movs	r1, #0
 801b59e:	4798      	blx	r3
 801b5a0:	4603      	mov	r3, r0
 801b5a2:	f083 0301 	eor.w	r3, r3, #1
 801b5a6:	b2db      	uxtb	r3, r3
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	d010      	beq.n	801b5ce <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 801b5ac:	69fb      	ldr	r3, [r7, #28]
 801b5ae:	68db      	ldr	r3, [r3, #12]
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	d002      	beq.n	801b5ba <decode_callback_field+0x76>
 801b5b4:	69fb      	ldr	r3, [r7, #28]
 801b5b6:	68db      	ldr	r3, [r3, #12]
 801b5b8:	e005      	b.n	801b5c6 <decode_callback_field+0x82>
 801b5ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d001      	beq.n	801b5c4 <decode_callback_field+0x80>
 801b5c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b5c2:	e000      	b.n	801b5c6 <decode_callback_field+0x82>
 801b5c4:	4b23      	ldr	r3, [pc, #140]	; (801b654 <decode_callback_field+0x110>)
 801b5c6:	69fa      	ldr	r2, [r7, #28]
 801b5c8:	60d3      	str	r3, [r2, #12]
                return false;
 801b5ca:	2300      	movs	r3, #0
 801b5cc:	e03e      	b.n	801b64c <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 801b5ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d003      	beq.n	801b5dc <decode_callback_field+0x98>
 801b5d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b5d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b5d8:	429a      	cmp	r2, r3
 801b5da:	d8d7      	bhi.n	801b58c <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 801b5dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b5e0:	4619      	mov	r1, r3
 801b5e2:	69f8      	ldr	r0, [r7, #28]
 801b5e4:	f7ff fd38 	bl	801b058 <pb_close_string_substream>
 801b5e8:	4603      	mov	r3, r0
 801b5ea:	f083 0301 	eor.w	r3, r3, #1
 801b5ee:	b2db      	uxtb	r3, r3
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	d001      	beq.n	801b5f8 <decode_callback_field+0xb4>
            return false;
 801b5f4:	2300      	movs	r3, #0
 801b5f6:	e029      	b.n	801b64c <decode_callback_field+0x108>

        return true;
 801b5f8:	2301      	movs	r3, #1
 801b5fa:	e027      	b.n	801b64c <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 801b5fc:	230a      	movs	r3, #10
 801b5fe:	627b      	str	r3, [r7, #36]	; 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 801b600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b604:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b608:	7ef9      	ldrb	r1, [r7, #27]
 801b60a:	69f8      	ldr	r0, [r7, #28]
 801b60c:	f7ff fc7e 	bl	801af0c <read_raw_value>
 801b610:	4603      	mov	r3, r0
 801b612:	f083 0301 	eor.w	r3, r3, #1
 801b616:	b2db      	uxtb	r3, r3
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d001      	beq.n	801b620 <decode_callback_field+0xdc>
            return false;
 801b61c:	2300      	movs	r3, #0
 801b61e:	e015      	b.n	801b64c <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 801b620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b622:	463b      	mov	r3, r7
 801b624:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801b628:	4618      	mov	r0, r3
 801b62a:	f7ff fa87 	bl	801ab3c <pb_istream_from_buffer>
 801b62e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 801b632:	463b      	mov	r3, r7
 801b634:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b636:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 801b63a:	697b      	ldr	r3, [r7, #20]
 801b63c:	681b      	ldr	r3, [r3, #0]
 801b63e:	68db      	ldr	r3, [r3, #12]
 801b640:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b644:	697a      	ldr	r2, [r7, #20]
 801b646:	2100      	movs	r1, #0
 801b648:	4798      	blx	r3
 801b64a:	4603      	mov	r3, r0
    }
}
 801b64c:	4618      	mov	r0, r3
 801b64e:	375c      	adds	r7, #92	; 0x5c
 801b650:	46bd      	mov	sp, r7
 801b652:	bd90      	pop	{r4, r7, pc}
 801b654:	08022054 	.word	0x08022054

0801b658 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 801b658:	b580      	push	{r7, lr}
 801b65a:	b084      	sub	sp, #16
 801b65c:	af00      	add	r7, sp, #0
 801b65e:	60f8      	str	r0, [r7, #12]
 801b660:	460b      	mov	r3, r1
 801b662:	607a      	str	r2, [r7, #4]
 801b664:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	7d9b      	ldrb	r3, [r3, #22]
 801b66a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801b66e:	2b80      	cmp	r3, #128	; 0x80
 801b670:	d00e      	beq.n	801b690 <decode_field+0x38>
 801b672:	2b80      	cmp	r3, #128	; 0x80
 801b674:	d81c      	bhi.n	801b6b0 <decode_field+0x58>
 801b676:	2b00      	cmp	r3, #0
 801b678:	d002      	beq.n	801b680 <decode_field+0x28>
 801b67a:	2b40      	cmp	r3, #64	; 0x40
 801b67c:	d010      	beq.n	801b6a0 <decode_field+0x48>
 801b67e:	e017      	b.n	801b6b0 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 801b680:	7afb      	ldrb	r3, [r7, #11]
 801b682:	687a      	ldr	r2, [r7, #4]
 801b684:	4619      	mov	r1, r3
 801b686:	68f8      	ldr	r0, [r7, #12]
 801b688:	f7ff fe02 	bl	801b290 <decode_static_field>
 801b68c:	4603      	mov	r3, r0
 801b68e:	e01a      	b.n	801b6c6 <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 801b690:	7afb      	ldrb	r3, [r7, #11]
 801b692:	687a      	ldr	r2, [r7, #4]
 801b694:	4619      	mov	r1, r3
 801b696:	68f8      	ldr	r0, [r7, #12]
 801b698:	f7ff ff3a 	bl	801b510 <decode_pointer_field>
 801b69c:	4603      	mov	r3, r0
 801b69e:	e012      	b.n	801b6c6 <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 801b6a0:	7afb      	ldrb	r3, [r7, #11]
 801b6a2:	687a      	ldr	r2, [r7, #4]
 801b6a4:	4619      	mov	r1, r3
 801b6a6:	68f8      	ldr	r0, [r7, #12]
 801b6a8:	f7ff ff4c 	bl	801b544 <decode_callback_field>
 801b6ac:	4603      	mov	r3, r0
 801b6ae:	e00a      	b.n	801b6c6 <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 801b6b0:	68fb      	ldr	r3, [r7, #12]
 801b6b2:	68db      	ldr	r3, [r3, #12]
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d002      	beq.n	801b6be <decode_field+0x66>
 801b6b8:	68fb      	ldr	r3, [r7, #12]
 801b6ba:	68db      	ldr	r3, [r3, #12]
 801b6bc:	e000      	b.n	801b6c0 <decode_field+0x68>
 801b6be:	4b04      	ldr	r3, [pc, #16]	; (801b6d0 <decode_field+0x78>)
 801b6c0:	68fa      	ldr	r2, [r7, #12]
 801b6c2:	60d3      	str	r3, [r2, #12]
 801b6c4:	2300      	movs	r3, #0
    }
}
 801b6c6:	4618      	mov	r0, r3
 801b6c8:	3710      	adds	r7, #16
 801b6ca:	46bd      	mov	sp, r7
 801b6cc:	bd80      	pop	{r7, pc}
 801b6ce:	bf00      	nop
 801b6d0:	08022004 	.word	0x08022004

0801b6d4 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 801b6d4:	b580      	push	{r7, lr}
 801b6d6:	b08e      	sub	sp, #56	; 0x38
 801b6d8:	af00      	add	r7, sp, #0
 801b6da:	60f8      	str	r0, [r7, #12]
 801b6dc:	60b9      	str	r1, [r7, #8]
 801b6de:	607a      	str	r2, [r7, #4]
 801b6e0:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 801b6e2:	f107 0310 	add.w	r3, r7, #16
 801b6e6:	68b9      	ldr	r1, [r7, #8]
 801b6e8:	4618      	mov	r0, r3
 801b6ea:	f7ff f823 	bl	801a734 <pb_field_iter_begin_extension>
 801b6ee:	4603      	mov	r3, r0
 801b6f0:	f083 0301 	eor.w	r3, r3, #1
 801b6f4:	b2db      	uxtb	r3, r3
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d00b      	beq.n	801b712 <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 801b6fa:	68fb      	ldr	r3, [r7, #12]
 801b6fc:	68db      	ldr	r3, [r3, #12]
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	d002      	beq.n	801b708 <default_extension_decoder+0x34>
 801b702:	68fb      	ldr	r3, [r7, #12]
 801b704:	68db      	ldr	r3, [r3, #12]
 801b706:	e000      	b.n	801b70a <default_extension_decoder+0x36>
 801b708:	4b0e      	ldr	r3, [pc, #56]	; (801b744 <default_extension_decoder+0x70>)
 801b70a:	68fa      	ldr	r2, [r7, #12]
 801b70c:	60d3      	str	r3, [r2, #12]
 801b70e:	2300      	movs	r3, #0
 801b710:	e014      	b.n	801b73c <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 801b712:	8c3b      	ldrh	r3, [r7, #32]
 801b714:	461a      	mov	r2, r3
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	4293      	cmp	r3, r2
 801b71a:	d102      	bne.n	801b722 <default_extension_decoder+0x4e>
 801b71c:	697b      	ldr	r3, [r7, #20]
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d101      	bne.n	801b726 <default_extension_decoder+0x52>
        return true;
 801b722:	2301      	movs	r3, #1
 801b724:	e00a      	b.n	801b73c <default_extension_decoder+0x68>

    extension->found = true;
 801b726:	68bb      	ldr	r3, [r7, #8]
 801b728:	2201      	movs	r2, #1
 801b72a:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 801b72c:	f107 0210 	add.w	r2, r7, #16
 801b730:	78fb      	ldrb	r3, [r7, #3]
 801b732:	4619      	mov	r1, r3
 801b734:	68f8      	ldr	r0, [r7, #12]
 801b736:	f7ff ff8f 	bl	801b658 <decode_field>
 801b73a:	4603      	mov	r3, r0
}
 801b73c:	4618      	mov	r0, r3
 801b73e:	3738      	adds	r7, #56	; 0x38
 801b740:	46bd      	mov	sp, r7
 801b742:	bd80      	pop	{r7, pc}
 801b744:	08022064 	.word	0x08022064

0801b748 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 801b748:	b590      	push	{r4, r7, lr}
 801b74a:	b087      	sub	sp, #28
 801b74c:	af00      	add	r7, sp, #0
 801b74e:	60f8      	str	r0, [r7, #12]
 801b750:	60b9      	str	r1, [r7, #8]
 801b752:	603b      	str	r3, [r7, #0]
 801b754:	4613      	mov	r3, r2
 801b756:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 801b758:	68fb      	ldr	r3, [r7, #12]
 801b75a:	689b      	ldr	r3, [r3, #8]
 801b75c:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 801b75e:	e022      	b.n	801b7a6 <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 801b760:	683b      	ldr	r3, [r7, #0]
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	681b      	ldr	r3, [r3, #0]
 801b766:	2b00      	cmp	r3, #0
 801b768:	d00a      	beq.n	801b780 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 801b76a:	683b      	ldr	r3, [r7, #0]
 801b76c:	681b      	ldr	r3, [r3, #0]
 801b76e:	681c      	ldr	r4, [r3, #0]
 801b770:	79fb      	ldrb	r3, [r7, #7]
 801b772:	68ba      	ldr	r2, [r7, #8]
 801b774:	6839      	ldr	r1, [r7, #0]
 801b776:	68f8      	ldr	r0, [r7, #12]
 801b778:	47a0      	blx	r4
 801b77a:	4603      	mov	r3, r0
 801b77c:	75fb      	strb	r3, [r7, #23]
 801b77e:	e007      	b.n	801b790 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 801b780:	79fb      	ldrb	r3, [r7, #7]
 801b782:	68ba      	ldr	r2, [r7, #8]
 801b784:	6839      	ldr	r1, [r7, #0]
 801b786:	68f8      	ldr	r0, [r7, #12]
 801b788:	f7ff ffa4 	bl	801b6d4 <default_extension_decoder>
 801b78c:	4603      	mov	r3, r0
 801b78e:	75fb      	strb	r3, [r7, #23]

        if (!status)
 801b790:	7dfb      	ldrb	r3, [r7, #23]
 801b792:	f083 0301 	eor.w	r3, r3, #1
 801b796:	b2db      	uxtb	r3, r3
 801b798:	2b00      	cmp	r3, #0
 801b79a:	d001      	beq.n	801b7a0 <decode_extension+0x58>
            return false;
 801b79c:	2300      	movs	r3, #0
 801b79e:	e00b      	b.n	801b7b8 <decode_extension+0x70>
        
        extension = extension->next;
 801b7a0:	683b      	ldr	r3, [r7, #0]
 801b7a2:	689b      	ldr	r3, [r3, #8]
 801b7a4:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 801b7a6:	683b      	ldr	r3, [r7, #0]
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	d004      	beq.n	801b7b6 <decode_extension+0x6e>
 801b7ac:	68fb      	ldr	r3, [r7, #12]
 801b7ae:	689b      	ldr	r3, [r3, #8]
 801b7b0:	693a      	ldr	r2, [r7, #16]
 801b7b2:	429a      	cmp	r2, r3
 801b7b4:	d0d4      	beq.n	801b760 <decode_extension+0x18>
    }
    
    return true;
 801b7b6:	2301      	movs	r3, #1
}
 801b7b8:	4618      	mov	r0, r3
 801b7ba:	371c      	adds	r7, #28
 801b7bc:	46bd      	mov	sp, r7
 801b7be:	bd90      	pop	{r4, r7, pc}

0801b7c0 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 801b7c0:	b580      	push	{r7, lr}
 801b7c2:	b08e      	sub	sp, #56	; 0x38
 801b7c4:	af00      	add	r7, sp, #0
 801b7c6:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	7d9b      	ldrb	r3, [r3, #22]
 801b7cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 801b7d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b7d4:	f003 030f 	and.w	r3, r3, #15
 801b7d8:	2b0a      	cmp	r3, #10
 801b7da:	d124      	bne.n	801b826 <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	69db      	ldr	r3, [r3, #28]
 801b7e0:	681b      	ldr	r3, [r3, #0]
 801b7e2:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 801b7e4:	e01b      	b.n	801b81e <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 801b7e6:	f107 0308 	add.w	r3, r7, #8
 801b7ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b7ec:	4618      	mov	r0, r3
 801b7ee:	f7fe ffa1 	bl	801a734 <pb_field_iter_begin_extension>
 801b7f2:	4603      	mov	r3, r0
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	d00f      	beq.n	801b818 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 801b7f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7fa:	2200      	movs	r2, #0
 801b7fc:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 801b7fe:	f107 0308 	add.w	r3, r7, #8
 801b802:	4618      	mov	r0, r3
 801b804:	f000 f89d 	bl	801b942 <pb_message_set_to_defaults>
 801b808:	4603      	mov	r3, r0
 801b80a:	f083 0301 	eor.w	r3, r3, #1
 801b80e:	b2db      	uxtb	r3, r3
 801b810:	2b00      	cmp	r3, #0
 801b812:	d001      	beq.n	801b818 <pb_field_set_to_default+0x58>
                    return false;
 801b814:	2300      	movs	r3, #0
 801b816:	e090      	b.n	801b93a <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 801b818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b81a:	689b      	ldr	r3, [r3, #8]
 801b81c:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 801b81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b820:	2b00      	cmp	r3, #0
 801b822:	d1e0      	bne.n	801b7e6 <pb_field_set_to_default+0x26>
 801b824:	e088      	b.n	801b938 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 801b826:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b82a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801b82e:	2b00      	cmp	r3, #0
 801b830:	d166      	bne.n	801b900 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 801b832:	2301      	movs	r3, #1
 801b834:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 801b838:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b83c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801b840:	2b10      	cmp	r3, #16
 801b842:	d108      	bne.n	801b856 <pb_field_set_to_default+0x96>
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	6a1b      	ldr	r3, [r3, #32]
 801b848:	2b00      	cmp	r3, #0
 801b84a:	d004      	beq.n	801b856 <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 801b84c:	687b      	ldr	r3, [r7, #4]
 801b84e:	6a1b      	ldr	r3, [r3, #32]
 801b850:	2200      	movs	r2, #0
 801b852:	701a      	strb	r2, [r3, #0]
 801b854:	e012      	b.n	801b87c <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 801b856:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b85a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801b85e:	2b20      	cmp	r3, #32
 801b860:	d005      	beq.n	801b86e <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 801b862:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b866:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 801b86a:	2b30      	cmp	r3, #48	; 0x30
 801b86c:	d106      	bne.n	801b87c <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	6a1b      	ldr	r3, [r3, #32]
 801b872:	2200      	movs	r2, #0
 801b874:	801a      	strh	r2, [r3, #0]
            init_data = false;
 801b876:	2300      	movs	r3, #0
 801b878:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        if (init_data)
 801b87c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801b880:	2b00      	cmp	r3, #0
 801b882:	d059      	beq.n	801b938 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	7d9b      	ldrb	r3, [r3, #22]
 801b888:	f003 030f 	and.w	r3, r3, #15
 801b88c:	2b08      	cmp	r3, #8
 801b88e:	d005      	beq.n	801b89c <pb_field_set_to_default+0xdc>
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	7d9b      	ldrb	r3, [r3, #22]
 801b894:	f003 030f 	and.w	r3, r3, #15
 801b898:	2b09      	cmp	r3, #9
 801b89a:	d128      	bne.n	801b8ee <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b8a0:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	d10a      	bne.n	801b8bc <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b8aa:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d105      	bne.n	801b8bc <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b8b4:	685b      	ldr	r3, [r3, #4]
 801b8b6:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	d018      	beq.n	801b8ee <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	69da      	ldr	r2, [r3, #28]
 801b8c4:	f107 0308 	add.w	r3, r7, #8
 801b8c8:	4618      	mov	r0, r3
 801b8ca:	f7fe ff1a 	bl	801a702 <pb_field_iter_begin>
 801b8ce:	4603      	mov	r3, r0
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d030      	beq.n	801b936 <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 801b8d4:	f107 0308 	add.w	r3, r7, #8
 801b8d8:	4618      	mov	r0, r3
 801b8da:	f000 f832 	bl	801b942 <pb_message_set_to_defaults>
 801b8de:	4603      	mov	r3, r0
 801b8e0:	f083 0301 	eor.w	r3, r3, #1
 801b8e4:	b2db      	uxtb	r3, r3
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d025      	beq.n	801b936 <pb_field_set_to_default+0x176>
                        return false;
 801b8ea:	2300      	movs	r3, #0
 801b8ec:	e025      	b.n	801b93a <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	69d8      	ldr	r0, [r3, #28]
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	8a5b      	ldrh	r3, [r3, #18]
 801b8f6:	461a      	mov	r2, r3
 801b8f8:	2100      	movs	r1, #0
 801b8fa:	f001 ff31 	bl	801d760 <memset>
 801b8fe:	e01b      	b.n	801b938 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 801b900:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b904:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801b908:	2b80      	cmp	r3, #128	; 0x80
 801b90a:	d115      	bne.n	801b938 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	699b      	ldr	r3, [r3, #24]
 801b910:	2200      	movs	r2, #0
 801b912:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 801b914:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b918:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801b91c:	2b20      	cmp	r3, #32
 801b91e:	d005      	beq.n	801b92c <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 801b920:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b924:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 801b928:	2b30      	cmp	r3, #48	; 0x30
 801b92a:	d105      	bne.n	801b938 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	6a1b      	ldr	r3, [r3, #32]
 801b930:	2200      	movs	r2, #0
 801b932:	801a      	strh	r2, [r3, #0]
 801b934:	e000      	b.n	801b938 <pb_field_set_to_default+0x178>
            {
 801b936:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 801b938:	2301      	movs	r3, #1
}
 801b93a:	4618      	mov	r0, r3
 801b93c:	3738      	adds	r7, #56	; 0x38
 801b93e:	46bd      	mov	sp, r7
 801b940:	bd80      	pop	{r7, pc}

0801b942 <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 801b942:	b590      	push	{r4, r7, lr}
 801b944:	b08d      	sub	sp, #52	; 0x34
 801b946:	af00      	add	r7, sp, #0
 801b948:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 801b94a:	f107 0320 	add.w	r3, r7, #32
 801b94e:	2200      	movs	r2, #0
 801b950:	601a      	str	r2, [r3, #0]
 801b952:	605a      	str	r2, [r3, #4]
 801b954:	609a      	str	r2, [r3, #8]
 801b956:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 801b958:	2300      	movs	r3, #0
 801b95a:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 801b95c:	2300      	movs	r3, #0
 801b95e:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 801b960:	697b      	ldr	r3, [r7, #20]
 801b962:	681b      	ldr	r3, [r3, #0]
 801b964:	689b      	ldr	r3, [r3, #8]
 801b966:	2b00      	cmp	r3, #0
 801b968:	d020      	beq.n	801b9ac <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 801b96a:	697b      	ldr	r3, [r7, #20]
 801b96c:	681b      	ldr	r3, [r3, #0]
 801b96e:	6899      	ldr	r1, [r3, #8]
 801b970:	463b      	mov	r3, r7
 801b972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b976:	4618      	mov	r0, r3
 801b978:	f7ff f8e0 	bl	801ab3c <pb_istream_from_buffer>
 801b97c:	f107 0420 	add.w	r4, r7, #32
 801b980:	463b      	mov	r3, r7
 801b982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b984:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 801b988:	f107 031a 	add.w	r3, r7, #26
 801b98c:	f107 021c 	add.w	r2, r7, #28
 801b990:	f107 011b 	add.w	r1, r7, #27
 801b994:	f107 0020 	add.w	r0, r7, #32
 801b998:	f7ff fa47 	bl	801ae2a <pb_decode_tag>
 801b99c:	4603      	mov	r3, r0
 801b99e:	f083 0301 	eor.w	r3, r3, #1
 801b9a2:	b2db      	uxtb	r3, r3
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d001      	beq.n	801b9ac <pb_message_set_to_defaults+0x6a>
            return false;
 801b9a8:	2300      	movs	r3, #0
 801b9aa:	e043      	b.n	801ba34 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 801b9ac:	6978      	ldr	r0, [r7, #20]
 801b9ae:	f7ff ff07 	bl	801b7c0 <pb_field_set_to_default>
 801b9b2:	4603      	mov	r3, r0
 801b9b4:	f083 0301 	eor.w	r3, r3, #1
 801b9b8:	b2db      	uxtb	r3, r3
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	d001      	beq.n	801b9c2 <pb_message_set_to_defaults+0x80>
            return false;
 801b9be:	2300      	movs	r3, #0
 801b9c0:	e038      	b.n	801ba34 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 801b9c2:	69fb      	ldr	r3, [r7, #28]
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	d02e      	beq.n	801ba26 <pb_message_set_to_defaults+0xe4>
 801b9c8:	697b      	ldr	r3, [r7, #20]
 801b9ca:	8a1b      	ldrh	r3, [r3, #16]
 801b9cc:	461a      	mov	r2, r3
 801b9ce:	69fb      	ldr	r3, [r7, #28]
 801b9d0:	429a      	cmp	r2, r3
 801b9d2:	d128      	bne.n	801ba26 <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 801b9d4:	7ef9      	ldrb	r1, [r7, #27]
 801b9d6:	f107 0320 	add.w	r3, r7, #32
 801b9da:	697a      	ldr	r2, [r7, #20]
 801b9dc:	4618      	mov	r0, r3
 801b9de:	f7ff fe3b 	bl	801b658 <decode_field>
 801b9e2:	4603      	mov	r3, r0
 801b9e4:	f083 0301 	eor.w	r3, r3, #1
 801b9e8:	b2db      	uxtb	r3, r3
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	d001      	beq.n	801b9f2 <pb_message_set_to_defaults+0xb0>
                return false;
 801b9ee:	2300      	movs	r3, #0
 801b9f0:	e020      	b.n	801ba34 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 801b9f2:	f107 031a 	add.w	r3, r7, #26
 801b9f6:	f107 021c 	add.w	r2, r7, #28
 801b9fa:	f107 011b 	add.w	r1, r7, #27
 801b9fe:	f107 0020 	add.w	r0, r7, #32
 801ba02:	f7ff fa12 	bl	801ae2a <pb_decode_tag>
 801ba06:	4603      	mov	r3, r0
 801ba08:	f083 0301 	eor.w	r3, r3, #1
 801ba0c:	b2db      	uxtb	r3, r3
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d001      	beq.n	801ba16 <pb_message_set_to_defaults+0xd4>
                return false;
 801ba12:	2300      	movs	r3, #0
 801ba14:	e00e      	b.n	801ba34 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 801ba16:	697b      	ldr	r3, [r7, #20]
 801ba18:	6a1b      	ldr	r3, [r3, #32]
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d003      	beq.n	801ba26 <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 801ba1e:	697b      	ldr	r3, [r7, #20]
 801ba20:	6a1b      	ldr	r3, [r3, #32]
 801ba22:	2200      	movs	r2, #0
 801ba24:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 801ba26:	6978      	ldr	r0, [r7, #20]
 801ba28:	f7fe feb4 	bl	801a794 <pb_field_iter_next>
 801ba2c:	4603      	mov	r3, r0
 801ba2e:	2b00      	cmp	r3, #0
 801ba30:	d1bc      	bne.n	801b9ac <pb_message_set_to_defaults+0x6a>

    return true;
 801ba32:	2301      	movs	r3, #1
}
 801ba34:	4618      	mov	r0, r3
 801ba36:	3734      	adds	r7, #52	; 0x34
 801ba38:	46bd      	mov	sp, r7
 801ba3a:	bd90      	pop	{r4, r7, pc}

0801ba3c <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 801ba3c:	b580      	push	{r7, lr}
 801ba3e:	b09a      	sub	sp, #104	; 0x68
 801ba40:	af00      	add	r7, sp, #0
 801ba42:	60f8      	str	r0, [r7, #12]
 801ba44:	60b9      	str	r1, [r7, #8]
 801ba46:	607a      	str	r2, [r7, #4]
 801ba48:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 801ba4a:	2300      	movs	r3, #0
 801ba4c:	667b      	str	r3, [r7, #100]	; 0x64
    pb_extension_t *extensions = NULL;
 801ba4e:	2300      	movs	r3, #0
 801ba50:	663b      	str	r3, [r7, #96]	; 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 801ba52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ba56:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    pb_size_t fixed_count_size = 0;
 801ba5a:	2300      	movs	r3, #0
 801ba5c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    pb_size_t fixed_count_total_size = 0;
 801ba60:	2300      	movs	r3, #0
 801ba62:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 801ba66:	2300      	movs	r3, #0
 801ba68:	643b      	str	r3, [r7, #64]	; 0x40
 801ba6a:	2300      	movs	r3, #0
 801ba6c:	647b      	str	r3, [r7, #68]	; 0x44
    const uint32_t allbits = ~(uint32_t)0;
 801ba6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ba72:	657b      	str	r3, [r7, #84]	; 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 801ba74:	f107 0318 	add.w	r3, r7, #24
 801ba78:	687a      	ldr	r2, [r7, #4]
 801ba7a:	68b9      	ldr	r1, [r7, #8]
 801ba7c:	4618      	mov	r0, r3
 801ba7e:	f7fe fe40 	bl	801a702 <pb_field_iter_begin>
 801ba82:	4603      	mov	r3, r0
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	f000 8102 	beq.w	801bc8e <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 801ba8a:	683b      	ldr	r3, [r7, #0]
 801ba8c:	f003 0301 	and.w	r3, r3, #1
 801ba90:	2b00      	cmp	r3, #0
 801ba92:	f040 80fc 	bne.w	801bc8e <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 801ba96:	f107 0318 	add.w	r3, r7, #24
 801ba9a:	4618      	mov	r0, r3
 801ba9c:	f7ff ff51 	bl	801b942 <pb_message_set_to_defaults>
 801baa0:	4603      	mov	r3, r0
 801baa2:	f083 0301 	eor.w	r3, r3, #1
 801baa6:	b2db      	uxtb	r3, r3
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	f000 80f0 	beq.w	801bc8e <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 801baae:	68fb      	ldr	r3, [r7, #12]
 801bab0:	68db      	ldr	r3, [r3, #12]
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	d002      	beq.n	801babc <pb_decode_inner+0x80>
 801bab6:	68fb      	ldr	r3, [r7, #12]
 801bab8:	68db      	ldr	r3, [r3, #12]
 801baba:	e000      	b.n	801babe <pb_decode_inner+0x82>
 801babc:	4b99      	ldr	r3, [pc, #612]	; (801bd24 <pb_decode_inner+0x2e8>)
 801babe:	68fa      	ldr	r2, [r7, #12]
 801bac0:	60d3      	str	r3, [r2, #12]
 801bac2:	2300      	movs	r3, #0
 801bac4:	e16d      	b.n	801bda2 <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 801bac6:	f107 0312 	add.w	r3, r7, #18
 801baca:	f107 0214 	add.w	r2, r7, #20
 801bace:	f107 0113 	add.w	r1, r7, #19
 801bad2:	68f8      	ldr	r0, [r7, #12]
 801bad4:	f7ff f9a9 	bl	801ae2a <pb_decode_tag>
 801bad8:	4603      	mov	r3, r0
 801bada:	f083 0301 	eor.w	r3, r3, #1
 801bade:	b2db      	uxtb	r3, r3
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	d005      	beq.n	801baf0 <pb_decode_inner+0xb4>
        {
            if (eof)
 801bae4:	7cbb      	ldrb	r3, [r7, #18]
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	f040 80d7 	bne.w	801bc9a <pb_decode_inner+0x25e>
                break;
            else
                return false;
 801baec:	2300      	movs	r3, #0
 801baee:	e158      	b.n	801bda2 <pb_decode_inner+0x366>
        }

        if (tag == 0)
 801baf0:	697b      	ldr	r3, [r7, #20]
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	d111      	bne.n	801bb1a <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 801baf6:	683b      	ldr	r3, [r7, #0]
 801baf8:	f003 0304 	and.w	r3, r3, #4
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	f040 80ce 	bne.w	801bc9e <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 801bb02:	68fb      	ldr	r3, [r7, #12]
 801bb04:	68db      	ldr	r3, [r3, #12]
 801bb06:	2b00      	cmp	r3, #0
 801bb08:	d002      	beq.n	801bb10 <pb_decode_inner+0xd4>
 801bb0a:	68fb      	ldr	r3, [r7, #12]
 801bb0c:	68db      	ldr	r3, [r3, #12]
 801bb0e:	e000      	b.n	801bb12 <pb_decode_inner+0xd6>
 801bb10:	4b85      	ldr	r3, [pc, #532]	; (801bd28 <pb_decode_inner+0x2ec>)
 801bb12:	68fa      	ldr	r2, [r7, #12]
 801bb14:	60d3      	str	r3, [r2, #12]
 801bb16:	2300      	movs	r3, #0
 801bb18:	e143      	b.n	801bda2 <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 801bb1a:	697a      	ldr	r2, [r7, #20]
 801bb1c:	f107 0318 	add.w	r3, r7, #24
 801bb20:	4611      	mov	r1, r2
 801bb22:	4618      	mov	r0, r3
 801bb24:	f7fe fe4b 	bl	801a7be <pb_field_iter_find>
 801bb28:	4603      	mov	r3, r0
 801bb2a:	f083 0301 	eor.w	r3, r3, #1
 801bb2e:	b2db      	uxtb	r3, r3
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d105      	bne.n	801bb40 <pb_decode_inner+0x104>
 801bb34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801bb38:	f003 030f 	and.w	r3, r3, #15
 801bb3c:	2b0a      	cmp	r3, #10
 801bb3e:	d13c      	bne.n	801bbba <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 801bb40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d112      	bne.n	801bb6c <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 801bb46:	f107 0318 	add.w	r3, r7, #24
 801bb4a:	4618      	mov	r0, r3
 801bb4c:	f7fe fe8d 	bl	801a86a <pb_field_iter_find_extension>
 801bb50:	4603      	mov	r3, r0
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	d004      	beq.n	801bb60 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 801bb56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	663b      	str	r3, [r7, #96]	; 0x60
                    extension_range_start = iter.tag;
 801bb5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801bb5e:	667b      	str	r3, [r7, #100]	; 0x64
                }

                if (!extensions)
 801bb60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	d102      	bne.n	801bb6c <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 801bb66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bb6a:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            if (tag >= extension_range_start)
 801bb6c:	697b      	ldr	r3, [r7, #20]
 801bb6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801bb70:	429a      	cmp	r2, r3
 801bb72:	d815      	bhi.n	801bba0 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 801bb74:	68fb      	ldr	r3, [r7, #12]
 801bb76:	689b      	ldr	r3, [r3, #8]
 801bb78:	64fb      	str	r3, [r7, #76]	; 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 801bb7a:	6979      	ldr	r1, [r7, #20]
 801bb7c:	7cfa      	ldrb	r2, [r7, #19]
 801bb7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bb80:	68f8      	ldr	r0, [r7, #12]
 801bb82:	f7ff fde1 	bl	801b748 <decode_extension>
 801bb86:	4603      	mov	r3, r0
 801bb88:	f083 0301 	eor.w	r3, r3, #1
 801bb8c:	b2db      	uxtb	r3, r3
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d001      	beq.n	801bb96 <pb_decode_inner+0x15a>
                    return false;
 801bb92:	2300      	movs	r3, #0
 801bb94:	e105      	b.n	801bda2 <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 801bb96:	68fb      	ldr	r3, [r7, #12]
 801bb98:	689b      	ldr	r3, [r3, #8]
 801bb9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801bb9c:	429a      	cmp	r2, r3
 801bb9e:	d173      	bne.n	801bc88 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 801bba0:	7cfb      	ldrb	r3, [r7, #19]
 801bba2:	4619      	mov	r1, r3
 801bba4:	68f8      	ldr	r0, [r7, #12]
 801bba6:	f7ff f96f 	bl	801ae88 <pb_skip_field>
 801bbaa:	4603      	mov	r3, r0
 801bbac:	f083 0301 	eor.w	r3, r3, #1
 801bbb0:	b2db      	uxtb	r3, r3
 801bbb2:	2b00      	cmp	r3, #0
 801bbb4:	d06a      	beq.n	801bc8c <pb_decode_inner+0x250>
                return false;
 801bbb6:	2300      	movs	r3, #0
 801bbb8:	e0f3      	b.n	801bda2 <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 801bbba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801bbbe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801bbc2:	2b20      	cmp	r3, #32
 801bbc4:	d12e      	bne.n	801bc24 <pb_decode_inner+0x1e8>
 801bbc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bbc8:	f107 0318 	add.w	r3, r7, #24
 801bbcc:	3314      	adds	r3, #20
 801bbce:	429a      	cmp	r2, r3
 801bbd0:	d128      	bne.n	801bc24 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 801bbd2:	8c3b      	ldrh	r3, [r7, #32]
 801bbd4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801bbd8:	429a      	cmp	r2, r3
 801bbda:	d020      	beq.n	801bc1e <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 801bbdc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801bbe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bbe4:	4293      	cmp	r3, r2
 801bbe6:	d011      	beq.n	801bc0c <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 801bbe8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 801bbec:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801bbf0:	429a      	cmp	r2, r3
 801bbf2:	d00b      	beq.n	801bc0c <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 801bbf4:	68fb      	ldr	r3, [r7, #12]
 801bbf6:	68db      	ldr	r3, [r3, #12]
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	d002      	beq.n	801bc02 <pb_decode_inner+0x1c6>
 801bbfc:	68fb      	ldr	r3, [r7, #12]
 801bbfe:	68db      	ldr	r3, [r3, #12]
 801bc00:	e000      	b.n	801bc04 <pb_decode_inner+0x1c8>
 801bc02:	4b4a      	ldr	r3, [pc, #296]	; (801bd2c <pb_decode_inner+0x2f0>)
 801bc04:	68fa      	ldr	r2, [r7, #12]
 801bc06:	60d3      	str	r3, [r2, #12]
 801bc08:	2300      	movs	r3, #0
 801bc0a:	e0ca      	b.n	801bda2 <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 801bc0c:	8c3b      	ldrh	r3, [r7, #32]
 801bc0e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                fixed_count_size = 0;
 801bc12:	2300      	movs	r3, #0
 801bc14:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                fixed_count_total_size = iter.array_size;
 801bc18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801bc1a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }

            iter.pSize = &fixed_count_size;
 801bc1e:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 801bc22:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 801bc24:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801bc28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	d11c      	bne.n	801bc6a <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 801bc30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc32:	2b3f      	cmp	r3, #63	; 0x3f
 801bc34:	d819      	bhi.n	801bc6a <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 801bc36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc38:	f003 031f 	and.w	r3, r3, #31
 801bc3c:	2201      	movs	r2, #1
 801bc3e:	fa02 f303 	lsl.w	r3, r2, r3
 801bc42:	653b      	str	r3, [r7, #80]	; 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 801bc44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc46:	095b      	lsrs	r3, r3, #5
 801bc48:	b29b      	uxth	r3, r3
 801bc4a:	009b      	lsls	r3, r3, #2
 801bc4c:	3368      	adds	r3, #104	; 0x68
 801bc4e:	443b      	add	r3, r7
 801bc50:	f853 2c28 	ldr.w	r2, [r3, #-40]
 801bc54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc56:	095b      	lsrs	r3, r3, #5
 801bc58:	b29b      	uxth	r3, r3
 801bc5a:	4619      	mov	r1, r3
 801bc5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bc5e:	431a      	orrs	r2, r3
 801bc60:	008b      	lsls	r3, r1, #2
 801bc62:	3368      	adds	r3, #104	; 0x68
 801bc64:	443b      	add	r3, r7
 801bc66:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 801bc6a:	7cfb      	ldrb	r3, [r7, #19]
 801bc6c:	f107 0218 	add.w	r2, r7, #24
 801bc70:	4619      	mov	r1, r3
 801bc72:	68f8      	ldr	r0, [r7, #12]
 801bc74:	f7ff fcf0 	bl	801b658 <decode_field>
 801bc78:	4603      	mov	r3, r0
 801bc7a:	f083 0301 	eor.w	r3, r3, #1
 801bc7e:	b2db      	uxtb	r3, r3
 801bc80:	2b00      	cmp	r3, #0
 801bc82:	d004      	beq.n	801bc8e <pb_decode_inner+0x252>
            return false;
 801bc84:	2300      	movs	r3, #0
 801bc86:	e08c      	b.n	801bda2 <pb_decode_inner+0x366>
                    continue;
 801bc88:	bf00      	nop
 801bc8a:	e000      	b.n	801bc8e <pb_decode_inner+0x252>
            continue;
 801bc8c:	bf00      	nop
    while (stream->bytes_left)
 801bc8e:	68fb      	ldr	r3, [r7, #12]
 801bc90:	689b      	ldr	r3, [r3, #8]
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	f47f af17 	bne.w	801bac6 <pb_decode_inner+0x8a>
 801bc98:	e002      	b.n	801bca0 <pb_decode_inner+0x264>
                break;
 801bc9a:	bf00      	nop
 801bc9c:	e000      	b.n	801bca0 <pb_decode_inner+0x264>
            break;
 801bc9e:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 801bca0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801bca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bca8:	4293      	cmp	r3, r2
 801bcaa:	d011      	beq.n	801bcd0 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 801bcac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 801bcb0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801bcb4:	429a      	cmp	r2, r3
 801bcb6:	d00b      	beq.n	801bcd0 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 801bcb8:	68fb      	ldr	r3, [r7, #12]
 801bcba:	68db      	ldr	r3, [r3, #12]
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d002      	beq.n	801bcc6 <pb_decode_inner+0x28a>
 801bcc0:	68fb      	ldr	r3, [r7, #12]
 801bcc2:	68db      	ldr	r3, [r3, #12]
 801bcc4:	e000      	b.n	801bcc8 <pb_decode_inner+0x28c>
 801bcc6:	4b19      	ldr	r3, [pc, #100]	; (801bd2c <pb_decode_inner+0x2f0>)
 801bcc8:	68fa      	ldr	r2, [r7, #12]
 801bcca:	60d3      	str	r3, [r2, #12]
 801bccc:	2300      	movs	r3, #0
 801bcce:	e068      	b.n	801bda2 <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 801bcd0:	69bb      	ldr	r3, [r7, #24]
 801bcd2:	8a5b      	ldrh	r3, [r3, #18]
 801bcd4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        if (req_field_count > 0)
 801bcd8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d05f      	beq.n	801bda0 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 801bce0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801bce4:	2b40      	cmp	r3, #64	; 0x40
 801bce6:	d902      	bls.n	801bcee <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 801bce8:	2340      	movs	r3, #64	; 0x40
 801bcea:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 801bcee:	2300      	movs	r3, #0
 801bcf0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 801bcf4:	e023      	b.n	801bd3e <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 801bcf6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 801bcfa:	009b      	lsls	r3, r3, #2
 801bcfc:	3368      	adds	r3, #104	; 0x68
 801bcfe:	443b      	add	r3, r7
 801bd00:	f853 3c28 	ldr.w	r3, [r3, #-40]
 801bd04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bd06:	429a      	cmp	r2, r3
 801bd08:	d014      	beq.n	801bd34 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 801bd0a:	68fb      	ldr	r3, [r7, #12]
 801bd0c:	68db      	ldr	r3, [r3, #12]
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	d002      	beq.n	801bd18 <pb_decode_inner+0x2dc>
 801bd12:	68fb      	ldr	r3, [r7, #12]
 801bd14:	68db      	ldr	r3, [r3, #12]
 801bd16:	e000      	b.n	801bd1a <pb_decode_inner+0x2de>
 801bd18:	4b05      	ldr	r3, [pc, #20]	; (801bd30 <pb_decode_inner+0x2f4>)
 801bd1a:	68fa      	ldr	r2, [r7, #12]
 801bd1c:	60d3      	str	r3, [r2, #12]
 801bd1e:	2300      	movs	r3, #0
 801bd20:	e03f      	b.n	801bda2 <pb_decode_inner+0x366>
 801bd22:	bf00      	nop
 801bd24:	08022028 	.word	0x08022028
 801bd28:	08022078 	.word	0x08022078
 801bd2c:	08022084 	.word	0x08022084
 801bd30:	080220a8 	.word	0x080220a8
            for (i = 0; i < (req_field_count >> 5); i++)
 801bd34:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 801bd38:	3301      	adds	r3, #1
 801bd3a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 801bd3e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801bd42:	095b      	lsrs	r3, r3, #5
 801bd44:	b29b      	uxth	r3, r3
 801bd46:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 801bd4a:	429a      	cmp	r2, r3
 801bd4c:	d3d3      	bcc.n	801bcf6 <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 801bd4e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801bd52:	f003 031f 	and.w	r3, r3, #31
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d022      	beq.n	801bda0 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 801bd5a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801bd5e:	095b      	lsrs	r3, r3, #5
 801bd60:	b29b      	uxth	r3, r3
 801bd62:	009b      	lsls	r3, r3, #2
 801bd64:	3368      	adds	r3, #104	; 0x68
 801bd66:	443b      	add	r3, r7
 801bd68:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 801bd6c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801bd70:	b2db      	uxtb	r3, r3
 801bd72:	f003 031f 	and.w	r3, r3, #31
 801bd76:	b2db      	uxtb	r3, r3
 801bd78:	f1c3 0320 	rsb	r3, r3, #32
 801bd7c:	b2db      	uxtb	r3, r3
 801bd7e:	4619      	mov	r1, r3
 801bd80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bd82:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 801bd84:	429a      	cmp	r2, r3
 801bd86:	d00b      	beq.n	801bda0 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 801bd88:	68fb      	ldr	r3, [r7, #12]
 801bd8a:	68db      	ldr	r3, [r3, #12]
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	d002      	beq.n	801bd96 <pb_decode_inner+0x35a>
 801bd90:	68fb      	ldr	r3, [r7, #12]
 801bd92:	68db      	ldr	r3, [r3, #12]
 801bd94:	e000      	b.n	801bd98 <pb_decode_inner+0x35c>
 801bd96:	4b05      	ldr	r3, [pc, #20]	; (801bdac <pb_decode_inner+0x370>)
 801bd98:	68fa      	ldr	r2, [r7, #12]
 801bd9a:	60d3      	str	r3, [r2, #12]
 801bd9c:	2300      	movs	r3, #0
 801bd9e:	e000      	b.n	801bda2 <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 801bda0:	2301      	movs	r3, #1
}
 801bda2:	4618      	mov	r0, r3
 801bda4:	3768      	adds	r7, #104	; 0x68
 801bda6:	46bd      	mov	sp, r7
 801bda8:	bd80      	pop	{r7, pc}
 801bdaa:	bf00      	nop
 801bdac:	080220a8 	.word	0x080220a8

0801bdb0 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 801bdb0:	b580      	push	{r7, lr}
 801bdb2:	b086      	sub	sp, #24
 801bdb4:	af00      	add	r7, sp, #0
 801bdb6:	60f8      	str	r0, [r7, #12]
 801bdb8:	60b9      	str	r1, [r7, #8]
 801bdba:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 801bdbc:	2300      	movs	r3, #0
 801bdbe:	687a      	ldr	r2, [r7, #4]
 801bdc0:	68b9      	ldr	r1, [r7, #8]
 801bdc2:	68f8      	ldr	r0, [r7, #12]
 801bdc4:	f7ff fe3a 	bl	801ba3c <pb_decode_inner>
 801bdc8:	4603      	mov	r3, r0
 801bdca:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 801bdcc:	7dfb      	ldrb	r3, [r7, #23]
}
 801bdce:	4618      	mov	r0, r3
 801bdd0:	3718      	adds	r7, #24
 801bdd2:	46bd      	mov	sp, r7
 801bdd4:	bd80      	pop	{r7, pc}

0801bdd6 <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 801bdd6:	b580      	push	{r7, lr}
 801bdd8:	b084      	sub	sp, #16
 801bdda:	af00      	add	r7, sp, #0
 801bddc:	6078      	str	r0, [r7, #4]
 801bdde:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 801bde0:	f107 030c 	add.w	r3, r7, #12
 801bde4:	4619      	mov	r1, r3
 801bde6:	6878      	ldr	r0, [r7, #4]
 801bde8:	f7fe ff70 	bl	801accc <pb_decode_varint32>
 801bdec:	4603      	mov	r3, r0
 801bdee:	f083 0301 	eor.w	r3, r3, #1
 801bdf2:	b2db      	uxtb	r3, r3
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	d001      	beq.n	801bdfc <pb_decode_bool+0x26>
        return false;
 801bdf8:	2300      	movs	r3, #0
 801bdfa:	e008      	b.n	801be0e <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 801bdfc:	68fb      	ldr	r3, [r7, #12]
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	bf14      	ite	ne
 801be02:	2301      	movne	r3, #1
 801be04:	2300      	moveq	r3, #0
 801be06:	b2da      	uxtb	r2, r3
 801be08:	683b      	ldr	r3, [r7, #0]
 801be0a:	701a      	strb	r2, [r3, #0]
    return true;
 801be0c:	2301      	movs	r3, #1
}
 801be0e:	4618      	mov	r0, r3
 801be10:	3710      	adds	r7, #16
 801be12:	46bd      	mov	sp, r7
 801be14:	bd80      	pop	{r7, pc}

0801be16 <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 801be16:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801be1a:	b084      	sub	sp, #16
 801be1c:	af00      	add	r7, sp, #0
 801be1e:	6078      	str	r0, [r7, #4]
 801be20:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 801be22:	f107 0308 	add.w	r3, r7, #8
 801be26:	4619      	mov	r1, r3
 801be28:	6878      	ldr	r0, [r7, #4]
 801be2a:	f7fe ff5f 	bl	801acec <pb_decode_varint>
 801be2e:	4603      	mov	r3, r0
 801be30:	f083 0301 	eor.w	r3, r3, #1
 801be34:	b2db      	uxtb	r3, r3
 801be36:	2b00      	cmp	r3, #0
 801be38:	d001      	beq.n	801be3e <pb_decode_svarint+0x28>
        return false;
 801be3a:	2300      	movs	r3, #0
 801be3c:	e029      	b.n	801be92 <pb_decode_svarint+0x7c>
    
    if (value & 1)
 801be3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801be42:	f002 0401 	and.w	r4, r2, #1
 801be46:	2500      	movs	r5, #0
 801be48:	ea54 0305 	orrs.w	r3, r4, r5
 801be4c:	d013      	beq.n	801be76 <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 801be4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801be52:	f04f 0200 	mov.w	r2, #0
 801be56:	f04f 0300 	mov.w	r3, #0
 801be5a:	0842      	lsrs	r2, r0, #1
 801be5c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801be60:	084b      	lsrs	r3, r1, #1
 801be62:	ea6f 0802 	mvn.w	r8, r2
 801be66:	ea6f 0903 	mvn.w	r9, r3
 801be6a:	4642      	mov	r2, r8
 801be6c:	464b      	mov	r3, r9
 801be6e:	6839      	ldr	r1, [r7, #0]
 801be70:	e9c1 2300 	strd	r2, r3, [r1]
 801be74:	e00c      	b.n	801be90 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 801be76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801be7a:	f04f 0200 	mov.w	r2, #0
 801be7e:	f04f 0300 	mov.w	r3, #0
 801be82:	0842      	lsrs	r2, r0, #1
 801be84:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801be88:	084b      	lsrs	r3, r1, #1
 801be8a:	6839      	ldr	r1, [r7, #0]
 801be8c:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 801be90:	2301      	movs	r3, #1
}
 801be92:	4618      	mov	r0, r3
 801be94:	3710      	adds	r7, #16
 801be96:	46bd      	mov	sp, r7
 801be98:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801be9c <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 801be9c:	b580      	push	{r7, lr}
 801be9e:	b084      	sub	sp, #16
 801bea0:	af00      	add	r7, sp, #0
 801bea2:	6078      	str	r0, [r7, #4]
 801bea4:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 801bea6:	f107 030c 	add.w	r3, r7, #12
 801beaa:	2204      	movs	r2, #4
 801beac:	4619      	mov	r1, r3
 801beae:	6878      	ldr	r0, [r7, #4]
 801beb0:	f7fe fd92 	bl	801a9d8 <pb_read>
 801beb4:	4603      	mov	r3, r0
 801beb6:	f083 0301 	eor.w	r3, r3, #1
 801beba:	b2db      	uxtb	r3, r3
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	d001      	beq.n	801bec4 <pb_decode_fixed32+0x28>
        return false;
 801bec0:	2300      	movs	r3, #0
 801bec2:	e003      	b.n	801becc <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 801bec4:	68fa      	ldr	r2, [r7, #12]
 801bec6:	683b      	ldr	r3, [r7, #0]
 801bec8:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 801beca:	2301      	movs	r3, #1
}
 801becc:	4618      	mov	r0, r3
 801bece:	3710      	adds	r7, #16
 801bed0:	46bd      	mov	sp, r7
 801bed2:	bd80      	pop	{r7, pc}

0801bed4 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 801bed4:	b580      	push	{r7, lr}
 801bed6:	b084      	sub	sp, #16
 801bed8:	af00      	add	r7, sp, #0
 801beda:	6078      	str	r0, [r7, #4]
 801bedc:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 801bede:	f107 0308 	add.w	r3, r7, #8
 801bee2:	2208      	movs	r2, #8
 801bee4:	4619      	mov	r1, r3
 801bee6:	6878      	ldr	r0, [r7, #4]
 801bee8:	f7fe fd76 	bl	801a9d8 <pb_read>
 801beec:	4603      	mov	r3, r0
 801beee:	f083 0301 	eor.w	r3, r3, #1
 801bef2:	b2db      	uxtb	r3, r3
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d001      	beq.n	801befc <pb_decode_fixed64+0x28>
        return false;
 801bef8:	2300      	movs	r3, #0
 801befa:	e005      	b.n	801bf08 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 801befc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801bf00:	6839      	ldr	r1, [r7, #0]
 801bf02:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 801bf06:	2301      	movs	r3, #1
}
 801bf08:	4618      	mov	r0, r3
 801bf0a:	3710      	adds	r7, #16
 801bf0c:	46bd      	mov	sp, r7
 801bf0e:	bd80      	pop	{r7, pc}

0801bf10 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801bf10:	b580      	push	{r7, lr}
 801bf12:	b082      	sub	sp, #8
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	6078      	str	r0, [r7, #4]
 801bf18:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 801bf1a:	683b      	ldr	r3, [r7, #0]
 801bf1c:	69db      	ldr	r3, [r3, #28]
 801bf1e:	4619      	mov	r1, r3
 801bf20:	6878      	ldr	r0, [r7, #4]
 801bf22:	f7ff ff58 	bl	801bdd6 <pb_decode_bool>
 801bf26:	4603      	mov	r3, r0
}
 801bf28:	4618      	mov	r0, r3
 801bf2a:	3708      	adds	r7, #8
 801bf2c:	46bd      	mov	sp, r7
 801bf2e:	bd80      	pop	{r7, pc}

0801bf30 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801bf30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bf34:	b094      	sub	sp, #80	; 0x50
 801bf36:	af00      	add	r7, sp, #0
 801bf38:	6278      	str	r0, [r7, #36]	; 0x24
 801bf3a:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 801bf3c:	6a3b      	ldr	r3, [r7, #32]
 801bf3e:	7d9b      	ldrb	r3, [r3, #22]
 801bf40:	f003 030f 	and.w	r3, r3, #15
 801bf44:	2b02      	cmp	r3, #2
 801bf46:	d179      	bne.n	801c03c <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 801bf48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bf4c:	4619      	mov	r1, r3
 801bf4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bf50:	f7fe fecc 	bl	801acec <pb_decode_varint>
 801bf54:	4603      	mov	r3, r0
 801bf56:	f083 0301 	eor.w	r3, r3, #1
 801bf5a:	b2db      	uxtb	r3, r3
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	d001      	beq.n	801bf64 <pb_dec_varint+0x34>
            return false;
 801bf60:	2300      	movs	r3, #0
 801bf62:	e107      	b.n	801c174 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 801bf64:	6a3b      	ldr	r3, [r7, #32]
 801bf66:	8a5b      	ldrh	r3, [r3, #18]
 801bf68:	2b08      	cmp	r3, #8
 801bf6a:	d10a      	bne.n	801bf82 <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 801bf6c:	6a3b      	ldr	r3, [r7, #32]
 801bf6e:	69d9      	ldr	r1, [r3, #28]
 801bf70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801bf74:	e9c1 2300 	strd	r2, r3, [r1]
 801bf78:	e9d1 2300 	ldrd	r2, r3, [r1]
 801bf7c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 801bf80:	e046      	b.n	801c010 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 801bf82:	6a3b      	ldr	r3, [r7, #32]
 801bf84:	8a5b      	ldrh	r3, [r3, #18]
 801bf86:	2b04      	cmp	r3, #4
 801bf88:	d10e      	bne.n	801bfa8 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 801bf8a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801bf8e:	6a3b      	ldr	r3, [r7, #32]
 801bf90:	69db      	ldr	r3, [r3, #28]
 801bf92:	4602      	mov	r2, r0
 801bf94:	601a      	str	r2, [r3, #0]
 801bf96:	681b      	ldr	r3, [r3, #0]
 801bf98:	2200      	movs	r2, #0
 801bf9a:	613b      	str	r3, [r7, #16]
 801bf9c:	617a      	str	r2, [r7, #20]
 801bf9e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801bfa2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801bfa6:	e033      	b.n	801c010 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 801bfa8:	6a3b      	ldr	r3, [r7, #32]
 801bfaa:	8a5b      	ldrh	r3, [r3, #18]
 801bfac:	2b02      	cmp	r3, #2
 801bfae:	d10f      	bne.n	801bfd0 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 801bfb0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801bfb4:	6a3b      	ldr	r3, [r7, #32]
 801bfb6:	69db      	ldr	r3, [r3, #28]
 801bfb8:	b282      	uxth	r2, r0
 801bfba:	801a      	strh	r2, [r3, #0]
 801bfbc:	881b      	ldrh	r3, [r3, #0]
 801bfbe:	b29b      	uxth	r3, r3
 801bfc0:	2200      	movs	r2, #0
 801bfc2:	60bb      	str	r3, [r7, #8]
 801bfc4:	60fa      	str	r2, [r7, #12]
 801bfc6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801bfca:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801bfce:	e01f      	b.n	801c010 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 801bfd0:	6a3b      	ldr	r3, [r7, #32]
 801bfd2:	8a5b      	ldrh	r3, [r3, #18]
 801bfd4:	2b01      	cmp	r3, #1
 801bfd6:	d10f      	bne.n	801bff8 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 801bfd8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801bfdc:	6a3b      	ldr	r3, [r7, #32]
 801bfde:	69db      	ldr	r3, [r3, #28]
 801bfe0:	b2c2      	uxtb	r2, r0
 801bfe2:	701a      	strb	r2, [r3, #0]
 801bfe4:	781b      	ldrb	r3, [r3, #0]
 801bfe6:	b2db      	uxtb	r3, r3
 801bfe8:	2200      	movs	r2, #0
 801bfea:	603b      	str	r3, [r7, #0]
 801bfec:	607a      	str	r2, [r7, #4]
 801bfee:	e9d7 3400 	ldrd	r3, r4, [r7]
 801bff2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801bff6:	e00b      	b.n	801c010 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 801bff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bffa:	68db      	ldr	r3, [r3, #12]
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	d002      	beq.n	801c006 <pb_dec_varint+0xd6>
 801c000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c002:	68db      	ldr	r3, [r3, #12]
 801c004:	e000      	b.n	801c008 <pb_dec_varint+0xd8>
 801c006:	4b5e      	ldr	r3, [pc, #376]	; (801c180 <pb_dec_varint+0x250>)
 801c008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c00a:	60d3      	str	r3, [r2, #12]
 801c00c:	2300      	movs	r3, #0
 801c00e:	e0b1      	b.n	801c174 <pb_dec_varint+0x244>

        if (clamped != value)
 801c010:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801c014:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801c018:	4299      	cmp	r1, r3
 801c01a:	bf08      	it	eq
 801c01c:	4290      	cmpeq	r0, r2
 801c01e:	d00b      	beq.n	801c038 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 801c020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c022:	68db      	ldr	r3, [r3, #12]
 801c024:	2b00      	cmp	r3, #0
 801c026:	d002      	beq.n	801c02e <pb_dec_varint+0xfe>
 801c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c02a:	68db      	ldr	r3, [r3, #12]
 801c02c:	e000      	b.n	801c030 <pb_dec_varint+0x100>
 801c02e:	4b55      	ldr	r3, [pc, #340]	; (801c184 <pb_dec_varint+0x254>)
 801c030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c032:	60d3      	str	r3, [r2, #12]
 801c034:	2300      	movs	r3, #0
 801c036:	e09d      	b.n	801c174 <pb_dec_varint+0x244>

        return true;
 801c038:	2301      	movs	r3, #1
 801c03a:	e09b      	b.n	801c174 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 801c03c:	6a3b      	ldr	r3, [r7, #32]
 801c03e:	7d9b      	ldrb	r3, [r3, #22]
 801c040:	f003 030f 	and.w	r3, r3, #15
 801c044:	2b03      	cmp	r3, #3
 801c046:	d10d      	bne.n	801c064 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 801c048:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c04c:	4619      	mov	r1, r3
 801c04e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c050:	f7ff fee1 	bl	801be16 <pb_decode_svarint>
 801c054:	4603      	mov	r3, r0
 801c056:	f083 0301 	eor.w	r3, r3, #1
 801c05a:	b2db      	uxtb	r3, r3
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	d022      	beq.n	801c0a6 <pb_dec_varint+0x176>
                return false;
 801c060:	2300      	movs	r3, #0
 801c062:	e087      	b.n	801c174 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 801c064:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c068:	4619      	mov	r1, r3
 801c06a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c06c:	f7fe fe3e 	bl	801acec <pb_decode_varint>
 801c070:	4603      	mov	r3, r0
 801c072:	f083 0301 	eor.w	r3, r3, #1
 801c076:	b2db      	uxtb	r3, r3
 801c078:	2b00      	cmp	r3, #0
 801c07a:	d001      	beq.n	801c080 <pb_dec_varint+0x150>
                return false;
 801c07c:	2300      	movs	r3, #0
 801c07e:	e079      	b.n	801c174 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 801c080:	6a3b      	ldr	r3, [r7, #32]
 801c082:	8a5b      	ldrh	r3, [r3, #18]
 801c084:	2b08      	cmp	r3, #8
 801c086:	d104      	bne.n	801c092 <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 801c088:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801c08c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801c090:	e009      	b.n	801c0a6 <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 801c092:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801c096:	4613      	mov	r3, r2
 801c098:	17da      	asrs	r2, r3, #31
 801c09a:	61bb      	str	r3, [r7, #24]
 801c09c:	61fa      	str	r2, [r7, #28]
 801c09e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801c0a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 801c0a6:	6a3b      	ldr	r3, [r7, #32]
 801c0a8:	8a5b      	ldrh	r3, [r3, #18]
 801c0aa:	2b08      	cmp	r3, #8
 801c0ac:	d10a      	bne.n	801c0c4 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 801c0ae:	6a3b      	ldr	r3, [r7, #32]
 801c0b0:	69d9      	ldr	r1, [r3, #28]
 801c0b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801c0b6:	e9c1 2300 	strd	r2, r3, [r1]
 801c0ba:	e9d1 2300 	ldrd	r2, r3, [r1]
 801c0be:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 801c0c2:	e042      	b.n	801c14a <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 801c0c4:	6a3b      	ldr	r3, [r7, #32]
 801c0c6:	8a5b      	ldrh	r3, [r3, #18]
 801c0c8:	2b04      	cmp	r3, #4
 801c0ca:	d10c      	bne.n	801c0e6 <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 801c0cc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801c0d0:	6a3b      	ldr	r3, [r7, #32]
 801c0d2:	69db      	ldr	r3, [r3, #28]
 801c0d4:	4602      	mov	r2, r0
 801c0d6:	601a      	str	r2, [r3, #0]
 801c0d8:	681b      	ldr	r3, [r3, #0]
 801c0da:	17da      	asrs	r2, r3, #31
 801c0dc:	469a      	mov	sl, r3
 801c0de:	4693      	mov	fp, r2
 801c0e0:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
 801c0e4:	e031      	b.n	801c14a <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 801c0e6:	6a3b      	ldr	r3, [r7, #32]
 801c0e8:	8a5b      	ldrh	r3, [r3, #18]
 801c0ea:	2b02      	cmp	r3, #2
 801c0ec:	d10e      	bne.n	801c10c <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 801c0ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801c0f2:	6a3b      	ldr	r3, [r7, #32]
 801c0f4:	69db      	ldr	r3, [r3, #28]
 801c0f6:	b202      	sxth	r2, r0
 801c0f8:	801a      	strh	r2, [r3, #0]
 801c0fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c0fe:	b21b      	sxth	r3, r3
 801c100:	17da      	asrs	r2, r3, #31
 801c102:	4698      	mov	r8, r3
 801c104:	4691      	mov	r9, r2
 801c106:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
 801c10a:	e01e      	b.n	801c14a <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 801c10c:	6a3b      	ldr	r3, [r7, #32]
 801c10e:	8a5b      	ldrh	r3, [r3, #18]
 801c110:	2b01      	cmp	r3, #1
 801c112:	d10e      	bne.n	801c132 <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 801c114:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801c118:	6a3b      	ldr	r3, [r7, #32]
 801c11a:	69db      	ldr	r3, [r3, #28]
 801c11c:	b242      	sxtb	r2, r0
 801c11e:	701a      	strb	r2, [r3, #0]
 801c120:	f993 3000 	ldrsb.w	r3, [r3]
 801c124:	b25b      	sxtb	r3, r3
 801c126:	17da      	asrs	r2, r3, #31
 801c128:	461c      	mov	r4, r3
 801c12a:	4615      	mov	r5, r2
 801c12c:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 801c130:	e00b      	b.n	801c14a <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 801c132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c134:	68db      	ldr	r3, [r3, #12]
 801c136:	2b00      	cmp	r3, #0
 801c138:	d002      	beq.n	801c140 <pb_dec_varint+0x210>
 801c13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c13c:	68db      	ldr	r3, [r3, #12]
 801c13e:	e000      	b.n	801c142 <pb_dec_varint+0x212>
 801c140:	4b0f      	ldr	r3, [pc, #60]	; (801c180 <pb_dec_varint+0x250>)
 801c142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c144:	60d3      	str	r3, [r2, #12]
 801c146:	2300      	movs	r3, #0
 801c148:	e014      	b.n	801c174 <pb_dec_varint+0x244>

        if (clamped != svalue)
 801c14a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801c14e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801c152:	4299      	cmp	r1, r3
 801c154:	bf08      	it	eq
 801c156:	4290      	cmpeq	r0, r2
 801c158:	d00b      	beq.n	801c172 <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 801c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c15c:	68db      	ldr	r3, [r3, #12]
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d002      	beq.n	801c168 <pb_dec_varint+0x238>
 801c162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c164:	68db      	ldr	r3, [r3, #12]
 801c166:	e000      	b.n	801c16a <pb_dec_varint+0x23a>
 801c168:	4b06      	ldr	r3, [pc, #24]	; (801c184 <pb_dec_varint+0x254>)
 801c16a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c16c:	60d3      	str	r3, [r2, #12]
 801c16e:	2300      	movs	r3, #0
 801c170:	e000      	b.n	801c174 <pb_dec_varint+0x244>

        return true;
 801c172:	2301      	movs	r3, #1
    }
}
 801c174:	4618      	mov	r0, r3
 801c176:	3750      	adds	r7, #80	; 0x50
 801c178:	46bd      	mov	sp, r7
 801c17a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801c17e:	bf00      	nop
 801c180:	080220c0 	.word	0x080220c0
 801c184:	080220d4 	.word	0x080220d4

0801c188 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801c188:	b580      	push	{r7, lr}
 801c18a:	b086      	sub	sp, #24
 801c18c:	af00      	add	r7, sp, #0
 801c18e:	6078      	str	r0, [r7, #4]
 801c190:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 801c192:	f107 030c 	add.w	r3, r7, #12
 801c196:	4619      	mov	r1, r3
 801c198:	6878      	ldr	r0, [r7, #4]
 801c19a:	f7fe fd97 	bl	801accc <pb_decode_varint32>
 801c19e:	4603      	mov	r3, r0
 801c1a0:	f083 0301 	eor.w	r3, r3, #1
 801c1a4:	b2db      	uxtb	r3, r3
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	d001      	beq.n	801c1ae <pb_dec_bytes+0x26>
        return false;
 801c1aa:	2300      	movs	r3, #0
 801c1ac:	e055      	b.n	801c25a <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 801c1ae:	68fb      	ldr	r3, [r7, #12]
 801c1b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c1b4:	d30b      	bcc.n	801c1ce <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	68db      	ldr	r3, [r3, #12]
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d002      	beq.n	801c1c4 <pb_dec_bytes+0x3c>
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	68db      	ldr	r3, [r3, #12]
 801c1c2:	e000      	b.n	801c1c6 <pb_dec_bytes+0x3e>
 801c1c4:	4b27      	ldr	r3, [pc, #156]	; (801c264 <pb_dec_bytes+0xdc>)
 801c1c6:	687a      	ldr	r2, [r7, #4]
 801c1c8:	60d3      	str	r3, [r2, #12]
 801c1ca:	2300      	movs	r3, #0
 801c1cc:	e045      	b.n	801c25a <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 801c1ce:	68fb      	ldr	r3, [r7, #12]
 801c1d0:	3302      	adds	r3, #2
 801c1d2:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 801c1d4:	68fb      	ldr	r3, [r7, #12]
 801c1d6:	697a      	ldr	r2, [r7, #20]
 801c1d8:	429a      	cmp	r2, r3
 801c1da:	d20b      	bcs.n	801c1f4 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	68db      	ldr	r3, [r3, #12]
 801c1e0:	2b00      	cmp	r3, #0
 801c1e2:	d002      	beq.n	801c1ea <pb_dec_bytes+0x62>
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	68db      	ldr	r3, [r3, #12]
 801c1e8:	e000      	b.n	801c1ec <pb_dec_bytes+0x64>
 801c1ea:	4b1f      	ldr	r3, [pc, #124]	; (801c268 <pb_dec_bytes+0xe0>)
 801c1ec:	687a      	ldr	r2, [r7, #4]
 801c1ee:	60d3      	str	r3, [r2, #12]
 801c1f0:	2300      	movs	r3, #0
 801c1f2:	e032      	b.n	801c25a <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 801c1f4:	683b      	ldr	r3, [r7, #0]
 801c1f6:	7d9b      	ldrb	r3, [r3, #22]
 801c1f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c1fc:	2b80      	cmp	r3, #128	; 0x80
 801c1fe:	d10b      	bne.n	801c218 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	68db      	ldr	r3, [r3, #12]
 801c204:	2b00      	cmp	r3, #0
 801c206:	d002      	beq.n	801c20e <pb_dec_bytes+0x86>
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	68db      	ldr	r3, [r3, #12]
 801c20c:	e000      	b.n	801c210 <pb_dec_bytes+0x88>
 801c20e:	4b17      	ldr	r3, [pc, #92]	; (801c26c <pb_dec_bytes+0xe4>)
 801c210:	687a      	ldr	r2, [r7, #4]
 801c212:	60d3      	str	r3, [r2, #12]
 801c214:	2300      	movs	r3, #0
 801c216:	e020      	b.n	801c25a <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 801c218:	683b      	ldr	r3, [r7, #0]
 801c21a:	8a5b      	ldrh	r3, [r3, #18]
 801c21c:	461a      	mov	r2, r3
 801c21e:	697b      	ldr	r3, [r7, #20]
 801c220:	4293      	cmp	r3, r2
 801c222:	d90b      	bls.n	801c23c <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	68db      	ldr	r3, [r3, #12]
 801c228:	2b00      	cmp	r3, #0
 801c22a:	d002      	beq.n	801c232 <pb_dec_bytes+0xaa>
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	68db      	ldr	r3, [r3, #12]
 801c230:	e000      	b.n	801c234 <pb_dec_bytes+0xac>
 801c232:	4b0c      	ldr	r3, [pc, #48]	; (801c264 <pb_dec_bytes+0xdc>)
 801c234:	687a      	ldr	r2, [r7, #4]
 801c236:	60d3      	str	r3, [r2, #12]
 801c238:	2300      	movs	r3, #0
 801c23a:	e00e      	b.n	801c25a <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 801c23c:	683b      	ldr	r3, [r7, #0]
 801c23e:	69db      	ldr	r3, [r3, #28]
 801c240:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 801c242:	68fb      	ldr	r3, [r7, #12]
 801c244:	b29a      	uxth	r2, r3
 801c246:	693b      	ldr	r3, [r7, #16]
 801c248:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 801c24a:	693b      	ldr	r3, [r7, #16]
 801c24c:	3302      	adds	r3, #2
 801c24e:	68fa      	ldr	r2, [r7, #12]
 801c250:	4619      	mov	r1, r3
 801c252:	6878      	ldr	r0, [r7, #4]
 801c254:	f7fe fbc0 	bl	801a9d8 <pb_read>
 801c258:	4603      	mov	r3, r0
}
 801c25a:	4618      	mov	r0, r3
 801c25c:	3718      	adds	r7, #24
 801c25e:	46bd      	mov	sp, r7
 801c260:	bd80      	pop	{r7, pc}
 801c262:	bf00      	nop
 801c264:	080220e8 	.word	0x080220e8
 801c268:	080220f8 	.word	0x080220f8
 801c26c:	08022040 	.word	0x08022040

0801c270 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801c270:	b580      	push	{r7, lr}
 801c272:	b086      	sub	sp, #24
 801c274:	af00      	add	r7, sp, #0
 801c276:	6078      	str	r0, [r7, #4]
 801c278:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 801c27a:	683b      	ldr	r3, [r7, #0]
 801c27c:	69db      	ldr	r3, [r3, #28]
 801c27e:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 801c280:	f107 030c 	add.w	r3, r7, #12
 801c284:	4619      	mov	r1, r3
 801c286:	6878      	ldr	r0, [r7, #4]
 801c288:	f7fe fd20 	bl	801accc <pb_decode_varint32>
 801c28c:	4603      	mov	r3, r0
 801c28e:	f083 0301 	eor.w	r3, r3, #1
 801c292:	b2db      	uxtb	r3, r3
 801c294:	2b00      	cmp	r3, #0
 801c296:	d001      	beq.n	801c29c <pb_dec_string+0x2c>
        return false;
 801c298:	2300      	movs	r3, #0
 801c29a:	e05a      	b.n	801c352 <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c2a2:	d10b      	bne.n	801c2bc <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	68db      	ldr	r3, [r3, #12]
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	d002      	beq.n	801c2b2 <pb_dec_string+0x42>
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	68db      	ldr	r3, [r3, #12]
 801c2b0:	e000      	b.n	801c2b4 <pb_dec_string+0x44>
 801c2b2:	4b2a      	ldr	r3, [pc, #168]	; (801c35c <pb_dec_string+0xec>)
 801c2b4:	687a      	ldr	r2, [r7, #4]
 801c2b6:	60d3      	str	r3, [r2, #12]
 801c2b8:	2300      	movs	r3, #0
 801c2ba:	e04a      	b.n	801c352 <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 801c2bc:	68fb      	ldr	r3, [r7, #12]
 801c2be:	3301      	adds	r3, #1
 801c2c0:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 801c2c2:	68fb      	ldr	r3, [r7, #12]
 801c2c4:	693a      	ldr	r2, [r7, #16]
 801c2c6:	429a      	cmp	r2, r3
 801c2c8:	d20b      	bcs.n	801c2e2 <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	68db      	ldr	r3, [r3, #12]
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	d002      	beq.n	801c2d8 <pb_dec_string+0x68>
 801c2d2:	687b      	ldr	r3, [r7, #4]
 801c2d4:	68db      	ldr	r3, [r3, #12]
 801c2d6:	e000      	b.n	801c2da <pb_dec_string+0x6a>
 801c2d8:	4b20      	ldr	r3, [pc, #128]	; (801c35c <pb_dec_string+0xec>)
 801c2da:	687a      	ldr	r2, [r7, #4]
 801c2dc:	60d3      	str	r3, [r2, #12]
 801c2de:	2300      	movs	r3, #0
 801c2e0:	e037      	b.n	801c352 <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 801c2e2:	683b      	ldr	r3, [r7, #0]
 801c2e4:	7d9b      	ldrb	r3, [r3, #22]
 801c2e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c2ea:	2b80      	cmp	r3, #128	; 0x80
 801c2ec:	d10b      	bne.n	801c306 <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	68db      	ldr	r3, [r3, #12]
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d002      	beq.n	801c2fc <pb_dec_string+0x8c>
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	68db      	ldr	r3, [r3, #12]
 801c2fa:	e000      	b.n	801c2fe <pb_dec_string+0x8e>
 801c2fc:	4b18      	ldr	r3, [pc, #96]	; (801c360 <pb_dec_string+0xf0>)
 801c2fe:	687a      	ldr	r2, [r7, #4]
 801c300:	60d3      	str	r3, [r2, #12]
 801c302:	2300      	movs	r3, #0
 801c304:	e025      	b.n	801c352 <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 801c306:	683b      	ldr	r3, [r7, #0]
 801c308:	8a5b      	ldrh	r3, [r3, #18]
 801c30a:	461a      	mov	r2, r3
 801c30c:	693b      	ldr	r3, [r7, #16]
 801c30e:	4293      	cmp	r3, r2
 801c310:	d90b      	bls.n	801c32a <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	68db      	ldr	r3, [r3, #12]
 801c316:	2b00      	cmp	r3, #0
 801c318:	d002      	beq.n	801c320 <pb_dec_string+0xb0>
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	68db      	ldr	r3, [r3, #12]
 801c31e:	e000      	b.n	801c322 <pb_dec_string+0xb2>
 801c320:	4b10      	ldr	r3, [pc, #64]	; (801c364 <pb_dec_string+0xf4>)
 801c322:	687a      	ldr	r2, [r7, #4]
 801c324:	60d3      	str	r3, [r2, #12]
 801c326:	2300      	movs	r3, #0
 801c328:	e013      	b.n	801c352 <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 801c32a:	68fb      	ldr	r3, [r7, #12]
 801c32c:	697a      	ldr	r2, [r7, #20]
 801c32e:	4413      	add	r3, r2
 801c330:	2200      	movs	r2, #0
 801c332:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	461a      	mov	r2, r3
 801c338:	6979      	ldr	r1, [r7, #20]
 801c33a:	6878      	ldr	r0, [r7, #4]
 801c33c:	f7fe fb4c 	bl	801a9d8 <pb_read>
 801c340:	4603      	mov	r3, r0
 801c342:	f083 0301 	eor.w	r3, r3, #1
 801c346:	b2db      	uxtb	r3, r3
 801c348:	2b00      	cmp	r3, #0
 801c34a:	d001      	beq.n	801c350 <pb_dec_string+0xe0>
        return false;
 801c34c:	2300      	movs	r3, #0
 801c34e:	e000      	b.n	801c352 <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 801c350:	2301      	movs	r3, #1
}
 801c352:	4618      	mov	r0, r3
 801c354:	3718      	adds	r7, #24
 801c356:	46bd      	mov	sp, r7
 801c358:	bd80      	pop	{r7, pc}
 801c35a:	bf00      	nop
 801c35c:	080220f8 	.word	0x080220f8
 801c360:	08022040 	.word	0x08022040
 801c364:	08022108 	.word	0x08022108

0801c368 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801c368:	b580      	push	{r7, lr}
 801c36a:	b08a      	sub	sp, #40	; 0x28
 801c36c:	af00      	add	r7, sp, #0
 801c36e:	6078      	str	r0, [r7, #4]
 801c370:	6039      	str	r1, [r7, #0]
    bool status = true;
 801c372:	2301      	movs	r3, #1
 801c374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool submsg_consumed = false;
 801c378:	2300      	movs	r3, #0
 801c37a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 801c37e:	f107 030c 	add.w	r3, r7, #12
 801c382:	4619      	mov	r1, r3
 801c384:	6878      	ldr	r0, [r7, #4]
 801c386:	f7fe fe2d 	bl	801afe4 <pb_make_string_substream>
 801c38a:	4603      	mov	r3, r0
 801c38c:	f083 0301 	eor.w	r3, r3, #1
 801c390:	b2db      	uxtb	r3, r3
 801c392:	2b00      	cmp	r3, #0
 801c394:	d001      	beq.n	801c39a <pb_dec_submessage+0x32>
        return false;
 801c396:	2300      	movs	r3, #0
 801c398:	e069      	b.n	801c46e <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 801c39a:	683b      	ldr	r3, [r7, #0]
 801c39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c39e:	2b00      	cmp	r3, #0
 801c3a0:	d10b      	bne.n	801c3ba <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	68db      	ldr	r3, [r3, #12]
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d002      	beq.n	801c3b0 <pb_dec_submessage+0x48>
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	68db      	ldr	r3, [r3, #12]
 801c3ae:	e000      	b.n	801c3b2 <pb_dec_submessage+0x4a>
 801c3b0:	4b31      	ldr	r3, [pc, #196]	; (801c478 <pb_dec_submessage+0x110>)
 801c3b2:	687a      	ldr	r2, [r7, #4]
 801c3b4:	60d3      	str	r3, [r2, #12]
 801c3b6:	2300      	movs	r3, #0
 801c3b8:	e059      	b.n	801c46e <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 801c3ba:	683b      	ldr	r3, [r7, #0]
 801c3bc:	7d9b      	ldrb	r3, [r3, #22]
 801c3be:	f003 030f 	and.w	r3, r3, #15
 801c3c2:	2b09      	cmp	r3, #9
 801c3c4:	d11c      	bne.n	801c400 <pb_dec_submessage+0x98>
 801c3c6:	683b      	ldr	r3, [r7, #0]
 801c3c8:	6a1b      	ldr	r3, [r3, #32]
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	d018      	beq.n	801c400 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 801c3ce:	683b      	ldr	r3, [r7, #0]
 801c3d0:	6a1b      	ldr	r3, [r3, #32]
 801c3d2:	3b08      	subs	r3, #8
 801c3d4:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 801c3d6:	69fb      	ldr	r3, [r7, #28]
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	d010      	beq.n	801c400 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 801c3de:	69fb      	ldr	r3, [r7, #28]
 801c3e0:	681b      	ldr	r3, [r3, #0]
 801c3e2:	69fa      	ldr	r2, [r7, #28]
 801c3e4:	3204      	adds	r2, #4
 801c3e6:	f107 000c 	add.w	r0, r7, #12
 801c3ea:	6839      	ldr	r1, [r7, #0]
 801c3ec:	4798      	blx	r3
 801c3ee:	4603      	mov	r3, r0
 801c3f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (substream.bytes_left == 0)
 801c3f4:	697b      	ldr	r3, [r7, #20]
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d102      	bne.n	801c400 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 801c3fa:	2301      	movs	r3, #1
 801c3fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 801c400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c404:	2b00      	cmp	r3, #0
 801c406:	d022      	beq.n	801c44e <pb_dec_submessage+0xe6>
 801c408:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c40c:	f083 0301 	eor.w	r3, r3, #1
 801c410:	b2db      	uxtb	r3, r3
 801c412:	2b00      	cmp	r3, #0
 801c414:	d01b      	beq.n	801c44e <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 801c416:	2300      	movs	r3, #0
 801c418:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 801c41a:	683b      	ldr	r3, [r7, #0]
 801c41c:	7d9b      	ldrb	r3, [r3, #22]
 801c41e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c422:	2b00      	cmp	r3, #0
 801c424:	d107      	bne.n	801c436 <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 801c426:	683b      	ldr	r3, [r7, #0]
 801c428:	7d9b      	ldrb	r3, [r3, #22]
 801c42a:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 801c42e:	2b20      	cmp	r3, #32
 801c430:	d001      	beq.n	801c436 <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 801c432:	2301      	movs	r3, #1
 801c434:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 801c436:	683b      	ldr	r3, [r7, #0]
 801c438:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801c43a:	683b      	ldr	r3, [r7, #0]
 801c43c:	69da      	ldr	r2, [r3, #28]
 801c43e:	f107 000c 	add.w	r0, r7, #12
 801c442:	6a3b      	ldr	r3, [r7, #32]
 801c444:	f7ff fafa 	bl	801ba3c <pb_decode_inner>
 801c448:	4603      	mov	r3, r0
 801c44a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 801c44e:	f107 030c 	add.w	r3, r7, #12
 801c452:	4619      	mov	r1, r3
 801c454:	6878      	ldr	r0, [r7, #4]
 801c456:	f7fe fdff 	bl	801b058 <pb_close_string_substream>
 801c45a:	4603      	mov	r3, r0
 801c45c:	f083 0301 	eor.w	r3, r3, #1
 801c460:	b2db      	uxtb	r3, r3
 801c462:	2b00      	cmp	r3, #0
 801c464:	d001      	beq.n	801c46a <pb_dec_submessage+0x102>
        return false;
 801c466:	2300      	movs	r3, #0
 801c468:	e001      	b.n	801c46e <pb_dec_submessage+0x106>

    return status;
 801c46a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801c46e:	4618      	mov	r0, r3
 801c470:	3728      	adds	r7, #40	; 0x28
 801c472:	46bd      	mov	sp, r7
 801c474:	bd80      	pop	{r7, pc}
 801c476:	bf00      	nop
 801c478:	08022118 	.word	0x08022118

0801c47c <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801c47c:	b580      	push	{r7, lr}
 801c47e:	b084      	sub	sp, #16
 801c480:	af00      	add	r7, sp, #0
 801c482:	6078      	str	r0, [r7, #4]
 801c484:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 801c486:	f107 030c 	add.w	r3, r7, #12
 801c48a:	4619      	mov	r1, r3
 801c48c:	6878      	ldr	r0, [r7, #4]
 801c48e:	f7fe fc1d 	bl	801accc <pb_decode_varint32>
 801c492:	4603      	mov	r3, r0
 801c494:	f083 0301 	eor.w	r3, r3, #1
 801c498:	b2db      	uxtb	r3, r3
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d001      	beq.n	801c4a2 <pb_dec_fixed_length_bytes+0x26>
        return false;
 801c49e:	2300      	movs	r3, #0
 801c4a0:	e037      	b.n	801c512 <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 801c4a2:	68fb      	ldr	r3, [r7, #12]
 801c4a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c4a8:	d30b      	bcc.n	801c4c2 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	68db      	ldr	r3, [r3, #12]
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d002      	beq.n	801c4b8 <pb_dec_fixed_length_bytes+0x3c>
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	68db      	ldr	r3, [r3, #12]
 801c4b6:	e000      	b.n	801c4ba <pb_dec_fixed_length_bytes+0x3e>
 801c4b8:	4b18      	ldr	r3, [pc, #96]	; (801c51c <pb_dec_fixed_length_bytes+0xa0>)
 801c4ba:	687a      	ldr	r2, [r7, #4]
 801c4bc:	60d3      	str	r3, [r2, #12]
 801c4be:	2300      	movs	r3, #0
 801c4c0:	e027      	b.n	801c512 <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 801c4c2:	68fb      	ldr	r3, [r7, #12]
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d109      	bne.n	801c4dc <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 801c4c8:	683b      	ldr	r3, [r7, #0]
 801c4ca:	69d8      	ldr	r0, [r3, #28]
 801c4cc:	683b      	ldr	r3, [r7, #0]
 801c4ce:	8a5b      	ldrh	r3, [r3, #18]
 801c4d0:	461a      	mov	r2, r3
 801c4d2:	2100      	movs	r1, #0
 801c4d4:	f001 f944 	bl	801d760 <memset>
        return true;
 801c4d8:	2301      	movs	r3, #1
 801c4da:	e01a      	b.n	801c512 <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 801c4dc:	683b      	ldr	r3, [r7, #0]
 801c4de:	8a5b      	ldrh	r3, [r3, #18]
 801c4e0:	461a      	mov	r2, r3
 801c4e2:	68fb      	ldr	r3, [r7, #12]
 801c4e4:	429a      	cmp	r2, r3
 801c4e6:	d00b      	beq.n	801c500 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	68db      	ldr	r3, [r3, #12]
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d002      	beq.n	801c4f6 <pb_dec_fixed_length_bytes+0x7a>
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	68db      	ldr	r3, [r3, #12]
 801c4f4:	e000      	b.n	801c4f8 <pb_dec_fixed_length_bytes+0x7c>
 801c4f6:	4b0a      	ldr	r3, [pc, #40]	; (801c520 <pb_dec_fixed_length_bytes+0xa4>)
 801c4f8:	687a      	ldr	r2, [r7, #4]
 801c4fa:	60d3      	str	r3, [r2, #12]
 801c4fc:	2300      	movs	r3, #0
 801c4fe:	e008      	b.n	801c512 <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 801c500:	683b      	ldr	r3, [r7, #0]
 801c502:	69d9      	ldr	r1, [r3, #28]
 801c504:	683b      	ldr	r3, [r7, #0]
 801c506:	8a5b      	ldrh	r3, [r3, #18]
 801c508:	461a      	mov	r2, r3
 801c50a:	6878      	ldr	r0, [r7, #4]
 801c50c:	f7fe fa64 	bl	801a9d8 <pb_read>
 801c510:	4603      	mov	r3, r0
}
 801c512:	4618      	mov	r0, r3
 801c514:	3710      	adds	r7, #16
 801c516:	46bd      	mov	sp, r7
 801c518:	bd80      	pop	{r7, pc}
 801c51a:	bf00      	nop
 801c51c:	080220e8 	.word	0x080220e8
 801c520:	08022134 	.word	0x08022134

0801c524 <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 801c524:	b580      	push	{r7, lr}
 801c526:	b086      	sub	sp, #24
 801c528:	af00      	add	r7, sp, #0
 801c52a:	60f8      	str	r0, [r7, #12]
 801c52c:	60b9      	str	r1, [r7, #8]
 801c52e:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 801c530:	68fb      	ldr	r3, [r7, #12]
 801c532:	685b      	ldr	r3, [r3, #4]
 801c534:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 801c536:	697a      	ldr	r2, [r7, #20]
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	441a      	add	r2, r3
 801c53c:	68fb      	ldr	r3, [r7, #12]
 801c53e:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 801c540:	687a      	ldr	r2, [r7, #4]
 801c542:	68b9      	ldr	r1, [r7, #8]
 801c544:	6978      	ldr	r0, [r7, #20]
 801c546:	f001 f8fd 	bl	801d744 <memcpy>
    
    return true;
 801c54a:	2301      	movs	r3, #1
}
 801c54c:	4618      	mov	r0, r3
 801c54e:	3718      	adds	r7, #24
 801c550:	46bd      	mov	sp, r7
 801c552:	bd80      	pop	{r7, pc}

0801c554 <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 801c554:	b4b0      	push	{r4, r5, r7}
 801c556:	b08b      	sub	sp, #44	; 0x2c
 801c558:	af00      	add	r7, sp, #0
 801c55a:	60f8      	str	r0, [r7, #12]
 801c55c:	60b9      	str	r1, [r7, #8]
 801c55e:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 801c560:	4b0b      	ldr	r3, [pc, #44]	; (801c590 <pb_ostream_from_buffer+0x3c>)
 801c562:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 801c564:	68bb      	ldr	r3, [r7, #8]
 801c566:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 801c56c:	2300      	movs	r3, #0
 801c56e:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 801c570:	2300      	movs	r3, #0
 801c572:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 801c574:	68fb      	ldr	r3, [r7, #12]
 801c576:	461d      	mov	r5, r3
 801c578:	f107 0414 	add.w	r4, r7, #20
 801c57c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c57e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c580:	6823      	ldr	r3, [r4, #0]
 801c582:	602b      	str	r3, [r5, #0]
}
 801c584:	68f8      	ldr	r0, [r7, #12]
 801c586:	372c      	adds	r7, #44	; 0x2c
 801c588:	46bd      	mov	sp, r7
 801c58a:	bcb0      	pop	{r4, r5, r7}
 801c58c:	4770      	bx	lr
 801c58e:	bf00      	nop
 801c590:	0801c525 	.word	0x0801c525

0801c594 <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 801c594:	b580      	push	{r7, lr}
 801c596:	b084      	sub	sp, #16
 801c598:	af00      	add	r7, sp, #0
 801c59a:	60f8      	str	r0, [r7, #12]
 801c59c:	60b9      	str	r1, [r7, #8]
 801c59e:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	d037      	beq.n	801c616 <pb_write+0x82>
 801c5a6:	68fb      	ldr	r3, [r7, #12]
 801c5a8:	681b      	ldr	r3, [r3, #0]
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	d033      	beq.n	801c616 <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 801c5ae:	68fb      	ldr	r3, [r7, #12]
 801c5b0:	68da      	ldr	r2, [r3, #12]
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	441a      	add	r2, r3
 801c5b6:	68fb      	ldr	r3, [r7, #12]
 801c5b8:	68db      	ldr	r3, [r3, #12]
 801c5ba:	429a      	cmp	r2, r3
 801c5bc:	d307      	bcc.n	801c5ce <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 801c5be:	68fb      	ldr	r3, [r7, #12]
 801c5c0:	68da      	ldr	r2, [r3, #12]
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	441a      	add	r2, r3
 801c5c6:	68fb      	ldr	r3, [r7, #12]
 801c5c8:	689b      	ldr	r3, [r3, #8]
        if (stream->bytes_written + count < stream->bytes_written ||
 801c5ca:	429a      	cmp	r2, r3
 801c5cc:	d90b      	bls.n	801c5e6 <pb_write+0x52>
        {
            PB_RETURN_ERROR(stream, "stream full");
 801c5ce:	68fb      	ldr	r3, [r7, #12]
 801c5d0:	691b      	ldr	r3, [r3, #16]
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	d002      	beq.n	801c5dc <pb_write+0x48>
 801c5d6:	68fb      	ldr	r3, [r7, #12]
 801c5d8:	691b      	ldr	r3, [r3, #16]
 801c5da:	e000      	b.n	801c5de <pb_write+0x4a>
 801c5dc:	4b13      	ldr	r3, [pc, #76]	; (801c62c <pb_write+0x98>)
 801c5de:	68fa      	ldr	r2, [r7, #12]
 801c5e0:	6113      	str	r3, [r2, #16]
 801c5e2:	2300      	movs	r3, #0
 801c5e4:	e01e      	b.n	801c624 <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 801c5e6:	68fb      	ldr	r3, [r7, #12]
 801c5e8:	681b      	ldr	r3, [r3, #0]
 801c5ea:	687a      	ldr	r2, [r7, #4]
 801c5ec:	68b9      	ldr	r1, [r7, #8]
 801c5ee:	68f8      	ldr	r0, [r7, #12]
 801c5f0:	4798      	blx	r3
 801c5f2:	4603      	mov	r3, r0
 801c5f4:	f083 0301 	eor.w	r3, r3, #1
 801c5f8:	b2db      	uxtb	r3, r3
 801c5fa:	2b00      	cmp	r3, #0
 801c5fc:	d00b      	beq.n	801c616 <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 801c5fe:	68fb      	ldr	r3, [r7, #12]
 801c600:	691b      	ldr	r3, [r3, #16]
 801c602:	2b00      	cmp	r3, #0
 801c604:	d002      	beq.n	801c60c <pb_write+0x78>
 801c606:	68fb      	ldr	r3, [r7, #12]
 801c608:	691b      	ldr	r3, [r3, #16]
 801c60a:	e000      	b.n	801c60e <pb_write+0x7a>
 801c60c:	4b08      	ldr	r3, [pc, #32]	; (801c630 <pb_write+0x9c>)
 801c60e:	68fa      	ldr	r2, [r7, #12]
 801c610:	6113      	str	r3, [r2, #16]
 801c612:	2300      	movs	r3, #0
 801c614:	e006      	b.n	801c624 <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 801c616:	68fb      	ldr	r3, [r7, #12]
 801c618:	68da      	ldr	r2, [r3, #12]
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	441a      	add	r2, r3
 801c61e:	68fb      	ldr	r3, [r7, #12]
 801c620:	60da      	str	r2, [r3, #12]
    return true;
 801c622:	2301      	movs	r3, #1
}
 801c624:	4618      	mov	r0, r3
 801c626:	3710      	adds	r7, #16
 801c628:	46bd      	mov	sp, r7
 801c62a:	bd80      	pop	{r7, pc}
 801c62c:	08022158 	.word	0x08022158
 801c630:	08022164 	.word	0x08022164

0801c634 <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 801c634:	b480      	push	{r7}
 801c636:	b085      	sub	sp, #20
 801c638:	af00      	add	r7, sp, #0
 801c63a:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 801c640:	2300      	movs	r3, #0
 801c642:	60fb      	str	r3, [r7, #12]
 801c644:	e00a      	b.n	801c65c <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 801c646:	68ba      	ldr	r2, [r7, #8]
 801c648:	68fb      	ldr	r3, [r7, #12]
 801c64a:	4413      	add	r3, r2
 801c64c:	781b      	ldrb	r3, [r3, #0]
 801c64e:	2b00      	cmp	r3, #0
 801c650:	d001      	beq.n	801c656 <safe_read_bool+0x22>
            return true;
 801c652:	2301      	movs	r3, #1
 801c654:	e006      	b.n	801c664 <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 801c656:	68fb      	ldr	r3, [r7, #12]
 801c658:	3301      	adds	r3, #1
 801c65a:	60fb      	str	r3, [r7, #12]
 801c65c:	68fb      	ldr	r3, [r7, #12]
 801c65e:	2b00      	cmp	r3, #0
 801c660:	d0f1      	beq.n	801c646 <safe_read_bool+0x12>
    }
    return false;
 801c662:	2300      	movs	r3, #0
}
 801c664:	4618      	mov	r0, r3
 801c666:	3714      	adds	r7, #20
 801c668:	46bd      	mov	sp, r7
 801c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c66e:	4770      	bx	lr

0801c670 <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 801c670:	b5b0      	push	{r4, r5, r7, lr}
 801c672:	b08c      	sub	sp, #48	; 0x30
 801c674:	af00      	add	r7, sp, #0
 801c676:	6078      	str	r0, [r7, #4]
 801c678:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 801c67a:	683b      	ldr	r3, [r7, #0]
 801c67c:	6a1b      	ldr	r3, [r3, #32]
 801c67e:	881b      	ldrh	r3, [r3, #0]
 801c680:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (count == 0)
 801c682:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c684:	2b00      	cmp	r3, #0
 801c686:	d101      	bne.n	801c68c <encode_array+0x1c>
        return true;
 801c688:	2301      	movs	r3, #1
 801c68a:	e13d      	b.n	801c908 <encode_array+0x298>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 801c68c:	683b      	ldr	r3, [r7, #0]
 801c68e:	7d9b      	ldrb	r3, [r3, #22]
 801c690:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c694:	2b80      	cmp	r3, #128	; 0x80
 801c696:	d010      	beq.n	801c6ba <encode_array+0x4a>
 801c698:	683b      	ldr	r3, [r7, #0]
 801c69a:	8a9b      	ldrh	r3, [r3, #20]
 801c69c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c69e:	429a      	cmp	r2, r3
 801c6a0:	d90b      	bls.n	801c6ba <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	691b      	ldr	r3, [r3, #16]
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	d002      	beq.n	801c6b0 <encode_array+0x40>
 801c6aa:	687b      	ldr	r3, [r7, #4]
 801c6ac:	691b      	ldr	r3, [r3, #16]
 801c6ae:	e000      	b.n	801c6b2 <encode_array+0x42>
 801c6b0:	4b97      	ldr	r3, [pc, #604]	; (801c910 <encode_array+0x2a0>)
 801c6b2:	687a      	ldr	r2, [r7, #4]
 801c6b4:	6113      	str	r3, [r2, #16]
 801c6b6:	2300      	movs	r3, #0
 801c6b8:	e126      	b.n	801c908 <encode_array+0x298>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 801c6ba:	683b      	ldr	r3, [r7, #0]
 801c6bc:	7d9b      	ldrb	r3, [r3, #22]
 801c6be:	f003 030f 	and.w	r3, r3, #15
 801c6c2:	2b05      	cmp	r3, #5
 801c6c4:	f200 80b3 	bhi.w	801c82e <encode_array+0x1be>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 801c6c8:	683b      	ldr	r3, [r7, #0]
 801c6ca:	8a1b      	ldrh	r3, [r3, #16]
 801c6cc:	461a      	mov	r2, r3
 801c6ce:	2102      	movs	r1, #2
 801c6d0:	6878      	ldr	r0, [r7, #4]
 801c6d2:	f000 fcdd 	bl	801d090 <pb_encode_tag>
 801c6d6:	4603      	mov	r3, r0
 801c6d8:	f083 0301 	eor.w	r3, r3, #1
 801c6dc:	b2db      	uxtb	r3, r3
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	d001      	beq.n	801c6e6 <encode_array+0x76>
            return false;
 801c6e2:	2300      	movs	r3, #0
 801c6e4:	e110      	b.n	801c908 <encode_array+0x298>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 801c6e6:	683b      	ldr	r3, [r7, #0]
 801c6e8:	7d9b      	ldrb	r3, [r3, #22]
 801c6ea:	f003 030f 	and.w	r3, r3, #15
 801c6ee:	2b04      	cmp	r3, #4
 801c6f0:	d103      	bne.n	801c6fa <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 801c6f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c6f4:	009b      	lsls	r3, r3, #2
 801c6f6:	62bb      	str	r3, [r7, #40]	; 0x28
 801c6f8:	e047      	b.n	801c78a <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 801c6fa:	683b      	ldr	r3, [r7, #0]
 801c6fc:	7d9b      	ldrb	r3, [r3, #22]
 801c6fe:	f003 030f 	and.w	r3, r3, #15
 801c702:	2b05      	cmp	r3, #5
 801c704:	d103      	bne.n	801c70e <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 801c706:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c708:	00db      	lsls	r3, r3, #3
 801c70a:	62bb      	str	r3, [r7, #40]	; 0x28
 801c70c:	e03d      	b.n	801c78a <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 801c70e:	f107 0308 	add.w	r3, r7, #8
 801c712:	2200      	movs	r2, #0
 801c714:	601a      	str	r2, [r3, #0]
 801c716:	605a      	str	r2, [r3, #4]
 801c718:	609a      	str	r2, [r3, #8]
 801c71a:	60da      	str	r2, [r3, #12]
 801c71c:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 801c71e:	683b      	ldr	r3, [r7, #0]
 801c720:	69db      	ldr	r3, [r3, #28]
 801c722:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 801c724:	2300      	movs	r3, #0
 801c726:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c728:	e026      	b.n	801c778 <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 801c72a:	f107 0308 	add.w	r3, r7, #8
 801c72e:	6839      	ldr	r1, [r7, #0]
 801c730:	4618      	mov	r0, r3
 801c732:	f000 fdef 	bl	801d314 <pb_enc_varint>
 801c736:	4603      	mov	r3, r0
 801c738:	f083 0301 	eor.w	r3, r3, #1
 801c73c:	b2db      	uxtb	r3, r3
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d010      	beq.n	801c764 <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 801c742:	687b      	ldr	r3, [r7, #4]
 801c744:	691b      	ldr	r3, [r3, #16]
 801c746:	2b00      	cmp	r3, #0
 801c748:	d002      	beq.n	801c750 <encode_array+0xe0>
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	691b      	ldr	r3, [r3, #16]
 801c74e:	e005      	b.n	801c75c <encode_array+0xec>
 801c750:	69bb      	ldr	r3, [r7, #24]
 801c752:	2b00      	cmp	r3, #0
 801c754:	d001      	beq.n	801c75a <encode_array+0xea>
 801c756:	69bb      	ldr	r3, [r7, #24]
 801c758:	e000      	b.n	801c75c <encode_array+0xec>
 801c75a:	4b6e      	ldr	r3, [pc, #440]	; (801c914 <encode_array+0x2a4>)
 801c75c:	687a      	ldr	r2, [r7, #4]
 801c75e:	6113      	str	r3, [r2, #16]
 801c760:	2300      	movs	r3, #0
 801c762:	e0d1      	b.n	801c908 <encode_array+0x298>
                field->pData = (char*)field->pData + field->data_size;
 801c764:	683b      	ldr	r3, [r7, #0]
 801c766:	69db      	ldr	r3, [r3, #28]
 801c768:	683a      	ldr	r2, [r7, #0]
 801c76a:	8a52      	ldrh	r2, [r2, #18]
 801c76c:	441a      	add	r2, r3
 801c76e:	683b      	ldr	r3, [r7, #0]
 801c770:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 801c772:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c774:	3301      	adds	r3, #1
 801c776:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c778:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c77a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c77c:	429a      	cmp	r2, r3
 801c77e:	d3d4      	bcc.n	801c72a <encode_array+0xba>
            }
            field->pData = pData_orig;
 801c780:	683b      	ldr	r3, [r7, #0]
 801c782:	69fa      	ldr	r2, [r7, #28]
 801c784:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 801c786:	697b      	ldr	r3, [r7, #20]
 801c788:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 801c78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c78c:	2200      	movs	r2, #0
 801c78e:	461c      	mov	r4, r3
 801c790:	4615      	mov	r5, r2
 801c792:	4622      	mov	r2, r4
 801c794:	462b      	mov	r3, r5
 801c796:	6878      	ldr	r0, [r7, #4]
 801c798:	f000 fbf7 	bl	801cf8a <pb_encode_varint>
 801c79c:	4603      	mov	r3, r0
 801c79e:	f083 0301 	eor.w	r3, r3, #1
 801c7a2:	b2db      	uxtb	r3, r3
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	d001      	beq.n	801c7ac <encode_array+0x13c>
            return false;
 801c7a8:	2300      	movs	r3, #0
 801c7aa:	e0ad      	b.n	801c908 <encode_array+0x298>
        
        if (stream->callback == NULL)
 801c7ac:	687b      	ldr	r3, [r7, #4]
 801c7ae:	681b      	ldr	r3, [r3, #0]
 801c7b0:	2b00      	cmp	r3, #0
 801c7b2:	d106      	bne.n	801c7c2 <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 801c7b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c7b6:	2100      	movs	r1, #0
 801c7b8:	6878      	ldr	r0, [r7, #4]
 801c7ba:	f7ff feeb 	bl	801c594 <pb_write>
 801c7be:	4603      	mov	r3, r0
 801c7c0:	e0a2      	b.n	801c908 <encode_array+0x298>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 801c7c2:	2300      	movs	r3, #0
 801c7c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c7c6:	e02d      	b.n	801c824 <encode_array+0x1b4>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 801c7c8:	683b      	ldr	r3, [r7, #0]
 801c7ca:	7d9b      	ldrb	r3, [r3, #22]
 801c7cc:	f003 030f 	and.w	r3, r3, #15
 801c7d0:	2b04      	cmp	r3, #4
 801c7d2:	d005      	beq.n	801c7e0 <encode_array+0x170>
 801c7d4:	683b      	ldr	r3, [r7, #0]
 801c7d6:	7d9b      	ldrb	r3, [r3, #22]
 801c7d8:	f003 030f 	and.w	r3, r3, #15
 801c7dc:	2b05      	cmp	r3, #5
 801c7de:	d10b      	bne.n	801c7f8 <encode_array+0x188>
            {
                if (!pb_enc_fixed(stream, field))
 801c7e0:	6839      	ldr	r1, [r7, #0]
 801c7e2:	6878      	ldr	r0, [r7, #4]
 801c7e4:	f000 fe58 	bl	801d498 <pb_enc_fixed>
 801c7e8:	4603      	mov	r3, r0
 801c7ea:	f083 0301 	eor.w	r3, r3, #1
 801c7ee:	b2db      	uxtb	r3, r3
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	d00d      	beq.n	801c810 <encode_array+0x1a0>
                    return false;
 801c7f4:	2300      	movs	r3, #0
 801c7f6:	e087      	b.n	801c908 <encode_array+0x298>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 801c7f8:	6839      	ldr	r1, [r7, #0]
 801c7fa:	6878      	ldr	r0, [r7, #4]
 801c7fc:	f000 fd8a 	bl	801d314 <pb_enc_varint>
 801c800:	4603      	mov	r3, r0
 801c802:	f083 0301 	eor.w	r3, r3, #1
 801c806:	b2db      	uxtb	r3, r3
 801c808:	2b00      	cmp	r3, #0
 801c80a:	d001      	beq.n	801c810 <encode_array+0x1a0>
                    return false;
 801c80c:	2300      	movs	r3, #0
 801c80e:	e07b      	b.n	801c908 <encode_array+0x298>
            }

            field->pData = (char*)field->pData + field->data_size;
 801c810:	683b      	ldr	r3, [r7, #0]
 801c812:	69db      	ldr	r3, [r3, #28]
 801c814:	683a      	ldr	r2, [r7, #0]
 801c816:	8a52      	ldrh	r2, [r2, #18]
 801c818:	441a      	add	r2, r3
 801c81a:	683b      	ldr	r3, [r7, #0]
 801c81c:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 801c81e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c820:	3301      	adds	r3, #1
 801c822:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c824:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c826:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c828:	429a      	cmp	r2, r3
 801c82a:	d3cd      	bcc.n	801c7c8 <encode_array+0x158>
 801c82c:	e06b      	b.n	801c906 <encode_array+0x296>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 801c82e:	2300      	movs	r3, #0
 801c830:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c832:	e064      	b.n	801c8fe <encode_array+0x28e>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 801c834:	683b      	ldr	r3, [r7, #0]
 801c836:	7d9b      	ldrb	r3, [r3, #22]
 801c838:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c83c:	2b80      	cmp	r3, #128	; 0x80
 801c83e:	d147      	bne.n	801c8d0 <encode_array+0x260>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 801c840:	683b      	ldr	r3, [r7, #0]
 801c842:	7d9b      	ldrb	r3, [r3, #22]
 801c844:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 801c848:	2b07      	cmp	r3, #7
 801c84a:	d005      	beq.n	801c858 <encode_array+0x1e8>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 801c84c:	683b      	ldr	r3, [r7, #0]
 801c84e:	7d9b      	ldrb	r3, [r3, #22]
 801c850:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 801c854:	2b06      	cmp	r3, #6
 801c856:	d13b      	bne.n	801c8d0 <encode_array+0x260>
            {
                bool status;
                void *pData_orig = field->pData;
 801c858:	683b      	ldr	r3, [r7, #0]
 801c85a:	69db      	ldr	r3, [r3, #28]
 801c85c:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 801c85e:	683b      	ldr	r3, [r7, #0]
 801c860:	69db      	ldr	r3, [r3, #28]
 801c862:	681a      	ldr	r2, [r3, #0]
 801c864:	683b      	ldr	r3, [r7, #0]
 801c866:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 801c868:	683b      	ldr	r3, [r7, #0]
 801c86a:	69db      	ldr	r3, [r3, #28]
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d11c      	bne.n	801c8aa <encode_array+0x23a>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 801c870:	6839      	ldr	r1, [r7, #0]
 801c872:	6878      	ldr	r0, [r7, #4]
 801c874:	f000 fc36 	bl	801d0e4 <pb_encode_tag_for_field>
 801c878:	4603      	mov	r3, r0
 801c87a:	2b00      	cmp	r3, #0
 801c87c:	d00b      	beq.n	801c896 <encode_array+0x226>
                             pb_encode_varint(stream, 0);
 801c87e:	f04f 0200 	mov.w	r2, #0
 801c882:	f04f 0300 	mov.w	r3, #0
 801c886:	6878      	ldr	r0, [r7, #4]
 801c888:	f000 fb7f 	bl	801cf8a <pb_encode_varint>
 801c88c:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 801c88e:	2b00      	cmp	r3, #0
 801c890:	d001      	beq.n	801c896 <encode_array+0x226>
 801c892:	2301      	movs	r3, #1
 801c894:	e000      	b.n	801c898 <encode_array+0x228>
 801c896:	2300      	movs	r3, #0
 801c898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c89c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c8a0:	f003 0301 	and.w	r3, r3, #1
 801c8a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c8a8:	e006      	b.n	801c8b8 <encode_array+0x248>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 801c8aa:	6839      	ldr	r1, [r7, #0]
 801c8ac:	6878      	ldr	r0, [r7, #4]
 801c8ae:	f000 f951 	bl	801cb54 <encode_basic_field>
 801c8b2:	4603      	mov	r3, r0
 801c8b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }

                field->pData = pData_orig;
 801c8b8:	683b      	ldr	r3, [r7, #0]
 801c8ba:	6a3a      	ldr	r2, [r7, #32]
 801c8bc:	61da      	str	r2, [r3, #28]

                if (!status)
 801c8be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c8c2:	f083 0301 	eor.w	r3, r3, #1
 801c8c6:	b2db      	uxtb	r3, r3
 801c8c8:	2b00      	cmp	r3, #0
 801c8ca:	d00d      	beq.n	801c8e8 <encode_array+0x278>
                    return false;
 801c8cc:	2300      	movs	r3, #0
 801c8ce:	e01b      	b.n	801c908 <encode_array+0x298>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 801c8d0:	6839      	ldr	r1, [r7, #0]
 801c8d2:	6878      	ldr	r0, [r7, #4]
 801c8d4:	f000 f93e 	bl	801cb54 <encode_basic_field>
 801c8d8:	4603      	mov	r3, r0
 801c8da:	f083 0301 	eor.w	r3, r3, #1
 801c8de:	b2db      	uxtb	r3, r3
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d002      	beq.n	801c8ea <encode_array+0x27a>
                    return false;
 801c8e4:	2300      	movs	r3, #0
 801c8e6:	e00f      	b.n	801c908 <encode_array+0x298>
            {
 801c8e8:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 801c8ea:	683b      	ldr	r3, [r7, #0]
 801c8ec:	69db      	ldr	r3, [r3, #28]
 801c8ee:	683a      	ldr	r2, [r7, #0]
 801c8f0:	8a52      	ldrh	r2, [r2, #18]
 801c8f2:	441a      	add	r2, r3
 801c8f4:	683b      	ldr	r3, [r7, #0]
 801c8f6:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 801c8f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c8fa:	3301      	adds	r3, #1
 801c8fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c8fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c902:	429a      	cmp	r2, r3
 801c904:	d396      	bcc.n	801c834 <encode_array+0x1c4>
        }
    }
    
    return true;
 801c906:	2301      	movs	r3, #1
}
 801c908:	4618      	mov	r0, r3
 801c90a:	3730      	adds	r7, #48	; 0x30
 801c90c:	46bd      	mov	sp, r7
 801c90e:	bdb0      	pop	{r4, r5, r7, pc}
 801c910:	08022170 	.word	0x08022170
 801c914:	08022188 	.word	0x08022188

0801c918 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 801c918:	b580      	push	{r7, lr}
 801c91a:	b092      	sub	sp, #72	; 0x48
 801c91c:	af00      	add	r7, sp, #0
 801c91e:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	7d9b      	ldrb	r3, [r3, #22]
 801c924:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 801c928:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c92c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c930:	2b00      	cmp	r3, #0
 801c932:	f040 80c9 	bne.w	801cac8 <pb_check_proto3_default_value+0x1b0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 801c936:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c93a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d101      	bne.n	801c946 <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 801c942:	2300      	movs	r3, #0
 801c944:	e100      	b.n	801cb48 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 801c946:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c94a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801c94e:	2b20      	cmp	r3, #32
 801c950:	d108      	bne.n	801c964 <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 801c952:	687b      	ldr	r3, [r7, #4]
 801c954:	6a1b      	ldr	r3, [r3, #32]
 801c956:	881b      	ldrh	r3, [r3, #0]
 801c958:	2b00      	cmp	r3, #0
 801c95a:	bf0c      	ite	eq
 801c95c:	2301      	moveq	r3, #1
 801c95e:	2300      	movne	r3, #0
 801c960:	b2db      	uxtb	r3, r3
 801c962:	e0f1      	b.n	801cb48 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 801c964:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c968:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801c96c:	2b30      	cmp	r3, #48	; 0x30
 801c96e:	d108      	bne.n	801c982 <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 801c970:	687b      	ldr	r3, [r7, #4]
 801c972:	6a1b      	ldr	r3, [r3, #32]
 801c974:	881b      	ldrh	r3, [r3, #0]
 801c976:	2b00      	cmp	r3, #0
 801c978:	bf0c      	ite	eq
 801c97a:	2301      	moveq	r3, #1
 801c97c:	2300      	movne	r3, #0
 801c97e:	b2db      	uxtb	r3, r3
 801c980:	e0e2      	b.n	801cb48 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 801c982:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c986:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801c98a:	2b10      	cmp	r3, #16
 801c98c:	d115      	bne.n	801c9ba <pb_check_proto3_default_value+0xa2>
 801c98e:	687b      	ldr	r3, [r7, #4]
 801c990:	6a1b      	ldr	r3, [r3, #32]
 801c992:	2b00      	cmp	r3, #0
 801c994:	d011      	beq.n	801c9ba <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 801c996:	687b      	ldr	r3, [r7, #4]
 801c998:	6a1b      	ldr	r3, [r3, #32]
 801c99a:	4618      	mov	r0, r3
 801c99c:	f7ff fe4a 	bl	801c634 <safe_read_bool>
 801c9a0:	4603      	mov	r3, r0
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	bf14      	ite	ne
 801c9a6:	2301      	movne	r3, #1
 801c9a8:	2300      	moveq	r3, #0
 801c9aa:	b2db      	uxtb	r3, r3
 801c9ac:	f083 0301 	eor.w	r3, r3, #1
 801c9b0:	b2db      	uxtb	r3, r3
 801c9b2:	f003 0301 	and.w	r3, r3, #1
 801c9b6:	b2db      	uxtb	r3, r3
 801c9b8:	e0c6      	b.n	801cb48 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->default_value)
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	681b      	ldr	r3, [r3, #0]
 801c9be:	689b      	ldr	r3, [r3, #8]
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	d001      	beq.n	801c9c8 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	e0bf      	b.n	801cb48 <pb_check_proto3_default_value+0x230>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 801c9c8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c9cc:	f003 030f 	and.w	r3, r3, #15
 801c9d0:	2b05      	cmp	r3, #5
 801c9d2:	d81c      	bhi.n	801ca0e <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 801c9d4:	687b      	ldr	r3, [r7, #4]
 801c9d6:	69db      	ldr	r3, [r3, #28]
 801c9d8:	637b      	str	r3, [r7, #52]	; 0x34
            for (i = 0; i < field->data_size; i++)
 801c9da:	2300      	movs	r3, #0
 801c9dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801c9e0:	e00d      	b.n	801c9fe <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 801c9e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c9e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c9e8:	4413      	add	r3, r2
 801c9ea:	781b      	ldrb	r3, [r3, #0]
 801c9ec:	2b00      	cmp	r3, #0
 801c9ee:	d001      	beq.n	801c9f4 <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 801c9f0:	2300      	movs	r3, #0
 801c9f2:	e0a9      	b.n	801cb48 <pb_check_proto3_default_value+0x230>
            for (i = 0; i < field->data_size; i++)
 801c9f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c9f8:	3301      	adds	r3, #1
 801c9fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801c9fe:	687b      	ldr	r3, [r7, #4]
 801ca00:	8a5b      	ldrh	r3, [r3, #18]
 801ca02:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ca06:	429a      	cmp	r2, r3
 801ca08:	d3eb      	bcc.n	801c9e2 <pb_check_proto3_default_value+0xca>
                }
            }

            return true;
 801ca0a:	2301      	movs	r3, #1
 801ca0c:	e09c      	b.n	801cb48 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 801ca0e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ca12:	f003 030f 	and.w	r3, r3, #15
 801ca16:	2b06      	cmp	r3, #6
 801ca18:	d10a      	bne.n	801ca30 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 801ca1a:	687b      	ldr	r3, [r7, #4]
 801ca1c:	69db      	ldr	r3, [r3, #28]
 801ca1e:	63bb      	str	r3, [r7, #56]	; 0x38
            return bytes->size == 0;
 801ca20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca22:	881b      	ldrh	r3, [r3, #0]
 801ca24:	2b00      	cmp	r3, #0
 801ca26:	bf0c      	ite	eq
 801ca28:	2301      	moveq	r3, #1
 801ca2a:	2300      	movne	r3, #0
 801ca2c:	b2db      	uxtb	r3, r3
 801ca2e:	e08b      	b.n	801cb48 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 801ca30:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ca34:	f003 030f 	and.w	r3, r3, #15
 801ca38:	2b07      	cmp	r3, #7
 801ca3a:	d108      	bne.n	801ca4e <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 801ca3c:	687b      	ldr	r3, [r7, #4]
 801ca3e:	69db      	ldr	r3, [r3, #28]
 801ca40:	781b      	ldrb	r3, [r3, #0]
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	bf0c      	ite	eq
 801ca46:	2301      	moveq	r3, #1
 801ca48:	2300      	movne	r3, #0
 801ca4a:	b2db      	uxtb	r3, r3
 801ca4c:	e07c      	b.n	801cb48 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 801ca4e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ca52:	f003 030f 	and.w	r3, r3, #15
 801ca56:	2b0b      	cmp	r3, #11
 801ca58:	d107      	bne.n	801ca6a <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 801ca5a:	687b      	ldr	r3, [r7, #4]
 801ca5c:	8a5b      	ldrh	r3, [r3, #18]
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	bf0c      	ite	eq
 801ca62:	2301      	moveq	r3, #1
 801ca64:	2300      	movne	r3, #0
 801ca66:	b2db      	uxtb	r3, r3
 801ca68:	e06e      	b.n	801cb48 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 801ca6a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ca6e:	f003 030f 	and.w	r3, r3, #15
 801ca72:	2b08      	cmp	r3, #8
 801ca74:	d005      	beq.n	801ca82 <pb_check_proto3_default_value+0x16a>
 801ca76:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ca7a:	f003 030f 	and.w	r3, r3, #15
 801ca7e:	2b09      	cmp	r3, #9
 801ca80:	d161      	bne.n	801cb46 <pb_check_proto3_default_value+0x22e>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 801ca82:	687b      	ldr	r3, [r7, #4]
 801ca84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	69da      	ldr	r2, [r3, #28]
 801ca8a:	f107 030c 	add.w	r3, r7, #12
 801ca8e:	4618      	mov	r0, r3
 801ca90:	f7fd fe37 	bl	801a702 <pb_field_iter_begin>
 801ca94:	4603      	mov	r3, r0
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	d014      	beq.n	801cac4 <pb_check_proto3_default_value+0x1ac>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 801ca9a:	f107 030c 	add.w	r3, r7, #12
 801ca9e:	4618      	mov	r0, r3
 801caa0:	f7ff ff3a 	bl	801c918 <pb_check_proto3_default_value>
 801caa4:	4603      	mov	r3, r0
 801caa6:	f083 0301 	eor.w	r3, r3, #1
 801caaa:	b2db      	uxtb	r3, r3
 801caac:	2b00      	cmp	r3, #0
 801caae:	d001      	beq.n	801cab4 <pb_check_proto3_default_value+0x19c>
                    {
                        return false;
 801cab0:	2300      	movs	r3, #0
 801cab2:	e049      	b.n	801cb48 <pb_check_proto3_default_value+0x230>
                    }
                } while (pb_field_iter_next(&iter));
 801cab4:	f107 030c 	add.w	r3, r7, #12
 801cab8:	4618      	mov	r0, r3
 801caba:	f7fd fe6b 	bl	801a794 <pb_field_iter_next>
 801cabe:	4603      	mov	r3, r0
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	d1ea      	bne.n	801ca9a <pb_check_proto3_default_value+0x182>
            }
            return true;
 801cac4:	2301      	movs	r3, #1
 801cac6:	e03f      	b.n	801cb48 <pb_check_proto3_default_value+0x230>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 801cac8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801cacc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801cad0:	2b80      	cmp	r3, #128	; 0x80
 801cad2:	d107      	bne.n	801cae4 <pb_check_proto3_default_value+0x1cc>
    {
        return field->pData == NULL;
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	69db      	ldr	r3, [r3, #28]
 801cad8:	2b00      	cmp	r3, #0
 801cada:	bf0c      	ite	eq
 801cadc:	2301      	moveq	r3, #1
 801cade:	2300      	movne	r3, #0
 801cae0:	b2db      	uxtb	r3, r3
 801cae2:	e031      	b.n	801cb48 <pb_check_proto3_default_value+0x230>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 801cae4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801cae8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801caec:	2b40      	cmp	r3, #64	; 0x40
 801caee:	d12a      	bne.n	801cb46 <pb_check_proto3_default_value+0x22e>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 801caf0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801caf4:	f003 030f 	and.w	r3, r3, #15
 801caf8:	2b0a      	cmp	r3, #10
 801cafa:	d10a      	bne.n	801cb12 <pb_check_proto3_default_value+0x1fa>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	69db      	ldr	r3, [r3, #28]
 801cb00:	681b      	ldr	r3, [r3, #0]
 801cb02:	63fb      	str	r3, [r7, #60]	; 0x3c
            return extension == NULL;
 801cb04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	bf0c      	ite	eq
 801cb0a:	2301      	moveq	r3, #1
 801cb0c:	2300      	movne	r3, #0
 801cb0e:	b2db      	uxtb	r3, r3
 801cb10:	e01a      	b.n	801cb48 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 801cb12:	687b      	ldr	r3, [r7, #4]
 801cb14:	681b      	ldr	r3, [r3, #0]
 801cb16:	68db      	ldr	r3, [r3, #12]
 801cb18:	4a0d      	ldr	r2, [pc, #52]	; (801cb50 <pb_check_proto3_default_value+0x238>)
 801cb1a:	4293      	cmp	r3, r2
 801cb1c:	d10a      	bne.n	801cb34 <pb_check_proto3_default_value+0x21c>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	69db      	ldr	r3, [r3, #28]
 801cb22:	643b      	str	r3, [r7, #64]	; 0x40
            return pCallback->funcs.encode == NULL;
 801cb24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cb26:	681b      	ldr	r3, [r3, #0]
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	bf0c      	ite	eq
 801cb2c:	2301      	moveq	r3, #1
 801cb2e:	2300      	movne	r3, #0
 801cb30:	b2db      	uxtb	r3, r3
 801cb32:	e009      	b.n	801cb48 <pb_check_proto3_default_value+0x230>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	681b      	ldr	r3, [r3, #0]
 801cb38:	68db      	ldr	r3, [r3, #12]
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	bf0c      	ite	eq
 801cb3e:	2301      	moveq	r3, #1
 801cb40:	2300      	movne	r3, #0
 801cb42:	b2db      	uxtb	r3, r3
 801cb44:	e000      	b.n	801cb48 <pb_check_proto3_default_value+0x230>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 801cb46:	2300      	movs	r3, #0
}
 801cb48:	4618      	mov	r0, r3
 801cb4a:	3748      	adds	r7, #72	; 0x48
 801cb4c:	46bd      	mov	sp, r7
 801cb4e:	bd80      	pop	{r7, pc}
 801cb50:	0801a937 	.word	0x0801a937

0801cb54 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801cb54:	b580      	push	{r7, lr}
 801cb56:	b082      	sub	sp, #8
 801cb58:	af00      	add	r7, sp, #0
 801cb5a:	6078      	str	r0, [r7, #4]
 801cb5c:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 801cb5e:	683b      	ldr	r3, [r7, #0]
 801cb60:	69db      	ldr	r3, [r3, #28]
 801cb62:	2b00      	cmp	r3, #0
 801cb64:	d101      	bne.n	801cb6a <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 801cb66:	2301      	movs	r3, #1
 801cb68:	e061      	b.n	801cc2e <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 801cb6a:	6839      	ldr	r1, [r7, #0]
 801cb6c:	6878      	ldr	r0, [r7, #4]
 801cb6e:	f000 fab9 	bl	801d0e4 <pb_encode_tag_for_field>
 801cb72:	4603      	mov	r3, r0
 801cb74:	f083 0301 	eor.w	r3, r3, #1
 801cb78:	b2db      	uxtb	r3, r3
 801cb7a:	2b00      	cmp	r3, #0
 801cb7c:	d001      	beq.n	801cb82 <encode_basic_field+0x2e>
        return false;
 801cb7e:	2300      	movs	r3, #0
 801cb80:	e055      	b.n	801cc2e <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 801cb82:	683b      	ldr	r3, [r7, #0]
 801cb84:	7d9b      	ldrb	r3, [r3, #22]
 801cb86:	f003 030f 	and.w	r3, r3, #15
 801cb8a:	2b0b      	cmp	r3, #11
 801cb8c:	d844      	bhi.n	801cc18 <encode_basic_field+0xc4>
 801cb8e:	a201      	add	r2, pc, #4	; (adr r2, 801cb94 <encode_basic_field+0x40>)
 801cb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cb94:	0801cbc5 	.word	0x0801cbc5
 801cb98:	0801cbd1 	.word	0x0801cbd1
 801cb9c:	0801cbd1 	.word	0x0801cbd1
 801cba0:	0801cbd1 	.word	0x0801cbd1
 801cba4:	0801cbdd 	.word	0x0801cbdd
 801cba8:	0801cbdd 	.word	0x0801cbdd
 801cbac:	0801cbe9 	.word	0x0801cbe9
 801cbb0:	0801cbf5 	.word	0x0801cbf5
 801cbb4:	0801cc01 	.word	0x0801cc01
 801cbb8:	0801cc01 	.word	0x0801cc01
 801cbbc:	0801cc19 	.word	0x0801cc19
 801cbc0:	0801cc0d 	.word	0x0801cc0d
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 801cbc4:	6839      	ldr	r1, [r7, #0]
 801cbc6:	6878      	ldr	r0, [r7, #4]
 801cbc8:	f000 fb8a 	bl	801d2e0 <pb_enc_bool>
 801cbcc:	4603      	mov	r3, r0
 801cbce:	e02e      	b.n	801cc2e <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 801cbd0:	6839      	ldr	r1, [r7, #0]
 801cbd2:	6878      	ldr	r0, [r7, #4]
 801cbd4:	f000 fb9e 	bl	801d314 <pb_enc_varint>
 801cbd8:	4603      	mov	r3, r0
 801cbda:	e028      	b.n	801cc2e <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 801cbdc:	6839      	ldr	r1, [r7, #0]
 801cbde:	6878      	ldr	r0, [r7, #4]
 801cbe0:	f000 fc5a 	bl	801d498 <pb_enc_fixed>
 801cbe4:	4603      	mov	r3, r0
 801cbe6:	e022      	b.n	801cc2e <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 801cbe8:	6839      	ldr	r1, [r7, #0]
 801cbea:	6878      	ldr	r0, [r7, #4]
 801cbec:	f000 fc82 	bl	801d4f4 <pb_enc_bytes>
 801cbf0:	4603      	mov	r3, r0
 801cbf2:	e01c      	b.n	801cc2e <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 801cbf4:	6839      	ldr	r1, [r7, #0]
 801cbf6:	6878      	ldr	r0, [r7, #4]
 801cbf8:	f000 fcba 	bl	801d570 <pb_enc_string>
 801cbfc:	4603      	mov	r3, r0
 801cbfe:	e016      	b.n	801cc2e <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 801cc00:	6839      	ldr	r1, [r7, #0]
 801cc02:	6878      	ldr	r0, [r7, #4]
 801cc04:	f000 fd12 	bl	801d62c <pb_enc_submessage>
 801cc08:	4603      	mov	r3, r0
 801cc0a:	e010      	b.n	801cc2e <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 801cc0c:	6839      	ldr	r1, [r7, #0]
 801cc0e:	6878      	ldr	r0, [r7, #4]
 801cc10:	f000 fd52 	bl	801d6b8 <pb_enc_fixed_length_bytes>
 801cc14:	4603      	mov	r3, r0
 801cc16:	e00a      	b.n	801cc2e <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 801cc18:	687b      	ldr	r3, [r7, #4]
 801cc1a:	691b      	ldr	r3, [r3, #16]
 801cc1c:	2b00      	cmp	r3, #0
 801cc1e:	d002      	beq.n	801cc26 <encode_basic_field+0xd2>
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	691b      	ldr	r3, [r3, #16]
 801cc24:	e000      	b.n	801cc28 <encode_basic_field+0xd4>
 801cc26:	4b04      	ldr	r3, [pc, #16]	; (801cc38 <encode_basic_field+0xe4>)
 801cc28:	687a      	ldr	r2, [r7, #4]
 801cc2a:	6113      	str	r3, [r2, #16]
 801cc2c:	2300      	movs	r3, #0
    }
}
 801cc2e:	4618      	mov	r0, r3
 801cc30:	3708      	adds	r7, #8
 801cc32:	46bd      	mov	sp, r7
 801cc34:	bd80      	pop	{r7, pc}
 801cc36:	bf00      	nop
 801cc38:	08022190 	.word	0x08022190

0801cc3c <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801cc3c:	b580      	push	{r7, lr}
 801cc3e:	b082      	sub	sp, #8
 801cc40:	af00      	add	r7, sp, #0
 801cc42:	6078      	str	r0, [r7, #4]
 801cc44:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 801cc46:	683b      	ldr	r3, [r7, #0]
 801cc48:	681b      	ldr	r3, [r3, #0]
 801cc4a:	68db      	ldr	r3, [r3, #12]
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	d018      	beq.n	801cc82 <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 801cc50:	683b      	ldr	r3, [r7, #0]
 801cc52:	681b      	ldr	r3, [r3, #0]
 801cc54:	68db      	ldr	r3, [r3, #12]
 801cc56:	683a      	ldr	r2, [r7, #0]
 801cc58:	6879      	ldr	r1, [r7, #4]
 801cc5a:	2000      	movs	r0, #0
 801cc5c:	4798      	blx	r3
 801cc5e:	4603      	mov	r3, r0
 801cc60:	f083 0301 	eor.w	r3, r3, #1
 801cc64:	b2db      	uxtb	r3, r3
 801cc66:	2b00      	cmp	r3, #0
 801cc68:	d00b      	beq.n	801cc82 <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 801cc6a:	687b      	ldr	r3, [r7, #4]
 801cc6c:	691b      	ldr	r3, [r3, #16]
 801cc6e:	2b00      	cmp	r3, #0
 801cc70:	d002      	beq.n	801cc78 <encode_callback_field+0x3c>
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	691b      	ldr	r3, [r3, #16]
 801cc76:	e000      	b.n	801cc7a <encode_callback_field+0x3e>
 801cc78:	4b04      	ldr	r3, [pc, #16]	; (801cc8c <encode_callback_field+0x50>)
 801cc7a:	687a      	ldr	r2, [r7, #4]
 801cc7c:	6113      	str	r3, [r2, #16]
 801cc7e:	2300      	movs	r3, #0
 801cc80:	e000      	b.n	801cc84 <encode_callback_field+0x48>
    }
    return true;
 801cc82:	2301      	movs	r3, #1
}
 801cc84:	4618      	mov	r0, r3
 801cc86:	3708      	adds	r7, #8
 801cc88:	46bd      	mov	sp, r7
 801cc8a:	bd80      	pop	{r7, pc}
 801cc8c:	080221a4 	.word	0x080221a4

0801cc90 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 801cc90:	b580      	push	{r7, lr}
 801cc92:	b082      	sub	sp, #8
 801cc94:	af00      	add	r7, sp, #0
 801cc96:	6078      	str	r0, [r7, #4]
 801cc98:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 801cc9a:	683b      	ldr	r3, [r7, #0]
 801cc9c:	7d9b      	ldrb	r3, [r3, #22]
 801cc9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801cca2:	2b30      	cmp	r3, #48	; 0x30
 801cca4:	d108      	bne.n	801ccb8 <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 801cca6:	683b      	ldr	r3, [r7, #0]
 801cca8:	6a1b      	ldr	r3, [r3, #32]
 801ccaa:	881a      	ldrh	r2, [r3, #0]
 801ccac:	683b      	ldr	r3, [r7, #0]
 801ccae:	8a1b      	ldrh	r3, [r3, #16]
 801ccb0:	429a      	cmp	r2, r3
 801ccb2:	d026      	beq.n	801cd02 <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 801ccb4:	2301      	movs	r3, #1
 801ccb6:	e059      	b.n	801cd6c <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 801ccb8:	683b      	ldr	r3, [r7, #0]
 801ccba:	7d9b      	ldrb	r3, [r3, #22]
 801ccbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801ccc0:	2b10      	cmp	r3, #16
 801ccc2:	d11e      	bne.n	801cd02 <encode_field+0x72>
    {
        if (field->pSize)
 801ccc4:	683b      	ldr	r3, [r7, #0]
 801ccc6:	6a1b      	ldr	r3, [r3, #32]
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	d00c      	beq.n	801cce6 <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 801cccc:	683b      	ldr	r3, [r7, #0]
 801ccce:	6a1b      	ldr	r3, [r3, #32]
 801ccd0:	4618      	mov	r0, r3
 801ccd2:	f7ff fcaf 	bl	801c634 <safe_read_bool>
 801ccd6:	4603      	mov	r3, r0
 801ccd8:	f083 0301 	eor.w	r3, r3, #1
 801ccdc:	b2db      	uxtb	r3, r3
 801ccde:	2b00      	cmp	r3, #0
 801cce0:	d00f      	beq.n	801cd02 <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 801cce2:	2301      	movs	r3, #1
 801cce4:	e042      	b.n	801cd6c <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 801cce6:	683b      	ldr	r3, [r7, #0]
 801cce8:	7d9b      	ldrb	r3, [r3, #22]
 801ccea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	d107      	bne.n	801cd02 <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 801ccf2:	6838      	ldr	r0, [r7, #0]
 801ccf4:	f7ff fe10 	bl	801c918 <pb_check_proto3_default_value>
 801ccf8:	4603      	mov	r3, r0
 801ccfa:	2b00      	cmp	r3, #0
 801ccfc:	d001      	beq.n	801cd02 <encode_field+0x72>
                return true;
 801ccfe:	2301      	movs	r3, #1
 801cd00:	e034      	b.n	801cd6c <encode_field+0xdc>
        }
    }

    if (!field->pData)
 801cd02:	683b      	ldr	r3, [r7, #0]
 801cd04:	69db      	ldr	r3, [r3, #28]
 801cd06:	2b00      	cmp	r3, #0
 801cd08:	d113      	bne.n	801cd32 <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 801cd0a:	683b      	ldr	r3, [r7, #0]
 801cd0c:	7d9b      	ldrb	r3, [r3, #22]
 801cd0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d10b      	bne.n	801cd2e <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	691b      	ldr	r3, [r3, #16]
 801cd1a:	2b00      	cmp	r3, #0
 801cd1c:	d002      	beq.n	801cd24 <encode_field+0x94>
 801cd1e:	687b      	ldr	r3, [r7, #4]
 801cd20:	691b      	ldr	r3, [r3, #16]
 801cd22:	e000      	b.n	801cd26 <encode_field+0x96>
 801cd24:	4b13      	ldr	r3, [pc, #76]	; (801cd74 <encode_field+0xe4>)
 801cd26:	687a      	ldr	r2, [r7, #4]
 801cd28:	6113      	str	r3, [r2, #16]
 801cd2a:	2300      	movs	r3, #0
 801cd2c:	e01e      	b.n	801cd6c <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 801cd2e:	2301      	movs	r3, #1
 801cd30:	e01c      	b.n	801cd6c <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 801cd32:	683b      	ldr	r3, [r7, #0]
 801cd34:	7d9b      	ldrb	r3, [r3, #22]
 801cd36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801cd3a:	2b40      	cmp	r3, #64	; 0x40
 801cd3c:	d105      	bne.n	801cd4a <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 801cd3e:	6839      	ldr	r1, [r7, #0]
 801cd40:	6878      	ldr	r0, [r7, #4]
 801cd42:	f7ff ff7b 	bl	801cc3c <encode_callback_field>
 801cd46:	4603      	mov	r3, r0
 801cd48:	e010      	b.n	801cd6c <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 801cd4a:	683b      	ldr	r3, [r7, #0]
 801cd4c:	7d9b      	ldrb	r3, [r3, #22]
 801cd4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801cd52:	2b20      	cmp	r3, #32
 801cd54:	d105      	bne.n	801cd62 <encode_field+0xd2>
    {
        return encode_array(stream, field);
 801cd56:	6839      	ldr	r1, [r7, #0]
 801cd58:	6878      	ldr	r0, [r7, #4]
 801cd5a:	f7ff fc89 	bl	801c670 <encode_array>
 801cd5e:	4603      	mov	r3, r0
 801cd60:	e004      	b.n	801cd6c <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 801cd62:	6839      	ldr	r1, [r7, #0]
 801cd64:	6878      	ldr	r0, [r7, #4]
 801cd66:	f7ff fef5 	bl	801cb54 <encode_basic_field>
 801cd6a:	4603      	mov	r3, r0
    }
}
 801cd6c:	4618      	mov	r0, r3
 801cd6e:	3708      	adds	r7, #8
 801cd70:	46bd      	mov	sp, r7
 801cd72:	bd80      	pop	{r7, pc}
 801cd74:	080221b4 	.word	0x080221b4

0801cd78 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 801cd78:	b580      	push	{r7, lr}
 801cd7a:	b08c      	sub	sp, #48	; 0x30
 801cd7c:	af00      	add	r7, sp, #0
 801cd7e:	6078      	str	r0, [r7, #4]
 801cd80:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 801cd82:	f107 0308 	add.w	r3, r7, #8
 801cd86:	6839      	ldr	r1, [r7, #0]
 801cd88:	4618      	mov	r0, r3
 801cd8a:	f7fd fdc2 	bl	801a912 <pb_field_iter_begin_extension_const>
 801cd8e:	4603      	mov	r3, r0
 801cd90:	f083 0301 	eor.w	r3, r3, #1
 801cd94:	b2db      	uxtb	r3, r3
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	d00b      	beq.n	801cdb2 <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 801cd9a:	687b      	ldr	r3, [r7, #4]
 801cd9c:	691b      	ldr	r3, [r3, #16]
 801cd9e:	2b00      	cmp	r3, #0
 801cda0:	d002      	beq.n	801cda8 <default_extension_encoder+0x30>
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	691b      	ldr	r3, [r3, #16]
 801cda6:	e000      	b.n	801cdaa <default_extension_encoder+0x32>
 801cda8:	4b07      	ldr	r3, [pc, #28]	; (801cdc8 <default_extension_encoder+0x50>)
 801cdaa:	687a      	ldr	r2, [r7, #4]
 801cdac:	6113      	str	r3, [r2, #16]
 801cdae:	2300      	movs	r3, #0
 801cdb0:	e006      	b.n	801cdc0 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 801cdb2:	f107 0308 	add.w	r3, r7, #8
 801cdb6:	4619      	mov	r1, r3
 801cdb8:	6878      	ldr	r0, [r7, #4]
 801cdba:	f7ff ff69 	bl	801cc90 <encode_field>
 801cdbe:	4603      	mov	r3, r0
}
 801cdc0:	4618      	mov	r0, r3
 801cdc2:	3730      	adds	r7, #48	; 0x30
 801cdc4:	46bd      	mov	sp, r7
 801cdc6:	bd80      	pop	{r7, pc}
 801cdc8:	080221cc 	.word	0x080221cc

0801cdcc <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801cdcc:	b580      	push	{r7, lr}
 801cdce:	b084      	sub	sp, #16
 801cdd0:	af00      	add	r7, sp, #0
 801cdd2:	6078      	str	r0, [r7, #4]
 801cdd4:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 801cdd6:	683b      	ldr	r3, [r7, #0]
 801cdd8:	69db      	ldr	r3, [r3, #28]
 801cdda:	681b      	ldr	r3, [r3, #0]
 801cddc:	60fb      	str	r3, [r7, #12]

    while (extension)
 801cdde:	e01e      	b.n	801ce1e <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 801cde0:	68fb      	ldr	r3, [r7, #12]
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	685b      	ldr	r3, [r3, #4]
 801cde6:	2b00      	cmp	r3, #0
 801cde8:	d008      	beq.n	801cdfc <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 801cdea:	68fb      	ldr	r3, [r7, #12]
 801cdec:	681b      	ldr	r3, [r3, #0]
 801cdee:	685b      	ldr	r3, [r3, #4]
 801cdf0:	68f9      	ldr	r1, [r7, #12]
 801cdf2:	6878      	ldr	r0, [r7, #4]
 801cdf4:	4798      	blx	r3
 801cdf6:	4603      	mov	r3, r0
 801cdf8:	72fb      	strb	r3, [r7, #11]
 801cdfa:	e005      	b.n	801ce08 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 801cdfc:	68f9      	ldr	r1, [r7, #12]
 801cdfe:	6878      	ldr	r0, [r7, #4]
 801ce00:	f7ff ffba 	bl	801cd78 <default_extension_encoder>
 801ce04:	4603      	mov	r3, r0
 801ce06:	72fb      	strb	r3, [r7, #11]

        if (!status)
 801ce08:	7afb      	ldrb	r3, [r7, #11]
 801ce0a:	f083 0301 	eor.w	r3, r3, #1
 801ce0e:	b2db      	uxtb	r3, r3
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	d001      	beq.n	801ce18 <encode_extension_field+0x4c>
            return false;
 801ce14:	2300      	movs	r3, #0
 801ce16:	e006      	b.n	801ce26 <encode_extension_field+0x5a>
        
        extension = extension->next;
 801ce18:	68fb      	ldr	r3, [r7, #12]
 801ce1a:	689b      	ldr	r3, [r3, #8]
 801ce1c:	60fb      	str	r3, [r7, #12]
    while (extension)
 801ce1e:	68fb      	ldr	r3, [r7, #12]
 801ce20:	2b00      	cmp	r3, #0
 801ce22:	d1dd      	bne.n	801cde0 <encode_extension_field+0x14>
    }
    
    return true;
 801ce24:	2301      	movs	r3, #1
}
 801ce26:	4618      	mov	r0, r3
 801ce28:	3710      	adds	r7, #16
 801ce2a:	46bd      	mov	sp, r7
 801ce2c:	bd80      	pop	{r7, pc}

0801ce2e <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 801ce2e:	b580      	push	{r7, lr}
 801ce30:	b08e      	sub	sp, #56	; 0x38
 801ce32:	af00      	add	r7, sp, #0
 801ce34:	60f8      	str	r0, [r7, #12]
 801ce36:	60b9      	str	r1, [r7, #8]
 801ce38:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 801ce3a:	f107 0310 	add.w	r3, r7, #16
 801ce3e:	687a      	ldr	r2, [r7, #4]
 801ce40:	68b9      	ldr	r1, [r7, #8]
 801ce42:	4618      	mov	r0, r3
 801ce44:	f7fd fd51 	bl	801a8ea <pb_field_iter_begin_const>
 801ce48:	4603      	mov	r3, r0
 801ce4a:	f083 0301 	eor.w	r3, r3, #1
 801ce4e:	b2db      	uxtb	r3, r3
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	d001      	beq.n	801ce58 <pb_encode+0x2a>
        return true; /* Empty message type */
 801ce54:	2301      	movs	r3, #1
 801ce56:	e02a      	b.n	801ceae <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 801ce58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ce5c:	f003 030f 	and.w	r3, r3, #15
 801ce60:	2b0a      	cmp	r3, #10
 801ce62:	d10d      	bne.n	801ce80 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 801ce64:	f107 0310 	add.w	r3, r7, #16
 801ce68:	4619      	mov	r1, r3
 801ce6a:	68f8      	ldr	r0, [r7, #12]
 801ce6c:	f7ff ffae 	bl	801cdcc <encode_extension_field>
 801ce70:	4603      	mov	r3, r0
 801ce72:	f083 0301 	eor.w	r3, r3, #1
 801ce76:	b2db      	uxtb	r3, r3
 801ce78:	2b00      	cmp	r3, #0
 801ce7a:	d00f      	beq.n	801ce9c <pb_encode+0x6e>
                return false;
 801ce7c:	2300      	movs	r3, #0
 801ce7e:	e016      	b.n	801ceae <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 801ce80:	f107 0310 	add.w	r3, r7, #16
 801ce84:	4619      	mov	r1, r3
 801ce86:	68f8      	ldr	r0, [r7, #12]
 801ce88:	f7ff ff02 	bl	801cc90 <encode_field>
 801ce8c:	4603      	mov	r3, r0
 801ce8e:	f083 0301 	eor.w	r3, r3, #1
 801ce92:	b2db      	uxtb	r3, r3
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	d001      	beq.n	801ce9c <pb_encode+0x6e>
                return false;
 801ce98:	2300      	movs	r3, #0
 801ce9a:	e008      	b.n	801ceae <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 801ce9c:	f107 0310 	add.w	r3, r7, #16
 801cea0:	4618      	mov	r0, r3
 801cea2:	f7fd fc77 	bl	801a794 <pb_field_iter_next>
 801cea6:	4603      	mov	r3, r0
 801cea8:	2b00      	cmp	r3, #0
 801ceaa:	d1d5      	bne.n	801ce58 <pb_encode+0x2a>
    
    return true;
 801ceac:	2301      	movs	r3, #1
}
 801ceae:	4618      	mov	r0, r3
 801ceb0:	3738      	adds	r7, #56	; 0x38
 801ceb2:	46bd      	mov	sp, r7
 801ceb4:	bd80      	pop	{r7, pc}

0801ceb6 <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 801ceb6:	b580      	push	{r7, lr}
 801ceb8:	b088      	sub	sp, #32
 801ceba:	af00      	add	r7, sp, #0
 801cebc:	60f8      	str	r0, [r7, #12]
 801cebe:	60b9      	str	r1, [r7, #8]
 801cec0:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 801cec2:	2300      	movs	r3, #0
 801cec4:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 801cec6:	68bb      	ldr	r3, [r7, #8]
 801cec8:	b2db      	uxtb	r3, r3
 801ceca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cece:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 801ced0:	68bb      	ldr	r3, [r7, #8]
 801ced2:	09db      	lsrs	r3, r3, #7
 801ced4:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 801ced6:	e013      	b.n	801cf00 <pb_encode_varint_32+0x4a>
    {
        byte |= 0x80;
 801ced8:	7efb      	ldrb	r3, [r7, #27]
 801ceda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801cede:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 801cee0:	69fb      	ldr	r3, [r7, #28]
 801cee2:	1c5a      	adds	r2, r3, #1
 801cee4:	61fa      	str	r2, [r7, #28]
 801cee6:	3320      	adds	r3, #32
 801cee8:	443b      	add	r3, r7
 801ceea:	7efa      	ldrb	r2, [r7, #27]
 801ceec:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 801cef0:	68bb      	ldr	r3, [r7, #8]
 801cef2:	b2db      	uxtb	r3, r3
 801cef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cef8:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 801cefa:	68bb      	ldr	r3, [r7, #8]
 801cefc:	09db      	lsrs	r3, r3, #7
 801cefe:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 801cf00:	69fb      	ldr	r3, [r7, #28]
 801cf02:	2b03      	cmp	r3, #3
 801cf04:	d805      	bhi.n	801cf12 <pb_encode_varint_32+0x5c>
 801cf06:	68bb      	ldr	r3, [r7, #8]
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d1e5      	bne.n	801ced8 <pb_encode_varint_32+0x22>
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	2b00      	cmp	r3, #0
 801cf10:	d1e2      	bne.n	801ced8 <pb_encode_varint_32+0x22>
    }

    if (high)
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	d024      	beq.n	801cf62 <pb_encode_varint_32+0xac>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	b2db      	uxtb	r3, r3
 801cf1c:	011b      	lsls	r3, r3, #4
 801cf1e:	b2db      	uxtb	r3, r3
 801cf20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801cf24:	b2da      	uxtb	r2, r3
 801cf26:	7efb      	ldrb	r3, [r7, #27]
 801cf28:	4313      	orrs	r3, r2
 801cf2a:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	08db      	lsrs	r3, r3, #3
 801cf30:	607b      	str	r3, [r7, #4]

        while (high)
 801cf32:	e013      	b.n	801cf5c <pb_encode_varint_32+0xa6>
        {
            byte |= 0x80;
 801cf34:	7efb      	ldrb	r3, [r7, #27]
 801cf36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801cf3a:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 801cf3c:	69fb      	ldr	r3, [r7, #28]
 801cf3e:	1c5a      	adds	r2, r3, #1
 801cf40:	61fa      	str	r2, [r7, #28]
 801cf42:	3320      	adds	r3, #32
 801cf44:	443b      	add	r3, r7
 801cf46:	7efa      	ldrb	r2, [r7, #27]
 801cf48:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	b2db      	uxtb	r3, r3
 801cf50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cf54:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 801cf56:	687b      	ldr	r3, [r7, #4]
 801cf58:	09db      	lsrs	r3, r3, #7
 801cf5a:	607b      	str	r3, [r7, #4]
        while (high)
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	d1e8      	bne.n	801cf34 <pb_encode_varint_32+0x7e>
        }
    }

    buffer[i++] = byte;
 801cf62:	69fb      	ldr	r3, [r7, #28]
 801cf64:	1c5a      	adds	r2, r3, #1
 801cf66:	61fa      	str	r2, [r7, #28]
 801cf68:	3320      	adds	r3, #32
 801cf6a:	443b      	add	r3, r7
 801cf6c:	7efa      	ldrb	r2, [r7, #27]
 801cf6e:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 801cf72:	f107 0310 	add.w	r3, r7, #16
 801cf76:	69fa      	ldr	r2, [r7, #28]
 801cf78:	4619      	mov	r1, r3
 801cf7a:	68f8      	ldr	r0, [r7, #12]
 801cf7c:	f7ff fb0a 	bl	801c594 <pb_write>
 801cf80:	4603      	mov	r3, r0
}
 801cf82:	4618      	mov	r0, r3
 801cf84:	3720      	adds	r7, #32
 801cf86:	46bd      	mov	sp, r7
 801cf88:	bd80      	pop	{r7, pc}

0801cf8a <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 801cf8a:	b590      	push	{r4, r7, lr}
 801cf8c:	b087      	sub	sp, #28
 801cf8e:	af00      	add	r7, sp, #0
 801cf90:	60f8      	str	r0, [r7, #12]
 801cf92:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 801cf96:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cf9a:	2a80      	cmp	r2, #128	; 0x80
 801cf9c:	f173 0300 	sbcs.w	r3, r3, #0
 801cfa0:	d20a      	bcs.n	801cfb8 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 801cfa2:	783b      	ldrb	r3, [r7, #0]
 801cfa4:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 801cfa6:	f107 0317 	add.w	r3, r7, #23
 801cfaa:	2201      	movs	r2, #1
 801cfac:	4619      	mov	r1, r3
 801cfae:	68f8      	ldr	r0, [r7, #12]
 801cfb0:	f7ff faf0 	bl	801c594 <pb_write>
 801cfb4:	4603      	mov	r3, r0
 801cfb6:	e00f      	b.n	801cfd8 <pb_encode_varint+0x4e>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 801cfb8:	683c      	ldr	r4, [r7, #0]
 801cfba:	e9d7 0100 	ldrd	r0, r1, [r7]
 801cfbe:	f04f 0200 	mov.w	r2, #0
 801cfc2:	f04f 0300 	mov.w	r3, #0
 801cfc6:	000a      	movs	r2, r1
 801cfc8:	2300      	movs	r3, #0
 801cfca:	4613      	mov	r3, r2
 801cfcc:	461a      	mov	r2, r3
 801cfce:	4621      	mov	r1, r4
 801cfd0:	68f8      	ldr	r0, [r7, #12]
 801cfd2:	f7ff ff70 	bl	801ceb6 <pb_encode_varint_32>
 801cfd6:	4603      	mov	r3, r0
#endif
    }
}
 801cfd8:	4618      	mov	r0, r3
 801cfda:	371c      	adds	r7, #28
 801cfdc:	46bd      	mov	sp, r7
 801cfde:	bd90      	pop	{r4, r7, pc}

0801cfe0 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 801cfe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801cfe4:	b08a      	sub	sp, #40	; 0x28
 801cfe6:	af00      	add	r7, sp, #0
 801cfe8:	6178      	str	r0, [r7, #20]
 801cfea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 801cfee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cff2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801cff6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (value < 0)
 801cffa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801cffe:	2b00      	cmp	r3, #0
 801d000:	da15      	bge.n	801d02e <pb_encode_svarint+0x4e>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 801d002:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801d006:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801d00a:	ea00 0402 	and.w	r4, r0, r2
 801d00e:	ea01 0503 	and.w	r5, r1, r3
 801d012:	1923      	adds	r3, r4, r4
 801d014:	603b      	str	r3, [r7, #0]
 801d016:	eb45 0305 	adc.w	r3, r5, r5
 801d01a:	607b      	str	r3, [r7, #4]
 801d01c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d020:	ea6f 0a02 	mvn.w	sl, r2
 801d024:	ea6f 0b03 	mvn.w	fp, r3
 801d028:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 801d02c:	e007      	b.n	801d03e <pb_encode_svarint+0x5e>
    else
        zigzagged = (pb_uint64_t)value << 1;
 801d02e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801d032:	eb12 0802 	adds.w	r8, r2, r2
 801d036:	eb43 0903 	adc.w	r9, r3, r3
 801d03a:	e9c7 8908 	strd	r8, r9, [r7, #32]
    
    return pb_encode_varint(stream, zigzagged);
 801d03e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d042:	6978      	ldr	r0, [r7, #20]
 801d044:	f7ff ffa1 	bl	801cf8a <pb_encode_varint>
 801d048:	4603      	mov	r3, r0
}
 801d04a:	4618      	mov	r0, r3
 801d04c:	3728      	adds	r7, #40	; 0x28
 801d04e:	46bd      	mov	sp, r7
 801d050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801d054 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 801d054:	b580      	push	{r7, lr}
 801d056:	b082      	sub	sp, #8
 801d058:	af00      	add	r7, sp, #0
 801d05a:	6078      	str	r0, [r7, #4]
 801d05c:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 801d05e:	2204      	movs	r2, #4
 801d060:	6839      	ldr	r1, [r7, #0]
 801d062:	6878      	ldr	r0, [r7, #4]
 801d064:	f7ff fa96 	bl	801c594 <pb_write>
 801d068:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 801d06a:	4618      	mov	r0, r3
 801d06c:	3708      	adds	r7, #8
 801d06e:	46bd      	mov	sp, r7
 801d070:	bd80      	pop	{r7, pc}

0801d072 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 801d072:	b580      	push	{r7, lr}
 801d074:	b082      	sub	sp, #8
 801d076:	af00      	add	r7, sp, #0
 801d078:	6078      	str	r0, [r7, #4]
 801d07a:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 801d07c:	2208      	movs	r2, #8
 801d07e:	6839      	ldr	r1, [r7, #0]
 801d080:	6878      	ldr	r0, [r7, #4]
 801d082:	f7ff fa87 	bl	801c594 <pb_write>
 801d086:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 801d088:	4618      	mov	r0, r3
 801d08a:	3708      	adds	r7, #8
 801d08c:	46bd      	mov	sp, r7
 801d08e:	bd80      	pop	{r7, pc}

0801d090 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 801d090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d094:	b088      	sub	sp, #32
 801d096:	af00      	add	r7, sp, #0
 801d098:	6178      	str	r0, [r7, #20]
 801d09a:	460b      	mov	r3, r1
 801d09c:	60fa      	str	r2, [r7, #12]
 801d09e:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 801d0a0:	68fb      	ldr	r3, [r7, #12]
 801d0a2:	2200      	movs	r2, #0
 801d0a4:	469a      	mov	sl, r3
 801d0a6:	4693      	mov	fp, r2
 801d0a8:	ea4f 755a 	mov.w	r5, sl, lsr #29
 801d0ac:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 801d0b0:	7cfb      	ldrb	r3, [r7, #19]
 801d0b2:	2200      	movs	r2, #0
 801d0b4:	4698      	mov	r8, r3
 801d0b6:	4691      	mov	r9, r2
 801d0b8:	ea44 0308 	orr.w	r3, r4, r8
 801d0bc:	603b      	str	r3, [r7, #0]
 801d0be:	ea45 0309 	orr.w	r3, r5, r9
 801d0c2:	607b      	str	r3, [r7, #4]
 801d0c4:	e9d7 3400 	ldrd	r3, r4, [r7]
 801d0c8:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 801d0cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801d0d0:	6978      	ldr	r0, [r7, #20]
 801d0d2:	f7ff ff5a 	bl	801cf8a <pb_encode_varint>
 801d0d6:	4603      	mov	r3, r0
}
 801d0d8:	4618      	mov	r0, r3
 801d0da:	3720      	adds	r7, #32
 801d0dc:	46bd      	mov	sp, r7
 801d0de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0801d0e4 <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 801d0e4:	b580      	push	{r7, lr}
 801d0e6:	b084      	sub	sp, #16
 801d0e8:	af00      	add	r7, sp, #0
 801d0ea:	6078      	str	r0, [r7, #4]
 801d0ec:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 801d0ee:	683b      	ldr	r3, [r7, #0]
 801d0f0:	7d9b      	ldrb	r3, [r3, #22]
 801d0f2:	f003 030f 	and.w	r3, r3, #15
 801d0f6:	2b0b      	cmp	r3, #11
 801d0f8:	d826      	bhi.n	801d148 <pb_encode_tag_for_field+0x64>
 801d0fa:	a201      	add	r2, pc, #4	; (adr r2, 801d100 <pb_encode_tag_for_field+0x1c>)
 801d0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d100:	0801d131 	.word	0x0801d131
 801d104:	0801d131 	.word	0x0801d131
 801d108:	0801d131 	.word	0x0801d131
 801d10c:	0801d131 	.word	0x0801d131
 801d110:	0801d137 	.word	0x0801d137
 801d114:	0801d13d 	.word	0x0801d13d
 801d118:	0801d143 	.word	0x0801d143
 801d11c:	0801d143 	.word	0x0801d143
 801d120:	0801d143 	.word	0x0801d143
 801d124:	0801d143 	.word	0x0801d143
 801d128:	0801d149 	.word	0x0801d149
 801d12c:	0801d143 	.word	0x0801d143
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 801d130:	2300      	movs	r3, #0
 801d132:	73fb      	strb	r3, [r7, #15]
            break;
 801d134:	e014      	b.n	801d160 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 801d136:	2305      	movs	r3, #5
 801d138:	73fb      	strb	r3, [r7, #15]
            break;
 801d13a:	e011      	b.n	801d160 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 801d13c:	2301      	movs	r3, #1
 801d13e:	73fb      	strb	r3, [r7, #15]
            break;
 801d140:	e00e      	b.n	801d160 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 801d142:	2302      	movs	r3, #2
 801d144:	73fb      	strb	r3, [r7, #15]
            break;
 801d146:	e00b      	b.n	801d160 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 801d148:	687b      	ldr	r3, [r7, #4]
 801d14a:	691b      	ldr	r3, [r3, #16]
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	d002      	beq.n	801d156 <pb_encode_tag_for_field+0x72>
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	691b      	ldr	r3, [r3, #16]
 801d154:	e000      	b.n	801d158 <pb_encode_tag_for_field+0x74>
 801d156:	4b09      	ldr	r3, [pc, #36]	; (801d17c <pb_encode_tag_for_field+0x98>)
 801d158:	687a      	ldr	r2, [r7, #4]
 801d15a:	6113      	str	r3, [r2, #16]
 801d15c:	2300      	movs	r3, #0
 801d15e:	e008      	b.n	801d172 <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 801d160:	683b      	ldr	r3, [r7, #0]
 801d162:	8a1b      	ldrh	r3, [r3, #16]
 801d164:	461a      	mov	r2, r3
 801d166:	7bfb      	ldrb	r3, [r7, #15]
 801d168:	4619      	mov	r1, r3
 801d16a:	6878      	ldr	r0, [r7, #4]
 801d16c:	f7ff ff90 	bl	801d090 <pb_encode_tag>
 801d170:	4603      	mov	r3, r0
}
 801d172:	4618      	mov	r0, r3
 801d174:	3710      	adds	r7, #16
 801d176:	46bd      	mov	sp, r7
 801d178:	bd80      	pop	{r7, pc}
 801d17a:	bf00      	nop
 801d17c:	08022190 	.word	0x08022190

0801d180 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 801d180:	b5b0      	push	{r4, r5, r7, lr}
 801d182:	b084      	sub	sp, #16
 801d184:	af00      	add	r7, sp, #0
 801d186:	60f8      	str	r0, [r7, #12]
 801d188:	60b9      	str	r1, [r7, #8]
 801d18a:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 801d18c:	687b      	ldr	r3, [r7, #4]
 801d18e:	2200      	movs	r2, #0
 801d190:	461c      	mov	r4, r3
 801d192:	4615      	mov	r5, r2
 801d194:	4622      	mov	r2, r4
 801d196:	462b      	mov	r3, r5
 801d198:	68f8      	ldr	r0, [r7, #12]
 801d19a:	f7ff fef6 	bl	801cf8a <pb_encode_varint>
 801d19e:	4603      	mov	r3, r0
 801d1a0:	f083 0301 	eor.w	r3, r3, #1
 801d1a4:	b2db      	uxtb	r3, r3
 801d1a6:	2b00      	cmp	r3, #0
 801d1a8:	d001      	beq.n	801d1ae <pb_encode_string+0x2e>
        return false;
 801d1aa:	2300      	movs	r3, #0
 801d1ac:	e005      	b.n	801d1ba <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 801d1ae:	687a      	ldr	r2, [r7, #4]
 801d1b0:	68b9      	ldr	r1, [r7, #8]
 801d1b2:	68f8      	ldr	r0, [r7, #12]
 801d1b4:	f7ff f9ee 	bl	801c594 <pb_write>
 801d1b8:	4603      	mov	r3, r0
}
 801d1ba:	4618      	mov	r0, r3
 801d1bc:	3710      	adds	r7, #16
 801d1be:	46bd      	mov	sp, r7
 801d1c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801d1c4 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 801d1c4:	b5b0      	push	{r4, r5, r7, lr}
 801d1c6:	b08c      	sub	sp, #48	; 0x30
 801d1c8:	af00      	add	r7, sp, #0
 801d1ca:	60f8      	str	r0, [r7, #12]
 801d1cc:	60b9      	str	r1, [r7, #8]
 801d1ce:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 801d1d0:	f107 0314 	add.w	r3, r7, #20
 801d1d4:	2200      	movs	r2, #0
 801d1d6:	601a      	str	r2, [r3, #0]
 801d1d8:	605a      	str	r2, [r3, #4]
 801d1da:	609a      	str	r2, [r3, #8]
 801d1dc:	60da      	str	r2, [r3, #12]
 801d1de:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 801d1e0:	f107 0314 	add.w	r3, r7, #20
 801d1e4:	687a      	ldr	r2, [r7, #4]
 801d1e6:	68b9      	ldr	r1, [r7, #8]
 801d1e8:	4618      	mov	r0, r3
 801d1ea:	f7ff fe20 	bl	801ce2e <pb_encode>
 801d1ee:	4603      	mov	r3, r0
 801d1f0:	f083 0301 	eor.w	r3, r3, #1
 801d1f4:	b2db      	uxtb	r3, r3
 801d1f6:	2b00      	cmp	r3, #0
 801d1f8:	d004      	beq.n	801d204 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 801d1fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d1fc:	68fb      	ldr	r3, [r7, #12]
 801d1fe:	611a      	str	r2, [r3, #16]
#endif
        return false;
 801d200:	2300      	movs	r3, #0
 801d202:	e065      	b.n	801d2d0 <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 801d204:	6a3b      	ldr	r3, [r7, #32]
 801d206:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 801d208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d20a:	2200      	movs	r2, #0
 801d20c:	461c      	mov	r4, r3
 801d20e:	4615      	mov	r5, r2
 801d210:	4622      	mov	r2, r4
 801d212:	462b      	mov	r3, r5
 801d214:	68f8      	ldr	r0, [r7, #12]
 801d216:	f7ff feb8 	bl	801cf8a <pb_encode_varint>
 801d21a:	4603      	mov	r3, r0
 801d21c:	f083 0301 	eor.w	r3, r3, #1
 801d220:	b2db      	uxtb	r3, r3
 801d222:	2b00      	cmp	r3, #0
 801d224:	d001      	beq.n	801d22a <pb_encode_submessage+0x66>
        return false;
 801d226:	2300      	movs	r3, #0
 801d228:	e052      	b.n	801d2d0 <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 801d22a:	68fb      	ldr	r3, [r7, #12]
 801d22c:	681b      	ldr	r3, [r3, #0]
 801d22e:	2b00      	cmp	r3, #0
 801d230:	d106      	bne.n	801d240 <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 801d232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d234:	2100      	movs	r1, #0
 801d236:	68f8      	ldr	r0, [r7, #12]
 801d238:	f7ff f9ac 	bl	801c594 <pb_write>
 801d23c:	4603      	mov	r3, r0
 801d23e:	e047      	b.n	801d2d0 <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 801d240:	68fb      	ldr	r3, [r7, #12]
 801d242:	68da      	ldr	r2, [r3, #12]
 801d244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d246:	441a      	add	r2, r3
 801d248:	68fb      	ldr	r3, [r7, #12]
 801d24a:	689b      	ldr	r3, [r3, #8]
 801d24c:	429a      	cmp	r2, r3
 801d24e:	d90b      	bls.n	801d268 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 801d250:	68fb      	ldr	r3, [r7, #12]
 801d252:	691b      	ldr	r3, [r3, #16]
 801d254:	2b00      	cmp	r3, #0
 801d256:	d002      	beq.n	801d25e <pb_encode_submessage+0x9a>
 801d258:	68fb      	ldr	r3, [r7, #12]
 801d25a:	691b      	ldr	r3, [r3, #16]
 801d25c:	e000      	b.n	801d260 <pb_encode_submessage+0x9c>
 801d25e:	4b1e      	ldr	r3, [pc, #120]	; (801d2d8 <pb_encode_submessage+0x114>)
 801d260:	68fa      	ldr	r2, [r7, #12]
 801d262:	6113      	str	r3, [r2, #16]
 801d264:	2300      	movs	r3, #0
 801d266:	e033      	b.n	801d2d0 <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 801d268:	68fb      	ldr	r3, [r7, #12]
 801d26a:	681b      	ldr	r3, [r3, #0]
 801d26c:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 801d26e:	68fb      	ldr	r3, [r7, #12]
 801d270:	685b      	ldr	r3, [r3, #4]
 801d272:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 801d274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d276:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 801d278:	2300      	movs	r3, #0
 801d27a:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 801d27c:	2300      	movs	r3, #0
 801d27e:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 801d280:	f107 0314 	add.w	r3, r7, #20
 801d284:	687a      	ldr	r2, [r7, #4]
 801d286:	68b9      	ldr	r1, [r7, #8]
 801d288:	4618      	mov	r0, r3
 801d28a:	f7ff fdd0 	bl	801ce2e <pb_encode>
 801d28e:	4603      	mov	r3, r0
 801d290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 801d294:	68fb      	ldr	r3, [r7, #12]
 801d296:	68da      	ldr	r2, [r3, #12]
 801d298:	6a3b      	ldr	r3, [r7, #32]
 801d29a:	441a      	add	r2, r3
 801d29c:	68fb      	ldr	r3, [r7, #12]
 801d29e:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 801d2a0:	69ba      	ldr	r2, [r7, #24]
 801d2a2:	68fb      	ldr	r3, [r7, #12]
 801d2a4:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 801d2a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d2a8:	68fb      	ldr	r3, [r7, #12]
 801d2aa:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 801d2ac:	6a3b      	ldr	r3, [r7, #32]
 801d2ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d2b0:	429a      	cmp	r2, r3
 801d2b2:	d00b      	beq.n	801d2cc <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 801d2b4:	68fb      	ldr	r3, [r7, #12]
 801d2b6:	691b      	ldr	r3, [r3, #16]
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	d002      	beq.n	801d2c2 <pb_encode_submessage+0xfe>
 801d2bc:	68fb      	ldr	r3, [r7, #12]
 801d2be:	691b      	ldr	r3, [r3, #16]
 801d2c0:	e000      	b.n	801d2c4 <pb_encode_submessage+0x100>
 801d2c2:	4b06      	ldr	r3, [pc, #24]	; (801d2dc <pb_encode_submessage+0x118>)
 801d2c4:	68fa      	ldr	r2, [r7, #12]
 801d2c6:	6113      	str	r3, [r2, #16]
 801d2c8:	2300      	movs	r3, #0
 801d2ca:	e001      	b.n	801d2d0 <pb_encode_submessage+0x10c>
    
    return status;
 801d2cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801d2d0:	4618      	mov	r0, r3
 801d2d2:	3730      	adds	r7, #48	; 0x30
 801d2d4:	46bd      	mov	sp, r7
 801d2d6:	bdb0      	pop	{r4, r5, r7, pc}
 801d2d8:	08022158 	.word	0x08022158
 801d2dc:	080221e0 	.word	0x080221e0

0801d2e0 <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d2e0:	b5b0      	push	{r4, r5, r7, lr}
 801d2e2:	b084      	sub	sp, #16
 801d2e4:	af00      	add	r7, sp, #0
 801d2e6:	6078      	str	r0, [r7, #4]
 801d2e8:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 801d2ea:	683b      	ldr	r3, [r7, #0]
 801d2ec:	69db      	ldr	r3, [r3, #28]
 801d2ee:	4618      	mov	r0, r3
 801d2f0:	f7ff f9a0 	bl	801c634 <safe_read_bool>
 801d2f4:	4603      	mov	r3, r0
 801d2f6:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 801d2f8:	68fb      	ldr	r3, [r7, #12]
 801d2fa:	2200      	movs	r2, #0
 801d2fc:	461c      	mov	r4, r3
 801d2fe:	4615      	mov	r5, r2
 801d300:	4622      	mov	r2, r4
 801d302:	462b      	mov	r3, r5
 801d304:	6878      	ldr	r0, [r7, #4]
 801d306:	f7ff fe40 	bl	801cf8a <pb_encode_varint>
 801d30a:	4603      	mov	r3, r0
}
 801d30c:	4618      	mov	r0, r3
 801d30e:	3710      	adds	r7, #16
 801d310:	46bd      	mov	sp, r7
 801d312:	bdb0      	pop	{r4, r5, r7, pc}

0801d314 <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d318:	b08c      	sub	sp, #48	; 0x30
 801d31a:	af00      	add	r7, sp, #0
 801d31c:	61f8      	str	r0, [r7, #28]
 801d31e:	61b9      	str	r1, [r7, #24]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 801d320:	69bb      	ldr	r3, [r7, #24]
 801d322:	7d9b      	ldrb	r3, [r3, #22]
 801d324:	f003 030f 	and.w	r3, r3, #15
 801d328:	2b02      	cmp	r3, #2
 801d32a:	d152      	bne.n	801d3d2 <pb_enc_varint+0xbe>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 801d32c:	f04f 0200 	mov.w	r2, #0
 801d330:	f04f 0300 	mov.w	r3, #0
 801d334:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

        if (field->data_size == sizeof(uint_least8_t))
 801d338:	69bb      	ldr	r3, [r7, #24]
 801d33a:	8a5b      	ldrh	r3, [r3, #18]
 801d33c:	2b01      	cmp	r3, #1
 801d33e:	d10b      	bne.n	801d358 <pb_enc_varint+0x44>
            value = *(const uint_least8_t*)field->pData;
 801d340:	69bb      	ldr	r3, [r7, #24]
 801d342:	69db      	ldr	r3, [r3, #28]
 801d344:	781b      	ldrb	r3, [r3, #0]
 801d346:	b2db      	uxtb	r3, r3
 801d348:	2200      	movs	r2, #0
 801d34a:	613b      	str	r3, [r7, #16]
 801d34c:	617a      	str	r2, [r7, #20]
 801d34e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801d352:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 801d356:	e035      	b.n	801d3c4 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint_least16_t))
 801d358:	69bb      	ldr	r3, [r7, #24]
 801d35a:	8a5b      	ldrh	r3, [r3, #18]
 801d35c:	2b02      	cmp	r3, #2
 801d35e:	d10b      	bne.n	801d378 <pb_enc_varint+0x64>
            value = *(const uint_least16_t*)field->pData;
 801d360:	69bb      	ldr	r3, [r7, #24]
 801d362:	69db      	ldr	r3, [r3, #28]
 801d364:	881b      	ldrh	r3, [r3, #0]
 801d366:	b29b      	uxth	r3, r3
 801d368:	2200      	movs	r2, #0
 801d36a:	60bb      	str	r3, [r7, #8]
 801d36c:	60fa      	str	r2, [r7, #12]
 801d36e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801d372:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 801d376:	e025      	b.n	801d3c4 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint32_t))
 801d378:	69bb      	ldr	r3, [r7, #24]
 801d37a:	8a5b      	ldrh	r3, [r3, #18]
 801d37c:	2b04      	cmp	r3, #4
 801d37e:	d10a      	bne.n	801d396 <pb_enc_varint+0x82>
            value = *(const uint32_t*)field->pData;
 801d380:	69bb      	ldr	r3, [r7, #24]
 801d382:	69db      	ldr	r3, [r3, #28]
 801d384:	681b      	ldr	r3, [r3, #0]
 801d386:	2200      	movs	r2, #0
 801d388:	603b      	str	r3, [r7, #0]
 801d38a:	607a      	str	r2, [r7, #4]
 801d38c:	e9d7 3400 	ldrd	r3, r4, [r7]
 801d390:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 801d394:	e016      	b.n	801d3c4 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(pb_uint64_t))
 801d396:	69bb      	ldr	r3, [r7, #24]
 801d398:	8a5b      	ldrh	r3, [r3, #18]
 801d39a:	2b08      	cmp	r3, #8
 801d39c:	d106      	bne.n	801d3ac <pb_enc_varint+0x98>
            value = *(const pb_uint64_t*)field->pData;
 801d39e:	69bb      	ldr	r3, [r7, #24]
 801d3a0:	69db      	ldr	r3, [r3, #28]
 801d3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801d3aa:	e00b      	b.n	801d3c4 <pb_enc_varint+0xb0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 801d3ac:	69fb      	ldr	r3, [r7, #28]
 801d3ae:	691b      	ldr	r3, [r3, #16]
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	d002      	beq.n	801d3ba <pb_enc_varint+0xa6>
 801d3b4:	69fb      	ldr	r3, [r7, #28]
 801d3b6:	691b      	ldr	r3, [r3, #16]
 801d3b8:	e000      	b.n	801d3bc <pb_enc_varint+0xa8>
 801d3ba:	4b36      	ldr	r3, [pc, #216]	; (801d494 <pb_enc_varint+0x180>)
 801d3bc:	69fa      	ldr	r2, [r7, #28]
 801d3be:	6113      	str	r3, [r2, #16]
 801d3c0:	2300      	movs	r3, #0
 801d3c2:	e061      	b.n	801d488 <pb_enc_varint+0x174>

        return pb_encode_varint(stream, value);
 801d3c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801d3c8:	69f8      	ldr	r0, [r7, #28]
 801d3ca:	f7ff fdde 	bl	801cf8a <pb_encode_varint>
 801d3ce:	4603      	mov	r3, r0
 801d3d0:	e05a      	b.n	801d488 <pb_enc_varint+0x174>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 801d3d2:	f04f 0200 	mov.w	r2, #0
 801d3d6:	f04f 0300 	mov.w	r3, #0
 801d3da:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (field->data_size == sizeof(int_least8_t))
 801d3de:	69bb      	ldr	r3, [r7, #24]
 801d3e0:	8a5b      	ldrh	r3, [r3, #18]
 801d3e2:	2b01      	cmp	r3, #1
 801d3e4:	d10a      	bne.n	801d3fc <pb_enc_varint+0xe8>
            value = *(const int_least8_t*)field->pData;
 801d3e6:	69bb      	ldr	r3, [r7, #24]
 801d3e8:	69db      	ldr	r3, [r3, #28]
 801d3ea:	f993 3000 	ldrsb.w	r3, [r3]
 801d3ee:	b25b      	sxtb	r3, r3
 801d3f0:	17da      	asrs	r2, r3, #31
 801d3f2:	469a      	mov	sl, r3
 801d3f4:	4693      	mov	fp, r2
 801d3f6:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 801d3fa:	e032      	b.n	801d462 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int_least16_t))
 801d3fc:	69bb      	ldr	r3, [r7, #24]
 801d3fe:	8a5b      	ldrh	r3, [r3, #18]
 801d400:	2b02      	cmp	r3, #2
 801d402:	d10a      	bne.n	801d41a <pb_enc_varint+0x106>
            value = *(const int_least16_t*)field->pData;
 801d404:	69bb      	ldr	r3, [r7, #24]
 801d406:	69db      	ldr	r3, [r3, #28]
 801d408:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d40c:	b21b      	sxth	r3, r3
 801d40e:	17da      	asrs	r2, r3, #31
 801d410:	4698      	mov	r8, r3
 801d412:	4691      	mov	r9, r2
 801d414:	e9c7 8908 	strd	r8, r9, [r7, #32]
 801d418:	e023      	b.n	801d462 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int32_t))
 801d41a:	69bb      	ldr	r3, [r7, #24]
 801d41c:	8a5b      	ldrh	r3, [r3, #18]
 801d41e:	2b04      	cmp	r3, #4
 801d420:	d108      	bne.n	801d434 <pb_enc_varint+0x120>
            value = *(const int32_t*)field->pData;
 801d422:	69bb      	ldr	r3, [r7, #24]
 801d424:	69db      	ldr	r3, [r3, #28]
 801d426:	681b      	ldr	r3, [r3, #0]
 801d428:	17da      	asrs	r2, r3, #31
 801d42a:	461c      	mov	r4, r3
 801d42c:	4615      	mov	r5, r2
 801d42e:	e9c7 4508 	strd	r4, r5, [r7, #32]
 801d432:	e016      	b.n	801d462 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(pb_int64_t))
 801d434:	69bb      	ldr	r3, [r7, #24]
 801d436:	8a5b      	ldrh	r3, [r3, #18]
 801d438:	2b08      	cmp	r3, #8
 801d43a:	d106      	bne.n	801d44a <pb_enc_varint+0x136>
            value = *(const pb_int64_t*)field->pData;
 801d43c:	69bb      	ldr	r3, [r7, #24]
 801d43e:	69db      	ldr	r3, [r3, #28]
 801d440:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d444:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801d448:	e00b      	b.n	801d462 <pb_enc_varint+0x14e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 801d44a:	69fb      	ldr	r3, [r7, #28]
 801d44c:	691b      	ldr	r3, [r3, #16]
 801d44e:	2b00      	cmp	r3, #0
 801d450:	d002      	beq.n	801d458 <pb_enc_varint+0x144>
 801d452:	69fb      	ldr	r3, [r7, #28]
 801d454:	691b      	ldr	r3, [r3, #16]
 801d456:	e000      	b.n	801d45a <pb_enc_varint+0x146>
 801d458:	4b0e      	ldr	r3, [pc, #56]	; (801d494 <pb_enc_varint+0x180>)
 801d45a:	69fa      	ldr	r2, [r7, #28]
 801d45c:	6113      	str	r3, [r2, #16]
 801d45e:	2300      	movs	r3, #0
 801d460:	e012      	b.n	801d488 <pb_enc_varint+0x174>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 801d462:	69bb      	ldr	r3, [r7, #24]
 801d464:	7d9b      	ldrb	r3, [r3, #22]
 801d466:	f003 030f 	and.w	r3, r3, #15
 801d46a:	2b03      	cmp	r3, #3
 801d46c:	d106      	bne.n	801d47c <pb_enc_varint+0x168>
            return pb_encode_svarint(stream, value);
 801d46e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d472:	69f8      	ldr	r0, [r7, #28]
 801d474:	f7ff fdb4 	bl	801cfe0 <pb_encode_svarint>
 801d478:	4603      	mov	r3, r0
 801d47a:	e005      	b.n	801d488 <pb_enc_varint+0x174>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 801d47c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d480:	69f8      	ldr	r0, [r7, #28]
 801d482:	f7ff fd82 	bl	801cf8a <pb_encode_varint>
 801d486:	4603      	mov	r3, r0

    }
}
 801d488:	4618      	mov	r0, r3
 801d48a:	3730      	adds	r7, #48	; 0x30
 801d48c:	46bd      	mov	sp, r7
 801d48e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d492:	bf00      	nop
 801d494:	080221f4 	.word	0x080221f4

0801d498 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d498:	b580      	push	{r7, lr}
 801d49a:	b082      	sub	sp, #8
 801d49c:	af00      	add	r7, sp, #0
 801d49e:	6078      	str	r0, [r7, #4]
 801d4a0:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 801d4a2:	683b      	ldr	r3, [r7, #0]
 801d4a4:	8a5b      	ldrh	r3, [r3, #18]
 801d4a6:	2b04      	cmp	r3, #4
 801d4a8:	d107      	bne.n	801d4ba <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 801d4aa:	683b      	ldr	r3, [r7, #0]
 801d4ac:	69db      	ldr	r3, [r3, #28]
 801d4ae:	4619      	mov	r1, r3
 801d4b0:	6878      	ldr	r0, [r7, #4]
 801d4b2:	f7ff fdcf 	bl	801d054 <pb_encode_fixed32>
 801d4b6:	4603      	mov	r3, r0
 801d4b8:	e016      	b.n	801d4e8 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 801d4ba:	683b      	ldr	r3, [r7, #0]
 801d4bc:	8a5b      	ldrh	r3, [r3, #18]
 801d4be:	2b08      	cmp	r3, #8
 801d4c0:	d107      	bne.n	801d4d2 <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 801d4c2:	683b      	ldr	r3, [r7, #0]
 801d4c4:	69db      	ldr	r3, [r3, #28]
 801d4c6:	4619      	mov	r1, r3
 801d4c8:	6878      	ldr	r0, [r7, #4]
 801d4ca:	f7ff fdd2 	bl	801d072 <pb_encode_fixed64>
 801d4ce:	4603      	mov	r3, r0
 801d4d0:	e00a      	b.n	801d4e8 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 801d4d2:	687b      	ldr	r3, [r7, #4]
 801d4d4:	691b      	ldr	r3, [r3, #16]
 801d4d6:	2b00      	cmp	r3, #0
 801d4d8:	d002      	beq.n	801d4e0 <pb_enc_fixed+0x48>
 801d4da:	687b      	ldr	r3, [r7, #4]
 801d4dc:	691b      	ldr	r3, [r3, #16]
 801d4de:	e000      	b.n	801d4e2 <pb_enc_fixed+0x4a>
 801d4e0:	4b03      	ldr	r3, [pc, #12]	; (801d4f0 <pb_enc_fixed+0x58>)
 801d4e2:	687a      	ldr	r2, [r7, #4]
 801d4e4:	6113      	str	r3, [r2, #16]
 801d4e6:	2300      	movs	r3, #0
    }
}
 801d4e8:	4618      	mov	r0, r3
 801d4ea:	3708      	adds	r7, #8
 801d4ec:	46bd      	mov	sp, r7
 801d4ee:	bd80      	pop	{r7, pc}
 801d4f0:	080221f4 	.word	0x080221f4

0801d4f4 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d4f4:	b580      	push	{r7, lr}
 801d4f6:	b084      	sub	sp, #16
 801d4f8:	af00      	add	r7, sp, #0
 801d4fa:	6078      	str	r0, [r7, #4]
 801d4fc:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 801d4fe:	2300      	movs	r3, #0
 801d500:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 801d502:	683b      	ldr	r3, [r7, #0]
 801d504:	69db      	ldr	r3, [r3, #28]
 801d506:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 801d508:	68fb      	ldr	r3, [r7, #12]
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	d106      	bne.n	801d51c <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 801d50e:	2200      	movs	r2, #0
 801d510:	2100      	movs	r1, #0
 801d512:	6878      	ldr	r0, [r7, #4]
 801d514:	f7ff fe34 	bl	801d180 <pb_encode_string>
 801d518:	4603      	mov	r3, r0
 801d51a:	e022      	b.n	801d562 <pb_enc_bytes+0x6e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 801d51c:	683b      	ldr	r3, [r7, #0]
 801d51e:	7d9b      	ldrb	r3, [r3, #22]
 801d520:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801d524:	2b00      	cmp	r3, #0
 801d526:	d113      	bne.n	801d550 <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 801d528:	68fb      	ldr	r3, [r7, #12]
 801d52a:	881b      	ldrh	r3, [r3, #0]
 801d52c:	461a      	mov	r2, r3
 801d52e:	683b      	ldr	r3, [r7, #0]
 801d530:	8a5b      	ldrh	r3, [r3, #18]
 801d532:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 801d534:	429a      	cmp	r2, r3
 801d536:	d90b      	bls.n	801d550 <pb_enc_bytes+0x5c>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 801d538:	687b      	ldr	r3, [r7, #4]
 801d53a:	691b      	ldr	r3, [r3, #16]
 801d53c:	2b00      	cmp	r3, #0
 801d53e:	d002      	beq.n	801d546 <pb_enc_bytes+0x52>
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	691b      	ldr	r3, [r3, #16]
 801d544:	e000      	b.n	801d548 <pb_enc_bytes+0x54>
 801d546:	4b09      	ldr	r3, [pc, #36]	; (801d56c <pb_enc_bytes+0x78>)
 801d548:	687a      	ldr	r2, [r7, #4]
 801d54a:	6113      	str	r3, [r2, #16]
 801d54c:	2300      	movs	r3, #0
 801d54e:	e008      	b.n	801d562 <pb_enc_bytes+0x6e>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 801d550:	68fb      	ldr	r3, [r7, #12]
 801d552:	1c99      	adds	r1, r3, #2
 801d554:	68fb      	ldr	r3, [r7, #12]
 801d556:	881b      	ldrh	r3, [r3, #0]
 801d558:	461a      	mov	r2, r3
 801d55a:	6878      	ldr	r0, [r7, #4]
 801d55c:	f7ff fe10 	bl	801d180 <pb_encode_string>
 801d560:	4603      	mov	r3, r0
}
 801d562:	4618      	mov	r0, r3
 801d564:	3710      	adds	r7, #16
 801d566:	46bd      	mov	sp, r7
 801d568:	bd80      	pop	{r7, pc}
 801d56a:	bf00      	nop
 801d56c:	08022208 	.word	0x08022208

0801d570 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d570:	b580      	push	{r7, lr}
 801d572:	b086      	sub	sp, #24
 801d574:	af00      	add	r7, sp, #0
 801d576:	6078      	str	r0, [r7, #4]
 801d578:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 801d57a:	2300      	movs	r3, #0
 801d57c:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 801d57e:	683b      	ldr	r3, [r7, #0]
 801d580:	8a5b      	ldrh	r3, [r3, #18]
 801d582:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 801d584:	683b      	ldr	r3, [r7, #0]
 801d586:	69db      	ldr	r3, [r3, #28]
 801d588:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 801d58a:	683b      	ldr	r3, [r7, #0]
 801d58c:	7d9b      	ldrb	r3, [r3, #22]
 801d58e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801d592:	2b80      	cmp	r3, #128	; 0x80
 801d594:	d103      	bne.n	801d59e <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 801d596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d59a:	613b      	str	r3, [r7, #16]
 801d59c:	e011      	b.n	801d5c2 <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 801d59e:	693b      	ldr	r3, [r7, #16]
 801d5a0:	2b00      	cmp	r3, #0
 801d5a2:	d10b      	bne.n	801d5bc <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 801d5a4:	687b      	ldr	r3, [r7, #4]
 801d5a6:	691b      	ldr	r3, [r3, #16]
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	d002      	beq.n	801d5b2 <pb_enc_string+0x42>
 801d5ac:	687b      	ldr	r3, [r7, #4]
 801d5ae:	691b      	ldr	r3, [r3, #16]
 801d5b0:	e000      	b.n	801d5b4 <pb_enc_string+0x44>
 801d5b2:	4b1c      	ldr	r3, [pc, #112]	; (801d624 <pb_enc_string+0xb4>)
 801d5b4:	687a      	ldr	r2, [r7, #4]
 801d5b6:	6113      	str	r3, [r2, #16]
 801d5b8:	2300      	movs	r3, #0
 801d5ba:	e02f      	b.n	801d61c <pb_enc_string+0xac>

        max_size -= 1;
 801d5bc:	693b      	ldr	r3, [r7, #16]
 801d5be:	3b01      	subs	r3, #1
 801d5c0:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 801d5c2:	68bb      	ldr	r3, [r7, #8]
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	d102      	bne.n	801d5ce <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 801d5c8:	2300      	movs	r3, #0
 801d5ca:	617b      	str	r3, [r7, #20]
 801d5cc:	e020      	b.n	801d610 <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 801d5ce:	68bb      	ldr	r3, [r7, #8]
 801d5d0:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 801d5d2:	e005      	b.n	801d5e0 <pb_enc_string+0x70>
        {
            size++;
 801d5d4:	697b      	ldr	r3, [r7, #20]
 801d5d6:	3301      	adds	r3, #1
 801d5d8:	617b      	str	r3, [r7, #20]
            p++;
 801d5da:	68fb      	ldr	r3, [r7, #12]
 801d5dc:	3301      	adds	r3, #1
 801d5de:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 801d5e0:	697a      	ldr	r2, [r7, #20]
 801d5e2:	693b      	ldr	r3, [r7, #16]
 801d5e4:	429a      	cmp	r2, r3
 801d5e6:	d203      	bcs.n	801d5f0 <pb_enc_string+0x80>
 801d5e8:	68fb      	ldr	r3, [r7, #12]
 801d5ea:	781b      	ldrb	r3, [r3, #0]
 801d5ec:	2b00      	cmp	r3, #0
 801d5ee:	d1f1      	bne.n	801d5d4 <pb_enc_string+0x64>
        }

        if (*p != '\0')
 801d5f0:	68fb      	ldr	r3, [r7, #12]
 801d5f2:	781b      	ldrb	r3, [r3, #0]
 801d5f4:	2b00      	cmp	r3, #0
 801d5f6:	d00b      	beq.n	801d610 <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 801d5f8:	687b      	ldr	r3, [r7, #4]
 801d5fa:	691b      	ldr	r3, [r3, #16]
 801d5fc:	2b00      	cmp	r3, #0
 801d5fe:	d002      	beq.n	801d606 <pb_enc_string+0x96>
 801d600:	687b      	ldr	r3, [r7, #4]
 801d602:	691b      	ldr	r3, [r3, #16]
 801d604:	e000      	b.n	801d608 <pb_enc_string+0x98>
 801d606:	4b08      	ldr	r3, [pc, #32]	; (801d628 <pb_enc_string+0xb8>)
 801d608:	687a      	ldr	r2, [r7, #4]
 801d60a:	6113      	str	r3, [r2, #16]
 801d60c:	2300      	movs	r3, #0
 801d60e:	e005      	b.n	801d61c <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 801d610:	697a      	ldr	r2, [r7, #20]
 801d612:	68b9      	ldr	r1, [r7, #8]
 801d614:	6878      	ldr	r0, [r7, #4]
 801d616:	f7ff fdb3 	bl	801d180 <pb_encode_string>
 801d61a:	4603      	mov	r3, r0
}
 801d61c:	4618      	mov	r0, r3
 801d61e:	3718      	adds	r7, #24
 801d620:	46bd      	mov	sp, r7
 801d622:	bd80      	pop	{r7, pc}
 801d624:	0802221c 	.word	0x0802221c
 801d628:	08022230 	.word	0x08022230

0801d62c <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d62c:	b580      	push	{r7, lr}
 801d62e:	b084      	sub	sp, #16
 801d630:	af00      	add	r7, sp, #0
 801d632:	6078      	str	r0, [r7, #4]
 801d634:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 801d636:	683b      	ldr	r3, [r7, #0]
 801d638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	d10b      	bne.n	801d656 <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	691b      	ldr	r3, [r3, #16]
 801d642:	2b00      	cmp	r3, #0
 801d644:	d002      	beq.n	801d64c <pb_enc_submessage+0x20>
 801d646:	687b      	ldr	r3, [r7, #4]
 801d648:	691b      	ldr	r3, [r3, #16]
 801d64a:	e000      	b.n	801d64e <pb_enc_submessage+0x22>
 801d64c:	4b19      	ldr	r3, [pc, #100]	; (801d6b4 <pb_enc_submessage+0x88>)
 801d64e:	687a      	ldr	r2, [r7, #4]
 801d650:	6113      	str	r3, [r2, #16]
 801d652:	2300      	movs	r3, #0
 801d654:	e029      	b.n	801d6aa <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 801d656:	683b      	ldr	r3, [r7, #0]
 801d658:	7d9b      	ldrb	r3, [r3, #22]
 801d65a:	f003 030f 	and.w	r3, r3, #15
 801d65e:	2b09      	cmp	r3, #9
 801d660:	d11a      	bne.n	801d698 <pb_enc_submessage+0x6c>
 801d662:	683b      	ldr	r3, [r7, #0]
 801d664:	6a1b      	ldr	r3, [r3, #32]
 801d666:	2b00      	cmp	r3, #0
 801d668:	d016      	beq.n	801d698 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 801d66a:	683b      	ldr	r3, [r7, #0]
 801d66c:	6a1b      	ldr	r3, [r3, #32]
 801d66e:	3b08      	subs	r3, #8
 801d670:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 801d672:	68fb      	ldr	r3, [r7, #12]
 801d674:	681b      	ldr	r3, [r3, #0]
 801d676:	2b00      	cmp	r3, #0
 801d678:	d00e      	beq.n	801d698 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 801d67a:	68fb      	ldr	r3, [r7, #12]
 801d67c:	681b      	ldr	r3, [r3, #0]
 801d67e:	68fa      	ldr	r2, [r7, #12]
 801d680:	3204      	adds	r2, #4
 801d682:	6839      	ldr	r1, [r7, #0]
 801d684:	6878      	ldr	r0, [r7, #4]
 801d686:	4798      	blx	r3
 801d688:	4603      	mov	r3, r0
 801d68a:	f083 0301 	eor.w	r3, r3, #1
 801d68e:	b2db      	uxtb	r3, r3
 801d690:	2b00      	cmp	r3, #0
 801d692:	d001      	beq.n	801d698 <pb_enc_submessage+0x6c>
                return false;
 801d694:	2300      	movs	r3, #0
 801d696:	e008      	b.n	801d6aa <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 801d698:	683b      	ldr	r3, [r7, #0]
 801d69a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801d69c:	683b      	ldr	r3, [r7, #0]
 801d69e:	69db      	ldr	r3, [r3, #28]
 801d6a0:	461a      	mov	r2, r3
 801d6a2:	6878      	ldr	r0, [r7, #4]
 801d6a4:	f7ff fd8e 	bl	801d1c4 <pb_encode_submessage>
 801d6a8:	4603      	mov	r3, r0
}
 801d6aa:	4618      	mov	r0, r3
 801d6ac:	3710      	adds	r7, #16
 801d6ae:	46bd      	mov	sp, r7
 801d6b0:	bd80      	pop	{r7, pc}
 801d6b2:	bf00      	nop
 801d6b4:	08022244 	.word	0x08022244

0801d6b8 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d6b8:	b580      	push	{r7, lr}
 801d6ba:	b082      	sub	sp, #8
 801d6bc:	af00      	add	r7, sp, #0
 801d6be:	6078      	str	r0, [r7, #4]
 801d6c0:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 801d6c2:	683b      	ldr	r3, [r7, #0]
 801d6c4:	69d9      	ldr	r1, [r3, #28]
 801d6c6:	683b      	ldr	r3, [r7, #0]
 801d6c8:	8a5b      	ldrh	r3, [r3, #18]
 801d6ca:	461a      	mov	r2, r3
 801d6cc:	6878      	ldr	r0, [r7, #4]
 801d6ce:	f7ff fd57 	bl	801d180 <pb_encode_string>
 801d6d2:	4603      	mov	r3, r0
}
 801d6d4:	4618      	mov	r0, r3
 801d6d6:	3708      	adds	r7, #8
 801d6d8:	46bd      	mov	sp, r7
 801d6da:	bd80      	pop	{r7, pc}

0801d6dc <__libc_init_array>:
 801d6dc:	b570      	push	{r4, r5, r6, lr}
 801d6de:	4d0d      	ldr	r5, [pc, #52]	; (801d714 <__libc_init_array+0x38>)
 801d6e0:	4c0d      	ldr	r4, [pc, #52]	; (801d718 <__libc_init_array+0x3c>)
 801d6e2:	1b64      	subs	r4, r4, r5
 801d6e4:	10a4      	asrs	r4, r4, #2
 801d6e6:	2600      	movs	r6, #0
 801d6e8:	42a6      	cmp	r6, r4
 801d6ea:	d109      	bne.n	801d700 <__libc_init_array+0x24>
 801d6ec:	4d0b      	ldr	r5, [pc, #44]	; (801d71c <__libc_init_array+0x40>)
 801d6ee:	4c0c      	ldr	r4, [pc, #48]	; (801d720 <__libc_init_array+0x44>)
 801d6f0:	f001 f920 	bl	801e934 <_init>
 801d6f4:	1b64      	subs	r4, r4, r5
 801d6f6:	10a4      	asrs	r4, r4, #2
 801d6f8:	2600      	movs	r6, #0
 801d6fa:	42a6      	cmp	r6, r4
 801d6fc:	d105      	bne.n	801d70a <__libc_init_array+0x2e>
 801d6fe:	bd70      	pop	{r4, r5, r6, pc}
 801d700:	f855 3b04 	ldr.w	r3, [r5], #4
 801d704:	4798      	blx	r3
 801d706:	3601      	adds	r6, #1
 801d708:	e7ee      	b.n	801d6e8 <__libc_init_array+0xc>
 801d70a:	f855 3b04 	ldr.w	r3, [r5], #4
 801d70e:	4798      	blx	r3
 801d710:	3601      	adds	r6, #1
 801d712:	e7f2      	b.n	801d6fa <__libc_init_array+0x1e>
 801d714:	0802263c 	.word	0x0802263c
 801d718:	0802263c 	.word	0x0802263c
 801d71c:	0802263c 	.word	0x0802263c
 801d720:	08022640 	.word	0x08022640

0801d724 <memcmp>:
 801d724:	b510      	push	{r4, lr}
 801d726:	3901      	subs	r1, #1
 801d728:	4402      	add	r2, r0
 801d72a:	4290      	cmp	r0, r2
 801d72c:	d101      	bne.n	801d732 <memcmp+0xe>
 801d72e:	2000      	movs	r0, #0
 801d730:	e005      	b.n	801d73e <memcmp+0x1a>
 801d732:	7803      	ldrb	r3, [r0, #0]
 801d734:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d738:	42a3      	cmp	r3, r4
 801d73a:	d001      	beq.n	801d740 <memcmp+0x1c>
 801d73c:	1b18      	subs	r0, r3, r4
 801d73e:	bd10      	pop	{r4, pc}
 801d740:	3001      	adds	r0, #1
 801d742:	e7f2      	b.n	801d72a <memcmp+0x6>

0801d744 <memcpy>:
 801d744:	440a      	add	r2, r1
 801d746:	4291      	cmp	r1, r2
 801d748:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801d74c:	d100      	bne.n	801d750 <memcpy+0xc>
 801d74e:	4770      	bx	lr
 801d750:	b510      	push	{r4, lr}
 801d752:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d756:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d75a:	4291      	cmp	r1, r2
 801d75c:	d1f9      	bne.n	801d752 <memcpy+0xe>
 801d75e:	bd10      	pop	{r4, pc}

0801d760 <memset>:
 801d760:	4402      	add	r2, r0
 801d762:	4603      	mov	r3, r0
 801d764:	4293      	cmp	r3, r2
 801d766:	d100      	bne.n	801d76a <memset+0xa>
 801d768:	4770      	bx	lr
 801d76a:	f803 1b01 	strb.w	r1, [r3], #1
 801d76e:	e7f9      	b.n	801d764 <memset+0x4>

0801d770 <iprintf>:
 801d770:	b40f      	push	{r0, r1, r2, r3}
 801d772:	4b0a      	ldr	r3, [pc, #40]	; (801d79c <iprintf+0x2c>)
 801d774:	b513      	push	{r0, r1, r4, lr}
 801d776:	681c      	ldr	r4, [r3, #0]
 801d778:	b124      	cbz	r4, 801d784 <iprintf+0x14>
 801d77a:	69a3      	ldr	r3, [r4, #24]
 801d77c:	b913      	cbnz	r3, 801d784 <iprintf+0x14>
 801d77e:	4620      	mov	r0, r4
 801d780:	f000 fad6 	bl	801dd30 <__sinit>
 801d784:	ab05      	add	r3, sp, #20
 801d786:	9a04      	ldr	r2, [sp, #16]
 801d788:	68a1      	ldr	r1, [r4, #8]
 801d78a:	9301      	str	r3, [sp, #4]
 801d78c:	4620      	mov	r0, r4
 801d78e:	f000 fcf9 	bl	801e184 <_vfiprintf_r>
 801d792:	b002      	add	sp, #8
 801d794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d798:	b004      	add	sp, #16
 801d79a:	4770      	bx	lr
 801d79c:	20000030 	.word	0x20000030

0801d7a0 <_puts_r>:
 801d7a0:	b570      	push	{r4, r5, r6, lr}
 801d7a2:	460e      	mov	r6, r1
 801d7a4:	4605      	mov	r5, r0
 801d7a6:	b118      	cbz	r0, 801d7b0 <_puts_r+0x10>
 801d7a8:	6983      	ldr	r3, [r0, #24]
 801d7aa:	b90b      	cbnz	r3, 801d7b0 <_puts_r+0x10>
 801d7ac:	f000 fac0 	bl	801dd30 <__sinit>
 801d7b0:	69ab      	ldr	r3, [r5, #24]
 801d7b2:	68ac      	ldr	r4, [r5, #8]
 801d7b4:	b913      	cbnz	r3, 801d7bc <_puts_r+0x1c>
 801d7b6:	4628      	mov	r0, r5
 801d7b8:	f000 faba 	bl	801dd30 <__sinit>
 801d7bc:	4b2c      	ldr	r3, [pc, #176]	; (801d870 <_puts_r+0xd0>)
 801d7be:	429c      	cmp	r4, r3
 801d7c0:	d120      	bne.n	801d804 <_puts_r+0x64>
 801d7c2:	686c      	ldr	r4, [r5, #4]
 801d7c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d7c6:	07db      	lsls	r3, r3, #31
 801d7c8:	d405      	bmi.n	801d7d6 <_puts_r+0x36>
 801d7ca:	89a3      	ldrh	r3, [r4, #12]
 801d7cc:	0598      	lsls	r0, r3, #22
 801d7ce:	d402      	bmi.n	801d7d6 <_puts_r+0x36>
 801d7d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d7d2:	f000 fb5d 	bl	801de90 <__retarget_lock_acquire_recursive>
 801d7d6:	89a3      	ldrh	r3, [r4, #12]
 801d7d8:	0719      	lsls	r1, r3, #28
 801d7da:	d51d      	bpl.n	801d818 <_puts_r+0x78>
 801d7dc:	6923      	ldr	r3, [r4, #16]
 801d7de:	b1db      	cbz	r3, 801d818 <_puts_r+0x78>
 801d7e0:	3e01      	subs	r6, #1
 801d7e2:	68a3      	ldr	r3, [r4, #8]
 801d7e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d7e8:	3b01      	subs	r3, #1
 801d7ea:	60a3      	str	r3, [r4, #8]
 801d7ec:	bb39      	cbnz	r1, 801d83e <_puts_r+0x9e>
 801d7ee:	2b00      	cmp	r3, #0
 801d7f0:	da38      	bge.n	801d864 <_puts_r+0xc4>
 801d7f2:	4622      	mov	r2, r4
 801d7f4:	210a      	movs	r1, #10
 801d7f6:	4628      	mov	r0, r5
 801d7f8:	f000 f8a2 	bl	801d940 <__swbuf_r>
 801d7fc:	3001      	adds	r0, #1
 801d7fe:	d011      	beq.n	801d824 <_puts_r+0x84>
 801d800:	250a      	movs	r5, #10
 801d802:	e011      	b.n	801d828 <_puts_r+0x88>
 801d804:	4b1b      	ldr	r3, [pc, #108]	; (801d874 <_puts_r+0xd4>)
 801d806:	429c      	cmp	r4, r3
 801d808:	d101      	bne.n	801d80e <_puts_r+0x6e>
 801d80a:	68ac      	ldr	r4, [r5, #8]
 801d80c:	e7da      	b.n	801d7c4 <_puts_r+0x24>
 801d80e:	4b1a      	ldr	r3, [pc, #104]	; (801d878 <_puts_r+0xd8>)
 801d810:	429c      	cmp	r4, r3
 801d812:	bf08      	it	eq
 801d814:	68ec      	ldreq	r4, [r5, #12]
 801d816:	e7d5      	b.n	801d7c4 <_puts_r+0x24>
 801d818:	4621      	mov	r1, r4
 801d81a:	4628      	mov	r0, r5
 801d81c:	f000 f8e2 	bl	801d9e4 <__swsetup_r>
 801d820:	2800      	cmp	r0, #0
 801d822:	d0dd      	beq.n	801d7e0 <_puts_r+0x40>
 801d824:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801d828:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d82a:	07da      	lsls	r2, r3, #31
 801d82c:	d405      	bmi.n	801d83a <_puts_r+0x9a>
 801d82e:	89a3      	ldrh	r3, [r4, #12]
 801d830:	059b      	lsls	r3, r3, #22
 801d832:	d402      	bmi.n	801d83a <_puts_r+0x9a>
 801d834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d836:	f000 fb2c 	bl	801de92 <__retarget_lock_release_recursive>
 801d83a:	4628      	mov	r0, r5
 801d83c:	bd70      	pop	{r4, r5, r6, pc}
 801d83e:	2b00      	cmp	r3, #0
 801d840:	da04      	bge.n	801d84c <_puts_r+0xac>
 801d842:	69a2      	ldr	r2, [r4, #24]
 801d844:	429a      	cmp	r2, r3
 801d846:	dc06      	bgt.n	801d856 <_puts_r+0xb6>
 801d848:	290a      	cmp	r1, #10
 801d84a:	d004      	beq.n	801d856 <_puts_r+0xb6>
 801d84c:	6823      	ldr	r3, [r4, #0]
 801d84e:	1c5a      	adds	r2, r3, #1
 801d850:	6022      	str	r2, [r4, #0]
 801d852:	7019      	strb	r1, [r3, #0]
 801d854:	e7c5      	b.n	801d7e2 <_puts_r+0x42>
 801d856:	4622      	mov	r2, r4
 801d858:	4628      	mov	r0, r5
 801d85a:	f000 f871 	bl	801d940 <__swbuf_r>
 801d85e:	3001      	adds	r0, #1
 801d860:	d1bf      	bne.n	801d7e2 <_puts_r+0x42>
 801d862:	e7df      	b.n	801d824 <_puts_r+0x84>
 801d864:	6823      	ldr	r3, [r4, #0]
 801d866:	250a      	movs	r5, #10
 801d868:	1c5a      	adds	r2, r3, #1
 801d86a:	6022      	str	r2, [r4, #0]
 801d86c:	701d      	strb	r5, [r3, #0]
 801d86e:	e7db      	b.n	801d828 <_puts_r+0x88>
 801d870:	080225c0 	.word	0x080225c0
 801d874:	080225e0 	.word	0x080225e0
 801d878:	080225a0 	.word	0x080225a0

0801d87c <puts>:
 801d87c:	4b02      	ldr	r3, [pc, #8]	; (801d888 <puts+0xc>)
 801d87e:	4601      	mov	r1, r0
 801d880:	6818      	ldr	r0, [r3, #0]
 801d882:	f7ff bf8d 	b.w	801d7a0 <_puts_r>
 801d886:	bf00      	nop
 801d888:	20000030 	.word	0x20000030

0801d88c <rand>:
 801d88c:	4b16      	ldr	r3, [pc, #88]	; (801d8e8 <rand+0x5c>)
 801d88e:	b510      	push	{r4, lr}
 801d890:	681c      	ldr	r4, [r3, #0]
 801d892:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801d894:	b9b3      	cbnz	r3, 801d8c4 <rand+0x38>
 801d896:	2018      	movs	r0, #24
 801d898:	f000 fb62 	bl	801df60 <malloc>
 801d89c:	63a0      	str	r0, [r4, #56]	; 0x38
 801d89e:	b928      	cbnz	r0, 801d8ac <rand+0x20>
 801d8a0:	4602      	mov	r2, r0
 801d8a2:	4b12      	ldr	r3, [pc, #72]	; (801d8ec <rand+0x60>)
 801d8a4:	4812      	ldr	r0, [pc, #72]	; (801d8f0 <rand+0x64>)
 801d8a6:	214e      	movs	r1, #78	; 0x4e
 801d8a8:	f000 f90a 	bl	801dac0 <__assert_func>
 801d8ac:	4a11      	ldr	r2, [pc, #68]	; (801d8f4 <rand+0x68>)
 801d8ae:	4b12      	ldr	r3, [pc, #72]	; (801d8f8 <rand+0x6c>)
 801d8b0:	e9c0 2300 	strd	r2, r3, [r0]
 801d8b4:	4b11      	ldr	r3, [pc, #68]	; (801d8fc <rand+0x70>)
 801d8b6:	6083      	str	r3, [r0, #8]
 801d8b8:	230b      	movs	r3, #11
 801d8ba:	8183      	strh	r3, [r0, #12]
 801d8bc:	2201      	movs	r2, #1
 801d8be:	2300      	movs	r3, #0
 801d8c0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801d8c4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801d8c6:	4a0e      	ldr	r2, [pc, #56]	; (801d900 <rand+0x74>)
 801d8c8:	6920      	ldr	r0, [r4, #16]
 801d8ca:	6963      	ldr	r3, [r4, #20]
 801d8cc:	490d      	ldr	r1, [pc, #52]	; (801d904 <rand+0x78>)
 801d8ce:	4342      	muls	r2, r0
 801d8d0:	fb01 2203 	mla	r2, r1, r3, r2
 801d8d4:	fba0 0101 	umull	r0, r1, r0, r1
 801d8d8:	1c43      	adds	r3, r0, #1
 801d8da:	eb42 0001 	adc.w	r0, r2, r1
 801d8de:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801d8e2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801d8e6:	bd10      	pop	{r4, pc}
 801d8e8:	20000030 	.word	0x20000030
 801d8ec:	080224f0 	.word	0x080224f0
 801d8f0:	08022507 	.word	0x08022507
 801d8f4:	abcd330e 	.word	0xabcd330e
 801d8f8:	e66d1234 	.word	0xe66d1234
 801d8fc:	0005deec 	.word	0x0005deec
 801d900:	5851f42d 	.word	0x5851f42d
 801d904:	4c957f2d 	.word	0x4c957f2d

0801d908 <strcpy>:
 801d908:	4603      	mov	r3, r0
 801d90a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d90e:	f803 2b01 	strb.w	r2, [r3], #1
 801d912:	2a00      	cmp	r2, #0
 801d914:	d1f9      	bne.n	801d90a <strcpy+0x2>
 801d916:	4770      	bx	lr

0801d918 <strncmp>:
 801d918:	b510      	push	{r4, lr}
 801d91a:	b17a      	cbz	r2, 801d93c <strncmp+0x24>
 801d91c:	4603      	mov	r3, r0
 801d91e:	3901      	subs	r1, #1
 801d920:	1884      	adds	r4, r0, r2
 801d922:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d926:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d92a:	4290      	cmp	r0, r2
 801d92c:	d101      	bne.n	801d932 <strncmp+0x1a>
 801d92e:	42a3      	cmp	r3, r4
 801d930:	d101      	bne.n	801d936 <strncmp+0x1e>
 801d932:	1a80      	subs	r0, r0, r2
 801d934:	bd10      	pop	{r4, pc}
 801d936:	2800      	cmp	r0, #0
 801d938:	d1f3      	bne.n	801d922 <strncmp+0xa>
 801d93a:	e7fa      	b.n	801d932 <strncmp+0x1a>
 801d93c:	4610      	mov	r0, r2
 801d93e:	e7f9      	b.n	801d934 <strncmp+0x1c>

0801d940 <__swbuf_r>:
 801d940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d942:	460e      	mov	r6, r1
 801d944:	4614      	mov	r4, r2
 801d946:	4605      	mov	r5, r0
 801d948:	b118      	cbz	r0, 801d952 <__swbuf_r+0x12>
 801d94a:	6983      	ldr	r3, [r0, #24]
 801d94c:	b90b      	cbnz	r3, 801d952 <__swbuf_r+0x12>
 801d94e:	f000 f9ef 	bl	801dd30 <__sinit>
 801d952:	4b21      	ldr	r3, [pc, #132]	; (801d9d8 <__swbuf_r+0x98>)
 801d954:	429c      	cmp	r4, r3
 801d956:	d12b      	bne.n	801d9b0 <__swbuf_r+0x70>
 801d958:	686c      	ldr	r4, [r5, #4]
 801d95a:	69a3      	ldr	r3, [r4, #24]
 801d95c:	60a3      	str	r3, [r4, #8]
 801d95e:	89a3      	ldrh	r3, [r4, #12]
 801d960:	071a      	lsls	r2, r3, #28
 801d962:	d52f      	bpl.n	801d9c4 <__swbuf_r+0x84>
 801d964:	6923      	ldr	r3, [r4, #16]
 801d966:	b36b      	cbz	r3, 801d9c4 <__swbuf_r+0x84>
 801d968:	6923      	ldr	r3, [r4, #16]
 801d96a:	6820      	ldr	r0, [r4, #0]
 801d96c:	1ac0      	subs	r0, r0, r3
 801d96e:	6963      	ldr	r3, [r4, #20]
 801d970:	b2f6      	uxtb	r6, r6
 801d972:	4283      	cmp	r3, r0
 801d974:	4637      	mov	r7, r6
 801d976:	dc04      	bgt.n	801d982 <__swbuf_r+0x42>
 801d978:	4621      	mov	r1, r4
 801d97a:	4628      	mov	r0, r5
 801d97c:	f000 f944 	bl	801dc08 <_fflush_r>
 801d980:	bb30      	cbnz	r0, 801d9d0 <__swbuf_r+0x90>
 801d982:	68a3      	ldr	r3, [r4, #8]
 801d984:	3b01      	subs	r3, #1
 801d986:	60a3      	str	r3, [r4, #8]
 801d988:	6823      	ldr	r3, [r4, #0]
 801d98a:	1c5a      	adds	r2, r3, #1
 801d98c:	6022      	str	r2, [r4, #0]
 801d98e:	701e      	strb	r6, [r3, #0]
 801d990:	6963      	ldr	r3, [r4, #20]
 801d992:	3001      	adds	r0, #1
 801d994:	4283      	cmp	r3, r0
 801d996:	d004      	beq.n	801d9a2 <__swbuf_r+0x62>
 801d998:	89a3      	ldrh	r3, [r4, #12]
 801d99a:	07db      	lsls	r3, r3, #31
 801d99c:	d506      	bpl.n	801d9ac <__swbuf_r+0x6c>
 801d99e:	2e0a      	cmp	r6, #10
 801d9a0:	d104      	bne.n	801d9ac <__swbuf_r+0x6c>
 801d9a2:	4621      	mov	r1, r4
 801d9a4:	4628      	mov	r0, r5
 801d9a6:	f000 f92f 	bl	801dc08 <_fflush_r>
 801d9aa:	b988      	cbnz	r0, 801d9d0 <__swbuf_r+0x90>
 801d9ac:	4638      	mov	r0, r7
 801d9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d9b0:	4b0a      	ldr	r3, [pc, #40]	; (801d9dc <__swbuf_r+0x9c>)
 801d9b2:	429c      	cmp	r4, r3
 801d9b4:	d101      	bne.n	801d9ba <__swbuf_r+0x7a>
 801d9b6:	68ac      	ldr	r4, [r5, #8]
 801d9b8:	e7cf      	b.n	801d95a <__swbuf_r+0x1a>
 801d9ba:	4b09      	ldr	r3, [pc, #36]	; (801d9e0 <__swbuf_r+0xa0>)
 801d9bc:	429c      	cmp	r4, r3
 801d9be:	bf08      	it	eq
 801d9c0:	68ec      	ldreq	r4, [r5, #12]
 801d9c2:	e7ca      	b.n	801d95a <__swbuf_r+0x1a>
 801d9c4:	4621      	mov	r1, r4
 801d9c6:	4628      	mov	r0, r5
 801d9c8:	f000 f80c 	bl	801d9e4 <__swsetup_r>
 801d9cc:	2800      	cmp	r0, #0
 801d9ce:	d0cb      	beq.n	801d968 <__swbuf_r+0x28>
 801d9d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d9d4:	e7ea      	b.n	801d9ac <__swbuf_r+0x6c>
 801d9d6:	bf00      	nop
 801d9d8:	080225c0 	.word	0x080225c0
 801d9dc:	080225e0 	.word	0x080225e0
 801d9e0:	080225a0 	.word	0x080225a0

0801d9e4 <__swsetup_r>:
 801d9e4:	4b32      	ldr	r3, [pc, #200]	; (801dab0 <__swsetup_r+0xcc>)
 801d9e6:	b570      	push	{r4, r5, r6, lr}
 801d9e8:	681d      	ldr	r5, [r3, #0]
 801d9ea:	4606      	mov	r6, r0
 801d9ec:	460c      	mov	r4, r1
 801d9ee:	b125      	cbz	r5, 801d9fa <__swsetup_r+0x16>
 801d9f0:	69ab      	ldr	r3, [r5, #24]
 801d9f2:	b913      	cbnz	r3, 801d9fa <__swsetup_r+0x16>
 801d9f4:	4628      	mov	r0, r5
 801d9f6:	f000 f99b 	bl	801dd30 <__sinit>
 801d9fa:	4b2e      	ldr	r3, [pc, #184]	; (801dab4 <__swsetup_r+0xd0>)
 801d9fc:	429c      	cmp	r4, r3
 801d9fe:	d10f      	bne.n	801da20 <__swsetup_r+0x3c>
 801da00:	686c      	ldr	r4, [r5, #4]
 801da02:	89a3      	ldrh	r3, [r4, #12]
 801da04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801da08:	0719      	lsls	r1, r3, #28
 801da0a:	d42c      	bmi.n	801da66 <__swsetup_r+0x82>
 801da0c:	06dd      	lsls	r5, r3, #27
 801da0e:	d411      	bmi.n	801da34 <__swsetup_r+0x50>
 801da10:	2309      	movs	r3, #9
 801da12:	6033      	str	r3, [r6, #0]
 801da14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801da18:	81a3      	strh	r3, [r4, #12]
 801da1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801da1e:	e03e      	b.n	801da9e <__swsetup_r+0xba>
 801da20:	4b25      	ldr	r3, [pc, #148]	; (801dab8 <__swsetup_r+0xd4>)
 801da22:	429c      	cmp	r4, r3
 801da24:	d101      	bne.n	801da2a <__swsetup_r+0x46>
 801da26:	68ac      	ldr	r4, [r5, #8]
 801da28:	e7eb      	b.n	801da02 <__swsetup_r+0x1e>
 801da2a:	4b24      	ldr	r3, [pc, #144]	; (801dabc <__swsetup_r+0xd8>)
 801da2c:	429c      	cmp	r4, r3
 801da2e:	bf08      	it	eq
 801da30:	68ec      	ldreq	r4, [r5, #12]
 801da32:	e7e6      	b.n	801da02 <__swsetup_r+0x1e>
 801da34:	0758      	lsls	r0, r3, #29
 801da36:	d512      	bpl.n	801da5e <__swsetup_r+0x7a>
 801da38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801da3a:	b141      	cbz	r1, 801da4e <__swsetup_r+0x6a>
 801da3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801da40:	4299      	cmp	r1, r3
 801da42:	d002      	beq.n	801da4a <__swsetup_r+0x66>
 801da44:	4630      	mov	r0, r6
 801da46:	f000 fa93 	bl	801df70 <_free_r>
 801da4a:	2300      	movs	r3, #0
 801da4c:	6363      	str	r3, [r4, #52]	; 0x34
 801da4e:	89a3      	ldrh	r3, [r4, #12]
 801da50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801da54:	81a3      	strh	r3, [r4, #12]
 801da56:	2300      	movs	r3, #0
 801da58:	6063      	str	r3, [r4, #4]
 801da5a:	6923      	ldr	r3, [r4, #16]
 801da5c:	6023      	str	r3, [r4, #0]
 801da5e:	89a3      	ldrh	r3, [r4, #12]
 801da60:	f043 0308 	orr.w	r3, r3, #8
 801da64:	81a3      	strh	r3, [r4, #12]
 801da66:	6923      	ldr	r3, [r4, #16]
 801da68:	b94b      	cbnz	r3, 801da7e <__swsetup_r+0x9a>
 801da6a:	89a3      	ldrh	r3, [r4, #12]
 801da6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801da70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801da74:	d003      	beq.n	801da7e <__swsetup_r+0x9a>
 801da76:	4621      	mov	r1, r4
 801da78:	4630      	mov	r0, r6
 801da7a:	f000 fa31 	bl	801dee0 <__smakebuf_r>
 801da7e:	89a0      	ldrh	r0, [r4, #12]
 801da80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801da84:	f010 0301 	ands.w	r3, r0, #1
 801da88:	d00a      	beq.n	801daa0 <__swsetup_r+0xbc>
 801da8a:	2300      	movs	r3, #0
 801da8c:	60a3      	str	r3, [r4, #8]
 801da8e:	6963      	ldr	r3, [r4, #20]
 801da90:	425b      	negs	r3, r3
 801da92:	61a3      	str	r3, [r4, #24]
 801da94:	6923      	ldr	r3, [r4, #16]
 801da96:	b943      	cbnz	r3, 801daaa <__swsetup_r+0xc6>
 801da98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801da9c:	d1ba      	bne.n	801da14 <__swsetup_r+0x30>
 801da9e:	bd70      	pop	{r4, r5, r6, pc}
 801daa0:	0781      	lsls	r1, r0, #30
 801daa2:	bf58      	it	pl
 801daa4:	6963      	ldrpl	r3, [r4, #20]
 801daa6:	60a3      	str	r3, [r4, #8]
 801daa8:	e7f4      	b.n	801da94 <__swsetup_r+0xb0>
 801daaa:	2000      	movs	r0, #0
 801daac:	e7f7      	b.n	801da9e <__swsetup_r+0xba>
 801daae:	bf00      	nop
 801dab0:	20000030 	.word	0x20000030
 801dab4:	080225c0 	.word	0x080225c0
 801dab8:	080225e0 	.word	0x080225e0
 801dabc:	080225a0 	.word	0x080225a0

0801dac0 <__assert_func>:
 801dac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dac2:	4614      	mov	r4, r2
 801dac4:	461a      	mov	r2, r3
 801dac6:	4b09      	ldr	r3, [pc, #36]	; (801daec <__assert_func+0x2c>)
 801dac8:	681b      	ldr	r3, [r3, #0]
 801daca:	4605      	mov	r5, r0
 801dacc:	68d8      	ldr	r0, [r3, #12]
 801dace:	b14c      	cbz	r4, 801dae4 <__assert_func+0x24>
 801dad0:	4b07      	ldr	r3, [pc, #28]	; (801daf0 <__assert_func+0x30>)
 801dad2:	9100      	str	r1, [sp, #0]
 801dad4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dad8:	4906      	ldr	r1, [pc, #24]	; (801daf4 <__assert_func+0x34>)
 801dada:	462b      	mov	r3, r5
 801dadc:	f000 f9a6 	bl	801de2c <fiprintf>
 801dae0:	f000 fe7a 	bl	801e7d8 <abort>
 801dae4:	4b04      	ldr	r3, [pc, #16]	; (801daf8 <__assert_func+0x38>)
 801dae6:	461c      	mov	r4, r3
 801dae8:	e7f3      	b.n	801dad2 <__assert_func+0x12>
 801daea:	bf00      	nop
 801daec:	20000030 	.word	0x20000030
 801daf0:	08022562 	.word	0x08022562
 801daf4:	0802256f 	.word	0x0802256f
 801daf8:	0802259d 	.word	0x0802259d

0801dafc <__sflush_r>:
 801dafc:	898a      	ldrh	r2, [r1, #12]
 801dafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db02:	4605      	mov	r5, r0
 801db04:	0710      	lsls	r0, r2, #28
 801db06:	460c      	mov	r4, r1
 801db08:	d458      	bmi.n	801dbbc <__sflush_r+0xc0>
 801db0a:	684b      	ldr	r3, [r1, #4]
 801db0c:	2b00      	cmp	r3, #0
 801db0e:	dc05      	bgt.n	801db1c <__sflush_r+0x20>
 801db10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801db12:	2b00      	cmp	r3, #0
 801db14:	dc02      	bgt.n	801db1c <__sflush_r+0x20>
 801db16:	2000      	movs	r0, #0
 801db18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801db1e:	2e00      	cmp	r6, #0
 801db20:	d0f9      	beq.n	801db16 <__sflush_r+0x1a>
 801db22:	2300      	movs	r3, #0
 801db24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801db28:	682f      	ldr	r7, [r5, #0]
 801db2a:	602b      	str	r3, [r5, #0]
 801db2c:	d032      	beq.n	801db94 <__sflush_r+0x98>
 801db2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801db30:	89a3      	ldrh	r3, [r4, #12]
 801db32:	075a      	lsls	r2, r3, #29
 801db34:	d505      	bpl.n	801db42 <__sflush_r+0x46>
 801db36:	6863      	ldr	r3, [r4, #4]
 801db38:	1ac0      	subs	r0, r0, r3
 801db3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801db3c:	b10b      	cbz	r3, 801db42 <__sflush_r+0x46>
 801db3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801db40:	1ac0      	subs	r0, r0, r3
 801db42:	2300      	movs	r3, #0
 801db44:	4602      	mov	r2, r0
 801db46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801db48:	6a21      	ldr	r1, [r4, #32]
 801db4a:	4628      	mov	r0, r5
 801db4c:	47b0      	blx	r6
 801db4e:	1c43      	adds	r3, r0, #1
 801db50:	89a3      	ldrh	r3, [r4, #12]
 801db52:	d106      	bne.n	801db62 <__sflush_r+0x66>
 801db54:	6829      	ldr	r1, [r5, #0]
 801db56:	291d      	cmp	r1, #29
 801db58:	d82c      	bhi.n	801dbb4 <__sflush_r+0xb8>
 801db5a:	4a2a      	ldr	r2, [pc, #168]	; (801dc04 <__sflush_r+0x108>)
 801db5c:	40ca      	lsrs	r2, r1
 801db5e:	07d6      	lsls	r6, r2, #31
 801db60:	d528      	bpl.n	801dbb4 <__sflush_r+0xb8>
 801db62:	2200      	movs	r2, #0
 801db64:	6062      	str	r2, [r4, #4]
 801db66:	04d9      	lsls	r1, r3, #19
 801db68:	6922      	ldr	r2, [r4, #16]
 801db6a:	6022      	str	r2, [r4, #0]
 801db6c:	d504      	bpl.n	801db78 <__sflush_r+0x7c>
 801db6e:	1c42      	adds	r2, r0, #1
 801db70:	d101      	bne.n	801db76 <__sflush_r+0x7a>
 801db72:	682b      	ldr	r3, [r5, #0]
 801db74:	b903      	cbnz	r3, 801db78 <__sflush_r+0x7c>
 801db76:	6560      	str	r0, [r4, #84]	; 0x54
 801db78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801db7a:	602f      	str	r7, [r5, #0]
 801db7c:	2900      	cmp	r1, #0
 801db7e:	d0ca      	beq.n	801db16 <__sflush_r+0x1a>
 801db80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801db84:	4299      	cmp	r1, r3
 801db86:	d002      	beq.n	801db8e <__sflush_r+0x92>
 801db88:	4628      	mov	r0, r5
 801db8a:	f000 f9f1 	bl	801df70 <_free_r>
 801db8e:	2000      	movs	r0, #0
 801db90:	6360      	str	r0, [r4, #52]	; 0x34
 801db92:	e7c1      	b.n	801db18 <__sflush_r+0x1c>
 801db94:	6a21      	ldr	r1, [r4, #32]
 801db96:	2301      	movs	r3, #1
 801db98:	4628      	mov	r0, r5
 801db9a:	47b0      	blx	r6
 801db9c:	1c41      	adds	r1, r0, #1
 801db9e:	d1c7      	bne.n	801db30 <__sflush_r+0x34>
 801dba0:	682b      	ldr	r3, [r5, #0]
 801dba2:	2b00      	cmp	r3, #0
 801dba4:	d0c4      	beq.n	801db30 <__sflush_r+0x34>
 801dba6:	2b1d      	cmp	r3, #29
 801dba8:	d001      	beq.n	801dbae <__sflush_r+0xb2>
 801dbaa:	2b16      	cmp	r3, #22
 801dbac:	d101      	bne.n	801dbb2 <__sflush_r+0xb6>
 801dbae:	602f      	str	r7, [r5, #0]
 801dbb0:	e7b1      	b.n	801db16 <__sflush_r+0x1a>
 801dbb2:	89a3      	ldrh	r3, [r4, #12]
 801dbb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dbb8:	81a3      	strh	r3, [r4, #12]
 801dbba:	e7ad      	b.n	801db18 <__sflush_r+0x1c>
 801dbbc:	690f      	ldr	r7, [r1, #16]
 801dbbe:	2f00      	cmp	r7, #0
 801dbc0:	d0a9      	beq.n	801db16 <__sflush_r+0x1a>
 801dbc2:	0793      	lsls	r3, r2, #30
 801dbc4:	680e      	ldr	r6, [r1, #0]
 801dbc6:	bf08      	it	eq
 801dbc8:	694b      	ldreq	r3, [r1, #20]
 801dbca:	600f      	str	r7, [r1, #0]
 801dbcc:	bf18      	it	ne
 801dbce:	2300      	movne	r3, #0
 801dbd0:	eba6 0807 	sub.w	r8, r6, r7
 801dbd4:	608b      	str	r3, [r1, #8]
 801dbd6:	f1b8 0f00 	cmp.w	r8, #0
 801dbda:	dd9c      	ble.n	801db16 <__sflush_r+0x1a>
 801dbdc:	6a21      	ldr	r1, [r4, #32]
 801dbde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dbe0:	4643      	mov	r3, r8
 801dbe2:	463a      	mov	r2, r7
 801dbe4:	4628      	mov	r0, r5
 801dbe6:	47b0      	blx	r6
 801dbe8:	2800      	cmp	r0, #0
 801dbea:	dc06      	bgt.n	801dbfa <__sflush_r+0xfe>
 801dbec:	89a3      	ldrh	r3, [r4, #12]
 801dbee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dbf2:	81a3      	strh	r3, [r4, #12]
 801dbf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dbf8:	e78e      	b.n	801db18 <__sflush_r+0x1c>
 801dbfa:	4407      	add	r7, r0
 801dbfc:	eba8 0800 	sub.w	r8, r8, r0
 801dc00:	e7e9      	b.n	801dbd6 <__sflush_r+0xda>
 801dc02:	bf00      	nop
 801dc04:	20400001 	.word	0x20400001

0801dc08 <_fflush_r>:
 801dc08:	b538      	push	{r3, r4, r5, lr}
 801dc0a:	690b      	ldr	r3, [r1, #16]
 801dc0c:	4605      	mov	r5, r0
 801dc0e:	460c      	mov	r4, r1
 801dc10:	b913      	cbnz	r3, 801dc18 <_fflush_r+0x10>
 801dc12:	2500      	movs	r5, #0
 801dc14:	4628      	mov	r0, r5
 801dc16:	bd38      	pop	{r3, r4, r5, pc}
 801dc18:	b118      	cbz	r0, 801dc22 <_fflush_r+0x1a>
 801dc1a:	6983      	ldr	r3, [r0, #24]
 801dc1c:	b90b      	cbnz	r3, 801dc22 <_fflush_r+0x1a>
 801dc1e:	f000 f887 	bl	801dd30 <__sinit>
 801dc22:	4b14      	ldr	r3, [pc, #80]	; (801dc74 <_fflush_r+0x6c>)
 801dc24:	429c      	cmp	r4, r3
 801dc26:	d11b      	bne.n	801dc60 <_fflush_r+0x58>
 801dc28:	686c      	ldr	r4, [r5, #4]
 801dc2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc2e:	2b00      	cmp	r3, #0
 801dc30:	d0ef      	beq.n	801dc12 <_fflush_r+0xa>
 801dc32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dc34:	07d0      	lsls	r0, r2, #31
 801dc36:	d404      	bmi.n	801dc42 <_fflush_r+0x3a>
 801dc38:	0599      	lsls	r1, r3, #22
 801dc3a:	d402      	bmi.n	801dc42 <_fflush_r+0x3a>
 801dc3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dc3e:	f000 f927 	bl	801de90 <__retarget_lock_acquire_recursive>
 801dc42:	4628      	mov	r0, r5
 801dc44:	4621      	mov	r1, r4
 801dc46:	f7ff ff59 	bl	801dafc <__sflush_r>
 801dc4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dc4c:	07da      	lsls	r2, r3, #31
 801dc4e:	4605      	mov	r5, r0
 801dc50:	d4e0      	bmi.n	801dc14 <_fflush_r+0xc>
 801dc52:	89a3      	ldrh	r3, [r4, #12]
 801dc54:	059b      	lsls	r3, r3, #22
 801dc56:	d4dd      	bmi.n	801dc14 <_fflush_r+0xc>
 801dc58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dc5a:	f000 f91a 	bl	801de92 <__retarget_lock_release_recursive>
 801dc5e:	e7d9      	b.n	801dc14 <_fflush_r+0xc>
 801dc60:	4b05      	ldr	r3, [pc, #20]	; (801dc78 <_fflush_r+0x70>)
 801dc62:	429c      	cmp	r4, r3
 801dc64:	d101      	bne.n	801dc6a <_fflush_r+0x62>
 801dc66:	68ac      	ldr	r4, [r5, #8]
 801dc68:	e7df      	b.n	801dc2a <_fflush_r+0x22>
 801dc6a:	4b04      	ldr	r3, [pc, #16]	; (801dc7c <_fflush_r+0x74>)
 801dc6c:	429c      	cmp	r4, r3
 801dc6e:	bf08      	it	eq
 801dc70:	68ec      	ldreq	r4, [r5, #12]
 801dc72:	e7da      	b.n	801dc2a <_fflush_r+0x22>
 801dc74:	080225c0 	.word	0x080225c0
 801dc78:	080225e0 	.word	0x080225e0
 801dc7c:	080225a0 	.word	0x080225a0

0801dc80 <std>:
 801dc80:	2300      	movs	r3, #0
 801dc82:	b510      	push	{r4, lr}
 801dc84:	4604      	mov	r4, r0
 801dc86:	e9c0 3300 	strd	r3, r3, [r0]
 801dc8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dc8e:	6083      	str	r3, [r0, #8]
 801dc90:	8181      	strh	r1, [r0, #12]
 801dc92:	6643      	str	r3, [r0, #100]	; 0x64
 801dc94:	81c2      	strh	r2, [r0, #14]
 801dc96:	6183      	str	r3, [r0, #24]
 801dc98:	4619      	mov	r1, r3
 801dc9a:	2208      	movs	r2, #8
 801dc9c:	305c      	adds	r0, #92	; 0x5c
 801dc9e:	f7ff fd5f 	bl	801d760 <memset>
 801dca2:	4b05      	ldr	r3, [pc, #20]	; (801dcb8 <std+0x38>)
 801dca4:	6263      	str	r3, [r4, #36]	; 0x24
 801dca6:	4b05      	ldr	r3, [pc, #20]	; (801dcbc <std+0x3c>)
 801dca8:	62a3      	str	r3, [r4, #40]	; 0x28
 801dcaa:	4b05      	ldr	r3, [pc, #20]	; (801dcc0 <std+0x40>)
 801dcac:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dcae:	4b05      	ldr	r3, [pc, #20]	; (801dcc4 <std+0x44>)
 801dcb0:	6224      	str	r4, [r4, #32]
 801dcb2:	6323      	str	r3, [r4, #48]	; 0x30
 801dcb4:	bd10      	pop	{r4, pc}
 801dcb6:	bf00      	nop
 801dcb8:	0801e72d 	.word	0x0801e72d
 801dcbc:	0801e74f 	.word	0x0801e74f
 801dcc0:	0801e787 	.word	0x0801e787
 801dcc4:	0801e7ab 	.word	0x0801e7ab

0801dcc8 <_cleanup_r>:
 801dcc8:	4901      	ldr	r1, [pc, #4]	; (801dcd0 <_cleanup_r+0x8>)
 801dcca:	f000 b8c1 	b.w	801de50 <_fwalk_reent>
 801dcce:	bf00      	nop
 801dcd0:	0801dc09 	.word	0x0801dc09

0801dcd4 <__sfmoreglue>:
 801dcd4:	b570      	push	{r4, r5, r6, lr}
 801dcd6:	2268      	movs	r2, #104	; 0x68
 801dcd8:	1e4d      	subs	r5, r1, #1
 801dcda:	4355      	muls	r5, r2
 801dcdc:	460e      	mov	r6, r1
 801dcde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801dce2:	f000 f9b1 	bl	801e048 <_malloc_r>
 801dce6:	4604      	mov	r4, r0
 801dce8:	b140      	cbz	r0, 801dcfc <__sfmoreglue+0x28>
 801dcea:	2100      	movs	r1, #0
 801dcec:	e9c0 1600 	strd	r1, r6, [r0]
 801dcf0:	300c      	adds	r0, #12
 801dcf2:	60a0      	str	r0, [r4, #8]
 801dcf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801dcf8:	f7ff fd32 	bl	801d760 <memset>
 801dcfc:	4620      	mov	r0, r4
 801dcfe:	bd70      	pop	{r4, r5, r6, pc}

0801dd00 <__sfp_lock_acquire>:
 801dd00:	4801      	ldr	r0, [pc, #4]	; (801dd08 <__sfp_lock_acquire+0x8>)
 801dd02:	f000 b8c5 	b.w	801de90 <__retarget_lock_acquire_recursive>
 801dd06:	bf00      	nop
 801dd08:	20011529 	.word	0x20011529

0801dd0c <__sfp_lock_release>:
 801dd0c:	4801      	ldr	r0, [pc, #4]	; (801dd14 <__sfp_lock_release+0x8>)
 801dd0e:	f000 b8c0 	b.w	801de92 <__retarget_lock_release_recursive>
 801dd12:	bf00      	nop
 801dd14:	20011529 	.word	0x20011529

0801dd18 <__sinit_lock_acquire>:
 801dd18:	4801      	ldr	r0, [pc, #4]	; (801dd20 <__sinit_lock_acquire+0x8>)
 801dd1a:	f000 b8b9 	b.w	801de90 <__retarget_lock_acquire_recursive>
 801dd1e:	bf00      	nop
 801dd20:	2001152a 	.word	0x2001152a

0801dd24 <__sinit_lock_release>:
 801dd24:	4801      	ldr	r0, [pc, #4]	; (801dd2c <__sinit_lock_release+0x8>)
 801dd26:	f000 b8b4 	b.w	801de92 <__retarget_lock_release_recursive>
 801dd2a:	bf00      	nop
 801dd2c:	2001152a 	.word	0x2001152a

0801dd30 <__sinit>:
 801dd30:	b510      	push	{r4, lr}
 801dd32:	4604      	mov	r4, r0
 801dd34:	f7ff fff0 	bl	801dd18 <__sinit_lock_acquire>
 801dd38:	69a3      	ldr	r3, [r4, #24]
 801dd3a:	b11b      	cbz	r3, 801dd44 <__sinit+0x14>
 801dd3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dd40:	f7ff bff0 	b.w	801dd24 <__sinit_lock_release>
 801dd44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801dd48:	6523      	str	r3, [r4, #80]	; 0x50
 801dd4a:	4b13      	ldr	r3, [pc, #76]	; (801dd98 <__sinit+0x68>)
 801dd4c:	4a13      	ldr	r2, [pc, #76]	; (801dd9c <__sinit+0x6c>)
 801dd4e:	681b      	ldr	r3, [r3, #0]
 801dd50:	62a2      	str	r2, [r4, #40]	; 0x28
 801dd52:	42a3      	cmp	r3, r4
 801dd54:	bf04      	itt	eq
 801dd56:	2301      	moveq	r3, #1
 801dd58:	61a3      	streq	r3, [r4, #24]
 801dd5a:	4620      	mov	r0, r4
 801dd5c:	f000 f820 	bl	801dda0 <__sfp>
 801dd60:	6060      	str	r0, [r4, #4]
 801dd62:	4620      	mov	r0, r4
 801dd64:	f000 f81c 	bl	801dda0 <__sfp>
 801dd68:	60a0      	str	r0, [r4, #8]
 801dd6a:	4620      	mov	r0, r4
 801dd6c:	f000 f818 	bl	801dda0 <__sfp>
 801dd70:	2200      	movs	r2, #0
 801dd72:	60e0      	str	r0, [r4, #12]
 801dd74:	2104      	movs	r1, #4
 801dd76:	6860      	ldr	r0, [r4, #4]
 801dd78:	f7ff ff82 	bl	801dc80 <std>
 801dd7c:	68a0      	ldr	r0, [r4, #8]
 801dd7e:	2201      	movs	r2, #1
 801dd80:	2109      	movs	r1, #9
 801dd82:	f7ff ff7d 	bl	801dc80 <std>
 801dd86:	68e0      	ldr	r0, [r4, #12]
 801dd88:	2202      	movs	r2, #2
 801dd8a:	2112      	movs	r1, #18
 801dd8c:	f7ff ff78 	bl	801dc80 <std>
 801dd90:	2301      	movs	r3, #1
 801dd92:	61a3      	str	r3, [r4, #24]
 801dd94:	e7d2      	b.n	801dd3c <__sinit+0xc>
 801dd96:	bf00      	nop
 801dd98:	080224ec 	.word	0x080224ec
 801dd9c:	0801dcc9 	.word	0x0801dcc9

0801dda0 <__sfp>:
 801dda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dda2:	4607      	mov	r7, r0
 801dda4:	f7ff ffac 	bl	801dd00 <__sfp_lock_acquire>
 801dda8:	4b1e      	ldr	r3, [pc, #120]	; (801de24 <__sfp+0x84>)
 801ddaa:	681e      	ldr	r6, [r3, #0]
 801ddac:	69b3      	ldr	r3, [r6, #24]
 801ddae:	b913      	cbnz	r3, 801ddb6 <__sfp+0x16>
 801ddb0:	4630      	mov	r0, r6
 801ddb2:	f7ff ffbd 	bl	801dd30 <__sinit>
 801ddb6:	3648      	adds	r6, #72	; 0x48
 801ddb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ddbc:	3b01      	subs	r3, #1
 801ddbe:	d503      	bpl.n	801ddc8 <__sfp+0x28>
 801ddc0:	6833      	ldr	r3, [r6, #0]
 801ddc2:	b30b      	cbz	r3, 801de08 <__sfp+0x68>
 801ddc4:	6836      	ldr	r6, [r6, #0]
 801ddc6:	e7f7      	b.n	801ddb8 <__sfp+0x18>
 801ddc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ddcc:	b9d5      	cbnz	r5, 801de04 <__sfp+0x64>
 801ddce:	4b16      	ldr	r3, [pc, #88]	; (801de28 <__sfp+0x88>)
 801ddd0:	60e3      	str	r3, [r4, #12]
 801ddd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ddd6:	6665      	str	r5, [r4, #100]	; 0x64
 801ddd8:	f000 f859 	bl	801de8e <__retarget_lock_init_recursive>
 801dddc:	f7ff ff96 	bl	801dd0c <__sfp_lock_release>
 801dde0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801dde4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801dde8:	6025      	str	r5, [r4, #0]
 801ddea:	61a5      	str	r5, [r4, #24]
 801ddec:	2208      	movs	r2, #8
 801ddee:	4629      	mov	r1, r5
 801ddf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ddf4:	f7ff fcb4 	bl	801d760 <memset>
 801ddf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ddfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801de00:	4620      	mov	r0, r4
 801de02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de04:	3468      	adds	r4, #104	; 0x68
 801de06:	e7d9      	b.n	801ddbc <__sfp+0x1c>
 801de08:	2104      	movs	r1, #4
 801de0a:	4638      	mov	r0, r7
 801de0c:	f7ff ff62 	bl	801dcd4 <__sfmoreglue>
 801de10:	4604      	mov	r4, r0
 801de12:	6030      	str	r0, [r6, #0]
 801de14:	2800      	cmp	r0, #0
 801de16:	d1d5      	bne.n	801ddc4 <__sfp+0x24>
 801de18:	f7ff ff78 	bl	801dd0c <__sfp_lock_release>
 801de1c:	230c      	movs	r3, #12
 801de1e:	603b      	str	r3, [r7, #0]
 801de20:	e7ee      	b.n	801de00 <__sfp+0x60>
 801de22:	bf00      	nop
 801de24:	080224ec 	.word	0x080224ec
 801de28:	ffff0001 	.word	0xffff0001

0801de2c <fiprintf>:
 801de2c:	b40e      	push	{r1, r2, r3}
 801de2e:	b503      	push	{r0, r1, lr}
 801de30:	4601      	mov	r1, r0
 801de32:	ab03      	add	r3, sp, #12
 801de34:	4805      	ldr	r0, [pc, #20]	; (801de4c <fiprintf+0x20>)
 801de36:	f853 2b04 	ldr.w	r2, [r3], #4
 801de3a:	6800      	ldr	r0, [r0, #0]
 801de3c:	9301      	str	r3, [sp, #4]
 801de3e:	f000 f9a1 	bl	801e184 <_vfiprintf_r>
 801de42:	b002      	add	sp, #8
 801de44:	f85d eb04 	ldr.w	lr, [sp], #4
 801de48:	b003      	add	sp, #12
 801de4a:	4770      	bx	lr
 801de4c:	20000030 	.word	0x20000030

0801de50 <_fwalk_reent>:
 801de50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801de54:	4606      	mov	r6, r0
 801de56:	4688      	mov	r8, r1
 801de58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801de5c:	2700      	movs	r7, #0
 801de5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801de62:	f1b9 0901 	subs.w	r9, r9, #1
 801de66:	d505      	bpl.n	801de74 <_fwalk_reent+0x24>
 801de68:	6824      	ldr	r4, [r4, #0]
 801de6a:	2c00      	cmp	r4, #0
 801de6c:	d1f7      	bne.n	801de5e <_fwalk_reent+0xe>
 801de6e:	4638      	mov	r0, r7
 801de70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801de74:	89ab      	ldrh	r3, [r5, #12]
 801de76:	2b01      	cmp	r3, #1
 801de78:	d907      	bls.n	801de8a <_fwalk_reent+0x3a>
 801de7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801de7e:	3301      	adds	r3, #1
 801de80:	d003      	beq.n	801de8a <_fwalk_reent+0x3a>
 801de82:	4629      	mov	r1, r5
 801de84:	4630      	mov	r0, r6
 801de86:	47c0      	blx	r8
 801de88:	4307      	orrs	r7, r0
 801de8a:	3568      	adds	r5, #104	; 0x68
 801de8c:	e7e9      	b.n	801de62 <_fwalk_reent+0x12>

0801de8e <__retarget_lock_init_recursive>:
 801de8e:	4770      	bx	lr

0801de90 <__retarget_lock_acquire_recursive>:
 801de90:	4770      	bx	lr

0801de92 <__retarget_lock_release_recursive>:
 801de92:	4770      	bx	lr

0801de94 <__swhatbuf_r>:
 801de94:	b570      	push	{r4, r5, r6, lr}
 801de96:	460e      	mov	r6, r1
 801de98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de9c:	2900      	cmp	r1, #0
 801de9e:	b096      	sub	sp, #88	; 0x58
 801dea0:	4614      	mov	r4, r2
 801dea2:	461d      	mov	r5, r3
 801dea4:	da08      	bge.n	801deb8 <__swhatbuf_r+0x24>
 801dea6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801deaa:	2200      	movs	r2, #0
 801deac:	602a      	str	r2, [r5, #0]
 801deae:	061a      	lsls	r2, r3, #24
 801deb0:	d410      	bmi.n	801ded4 <__swhatbuf_r+0x40>
 801deb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801deb6:	e00e      	b.n	801ded6 <__swhatbuf_r+0x42>
 801deb8:	466a      	mov	r2, sp
 801deba:	f000 fca5 	bl	801e808 <_fstat_r>
 801debe:	2800      	cmp	r0, #0
 801dec0:	dbf1      	blt.n	801dea6 <__swhatbuf_r+0x12>
 801dec2:	9a01      	ldr	r2, [sp, #4]
 801dec4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dec8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801decc:	425a      	negs	r2, r3
 801dece:	415a      	adcs	r2, r3
 801ded0:	602a      	str	r2, [r5, #0]
 801ded2:	e7ee      	b.n	801deb2 <__swhatbuf_r+0x1e>
 801ded4:	2340      	movs	r3, #64	; 0x40
 801ded6:	2000      	movs	r0, #0
 801ded8:	6023      	str	r3, [r4, #0]
 801deda:	b016      	add	sp, #88	; 0x58
 801dedc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801dee0 <__smakebuf_r>:
 801dee0:	898b      	ldrh	r3, [r1, #12]
 801dee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dee4:	079d      	lsls	r5, r3, #30
 801dee6:	4606      	mov	r6, r0
 801dee8:	460c      	mov	r4, r1
 801deea:	d507      	bpl.n	801defc <__smakebuf_r+0x1c>
 801deec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801def0:	6023      	str	r3, [r4, #0]
 801def2:	6123      	str	r3, [r4, #16]
 801def4:	2301      	movs	r3, #1
 801def6:	6163      	str	r3, [r4, #20]
 801def8:	b002      	add	sp, #8
 801defa:	bd70      	pop	{r4, r5, r6, pc}
 801defc:	ab01      	add	r3, sp, #4
 801defe:	466a      	mov	r2, sp
 801df00:	f7ff ffc8 	bl	801de94 <__swhatbuf_r>
 801df04:	9900      	ldr	r1, [sp, #0]
 801df06:	4605      	mov	r5, r0
 801df08:	4630      	mov	r0, r6
 801df0a:	f000 f89d 	bl	801e048 <_malloc_r>
 801df0e:	b948      	cbnz	r0, 801df24 <__smakebuf_r+0x44>
 801df10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df14:	059a      	lsls	r2, r3, #22
 801df16:	d4ef      	bmi.n	801def8 <__smakebuf_r+0x18>
 801df18:	f023 0303 	bic.w	r3, r3, #3
 801df1c:	f043 0302 	orr.w	r3, r3, #2
 801df20:	81a3      	strh	r3, [r4, #12]
 801df22:	e7e3      	b.n	801deec <__smakebuf_r+0xc>
 801df24:	4b0d      	ldr	r3, [pc, #52]	; (801df5c <__smakebuf_r+0x7c>)
 801df26:	62b3      	str	r3, [r6, #40]	; 0x28
 801df28:	89a3      	ldrh	r3, [r4, #12]
 801df2a:	6020      	str	r0, [r4, #0]
 801df2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801df30:	81a3      	strh	r3, [r4, #12]
 801df32:	9b00      	ldr	r3, [sp, #0]
 801df34:	6163      	str	r3, [r4, #20]
 801df36:	9b01      	ldr	r3, [sp, #4]
 801df38:	6120      	str	r0, [r4, #16]
 801df3a:	b15b      	cbz	r3, 801df54 <__smakebuf_r+0x74>
 801df3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801df40:	4630      	mov	r0, r6
 801df42:	f000 fc73 	bl	801e82c <_isatty_r>
 801df46:	b128      	cbz	r0, 801df54 <__smakebuf_r+0x74>
 801df48:	89a3      	ldrh	r3, [r4, #12]
 801df4a:	f023 0303 	bic.w	r3, r3, #3
 801df4e:	f043 0301 	orr.w	r3, r3, #1
 801df52:	81a3      	strh	r3, [r4, #12]
 801df54:	89a0      	ldrh	r0, [r4, #12]
 801df56:	4305      	orrs	r5, r0
 801df58:	81a5      	strh	r5, [r4, #12]
 801df5a:	e7cd      	b.n	801def8 <__smakebuf_r+0x18>
 801df5c:	0801dcc9 	.word	0x0801dcc9

0801df60 <malloc>:
 801df60:	4b02      	ldr	r3, [pc, #8]	; (801df6c <malloc+0xc>)
 801df62:	4601      	mov	r1, r0
 801df64:	6818      	ldr	r0, [r3, #0]
 801df66:	f000 b86f 	b.w	801e048 <_malloc_r>
 801df6a:	bf00      	nop
 801df6c:	20000030 	.word	0x20000030

0801df70 <_free_r>:
 801df70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801df72:	2900      	cmp	r1, #0
 801df74:	d044      	beq.n	801e000 <_free_r+0x90>
 801df76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801df7a:	9001      	str	r0, [sp, #4]
 801df7c:	2b00      	cmp	r3, #0
 801df7e:	f1a1 0404 	sub.w	r4, r1, #4
 801df82:	bfb8      	it	lt
 801df84:	18e4      	addlt	r4, r4, r3
 801df86:	f000 fc73 	bl	801e870 <__malloc_lock>
 801df8a:	4a1e      	ldr	r2, [pc, #120]	; (801e004 <_free_r+0x94>)
 801df8c:	9801      	ldr	r0, [sp, #4]
 801df8e:	6813      	ldr	r3, [r2, #0]
 801df90:	b933      	cbnz	r3, 801dfa0 <_free_r+0x30>
 801df92:	6063      	str	r3, [r4, #4]
 801df94:	6014      	str	r4, [r2, #0]
 801df96:	b003      	add	sp, #12
 801df98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801df9c:	f000 bc6e 	b.w	801e87c <__malloc_unlock>
 801dfa0:	42a3      	cmp	r3, r4
 801dfa2:	d908      	bls.n	801dfb6 <_free_r+0x46>
 801dfa4:	6825      	ldr	r5, [r4, #0]
 801dfa6:	1961      	adds	r1, r4, r5
 801dfa8:	428b      	cmp	r3, r1
 801dfaa:	bf01      	itttt	eq
 801dfac:	6819      	ldreq	r1, [r3, #0]
 801dfae:	685b      	ldreq	r3, [r3, #4]
 801dfb0:	1949      	addeq	r1, r1, r5
 801dfb2:	6021      	streq	r1, [r4, #0]
 801dfb4:	e7ed      	b.n	801df92 <_free_r+0x22>
 801dfb6:	461a      	mov	r2, r3
 801dfb8:	685b      	ldr	r3, [r3, #4]
 801dfba:	b10b      	cbz	r3, 801dfc0 <_free_r+0x50>
 801dfbc:	42a3      	cmp	r3, r4
 801dfbe:	d9fa      	bls.n	801dfb6 <_free_r+0x46>
 801dfc0:	6811      	ldr	r1, [r2, #0]
 801dfc2:	1855      	adds	r5, r2, r1
 801dfc4:	42a5      	cmp	r5, r4
 801dfc6:	d10b      	bne.n	801dfe0 <_free_r+0x70>
 801dfc8:	6824      	ldr	r4, [r4, #0]
 801dfca:	4421      	add	r1, r4
 801dfcc:	1854      	adds	r4, r2, r1
 801dfce:	42a3      	cmp	r3, r4
 801dfd0:	6011      	str	r1, [r2, #0]
 801dfd2:	d1e0      	bne.n	801df96 <_free_r+0x26>
 801dfd4:	681c      	ldr	r4, [r3, #0]
 801dfd6:	685b      	ldr	r3, [r3, #4]
 801dfd8:	6053      	str	r3, [r2, #4]
 801dfda:	4421      	add	r1, r4
 801dfdc:	6011      	str	r1, [r2, #0]
 801dfde:	e7da      	b.n	801df96 <_free_r+0x26>
 801dfe0:	d902      	bls.n	801dfe8 <_free_r+0x78>
 801dfe2:	230c      	movs	r3, #12
 801dfe4:	6003      	str	r3, [r0, #0]
 801dfe6:	e7d6      	b.n	801df96 <_free_r+0x26>
 801dfe8:	6825      	ldr	r5, [r4, #0]
 801dfea:	1961      	adds	r1, r4, r5
 801dfec:	428b      	cmp	r3, r1
 801dfee:	bf04      	itt	eq
 801dff0:	6819      	ldreq	r1, [r3, #0]
 801dff2:	685b      	ldreq	r3, [r3, #4]
 801dff4:	6063      	str	r3, [r4, #4]
 801dff6:	bf04      	itt	eq
 801dff8:	1949      	addeq	r1, r1, r5
 801dffa:	6021      	streq	r1, [r4, #0]
 801dffc:	6054      	str	r4, [r2, #4]
 801dffe:	e7ca      	b.n	801df96 <_free_r+0x26>
 801e000:	b003      	add	sp, #12
 801e002:	bd30      	pop	{r4, r5, pc}
 801e004:	2001152c 	.word	0x2001152c

0801e008 <sbrk_aligned>:
 801e008:	b570      	push	{r4, r5, r6, lr}
 801e00a:	4e0e      	ldr	r6, [pc, #56]	; (801e044 <sbrk_aligned+0x3c>)
 801e00c:	460c      	mov	r4, r1
 801e00e:	6831      	ldr	r1, [r6, #0]
 801e010:	4605      	mov	r5, r0
 801e012:	b911      	cbnz	r1, 801e01a <sbrk_aligned+0x12>
 801e014:	f000 fb7a 	bl	801e70c <_sbrk_r>
 801e018:	6030      	str	r0, [r6, #0]
 801e01a:	4621      	mov	r1, r4
 801e01c:	4628      	mov	r0, r5
 801e01e:	f000 fb75 	bl	801e70c <_sbrk_r>
 801e022:	1c43      	adds	r3, r0, #1
 801e024:	d00a      	beq.n	801e03c <sbrk_aligned+0x34>
 801e026:	1cc4      	adds	r4, r0, #3
 801e028:	f024 0403 	bic.w	r4, r4, #3
 801e02c:	42a0      	cmp	r0, r4
 801e02e:	d007      	beq.n	801e040 <sbrk_aligned+0x38>
 801e030:	1a21      	subs	r1, r4, r0
 801e032:	4628      	mov	r0, r5
 801e034:	f000 fb6a 	bl	801e70c <_sbrk_r>
 801e038:	3001      	adds	r0, #1
 801e03a:	d101      	bne.n	801e040 <sbrk_aligned+0x38>
 801e03c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801e040:	4620      	mov	r0, r4
 801e042:	bd70      	pop	{r4, r5, r6, pc}
 801e044:	20011530 	.word	0x20011530

0801e048 <_malloc_r>:
 801e048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e04c:	1ccd      	adds	r5, r1, #3
 801e04e:	f025 0503 	bic.w	r5, r5, #3
 801e052:	3508      	adds	r5, #8
 801e054:	2d0c      	cmp	r5, #12
 801e056:	bf38      	it	cc
 801e058:	250c      	movcc	r5, #12
 801e05a:	2d00      	cmp	r5, #0
 801e05c:	4607      	mov	r7, r0
 801e05e:	db01      	blt.n	801e064 <_malloc_r+0x1c>
 801e060:	42a9      	cmp	r1, r5
 801e062:	d905      	bls.n	801e070 <_malloc_r+0x28>
 801e064:	230c      	movs	r3, #12
 801e066:	603b      	str	r3, [r7, #0]
 801e068:	2600      	movs	r6, #0
 801e06a:	4630      	mov	r0, r6
 801e06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e070:	4e2e      	ldr	r6, [pc, #184]	; (801e12c <_malloc_r+0xe4>)
 801e072:	f000 fbfd 	bl	801e870 <__malloc_lock>
 801e076:	6833      	ldr	r3, [r6, #0]
 801e078:	461c      	mov	r4, r3
 801e07a:	bb34      	cbnz	r4, 801e0ca <_malloc_r+0x82>
 801e07c:	4629      	mov	r1, r5
 801e07e:	4638      	mov	r0, r7
 801e080:	f7ff ffc2 	bl	801e008 <sbrk_aligned>
 801e084:	1c43      	adds	r3, r0, #1
 801e086:	4604      	mov	r4, r0
 801e088:	d14d      	bne.n	801e126 <_malloc_r+0xde>
 801e08a:	6834      	ldr	r4, [r6, #0]
 801e08c:	4626      	mov	r6, r4
 801e08e:	2e00      	cmp	r6, #0
 801e090:	d140      	bne.n	801e114 <_malloc_r+0xcc>
 801e092:	6823      	ldr	r3, [r4, #0]
 801e094:	4631      	mov	r1, r6
 801e096:	4638      	mov	r0, r7
 801e098:	eb04 0803 	add.w	r8, r4, r3
 801e09c:	f000 fb36 	bl	801e70c <_sbrk_r>
 801e0a0:	4580      	cmp	r8, r0
 801e0a2:	d13a      	bne.n	801e11a <_malloc_r+0xd2>
 801e0a4:	6821      	ldr	r1, [r4, #0]
 801e0a6:	3503      	adds	r5, #3
 801e0a8:	1a6d      	subs	r5, r5, r1
 801e0aa:	f025 0503 	bic.w	r5, r5, #3
 801e0ae:	3508      	adds	r5, #8
 801e0b0:	2d0c      	cmp	r5, #12
 801e0b2:	bf38      	it	cc
 801e0b4:	250c      	movcc	r5, #12
 801e0b6:	4629      	mov	r1, r5
 801e0b8:	4638      	mov	r0, r7
 801e0ba:	f7ff ffa5 	bl	801e008 <sbrk_aligned>
 801e0be:	3001      	adds	r0, #1
 801e0c0:	d02b      	beq.n	801e11a <_malloc_r+0xd2>
 801e0c2:	6823      	ldr	r3, [r4, #0]
 801e0c4:	442b      	add	r3, r5
 801e0c6:	6023      	str	r3, [r4, #0]
 801e0c8:	e00e      	b.n	801e0e8 <_malloc_r+0xa0>
 801e0ca:	6822      	ldr	r2, [r4, #0]
 801e0cc:	1b52      	subs	r2, r2, r5
 801e0ce:	d41e      	bmi.n	801e10e <_malloc_r+0xc6>
 801e0d0:	2a0b      	cmp	r2, #11
 801e0d2:	d916      	bls.n	801e102 <_malloc_r+0xba>
 801e0d4:	1961      	adds	r1, r4, r5
 801e0d6:	42a3      	cmp	r3, r4
 801e0d8:	6025      	str	r5, [r4, #0]
 801e0da:	bf18      	it	ne
 801e0dc:	6059      	strne	r1, [r3, #4]
 801e0de:	6863      	ldr	r3, [r4, #4]
 801e0e0:	bf08      	it	eq
 801e0e2:	6031      	streq	r1, [r6, #0]
 801e0e4:	5162      	str	r2, [r4, r5]
 801e0e6:	604b      	str	r3, [r1, #4]
 801e0e8:	4638      	mov	r0, r7
 801e0ea:	f104 060b 	add.w	r6, r4, #11
 801e0ee:	f000 fbc5 	bl	801e87c <__malloc_unlock>
 801e0f2:	f026 0607 	bic.w	r6, r6, #7
 801e0f6:	1d23      	adds	r3, r4, #4
 801e0f8:	1af2      	subs	r2, r6, r3
 801e0fa:	d0b6      	beq.n	801e06a <_malloc_r+0x22>
 801e0fc:	1b9b      	subs	r3, r3, r6
 801e0fe:	50a3      	str	r3, [r4, r2]
 801e100:	e7b3      	b.n	801e06a <_malloc_r+0x22>
 801e102:	6862      	ldr	r2, [r4, #4]
 801e104:	42a3      	cmp	r3, r4
 801e106:	bf0c      	ite	eq
 801e108:	6032      	streq	r2, [r6, #0]
 801e10a:	605a      	strne	r2, [r3, #4]
 801e10c:	e7ec      	b.n	801e0e8 <_malloc_r+0xa0>
 801e10e:	4623      	mov	r3, r4
 801e110:	6864      	ldr	r4, [r4, #4]
 801e112:	e7b2      	b.n	801e07a <_malloc_r+0x32>
 801e114:	4634      	mov	r4, r6
 801e116:	6876      	ldr	r6, [r6, #4]
 801e118:	e7b9      	b.n	801e08e <_malloc_r+0x46>
 801e11a:	230c      	movs	r3, #12
 801e11c:	603b      	str	r3, [r7, #0]
 801e11e:	4638      	mov	r0, r7
 801e120:	f000 fbac 	bl	801e87c <__malloc_unlock>
 801e124:	e7a1      	b.n	801e06a <_malloc_r+0x22>
 801e126:	6025      	str	r5, [r4, #0]
 801e128:	e7de      	b.n	801e0e8 <_malloc_r+0xa0>
 801e12a:	bf00      	nop
 801e12c:	2001152c 	.word	0x2001152c

0801e130 <__sfputc_r>:
 801e130:	6893      	ldr	r3, [r2, #8]
 801e132:	3b01      	subs	r3, #1
 801e134:	2b00      	cmp	r3, #0
 801e136:	b410      	push	{r4}
 801e138:	6093      	str	r3, [r2, #8]
 801e13a:	da08      	bge.n	801e14e <__sfputc_r+0x1e>
 801e13c:	6994      	ldr	r4, [r2, #24]
 801e13e:	42a3      	cmp	r3, r4
 801e140:	db01      	blt.n	801e146 <__sfputc_r+0x16>
 801e142:	290a      	cmp	r1, #10
 801e144:	d103      	bne.n	801e14e <__sfputc_r+0x1e>
 801e146:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e14a:	f7ff bbf9 	b.w	801d940 <__swbuf_r>
 801e14e:	6813      	ldr	r3, [r2, #0]
 801e150:	1c58      	adds	r0, r3, #1
 801e152:	6010      	str	r0, [r2, #0]
 801e154:	7019      	strb	r1, [r3, #0]
 801e156:	4608      	mov	r0, r1
 801e158:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e15c:	4770      	bx	lr

0801e15e <__sfputs_r>:
 801e15e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e160:	4606      	mov	r6, r0
 801e162:	460f      	mov	r7, r1
 801e164:	4614      	mov	r4, r2
 801e166:	18d5      	adds	r5, r2, r3
 801e168:	42ac      	cmp	r4, r5
 801e16a:	d101      	bne.n	801e170 <__sfputs_r+0x12>
 801e16c:	2000      	movs	r0, #0
 801e16e:	e007      	b.n	801e180 <__sfputs_r+0x22>
 801e170:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e174:	463a      	mov	r2, r7
 801e176:	4630      	mov	r0, r6
 801e178:	f7ff ffda 	bl	801e130 <__sfputc_r>
 801e17c:	1c43      	adds	r3, r0, #1
 801e17e:	d1f3      	bne.n	801e168 <__sfputs_r+0xa>
 801e180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e184 <_vfiprintf_r>:
 801e184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e188:	460d      	mov	r5, r1
 801e18a:	b09d      	sub	sp, #116	; 0x74
 801e18c:	4614      	mov	r4, r2
 801e18e:	4698      	mov	r8, r3
 801e190:	4606      	mov	r6, r0
 801e192:	b118      	cbz	r0, 801e19c <_vfiprintf_r+0x18>
 801e194:	6983      	ldr	r3, [r0, #24]
 801e196:	b90b      	cbnz	r3, 801e19c <_vfiprintf_r+0x18>
 801e198:	f7ff fdca 	bl	801dd30 <__sinit>
 801e19c:	4b89      	ldr	r3, [pc, #548]	; (801e3c4 <_vfiprintf_r+0x240>)
 801e19e:	429d      	cmp	r5, r3
 801e1a0:	d11b      	bne.n	801e1da <_vfiprintf_r+0x56>
 801e1a2:	6875      	ldr	r5, [r6, #4]
 801e1a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e1a6:	07d9      	lsls	r1, r3, #31
 801e1a8:	d405      	bmi.n	801e1b6 <_vfiprintf_r+0x32>
 801e1aa:	89ab      	ldrh	r3, [r5, #12]
 801e1ac:	059a      	lsls	r2, r3, #22
 801e1ae:	d402      	bmi.n	801e1b6 <_vfiprintf_r+0x32>
 801e1b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e1b2:	f7ff fe6d 	bl	801de90 <__retarget_lock_acquire_recursive>
 801e1b6:	89ab      	ldrh	r3, [r5, #12]
 801e1b8:	071b      	lsls	r3, r3, #28
 801e1ba:	d501      	bpl.n	801e1c0 <_vfiprintf_r+0x3c>
 801e1bc:	692b      	ldr	r3, [r5, #16]
 801e1be:	b9eb      	cbnz	r3, 801e1fc <_vfiprintf_r+0x78>
 801e1c0:	4629      	mov	r1, r5
 801e1c2:	4630      	mov	r0, r6
 801e1c4:	f7ff fc0e 	bl	801d9e4 <__swsetup_r>
 801e1c8:	b1c0      	cbz	r0, 801e1fc <_vfiprintf_r+0x78>
 801e1ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e1cc:	07dc      	lsls	r4, r3, #31
 801e1ce:	d50e      	bpl.n	801e1ee <_vfiprintf_r+0x6a>
 801e1d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e1d4:	b01d      	add	sp, #116	; 0x74
 801e1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1da:	4b7b      	ldr	r3, [pc, #492]	; (801e3c8 <_vfiprintf_r+0x244>)
 801e1dc:	429d      	cmp	r5, r3
 801e1de:	d101      	bne.n	801e1e4 <_vfiprintf_r+0x60>
 801e1e0:	68b5      	ldr	r5, [r6, #8]
 801e1e2:	e7df      	b.n	801e1a4 <_vfiprintf_r+0x20>
 801e1e4:	4b79      	ldr	r3, [pc, #484]	; (801e3cc <_vfiprintf_r+0x248>)
 801e1e6:	429d      	cmp	r5, r3
 801e1e8:	bf08      	it	eq
 801e1ea:	68f5      	ldreq	r5, [r6, #12]
 801e1ec:	e7da      	b.n	801e1a4 <_vfiprintf_r+0x20>
 801e1ee:	89ab      	ldrh	r3, [r5, #12]
 801e1f0:	0598      	lsls	r0, r3, #22
 801e1f2:	d4ed      	bmi.n	801e1d0 <_vfiprintf_r+0x4c>
 801e1f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e1f6:	f7ff fe4c 	bl	801de92 <__retarget_lock_release_recursive>
 801e1fa:	e7e9      	b.n	801e1d0 <_vfiprintf_r+0x4c>
 801e1fc:	2300      	movs	r3, #0
 801e1fe:	9309      	str	r3, [sp, #36]	; 0x24
 801e200:	2320      	movs	r3, #32
 801e202:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e206:	f8cd 800c 	str.w	r8, [sp, #12]
 801e20a:	2330      	movs	r3, #48	; 0x30
 801e20c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e3d0 <_vfiprintf_r+0x24c>
 801e210:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e214:	f04f 0901 	mov.w	r9, #1
 801e218:	4623      	mov	r3, r4
 801e21a:	469a      	mov	sl, r3
 801e21c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e220:	b10a      	cbz	r2, 801e226 <_vfiprintf_r+0xa2>
 801e222:	2a25      	cmp	r2, #37	; 0x25
 801e224:	d1f9      	bne.n	801e21a <_vfiprintf_r+0x96>
 801e226:	ebba 0b04 	subs.w	fp, sl, r4
 801e22a:	d00b      	beq.n	801e244 <_vfiprintf_r+0xc0>
 801e22c:	465b      	mov	r3, fp
 801e22e:	4622      	mov	r2, r4
 801e230:	4629      	mov	r1, r5
 801e232:	4630      	mov	r0, r6
 801e234:	f7ff ff93 	bl	801e15e <__sfputs_r>
 801e238:	3001      	adds	r0, #1
 801e23a:	f000 80aa 	beq.w	801e392 <_vfiprintf_r+0x20e>
 801e23e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e240:	445a      	add	r2, fp
 801e242:	9209      	str	r2, [sp, #36]	; 0x24
 801e244:	f89a 3000 	ldrb.w	r3, [sl]
 801e248:	2b00      	cmp	r3, #0
 801e24a:	f000 80a2 	beq.w	801e392 <_vfiprintf_r+0x20e>
 801e24e:	2300      	movs	r3, #0
 801e250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e258:	f10a 0a01 	add.w	sl, sl, #1
 801e25c:	9304      	str	r3, [sp, #16]
 801e25e:	9307      	str	r3, [sp, #28]
 801e260:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e264:	931a      	str	r3, [sp, #104]	; 0x68
 801e266:	4654      	mov	r4, sl
 801e268:	2205      	movs	r2, #5
 801e26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e26e:	4858      	ldr	r0, [pc, #352]	; (801e3d0 <_vfiprintf_r+0x24c>)
 801e270:	f7e1 fffe 	bl	8000270 <memchr>
 801e274:	9a04      	ldr	r2, [sp, #16]
 801e276:	b9d8      	cbnz	r0, 801e2b0 <_vfiprintf_r+0x12c>
 801e278:	06d1      	lsls	r1, r2, #27
 801e27a:	bf44      	itt	mi
 801e27c:	2320      	movmi	r3, #32
 801e27e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e282:	0713      	lsls	r3, r2, #28
 801e284:	bf44      	itt	mi
 801e286:	232b      	movmi	r3, #43	; 0x2b
 801e288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e28c:	f89a 3000 	ldrb.w	r3, [sl]
 801e290:	2b2a      	cmp	r3, #42	; 0x2a
 801e292:	d015      	beq.n	801e2c0 <_vfiprintf_r+0x13c>
 801e294:	9a07      	ldr	r2, [sp, #28]
 801e296:	4654      	mov	r4, sl
 801e298:	2000      	movs	r0, #0
 801e29a:	f04f 0c0a 	mov.w	ip, #10
 801e29e:	4621      	mov	r1, r4
 801e2a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e2a4:	3b30      	subs	r3, #48	; 0x30
 801e2a6:	2b09      	cmp	r3, #9
 801e2a8:	d94e      	bls.n	801e348 <_vfiprintf_r+0x1c4>
 801e2aa:	b1b0      	cbz	r0, 801e2da <_vfiprintf_r+0x156>
 801e2ac:	9207      	str	r2, [sp, #28]
 801e2ae:	e014      	b.n	801e2da <_vfiprintf_r+0x156>
 801e2b0:	eba0 0308 	sub.w	r3, r0, r8
 801e2b4:	fa09 f303 	lsl.w	r3, r9, r3
 801e2b8:	4313      	orrs	r3, r2
 801e2ba:	9304      	str	r3, [sp, #16]
 801e2bc:	46a2      	mov	sl, r4
 801e2be:	e7d2      	b.n	801e266 <_vfiprintf_r+0xe2>
 801e2c0:	9b03      	ldr	r3, [sp, #12]
 801e2c2:	1d19      	adds	r1, r3, #4
 801e2c4:	681b      	ldr	r3, [r3, #0]
 801e2c6:	9103      	str	r1, [sp, #12]
 801e2c8:	2b00      	cmp	r3, #0
 801e2ca:	bfbb      	ittet	lt
 801e2cc:	425b      	neglt	r3, r3
 801e2ce:	f042 0202 	orrlt.w	r2, r2, #2
 801e2d2:	9307      	strge	r3, [sp, #28]
 801e2d4:	9307      	strlt	r3, [sp, #28]
 801e2d6:	bfb8      	it	lt
 801e2d8:	9204      	strlt	r2, [sp, #16]
 801e2da:	7823      	ldrb	r3, [r4, #0]
 801e2dc:	2b2e      	cmp	r3, #46	; 0x2e
 801e2de:	d10c      	bne.n	801e2fa <_vfiprintf_r+0x176>
 801e2e0:	7863      	ldrb	r3, [r4, #1]
 801e2e2:	2b2a      	cmp	r3, #42	; 0x2a
 801e2e4:	d135      	bne.n	801e352 <_vfiprintf_r+0x1ce>
 801e2e6:	9b03      	ldr	r3, [sp, #12]
 801e2e8:	1d1a      	adds	r2, r3, #4
 801e2ea:	681b      	ldr	r3, [r3, #0]
 801e2ec:	9203      	str	r2, [sp, #12]
 801e2ee:	2b00      	cmp	r3, #0
 801e2f0:	bfb8      	it	lt
 801e2f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e2f6:	3402      	adds	r4, #2
 801e2f8:	9305      	str	r3, [sp, #20]
 801e2fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e3e0 <_vfiprintf_r+0x25c>
 801e2fe:	7821      	ldrb	r1, [r4, #0]
 801e300:	2203      	movs	r2, #3
 801e302:	4650      	mov	r0, sl
 801e304:	f7e1 ffb4 	bl	8000270 <memchr>
 801e308:	b140      	cbz	r0, 801e31c <_vfiprintf_r+0x198>
 801e30a:	2340      	movs	r3, #64	; 0x40
 801e30c:	eba0 000a 	sub.w	r0, r0, sl
 801e310:	fa03 f000 	lsl.w	r0, r3, r0
 801e314:	9b04      	ldr	r3, [sp, #16]
 801e316:	4303      	orrs	r3, r0
 801e318:	3401      	adds	r4, #1
 801e31a:	9304      	str	r3, [sp, #16]
 801e31c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e320:	482c      	ldr	r0, [pc, #176]	; (801e3d4 <_vfiprintf_r+0x250>)
 801e322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e326:	2206      	movs	r2, #6
 801e328:	f7e1 ffa2 	bl	8000270 <memchr>
 801e32c:	2800      	cmp	r0, #0
 801e32e:	d03f      	beq.n	801e3b0 <_vfiprintf_r+0x22c>
 801e330:	4b29      	ldr	r3, [pc, #164]	; (801e3d8 <_vfiprintf_r+0x254>)
 801e332:	bb1b      	cbnz	r3, 801e37c <_vfiprintf_r+0x1f8>
 801e334:	9b03      	ldr	r3, [sp, #12]
 801e336:	3307      	adds	r3, #7
 801e338:	f023 0307 	bic.w	r3, r3, #7
 801e33c:	3308      	adds	r3, #8
 801e33e:	9303      	str	r3, [sp, #12]
 801e340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e342:	443b      	add	r3, r7
 801e344:	9309      	str	r3, [sp, #36]	; 0x24
 801e346:	e767      	b.n	801e218 <_vfiprintf_r+0x94>
 801e348:	fb0c 3202 	mla	r2, ip, r2, r3
 801e34c:	460c      	mov	r4, r1
 801e34e:	2001      	movs	r0, #1
 801e350:	e7a5      	b.n	801e29e <_vfiprintf_r+0x11a>
 801e352:	2300      	movs	r3, #0
 801e354:	3401      	adds	r4, #1
 801e356:	9305      	str	r3, [sp, #20]
 801e358:	4619      	mov	r1, r3
 801e35a:	f04f 0c0a 	mov.w	ip, #10
 801e35e:	4620      	mov	r0, r4
 801e360:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e364:	3a30      	subs	r2, #48	; 0x30
 801e366:	2a09      	cmp	r2, #9
 801e368:	d903      	bls.n	801e372 <_vfiprintf_r+0x1ee>
 801e36a:	2b00      	cmp	r3, #0
 801e36c:	d0c5      	beq.n	801e2fa <_vfiprintf_r+0x176>
 801e36e:	9105      	str	r1, [sp, #20]
 801e370:	e7c3      	b.n	801e2fa <_vfiprintf_r+0x176>
 801e372:	fb0c 2101 	mla	r1, ip, r1, r2
 801e376:	4604      	mov	r4, r0
 801e378:	2301      	movs	r3, #1
 801e37a:	e7f0      	b.n	801e35e <_vfiprintf_r+0x1da>
 801e37c:	ab03      	add	r3, sp, #12
 801e37e:	9300      	str	r3, [sp, #0]
 801e380:	462a      	mov	r2, r5
 801e382:	4b16      	ldr	r3, [pc, #88]	; (801e3dc <_vfiprintf_r+0x258>)
 801e384:	a904      	add	r1, sp, #16
 801e386:	4630      	mov	r0, r6
 801e388:	f3af 8000 	nop.w
 801e38c:	4607      	mov	r7, r0
 801e38e:	1c78      	adds	r0, r7, #1
 801e390:	d1d6      	bne.n	801e340 <_vfiprintf_r+0x1bc>
 801e392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e394:	07d9      	lsls	r1, r3, #31
 801e396:	d405      	bmi.n	801e3a4 <_vfiprintf_r+0x220>
 801e398:	89ab      	ldrh	r3, [r5, #12]
 801e39a:	059a      	lsls	r2, r3, #22
 801e39c:	d402      	bmi.n	801e3a4 <_vfiprintf_r+0x220>
 801e39e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e3a0:	f7ff fd77 	bl	801de92 <__retarget_lock_release_recursive>
 801e3a4:	89ab      	ldrh	r3, [r5, #12]
 801e3a6:	065b      	lsls	r3, r3, #25
 801e3a8:	f53f af12 	bmi.w	801e1d0 <_vfiprintf_r+0x4c>
 801e3ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e3ae:	e711      	b.n	801e1d4 <_vfiprintf_r+0x50>
 801e3b0:	ab03      	add	r3, sp, #12
 801e3b2:	9300      	str	r3, [sp, #0]
 801e3b4:	462a      	mov	r2, r5
 801e3b6:	4b09      	ldr	r3, [pc, #36]	; (801e3dc <_vfiprintf_r+0x258>)
 801e3b8:	a904      	add	r1, sp, #16
 801e3ba:	4630      	mov	r0, r6
 801e3bc:	f000 f880 	bl	801e4c0 <_printf_i>
 801e3c0:	e7e4      	b.n	801e38c <_vfiprintf_r+0x208>
 801e3c2:	bf00      	nop
 801e3c4:	080225c0 	.word	0x080225c0
 801e3c8:	080225e0 	.word	0x080225e0
 801e3cc:	080225a0 	.word	0x080225a0
 801e3d0:	08022600 	.word	0x08022600
 801e3d4:	0802260a 	.word	0x0802260a
 801e3d8:	00000000 	.word	0x00000000
 801e3dc:	0801e15f 	.word	0x0801e15f
 801e3e0:	08022606 	.word	0x08022606

0801e3e4 <_printf_common>:
 801e3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e3e8:	4616      	mov	r6, r2
 801e3ea:	4699      	mov	r9, r3
 801e3ec:	688a      	ldr	r2, [r1, #8]
 801e3ee:	690b      	ldr	r3, [r1, #16]
 801e3f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e3f4:	4293      	cmp	r3, r2
 801e3f6:	bfb8      	it	lt
 801e3f8:	4613      	movlt	r3, r2
 801e3fa:	6033      	str	r3, [r6, #0]
 801e3fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e400:	4607      	mov	r7, r0
 801e402:	460c      	mov	r4, r1
 801e404:	b10a      	cbz	r2, 801e40a <_printf_common+0x26>
 801e406:	3301      	adds	r3, #1
 801e408:	6033      	str	r3, [r6, #0]
 801e40a:	6823      	ldr	r3, [r4, #0]
 801e40c:	0699      	lsls	r1, r3, #26
 801e40e:	bf42      	ittt	mi
 801e410:	6833      	ldrmi	r3, [r6, #0]
 801e412:	3302      	addmi	r3, #2
 801e414:	6033      	strmi	r3, [r6, #0]
 801e416:	6825      	ldr	r5, [r4, #0]
 801e418:	f015 0506 	ands.w	r5, r5, #6
 801e41c:	d106      	bne.n	801e42c <_printf_common+0x48>
 801e41e:	f104 0a19 	add.w	sl, r4, #25
 801e422:	68e3      	ldr	r3, [r4, #12]
 801e424:	6832      	ldr	r2, [r6, #0]
 801e426:	1a9b      	subs	r3, r3, r2
 801e428:	42ab      	cmp	r3, r5
 801e42a:	dc26      	bgt.n	801e47a <_printf_common+0x96>
 801e42c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e430:	1e13      	subs	r3, r2, #0
 801e432:	6822      	ldr	r2, [r4, #0]
 801e434:	bf18      	it	ne
 801e436:	2301      	movne	r3, #1
 801e438:	0692      	lsls	r2, r2, #26
 801e43a:	d42b      	bmi.n	801e494 <_printf_common+0xb0>
 801e43c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e440:	4649      	mov	r1, r9
 801e442:	4638      	mov	r0, r7
 801e444:	47c0      	blx	r8
 801e446:	3001      	adds	r0, #1
 801e448:	d01e      	beq.n	801e488 <_printf_common+0xa4>
 801e44a:	6823      	ldr	r3, [r4, #0]
 801e44c:	68e5      	ldr	r5, [r4, #12]
 801e44e:	6832      	ldr	r2, [r6, #0]
 801e450:	f003 0306 	and.w	r3, r3, #6
 801e454:	2b04      	cmp	r3, #4
 801e456:	bf08      	it	eq
 801e458:	1aad      	subeq	r5, r5, r2
 801e45a:	68a3      	ldr	r3, [r4, #8]
 801e45c:	6922      	ldr	r2, [r4, #16]
 801e45e:	bf0c      	ite	eq
 801e460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e464:	2500      	movne	r5, #0
 801e466:	4293      	cmp	r3, r2
 801e468:	bfc4      	itt	gt
 801e46a:	1a9b      	subgt	r3, r3, r2
 801e46c:	18ed      	addgt	r5, r5, r3
 801e46e:	2600      	movs	r6, #0
 801e470:	341a      	adds	r4, #26
 801e472:	42b5      	cmp	r5, r6
 801e474:	d11a      	bne.n	801e4ac <_printf_common+0xc8>
 801e476:	2000      	movs	r0, #0
 801e478:	e008      	b.n	801e48c <_printf_common+0xa8>
 801e47a:	2301      	movs	r3, #1
 801e47c:	4652      	mov	r2, sl
 801e47e:	4649      	mov	r1, r9
 801e480:	4638      	mov	r0, r7
 801e482:	47c0      	blx	r8
 801e484:	3001      	adds	r0, #1
 801e486:	d103      	bne.n	801e490 <_printf_common+0xac>
 801e488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e490:	3501      	adds	r5, #1
 801e492:	e7c6      	b.n	801e422 <_printf_common+0x3e>
 801e494:	18e1      	adds	r1, r4, r3
 801e496:	1c5a      	adds	r2, r3, #1
 801e498:	2030      	movs	r0, #48	; 0x30
 801e49a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e49e:	4422      	add	r2, r4
 801e4a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e4a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e4a8:	3302      	adds	r3, #2
 801e4aa:	e7c7      	b.n	801e43c <_printf_common+0x58>
 801e4ac:	2301      	movs	r3, #1
 801e4ae:	4622      	mov	r2, r4
 801e4b0:	4649      	mov	r1, r9
 801e4b2:	4638      	mov	r0, r7
 801e4b4:	47c0      	blx	r8
 801e4b6:	3001      	adds	r0, #1
 801e4b8:	d0e6      	beq.n	801e488 <_printf_common+0xa4>
 801e4ba:	3601      	adds	r6, #1
 801e4bc:	e7d9      	b.n	801e472 <_printf_common+0x8e>
	...

0801e4c0 <_printf_i>:
 801e4c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e4c4:	7e0f      	ldrb	r7, [r1, #24]
 801e4c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e4c8:	2f78      	cmp	r7, #120	; 0x78
 801e4ca:	4691      	mov	r9, r2
 801e4cc:	4680      	mov	r8, r0
 801e4ce:	460c      	mov	r4, r1
 801e4d0:	469a      	mov	sl, r3
 801e4d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e4d6:	d807      	bhi.n	801e4e8 <_printf_i+0x28>
 801e4d8:	2f62      	cmp	r7, #98	; 0x62
 801e4da:	d80a      	bhi.n	801e4f2 <_printf_i+0x32>
 801e4dc:	2f00      	cmp	r7, #0
 801e4de:	f000 80d8 	beq.w	801e692 <_printf_i+0x1d2>
 801e4e2:	2f58      	cmp	r7, #88	; 0x58
 801e4e4:	f000 80a3 	beq.w	801e62e <_printf_i+0x16e>
 801e4e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e4ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e4f0:	e03a      	b.n	801e568 <_printf_i+0xa8>
 801e4f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e4f6:	2b15      	cmp	r3, #21
 801e4f8:	d8f6      	bhi.n	801e4e8 <_printf_i+0x28>
 801e4fa:	a101      	add	r1, pc, #4	; (adr r1, 801e500 <_printf_i+0x40>)
 801e4fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e500:	0801e559 	.word	0x0801e559
 801e504:	0801e56d 	.word	0x0801e56d
 801e508:	0801e4e9 	.word	0x0801e4e9
 801e50c:	0801e4e9 	.word	0x0801e4e9
 801e510:	0801e4e9 	.word	0x0801e4e9
 801e514:	0801e4e9 	.word	0x0801e4e9
 801e518:	0801e56d 	.word	0x0801e56d
 801e51c:	0801e4e9 	.word	0x0801e4e9
 801e520:	0801e4e9 	.word	0x0801e4e9
 801e524:	0801e4e9 	.word	0x0801e4e9
 801e528:	0801e4e9 	.word	0x0801e4e9
 801e52c:	0801e679 	.word	0x0801e679
 801e530:	0801e59d 	.word	0x0801e59d
 801e534:	0801e65b 	.word	0x0801e65b
 801e538:	0801e4e9 	.word	0x0801e4e9
 801e53c:	0801e4e9 	.word	0x0801e4e9
 801e540:	0801e69b 	.word	0x0801e69b
 801e544:	0801e4e9 	.word	0x0801e4e9
 801e548:	0801e59d 	.word	0x0801e59d
 801e54c:	0801e4e9 	.word	0x0801e4e9
 801e550:	0801e4e9 	.word	0x0801e4e9
 801e554:	0801e663 	.word	0x0801e663
 801e558:	682b      	ldr	r3, [r5, #0]
 801e55a:	1d1a      	adds	r2, r3, #4
 801e55c:	681b      	ldr	r3, [r3, #0]
 801e55e:	602a      	str	r2, [r5, #0]
 801e560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e568:	2301      	movs	r3, #1
 801e56a:	e0a3      	b.n	801e6b4 <_printf_i+0x1f4>
 801e56c:	6820      	ldr	r0, [r4, #0]
 801e56e:	6829      	ldr	r1, [r5, #0]
 801e570:	0606      	lsls	r6, r0, #24
 801e572:	f101 0304 	add.w	r3, r1, #4
 801e576:	d50a      	bpl.n	801e58e <_printf_i+0xce>
 801e578:	680e      	ldr	r6, [r1, #0]
 801e57a:	602b      	str	r3, [r5, #0]
 801e57c:	2e00      	cmp	r6, #0
 801e57e:	da03      	bge.n	801e588 <_printf_i+0xc8>
 801e580:	232d      	movs	r3, #45	; 0x2d
 801e582:	4276      	negs	r6, r6
 801e584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e588:	485e      	ldr	r0, [pc, #376]	; (801e704 <_printf_i+0x244>)
 801e58a:	230a      	movs	r3, #10
 801e58c:	e019      	b.n	801e5c2 <_printf_i+0x102>
 801e58e:	680e      	ldr	r6, [r1, #0]
 801e590:	602b      	str	r3, [r5, #0]
 801e592:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e596:	bf18      	it	ne
 801e598:	b236      	sxthne	r6, r6
 801e59a:	e7ef      	b.n	801e57c <_printf_i+0xbc>
 801e59c:	682b      	ldr	r3, [r5, #0]
 801e59e:	6820      	ldr	r0, [r4, #0]
 801e5a0:	1d19      	adds	r1, r3, #4
 801e5a2:	6029      	str	r1, [r5, #0]
 801e5a4:	0601      	lsls	r1, r0, #24
 801e5a6:	d501      	bpl.n	801e5ac <_printf_i+0xec>
 801e5a8:	681e      	ldr	r6, [r3, #0]
 801e5aa:	e002      	b.n	801e5b2 <_printf_i+0xf2>
 801e5ac:	0646      	lsls	r6, r0, #25
 801e5ae:	d5fb      	bpl.n	801e5a8 <_printf_i+0xe8>
 801e5b0:	881e      	ldrh	r6, [r3, #0]
 801e5b2:	4854      	ldr	r0, [pc, #336]	; (801e704 <_printf_i+0x244>)
 801e5b4:	2f6f      	cmp	r7, #111	; 0x6f
 801e5b6:	bf0c      	ite	eq
 801e5b8:	2308      	moveq	r3, #8
 801e5ba:	230a      	movne	r3, #10
 801e5bc:	2100      	movs	r1, #0
 801e5be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e5c2:	6865      	ldr	r5, [r4, #4]
 801e5c4:	60a5      	str	r5, [r4, #8]
 801e5c6:	2d00      	cmp	r5, #0
 801e5c8:	bfa2      	ittt	ge
 801e5ca:	6821      	ldrge	r1, [r4, #0]
 801e5cc:	f021 0104 	bicge.w	r1, r1, #4
 801e5d0:	6021      	strge	r1, [r4, #0]
 801e5d2:	b90e      	cbnz	r6, 801e5d8 <_printf_i+0x118>
 801e5d4:	2d00      	cmp	r5, #0
 801e5d6:	d04d      	beq.n	801e674 <_printf_i+0x1b4>
 801e5d8:	4615      	mov	r5, r2
 801e5da:	fbb6 f1f3 	udiv	r1, r6, r3
 801e5de:	fb03 6711 	mls	r7, r3, r1, r6
 801e5e2:	5dc7      	ldrb	r7, [r0, r7]
 801e5e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e5e8:	4637      	mov	r7, r6
 801e5ea:	42bb      	cmp	r3, r7
 801e5ec:	460e      	mov	r6, r1
 801e5ee:	d9f4      	bls.n	801e5da <_printf_i+0x11a>
 801e5f0:	2b08      	cmp	r3, #8
 801e5f2:	d10b      	bne.n	801e60c <_printf_i+0x14c>
 801e5f4:	6823      	ldr	r3, [r4, #0]
 801e5f6:	07de      	lsls	r6, r3, #31
 801e5f8:	d508      	bpl.n	801e60c <_printf_i+0x14c>
 801e5fa:	6923      	ldr	r3, [r4, #16]
 801e5fc:	6861      	ldr	r1, [r4, #4]
 801e5fe:	4299      	cmp	r1, r3
 801e600:	bfde      	ittt	le
 801e602:	2330      	movle	r3, #48	; 0x30
 801e604:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e608:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801e60c:	1b52      	subs	r2, r2, r5
 801e60e:	6122      	str	r2, [r4, #16]
 801e610:	f8cd a000 	str.w	sl, [sp]
 801e614:	464b      	mov	r3, r9
 801e616:	aa03      	add	r2, sp, #12
 801e618:	4621      	mov	r1, r4
 801e61a:	4640      	mov	r0, r8
 801e61c:	f7ff fee2 	bl	801e3e4 <_printf_common>
 801e620:	3001      	adds	r0, #1
 801e622:	d14c      	bne.n	801e6be <_printf_i+0x1fe>
 801e624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e628:	b004      	add	sp, #16
 801e62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e62e:	4835      	ldr	r0, [pc, #212]	; (801e704 <_printf_i+0x244>)
 801e630:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801e634:	6829      	ldr	r1, [r5, #0]
 801e636:	6823      	ldr	r3, [r4, #0]
 801e638:	f851 6b04 	ldr.w	r6, [r1], #4
 801e63c:	6029      	str	r1, [r5, #0]
 801e63e:	061d      	lsls	r5, r3, #24
 801e640:	d514      	bpl.n	801e66c <_printf_i+0x1ac>
 801e642:	07df      	lsls	r7, r3, #31
 801e644:	bf44      	itt	mi
 801e646:	f043 0320 	orrmi.w	r3, r3, #32
 801e64a:	6023      	strmi	r3, [r4, #0]
 801e64c:	b91e      	cbnz	r6, 801e656 <_printf_i+0x196>
 801e64e:	6823      	ldr	r3, [r4, #0]
 801e650:	f023 0320 	bic.w	r3, r3, #32
 801e654:	6023      	str	r3, [r4, #0]
 801e656:	2310      	movs	r3, #16
 801e658:	e7b0      	b.n	801e5bc <_printf_i+0xfc>
 801e65a:	6823      	ldr	r3, [r4, #0]
 801e65c:	f043 0320 	orr.w	r3, r3, #32
 801e660:	6023      	str	r3, [r4, #0]
 801e662:	2378      	movs	r3, #120	; 0x78
 801e664:	4828      	ldr	r0, [pc, #160]	; (801e708 <_printf_i+0x248>)
 801e666:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e66a:	e7e3      	b.n	801e634 <_printf_i+0x174>
 801e66c:	0659      	lsls	r1, r3, #25
 801e66e:	bf48      	it	mi
 801e670:	b2b6      	uxthmi	r6, r6
 801e672:	e7e6      	b.n	801e642 <_printf_i+0x182>
 801e674:	4615      	mov	r5, r2
 801e676:	e7bb      	b.n	801e5f0 <_printf_i+0x130>
 801e678:	682b      	ldr	r3, [r5, #0]
 801e67a:	6826      	ldr	r6, [r4, #0]
 801e67c:	6961      	ldr	r1, [r4, #20]
 801e67e:	1d18      	adds	r0, r3, #4
 801e680:	6028      	str	r0, [r5, #0]
 801e682:	0635      	lsls	r5, r6, #24
 801e684:	681b      	ldr	r3, [r3, #0]
 801e686:	d501      	bpl.n	801e68c <_printf_i+0x1cc>
 801e688:	6019      	str	r1, [r3, #0]
 801e68a:	e002      	b.n	801e692 <_printf_i+0x1d2>
 801e68c:	0670      	lsls	r0, r6, #25
 801e68e:	d5fb      	bpl.n	801e688 <_printf_i+0x1c8>
 801e690:	8019      	strh	r1, [r3, #0]
 801e692:	2300      	movs	r3, #0
 801e694:	6123      	str	r3, [r4, #16]
 801e696:	4615      	mov	r5, r2
 801e698:	e7ba      	b.n	801e610 <_printf_i+0x150>
 801e69a:	682b      	ldr	r3, [r5, #0]
 801e69c:	1d1a      	adds	r2, r3, #4
 801e69e:	602a      	str	r2, [r5, #0]
 801e6a0:	681d      	ldr	r5, [r3, #0]
 801e6a2:	6862      	ldr	r2, [r4, #4]
 801e6a4:	2100      	movs	r1, #0
 801e6a6:	4628      	mov	r0, r5
 801e6a8:	f7e1 fde2 	bl	8000270 <memchr>
 801e6ac:	b108      	cbz	r0, 801e6b2 <_printf_i+0x1f2>
 801e6ae:	1b40      	subs	r0, r0, r5
 801e6b0:	6060      	str	r0, [r4, #4]
 801e6b2:	6863      	ldr	r3, [r4, #4]
 801e6b4:	6123      	str	r3, [r4, #16]
 801e6b6:	2300      	movs	r3, #0
 801e6b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e6bc:	e7a8      	b.n	801e610 <_printf_i+0x150>
 801e6be:	6923      	ldr	r3, [r4, #16]
 801e6c0:	462a      	mov	r2, r5
 801e6c2:	4649      	mov	r1, r9
 801e6c4:	4640      	mov	r0, r8
 801e6c6:	47d0      	blx	sl
 801e6c8:	3001      	adds	r0, #1
 801e6ca:	d0ab      	beq.n	801e624 <_printf_i+0x164>
 801e6cc:	6823      	ldr	r3, [r4, #0]
 801e6ce:	079b      	lsls	r3, r3, #30
 801e6d0:	d413      	bmi.n	801e6fa <_printf_i+0x23a>
 801e6d2:	68e0      	ldr	r0, [r4, #12]
 801e6d4:	9b03      	ldr	r3, [sp, #12]
 801e6d6:	4298      	cmp	r0, r3
 801e6d8:	bfb8      	it	lt
 801e6da:	4618      	movlt	r0, r3
 801e6dc:	e7a4      	b.n	801e628 <_printf_i+0x168>
 801e6de:	2301      	movs	r3, #1
 801e6e0:	4632      	mov	r2, r6
 801e6e2:	4649      	mov	r1, r9
 801e6e4:	4640      	mov	r0, r8
 801e6e6:	47d0      	blx	sl
 801e6e8:	3001      	adds	r0, #1
 801e6ea:	d09b      	beq.n	801e624 <_printf_i+0x164>
 801e6ec:	3501      	adds	r5, #1
 801e6ee:	68e3      	ldr	r3, [r4, #12]
 801e6f0:	9903      	ldr	r1, [sp, #12]
 801e6f2:	1a5b      	subs	r3, r3, r1
 801e6f4:	42ab      	cmp	r3, r5
 801e6f6:	dcf2      	bgt.n	801e6de <_printf_i+0x21e>
 801e6f8:	e7eb      	b.n	801e6d2 <_printf_i+0x212>
 801e6fa:	2500      	movs	r5, #0
 801e6fc:	f104 0619 	add.w	r6, r4, #25
 801e700:	e7f5      	b.n	801e6ee <_printf_i+0x22e>
 801e702:	bf00      	nop
 801e704:	08022611 	.word	0x08022611
 801e708:	08022622 	.word	0x08022622

0801e70c <_sbrk_r>:
 801e70c:	b538      	push	{r3, r4, r5, lr}
 801e70e:	4d06      	ldr	r5, [pc, #24]	; (801e728 <_sbrk_r+0x1c>)
 801e710:	2300      	movs	r3, #0
 801e712:	4604      	mov	r4, r0
 801e714:	4608      	mov	r0, r1
 801e716:	602b      	str	r3, [r5, #0]
 801e718:	f7e3 fa08 	bl	8001b2c <_sbrk>
 801e71c:	1c43      	adds	r3, r0, #1
 801e71e:	d102      	bne.n	801e726 <_sbrk_r+0x1a>
 801e720:	682b      	ldr	r3, [r5, #0]
 801e722:	b103      	cbz	r3, 801e726 <_sbrk_r+0x1a>
 801e724:	6023      	str	r3, [r4, #0]
 801e726:	bd38      	pop	{r3, r4, r5, pc}
 801e728:	20011524 	.word	0x20011524

0801e72c <__sread>:
 801e72c:	b510      	push	{r4, lr}
 801e72e:	460c      	mov	r4, r1
 801e730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e734:	f000 f8a8 	bl	801e888 <_read_r>
 801e738:	2800      	cmp	r0, #0
 801e73a:	bfab      	itete	ge
 801e73c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e73e:	89a3      	ldrhlt	r3, [r4, #12]
 801e740:	181b      	addge	r3, r3, r0
 801e742:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e746:	bfac      	ite	ge
 801e748:	6563      	strge	r3, [r4, #84]	; 0x54
 801e74a:	81a3      	strhlt	r3, [r4, #12]
 801e74c:	bd10      	pop	{r4, pc}

0801e74e <__swrite>:
 801e74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e752:	461f      	mov	r7, r3
 801e754:	898b      	ldrh	r3, [r1, #12]
 801e756:	05db      	lsls	r3, r3, #23
 801e758:	4605      	mov	r5, r0
 801e75a:	460c      	mov	r4, r1
 801e75c:	4616      	mov	r6, r2
 801e75e:	d505      	bpl.n	801e76c <__swrite+0x1e>
 801e760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e764:	2302      	movs	r3, #2
 801e766:	2200      	movs	r2, #0
 801e768:	f000 f870 	bl	801e84c <_lseek_r>
 801e76c:	89a3      	ldrh	r3, [r4, #12]
 801e76e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e776:	81a3      	strh	r3, [r4, #12]
 801e778:	4632      	mov	r2, r6
 801e77a:	463b      	mov	r3, r7
 801e77c:	4628      	mov	r0, r5
 801e77e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e782:	f000 b817 	b.w	801e7b4 <_write_r>

0801e786 <__sseek>:
 801e786:	b510      	push	{r4, lr}
 801e788:	460c      	mov	r4, r1
 801e78a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e78e:	f000 f85d 	bl	801e84c <_lseek_r>
 801e792:	1c43      	adds	r3, r0, #1
 801e794:	89a3      	ldrh	r3, [r4, #12]
 801e796:	bf15      	itete	ne
 801e798:	6560      	strne	r0, [r4, #84]	; 0x54
 801e79a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e79e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e7a2:	81a3      	strheq	r3, [r4, #12]
 801e7a4:	bf18      	it	ne
 801e7a6:	81a3      	strhne	r3, [r4, #12]
 801e7a8:	bd10      	pop	{r4, pc}

0801e7aa <__sclose>:
 801e7aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e7ae:	f000 b81b 	b.w	801e7e8 <_close_r>
	...

0801e7b4 <_write_r>:
 801e7b4:	b538      	push	{r3, r4, r5, lr}
 801e7b6:	4d07      	ldr	r5, [pc, #28]	; (801e7d4 <_write_r+0x20>)
 801e7b8:	4604      	mov	r4, r0
 801e7ba:	4608      	mov	r0, r1
 801e7bc:	4611      	mov	r1, r2
 801e7be:	2200      	movs	r2, #0
 801e7c0:	602a      	str	r2, [r5, #0]
 801e7c2:	461a      	mov	r2, r3
 801e7c4:	f7e3 f961 	bl	8001a8a <_write>
 801e7c8:	1c43      	adds	r3, r0, #1
 801e7ca:	d102      	bne.n	801e7d2 <_write_r+0x1e>
 801e7cc:	682b      	ldr	r3, [r5, #0]
 801e7ce:	b103      	cbz	r3, 801e7d2 <_write_r+0x1e>
 801e7d0:	6023      	str	r3, [r4, #0]
 801e7d2:	bd38      	pop	{r3, r4, r5, pc}
 801e7d4:	20011524 	.word	0x20011524

0801e7d8 <abort>:
 801e7d8:	b508      	push	{r3, lr}
 801e7da:	2006      	movs	r0, #6
 801e7dc:	f000 f88e 	bl	801e8fc <raise>
 801e7e0:	2001      	movs	r0, #1
 801e7e2:	f7e3 f92b 	bl	8001a3c <_exit>
	...

0801e7e8 <_close_r>:
 801e7e8:	b538      	push	{r3, r4, r5, lr}
 801e7ea:	4d06      	ldr	r5, [pc, #24]	; (801e804 <_close_r+0x1c>)
 801e7ec:	2300      	movs	r3, #0
 801e7ee:	4604      	mov	r4, r0
 801e7f0:	4608      	mov	r0, r1
 801e7f2:	602b      	str	r3, [r5, #0]
 801e7f4:	f7e3 f965 	bl	8001ac2 <_close>
 801e7f8:	1c43      	adds	r3, r0, #1
 801e7fa:	d102      	bne.n	801e802 <_close_r+0x1a>
 801e7fc:	682b      	ldr	r3, [r5, #0]
 801e7fe:	b103      	cbz	r3, 801e802 <_close_r+0x1a>
 801e800:	6023      	str	r3, [r4, #0]
 801e802:	bd38      	pop	{r3, r4, r5, pc}
 801e804:	20011524 	.word	0x20011524

0801e808 <_fstat_r>:
 801e808:	b538      	push	{r3, r4, r5, lr}
 801e80a:	4d07      	ldr	r5, [pc, #28]	; (801e828 <_fstat_r+0x20>)
 801e80c:	2300      	movs	r3, #0
 801e80e:	4604      	mov	r4, r0
 801e810:	4608      	mov	r0, r1
 801e812:	4611      	mov	r1, r2
 801e814:	602b      	str	r3, [r5, #0]
 801e816:	f7e3 f960 	bl	8001ada <_fstat>
 801e81a:	1c43      	adds	r3, r0, #1
 801e81c:	d102      	bne.n	801e824 <_fstat_r+0x1c>
 801e81e:	682b      	ldr	r3, [r5, #0]
 801e820:	b103      	cbz	r3, 801e824 <_fstat_r+0x1c>
 801e822:	6023      	str	r3, [r4, #0]
 801e824:	bd38      	pop	{r3, r4, r5, pc}
 801e826:	bf00      	nop
 801e828:	20011524 	.word	0x20011524

0801e82c <_isatty_r>:
 801e82c:	b538      	push	{r3, r4, r5, lr}
 801e82e:	4d06      	ldr	r5, [pc, #24]	; (801e848 <_isatty_r+0x1c>)
 801e830:	2300      	movs	r3, #0
 801e832:	4604      	mov	r4, r0
 801e834:	4608      	mov	r0, r1
 801e836:	602b      	str	r3, [r5, #0]
 801e838:	f7e3 f95f 	bl	8001afa <_isatty>
 801e83c:	1c43      	adds	r3, r0, #1
 801e83e:	d102      	bne.n	801e846 <_isatty_r+0x1a>
 801e840:	682b      	ldr	r3, [r5, #0]
 801e842:	b103      	cbz	r3, 801e846 <_isatty_r+0x1a>
 801e844:	6023      	str	r3, [r4, #0]
 801e846:	bd38      	pop	{r3, r4, r5, pc}
 801e848:	20011524 	.word	0x20011524

0801e84c <_lseek_r>:
 801e84c:	b538      	push	{r3, r4, r5, lr}
 801e84e:	4d07      	ldr	r5, [pc, #28]	; (801e86c <_lseek_r+0x20>)
 801e850:	4604      	mov	r4, r0
 801e852:	4608      	mov	r0, r1
 801e854:	4611      	mov	r1, r2
 801e856:	2200      	movs	r2, #0
 801e858:	602a      	str	r2, [r5, #0]
 801e85a:	461a      	mov	r2, r3
 801e85c:	f7e3 f958 	bl	8001b10 <_lseek>
 801e860:	1c43      	adds	r3, r0, #1
 801e862:	d102      	bne.n	801e86a <_lseek_r+0x1e>
 801e864:	682b      	ldr	r3, [r5, #0]
 801e866:	b103      	cbz	r3, 801e86a <_lseek_r+0x1e>
 801e868:	6023      	str	r3, [r4, #0]
 801e86a:	bd38      	pop	{r3, r4, r5, pc}
 801e86c:	20011524 	.word	0x20011524

0801e870 <__malloc_lock>:
 801e870:	4801      	ldr	r0, [pc, #4]	; (801e878 <__malloc_lock+0x8>)
 801e872:	f7ff bb0d 	b.w	801de90 <__retarget_lock_acquire_recursive>
 801e876:	bf00      	nop
 801e878:	20011528 	.word	0x20011528

0801e87c <__malloc_unlock>:
 801e87c:	4801      	ldr	r0, [pc, #4]	; (801e884 <__malloc_unlock+0x8>)
 801e87e:	f7ff bb08 	b.w	801de92 <__retarget_lock_release_recursive>
 801e882:	bf00      	nop
 801e884:	20011528 	.word	0x20011528

0801e888 <_read_r>:
 801e888:	b538      	push	{r3, r4, r5, lr}
 801e88a:	4d07      	ldr	r5, [pc, #28]	; (801e8a8 <_read_r+0x20>)
 801e88c:	4604      	mov	r4, r0
 801e88e:	4608      	mov	r0, r1
 801e890:	4611      	mov	r1, r2
 801e892:	2200      	movs	r2, #0
 801e894:	602a      	str	r2, [r5, #0]
 801e896:	461a      	mov	r2, r3
 801e898:	f7e3 f8da 	bl	8001a50 <_read>
 801e89c:	1c43      	adds	r3, r0, #1
 801e89e:	d102      	bne.n	801e8a6 <_read_r+0x1e>
 801e8a0:	682b      	ldr	r3, [r5, #0]
 801e8a2:	b103      	cbz	r3, 801e8a6 <_read_r+0x1e>
 801e8a4:	6023      	str	r3, [r4, #0]
 801e8a6:	bd38      	pop	{r3, r4, r5, pc}
 801e8a8:	20011524 	.word	0x20011524

0801e8ac <_raise_r>:
 801e8ac:	291f      	cmp	r1, #31
 801e8ae:	b538      	push	{r3, r4, r5, lr}
 801e8b0:	4604      	mov	r4, r0
 801e8b2:	460d      	mov	r5, r1
 801e8b4:	d904      	bls.n	801e8c0 <_raise_r+0x14>
 801e8b6:	2316      	movs	r3, #22
 801e8b8:	6003      	str	r3, [r0, #0]
 801e8ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e8be:	bd38      	pop	{r3, r4, r5, pc}
 801e8c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e8c2:	b112      	cbz	r2, 801e8ca <_raise_r+0x1e>
 801e8c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e8c8:	b94b      	cbnz	r3, 801e8de <_raise_r+0x32>
 801e8ca:	4620      	mov	r0, r4
 801e8cc:	f000 f830 	bl	801e930 <_getpid_r>
 801e8d0:	462a      	mov	r2, r5
 801e8d2:	4601      	mov	r1, r0
 801e8d4:	4620      	mov	r0, r4
 801e8d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e8da:	f000 b817 	b.w	801e90c <_kill_r>
 801e8de:	2b01      	cmp	r3, #1
 801e8e0:	d00a      	beq.n	801e8f8 <_raise_r+0x4c>
 801e8e2:	1c59      	adds	r1, r3, #1
 801e8e4:	d103      	bne.n	801e8ee <_raise_r+0x42>
 801e8e6:	2316      	movs	r3, #22
 801e8e8:	6003      	str	r3, [r0, #0]
 801e8ea:	2001      	movs	r0, #1
 801e8ec:	e7e7      	b.n	801e8be <_raise_r+0x12>
 801e8ee:	2400      	movs	r4, #0
 801e8f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e8f4:	4628      	mov	r0, r5
 801e8f6:	4798      	blx	r3
 801e8f8:	2000      	movs	r0, #0
 801e8fa:	e7e0      	b.n	801e8be <_raise_r+0x12>

0801e8fc <raise>:
 801e8fc:	4b02      	ldr	r3, [pc, #8]	; (801e908 <raise+0xc>)
 801e8fe:	4601      	mov	r1, r0
 801e900:	6818      	ldr	r0, [r3, #0]
 801e902:	f7ff bfd3 	b.w	801e8ac <_raise_r>
 801e906:	bf00      	nop
 801e908:	20000030 	.word	0x20000030

0801e90c <_kill_r>:
 801e90c:	b538      	push	{r3, r4, r5, lr}
 801e90e:	4d07      	ldr	r5, [pc, #28]	; (801e92c <_kill_r+0x20>)
 801e910:	2300      	movs	r3, #0
 801e912:	4604      	mov	r4, r0
 801e914:	4608      	mov	r0, r1
 801e916:	4611      	mov	r1, r2
 801e918:	602b      	str	r3, [r5, #0]
 801e91a:	f7e3 f87d 	bl	8001a18 <_kill>
 801e91e:	1c43      	adds	r3, r0, #1
 801e920:	d102      	bne.n	801e928 <_kill_r+0x1c>
 801e922:	682b      	ldr	r3, [r5, #0]
 801e924:	b103      	cbz	r3, 801e928 <_kill_r+0x1c>
 801e926:	6023      	str	r3, [r4, #0]
 801e928:	bd38      	pop	{r3, r4, r5, pc}
 801e92a:	bf00      	nop
 801e92c:	20011524 	.word	0x20011524

0801e930 <_getpid_r>:
 801e930:	f7e3 b86a 	b.w	8001a08 <_getpid>

0801e934 <_init>:
 801e934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e936:	bf00      	nop
 801e938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e93a:	bc08      	pop	{r3}
 801e93c:	469e      	mov	lr, r3
 801e93e:	4770      	bx	lr

0801e940 <_fini>:
 801e940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e942:	bf00      	nop
 801e944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e946:	bc08      	pop	{r3}
 801e948:	469e      	mov	lr, r3
 801e94a:	4770      	bx	lr
